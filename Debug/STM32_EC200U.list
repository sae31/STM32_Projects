
STM32_EC200U.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000988c  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000654  0800994c  0800994c  0001994c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fa0  08009fa0  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  08009fa0  08009fa0  00019fa0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fa8  08009fa8  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fa8  08009fa8  00019fa8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fac  08009fac  00019fac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  08009fb0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000016f4  2000006c  0800a01c  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000700  20001760  0800a01c  00021760  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   00018e84  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003a91  00000000  00000000  00038f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000017a0  00000000  00000000  0003c9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012af  00000000  00000000  0003e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001bafd  00000000  00000000  0003f43f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b4ce  00000000  00000000  0005af3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ac1f5  00000000  00000000  0007640a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005de4  00000000  00000000  00122600  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  001283e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000006c 	.word	0x2000006c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08009934 	.word	0x08009934

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000070 	.word	0x20000070
 8000104:	08009934 	.word	0x08009934

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_shi>:
 8000118:	b403      	push	{r0, r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0040      	lsls	r0, r0, #1
 8000120:	0049      	lsls	r1, r1, #1
 8000122:	5e09      	ldrsh	r1, [r1, r0]
 8000124:	0049      	lsls	r1, r1, #1
 8000126:	448e      	add	lr, r1
 8000128:	bc03      	pop	{r0, r1}
 800012a:	4770      	bx	lr

0800012c <__udivsi3>:
 800012c:	2200      	movs	r2, #0
 800012e:	0843      	lsrs	r3, r0, #1
 8000130:	428b      	cmp	r3, r1
 8000132:	d374      	bcc.n	800021e <__udivsi3+0xf2>
 8000134:	0903      	lsrs	r3, r0, #4
 8000136:	428b      	cmp	r3, r1
 8000138:	d35f      	bcc.n	80001fa <__udivsi3+0xce>
 800013a:	0a03      	lsrs	r3, r0, #8
 800013c:	428b      	cmp	r3, r1
 800013e:	d344      	bcc.n	80001ca <__udivsi3+0x9e>
 8000140:	0b03      	lsrs	r3, r0, #12
 8000142:	428b      	cmp	r3, r1
 8000144:	d328      	bcc.n	8000198 <__udivsi3+0x6c>
 8000146:	0c03      	lsrs	r3, r0, #16
 8000148:	428b      	cmp	r3, r1
 800014a:	d30d      	bcc.n	8000168 <__udivsi3+0x3c>
 800014c:	22ff      	movs	r2, #255	; 0xff
 800014e:	0209      	lsls	r1, r1, #8
 8000150:	ba12      	rev	r2, r2
 8000152:	0c03      	lsrs	r3, r0, #16
 8000154:	428b      	cmp	r3, r1
 8000156:	d302      	bcc.n	800015e <__udivsi3+0x32>
 8000158:	1212      	asrs	r2, r2, #8
 800015a:	0209      	lsls	r1, r1, #8
 800015c:	d065      	beq.n	800022a <__udivsi3+0xfe>
 800015e:	0b03      	lsrs	r3, r0, #12
 8000160:	428b      	cmp	r3, r1
 8000162:	d319      	bcc.n	8000198 <__udivsi3+0x6c>
 8000164:	e000      	b.n	8000168 <__udivsi3+0x3c>
 8000166:	0a09      	lsrs	r1, r1, #8
 8000168:	0bc3      	lsrs	r3, r0, #15
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x46>
 800016e:	03cb      	lsls	r3, r1, #15
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0b83      	lsrs	r3, r0, #14
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x52>
 800017a:	038b      	lsls	r3, r1, #14
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0b43      	lsrs	r3, r0, #13
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x5e>
 8000186:	034b      	lsls	r3, r1, #13
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0b03      	lsrs	r3, r0, #12
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x6a>
 8000192:	030b      	lsls	r3, r1, #12
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0ac3      	lsrs	r3, r0, #11
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x76>
 800019e:	02cb      	lsls	r3, r1, #11
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	0a83      	lsrs	r3, r0, #10
 80001a6:	428b      	cmp	r3, r1
 80001a8:	d301      	bcc.n	80001ae <__udivsi3+0x82>
 80001aa:	028b      	lsls	r3, r1, #10
 80001ac:	1ac0      	subs	r0, r0, r3
 80001ae:	4152      	adcs	r2, r2
 80001b0:	0a43      	lsrs	r3, r0, #9
 80001b2:	428b      	cmp	r3, r1
 80001b4:	d301      	bcc.n	80001ba <__udivsi3+0x8e>
 80001b6:	024b      	lsls	r3, r1, #9
 80001b8:	1ac0      	subs	r0, r0, r3
 80001ba:	4152      	adcs	r2, r2
 80001bc:	0a03      	lsrs	r3, r0, #8
 80001be:	428b      	cmp	r3, r1
 80001c0:	d301      	bcc.n	80001c6 <__udivsi3+0x9a>
 80001c2:	020b      	lsls	r3, r1, #8
 80001c4:	1ac0      	subs	r0, r0, r3
 80001c6:	4152      	adcs	r2, r2
 80001c8:	d2cd      	bcs.n	8000166 <__udivsi3+0x3a>
 80001ca:	09c3      	lsrs	r3, r0, #7
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xa8>
 80001d0:	01cb      	lsls	r3, r1, #7
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	0983      	lsrs	r3, r0, #6
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xb4>
 80001dc:	018b      	lsls	r3, r1, #6
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0943      	lsrs	r3, r0, #5
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xc0>
 80001e8:	014b      	lsls	r3, r1, #5
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0903      	lsrs	r3, r0, #4
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xcc>
 80001f4:	010b      	lsls	r3, r1, #4
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	08c3      	lsrs	r3, r0, #3
 80001fc:	428b      	cmp	r3, r1
 80001fe:	d301      	bcc.n	8000204 <__udivsi3+0xd8>
 8000200:	00cb      	lsls	r3, r1, #3
 8000202:	1ac0      	subs	r0, r0, r3
 8000204:	4152      	adcs	r2, r2
 8000206:	0883      	lsrs	r3, r0, #2
 8000208:	428b      	cmp	r3, r1
 800020a:	d301      	bcc.n	8000210 <__udivsi3+0xe4>
 800020c:	008b      	lsls	r3, r1, #2
 800020e:	1ac0      	subs	r0, r0, r3
 8000210:	4152      	adcs	r2, r2
 8000212:	0843      	lsrs	r3, r0, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d301      	bcc.n	800021c <__udivsi3+0xf0>
 8000218:	004b      	lsls	r3, r1, #1
 800021a:	1ac0      	subs	r0, r0, r3
 800021c:	4152      	adcs	r2, r2
 800021e:	1a41      	subs	r1, r0, r1
 8000220:	d200      	bcs.n	8000224 <__udivsi3+0xf8>
 8000222:	4601      	mov	r1, r0
 8000224:	4152      	adcs	r2, r2
 8000226:	4610      	mov	r0, r2
 8000228:	4770      	bx	lr
 800022a:	e7ff      	b.n	800022c <__udivsi3+0x100>
 800022c:	b501      	push	{r0, lr}
 800022e:	2000      	movs	r0, #0
 8000230:	f000 f8f0 	bl	8000414 <__aeabi_idiv0>
 8000234:	bd02      	pop	{r1, pc}
 8000236:	46c0      	nop			; (mov r8, r8)

08000238 <__aeabi_uidivmod>:
 8000238:	2900      	cmp	r1, #0
 800023a:	d0f7      	beq.n	800022c <__udivsi3+0x100>
 800023c:	e776      	b.n	800012c <__udivsi3>
 800023e:	4770      	bx	lr

08000240 <__divsi3>:
 8000240:	4603      	mov	r3, r0
 8000242:	430b      	orrs	r3, r1
 8000244:	d47f      	bmi.n	8000346 <__divsi3+0x106>
 8000246:	2200      	movs	r2, #0
 8000248:	0843      	lsrs	r3, r0, #1
 800024a:	428b      	cmp	r3, r1
 800024c:	d374      	bcc.n	8000338 <__divsi3+0xf8>
 800024e:	0903      	lsrs	r3, r0, #4
 8000250:	428b      	cmp	r3, r1
 8000252:	d35f      	bcc.n	8000314 <__divsi3+0xd4>
 8000254:	0a03      	lsrs	r3, r0, #8
 8000256:	428b      	cmp	r3, r1
 8000258:	d344      	bcc.n	80002e4 <__divsi3+0xa4>
 800025a:	0b03      	lsrs	r3, r0, #12
 800025c:	428b      	cmp	r3, r1
 800025e:	d328      	bcc.n	80002b2 <__divsi3+0x72>
 8000260:	0c03      	lsrs	r3, r0, #16
 8000262:	428b      	cmp	r3, r1
 8000264:	d30d      	bcc.n	8000282 <__divsi3+0x42>
 8000266:	22ff      	movs	r2, #255	; 0xff
 8000268:	0209      	lsls	r1, r1, #8
 800026a:	ba12      	rev	r2, r2
 800026c:	0c03      	lsrs	r3, r0, #16
 800026e:	428b      	cmp	r3, r1
 8000270:	d302      	bcc.n	8000278 <__divsi3+0x38>
 8000272:	1212      	asrs	r2, r2, #8
 8000274:	0209      	lsls	r1, r1, #8
 8000276:	d065      	beq.n	8000344 <__divsi3+0x104>
 8000278:	0b03      	lsrs	r3, r0, #12
 800027a:	428b      	cmp	r3, r1
 800027c:	d319      	bcc.n	80002b2 <__divsi3+0x72>
 800027e:	e000      	b.n	8000282 <__divsi3+0x42>
 8000280:	0a09      	lsrs	r1, r1, #8
 8000282:	0bc3      	lsrs	r3, r0, #15
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x4c>
 8000288:	03cb      	lsls	r3, r1, #15
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0b83      	lsrs	r3, r0, #14
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x58>
 8000294:	038b      	lsls	r3, r1, #14
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0b43      	lsrs	r3, r0, #13
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x64>
 80002a0:	034b      	lsls	r3, r1, #13
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0b03      	lsrs	r3, r0, #12
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x70>
 80002ac:	030b      	lsls	r3, r1, #12
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0ac3      	lsrs	r3, r0, #11
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0x7c>
 80002b8:	02cb      	lsls	r3, r1, #11
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	0a83      	lsrs	r3, r0, #10
 80002c0:	428b      	cmp	r3, r1
 80002c2:	d301      	bcc.n	80002c8 <__divsi3+0x88>
 80002c4:	028b      	lsls	r3, r1, #10
 80002c6:	1ac0      	subs	r0, r0, r3
 80002c8:	4152      	adcs	r2, r2
 80002ca:	0a43      	lsrs	r3, r0, #9
 80002cc:	428b      	cmp	r3, r1
 80002ce:	d301      	bcc.n	80002d4 <__divsi3+0x94>
 80002d0:	024b      	lsls	r3, r1, #9
 80002d2:	1ac0      	subs	r0, r0, r3
 80002d4:	4152      	adcs	r2, r2
 80002d6:	0a03      	lsrs	r3, r0, #8
 80002d8:	428b      	cmp	r3, r1
 80002da:	d301      	bcc.n	80002e0 <__divsi3+0xa0>
 80002dc:	020b      	lsls	r3, r1, #8
 80002de:	1ac0      	subs	r0, r0, r3
 80002e0:	4152      	adcs	r2, r2
 80002e2:	d2cd      	bcs.n	8000280 <__divsi3+0x40>
 80002e4:	09c3      	lsrs	r3, r0, #7
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xae>
 80002ea:	01cb      	lsls	r3, r1, #7
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	0983      	lsrs	r3, r0, #6
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xba>
 80002f6:	018b      	lsls	r3, r1, #6
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0943      	lsrs	r3, r0, #5
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xc6>
 8000302:	014b      	lsls	r3, r1, #5
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0903      	lsrs	r3, r0, #4
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xd2>
 800030e:	010b      	lsls	r3, r1, #4
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	08c3      	lsrs	r3, r0, #3
 8000316:	428b      	cmp	r3, r1
 8000318:	d301      	bcc.n	800031e <__divsi3+0xde>
 800031a:	00cb      	lsls	r3, r1, #3
 800031c:	1ac0      	subs	r0, r0, r3
 800031e:	4152      	adcs	r2, r2
 8000320:	0883      	lsrs	r3, r0, #2
 8000322:	428b      	cmp	r3, r1
 8000324:	d301      	bcc.n	800032a <__divsi3+0xea>
 8000326:	008b      	lsls	r3, r1, #2
 8000328:	1ac0      	subs	r0, r0, r3
 800032a:	4152      	adcs	r2, r2
 800032c:	0843      	lsrs	r3, r0, #1
 800032e:	428b      	cmp	r3, r1
 8000330:	d301      	bcc.n	8000336 <__divsi3+0xf6>
 8000332:	004b      	lsls	r3, r1, #1
 8000334:	1ac0      	subs	r0, r0, r3
 8000336:	4152      	adcs	r2, r2
 8000338:	1a41      	subs	r1, r0, r1
 800033a:	d200      	bcs.n	800033e <__divsi3+0xfe>
 800033c:	4601      	mov	r1, r0
 800033e:	4152      	adcs	r2, r2
 8000340:	4610      	mov	r0, r2
 8000342:	4770      	bx	lr
 8000344:	e05d      	b.n	8000402 <__divsi3+0x1c2>
 8000346:	0fca      	lsrs	r2, r1, #31
 8000348:	d000      	beq.n	800034c <__divsi3+0x10c>
 800034a:	4249      	negs	r1, r1
 800034c:	1003      	asrs	r3, r0, #32
 800034e:	d300      	bcc.n	8000352 <__divsi3+0x112>
 8000350:	4240      	negs	r0, r0
 8000352:	4053      	eors	r3, r2
 8000354:	2200      	movs	r2, #0
 8000356:	469c      	mov	ip, r3
 8000358:	0903      	lsrs	r3, r0, #4
 800035a:	428b      	cmp	r3, r1
 800035c:	d32d      	bcc.n	80003ba <__divsi3+0x17a>
 800035e:	0a03      	lsrs	r3, r0, #8
 8000360:	428b      	cmp	r3, r1
 8000362:	d312      	bcc.n	800038a <__divsi3+0x14a>
 8000364:	22fc      	movs	r2, #252	; 0xfc
 8000366:	0189      	lsls	r1, r1, #6
 8000368:	ba12      	rev	r2, r2
 800036a:	0a03      	lsrs	r3, r0, #8
 800036c:	428b      	cmp	r3, r1
 800036e:	d30c      	bcc.n	800038a <__divsi3+0x14a>
 8000370:	0189      	lsls	r1, r1, #6
 8000372:	1192      	asrs	r2, r2, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d308      	bcc.n	800038a <__divsi3+0x14a>
 8000378:	0189      	lsls	r1, r1, #6
 800037a:	1192      	asrs	r2, r2, #6
 800037c:	428b      	cmp	r3, r1
 800037e:	d304      	bcc.n	800038a <__divsi3+0x14a>
 8000380:	0189      	lsls	r1, r1, #6
 8000382:	d03a      	beq.n	80003fa <__divsi3+0x1ba>
 8000384:	1192      	asrs	r2, r2, #6
 8000386:	e000      	b.n	800038a <__divsi3+0x14a>
 8000388:	0989      	lsrs	r1, r1, #6
 800038a:	09c3      	lsrs	r3, r0, #7
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x154>
 8000390:	01cb      	lsls	r3, r1, #7
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	0983      	lsrs	r3, r0, #6
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x160>
 800039c:	018b      	lsls	r3, r1, #6
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0943      	lsrs	r3, r0, #5
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x16c>
 80003a8:	014b      	lsls	r3, r1, #5
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	0903      	lsrs	r3, r0, #4
 80003b0:	428b      	cmp	r3, r1
 80003b2:	d301      	bcc.n	80003b8 <__divsi3+0x178>
 80003b4:	010b      	lsls	r3, r1, #4
 80003b6:	1ac0      	subs	r0, r0, r3
 80003b8:	4152      	adcs	r2, r2
 80003ba:	08c3      	lsrs	r3, r0, #3
 80003bc:	428b      	cmp	r3, r1
 80003be:	d301      	bcc.n	80003c4 <__divsi3+0x184>
 80003c0:	00cb      	lsls	r3, r1, #3
 80003c2:	1ac0      	subs	r0, r0, r3
 80003c4:	4152      	adcs	r2, r2
 80003c6:	0883      	lsrs	r3, r0, #2
 80003c8:	428b      	cmp	r3, r1
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x190>
 80003cc:	008b      	lsls	r3, r1, #2
 80003ce:	1ac0      	subs	r0, r0, r3
 80003d0:	4152      	adcs	r2, r2
 80003d2:	d2d9      	bcs.n	8000388 <__divsi3+0x148>
 80003d4:	0843      	lsrs	r3, r0, #1
 80003d6:	428b      	cmp	r3, r1
 80003d8:	d301      	bcc.n	80003de <__divsi3+0x19e>
 80003da:	004b      	lsls	r3, r1, #1
 80003dc:	1ac0      	subs	r0, r0, r3
 80003de:	4152      	adcs	r2, r2
 80003e0:	1a41      	subs	r1, r0, r1
 80003e2:	d200      	bcs.n	80003e6 <__divsi3+0x1a6>
 80003e4:	4601      	mov	r1, r0
 80003e6:	4663      	mov	r3, ip
 80003e8:	4152      	adcs	r2, r2
 80003ea:	105b      	asrs	r3, r3, #1
 80003ec:	4610      	mov	r0, r2
 80003ee:	d301      	bcc.n	80003f4 <__divsi3+0x1b4>
 80003f0:	4240      	negs	r0, r0
 80003f2:	2b00      	cmp	r3, #0
 80003f4:	d500      	bpl.n	80003f8 <__divsi3+0x1b8>
 80003f6:	4249      	negs	r1, r1
 80003f8:	4770      	bx	lr
 80003fa:	4663      	mov	r3, ip
 80003fc:	105b      	asrs	r3, r3, #1
 80003fe:	d300      	bcc.n	8000402 <__divsi3+0x1c2>
 8000400:	4240      	negs	r0, r0
 8000402:	b501      	push	{r0, lr}
 8000404:	2000      	movs	r0, #0
 8000406:	f000 f805 	bl	8000414 <__aeabi_idiv0>
 800040a:	bd02      	pop	{r1, pc}

0800040c <__aeabi_idivmod>:
 800040c:	2900      	cmp	r1, #0
 800040e:	d0f8      	beq.n	8000402 <__divsi3+0x1c2>
 8000410:	e716      	b.n	8000240 <__divsi3>
 8000412:	4770      	bx	lr

08000414 <__aeabi_idiv0>:
 8000414:	4770      	bx	lr
 8000416:	46c0      	nop			; (mov r8, r8)

08000418 <__aeabi_cdrcmple>:
 8000418:	4684      	mov	ip, r0
 800041a:	0010      	movs	r0, r2
 800041c:	4662      	mov	r2, ip
 800041e:	468c      	mov	ip, r1
 8000420:	0019      	movs	r1, r3
 8000422:	4663      	mov	r3, ip
 8000424:	e000      	b.n	8000428 <__aeabi_cdcmpeq>
 8000426:	46c0      	nop			; (mov r8, r8)

08000428 <__aeabi_cdcmpeq>:
 8000428:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800042a:	f000 fd79 	bl	8000f20 <__ledf2>
 800042e:	2800      	cmp	r0, #0
 8000430:	d401      	bmi.n	8000436 <__aeabi_cdcmpeq+0xe>
 8000432:	2100      	movs	r1, #0
 8000434:	42c8      	cmn	r0, r1
 8000436:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000438 <__aeabi_dcmpeq>:
 8000438:	b510      	push	{r4, lr}
 800043a:	f000 fcc9 	bl	8000dd0 <__eqdf2>
 800043e:	4240      	negs	r0, r0
 8000440:	3001      	adds	r0, #1
 8000442:	bd10      	pop	{r4, pc}

08000444 <__aeabi_dcmplt>:
 8000444:	b510      	push	{r4, lr}
 8000446:	f000 fd6b 	bl	8000f20 <__ledf2>
 800044a:	2800      	cmp	r0, #0
 800044c:	db01      	blt.n	8000452 <__aeabi_dcmplt+0xe>
 800044e:	2000      	movs	r0, #0
 8000450:	bd10      	pop	{r4, pc}
 8000452:	2001      	movs	r0, #1
 8000454:	bd10      	pop	{r4, pc}
 8000456:	46c0      	nop			; (mov r8, r8)

08000458 <__aeabi_dcmple>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f000 fd61 	bl	8000f20 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	dd01      	ble.n	8000466 <__aeabi_dcmple+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmpgt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f000 fcf1 	bl	8000e54 <__gedf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dc01      	bgt.n	800047a <__aeabi_dcmpgt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpge>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f000 fce7 	bl	8000e54 <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	da01      	bge.n	800048e <__aeabi_dcmpge+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_uldivmod>:
 8000494:	2b00      	cmp	r3, #0
 8000496:	d111      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 8000498:	2a00      	cmp	r2, #0
 800049a:	d10f      	bne.n	80004bc <__aeabi_uldivmod+0x28>
 800049c:	2900      	cmp	r1, #0
 800049e:	d100      	bne.n	80004a2 <__aeabi_uldivmod+0xe>
 80004a0:	2800      	cmp	r0, #0
 80004a2:	d002      	beq.n	80004aa <__aeabi_uldivmod+0x16>
 80004a4:	2100      	movs	r1, #0
 80004a6:	43c9      	mvns	r1, r1
 80004a8:	0008      	movs	r0, r1
 80004aa:	b407      	push	{r0, r1, r2}
 80004ac:	4802      	ldr	r0, [pc, #8]	; (80004b8 <__aeabi_uldivmod+0x24>)
 80004ae:	a102      	add	r1, pc, #8	; (adr r1, 80004b8 <__aeabi_uldivmod+0x24>)
 80004b0:	1840      	adds	r0, r0, r1
 80004b2:	9002      	str	r0, [sp, #8]
 80004b4:	bd03      	pop	{r0, r1, pc}
 80004b6:	46c0      	nop			; (mov r8, r8)
 80004b8:	ffffff5d 	.word	0xffffff5d
 80004bc:	b403      	push	{r0, r1}
 80004be:	4668      	mov	r0, sp
 80004c0:	b501      	push	{r0, lr}
 80004c2:	9802      	ldr	r0, [sp, #8]
 80004c4:	f000 f858 	bl	8000578 <__udivmoddi4>
 80004c8:	9b01      	ldr	r3, [sp, #4]
 80004ca:	469e      	mov	lr, r3
 80004cc:	b002      	add	sp, #8
 80004ce:	bc0c      	pop	{r2, r3}
 80004d0:	4770      	bx	lr
 80004d2:	46c0      	nop			; (mov r8, r8)

080004d4 <__aeabi_d2uiz>:
 80004d4:	b570      	push	{r4, r5, r6, lr}
 80004d6:	2200      	movs	r2, #0
 80004d8:	4b0c      	ldr	r3, [pc, #48]	; (800050c <__aeabi_d2uiz+0x38>)
 80004da:	0004      	movs	r4, r0
 80004dc:	000d      	movs	r5, r1
 80004de:	f7ff ffcf 	bl	8000480 <__aeabi_dcmpge>
 80004e2:	2800      	cmp	r0, #0
 80004e4:	d104      	bne.n	80004f0 <__aeabi_d2uiz+0x1c>
 80004e6:	0020      	movs	r0, r4
 80004e8:	0029      	movs	r1, r5
 80004ea:	f001 fbdf 	bl	8001cac <__aeabi_d2iz>
 80004ee:	bd70      	pop	{r4, r5, r6, pc}
 80004f0:	4b06      	ldr	r3, [pc, #24]	; (800050c <__aeabi_d2uiz+0x38>)
 80004f2:	2200      	movs	r2, #0
 80004f4:	0020      	movs	r0, r4
 80004f6:	0029      	movs	r1, r5
 80004f8:	f001 f838 	bl	800156c <__aeabi_dsub>
 80004fc:	f001 fbd6 	bl	8001cac <__aeabi_d2iz>
 8000500:	2380      	movs	r3, #128	; 0x80
 8000502:	061b      	lsls	r3, r3, #24
 8000504:	469c      	mov	ip, r3
 8000506:	4460      	add	r0, ip
 8000508:	e7f1      	b.n	80004ee <__aeabi_d2uiz+0x1a>
 800050a:	46c0      	nop			; (mov r8, r8)
 800050c:	41e00000 	.word	0x41e00000

08000510 <__aeabi_d2ulz>:
 8000510:	b570      	push	{r4, r5, r6, lr}
 8000512:	2200      	movs	r2, #0
 8000514:	4b0b      	ldr	r3, [pc, #44]	; (8000544 <__aeabi_d2ulz+0x34>)
 8000516:	000d      	movs	r5, r1
 8000518:	0004      	movs	r4, r0
 800051a:	f000 fd65 	bl	8000fe8 <__aeabi_dmul>
 800051e:	f7ff ffd9 	bl	80004d4 <__aeabi_d2uiz>
 8000522:	0006      	movs	r6, r0
 8000524:	f001 fc28 	bl	8001d78 <__aeabi_ui2d>
 8000528:	2200      	movs	r2, #0
 800052a:	4b07      	ldr	r3, [pc, #28]	; (8000548 <__aeabi_d2ulz+0x38>)
 800052c:	f000 fd5c 	bl	8000fe8 <__aeabi_dmul>
 8000530:	0002      	movs	r2, r0
 8000532:	000b      	movs	r3, r1
 8000534:	0020      	movs	r0, r4
 8000536:	0029      	movs	r1, r5
 8000538:	f001 f818 	bl	800156c <__aeabi_dsub>
 800053c:	f7ff ffca 	bl	80004d4 <__aeabi_d2uiz>
 8000540:	0031      	movs	r1, r6
 8000542:	bd70      	pop	{r4, r5, r6, pc}
 8000544:	3df00000 	.word	0x3df00000
 8000548:	41f00000 	.word	0x41f00000

0800054c <__aeabi_ul2d>:
 800054c:	b570      	push	{r4, r5, r6, lr}
 800054e:	0006      	movs	r6, r0
 8000550:	0008      	movs	r0, r1
 8000552:	f001 fc11 	bl	8001d78 <__aeabi_ui2d>
 8000556:	2200      	movs	r2, #0
 8000558:	4b06      	ldr	r3, [pc, #24]	; (8000574 <__aeabi_ul2d+0x28>)
 800055a:	f000 fd45 	bl	8000fe8 <__aeabi_dmul>
 800055e:	000d      	movs	r5, r1
 8000560:	0004      	movs	r4, r0
 8000562:	0030      	movs	r0, r6
 8000564:	f001 fc08 	bl	8001d78 <__aeabi_ui2d>
 8000568:	002b      	movs	r3, r5
 800056a:	0022      	movs	r2, r4
 800056c:	f000 f8d0 	bl	8000710 <__aeabi_dadd>
 8000570:	bd70      	pop	{r4, r5, r6, pc}
 8000572:	46c0      	nop			; (mov r8, r8)
 8000574:	41f00000 	.word	0x41f00000

08000578 <__udivmoddi4>:
 8000578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800057a:	4657      	mov	r7, sl
 800057c:	464e      	mov	r6, r9
 800057e:	4645      	mov	r5, r8
 8000580:	46de      	mov	lr, fp
 8000582:	b5e0      	push	{r5, r6, r7, lr}
 8000584:	0004      	movs	r4, r0
 8000586:	000d      	movs	r5, r1
 8000588:	4692      	mov	sl, r2
 800058a:	4699      	mov	r9, r3
 800058c:	b083      	sub	sp, #12
 800058e:	428b      	cmp	r3, r1
 8000590:	d830      	bhi.n	80005f4 <__udivmoddi4+0x7c>
 8000592:	d02d      	beq.n	80005f0 <__udivmoddi4+0x78>
 8000594:	4649      	mov	r1, r9
 8000596:	4650      	mov	r0, sl
 8000598:	f001 fc32 	bl	8001e00 <__clzdi2>
 800059c:	0029      	movs	r1, r5
 800059e:	0006      	movs	r6, r0
 80005a0:	0020      	movs	r0, r4
 80005a2:	f001 fc2d 	bl	8001e00 <__clzdi2>
 80005a6:	1a33      	subs	r3, r6, r0
 80005a8:	4698      	mov	r8, r3
 80005aa:	3b20      	subs	r3, #32
 80005ac:	d434      	bmi.n	8000618 <__udivmoddi4+0xa0>
 80005ae:	469b      	mov	fp, r3
 80005b0:	4653      	mov	r3, sl
 80005b2:	465a      	mov	r2, fp
 80005b4:	4093      	lsls	r3, r2
 80005b6:	4642      	mov	r2, r8
 80005b8:	001f      	movs	r7, r3
 80005ba:	4653      	mov	r3, sl
 80005bc:	4093      	lsls	r3, r2
 80005be:	001e      	movs	r6, r3
 80005c0:	42af      	cmp	r7, r5
 80005c2:	d83b      	bhi.n	800063c <__udivmoddi4+0xc4>
 80005c4:	42af      	cmp	r7, r5
 80005c6:	d100      	bne.n	80005ca <__udivmoddi4+0x52>
 80005c8:	e079      	b.n	80006be <__udivmoddi4+0x146>
 80005ca:	465b      	mov	r3, fp
 80005cc:	1ba4      	subs	r4, r4, r6
 80005ce:	41bd      	sbcs	r5, r7
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	da00      	bge.n	80005d6 <__udivmoddi4+0x5e>
 80005d4:	e076      	b.n	80006c4 <__udivmoddi4+0x14c>
 80005d6:	2200      	movs	r2, #0
 80005d8:	2300      	movs	r3, #0
 80005da:	9200      	str	r2, [sp, #0]
 80005dc:	9301      	str	r3, [sp, #4]
 80005de:	2301      	movs	r3, #1
 80005e0:	465a      	mov	r2, fp
 80005e2:	4093      	lsls	r3, r2
 80005e4:	9301      	str	r3, [sp, #4]
 80005e6:	2301      	movs	r3, #1
 80005e8:	4642      	mov	r2, r8
 80005ea:	4093      	lsls	r3, r2
 80005ec:	9300      	str	r3, [sp, #0]
 80005ee:	e029      	b.n	8000644 <__udivmoddi4+0xcc>
 80005f0:	4282      	cmp	r2, r0
 80005f2:	d9cf      	bls.n	8000594 <__udivmoddi4+0x1c>
 80005f4:	2200      	movs	r2, #0
 80005f6:	2300      	movs	r3, #0
 80005f8:	9200      	str	r2, [sp, #0]
 80005fa:	9301      	str	r3, [sp, #4]
 80005fc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80005fe:	2b00      	cmp	r3, #0
 8000600:	d001      	beq.n	8000606 <__udivmoddi4+0x8e>
 8000602:	601c      	str	r4, [r3, #0]
 8000604:	605d      	str	r5, [r3, #4]
 8000606:	9800      	ldr	r0, [sp, #0]
 8000608:	9901      	ldr	r1, [sp, #4]
 800060a:	b003      	add	sp, #12
 800060c:	bcf0      	pop	{r4, r5, r6, r7}
 800060e:	46bb      	mov	fp, r7
 8000610:	46b2      	mov	sl, r6
 8000612:	46a9      	mov	r9, r5
 8000614:	46a0      	mov	r8, r4
 8000616:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000618:	4642      	mov	r2, r8
 800061a:	469b      	mov	fp, r3
 800061c:	2320      	movs	r3, #32
 800061e:	1a9b      	subs	r3, r3, r2
 8000620:	4652      	mov	r2, sl
 8000622:	40da      	lsrs	r2, r3
 8000624:	4641      	mov	r1, r8
 8000626:	0013      	movs	r3, r2
 8000628:	464a      	mov	r2, r9
 800062a:	408a      	lsls	r2, r1
 800062c:	0017      	movs	r7, r2
 800062e:	4642      	mov	r2, r8
 8000630:	431f      	orrs	r7, r3
 8000632:	4653      	mov	r3, sl
 8000634:	4093      	lsls	r3, r2
 8000636:	001e      	movs	r6, r3
 8000638:	42af      	cmp	r7, r5
 800063a:	d9c3      	bls.n	80005c4 <__udivmoddi4+0x4c>
 800063c:	2200      	movs	r2, #0
 800063e:	2300      	movs	r3, #0
 8000640:	9200      	str	r2, [sp, #0]
 8000642:	9301      	str	r3, [sp, #4]
 8000644:	4643      	mov	r3, r8
 8000646:	2b00      	cmp	r3, #0
 8000648:	d0d8      	beq.n	80005fc <__udivmoddi4+0x84>
 800064a:	07fb      	lsls	r3, r7, #31
 800064c:	0872      	lsrs	r2, r6, #1
 800064e:	431a      	orrs	r2, r3
 8000650:	4646      	mov	r6, r8
 8000652:	087b      	lsrs	r3, r7, #1
 8000654:	e00e      	b.n	8000674 <__udivmoddi4+0xfc>
 8000656:	42ab      	cmp	r3, r5
 8000658:	d101      	bne.n	800065e <__udivmoddi4+0xe6>
 800065a:	42a2      	cmp	r2, r4
 800065c:	d80c      	bhi.n	8000678 <__udivmoddi4+0x100>
 800065e:	1aa4      	subs	r4, r4, r2
 8000660:	419d      	sbcs	r5, r3
 8000662:	2001      	movs	r0, #1
 8000664:	1924      	adds	r4, r4, r4
 8000666:	416d      	adcs	r5, r5
 8000668:	2100      	movs	r1, #0
 800066a:	3e01      	subs	r6, #1
 800066c:	1824      	adds	r4, r4, r0
 800066e:	414d      	adcs	r5, r1
 8000670:	2e00      	cmp	r6, #0
 8000672:	d006      	beq.n	8000682 <__udivmoddi4+0x10a>
 8000674:	42ab      	cmp	r3, r5
 8000676:	d9ee      	bls.n	8000656 <__udivmoddi4+0xde>
 8000678:	3e01      	subs	r6, #1
 800067a:	1924      	adds	r4, r4, r4
 800067c:	416d      	adcs	r5, r5
 800067e:	2e00      	cmp	r6, #0
 8000680:	d1f8      	bne.n	8000674 <__udivmoddi4+0xfc>
 8000682:	9800      	ldr	r0, [sp, #0]
 8000684:	9901      	ldr	r1, [sp, #4]
 8000686:	465b      	mov	r3, fp
 8000688:	1900      	adds	r0, r0, r4
 800068a:	4169      	adcs	r1, r5
 800068c:	2b00      	cmp	r3, #0
 800068e:	db24      	blt.n	80006da <__udivmoddi4+0x162>
 8000690:	002b      	movs	r3, r5
 8000692:	465a      	mov	r2, fp
 8000694:	4644      	mov	r4, r8
 8000696:	40d3      	lsrs	r3, r2
 8000698:	002a      	movs	r2, r5
 800069a:	40e2      	lsrs	r2, r4
 800069c:	001c      	movs	r4, r3
 800069e:	465b      	mov	r3, fp
 80006a0:	0015      	movs	r5, r2
 80006a2:	2b00      	cmp	r3, #0
 80006a4:	db2a      	blt.n	80006fc <__udivmoddi4+0x184>
 80006a6:	0026      	movs	r6, r4
 80006a8:	409e      	lsls	r6, r3
 80006aa:	0033      	movs	r3, r6
 80006ac:	0026      	movs	r6, r4
 80006ae:	4647      	mov	r7, r8
 80006b0:	40be      	lsls	r6, r7
 80006b2:	0032      	movs	r2, r6
 80006b4:	1a80      	subs	r0, r0, r2
 80006b6:	4199      	sbcs	r1, r3
 80006b8:	9000      	str	r0, [sp, #0]
 80006ba:	9101      	str	r1, [sp, #4]
 80006bc:	e79e      	b.n	80005fc <__udivmoddi4+0x84>
 80006be:	42a3      	cmp	r3, r4
 80006c0:	d8bc      	bhi.n	800063c <__udivmoddi4+0xc4>
 80006c2:	e782      	b.n	80005ca <__udivmoddi4+0x52>
 80006c4:	4642      	mov	r2, r8
 80006c6:	2320      	movs	r3, #32
 80006c8:	2100      	movs	r1, #0
 80006ca:	1a9b      	subs	r3, r3, r2
 80006cc:	2200      	movs	r2, #0
 80006ce:	9100      	str	r1, [sp, #0]
 80006d0:	9201      	str	r2, [sp, #4]
 80006d2:	2201      	movs	r2, #1
 80006d4:	40da      	lsrs	r2, r3
 80006d6:	9201      	str	r2, [sp, #4]
 80006d8:	e785      	b.n	80005e6 <__udivmoddi4+0x6e>
 80006da:	4642      	mov	r2, r8
 80006dc:	2320      	movs	r3, #32
 80006de:	1a9b      	subs	r3, r3, r2
 80006e0:	002a      	movs	r2, r5
 80006e2:	4646      	mov	r6, r8
 80006e4:	409a      	lsls	r2, r3
 80006e6:	0023      	movs	r3, r4
 80006e8:	40f3      	lsrs	r3, r6
 80006ea:	4644      	mov	r4, r8
 80006ec:	4313      	orrs	r3, r2
 80006ee:	002a      	movs	r2, r5
 80006f0:	40e2      	lsrs	r2, r4
 80006f2:	001c      	movs	r4, r3
 80006f4:	465b      	mov	r3, fp
 80006f6:	0015      	movs	r5, r2
 80006f8:	2b00      	cmp	r3, #0
 80006fa:	dad4      	bge.n	80006a6 <__udivmoddi4+0x12e>
 80006fc:	4642      	mov	r2, r8
 80006fe:	002f      	movs	r7, r5
 8000700:	2320      	movs	r3, #32
 8000702:	0026      	movs	r6, r4
 8000704:	4097      	lsls	r7, r2
 8000706:	1a9b      	subs	r3, r3, r2
 8000708:	40de      	lsrs	r6, r3
 800070a:	003b      	movs	r3, r7
 800070c:	4333      	orrs	r3, r6
 800070e:	e7cd      	b.n	80006ac <__udivmoddi4+0x134>

08000710 <__aeabi_dadd>:
 8000710:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000712:	464f      	mov	r7, r9
 8000714:	4646      	mov	r6, r8
 8000716:	46d6      	mov	lr, sl
 8000718:	0004      	movs	r4, r0
 800071a:	b5c0      	push	{r6, r7, lr}
 800071c:	001f      	movs	r7, r3
 800071e:	030b      	lsls	r3, r1, #12
 8000720:	0010      	movs	r0, r2
 8000722:	004e      	lsls	r6, r1, #1
 8000724:	0a5b      	lsrs	r3, r3, #9
 8000726:	0fcd      	lsrs	r5, r1, #31
 8000728:	0f61      	lsrs	r1, r4, #29
 800072a:	007a      	lsls	r2, r7, #1
 800072c:	4319      	orrs	r1, r3
 800072e:	00e3      	lsls	r3, r4, #3
 8000730:	033c      	lsls	r4, r7, #12
 8000732:	0fff      	lsrs	r7, r7, #31
 8000734:	46bc      	mov	ip, r7
 8000736:	0a64      	lsrs	r4, r4, #9
 8000738:	0f47      	lsrs	r7, r0, #29
 800073a:	4327      	orrs	r7, r4
 800073c:	0d76      	lsrs	r6, r6, #21
 800073e:	0d52      	lsrs	r2, r2, #21
 8000740:	00c0      	lsls	r0, r0, #3
 8000742:	46b9      	mov	r9, r7
 8000744:	4680      	mov	r8, r0
 8000746:	1ab7      	subs	r7, r6, r2
 8000748:	4565      	cmp	r5, ip
 800074a:	d100      	bne.n	800074e <__aeabi_dadd+0x3e>
 800074c:	e09b      	b.n	8000886 <__aeabi_dadd+0x176>
 800074e:	2f00      	cmp	r7, #0
 8000750:	dc00      	bgt.n	8000754 <__aeabi_dadd+0x44>
 8000752:	e084      	b.n	800085e <__aeabi_dadd+0x14e>
 8000754:	2a00      	cmp	r2, #0
 8000756:	d100      	bne.n	800075a <__aeabi_dadd+0x4a>
 8000758:	e0be      	b.n	80008d8 <__aeabi_dadd+0x1c8>
 800075a:	4ac8      	ldr	r2, [pc, #800]	; (8000a7c <__aeabi_dadd+0x36c>)
 800075c:	4296      	cmp	r6, r2
 800075e:	d100      	bne.n	8000762 <__aeabi_dadd+0x52>
 8000760:	e124      	b.n	80009ac <__aeabi_dadd+0x29c>
 8000762:	2280      	movs	r2, #128	; 0x80
 8000764:	464c      	mov	r4, r9
 8000766:	0412      	lsls	r2, r2, #16
 8000768:	4314      	orrs	r4, r2
 800076a:	46a1      	mov	r9, r4
 800076c:	2f38      	cmp	r7, #56	; 0x38
 800076e:	dd00      	ble.n	8000772 <__aeabi_dadd+0x62>
 8000770:	e167      	b.n	8000a42 <__aeabi_dadd+0x332>
 8000772:	2f1f      	cmp	r7, #31
 8000774:	dd00      	ble.n	8000778 <__aeabi_dadd+0x68>
 8000776:	e1d6      	b.n	8000b26 <__aeabi_dadd+0x416>
 8000778:	2220      	movs	r2, #32
 800077a:	464c      	mov	r4, r9
 800077c:	1bd2      	subs	r2, r2, r7
 800077e:	4094      	lsls	r4, r2
 8000780:	46a2      	mov	sl, r4
 8000782:	4644      	mov	r4, r8
 8000784:	40fc      	lsrs	r4, r7
 8000786:	0020      	movs	r0, r4
 8000788:	4654      	mov	r4, sl
 800078a:	4304      	orrs	r4, r0
 800078c:	4640      	mov	r0, r8
 800078e:	4090      	lsls	r0, r2
 8000790:	1e42      	subs	r2, r0, #1
 8000792:	4190      	sbcs	r0, r2
 8000794:	464a      	mov	r2, r9
 8000796:	40fa      	lsrs	r2, r7
 8000798:	4304      	orrs	r4, r0
 800079a:	1a89      	subs	r1, r1, r2
 800079c:	1b1c      	subs	r4, r3, r4
 800079e:	42a3      	cmp	r3, r4
 80007a0:	4192      	sbcs	r2, r2
 80007a2:	4252      	negs	r2, r2
 80007a4:	1a8b      	subs	r3, r1, r2
 80007a6:	469a      	mov	sl, r3
 80007a8:	4653      	mov	r3, sl
 80007aa:	021b      	lsls	r3, r3, #8
 80007ac:	d400      	bmi.n	80007b0 <__aeabi_dadd+0xa0>
 80007ae:	e0d4      	b.n	800095a <__aeabi_dadd+0x24a>
 80007b0:	4653      	mov	r3, sl
 80007b2:	025a      	lsls	r2, r3, #9
 80007b4:	0a53      	lsrs	r3, r2, #9
 80007b6:	469a      	mov	sl, r3
 80007b8:	4653      	mov	r3, sl
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d100      	bne.n	80007c0 <__aeabi_dadd+0xb0>
 80007be:	e104      	b.n	80009ca <__aeabi_dadd+0x2ba>
 80007c0:	4650      	mov	r0, sl
 80007c2:	f001 faff 	bl	8001dc4 <__clzsi2>
 80007c6:	0003      	movs	r3, r0
 80007c8:	3b08      	subs	r3, #8
 80007ca:	2220      	movs	r2, #32
 80007cc:	0020      	movs	r0, r4
 80007ce:	1ad2      	subs	r2, r2, r3
 80007d0:	4651      	mov	r1, sl
 80007d2:	40d0      	lsrs	r0, r2
 80007d4:	4099      	lsls	r1, r3
 80007d6:	0002      	movs	r2, r0
 80007d8:	409c      	lsls	r4, r3
 80007da:	430a      	orrs	r2, r1
 80007dc:	42b3      	cmp	r3, r6
 80007de:	da00      	bge.n	80007e2 <__aeabi_dadd+0xd2>
 80007e0:	e102      	b.n	80009e8 <__aeabi_dadd+0x2d8>
 80007e2:	1b9b      	subs	r3, r3, r6
 80007e4:	1c59      	adds	r1, r3, #1
 80007e6:	291f      	cmp	r1, #31
 80007e8:	dd00      	ble.n	80007ec <__aeabi_dadd+0xdc>
 80007ea:	e0a7      	b.n	800093c <__aeabi_dadd+0x22c>
 80007ec:	2320      	movs	r3, #32
 80007ee:	0010      	movs	r0, r2
 80007f0:	0026      	movs	r6, r4
 80007f2:	1a5b      	subs	r3, r3, r1
 80007f4:	409c      	lsls	r4, r3
 80007f6:	4098      	lsls	r0, r3
 80007f8:	40ce      	lsrs	r6, r1
 80007fa:	40ca      	lsrs	r2, r1
 80007fc:	1e63      	subs	r3, r4, #1
 80007fe:	419c      	sbcs	r4, r3
 8000800:	4330      	orrs	r0, r6
 8000802:	4692      	mov	sl, r2
 8000804:	2600      	movs	r6, #0
 8000806:	4304      	orrs	r4, r0
 8000808:	0763      	lsls	r3, r4, #29
 800080a:	d009      	beq.n	8000820 <__aeabi_dadd+0x110>
 800080c:	230f      	movs	r3, #15
 800080e:	4023      	ands	r3, r4
 8000810:	2b04      	cmp	r3, #4
 8000812:	d005      	beq.n	8000820 <__aeabi_dadd+0x110>
 8000814:	1d23      	adds	r3, r4, #4
 8000816:	42a3      	cmp	r3, r4
 8000818:	41a4      	sbcs	r4, r4
 800081a:	4264      	negs	r4, r4
 800081c:	44a2      	add	sl, r4
 800081e:	001c      	movs	r4, r3
 8000820:	4653      	mov	r3, sl
 8000822:	021b      	lsls	r3, r3, #8
 8000824:	d400      	bmi.n	8000828 <__aeabi_dadd+0x118>
 8000826:	e09b      	b.n	8000960 <__aeabi_dadd+0x250>
 8000828:	4b94      	ldr	r3, [pc, #592]	; (8000a7c <__aeabi_dadd+0x36c>)
 800082a:	3601      	adds	r6, #1
 800082c:	429e      	cmp	r6, r3
 800082e:	d100      	bne.n	8000832 <__aeabi_dadd+0x122>
 8000830:	e0b8      	b.n	80009a4 <__aeabi_dadd+0x294>
 8000832:	4653      	mov	r3, sl
 8000834:	4992      	ldr	r1, [pc, #584]	; (8000a80 <__aeabi_dadd+0x370>)
 8000836:	08e4      	lsrs	r4, r4, #3
 8000838:	400b      	ands	r3, r1
 800083a:	0019      	movs	r1, r3
 800083c:	075b      	lsls	r3, r3, #29
 800083e:	4323      	orrs	r3, r4
 8000840:	0572      	lsls	r2, r6, #21
 8000842:	024c      	lsls	r4, r1, #9
 8000844:	0b24      	lsrs	r4, r4, #12
 8000846:	0d52      	lsrs	r2, r2, #21
 8000848:	0512      	lsls	r2, r2, #20
 800084a:	07ed      	lsls	r5, r5, #31
 800084c:	4322      	orrs	r2, r4
 800084e:	432a      	orrs	r2, r5
 8000850:	0018      	movs	r0, r3
 8000852:	0011      	movs	r1, r2
 8000854:	bce0      	pop	{r5, r6, r7}
 8000856:	46ba      	mov	sl, r7
 8000858:	46b1      	mov	r9, r6
 800085a:	46a8      	mov	r8, r5
 800085c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800085e:	2f00      	cmp	r7, #0
 8000860:	d048      	beq.n	80008f4 <__aeabi_dadd+0x1e4>
 8000862:	1b97      	subs	r7, r2, r6
 8000864:	2e00      	cmp	r6, #0
 8000866:	d000      	beq.n	800086a <__aeabi_dadd+0x15a>
 8000868:	e10e      	b.n	8000a88 <__aeabi_dadd+0x378>
 800086a:	000c      	movs	r4, r1
 800086c:	431c      	orrs	r4, r3
 800086e:	d100      	bne.n	8000872 <__aeabi_dadd+0x162>
 8000870:	e1b7      	b.n	8000be2 <__aeabi_dadd+0x4d2>
 8000872:	1e7c      	subs	r4, r7, #1
 8000874:	2f01      	cmp	r7, #1
 8000876:	d100      	bne.n	800087a <__aeabi_dadd+0x16a>
 8000878:	e226      	b.n	8000cc8 <__aeabi_dadd+0x5b8>
 800087a:	4d80      	ldr	r5, [pc, #512]	; (8000a7c <__aeabi_dadd+0x36c>)
 800087c:	42af      	cmp	r7, r5
 800087e:	d100      	bne.n	8000882 <__aeabi_dadd+0x172>
 8000880:	e1d5      	b.n	8000c2e <__aeabi_dadd+0x51e>
 8000882:	0027      	movs	r7, r4
 8000884:	e107      	b.n	8000a96 <__aeabi_dadd+0x386>
 8000886:	2f00      	cmp	r7, #0
 8000888:	dc00      	bgt.n	800088c <__aeabi_dadd+0x17c>
 800088a:	e0b2      	b.n	80009f2 <__aeabi_dadd+0x2e2>
 800088c:	2a00      	cmp	r2, #0
 800088e:	d047      	beq.n	8000920 <__aeabi_dadd+0x210>
 8000890:	4a7a      	ldr	r2, [pc, #488]	; (8000a7c <__aeabi_dadd+0x36c>)
 8000892:	4296      	cmp	r6, r2
 8000894:	d100      	bne.n	8000898 <__aeabi_dadd+0x188>
 8000896:	e089      	b.n	80009ac <__aeabi_dadd+0x29c>
 8000898:	2280      	movs	r2, #128	; 0x80
 800089a:	464c      	mov	r4, r9
 800089c:	0412      	lsls	r2, r2, #16
 800089e:	4314      	orrs	r4, r2
 80008a0:	46a1      	mov	r9, r4
 80008a2:	2f38      	cmp	r7, #56	; 0x38
 80008a4:	dc6b      	bgt.n	800097e <__aeabi_dadd+0x26e>
 80008a6:	2f1f      	cmp	r7, #31
 80008a8:	dc00      	bgt.n	80008ac <__aeabi_dadd+0x19c>
 80008aa:	e16e      	b.n	8000b8a <__aeabi_dadd+0x47a>
 80008ac:	003a      	movs	r2, r7
 80008ae:	4648      	mov	r0, r9
 80008b0:	3a20      	subs	r2, #32
 80008b2:	40d0      	lsrs	r0, r2
 80008b4:	4684      	mov	ip, r0
 80008b6:	2f20      	cmp	r7, #32
 80008b8:	d007      	beq.n	80008ca <__aeabi_dadd+0x1ba>
 80008ba:	2240      	movs	r2, #64	; 0x40
 80008bc:	4648      	mov	r0, r9
 80008be:	1bd2      	subs	r2, r2, r7
 80008c0:	4090      	lsls	r0, r2
 80008c2:	0002      	movs	r2, r0
 80008c4:	4640      	mov	r0, r8
 80008c6:	4310      	orrs	r0, r2
 80008c8:	4680      	mov	r8, r0
 80008ca:	4640      	mov	r0, r8
 80008cc:	1e42      	subs	r2, r0, #1
 80008ce:	4190      	sbcs	r0, r2
 80008d0:	4662      	mov	r2, ip
 80008d2:	0004      	movs	r4, r0
 80008d4:	4314      	orrs	r4, r2
 80008d6:	e057      	b.n	8000988 <__aeabi_dadd+0x278>
 80008d8:	464a      	mov	r2, r9
 80008da:	4302      	orrs	r2, r0
 80008dc:	d100      	bne.n	80008e0 <__aeabi_dadd+0x1d0>
 80008de:	e103      	b.n	8000ae8 <__aeabi_dadd+0x3d8>
 80008e0:	1e7a      	subs	r2, r7, #1
 80008e2:	2f01      	cmp	r7, #1
 80008e4:	d100      	bne.n	80008e8 <__aeabi_dadd+0x1d8>
 80008e6:	e193      	b.n	8000c10 <__aeabi_dadd+0x500>
 80008e8:	4c64      	ldr	r4, [pc, #400]	; (8000a7c <__aeabi_dadd+0x36c>)
 80008ea:	42a7      	cmp	r7, r4
 80008ec:	d100      	bne.n	80008f0 <__aeabi_dadd+0x1e0>
 80008ee:	e18a      	b.n	8000c06 <__aeabi_dadd+0x4f6>
 80008f0:	0017      	movs	r7, r2
 80008f2:	e73b      	b.n	800076c <__aeabi_dadd+0x5c>
 80008f4:	4c63      	ldr	r4, [pc, #396]	; (8000a84 <__aeabi_dadd+0x374>)
 80008f6:	1c72      	adds	r2, r6, #1
 80008f8:	4222      	tst	r2, r4
 80008fa:	d000      	beq.n	80008fe <__aeabi_dadd+0x1ee>
 80008fc:	e0e0      	b.n	8000ac0 <__aeabi_dadd+0x3b0>
 80008fe:	000a      	movs	r2, r1
 8000900:	431a      	orrs	r2, r3
 8000902:	2e00      	cmp	r6, #0
 8000904:	d000      	beq.n	8000908 <__aeabi_dadd+0x1f8>
 8000906:	e174      	b.n	8000bf2 <__aeabi_dadd+0x4e2>
 8000908:	2a00      	cmp	r2, #0
 800090a:	d100      	bne.n	800090e <__aeabi_dadd+0x1fe>
 800090c:	e1d0      	b.n	8000cb0 <__aeabi_dadd+0x5a0>
 800090e:	464a      	mov	r2, r9
 8000910:	4302      	orrs	r2, r0
 8000912:	d000      	beq.n	8000916 <__aeabi_dadd+0x206>
 8000914:	e1e3      	b.n	8000cde <__aeabi_dadd+0x5ce>
 8000916:	074a      	lsls	r2, r1, #29
 8000918:	08db      	lsrs	r3, r3, #3
 800091a:	4313      	orrs	r3, r2
 800091c:	08c9      	lsrs	r1, r1, #3
 800091e:	e029      	b.n	8000974 <__aeabi_dadd+0x264>
 8000920:	464a      	mov	r2, r9
 8000922:	4302      	orrs	r2, r0
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x218>
 8000926:	e17d      	b.n	8000c24 <__aeabi_dadd+0x514>
 8000928:	1e7a      	subs	r2, r7, #1
 800092a:	2f01      	cmp	r7, #1
 800092c:	d100      	bne.n	8000930 <__aeabi_dadd+0x220>
 800092e:	e0e0      	b.n	8000af2 <__aeabi_dadd+0x3e2>
 8000930:	4c52      	ldr	r4, [pc, #328]	; (8000a7c <__aeabi_dadd+0x36c>)
 8000932:	42a7      	cmp	r7, r4
 8000934:	d100      	bne.n	8000938 <__aeabi_dadd+0x228>
 8000936:	e166      	b.n	8000c06 <__aeabi_dadd+0x4f6>
 8000938:	0017      	movs	r7, r2
 800093a:	e7b2      	b.n	80008a2 <__aeabi_dadd+0x192>
 800093c:	0010      	movs	r0, r2
 800093e:	3b1f      	subs	r3, #31
 8000940:	40d8      	lsrs	r0, r3
 8000942:	2920      	cmp	r1, #32
 8000944:	d003      	beq.n	800094e <__aeabi_dadd+0x23e>
 8000946:	2340      	movs	r3, #64	; 0x40
 8000948:	1a5b      	subs	r3, r3, r1
 800094a:	409a      	lsls	r2, r3
 800094c:	4314      	orrs	r4, r2
 800094e:	1e63      	subs	r3, r4, #1
 8000950:	419c      	sbcs	r4, r3
 8000952:	2300      	movs	r3, #0
 8000954:	2600      	movs	r6, #0
 8000956:	469a      	mov	sl, r3
 8000958:	4304      	orrs	r4, r0
 800095a:	0763      	lsls	r3, r4, #29
 800095c:	d000      	beq.n	8000960 <__aeabi_dadd+0x250>
 800095e:	e755      	b.n	800080c <__aeabi_dadd+0xfc>
 8000960:	4652      	mov	r2, sl
 8000962:	08e3      	lsrs	r3, r4, #3
 8000964:	0752      	lsls	r2, r2, #29
 8000966:	4313      	orrs	r3, r2
 8000968:	4652      	mov	r2, sl
 800096a:	0037      	movs	r7, r6
 800096c:	08d1      	lsrs	r1, r2, #3
 800096e:	4a43      	ldr	r2, [pc, #268]	; (8000a7c <__aeabi_dadd+0x36c>)
 8000970:	4297      	cmp	r7, r2
 8000972:	d01f      	beq.n	80009b4 <__aeabi_dadd+0x2a4>
 8000974:	0309      	lsls	r1, r1, #12
 8000976:	057a      	lsls	r2, r7, #21
 8000978:	0b0c      	lsrs	r4, r1, #12
 800097a:	0d52      	lsrs	r2, r2, #21
 800097c:	e764      	b.n	8000848 <__aeabi_dadd+0x138>
 800097e:	4642      	mov	r2, r8
 8000980:	464c      	mov	r4, r9
 8000982:	4314      	orrs	r4, r2
 8000984:	1e62      	subs	r2, r4, #1
 8000986:	4194      	sbcs	r4, r2
 8000988:	18e4      	adds	r4, r4, r3
 800098a:	429c      	cmp	r4, r3
 800098c:	4192      	sbcs	r2, r2
 800098e:	4252      	negs	r2, r2
 8000990:	4692      	mov	sl, r2
 8000992:	448a      	add	sl, r1
 8000994:	4653      	mov	r3, sl
 8000996:	021b      	lsls	r3, r3, #8
 8000998:	d5df      	bpl.n	800095a <__aeabi_dadd+0x24a>
 800099a:	4b38      	ldr	r3, [pc, #224]	; (8000a7c <__aeabi_dadd+0x36c>)
 800099c:	3601      	adds	r6, #1
 800099e:	429e      	cmp	r6, r3
 80009a0:	d000      	beq.n	80009a4 <__aeabi_dadd+0x294>
 80009a2:	e0b3      	b.n	8000b0c <__aeabi_dadd+0x3fc>
 80009a4:	0032      	movs	r2, r6
 80009a6:	2400      	movs	r4, #0
 80009a8:	2300      	movs	r3, #0
 80009aa:	e74d      	b.n	8000848 <__aeabi_dadd+0x138>
 80009ac:	074a      	lsls	r2, r1, #29
 80009ae:	08db      	lsrs	r3, r3, #3
 80009b0:	4313      	orrs	r3, r2
 80009b2:	08c9      	lsrs	r1, r1, #3
 80009b4:	001a      	movs	r2, r3
 80009b6:	430a      	orrs	r2, r1
 80009b8:	d100      	bne.n	80009bc <__aeabi_dadd+0x2ac>
 80009ba:	e200      	b.n	8000dbe <__aeabi_dadd+0x6ae>
 80009bc:	2480      	movs	r4, #128	; 0x80
 80009be:	0324      	lsls	r4, r4, #12
 80009c0:	430c      	orrs	r4, r1
 80009c2:	0324      	lsls	r4, r4, #12
 80009c4:	4a2d      	ldr	r2, [pc, #180]	; (8000a7c <__aeabi_dadd+0x36c>)
 80009c6:	0b24      	lsrs	r4, r4, #12
 80009c8:	e73e      	b.n	8000848 <__aeabi_dadd+0x138>
 80009ca:	0020      	movs	r0, r4
 80009cc:	f001 f9fa 	bl	8001dc4 <__clzsi2>
 80009d0:	0003      	movs	r3, r0
 80009d2:	3318      	adds	r3, #24
 80009d4:	2b1f      	cmp	r3, #31
 80009d6:	dc00      	bgt.n	80009da <__aeabi_dadd+0x2ca>
 80009d8:	e6f7      	b.n	80007ca <__aeabi_dadd+0xba>
 80009da:	0022      	movs	r2, r4
 80009dc:	3808      	subs	r0, #8
 80009de:	4082      	lsls	r2, r0
 80009e0:	2400      	movs	r4, #0
 80009e2:	42b3      	cmp	r3, r6
 80009e4:	db00      	blt.n	80009e8 <__aeabi_dadd+0x2d8>
 80009e6:	e6fc      	b.n	80007e2 <__aeabi_dadd+0xd2>
 80009e8:	1af6      	subs	r6, r6, r3
 80009ea:	4b25      	ldr	r3, [pc, #148]	; (8000a80 <__aeabi_dadd+0x370>)
 80009ec:	401a      	ands	r2, r3
 80009ee:	4692      	mov	sl, r2
 80009f0:	e70a      	b.n	8000808 <__aeabi_dadd+0xf8>
 80009f2:	2f00      	cmp	r7, #0
 80009f4:	d02b      	beq.n	8000a4e <__aeabi_dadd+0x33e>
 80009f6:	1b97      	subs	r7, r2, r6
 80009f8:	2e00      	cmp	r6, #0
 80009fa:	d100      	bne.n	80009fe <__aeabi_dadd+0x2ee>
 80009fc:	e0b8      	b.n	8000b70 <__aeabi_dadd+0x460>
 80009fe:	4c1f      	ldr	r4, [pc, #124]	; (8000a7c <__aeabi_dadd+0x36c>)
 8000a00:	42a2      	cmp	r2, r4
 8000a02:	d100      	bne.n	8000a06 <__aeabi_dadd+0x2f6>
 8000a04:	e11c      	b.n	8000c40 <__aeabi_dadd+0x530>
 8000a06:	2480      	movs	r4, #128	; 0x80
 8000a08:	0424      	lsls	r4, r4, #16
 8000a0a:	4321      	orrs	r1, r4
 8000a0c:	2f38      	cmp	r7, #56	; 0x38
 8000a0e:	dd00      	ble.n	8000a12 <__aeabi_dadd+0x302>
 8000a10:	e11e      	b.n	8000c50 <__aeabi_dadd+0x540>
 8000a12:	2f1f      	cmp	r7, #31
 8000a14:	dd00      	ble.n	8000a18 <__aeabi_dadd+0x308>
 8000a16:	e19e      	b.n	8000d56 <__aeabi_dadd+0x646>
 8000a18:	2620      	movs	r6, #32
 8000a1a:	000c      	movs	r4, r1
 8000a1c:	1bf6      	subs	r6, r6, r7
 8000a1e:	0018      	movs	r0, r3
 8000a20:	40b3      	lsls	r3, r6
 8000a22:	40b4      	lsls	r4, r6
 8000a24:	40f8      	lsrs	r0, r7
 8000a26:	1e5e      	subs	r6, r3, #1
 8000a28:	41b3      	sbcs	r3, r6
 8000a2a:	40f9      	lsrs	r1, r7
 8000a2c:	4304      	orrs	r4, r0
 8000a2e:	431c      	orrs	r4, r3
 8000a30:	4489      	add	r9, r1
 8000a32:	4444      	add	r4, r8
 8000a34:	4544      	cmp	r4, r8
 8000a36:	419b      	sbcs	r3, r3
 8000a38:	425b      	negs	r3, r3
 8000a3a:	444b      	add	r3, r9
 8000a3c:	469a      	mov	sl, r3
 8000a3e:	0016      	movs	r6, r2
 8000a40:	e7a8      	b.n	8000994 <__aeabi_dadd+0x284>
 8000a42:	4642      	mov	r2, r8
 8000a44:	464c      	mov	r4, r9
 8000a46:	4314      	orrs	r4, r2
 8000a48:	1e62      	subs	r2, r4, #1
 8000a4a:	4194      	sbcs	r4, r2
 8000a4c:	e6a6      	b.n	800079c <__aeabi_dadd+0x8c>
 8000a4e:	4c0d      	ldr	r4, [pc, #52]	; (8000a84 <__aeabi_dadd+0x374>)
 8000a50:	1c72      	adds	r2, r6, #1
 8000a52:	4222      	tst	r2, r4
 8000a54:	d000      	beq.n	8000a58 <__aeabi_dadd+0x348>
 8000a56:	e0a8      	b.n	8000baa <__aeabi_dadd+0x49a>
 8000a58:	000a      	movs	r2, r1
 8000a5a:	431a      	orrs	r2, r3
 8000a5c:	2e00      	cmp	r6, #0
 8000a5e:	d000      	beq.n	8000a62 <__aeabi_dadd+0x352>
 8000a60:	e10a      	b.n	8000c78 <__aeabi_dadd+0x568>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d100      	bne.n	8000a68 <__aeabi_dadd+0x358>
 8000a66:	e15e      	b.n	8000d26 <__aeabi_dadd+0x616>
 8000a68:	464a      	mov	r2, r9
 8000a6a:	4302      	orrs	r2, r0
 8000a6c:	d000      	beq.n	8000a70 <__aeabi_dadd+0x360>
 8000a6e:	e161      	b.n	8000d34 <__aeabi_dadd+0x624>
 8000a70:	074a      	lsls	r2, r1, #29
 8000a72:	08db      	lsrs	r3, r3, #3
 8000a74:	4313      	orrs	r3, r2
 8000a76:	08c9      	lsrs	r1, r1, #3
 8000a78:	e77c      	b.n	8000974 <__aeabi_dadd+0x264>
 8000a7a:	46c0      	nop			; (mov r8, r8)
 8000a7c:	000007ff 	.word	0x000007ff
 8000a80:	ff7fffff 	.word	0xff7fffff
 8000a84:	000007fe 	.word	0x000007fe
 8000a88:	4ccf      	ldr	r4, [pc, #828]	; (8000dc8 <__aeabi_dadd+0x6b8>)
 8000a8a:	42a2      	cmp	r2, r4
 8000a8c:	d100      	bne.n	8000a90 <__aeabi_dadd+0x380>
 8000a8e:	e0ce      	b.n	8000c2e <__aeabi_dadd+0x51e>
 8000a90:	2480      	movs	r4, #128	; 0x80
 8000a92:	0424      	lsls	r4, r4, #16
 8000a94:	4321      	orrs	r1, r4
 8000a96:	2f38      	cmp	r7, #56	; 0x38
 8000a98:	dc5b      	bgt.n	8000b52 <__aeabi_dadd+0x442>
 8000a9a:	2f1f      	cmp	r7, #31
 8000a9c:	dd00      	ble.n	8000aa0 <__aeabi_dadd+0x390>
 8000a9e:	e0dc      	b.n	8000c5a <__aeabi_dadd+0x54a>
 8000aa0:	2520      	movs	r5, #32
 8000aa2:	000c      	movs	r4, r1
 8000aa4:	1bed      	subs	r5, r5, r7
 8000aa6:	001e      	movs	r6, r3
 8000aa8:	40ab      	lsls	r3, r5
 8000aaa:	40ac      	lsls	r4, r5
 8000aac:	40fe      	lsrs	r6, r7
 8000aae:	1e5d      	subs	r5, r3, #1
 8000ab0:	41ab      	sbcs	r3, r5
 8000ab2:	4334      	orrs	r4, r6
 8000ab4:	40f9      	lsrs	r1, r7
 8000ab6:	431c      	orrs	r4, r3
 8000ab8:	464b      	mov	r3, r9
 8000aba:	1a5b      	subs	r3, r3, r1
 8000abc:	4699      	mov	r9, r3
 8000abe:	e04c      	b.n	8000b5a <__aeabi_dadd+0x44a>
 8000ac0:	464a      	mov	r2, r9
 8000ac2:	1a1c      	subs	r4, r3, r0
 8000ac4:	1a88      	subs	r0, r1, r2
 8000ac6:	42a3      	cmp	r3, r4
 8000ac8:	4192      	sbcs	r2, r2
 8000aca:	4252      	negs	r2, r2
 8000acc:	4692      	mov	sl, r2
 8000ace:	0002      	movs	r2, r0
 8000ad0:	4650      	mov	r0, sl
 8000ad2:	1a12      	subs	r2, r2, r0
 8000ad4:	4692      	mov	sl, r2
 8000ad6:	0212      	lsls	r2, r2, #8
 8000ad8:	d478      	bmi.n	8000bcc <__aeabi_dadd+0x4bc>
 8000ada:	4653      	mov	r3, sl
 8000adc:	4323      	orrs	r3, r4
 8000ade:	d000      	beq.n	8000ae2 <__aeabi_dadd+0x3d2>
 8000ae0:	e66a      	b.n	80007b8 <__aeabi_dadd+0xa8>
 8000ae2:	2100      	movs	r1, #0
 8000ae4:	2500      	movs	r5, #0
 8000ae6:	e745      	b.n	8000974 <__aeabi_dadd+0x264>
 8000ae8:	074a      	lsls	r2, r1, #29
 8000aea:	08db      	lsrs	r3, r3, #3
 8000aec:	4313      	orrs	r3, r2
 8000aee:	08c9      	lsrs	r1, r1, #3
 8000af0:	e73d      	b.n	800096e <__aeabi_dadd+0x25e>
 8000af2:	181c      	adds	r4, r3, r0
 8000af4:	429c      	cmp	r4, r3
 8000af6:	419b      	sbcs	r3, r3
 8000af8:	4449      	add	r1, r9
 8000afa:	468a      	mov	sl, r1
 8000afc:	425b      	negs	r3, r3
 8000afe:	449a      	add	sl, r3
 8000b00:	4653      	mov	r3, sl
 8000b02:	2601      	movs	r6, #1
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	d400      	bmi.n	8000b0a <__aeabi_dadd+0x3fa>
 8000b08:	e727      	b.n	800095a <__aeabi_dadd+0x24a>
 8000b0a:	2602      	movs	r6, #2
 8000b0c:	4652      	mov	r2, sl
 8000b0e:	4baf      	ldr	r3, [pc, #700]	; (8000dcc <__aeabi_dadd+0x6bc>)
 8000b10:	2101      	movs	r1, #1
 8000b12:	401a      	ands	r2, r3
 8000b14:	0013      	movs	r3, r2
 8000b16:	4021      	ands	r1, r4
 8000b18:	0862      	lsrs	r2, r4, #1
 8000b1a:	430a      	orrs	r2, r1
 8000b1c:	07dc      	lsls	r4, r3, #31
 8000b1e:	085b      	lsrs	r3, r3, #1
 8000b20:	469a      	mov	sl, r3
 8000b22:	4314      	orrs	r4, r2
 8000b24:	e670      	b.n	8000808 <__aeabi_dadd+0xf8>
 8000b26:	003a      	movs	r2, r7
 8000b28:	464c      	mov	r4, r9
 8000b2a:	3a20      	subs	r2, #32
 8000b2c:	40d4      	lsrs	r4, r2
 8000b2e:	46a4      	mov	ip, r4
 8000b30:	2f20      	cmp	r7, #32
 8000b32:	d007      	beq.n	8000b44 <__aeabi_dadd+0x434>
 8000b34:	2240      	movs	r2, #64	; 0x40
 8000b36:	4648      	mov	r0, r9
 8000b38:	1bd2      	subs	r2, r2, r7
 8000b3a:	4090      	lsls	r0, r2
 8000b3c:	0002      	movs	r2, r0
 8000b3e:	4640      	mov	r0, r8
 8000b40:	4310      	orrs	r0, r2
 8000b42:	4680      	mov	r8, r0
 8000b44:	4640      	mov	r0, r8
 8000b46:	1e42      	subs	r2, r0, #1
 8000b48:	4190      	sbcs	r0, r2
 8000b4a:	4662      	mov	r2, ip
 8000b4c:	0004      	movs	r4, r0
 8000b4e:	4314      	orrs	r4, r2
 8000b50:	e624      	b.n	800079c <__aeabi_dadd+0x8c>
 8000b52:	4319      	orrs	r1, r3
 8000b54:	000c      	movs	r4, r1
 8000b56:	1e63      	subs	r3, r4, #1
 8000b58:	419c      	sbcs	r4, r3
 8000b5a:	4643      	mov	r3, r8
 8000b5c:	1b1c      	subs	r4, r3, r4
 8000b5e:	45a0      	cmp	r8, r4
 8000b60:	419b      	sbcs	r3, r3
 8000b62:	4649      	mov	r1, r9
 8000b64:	425b      	negs	r3, r3
 8000b66:	1acb      	subs	r3, r1, r3
 8000b68:	469a      	mov	sl, r3
 8000b6a:	4665      	mov	r5, ip
 8000b6c:	0016      	movs	r6, r2
 8000b6e:	e61b      	b.n	80007a8 <__aeabi_dadd+0x98>
 8000b70:	000c      	movs	r4, r1
 8000b72:	431c      	orrs	r4, r3
 8000b74:	d100      	bne.n	8000b78 <__aeabi_dadd+0x468>
 8000b76:	e0c7      	b.n	8000d08 <__aeabi_dadd+0x5f8>
 8000b78:	1e7c      	subs	r4, r7, #1
 8000b7a:	2f01      	cmp	r7, #1
 8000b7c:	d100      	bne.n	8000b80 <__aeabi_dadd+0x470>
 8000b7e:	e0f9      	b.n	8000d74 <__aeabi_dadd+0x664>
 8000b80:	4e91      	ldr	r6, [pc, #580]	; (8000dc8 <__aeabi_dadd+0x6b8>)
 8000b82:	42b7      	cmp	r7, r6
 8000b84:	d05c      	beq.n	8000c40 <__aeabi_dadd+0x530>
 8000b86:	0027      	movs	r7, r4
 8000b88:	e740      	b.n	8000a0c <__aeabi_dadd+0x2fc>
 8000b8a:	2220      	movs	r2, #32
 8000b8c:	464c      	mov	r4, r9
 8000b8e:	4640      	mov	r0, r8
 8000b90:	1bd2      	subs	r2, r2, r7
 8000b92:	4094      	lsls	r4, r2
 8000b94:	40f8      	lsrs	r0, r7
 8000b96:	4304      	orrs	r4, r0
 8000b98:	4640      	mov	r0, r8
 8000b9a:	4090      	lsls	r0, r2
 8000b9c:	1e42      	subs	r2, r0, #1
 8000b9e:	4190      	sbcs	r0, r2
 8000ba0:	464a      	mov	r2, r9
 8000ba2:	40fa      	lsrs	r2, r7
 8000ba4:	4304      	orrs	r4, r0
 8000ba6:	1889      	adds	r1, r1, r2
 8000ba8:	e6ee      	b.n	8000988 <__aeabi_dadd+0x278>
 8000baa:	4c87      	ldr	r4, [pc, #540]	; (8000dc8 <__aeabi_dadd+0x6b8>)
 8000bac:	42a2      	cmp	r2, r4
 8000bae:	d100      	bne.n	8000bb2 <__aeabi_dadd+0x4a2>
 8000bb0:	e6f9      	b.n	80009a6 <__aeabi_dadd+0x296>
 8000bb2:	1818      	adds	r0, r3, r0
 8000bb4:	4298      	cmp	r0, r3
 8000bb6:	419b      	sbcs	r3, r3
 8000bb8:	4449      	add	r1, r9
 8000bba:	425b      	negs	r3, r3
 8000bbc:	18cb      	adds	r3, r1, r3
 8000bbe:	07dc      	lsls	r4, r3, #31
 8000bc0:	0840      	lsrs	r0, r0, #1
 8000bc2:	085b      	lsrs	r3, r3, #1
 8000bc4:	469a      	mov	sl, r3
 8000bc6:	0016      	movs	r6, r2
 8000bc8:	4304      	orrs	r4, r0
 8000bca:	e6c6      	b.n	800095a <__aeabi_dadd+0x24a>
 8000bcc:	4642      	mov	r2, r8
 8000bce:	1ad4      	subs	r4, r2, r3
 8000bd0:	45a0      	cmp	r8, r4
 8000bd2:	4180      	sbcs	r0, r0
 8000bd4:	464b      	mov	r3, r9
 8000bd6:	4240      	negs	r0, r0
 8000bd8:	1a59      	subs	r1, r3, r1
 8000bda:	1a0b      	subs	r3, r1, r0
 8000bdc:	469a      	mov	sl, r3
 8000bde:	4665      	mov	r5, ip
 8000be0:	e5ea      	b.n	80007b8 <__aeabi_dadd+0xa8>
 8000be2:	464b      	mov	r3, r9
 8000be4:	464a      	mov	r2, r9
 8000be6:	08c0      	lsrs	r0, r0, #3
 8000be8:	075b      	lsls	r3, r3, #29
 8000bea:	4665      	mov	r5, ip
 8000bec:	4303      	orrs	r3, r0
 8000bee:	08d1      	lsrs	r1, r2, #3
 8000bf0:	e6bd      	b.n	800096e <__aeabi_dadd+0x25e>
 8000bf2:	2a00      	cmp	r2, #0
 8000bf4:	d000      	beq.n	8000bf8 <__aeabi_dadd+0x4e8>
 8000bf6:	e08e      	b.n	8000d16 <__aeabi_dadd+0x606>
 8000bf8:	464b      	mov	r3, r9
 8000bfa:	4303      	orrs	r3, r0
 8000bfc:	d117      	bne.n	8000c2e <__aeabi_dadd+0x51e>
 8000bfe:	2180      	movs	r1, #128	; 0x80
 8000c00:	2500      	movs	r5, #0
 8000c02:	0309      	lsls	r1, r1, #12
 8000c04:	e6da      	b.n	80009bc <__aeabi_dadd+0x2ac>
 8000c06:	074a      	lsls	r2, r1, #29
 8000c08:	08db      	lsrs	r3, r3, #3
 8000c0a:	4313      	orrs	r3, r2
 8000c0c:	08c9      	lsrs	r1, r1, #3
 8000c0e:	e6d1      	b.n	80009b4 <__aeabi_dadd+0x2a4>
 8000c10:	1a1c      	subs	r4, r3, r0
 8000c12:	464a      	mov	r2, r9
 8000c14:	42a3      	cmp	r3, r4
 8000c16:	419b      	sbcs	r3, r3
 8000c18:	1a89      	subs	r1, r1, r2
 8000c1a:	425b      	negs	r3, r3
 8000c1c:	1acb      	subs	r3, r1, r3
 8000c1e:	469a      	mov	sl, r3
 8000c20:	2601      	movs	r6, #1
 8000c22:	e5c1      	b.n	80007a8 <__aeabi_dadd+0x98>
 8000c24:	074a      	lsls	r2, r1, #29
 8000c26:	08db      	lsrs	r3, r3, #3
 8000c28:	4313      	orrs	r3, r2
 8000c2a:	08c9      	lsrs	r1, r1, #3
 8000c2c:	e69f      	b.n	800096e <__aeabi_dadd+0x25e>
 8000c2e:	4643      	mov	r3, r8
 8000c30:	08d8      	lsrs	r0, r3, #3
 8000c32:	464b      	mov	r3, r9
 8000c34:	464a      	mov	r2, r9
 8000c36:	075b      	lsls	r3, r3, #29
 8000c38:	4665      	mov	r5, ip
 8000c3a:	4303      	orrs	r3, r0
 8000c3c:	08d1      	lsrs	r1, r2, #3
 8000c3e:	e6b9      	b.n	80009b4 <__aeabi_dadd+0x2a4>
 8000c40:	4643      	mov	r3, r8
 8000c42:	08d8      	lsrs	r0, r3, #3
 8000c44:	464b      	mov	r3, r9
 8000c46:	464a      	mov	r2, r9
 8000c48:	075b      	lsls	r3, r3, #29
 8000c4a:	4303      	orrs	r3, r0
 8000c4c:	08d1      	lsrs	r1, r2, #3
 8000c4e:	e6b1      	b.n	80009b4 <__aeabi_dadd+0x2a4>
 8000c50:	4319      	orrs	r1, r3
 8000c52:	000c      	movs	r4, r1
 8000c54:	1e63      	subs	r3, r4, #1
 8000c56:	419c      	sbcs	r4, r3
 8000c58:	e6eb      	b.n	8000a32 <__aeabi_dadd+0x322>
 8000c5a:	003c      	movs	r4, r7
 8000c5c:	000d      	movs	r5, r1
 8000c5e:	3c20      	subs	r4, #32
 8000c60:	40e5      	lsrs	r5, r4
 8000c62:	2f20      	cmp	r7, #32
 8000c64:	d003      	beq.n	8000c6e <__aeabi_dadd+0x55e>
 8000c66:	2440      	movs	r4, #64	; 0x40
 8000c68:	1be4      	subs	r4, r4, r7
 8000c6a:	40a1      	lsls	r1, r4
 8000c6c:	430b      	orrs	r3, r1
 8000c6e:	001c      	movs	r4, r3
 8000c70:	1e63      	subs	r3, r4, #1
 8000c72:	419c      	sbcs	r4, r3
 8000c74:	432c      	orrs	r4, r5
 8000c76:	e770      	b.n	8000b5a <__aeabi_dadd+0x44a>
 8000c78:	2a00      	cmp	r2, #0
 8000c7a:	d0e1      	beq.n	8000c40 <__aeabi_dadd+0x530>
 8000c7c:	464a      	mov	r2, r9
 8000c7e:	4302      	orrs	r2, r0
 8000c80:	d0c1      	beq.n	8000c06 <__aeabi_dadd+0x4f6>
 8000c82:	074a      	lsls	r2, r1, #29
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	2280      	movs	r2, #128	; 0x80
 8000c8a:	08c9      	lsrs	r1, r1, #3
 8000c8c:	0312      	lsls	r2, r2, #12
 8000c8e:	4211      	tst	r1, r2
 8000c90:	d008      	beq.n	8000ca4 <__aeabi_dadd+0x594>
 8000c92:	4648      	mov	r0, r9
 8000c94:	08c4      	lsrs	r4, r0, #3
 8000c96:	4214      	tst	r4, r2
 8000c98:	d104      	bne.n	8000ca4 <__aeabi_dadd+0x594>
 8000c9a:	4643      	mov	r3, r8
 8000c9c:	0021      	movs	r1, r4
 8000c9e:	08db      	lsrs	r3, r3, #3
 8000ca0:	0742      	lsls	r2, r0, #29
 8000ca2:	4313      	orrs	r3, r2
 8000ca4:	0f5a      	lsrs	r2, r3, #29
 8000ca6:	00db      	lsls	r3, r3, #3
 8000ca8:	0752      	lsls	r2, r2, #29
 8000caa:	08db      	lsrs	r3, r3, #3
 8000cac:	4313      	orrs	r3, r2
 8000cae:	e681      	b.n	80009b4 <__aeabi_dadd+0x2a4>
 8000cb0:	464b      	mov	r3, r9
 8000cb2:	4303      	orrs	r3, r0
 8000cb4:	d100      	bne.n	8000cb8 <__aeabi_dadd+0x5a8>
 8000cb6:	e714      	b.n	8000ae2 <__aeabi_dadd+0x3d2>
 8000cb8:	464b      	mov	r3, r9
 8000cba:	464a      	mov	r2, r9
 8000cbc:	08c0      	lsrs	r0, r0, #3
 8000cbe:	075b      	lsls	r3, r3, #29
 8000cc0:	4665      	mov	r5, ip
 8000cc2:	4303      	orrs	r3, r0
 8000cc4:	08d1      	lsrs	r1, r2, #3
 8000cc6:	e655      	b.n	8000974 <__aeabi_dadd+0x264>
 8000cc8:	1ac4      	subs	r4, r0, r3
 8000cca:	45a0      	cmp	r8, r4
 8000ccc:	4180      	sbcs	r0, r0
 8000cce:	464b      	mov	r3, r9
 8000cd0:	4240      	negs	r0, r0
 8000cd2:	1a59      	subs	r1, r3, r1
 8000cd4:	1a0b      	subs	r3, r1, r0
 8000cd6:	469a      	mov	sl, r3
 8000cd8:	4665      	mov	r5, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	e564      	b.n	80007a8 <__aeabi_dadd+0x98>
 8000cde:	1a1c      	subs	r4, r3, r0
 8000ce0:	464a      	mov	r2, r9
 8000ce2:	42a3      	cmp	r3, r4
 8000ce4:	4180      	sbcs	r0, r0
 8000ce6:	1a8a      	subs	r2, r1, r2
 8000ce8:	4240      	negs	r0, r0
 8000cea:	1a12      	subs	r2, r2, r0
 8000cec:	4692      	mov	sl, r2
 8000cee:	0212      	lsls	r2, r2, #8
 8000cf0:	d549      	bpl.n	8000d86 <__aeabi_dadd+0x676>
 8000cf2:	4642      	mov	r2, r8
 8000cf4:	1ad4      	subs	r4, r2, r3
 8000cf6:	45a0      	cmp	r8, r4
 8000cf8:	4180      	sbcs	r0, r0
 8000cfa:	464b      	mov	r3, r9
 8000cfc:	4240      	negs	r0, r0
 8000cfe:	1a59      	subs	r1, r3, r1
 8000d00:	1a0b      	subs	r3, r1, r0
 8000d02:	469a      	mov	sl, r3
 8000d04:	4665      	mov	r5, ip
 8000d06:	e57f      	b.n	8000808 <__aeabi_dadd+0xf8>
 8000d08:	464b      	mov	r3, r9
 8000d0a:	464a      	mov	r2, r9
 8000d0c:	08c0      	lsrs	r0, r0, #3
 8000d0e:	075b      	lsls	r3, r3, #29
 8000d10:	4303      	orrs	r3, r0
 8000d12:	08d1      	lsrs	r1, r2, #3
 8000d14:	e62b      	b.n	800096e <__aeabi_dadd+0x25e>
 8000d16:	464a      	mov	r2, r9
 8000d18:	08db      	lsrs	r3, r3, #3
 8000d1a:	4302      	orrs	r2, r0
 8000d1c:	d138      	bne.n	8000d90 <__aeabi_dadd+0x680>
 8000d1e:	074a      	lsls	r2, r1, #29
 8000d20:	4313      	orrs	r3, r2
 8000d22:	08c9      	lsrs	r1, r1, #3
 8000d24:	e646      	b.n	80009b4 <__aeabi_dadd+0x2a4>
 8000d26:	464b      	mov	r3, r9
 8000d28:	464a      	mov	r2, r9
 8000d2a:	08c0      	lsrs	r0, r0, #3
 8000d2c:	075b      	lsls	r3, r3, #29
 8000d2e:	4303      	orrs	r3, r0
 8000d30:	08d1      	lsrs	r1, r2, #3
 8000d32:	e61f      	b.n	8000974 <__aeabi_dadd+0x264>
 8000d34:	181c      	adds	r4, r3, r0
 8000d36:	429c      	cmp	r4, r3
 8000d38:	419b      	sbcs	r3, r3
 8000d3a:	4449      	add	r1, r9
 8000d3c:	468a      	mov	sl, r1
 8000d3e:	425b      	negs	r3, r3
 8000d40:	449a      	add	sl, r3
 8000d42:	4653      	mov	r3, sl
 8000d44:	021b      	lsls	r3, r3, #8
 8000d46:	d400      	bmi.n	8000d4a <__aeabi_dadd+0x63a>
 8000d48:	e607      	b.n	800095a <__aeabi_dadd+0x24a>
 8000d4a:	4652      	mov	r2, sl
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <__aeabi_dadd+0x6bc>)
 8000d4e:	2601      	movs	r6, #1
 8000d50:	401a      	ands	r2, r3
 8000d52:	4692      	mov	sl, r2
 8000d54:	e601      	b.n	800095a <__aeabi_dadd+0x24a>
 8000d56:	003c      	movs	r4, r7
 8000d58:	000e      	movs	r6, r1
 8000d5a:	3c20      	subs	r4, #32
 8000d5c:	40e6      	lsrs	r6, r4
 8000d5e:	2f20      	cmp	r7, #32
 8000d60:	d003      	beq.n	8000d6a <__aeabi_dadd+0x65a>
 8000d62:	2440      	movs	r4, #64	; 0x40
 8000d64:	1be4      	subs	r4, r4, r7
 8000d66:	40a1      	lsls	r1, r4
 8000d68:	430b      	orrs	r3, r1
 8000d6a:	001c      	movs	r4, r3
 8000d6c:	1e63      	subs	r3, r4, #1
 8000d6e:	419c      	sbcs	r4, r3
 8000d70:	4334      	orrs	r4, r6
 8000d72:	e65e      	b.n	8000a32 <__aeabi_dadd+0x322>
 8000d74:	4443      	add	r3, r8
 8000d76:	4283      	cmp	r3, r0
 8000d78:	4180      	sbcs	r0, r0
 8000d7a:	4449      	add	r1, r9
 8000d7c:	468a      	mov	sl, r1
 8000d7e:	4240      	negs	r0, r0
 8000d80:	001c      	movs	r4, r3
 8000d82:	4482      	add	sl, r0
 8000d84:	e6bc      	b.n	8000b00 <__aeabi_dadd+0x3f0>
 8000d86:	4653      	mov	r3, sl
 8000d88:	4323      	orrs	r3, r4
 8000d8a:	d100      	bne.n	8000d8e <__aeabi_dadd+0x67e>
 8000d8c:	e6a9      	b.n	8000ae2 <__aeabi_dadd+0x3d2>
 8000d8e:	e5e4      	b.n	800095a <__aeabi_dadd+0x24a>
 8000d90:	074a      	lsls	r2, r1, #29
 8000d92:	4313      	orrs	r3, r2
 8000d94:	2280      	movs	r2, #128	; 0x80
 8000d96:	08c9      	lsrs	r1, r1, #3
 8000d98:	0312      	lsls	r2, r2, #12
 8000d9a:	4211      	tst	r1, r2
 8000d9c:	d009      	beq.n	8000db2 <__aeabi_dadd+0x6a2>
 8000d9e:	4648      	mov	r0, r9
 8000da0:	08c4      	lsrs	r4, r0, #3
 8000da2:	4214      	tst	r4, r2
 8000da4:	d105      	bne.n	8000db2 <__aeabi_dadd+0x6a2>
 8000da6:	4643      	mov	r3, r8
 8000da8:	4665      	mov	r5, ip
 8000daa:	0021      	movs	r1, r4
 8000dac:	08db      	lsrs	r3, r3, #3
 8000dae:	0742      	lsls	r2, r0, #29
 8000db0:	4313      	orrs	r3, r2
 8000db2:	0f5a      	lsrs	r2, r3, #29
 8000db4:	00db      	lsls	r3, r3, #3
 8000db6:	08db      	lsrs	r3, r3, #3
 8000db8:	0752      	lsls	r2, r2, #29
 8000dba:	4313      	orrs	r3, r2
 8000dbc:	e5fa      	b.n	80009b4 <__aeabi_dadd+0x2a4>
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	4a01      	ldr	r2, [pc, #4]	; (8000dc8 <__aeabi_dadd+0x6b8>)
 8000dc2:	001c      	movs	r4, r3
 8000dc4:	e540      	b.n	8000848 <__aeabi_dadd+0x138>
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	000007ff 	.word	0x000007ff
 8000dcc:	ff7fffff 	.word	0xff7fffff

08000dd0 <__eqdf2>:
 8000dd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000dd2:	464e      	mov	r6, r9
 8000dd4:	4645      	mov	r5, r8
 8000dd6:	46de      	mov	lr, fp
 8000dd8:	4657      	mov	r7, sl
 8000dda:	4690      	mov	r8, r2
 8000ddc:	b5e0      	push	{r5, r6, r7, lr}
 8000dde:	0017      	movs	r7, r2
 8000de0:	031a      	lsls	r2, r3, #12
 8000de2:	0b12      	lsrs	r2, r2, #12
 8000de4:	0005      	movs	r5, r0
 8000de6:	4684      	mov	ip, r0
 8000de8:	4819      	ldr	r0, [pc, #100]	; (8000e50 <__eqdf2+0x80>)
 8000dea:	030e      	lsls	r6, r1, #12
 8000dec:	004c      	lsls	r4, r1, #1
 8000dee:	4691      	mov	r9, r2
 8000df0:	005a      	lsls	r2, r3, #1
 8000df2:	0fdb      	lsrs	r3, r3, #31
 8000df4:	469b      	mov	fp, r3
 8000df6:	0b36      	lsrs	r6, r6, #12
 8000df8:	0d64      	lsrs	r4, r4, #21
 8000dfa:	0fc9      	lsrs	r1, r1, #31
 8000dfc:	0d52      	lsrs	r2, r2, #21
 8000dfe:	4284      	cmp	r4, r0
 8000e00:	d019      	beq.n	8000e36 <__eqdf2+0x66>
 8000e02:	4282      	cmp	r2, r0
 8000e04:	d010      	beq.n	8000e28 <__eqdf2+0x58>
 8000e06:	2001      	movs	r0, #1
 8000e08:	4294      	cmp	r4, r2
 8000e0a:	d10e      	bne.n	8000e2a <__eqdf2+0x5a>
 8000e0c:	454e      	cmp	r6, r9
 8000e0e:	d10c      	bne.n	8000e2a <__eqdf2+0x5a>
 8000e10:	2001      	movs	r0, #1
 8000e12:	45c4      	cmp	ip, r8
 8000e14:	d109      	bne.n	8000e2a <__eqdf2+0x5a>
 8000e16:	4559      	cmp	r1, fp
 8000e18:	d017      	beq.n	8000e4a <__eqdf2+0x7a>
 8000e1a:	2c00      	cmp	r4, #0
 8000e1c:	d105      	bne.n	8000e2a <__eqdf2+0x5a>
 8000e1e:	0030      	movs	r0, r6
 8000e20:	4328      	orrs	r0, r5
 8000e22:	1e43      	subs	r3, r0, #1
 8000e24:	4198      	sbcs	r0, r3
 8000e26:	e000      	b.n	8000e2a <__eqdf2+0x5a>
 8000e28:	2001      	movs	r0, #1
 8000e2a:	bcf0      	pop	{r4, r5, r6, r7}
 8000e2c:	46bb      	mov	fp, r7
 8000e2e:	46b2      	mov	sl, r6
 8000e30:	46a9      	mov	r9, r5
 8000e32:	46a0      	mov	r8, r4
 8000e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000e36:	0033      	movs	r3, r6
 8000e38:	2001      	movs	r0, #1
 8000e3a:	432b      	orrs	r3, r5
 8000e3c:	d1f5      	bne.n	8000e2a <__eqdf2+0x5a>
 8000e3e:	42a2      	cmp	r2, r4
 8000e40:	d1f3      	bne.n	8000e2a <__eqdf2+0x5a>
 8000e42:	464b      	mov	r3, r9
 8000e44:	433b      	orrs	r3, r7
 8000e46:	d1f0      	bne.n	8000e2a <__eqdf2+0x5a>
 8000e48:	e7e2      	b.n	8000e10 <__eqdf2+0x40>
 8000e4a:	2000      	movs	r0, #0
 8000e4c:	e7ed      	b.n	8000e2a <__eqdf2+0x5a>
 8000e4e:	46c0      	nop			; (mov r8, r8)
 8000e50:	000007ff 	.word	0x000007ff

08000e54 <__gedf2>:
 8000e54:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e56:	4647      	mov	r7, r8
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	0004      	movs	r4, r0
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	0016      	movs	r6, r2
 8000e60:	031b      	lsls	r3, r3, #12
 8000e62:	0b1b      	lsrs	r3, r3, #12
 8000e64:	4d2d      	ldr	r5, [pc, #180]	; (8000f1c <__gedf2+0xc8>)
 8000e66:	004a      	lsls	r2, r1, #1
 8000e68:	4699      	mov	r9, r3
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	0043      	lsls	r3, r0, #1
 8000e6e:	030f      	lsls	r7, r1, #12
 8000e70:	46a4      	mov	ip, r4
 8000e72:	46b0      	mov	r8, r6
 8000e74:	0b3f      	lsrs	r7, r7, #12
 8000e76:	0d52      	lsrs	r2, r2, #21
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	0d5b      	lsrs	r3, r3, #21
 8000e7c:	0fc0      	lsrs	r0, r0, #31
 8000e7e:	42aa      	cmp	r2, r5
 8000e80:	d021      	beq.n	8000ec6 <__gedf2+0x72>
 8000e82:	42ab      	cmp	r3, r5
 8000e84:	d013      	beq.n	8000eae <__gedf2+0x5a>
 8000e86:	2a00      	cmp	r2, #0
 8000e88:	d122      	bne.n	8000ed0 <__gedf2+0x7c>
 8000e8a:	433c      	orrs	r4, r7
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d102      	bne.n	8000e96 <__gedf2+0x42>
 8000e90:	464d      	mov	r5, r9
 8000e92:	432e      	orrs	r6, r5
 8000e94:	d022      	beq.n	8000edc <__gedf2+0x88>
 8000e96:	2c00      	cmp	r4, #0
 8000e98:	d010      	beq.n	8000ebc <__gedf2+0x68>
 8000e9a:	4281      	cmp	r1, r0
 8000e9c:	d022      	beq.n	8000ee4 <__gedf2+0x90>
 8000e9e:	2002      	movs	r0, #2
 8000ea0:	3901      	subs	r1, #1
 8000ea2:	4008      	ands	r0, r1
 8000ea4:	3801      	subs	r0, #1
 8000ea6:	bcc0      	pop	{r6, r7}
 8000ea8:	46b9      	mov	r9, r7
 8000eaa:	46b0      	mov	r8, r6
 8000eac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000eae:	464d      	mov	r5, r9
 8000eb0:	432e      	orrs	r6, r5
 8000eb2:	d129      	bne.n	8000f08 <__gedf2+0xb4>
 8000eb4:	2a00      	cmp	r2, #0
 8000eb6:	d1f0      	bne.n	8000e9a <__gedf2+0x46>
 8000eb8:	433c      	orrs	r4, r7
 8000eba:	d1ee      	bne.n	8000e9a <__gedf2+0x46>
 8000ebc:	2800      	cmp	r0, #0
 8000ebe:	d1f2      	bne.n	8000ea6 <__gedf2+0x52>
 8000ec0:	2001      	movs	r0, #1
 8000ec2:	4240      	negs	r0, r0
 8000ec4:	e7ef      	b.n	8000ea6 <__gedf2+0x52>
 8000ec6:	003d      	movs	r5, r7
 8000ec8:	4325      	orrs	r5, r4
 8000eca:	d11d      	bne.n	8000f08 <__gedf2+0xb4>
 8000ecc:	4293      	cmp	r3, r2
 8000ece:	d0ee      	beq.n	8000eae <__gedf2+0x5a>
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1e2      	bne.n	8000e9a <__gedf2+0x46>
 8000ed4:	464c      	mov	r4, r9
 8000ed6:	4326      	orrs	r6, r4
 8000ed8:	d1df      	bne.n	8000e9a <__gedf2+0x46>
 8000eda:	e7e0      	b.n	8000e9e <__gedf2+0x4a>
 8000edc:	2000      	movs	r0, #0
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0e1      	beq.n	8000ea6 <__gedf2+0x52>
 8000ee2:	e7dc      	b.n	8000e9e <__gedf2+0x4a>
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dc0a      	bgt.n	8000efe <__gedf2+0xaa>
 8000ee8:	dbe8      	blt.n	8000ebc <__gedf2+0x68>
 8000eea:	454f      	cmp	r7, r9
 8000eec:	d8d7      	bhi.n	8000e9e <__gedf2+0x4a>
 8000eee:	d00e      	beq.n	8000f0e <__gedf2+0xba>
 8000ef0:	2000      	movs	r0, #0
 8000ef2:	454f      	cmp	r7, r9
 8000ef4:	d2d7      	bcs.n	8000ea6 <__gedf2+0x52>
 8000ef6:	2900      	cmp	r1, #0
 8000ef8:	d0e2      	beq.n	8000ec0 <__gedf2+0x6c>
 8000efa:	0008      	movs	r0, r1
 8000efc:	e7d3      	b.n	8000ea6 <__gedf2+0x52>
 8000efe:	4243      	negs	r3, r0
 8000f00:	4158      	adcs	r0, r3
 8000f02:	0040      	lsls	r0, r0, #1
 8000f04:	3801      	subs	r0, #1
 8000f06:	e7ce      	b.n	8000ea6 <__gedf2+0x52>
 8000f08:	2002      	movs	r0, #2
 8000f0a:	4240      	negs	r0, r0
 8000f0c:	e7cb      	b.n	8000ea6 <__gedf2+0x52>
 8000f0e:	45c4      	cmp	ip, r8
 8000f10:	d8c5      	bhi.n	8000e9e <__gedf2+0x4a>
 8000f12:	2000      	movs	r0, #0
 8000f14:	45c4      	cmp	ip, r8
 8000f16:	d2c6      	bcs.n	8000ea6 <__gedf2+0x52>
 8000f18:	e7ed      	b.n	8000ef6 <__gedf2+0xa2>
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	000007ff 	.word	0x000007ff

08000f20 <__ledf2>:
 8000f20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000f22:	4647      	mov	r7, r8
 8000f24:	46ce      	mov	lr, r9
 8000f26:	0004      	movs	r4, r0
 8000f28:	0018      	movs	r0, r3
 8000f2a:	0016      	movs	r6, r2
 8000f2c:	031b      	lsls	r3, r3, #12
 8000f2e:	0b1b      	lsrs	r3, r3, #12
 8000f30:	4d2c      	ldr	r5, [pc, #176]	; (8000fe4 <__ledf2+0xc4>)
 8000f32:	004a      	lsls	r2, r1, #1
 8000f34:	4699      	mov	r9, r3
 8000f36:	b580      	push	{r7, lr}
 8000f38:	0043      	lsls	r3, r0, #1
 8000f3a:	030f      	lsls	r7, r1, #12
 8000f3c:	46a4      	mov	ip, r4
 8000f3e:	46b0      	mov	r8, r6
 8000f40:	0b3f      	lsrs	r7, r7, #12
 8000f42:	0d52      	lsrs	r2, r2, #21
 8000f44:	0fc9      	lsrs	r1, r1, #31
 8000f46:	0d5b      	lsrs	r3, r3, #21
 8000f48:	0fc0      	lsrs	r0, r0, #31
 8000f4a:	42aa      	cmp	r2, r5
 8000f4c:	d00d      	beq.n	8000f6a <__ledf2+0x4a>
 8000f4e:	42ab      	cmp	r3, r5
 8000f50:	d010      	beq.n	8000f74 <__ledf2+0x54>
 8000f52:	2a00      	cmp	r2, #0
 8000f54:	d127      	bne.n	8000fa6 <__ledf2+0x86>
 8000f56:	433c      	orrs	r4, r7
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d111      	bne.n	8000f80 <__ledf2+0x60>
 8000f5c:	464d      	mov	r5, r9
 8000f5e:	432e      	orrs	r6, r5
 8000f60:	d10e      	bne.n	8000f80 <__ledf2+0x60>
 8000f62:	2000      	movs	r0, #0
 8000f64:	2c00      	cmp	r4, #0
 8000f66:	d015      	beq.n	8000f94 <__ledf2+0x74>
 8000f68:	e00e      	b.n	8000f88 <__ledf2+0x68>
 8000f6a:	003d      	movs	r5, r7
 8000f6c:	4325      	orrs	r5, r4
 8000f6e:	d110      	bne.n	8000f92 <__ledf2+0x72>
 8000f70:	4293      	cmp	r3, r2
 8000f72:	d118      	bne.n	8000fa6 <__ledf2+0x86>
 8000f74:	464d      	mov	r5, r9
 8000f76:	432e      	orrs	r6, r5
 8000f78:	d10b      	bne.n	8000f92 <__ledf2+0x72>
 8000f7a:	2a00      	cmp	r2, #0
 8000f7c:	d102      	bne.n	8000f84 <__ledf2+0x64>
 8000f7e:	433c      	orrs	r4, r7
 8000f80:	2c00      	cmp	r4, #0
 8000f82:	d00b      	beq.n	8000f9c <__ledf2+0x7c>
 8000f84:	4281      	cmp	r1, r0
 8000f86:	d014      	beq.n	8000fb2 <__ledf2+0x92>
 8000f88:	2002      	movs	r0, #2
 8000f8a:	3901      	subs	r1, #1
 8000f8c:	4008      	ands	r0, r1
 8000f8e:	3801      	subs	r0, #1
 8000f90:	e000      	b.n	8000f94 <__ledf2+0x74>
 8000f92:	2002      	movs	r0, #2
 8000f94:	bcc0      	pop	{r6, r7}
 8000f96:	46b9      	mov	r9, r7
 8000f98:	46b0      	mov	r8, r6
 8000f9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f9c:	2800      	cmp	r0, #0
 8000f9e:	d1f9      	bne.n	8000f94 <__ledf2+0x74>
 8000fa0:	2001      	movs	r0, #1
 8000fa2:	4240      	negs	r0, r0
 8000fa4:	e7f6      	b.n	8000f94 <__ledf2+0x74>
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d1ec      	bne.n	8000f84 <__ledf2+0x64>
 8000faa:	464c      	mov	r4, r9
 8000fac:	4326      	orrs	r6, r4
 8000fae:	d1e9      	bne.n	8000f84 <__ledf2+0x64>
 8000fb0:	e7ea      	b.n	8000f88 <__ledf2+0x68>
 8000fb2:	429a      	cmp	r2, r3
 8000fb4:	dd04      	ble.n	8000fc0 <__ledf2+0xa0>
 8000fb6:	4243      	negs	r3, r0
 8000fb8:	4158      	adcs	r0, r3
 8000fba:	0040      	lsls	r0, r0, #1
 8000fbc:	3801      	subs	r0, #1
 8000fbe:	e7e9      	b.n	8000f94 <__ledf2+0x74>
 8000fc0:	429a      	cmp	r2, r3
 8000fc2:	dbeb      	blt.n	8000f9c <__ledf2+0x7c>
 8000fc4:	454f      	cmp	r7, r9
 8000fc6:	d8df      	bhi.n	8000f88 <__ledf2+0x68>
 8000fc8:	d006      	beq.n	8000fd8 <__ledf2+0xb8>
 8000fca:	2000      	movs	r0, #0
 8000fcc:	454f      	cmp	r7, r9
 8000fce:	d2e1      	bcs.n	8000f94 <__ledf2+0x74>
 8000fd0:	2900      	cmp	r1, #0
 8000fd2:	d0e5      	beq.n	8000fa0 <__ledf2+0x80>
 8000fd4:	0008      	movs	r0, r1
 8000fd6:	e7dd      	b.n	8000f94 <__ledf2+0x74>
 8000fd8:	45c4      	cmp	ip, r8
 8000fda:	d8d5      	bhi.n	8000f88 <__ledf2+0x68>
 8000fdc:	2000      	movs	r0, #0
 8000fde:	45c4      	cmp	ip, r8
 8000fe0:	d2d8      	bcs.n	8000f94 <__ledf2+0x74>
 8000fe2:	e7f5      	b.n	8000fd0 <__ledf2+0xb0>
 8000fe4:	000007ff 	.word	0x000007ff

08000fe8 <__aeabi_dmul>:
 8000fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fea:	4645      	mov	r5, r8
 8000fec:	46de      	mov	lr, fp
 8000fee:	4657      	mov	r7, sl
 8000ff0:	464e      	mov	r6, r9
 8000ff2:	b5e0      	push	{r5, r6, r7, lr}
 8000ff4:	001f      	movs	r7, r3
 8000ff6:	030b      	lsls	r3, r1, #12
 8000ff8:	0b1b      	lsrs	r3, r3, #12
 8000ffa:	469b      	mov	fp, r3
 8000ffc:	004d      	lsls	r5, r1, #1
 8000ffe:	0fcb      	lsrs	r3, r1, #31
 8001000:	0004      	movs	r4, r0
 8001002:	4691      	mov	r9, r2
 8001004:	4698      	mov	r8, r3
 8001006:	b087      	sub	sp, #28
 8001008:	0d6d      	lsrs	r5, r5, #21
 800100a:	d100      	bne.n	800100e <__aeabi_dmul+0x26>
 800100c:	e1cd      	b.n	80013aa <__aeabi_dmul+0x3c2>
 800100e:	4bce      	ldr	r3, [pc, #824]	; (8001348 <__aeabi_dmul+0x360>)
 8001010:	429d      	cmp	r5, r3
 8001012:	d100      	bne.n	8001016 <__aeabi_dmul+0x2e>
 8001014:	e1e9      	b.n	80013ea <__aeabi_dmul+0x402>
 8001016:	465a      	mov	r2, fp
 8001018:	0f43      	lsrs	r3, r0, #29
 800101a:	00d2      	lsls	r2, r2, #3
 800101c:	4313      	orrs	r3, r2
 800101e:	2280      	movs	r2, #128	; 0x80
 8001020:	0412      	lsls	r2, r2, #16
 8001022:	431a      	orrs	r2, r3
 8001024:	00c3      	lsls	r3, r0, #3
 8001026:	469a      	mov	sl, r3
 8001028:	4bc8      	ldr	r3, [pc, #800]	; (800134c <__aeabi_dmul+0x364>)
 800102a:	4693      	mov	fp, r2
 800102c:	469c      	mov	ip, r3
 800102e:	2300      	movs	r3, #0
 8001030:	2600      	movs	r6, #0
 8001032:	4465      	add	r5, ip
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	033c      	lsls	r4, r7, #12
 8001038:	007b      	lsls	r3, r7, #1
 800103a:	4648      	mov	r0, r9
 800103c:	0b24      	lsrs	r4, r4, #12
 800103e:	0d5b      	lsrs	r3, r3, #21
 8001040:	0fff      	lsrs	r7, r7, #31
 8001042:	2b00      	cmp	r3, #0
 8001044:	d100      	bne.n	8001048 <__aeabi_dmul+0x60>
 8001046:	e189      	b.n	800135c <__aeabi_dmul+0x374>
 8001048:	4abf      	ldr	r2, [pc, #764]	; (8001348 <__aeabi_dmul+0x360>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d019      	beq.n	8001082 <__aeabi_dmul+0x9a>
 800104e:	0f42      	lsrs	r2, r0, #29
 8001050:	00e4      	lsls	r4, r4, #3
 8001052:	4322      	orrs	r2, r4
 8001054:	2480      	movs	r4, #128	; 0x80
 8001056:	0424      	lsls	r4, r4, #16
 8001058:	4314      	orrs	r4, r2
 800105a:	4abc      	ldr	r2, [pc, #752]	; (800134c <__aeabi_dmul+0x364>)
 800105c:	2100      	movs	r1, #0
 800105e:	4694      	mov	ip, r2
 8001060:	4642      	mov	r2, r8
 8001062:	4463      	add	r3, ip
 8001064:	195b      	adds	r3, r3, r5
 8001066:	9301      	str	r3, [sp, #4]
 8001068:	9b01      	ldr	r3, [sp, #4]
 800106a:	407a      	eors	r2, r7
 800106c:	3301      	adds	r3, #1
 800106e:	00c0      	lsls	r0, r0, #3
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	9302      	str	r3, [sp, #8]
 8001074:	2e0a      	cmp	r6, #10
 8001076:	dd1c      	ble.n	80010b2 <__aeabi_dmul+0xca>
 8001078:	003a      	movs	r2, r7
 800107a:	2e0b      	cmp	r6, #11
 800107c:	d05e      	beq.n	800113c <__aeabi_dmul+0x154>
 800107e:	4647      	mov	r7, r8
 8001080:	e056      	b.n	8001130 <__aeabi_dmul+0x148>
 8001082:	4649      	mov	r1, r9
 8001084:	4bb0      	ldr	r3, [pc, #704]	; (8001348 <__aeabi_dmul+0x360>)
 8001086:	4321      	orrs	r1, r4
 8001088:	18eb      	adds	r3, r5, r3
 800108a:	9301      	str	r3, [sp, #4]
 800108c:	2900      	cmp	r1, #0
 800108e:	d12a      	bne.n	80010e6 <__aeabi_dmul+0xfe>
 8001090:	2080      	movs	r0, #128	; 0x80
 8001092:	2202      	movs	r2, #2
 8001094:	0100      	lsls	r0, r0, #4
 8001096:	002b      	movs	r3, r5
 8001098:	4684      	mov	ip, r0
 800109a:	4316      	orrs	r6, r2
 800109c:	4642      	mov	r2, r8
 800109e:	4463      	add	r3, ip
 80010a0:	407a      	eors	r2, r7
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	9302      	str	r3, [sp, #8]
 80010a6:	2e0a      	cmp	r6, #10
 80010a8:	dd00      	ble.n	80010ac <__aeabi_dmul+0xc4>
 80010aa:	e231      	b.n	8001510 <__aeabi_dmul+0x528>
 80010ac:	2000      	movs	r0, #0
 80010ae:	2400      	movs	r4, #0
 80010b0:	2102      	movs	r1, #2
 80010b2:	2e02      	cmp	r6, #2
 80010b4:	dc26      	bgt.n	8001104 <__aeabi_dmul+0x11c>
 80010b6:	3e01      	subs	r6, #1
 80010b8:	2e01      	cmp	r6, #1
 80010ba:	d852      	bhi.n	8001162 <__aeabi_dmul+0x17a>
 80010bc:	2902      	cmp	r1, #2
 80010be:	d04c      	beq.n	800115a <__aeabi_dmul+0x172>
 80010c0:	2901      	cmp	r1, #1
 80010c2:	d000      	beq.n	80010c6 <__aeabi_dmul+0xde>
 80010c4:	e118      	b.n	80012f8 <__aeabi_dmul+0x310>
 80010c6:	2300      	movs	r3, #0
 80010c8:	2400      	movs	r4, #0
 80010ca:	2500      	movs	r5, #0
 80010cc:	051b      	lsls	r3, r3, #20
 80010ce:	4323      	orrs	r3, r4
 80010d0:	07d2      	lsls	r2, r2, #31
 80010d2:	4313      	orrs	r3, r2
 80010d4:	0028      	movs	r0, r5
 80010d6:	0019      	movs	r1, r3
 80010d8:	b007      	add	sp, #28
 80010da:	bcf0      	pop	{r4, r5, r6, r7}
 80010dc:	46bb      	mov	fp, r7
 80010de:	46b2      	mov	sl, r6
 80010e0:	46a9      	mov	r9, r5
 80010e2:	46a0      	mov	r8, r4
 80010e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010e6:	2180      	movs	r1, #128	; 0x80
 80010e8:	2203      	movs	r2, #3
 80010ea:	0109      	lsls	r1, r1, #4
 80010ec:	002b      	movs	r3, r5
 80010ee:	468c      	mov	ip, r1
 80010f0:	4316      	orrs	r6, r2
 80010f2:	4642      	mov	r2, r8
 80010f4:	4463      	add	r3, ip
 80010f6:	407a      	eors	r2, r7
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	9302      	str	r3, [sp, #8]
 80010fc:	2e0a      	cmp	r6, #10
 80010fe:	dd00      	ble.n	8001102 <__aeabi_dmul+0x11a>
 8001100:	e228      	b.n	8001554 <__aeabi_dmul+0x56c>
 8001102:	2103      	movs	r1, #3
 8001104:	2501      	movs	r5, #1
 8001106:	40b5      	lsls	r5, r6
 8001108:	46ac      	mov	ip, r5
 800110a:	26a6      	movs	r6, #166	; 0xa6
 800110c:	4663      	mov	r3, ip
 800110e:	00f6      	lsls	r6, r6, #3
 8001110:	4035      	ands	r5, r6
 8001112:	4233      	tst	r3, r6
 8001114:	d10b      	bne.n	800112e <__aeabi_dmul+0x146>
 8001116:	2690      	movs	r6, #144	; 0x90
 8001118:	00b6      	lsls	r6, r6, #2
 800111a:	4233      	tst	r3, r6
 800111c:	d118      	bne.n	8001150 <__aeabi_dmul+0x168>
 800111e:	3eb9      	subs	r6, #185	; 0xb9
 8001120:	3eff      	subs	r6, #255	; 0xff
 8001122:	421e      	tst	r6, r3
 8001124:	d01d      	beq.n	8001162 <__aeabi_dmul+0x17a>
 8001126:	46a3      	mov	fp, r4
 8001128:	4682      	mov	sl, r0
 800112a:	9100      	str	r1, [sp, #0]
 800112c:	e000      	b.n	8001130 <__aeabi_dmul+0x148>
 800112e:	0017      	movs	r7, r2
 8001130:	9900      	ldr	r1, [sp, #0]
 8001132:	003a      	movs	r2, r7
 8001134:	2902      	cmp	r1, #2
 8001136:	d010      	beq.n	800115a <__aeabi_dmul+0x172>
 8001138:	465c      	mov	r4, fp
 800113a:	4650      	mov	r0, sl
 800113c:	2903      	cmp	r1, #3
 800113e:	d1bf      	bne.n	80010c0 <__aeabi_dmul+0xd8>
 8001140:	2380      	movs	r3, #128	; 0x80
 8001142:	031b      	lsls	r3, r3, #12
 8001144:	431c      	orrs	r4, r3
 8001146:	0324      	lsls	r4, r4, #12
 8001148:	0005      	movs	r5, r0
 800114a:	4b7f      	ldr	r3, [pc, #508]	; (8001348 <__aeabi_dmul+0x360>)
 800114c:	0b24      	lsrs	r4, r4, #12
 800114e:	e7bd      	b.n	80010cc <__aeabi_dmul+0xe4>
 8001150:	2480      	movs	r4, #128	; 0x80
 8001152:	2200      	movs	r2, #0
 8001154:	4b7c      	ldr	r3, [pc, #496]	; (8001348 <__aeabi_dmul+0x360>)
 8001156:	0324      	lsls	r4, r4, #12
 8001158:	e7b8      	b.n	80010cc <__aeabi_dmul+0xe4>
 800115a:	2400      	movs	r4, #0
 800115c:	2500      	movs	r5, #0
 800115e:	4b7a      	ldr	r3, [pc, #488]	; (8001348 <__aeabi_dmul+0x360>)
 8001160:	e7b4      	b.n	80010cc <__aeabi_dmul+0xe4>
 8001162:	4653      	mov	r3, sl
 8001164:	041e      	lsls	r6, r3, #16
 8001166:	0c36      	lsrs	r6, r6, #16
 8001168:	0c1f      	lsrs	r7, r3, #16
 800116a:	0033      	movs	r3, r6
 800116c:	0c01      	lsrs	r1, r0, #16
 800116e:	0400      	lsls	r0, r0, #16
 8001170:	0c00      	lsrs	r0, r0, #16
 8001172:	4343      	muls	r3, r0
 8001174:	4698      	mov	r8, r3
 8001176:	0003      	movs	r3, r0
 8001178:	437b      	muls	r3, r7
 800117a:	4699      	mov	r9, r3
 800117c:	0033      	movs	r3, r6
 800117e:	434b      	muls	r3, r1
 8001180:	469c      	mov	ip, r3
 8001182:	4643      	mov	r3, r8
 8001184:	000d      	movs	r5, r1
 8001186:	0c1b      	lsrs	r3, r3, #16
 8001188:	469a      	mov	sl, r3
 800118a:	437d      	muls	r5, r7
 800118c:	44cc      	add	ip, r9
 800118e:	44d4      	add	ip, sl
 8001190:	9500      	str	r5, [sp, #0]
 8001192:	45e1      	cmp	r9, ip
 8001194:	d904      	bls.n	80011a0 <__aeabi_dmul+0x1b8>
 8001196:	2380      	movs	r3, #128	; 0x80
 8001198:	025b      	lsls	r3, r3, #9
 800119a:	4699      	mov	r9, r3
 800119c:	444d      	add	r5, r9
 800119e:	9500      	str	r5, [sp, #0]
 80011a0:	4663      	mov	r3, ip
 80011a2:	0c1b      	lsrs	r3, r3, #16
 80011a4:	001d      	movs	r5, r3
 80011a6:	4663      	mov	r3, ip
 80011a8:	041b      	lsls	r3, r3, #16
 80011aa:	469c      	mov	ip, r3
 80011ac:	4643      	mov	r3, r8
 80011ae:	041b      	lsls	r3, r3, #16
 80011b0:	0c1b      	lsrs	r3, r3, #16
 80011b2:	4698      	mov	r8, r3
 80011b4:	4663      	mov	r3, ip
 80011b6:	4443      	add	r3, r8
 80011b8:	9303      	str	r3, [sp, #12]
 80011ba:	0c23      	lsrs	r3, r4, #16
 80011bc:	4698      	mov	r8, r3
 80011be:	0033      	movs	r3, r6
 80011c0:	0424      	lsls	r4, r4, #16
 80011c2:	0c24      	lsrs	r4, r4, #16
 80011c4:	4363      	muls	r3, r4
 80011c6:	469c      	mov	ip, r3
 80011c8:	0023      	movs	r3, r4
 80011ca:	437b      	muls	r3, r7
 80011cc:	4699      	mov	r9, r3
 80011ce:	4643      	mov	r3, r8
 80011d0:	435e      	muls	r6, r3
 80011d2:	435f      	muls	r7, r3
 80011d4:	444e      	add	r6, r9
 80011d6:	4663      	mov	r3, ip
 80011d8:	46b2      	mov	sl, r6
 80011da:	0c1e      	lsrs	r6, r3, #16
 80011dc:	4456      	add	r6, sl
 80011de:	45b1      	cmp	r9, r6
 80011e0:	d903      	bls.n	80011ea <__aeabi_dmul+0x202>
 80011e2:	2380      	movs	r3, #128	; 0x80
 80011e4:	025b      	lsls	r3, r3, #9
 80011e6:	4699      	mov	r9, r3
 80011e8:	444f      	add	r7, r9
 80011ea:	0c33      	lsrs	r3, r6, #16
 80011ec:	4699      	mov	r9, r3
 80011ee:	003b      	movs	r3, r7
 80011f0:	444b      	add	r3, r9
 80011f2:	9305      	str	r3, [sp, #20]
 80011f4:	4663      	mov	r3, ip
 80011f6:	46ac      	mov	ip, r5
 80011f8:	041f      	lsls	r7, r3, #16
 80011fa:	0c3f      	lsrs	r7, r7, #16
 80011fc:	0436      	lsls	r6, r6, #16
 80011fe:	19f6      	adds	r6, r6, r7
 8001200:	44b4      	add	ip, r6
 8001202:	4663      	mov	r3, ip
 8001204:	9304      	str	r3, [sp, #16]
 8001206:	465b      	mov	r3, fp
 8001208:	0c1b      	lsrs	r3, r3, #16
 800120a:	469c      	mov	ip, r3
 800120c:	465b      	mov	r3, fp
 800120e:	041f      	lsls	r7, r3, #16
 8001210:	0c3f      	lsrs	r7, r7, #16
 8001212:	003b      	movs	r3, r7
 8001214:	4343      	muls	r3, r0
 8001216:	4699      	mov	r9, r3
 8001218:	4663      	mov	r3, ip
 800121a:	4343      	muls	r3, r0
 800121c:	469a      	mov	sl, r3
 800121e:	464b      	mov	r3, r9
 8001220:	4660      	mov	r0, ip
 8001222:	0c1b      	lsrs	r3, r3, #16
 8001224:	469b      	mov	fp, r3
 8001226:	4348      	muls	r0, r1
 8001228:	4379      	muls	r1, r7
 800122a:	4451      	add	r1, sl
 800122c:	4459      	add	r1, fp
 800122e:	458a      	cmp	sl, r1
 8001230:	d903      	bls.n	800123a <__aeabi_dmul+0x252>
 8001232:	2380      	movs	r3, #128	; 0x80
 8001234:	025b      	lsls	r3, r3, #9
 8001236:	469a      	mov	sl, r3
 8001238:	4450      	add	r0, sl
 800123a:	0c0b      	lsrs	r3, r1, #16
 800123c:	469a      	mov	sl, r3
 800123e:	464b      	mov	r3, r9
 8001240:	041b      	lsls	r3, r3, #16
 8001242:	0c1b      	lsrs	r3, r3, #16
 8001244:	4699      	mov	r9, r3
 8001246:	003b      	movs	r3, r7
 8001248:	4363      	muls	r3, r4
 800124a:	0409      	lsls	r1, r1, #16
 800124c:	4645      	mov	r5, r8
 800124e:	4449      	add	r1, r9
 8001250:	4699      	mov	r9, r3
 8001252:	4663      	mov	r3, ip
 8001254:	435c      	muls	r4, r3
 8001256:	436b      	muls	r3, r5
 8001258:	469c      	mov	ip, r3
 800125a:	464b      	mov	r3, r9
 800125c:	0c1b      	lsrs	r3, r3, #16
 800125e:	4698      	mov	r8, r3
 8001260:	436f      	muls	r7, r5
 8001262:	193f      	adds	r7, r7, r4
 8001264:	4447      	add	r7, r8
 8001266:	4450      	add	r0, sl
 8001268:	42bc      	cmp	r4, r7
 800126a:	d903      	bls.n	8001274 <__aeabi_dmul+0x28c>
 800126c:	2380      	movs	r3, #128	; 0x80
 800126e:	025b      	lsls	r3, r3, #9
 8001270:	4698      	mov	r8, r3
 8001272:	44c4      	add	ip, r8
 8001274:	9b04      	ldr	r3, [sp, #16]
 8001276:	9d00      	ldr	r5, [sp, #0]
 8001278:	4698      	mov	r8, r3
 800127a:	4445      	add	r5, r8
 800127c:	42b5      	cmp	r5, r6
 800127e:	41b6      	sbcs	r6, r6
 8001280:	4273      	negs	r3, r6
 8001282:	4698      	mov	r8, r3
 8001284:	464b      	mov	r3, r9
 8001286:	041e      	lsls	r6, r3, #16
 8001288:	9b05      	ldr	r3, [sp, #20]
 800128a:	043c      	lsls	r4, r7, #16
 800128c:	4699      	mov	r9, r3
 800128e:	0c36      	lsrs	r6, r6, #16
 8001290:	19a4      	adds	r4, r4, r6
 8001292:	444c      	add	r4, r9
 8001294:	46a1      	mov	r9, r4
 8001296:	4683      	mov	fp, r0
 8001298:	186e      	adds	r6, r5, r1
 800129a:	44c1      	add	r9, r8
 800129c:	428e      	cmp	r6, r1
 800129e:	4189      	sbcs	r1, r1
 80012a0:	44cb      	add	fp, r9
 80012a2:	465d      	mov	r5, fp
 80012a4:	4249      	negs	r1, r1
 80012a6:	186d      	adds	r5, r5, r1
 80012a8:	429c      	cmp	r4, r3
 80012aa:	41a4      	sbcs	r4, r4
 80012ac:	45c1      	cmp	r9, r8
 80012ae:	419b      	sbcs	r3, r3
 80012b0:	4583      	cmp	fp, r0
 80012b2:	4180      	sbcs	r0, r0
 80012b4:	428d      	cmp	r5, r1
 80012b6:	4189      	sbcs	r1, r1
 80012b8:	425b      	negs	r3, r3
 80012ba:	4264      	negs	r4, r4
 80012bc:	431c      	orrs	r4, r3
 80012be:	4240      	negs	r0, r0
 80012c0:	9b03      	ldr	r3, [sp, #12]
 80012c2:	4249      	negs	r1, r1
 80012c4:	4301      	orrs	r1, r0
 80012c6:	0270      	lsls	r0, r6, #9
 80012c8:	0c3f      	lsrs	r7, r7, #16
 80012ca:	4318      	orrs	r0, r3
 80012cc:	19e4      	adds	r4, r4, r7
 80012ce:	1e47      	subs	r7, r0, #1
 80012d0:	41b8      	sbcs	r0, r7
 80012d2:	1864      	adds	r4, r4, r1
 80012d4:	4464      	add	r4, ip
 80012d6:	0df6      	lsrs	r6, r6, #23
 80012d8:	0261      	lsls	r1, r4, #9
 80012da:	4330      	orrs	r0, r6
 80012dc:	0dec      	lsrs	r4, r5, #23
 80012de:	026e      	lsls	r6, r5, #9
 80012e0:	430c      	orrs	r4, r1
 80012e2:	4330      	orrs	r0, r6
 80012e4:	01c9      	lsls	r1, r1, #7
 80012e6:	d400      	bmi.n	80012ea <__aeabi_dmul+0x302>
 80012e8:	e0f1      	b.n	80014ce <__aeabi_dmul+0x4e6>
 80012ea:	2101      	movs	r1, #1
 80012ec:	0843      	lsrs	r3, r0, #1
 80012ee:	4001      	ands	r1, r0
 80012f0:	430b      	orrs	r3, r1
 80012f2:	07e0      	lsls	r0, r4, #31
 80012f4:	4318      	orrs	r0, r3
 80012f6:	0864      	lsrs	r4, r4, #1
 80012f8:	4915      	ldr	r1, [pc, #84]	; (8001350 <__aeabi_dmul+0x368>)
 80012fa:	9b02      	ldr	r3, [sp, #8]
 80012fc:	468c      	mov	ip, r1
 80012fe:	4463      	add	r3, ip
 8001300:	2b00      	cmp	r3, #0
 8001302:	dc00      	bgt.n	8001306 <__aeabi_dmul+0x31e>
 8001304:	e097      	b.n	8001436 <__aeabi_dmul+0x44e>
 8001306:	0741      	lsls	r1, r0, #29
 8001308:	d009      	beq.n	800131e <__aeabi_dmul+0x336>
 800130a:	210f      	movs	r1, #15
 800130c:	4001      	ands	r1, r0
 800130e:	2904      	cmp	r1, #4
 8001310:	d005      	beq.n	800131e <__aeabi_dmul+0x336>
 8001312:	1d01      	adds	r1, r0, #4
 8001314:	4281      	cmp	r1, r0
 8001316:	4180      	sbcs	r0, r0
 8001318:	4240      	negs	r0, r0
 800131a:	1824      	adds	r4, r4, r0
 800131c:	0008      	movs	r0, r1
 800131e:	01e1      	lsls	r1, r4, #7
 8001320:	d506      	bpl.n	8001330 <__aeabi_dmul+0x348>
 8001322:	2180      	movs	r1, #128	; 0x80
 8001324:	00c9      	lsls	r1, r1, #3
 8001326:	468c      	mov	ip, r1
 8001328:	4b0a      	ldr	r3, [pc, #40]	; (8001354 <__aeabi_dmul+0x36c>)
 800132a:	401c      	ands	r4, r3
 800132c:	9b02      	ldr	r3, [sp, #8]
 800132e:	4463      	add	r3, ip
 8001330:	4909      	ldr	r1, [pc, #36]	; (8001358 <__aeabi_dmul+0x370>)
 8001332:	428b      	cmp	r3, r1
 8001334:	dd00      	ble.n	8001338 <__aeabi_dmul+0x350>
 8001336:	e710      	b.n	800115a <__aeabi_dmul+0x172>
 8001338:	0761      	lsls	r1, r4, #29
 800133a:	08c5      	lsrs	r5, r0, #3
 800133c:	0264      	lsls	r4, r4, #9
 800133e:	055b      	lsls	r3, r3, #21
 8001340:	430d      	orrs	r5, r1
 8001342:	0b24      	lsrs	r4, r4, #12
 8001344:	0d5b      	lsrs	r3, r3, #21
 8001346:	e6c1      	b.n	80010cc <__aeabi_dmul+0xe4>
 8001348:	000007ff 	.word	0x000007ff
 800134c:	fffffc01 	.word	0xfffffc01
 8001350:	000003ff 	.word	0x000003ff
 8001354:	feffffff 	.word	0xfeffffff
 8001358:	000007fe 	.word	0x000007fe
 800135c:	464b      	mov	r3, r9
 800135e:	4323      	orrs	r3, r4
 8001360:	d059      	beq.n	8001416 <__aeabi_dmul+0x42e>
 8001362:	2c00      	cmp	r4, #0
 8001364:	d100      	bne.n	8001368 <__aeabi_dmul+0x380>
 8001366:	e0a3      	b.n	80014b0 <__aeabi_dmul+0x4c8>
 8001368:	0020      	movs	r0, r4
 800136a:	f000 fd2b 	bl	8001dc4 <__clzsi2>
 800136e:	0001      	movs	r1, r0
 8001370:	0003      	movs	r3, r0
 8001372:	390b      	subs	r1, #11
 8001374:	221d      	movs	r2, #29
 8001376:	1a52      	subs	r2, r2, r1
 8001378:	4649      	mov	r1, r9
 800137a:	0018      	movs	r0, r3
 800137c:	40d1      	lsrs	r1, r2
 800137e:	464a      	mov	r2, r9
 8001380:	3808      	subs	r0, #8
 8001382:	4082      	lsls	r2, r0
 8001384:	4084      	lsls	r4, r0
 8001386:	0010      	movs	r0, r2
 8001388:	430c      	orrs	r4, r1
 800138a:	4a74      	ldr	r2, [pc, #464]	; (800155c <__aeabi_dmul+0x574>)
 800138c:	1aeb      	subs	r3, r5, r3
 800138e:	4694      	mov	ip, r2
 8001390:	4642      	mov	r2, r8
 8001392:	4463      	add	r3, ip
 8001394:	9301      	str	r3, [sp, #4]
 8001396:	9b01      	ldr	r3, [sp, #4]
 8001398:	407a      	eors	r2, r7
 800139a:	3301      	adds	r3, #1
 800139c:	2100      	movs	r1, #0
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	9302      	str	r3, [sp, #8]
 80013a2:	2e0a      	cmp	r6, #10
 80013a4:	dd00      	ble.n	80013a8 <__aeabi_dmul+0x3c0>
 80013a6:	e667      	b.n	8001078 <__aeabi_dmul+0x90>
 80013a8:	e683      	b.n	80010b2 <__aeabi_dmul+0xca>
 80013aa:	465b      	mov	r3, fp
 80013ac:	4303      	orrs	r3, r0
 80013ae:	469a      	mov	sl, r3
 80013b0:	d02a      	beq.n	8001408 <__aeabi_dmul+0x420>
 80013b2:	465b      	mov	r3, fp
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d06d      	beq.n	8001494 <__aeabi_dmul+0x4ac>
 80013b8:	4658      	mov	r0, fp
 80013ba:	f000 fd03 	bl	8001dc4 <__clzsi2>
 80013be:	0001      	movs	r1, r0
 80013c0:	0003      	movs	r3, r0
 80013c2:	390b      	subs	r1, #11
 80013c4:	221d      	movs	r2, #29
 80013c6:	1a52      	subs	r2, r2, r1
 80013c8:	0021      	movs	r1, r4
 80013ca:	0018      	movs	r0, r3
 80013cc:	465d      	mov	r5, fp
 80013ce:	40d1      	lsrs	r1, r2
 80013d0:	3808      	subs	r0, #8
 80013d2:	4085      	lsls	r5, r0
 80013d4:	000a      	movs	r2, r1
 80013d6:	4084      	lsls	r4, r0
 80013d8:	432a      	orrs	r2, r5
 80013da:	4693      	mov	fp, r2
 80013dc:	46a2      	mov	sl, r4
 80013de:	4d5f      	ldr	r5, [pc, #380]	; (800155c <__aeabi_dmul+0x574>)
 80013e0:	2600      	movs	r6, #0
 80013e2:	1aed      	subs	r5, r5, r3
 80013e4:	2300      	movs	r3, #0
 80013e6:	9300      	str	r3, [sp, #0]
 80013e8:	e625      	b.n	8001036 <__aeabi_dmul+0x4e>
 80013ea:	465b      	mov	r3, fp
 80013ec:	4303      	orrs	r3, r0
 80013ee:	469a      	mov	sl, r3
 80013f0:	d105      	bne.n	80013fe <__aeabi_dmul+0x416>
 80013f2:	2300      	movs	r3, #0
 80013f4:	469b      	mov	fp, r3
 80013f6:	3302      	adds	r3, #2
 80013f8:	2608      	movs	r6, #8
 80013fa:	9300      	str	r3, [sp, #0]
 80013fc:	e61b      	b.n	8001036 <__aeabi_dmul+0x4e>
 80013fe:	2303      	movs	r3, #3
 8001400:	4682      	mov	sl, r0
 8001402:	260c      	movs	r6, #12
 8001404:	9300      	str	r3, [sp, #0]
 8001406:	e616      	b.n	8001036 <__aeabi_dmul+0x4e>
 8001408:	2300      	movs	r3, #0
 800140a:	469b      	mov	fp, r3
 800140c:	3301      	adds	r3, #1
 800140e:	2604      	movs	r6, #4
 8001410:	2500      	movs	r5, #0
 8001412:	9300      	str	r3, [sp, #0]
 8001414:	e60f      	b.n	8001036 <__aeabi_dmul+0x4e>
 8001416:	4642      	mov	r2, r8
 8001418:	3301      	adds	r3, #1
 800141a:	9501      	str	r5, [sp, #4]
 800141c:	431e      	orrs	r6, r3
 800141e:	9b01      	ldr	r3, [sp, #4]
 8001420:	407a      	eors	r2, r7
 8001422:	3301      	adds	r3, #1
 8001424:	2400      	movs	r4, #0
 8001426:	2000      	movs	r0, #0
 8001428:	2101      	movs	r1, #1
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	9302      	str	r3, [sp, #8]
 800142e:	2e0a      	cmp	r6, #10
 8001430:	dd00      	ble.n	8001434 <__aeabi_dmul+0x44c>
 8001432:	e621      	b.n	8001078 <__aeabi_dmul+0x90>
 8001434:	e63d      	b.n	80010b2 <__aeabi_dmul+0xca>
 8001436:	2101      	movs	r1, #1
 8001438:	1ac9      	subs	r1, r1, r3
 800143a:	2938      	cmp	r1, #56	; 0x38
 800143c:	dd00      	ble.n	8001440 <__aeabi_dmul+0x458>
 800143e:	e642      	b.n	80010c6 <__aeabi_dmul+0xde>
 8001440:	291f      	cmp	r1, #31
 8001442:	dd47      	ble.n	80014d4 <__aeabi_dmul+0x4ec>
 8001444:	261f      	movs	r6, #31
 8001446:	0025      	movs	r5, r4
 8001448:	4276      	negs	r6, r6
 800144a:	1af3      	subs	r3, r6, r3
 800144c:	40dd      	lsrs	r5, r3
 800144e:	002b      	movs	r3, r5
 8001450:	2920      	cmp	r1, #32
 8001452:	d005      	beq.n	8001460 <__aeabi_dmul+0x478>
 8001454:	4942      	ldr	r1, [pc, #264]	; (8001560 <__aeabi_dmul+0x578>)
 8001456:	9d02      	ldr	r5, [sp, #8]
 8001458:	468c      	mov	ip, r1
 800145a:	4465      	add	r5, ip
 800145c:	40ac      	lsls	r4, r5
 800145e:	4320      	orrs	r0, r4
 8001460:	1e41      	subs	r1, r0, #1
 8001462:	4188      	sbcs	r0, r1
 8001464:	4318      	orrs	r0, r3
 8001466:	2307      	movs	r3, #7
 8001468:	001d      	movs	r5, r3
 800146a:	2400      	movs	r4, #0
 800146c:	4005      	ands	r5, r0
 800146e:	4203      	tst	r3, r0
 8001470:	d04a      	beq.n	8001508 <__aeabi_dmul+0x520>
 8001472:	230f      	movs	r3, #15
 8001474:	2400      	movs	r4, #0
 8001476:	4003      	ands	r3, r0
 8001478:	2b04      	cmp	r3, #4
 800147a:	d042      	beq.n	8001502 <__aeabi_dmul+0x51a>
 800147c:	1d03      	adds	r3, r0, #4
 800147e:	4283      	cmp	r3, r0
 8001480:	4180      	sbcs	r0, r0
 8001482:	4240      	negs	r0, r0
 8001484:	1824      	adds	r4, r4, r0
 8001486:	0018      	movs	r0, r3
 8001488:	0223      	lsls	r3, r4, #8
 800148a:	d53a      	bpl.n	8001502 <__aeabi_dmul+0x51a>
 800148c:	2301      	movs	r3, #1
 800148e:	2400      	movs	r4, #0
 8001490:	2500      	movs	r5, #0
 8001492:	e61b      	b.n	80010cc <__aeabi_dmul+0xe4>
 8001494:	f000 fc96 	bl	8001dc4 <__clzsi2>
 8001498:	0001      	movs	r1, r0
 800149a:	0003      	movs	r3, r0
 800149c:	3115      	adds	r1, #21
 800149e:	3320      	adds	r3, #32
 80014a0:	291c      	cmp	r1, #28
 80014a2:	dd8f      	ble.n	80013c4 <__aeabi_dmul+0x3dc>
 80014a4:	3808      	subs	r0, #8
 80014a6:	2200      	movs	r2, #0
 80014a8:	4084      	lsls	r4, r0
 80014aa:	4692      	mov	sl, r2
 80014ac:	46a3      	mov	fp, r4
 80014ae:	e796      	b.n	80013de <__aeabi_dmul+0x3f6>
 80014b0:	f000 fc88 	bl	8001dc4 <__clzsi2>
 80014b4:	0001      	movs	r1, r0
 80014b6:	0003      	movs	r3, r0
 80014b8:	3115      	adds	r1, #21
 80014ba:	3320      	adds	r3, #32
 80014bc:	291c      	cmp	r1, #28
 80014be:	dc00      	bgt.n	80014c2 <__aeabi_dmul+0x4da>
 80014c0:	e758      	b.n	8001374 <__aeabi_dmul+0x38c>
 80014c2:	0002      	movs	r2, r0
 80014c4:	464c      	mov	r4, r9
 80014c6:	3a08      	subs	r2, #8
 80014c8:	2000      	movs	r0, #0
 80014ca:	4094      	lsls	r4, r2
 80014cc:	e75d      	b.n	800138a <__aeabi_dmul+0x3a2>
 80014ce:	9b01      	ldr	r3, [sp, #4]
 80014d0:	9302      	str	r3, [sp, #8]
 80014d2:	e711      	b.n	80012f8 <__aeabi_dmul+0x310>
 80014d4:	4b23      	ldr	r3, [pc, #140]	; (8001564 <__aeabi_dmul+0x57c>)
 80014d6:	0026      	movs	r6, r4
 80014d8:	469c      	mov	ip, r3
 80014da:	0003      	movs	r3, r0
 80014dc:	9d02      	ldr	r5, [sp, #8]
 80014de:	40cb      	lsrs	r3, r1
 80014e0:	4465      	add	r5, ip
 80014e2:	40ae      	lsls	r6, r5
 80014e4:	431e      	orrs	r6, r3
 80014e6:	0003      	movs	r3, r0
 80014e8:	40ab      	lsls	r3, r5
 80014ea:	1e58      	subs	r0, r3, #1
 80014ec:	4183      	sbcs	r3, r0
 80014ee:	0030      	movs	r0, r6
 80014f0:	4318      	orrs	r0, r3
 80014f2:	40cc      	lsrs	r4, r1
 80014f4:	0743      	lsls	r3, r0, #29
 80014f6:	d0c7      	beq.n	8001488 <__aeabi_dmul+0x4a0>
 80014f8:	230f      	movs	r3, #15
 80014fa:	4003      	ands	r3, r0
 80014fc:	2b04      	cmp	r3, #4
 80014fe:	d1bd      	bne.n	800147c <__aeabi_dmul+0x494>
 8001500:	e7c2      	b.n	8001488 <__aeabi_dmul+0x4a0>
 8001502:	0765      	lsls	r5, r4, #29
 8001504:	0264      	lsls	r4, r4, #9
 8001506:	0b24      	lsrs	r4, r4, #12
 8001508:	08c0      	lsrs	r0, r0, #3
 800150a:	2300      	movs	r3, #0
 800150c:	4305      	orrs	r5, r0
 800150e:	e5dd      	b.n	80010cc <__aeabi_dmul+0xe4>
 8001510:	2500      	movs	r5, #0
 8001512:	2302      	movs	r3, #2
 8001514:	2e0f      	cmp	r6, #15
 8001516:	d10c      	bne.n	8001532 <__aeabi_dmul+0x54a>
 8001518:	2480      	movs	r4, #128	; 0x80
 800151a:	465b      	mov	r3, fp
 800151c:	0324      	lsls	r4, r4, #12
 800151e:	4223      	tst	r3, r4
 8001520:	d00e      	beq.n	8001540 <__aeabi_dmul+0x558>
 8001522:	4221      	tst	r1, r4
 8001524:	d10c      	bne.n	8001540 <__aeabi_dmul+0x558>
 8001526:	430c      	orrs	r4, r1
 8001528:	0324      	lsls	r4, r4, #12
 800152a:	003a      	movs	r2, r7
 800152c:	4b0e      	ldr	r3, [pc, #56]	; (8001568 <__aeabi_dmul+0x580>)
 800152e:	0b24      	lsrs	r4, r4, #12
 8001530:	e5cc      	b.n	80010cc <__aeabi_dmul+0xe4>
 8001532:	2e0b      	cmp	r6, #11
 8001534:	d000      	beq.n	8001538 <__aeabi_dmul+0x550>
 8001536:	e5a2      	b.n	800107e <__aeabi_dmul+0x96>
 8001538:	468b      	mov	fp, r1
 800153a:	46aa      	mov	sl, r5
 800153c:	9300      	str	r3, [sp, #0]
 800153e:	e5f7      	b.n	8001130 <__aeabi_dmul+0x148>
 8001540:	2480      	movs	r4, #128	; 0x80
 8001542:	465b      	mov	r3, fp
 8001544:	0324      	lsls	r4, r4, #12
 8001546:	431c      	orrs	r4, r3
 8001548:	0324      	lsls	r4, r4, #12
 800154a:	4642      	mov	r2, r8
 800154c:	4655      	mov	r5, sl
 800154e:	4b06      	ldr	r3, [pc, #24]	; (8001568 <__aeabi_dmul+0x580>)
 8001550:	0b24      	lsrs	r4, r4, #12
 8001552:	e5bb      	b.n	80010cc <__aeabi_dmul+0xe4>
 8001554:	464d      	mov	r5, r9
 8001556:	0021      	movs	r1, r4
 8001558:	2303      	movs	r3, #3
 800155a:	e7db      	b.n	8001514 <__aeabi_dmul+0x52c>
 800155c:	fffffc0d 	.word	0xfffffc0d
 8001560:	0000043e 	.word	0x0000043e
 8001564:	0000041e 	.word	0x0000041e
 8001568:	000007ff 	.word	0x000007ff

0800156c <__aeabi_dsub>:
 800156c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156e:	4657      	mov	r7, sl
 8001570:	464e      	mov	r6, r9
 8001572:	4645      	mov	r5, r8
 8001574:	46de      	mov	lr, fp
 8001576:	b5e0      	push	{r5, r6, r7, lr}
 8001578:	000d      	movs	r5, r1
 800157a:	0004      	movs	r4, r0
 800157c:	0019      	movs	r1, r3
 800157e:	0010      	movs	r0, r2
 8001580:	032b      	lsls	r3, r5, #12
 8001582:	0a5b      	lsrs	r3, r3, #9
 8001584:	0f62      	lsrs	r2, r4, #29
 8001586:	431a      	orrs	r2, r3
 8001588:	00e3      	lsls	r3, r4, #3
 800158a:	030c      	lsls	r4, r1, #12
 800158c:	0a64      	lsrs	r4, r4, #9
 800158e:	0f47      	lsrs	r7, r0, #29
 8001590:	4327      	orrs	r7, r4
 8001592:	4cd0      	ldr	r4, [pc, #832]	; (80018d4 <__aeabi_dsub+0x368>)
 8001594:	006e      	lsls	r6, r5, #1
 8001596:	4691      	mov	r9, r2
 8001598:	b083      	sub	sp, #12
 800159a:	004a      	lsls	r2, r1, #1
 800159c:	00c0      	lsls	r0, r0, #3
 800159e:	4698      	mov	r8, r3
 80015a0:	46a2      	mov	sl, r4
 80015a2:	0d76      	lsrs	r6, r6, #21
 80015a4:	0fed      	lsrs	r5, r5, #31
 80015a6:	0d52      	lsrs	r2, r2, #21
 80015a8:	0fc9      	lsrs	r1, r1, #31
 80015aa:	9001      	str	r0, [sp, #4]
 80015ac:	42a2      	cmp	r2, r4
 80015ae:	d100      	bne.n	80015b2 <__aeabi_dsub+0x46>
 80015b0:	e0b9      	b.n	8001726 <__aeabi_dsub+0x1ba>
 80015b2:	2401      	movs	r4, #1
 80015b4:	4061      	eors	r1, r4
 80015b6:	468b      	mov	fp, r1
 80015b8:	428d      	cmp	r5, r1
 80015ba:	d100      	bne.n	80015be <__aeabi_dsub+0x52>
 80015bc:	e08d      	b.n	80016da <__aeabi_dsub+0x16e>
 80015be:	1ab4      	subs	r4, r6, r2
 80015c0:	46a4      	mov	ip, r4
 80015c2:	2c00      	cmp	r4, #0
 80015c4:	dc00      	bgt.n	80015c8 <__aeabi_dsub+0x5c>
 80015c6:	e0b7      	b.n	8001738 <__aeabi_dsub+0x1cc>
 80015c8:	2a00      	cmp	r2, #0
 80015ca:	d100      	bne.n	80015ce <__aeabi_dsub+0x62>
 80015cc:	e0cb      	b.n	8001766 <__aeabi_dsub+0x1fa>
 80015ce:	4ac1      	ldr	r2, [pc, #772]	; (80018d4 <__aeabi_dsub+0x368>)
 80015d0:	4296      	cmp	r6, r2
 80015d2:	d100      	bne.n	80015d6 <__aeabi_dsub+0x6a>
 80015d4:	e186      	b.n	80018e4 <__aeabi_dsub+0x378>
 80015d6:	2280      	movs	r2, #128	; 0x80
 80015d8:	0412      	lsls	r2, r2, #16
 80015da:	4317      	orrs	r7, r2
 80015dc:	4662      	mov	r2, ip
 80015de:	2a38      	cmp	r2, #56	; 0x38
 80015e0:	dd00      	ble.n	80015e4 <__aeabi_dsub+0x78>
 80015e2:	e1a4      	b.n	800192e <__aeabi_dsub+0x3c2>
 80015e4:	2a1f      	cmp	r2, #31
 80015e6:	dd00      	ble.n	80015ea <__aeabi_dsub+0x7e>
 80015e8:	e21d      	b.n	8001a26 <__aeabi_dsub+0x4ba>
 80015ea:	4661      	mov	r1, ip
 80015ec:	2220      	movs	r2, #32
 80015ee:	003c      	movs	r4, r7
 80015f0:	1a52      	subs	r2, r2, r1
 80015f2:	0001      	movs	r1, r0
 80015f4:	4090      	lsls	r0, r2
 80015f6:	4094      	lsls	r4, r2
 80015f8:	1e42      	subs	r2, r0, #1
 80015fa:	4190      	sbcs	r0, r2
 80015fc:	4662      	mov	r2, ip
 80015fe:	46a0      	mov	r8, r4
 8001600:	4664      	mov	r4, ip
 8001602:	40d7      	lsrs	r7, r2
 8001604:	464a      	mov	r2, r9
 8001606:	40e1      	lsrs	r1, r4
 8001608:	4644      	mov	r4, r8
 800160a:	1bd2      	subs	r2, r2, r7
 800160c:	4691      	mov	r9, r2
 800160e:	430c      	orrs	r4, r1
 8001610:	4304      	orrs	r4, r0
 8001612:	1b1c      	subs	r4, r3, r4
 8001614:	42a3      	cmp	r3, r4
 8001616:	4192      	sbcs	r2, r2
 8001618:	464b      	mov	r3, r9
 800161a:	4252      	negs	r2, r2
 800161c:	1a9b      	subs	r3, r3, r2
 800161e:	469a      	mov	sl, r3
 8001620:	4653      	mov	r3, sl
 8001622:	021b      	lsls	r3, r3, #8
 8001624:	d400      	bmi.n	8001628 <__aeabi_dsub+0xbc>
 8001626:	e12b      	b.n	8001880 <__aeabi_dsub+0x314>
 8001628:	4653      	mov	r3, sl
 800162a:	025a      	lsls	r2, r3, #9
 800162c:	0a53      	lsrs	r3, r2, #9
 800162e:	469a      	mov	sl, r3
 8001630:	4653      	mov	r3, sl
 8001632:	2b00      	cmp	r3, #0
 8001634:	d100      	bne.n	8001638 <__aeabi_dsub+0xcc>
 8001636:	e166      	b.n	8001906 <__aeabi_dsub+0x39a>
 8001638:	4650      	mov	r0, sl
 800163a:	f000 fbc3 	bl	8001dc4 <__clzsi2>
 800163e:	0003      	movs	r3, r0
 8001640:	3b08      	subs	r3, #8
 8001642:	2220      	movs	r2, #32
 8001644:	0020      	movs	r0, r4
 8001646:	1ad2      	subs	r2, r2, r3
 8001648:	4651      	mov	r1, sl
 800164a:	40d0      	lsrs	r0, r2
 800164c:	4099      	lsls	r1, r3
 800164e:	0002      	movs	r2, r0
 8001650:	409c      	lsls	r4, r3
 8001652:	430a      	orrs	r2, r1
 8001654:	429e      	cmp	r6, r3
 8001656:	dd00      	ble.n	800165a <__aeabi_dsub+0xee>
 8001658:	e164      	b.n	8001924 <__aeabi_dsub+0x3b8>
 800165a:	1b9b      	subs	r3, r3, r6
 800165c:	1c59      	adds	r1, r3, #1
 800165e:	291f      	cmp	r1, #31
 8001660:	dd00      	ble.n	8001664 <__aeabi_dsub+0xf8>
 8001662:	e0fe      	b.n	8001862 <__aeabi_dsub+0x2f6>
 8001664:	2320      	movs	r3, #32
 8001666:	0010      	movs	r0, r2
 8001668:	0026      	movs	r6, r4
 800166a:	1a5b      	subs	r3, r3, r1
 800166c:	409c      	lsls	r4, r3
 800166e:	4098      	lsls	r0, r3
 8001670:	40ce      	lsrs	r6, r1
 8001672:	40ca      	lsrs	r2, r1
 8001674:	1e63      	subs	r3, r4, #1
 8001676:	419c      	sbcs	r4, r3
 8001678:	4330      	orrs	r0, r6
 800167a:	4692      	mov	sl, r2
 800167c:	2600      	movs	r6, #0
 800167e:	4304      	orrs	r4, r0
 8001680:	0763      	lsls	r3, r4, #29
 8001682:	d009      	beq.n	8001698 <__aeabi_dsub+0x12c>
 8001684:	230f      	movs	r3, #15
 8001686:	4023      	ands	r3, r4
 8001688:	2b04      	cmp	r3, #4
 800168a:	d005      	beq.n	8001698 <__aeabi_dsub+0x12c>
 800168c:	1d23      	adds	r3, r4, #4
 800168e:	42a3      	cmp	r3, r4
 8001690:	41a4      	sbcs	r4, r4
 8001692:	4264      	negs	r4, r4
 8001694:	44a2      	add	sl, r4
 8001696:	001c      	movs	r4, r3
 8001698:	4653      	mov	r3, sl
 800169a:	021b      	lsls	r3, r3, #8
 800169c:	d400      	bmi.n	80016a0 <__aeabi_dsub+0x134>
 800169e:	e0f2      	b.n	8001886 <__aeabi_dsub+0x31a>
 80016a0:	4b8c      	ldr	r3, [pc, #560]	; (80018d4 <__aeabi_dsub+0x368>)
 80016a2:	3601      	adds	r6, #1
 80016a4:	429e      	cmp	r6, r3
 80016a6:	d100      	bne.n	80016aa <__aeabi_dsub+0x13e>
 80016a8:	e10f      	b.n	80018ca <__aeabi_dsub+0x35e>
 80016aa:	4653      	mov	r3, sl
 80016ac:	498a      	ldr	r1, [pc, #552]	; (80018d8 <__aeabi_dsub+0x36c>)
 80016ae:	08e4      	lsrs	r4, r4, #3
 80016b0:	400b      	ands	r3, r1
 80016b2:	0019      	movs	r1, r3
 80016b4:	075b      	lsls	r3, r3, #29
 80016b6:	4323      	orrs	r3, r4
 80016b8:	0572      	lsls	r2, r6, #21
 80016ba:	024c      	lsls	r4, r1, #9
 80016bc:	0b24      	lsrs	r4, r4, #12
 80016be:	0d52      	lsrs	r2, r2, #21
 80016c0:	0512      	lsls	r2, r2, #20
 80016c2:	4322      	orrs	r2, r4
 80016c4:	07ed      	lsls	r5, r5, #31
 80016c6:	432a      	orrs	r2, r5
 80016c8:	0018      	movs	r0, r3
 80016ca:	0011      	movs	r1, r2
 80016cc:	b003      	add	sp, #12
 80016ce:	bcf0      	pop	{r4, r5, r6, r7}
 80016d0:	46bb      	mov	fp, r7
 80016d2:	46b2      	mov	sl, r6
 80016d4:	46a9      	mov	r9, r5
 80016d6:	46a0      	mov	r8, r4
 80016d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80016da:	1ab4      	subs	r4, r6, r2
 80016dc:	46a4      	mov	ip, r4
 80016de:	2c00      	cmp	r4, #0
 80016e0:	dd59      	ble.n	8001796 <__aeabi_dsub+0x22a>
 80016e2:	2a00      	cmp	r2, #0
 80016e4:	d100      	bne.n	80016e8 <__aeabi_dsub+0x17c>
 80016e6:	e0b0      	b.n	800184a <__aeabi_dsub+0x2de>
 80016e8:	4556      	cmp	r6, sl
 80016ea:	d100      	bne.n	80016ee <__aeabi_dsub+0x182>
 80016ec:	e0fa      	b.n	80018e4 <__aeabi_dsub+0x378>
 80016ee:	2280      	movs	r2, #128	; 0x80
 80016f0:	0412      	lsls	r2, r2, #16
 80016f2:	4317      	orrs	r7, r2
 80016f4:	4662      	mov	r2, ip
 80016f6:	2a38      	cmp	r2, #56	; 0x38
 80016f8:	dd00      	ble.n	80016fc <__aeabi_dsub+0x190>
 80016fa:	e0d4      	b.n	80018a6 <__aeabi_dsub+0x33a>
 80016fc:	2a1f      	cmp	r2, #31
 80016fe:	dc00      	bgt.n	8001702 <__aeabi_dsub+0x196>
 8001700:	e1c0      	b.n	8001a84 <__aeabi_dsub+0x518>
 8001702:	0039      	movs	r1, r7
 8001704:	3a20      	subs	r2, #32
 8001706:	40d1      	lsrs	r1, r2
 8001708:	4662      	mov	r2, ip
 800170a:	2a20      	cmp	r2, #32
 800170c:	d006      	beq.n	800171c <__aeabi_dsub+0x1b0>
 800170e:	4664      	mov	r4, ip
 8001710:	2240      	movs	r2, #64	; 0x40
 8001712:	1b12      	subs	r2, r2, r4
 8001714:	003c      	movs	r4, r7
 8001716:	4094      	lsls	r4, r2
 8001718:	4304      	orrs	r4, r0
 800171a:	9401      	str	r4, [sp, #4]
 800171c:	9c01      	ldr	r4, [sp, #4]
 800171e:	1e62      	subs	r2, r4, #1
 8001720:	4194      	sbcs	r4, r2
 8001722:	430c      	orrs	r4, r1
 8001724:	e0c3      	b.n	80018ae <__aeabi_dsub+0x342>
 8001726:	003c      	movs	r4, r7
 8001728:	4304      	orrs	r4, r0
 800172a:	d02b      	beq.n	8001784 <__aeabi_dsub+0x218>
 800172c:	468b      	mov	fp, r1
 800172e:	428d      	cmp	r5, r1
 8001730:	d02e      	beq.n	8001790 <__aeabi_dsub+0x224>
 8001732:	4c6a      	ldr	r4, [pc, #424]	; (80018dc <__aeabi_dsub+0x370>)
 8001734:	46a4      	mov	ip, r4
 8001736:	44b4      	add	ip, r6
 8001738:	4664      	mov	r4, ip
 800173a:	2c00      	cmp	r4, #0
 800173c:	d05f      	beq.n	80017fe <__aeabi_dsub+0x292>
 800173e:	1b94      	subs	r4, r2, r6
 8001740:	46a4      	mov	ip, r4
 8001742:	2e00      	cmp	r6, #0
 8001744:	d000      	beq.n	8001748 <__aeabi_dsub+0x1dc>
 8001746:	e120      	b.n	800198a <__aeabi_dsub+0x41e>
 8001748:	464c      	mov	r4, r9
 800174a:	431c      	orrs	r4, r3
 800174c:	d100      	bne.n	8001750 <__aeabi_dsub+0x1e4>
 800174e:	e1c7      	b.n	8001ae0 <__aeabi_dsub+0x574>
 8001750:	4661      	mov	r1, ip
 8001752:	1e4c      	subs	r4, r1, #1
 8001754:	2901      	cmp	r1, #1
 8001756:	d100      	bne.n	800175a <__aeabi_dsub+0x1ee>
 8001758:	e223      	b.n	8001ba2 <__aeabi_dsub+0x636>
 800175a:	4d5e      	ldr	r5, [pc, #376]	; (80018d4 <__aeabi_dsub+0x368>)
 800175c:	45ac      	cmp	ip, r5
 800175e:	d100      	bne.n	8001762 <__aeabi_dsub+0x1f6>
 8001760:	e1d8      	b.n	8001b14 <__aeabi_dsub+0x5a8>
 8001762:	46a4      	mov	ip, r4
 8001764:	e11a      	b.n	800199c <__aeabi_dsub+0x430>
 8001766:	003a      	movs	r2, r7
 8001768:	4302      	orrs	r2, r0
 800176a:	d100      	bne.n	800176e <__aeabi_dsub+0x202>
 800176c:	e0e4      	b.n	8001938 <__aeabi_dsub+0x3cc>
 800176e:	0022      	movs	r2, r4
 8001770:	3a01      	subs	r2, #1
 8001772:	2c01      	cmp	r4, #1
 8001774:	d100      	bne.n	8001778 <__aeabi_dsub+0x20c>
 8001776:	e1c3      	b.n	8001b00 <__aeabi_dsub+0x594>
 8001778:	4956      	ldr	r1, [pc, #344]	; (80018d4 <__aeabi_dsub+0x368>)
 800177a:	428c      	cmp	r4, r1
 800177c:	d100      	bne.n	8001780 <__aeabi_dsub+0x214>
 800177e:	e0b1      	b.n	80018e4 <__aeabi_dsub+0x378>
 8001780:	4694      	mov	ip, r2
 8001782:	e72b      	b.n	80015dc <__aeabi_dsub+0x70>
 8001784:	2401      	movs	r4, #1
 8001786:	4061      	eors	r1, r4
 8001788:	468b      	mov	fp, r1
 800178a:	428d      	cmp	r5, r1
 800178c:	d000      	beq.n	8001790 <__aeabi_dsub+0x224>
 800178e:	e716      	b.n	80015be <__aeabi_dsub+0x52>
 8001790:	4952      	ldr	r1, [pc, #328]	; (80018dc <__aeabi_dsub+0x370>)
 8001792:	468c      	mov	ip, r1
 8001794:	44b4      	add	ip, r6
 8001796:	4664      	mov	r4, ip
 8001798:	2c00      	cmp	r4, #0
 800179a:	d100      	bne.n	800179e <__aeabi_dsub+0x232>
 800179c:	e0d3      	b.n	8001946 <__aeabi_dsub+0x3da>
 800179e:	1b91      	subs	r1, r2, r6
 80017a0:	468c      	mov	ip, r1
 80017a2:	2e00      	cmp	r6, #0
 80017a4:	d100      	bne.n	80017a8 <__aeabi_dsub+0x23c>
 80017a6:	e15e      	b.n	8001a66 <__aeabi_dsub+0x4fa>
 80017a8:	494a      	ldr	r1, [pc, #296]	; (80018d4 <__aeabi_dsub+0x368>)
 80017aa:	428a      	cmp	r2, r1
 80017ac:	d100      	bne.n	80017b0 <__aeabi_dsub+0x244>
 80017ae:	e1be      	b.n	8001b2e <__aeabi_dsub+0x5c2>
 80017b0:	2180      	movs	r1, #128	; 0x80
 80017b2:	464c      	mov	r4, r9
 80017b4:	0409      	lsls	r1, r1, #16
 80017b6:	430c      	orrs	r4, r1
 80017b8:	46a1      	mov	r9, r4
 80017ba:	4661      	mov	r1, ip
 80017bc:	2938      	cmp	r1, #56	; 0x38
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dsub+0x256>
 80017c0:	e1ba      	b.n	8001b38 <__aeabi_dsub+0x5cc>
 80017c2:	291f      	cmp	r1, #31
 80017c4:	dd00      	ble.n	80017c8 <__aeabi_dsub+0x25c>
 80017c6:	e227      	b.n	8001c18 <__aeabi_dsub+0x6ac>
 80017c8:	2420      	movs	r4, #32
 80017ca:	1a64      	subs	r4, r4, r1
 80017cc:	4649      	mov	r1, r9
 80017ce:	40a1      	lsls	r1, r4
 80017d0:	001e      	movs	r6, r3
 80017d2:	4688      	mov	r8, r1
 80017d4:	4661      	mov	r1, ip
 80017d6:	40a3      	lsls	r3, r4
 80017d8:	40ce      	lsrs	r6, r1
 80017da:	4641      	mov	r1, r8
 80017dc:	1e5c      	subs	r4, r3, #1
 80017de:	41a3      	sbcs	r3, r4
 80017e0:	4331      	orrs	r1, r6
 80017e2:	4319      	orrs	r1, r3
 80017e4:	000c      	movs	r4, r1
 80017e6:	4663      	mov	r3, ip
 80017e8:	4649      	mov	r1, r9
 80017ea:	40d9      	lsrs	r1, r3
 80017ec:	187f      	adds	r7, r7, r1
 80017ee:	1824      	adds	r4, r4, r0
 80017f0:	4284      	cmp	r4, r0
 80017f2:	419b      	sbcs	r3, r3
 80017f4:	425b      	negs	r3, r3
 80017f6:	469a      	mov	sl, r3
 80017f8:	0016      	movs	r6, r2
 80017fa:	44ba      	add	sl, r7
 80017fc:	e05d      	b.n	80018ba <__aeabi_dsub+0x34e>
 80017fe:	4c38      	ldr	r4, [pc, #224]	; (80018e0 <__aeabi_dsub+0x374>)
 8001800:	1c72      	adds	r2, r6, #1
 8001802:	4222      	tst	r2, r4
 8001804:	d000      	beq.n	8001808 <__aeabi_dsub+0x29c>
 8001806:	e0df      	b.n	80019c8 <__aeabi_dsub+0x45c>
 8001808:	464a      	mov	r2, r9
 800180a:	431a      	orrs	r2, r3
 800180c:	2e00      	cmp	r6, #0
 800180e:	d000      	beq.n	8001812 <__aeabi_dsub+0x2a6>
 8001810:	e15c      	b.n	8001acc <__aeabi_dsub+0x560>
 8001812:	2a00      	cmp	r2, #0
 8001814:	d100      	bne.n	8001818 <__aeabi_dsub+0x2ac>
 8001816:	e1cf      	b.n	8001bb8 <__aeabi_dsub+0x64c>
 8001818:	003a      	movs	r2, r7
 800181a:	4302      	orrs	r2, r0
 800181c:	d100      	bne.n	8001820 <__aeabi_dsub+0x2b4>
 800181e:	e17f      	b.n	8001b20 <__aeabi_dsub+0x5b4>
 8001820:	1a1c      	subs	r4, r3, r0
 8001822:	464a      	mov	r2, r9
 8001824:	42a3      	cmp	r3, r4
 8001826:	4189      	sbcs	r1, r1
 8001828:	1bd2      	subs	r2, r2, r7
 800182a:	4249      	negs	r1, r1
 800182c:	1a52      	subs	r2, r2, r1
 800182e:	4692      	mov	sl, r2
 8001830:	0212      	lsls	r2, r2, #8
 8001832:	d400      	bmi.n	8001836 <__aeabi_dsub+0x2ca>
 8001834:	e20a      	b.n	8001c4c <__aeabi_dsub+0x6e0>
 8001836:	1ac4      	subs	r4, r0, r3
 8001838:	42a0      	cmp	r0, r4
 800183a:	4180      	sbcs	r0, r0
 800183c:	464b      	mov	r3, r9
 800183e:	4240      	negs	r0, r0
 8001840:	1aff      	subs	r7, r7, r3
 8001842:	1a3b      	subs	r3, r7, r0
 8001844:	469a      	mov	sl, r3
 8001846:	465d      	mov	r5, fp
 8001848:	e71a      	b.n	8001680 <__aeabi_dsub+0x114>
 800184a:	003a      	movs	r2, r7
 800184c:	4302      	orrs	r2, r0
 800184e:	d073      	beq.n	8001938 <__aeabi_dsub+0x3cc>
 8001850:	0022      	movs	r2, r4
 8001852:	3a01      	subs	r2, #1
 8001854:	2c01      	cmp	r4, #1
 8001856:	d100      	bne.n	800185a <__aeabi_dsub+0x2ee>
 8001858:	e0cb      	b.n	80019f2 <__aeabi_dsub+0x486>
 800185a:	4554      	cmp	r4, sl
 800185c:	d042      	beq.n	80018e4 <__aeabi_dsub+0x378>
 800185e:	4694      	mov	ip, r2
 8001860:	e748      	b.n	80016f4 <__aeabi_dsub+0x188>
 8001862:	0010      	movs	r0, r2
 8001864:	3b1f      	subs	r3, #31
 8001866:	40d8      	lsrs	r0, r3
 8001868:	2920      	cmp	r1, #32
 800186a:	d003      	beq.n	8001874 <__aeabi_dsub+0x308>
 800186c:	2340      	movs	r3, #64	; 0x40
 800186e:	1a5b      	subs	r3, r3, r1
 8001870:	409a      	lsls	r2, r3
 8001872:	4314      	orrs	r4, r2
 8001874:	1e63      	subs	r3, r4, #1
 8001876:	419c      	sbcs	r4, r3
 8001878:	2300      	movs	r3, #0
 800187a:	2600      	movs	r6, #0
 800187c:	469a      	mov	sl, r3
 800187e:	4304      	orrs	r4, r0
 8001880:	0763      	lsls	r3, r4, #29
 8001882:	d000      	beq.n	8001886 <__aeabi_dsub+0x31a>
 8001884:	e6fe      	b.n	8001684 <__aeabi_dsub+0x118>
 8001886:	4652      	mov	r2, sl
 8001888:	08e3      	lsrs	r3, r4, #3
 800188a:	0752      	lsls	r2, r2, #29
 800188c:	4313      	orrs	r3, r2
 800188e:	4652      	mov	r2, sl
 8001890:	46b4      	mov	ip, r6
 8001892:	08d2      	lsrs	r2, r2, #3
 8001894:	490f      	ldr	r1, [pc, #60]	; (80018d4 <__aeabi_dsub+0x368>)
 8001896:	458c      	cmp	ip, r1
 8001898:	d02a      	beq.n	80018f0 <__aeabi_dsub+0x384>
 800189a:	0312      	lsls	r2, r2, #12
 800189c:	0b14      	lsrs	r4, r2, #12
 800189e:	4662      	mov	r2, ip
 80018a0:	0552      	lsls	r2, r2, #21
 80018a2:	0d52      	lsrs	r2, r2, #21
 80018a4:	e70c      	b.n	80016c0 <__aeabi_dsub+0x154>
 80018a6:	003c      	movs	r4, r7
 80018a8:	4304      	orrs	r4, r0
 80018aa:	1e62      	subs	r2, r4, #1
 80018ac:	4194      	sbcs	r4, r2
 80018ae:	18e4      	adds	r4, r4, r3
 80018b0:	429c      	cmp	r4, r3
 80018b2:	4192      	sbcs	r2, r2
 80018b4:	4252      	negs	r2, r2
 80018b6:	444a      	add	r2, r9
 80018b8:	4692      	mov	sl, r2
 80018ba:	4653      	mov	r3, sl
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	d5df      	bpl.n	8001880 <__aeabi_dsub+0x314>
 80018c0:	4b04      	ldr	r3, [pc, #16]	; (80018d4 <__aeabi_dsub+0x368>)
 80018c2:	3601      	adds	r6, #1
 80018c4:	429e      	cmp	r6, r3
 80018c6:	d000      	beq.n	80018ca <__aeabi_dsub+0x35e>
 80018c8:	e0a0      	b.n	8001a0c <__aeabi_dsub+0x4a0>
 80018ca:	0032      	movs	r2, r6
 80018cc:	2400      	movs	r4, #0
 80018ce:	2300      	movs	r3, #0
 80018d0:	e6f6      	b.n	80016c0 <__aeabi_dsub+0x154>
 80018d2:	46c0      	nop			; (mov r8, r8)
 80018d4:	000007ff 	.word	0x000007ff
 80018d8:	ff7fffff 	.word	0xff7fffff
 80018dc:	fffff801 	.word	0xfffff801
 80018e0:	000007fe 	.word	0x000007fe
 80018e4:	08db      	lsrs	r3, r3, #3
 80018e6:	464a      	mov	r2, r9
 80018e8:	0752      	lsls	r2, r2, #29
 80018ea:	4313      	orrs	r3, r2
 80018ec:	464a      	mov	r2, r9
 80018ee:	08d2      	lsrs	r2, r2, #3
 80018f0:	0019      	movs	r1, r3
 80018f2:	4311      	orrs	r1, r2
 80018f4:	d100      	bne.n	80018f8 <__aeabi_dsub+0x38c>
 80018f6:	e1b5      	b.n	8001c64 <__aeabi_dsub+0x6f8>
 80018f8:	2480      	movs	r4, #128	; 0x80
 80018fa:	0324      	lsls	r4, r4, #12
 80018fc:	4314      	orrs	r4, r2
 80018fe:	0324      	lsls	r4, r4, #12
 8001900:	4ad5      	ldr	r2, [pc, #852]	; (8001c58 <__aeabi_dsub+0x6ec>)
 8001902:	0b24      	lsrs	r4, r4, #12
 8001904:	e6dc      	b.n	80016c0 <__aeabi_dsub+0x154>
 8001906:	0020      	movs	r0, r4
 8001908:	f000 fa5c 	bl	8001dc4 <__clzsi2>
 800190c:	0003      	movs	r3, r0
 800190e:	3318      	adds	r3, #24
 8001910:	2b1f      	cmp	r3, #31
 8001912:	dc00      	bgt.n	8001916 <__aeabi_dsub+0x3aa>
 8001914:	e695      	b.n	8001642 <__aeabi_dsub+0xd6>
 8001916:	0022      	movs	r2, r4
 8001918:	3808      	subs	r0, #8
 800191a:	4082      	lsls	r2, r0
 800191c:	2400      	movs	r4, #0
 800191e:	429e      	cmp	r6, r3
 8001920:	dc00      	bgt.n	8001924 <__aeabi_dsub+0x3b8>
 8001922:	e69a      	b.n	800165a <__aeabi_dsub+0xee>
 8001924:	1af6      	subs	r6, r6, r3
 8001926:	4bcd      	ldr	r3, [pc, #820]	; (8001c5c <__aeabi_dsub+0x6f0>)
 8001928:	401a      	ands	r2, r3
 800192a:	4692      	mov	sl, r2
 800192c:	e6a8      	b.n	8001680 <__aeabi_dsub+0x114>
 800192e:	003c      	movs	r4, r7
 8001930:	4304      	orrs	r4, r0
 8001932:	1e62      	subs	r2, r4, #1
 8001934:	4194      	sbcs	r4, r2
 8001936:	e66c      	b.n	8001612 <__aeabi_dsub+0xa6>
 8001938:	464a      	mov	r2, r9
 800193a:	08db      	lsrs	r3, r3, #3
 800193c:	0752      	lsls	r2, r2, #29
 800193e:	4313      	orrs	r3, r2
 8001940:	464a      	mov	r2, r9
 8001942:	08d2      	lsrs	r2, r2, #3
 8001944:	e7a6      	b.n	8001894 <__aeabi_dsub+0x328>
 8001946:	4cc6      	ldr	r4, [pc, #792]	; (8001c60 <__aeabi_dsub+0x6f4>)
 8001948:	1c72      	adds	r2, r6, #1
 800194a:	4222      	tst	r2, r4
 800194c:	d000      	beq.n	8001950 <__aeabi_dsub+0x3e4>
 800194e:	e0ac      	b.n	8001aaa <__aeabi_dsub+0x53e>
 8001950:	464a      	mov	r2, r9
 8001952:	431a      	orrs	r2, r3
 8001954:	2e00      	cmp	r6, #0
 8001956:	d000      	beq.n	800195a <__aeabi_dsub+0x3ee>
 8001958:	e105      	b.n	8001b66 <__aeabi_dsub+0x5fa>
 800195a:	2a00      	cmp	r2, #0
 800195c:	d100      	bne.n	8001960 <__aeabi_dsub+0x3f4>
 800195e:	e156      	b.n	8001c0e <__aeabi_dsub+0x6a2>
 8001960:	003a      	movs	r2, r7
 8001962:	4302      	orrs	r2, r0
 8001964:	d100      	bne.n	8001968 <__aeabi_dsub+0x3fc>
 8001966:	e0db      	b.n	8001b20 <__aeabi_dsub+0x5b4>
 8001968:	181c      	adds	r4, r3, r0
 800196a:	429c      	cmp	r4, r3
 800196c:	419b      	sbcs	r3, r3
 800196e:	444f      	add	r7, r9
 8001970:	46ba      	mov	sl, r7
 8001972:	425b      	negs	r3, r3
 8001974:	449a      	add	sl, r3
 8001976:	4653      	mov	r3, sl
 8001978:	021b      	lsls	r3, r3, #8
 800197a:	d400      	bmi.n	800197e <__aeabi_dsub+0x412>
 800197c:	e780      	b.n	8001880 <__aeabi_dsub+0x314>
 800197e:	4652      	mov	r2, sl
 8001980:	4bb6      	ldr	r3, [pc, #728]	; (8001c5c <__aeabi_dsub+0x6f0>)
 8001982:	2601      	movs	r6, #1
 8001984:	401a      	ands	r2, r3
 8001986:	4692      	mov	sl, r2
 8001988:	e77a      	b.n	8001880 <__aeabi_dsub+0x314>
 800198a:	4cb3      	ldr	r4, [pc, #716]	; (8001c58 <__aeabi_dsub+0x6ec>)
 800198c:	42a2      	cmp	r2, r4
 800198e:	d100      	bne.n	8001992 <__aeabi_dsub+0x426>
 8001990:	e0c0      	b.n	8001b14 <__aeabi_dsub+0x5a8>
 8001992:	2480      	movs	r4, #128	; 0x80
 8001994:	464d      	mov	r5, r9
 8001996:	0424      	lsls	r4, r4, #16
 8001998:	4325      	orrs	r5, r4
 800199a:	46a9      	mov	r9, r5
 800199c:	4664      	mov	r4, ip
 800199e:	2c38      	cmp	r4, #56	; 0x38
 80019a0:	dc53      	bgt.n	8001a4a <__aeabi_dsub+0x4de>
 80019a2:	4661      	mov	r1, ip
 80019a4:	2c1f      	cmp	r4, #31
 80019a6:	dd00      	ble.n	80019aa <__aeabi_dsub+0x43e>
 80019a8:	e0cd      	b.n	8001b46 <__aeabi_dsub+0x5da>
 80019aa:	2520      	movs	r5, #32
 80019ac:	001e      	movs	r6, r3
 80019ae:	1b2d      	subs	r5, r5, r4
 80019b0:	464c      	mov	r4, r9
 80019b2:	40ab      	lsls	r3, r5
 80019b4:	40ac      	lsls	r4, r5
 80019b6:	40ce      	lsrs	r6, r1
 80019b8:	1e5d      	subs	r5, r3, #1
 80019ba:	41ab      	sbcs	r3, r5
 80019bc:	4334      	orrs	r4, r6
 80019be:	4323      	orrs	r3, r4
 80019c0:	464c      	mov	r4, r9
 80019c2:	40cc      	lsrs	r4, r1
 80019c4:	1b3f      	subs	r7, r7, r4
 80019c6:	e045      	b.n	8001a54 <__aeabi_dsub+0x4e8>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1a1c      	subs	r4, r3, r0
 80019cc:	1bd1      	subs	r1, r2, r7
 80019ce:	42a3      	cmp	r3, r4
 80019d0:	4192      	sbcs	r2, r2
 80019d2:	4252      	negs	r2, r2
 80019d4:	4692      	mov	sl, r2
 80019d6:	000a      	movs	r2, r1
 80019d8:	4651      	mov	r1, sl
 80019da:	1a52      	subs	r2, r2, r1
 80019dc:	4692      	mov	sl, r2
 80019de:	0212      	lsls	r2, r2, #8
 80019e0:	d500      	bpl.n	80019e4 <__aeabi_dsub+0x478>
 80019e2:	e083      	b.n	8001aec <__aeabi_dsub+0x580>
 80019e4:	4653      	mov	r3, sl
 80019e6:	4323      	orrs	r3, r4
 80019e8:	d000      	beq.n	80019ec <__aeabi_dsub+0x480>
 80019ea:	e621      	b.n	8001630 <__aeabi_dsub+0xc4>
 80019ec:	2200      	movs	r2, #0
 80019ee:	2500      	movs	r5, #0
 80019f0:	e753      	b.n	800189a <__aeabi_dsub+0x32e>
 80019f2:	181c      	adds	r4, r3, r0
 80019f4:	429c      	cmp	r4, r3
 80019f6:	419b      	sbcs	r3, r3
 80019f8:	444f      	add	r7, r9
 80019fa:	46ba      	mov	sl, r7
 80019fc:	425b      	negs	r3, r3
 80019fe:	449a      	add	sl, r3
 8001a00:	4653      	mov	r3, sl
 8001a02:	2601      	movs	r6, #1
 8001a04:	021b      	lsls	r3, r3, #8
 8001a06:	d400      	bmi.n	8001a0a <__aeabi_dsub+0x49e>
 8001a08:	e73a      	b.n	8001880 <__aeabi_dsub+0x314>
 8001a0a:	2602      	movs	r6, #2
 8001a0c:	4652      	mov	r2, sl
 8001a0e:	4b93      	ldr	r3, [pc, #588]	; (8001c5c <__aeabi_dsub+0x6f0>)
 8001a10:	2101      	movs	r1, #1
 8001a12:	401a      	ands	r2, r3
 8001a14:	0013      	movs	r3, r2
 8001a16:	4021      	ands	r1, r4
 8001a18:	0862      	lsrs	r2, r4, #1
 8001a1a:	430a      	orrs	r2, r1
 8001a1c:	07dc      	lsls	r4, r3, #31
 8001a1e:	085b      	lsrs	r3, r3, #1
 8001a20:	469a      	mov	sl, r3
 8001a22:	4314      	orrs	r4, r2
 8001a24:	e62c      	b.n	8001680 <__aeabi_dsub+0x114>
 8001a26:	0039      	movs	r1, r7
 8001a28:	3a20      	subs	r2, #32
 8001a2a:	40d1      	lsrs	r1, r2
 8001a2c:	4662      	mov	r2, ip
 8001a2e:	2a20      	cmp	r2, #32
 8001a30:	d006      	beq.n	8001a40 <__aeabi_dsub+0x4d4>
 8001a32:	4664      	mov	r4, ip
 8001a34:	2240      	movs	r2, #64	; 0x40
 8001a36:	1b12      	subs	r2, r2, r4
 8001a38:	003c      	movs	r4, r7
 8001a3a:	4094      	lsls	r4, r2
 8001a3c:	4304      	orrs	r4, r0
 8001a3e:	9401      	str	r4, [sp, #4]
 8001a40:	9c01      	ldr	r4, [sp, #4]
 8001a42:	1e62      	subs	r2, r4, #1
 8001a44:	4194      	sbcs	r4, r2
 8001a46:	430c      	orrs	r4, r1
 8001a48:	e5e3      	b.n	8001612 <__aeabi_dsub+0xa6>
 8001a4a:	4649      	mov	r1, r9
 8001a4c:	4319      	orrs	r1, r3
 8001a4e:	000b      	movs	r3, r1
 8001a50:	1e5c      	subs	r4, r3, #1
 8001a52:	41a3      	sbcs	r3, r4
 8001a54:	1ac4      	subs	r4, r0, r3
 8001a56:	42a0      	cmp	r0, r4
 8001a58:	419b      	sbcs	r3, r3
 8001a5a:	425b      	negs	r3, r3
 8001a5c:	1afb      	subs	r3, r7, r3
 8001a5e:	469a      	mov	sl, r3
 8001a60:	465d      	mov	r5, fp
 8001a62:	0016      	movs	r6, r2
 8001a64:	e5dc      	b.n	8001620 <__aeabi_dsub+0xb4>
 8001a66:	4649      	mov	r1, r9
 8001a68:	4319      	orrs	r1, r3
 8001a6a:	d100      	bne.n	8001a6e <__aeabi_dsub+0x502>
 8001a6c:	e0ae      	b.n	8001bcc <__aeabi_dsub+0x660>
 8001a6e:	4661      	mov	r1, ip
 8001a70:	4664      	mov	r4, ip
 8001a72:	3901      	subs	r1, #1
 8001a74:	2c01      	cmp	r4, #1
 8001a76:	d100      	bne.n	8001a7a <__aeabi_dsub+0x50e>
 8001a78:	e0e0      	b.n	8001c3c <__aeabi_dsub+0x6d0>
 8001a7a:	4c77      	ldr	r4, [pc, #476]	; (8001c58 <__aeabi_dsub+0x6ec>)
 8001a7c:	45a4      	cmp	ip, r4
 8001a7e:	d056      	beq.n	8001b2e <__aeabi_dsub+0x5c2>
 8001a80:	468c      	mov	ip, r1
 8001a82:	e69a      	b.n	80017ba <__aeabi_dsub+0x24e>
 8001a84:	4661      	mov	r1, ip
 8001a86:	2220      	movs	r2, #32
 8001a88:	003c      	movs	r4, r7
 8001a8a:	1a52      	subs	r2, r2, r1
 8001a8c:	4094      	lsls	r4, r2
 8001a8e:	0001      	movs	r1, r0
 8001a90:	4090      	lsls	r0, r2
 8001a92:	46a0      	mov	r8, r4
 8001a94:	4664      	mov	r4, ip
 8001a96:	1e42      	subs	r2, r0, #1
 8001a98:	4190      	sbcs	r0, r2
 8001a9a:	4662      	mov	r2, ip
 8001a9c:	40e1      	lsrs	r1, r4
 8001a9e:	4644      	mov	r4, r8
 8001aa0:	40d7      	lsrs	r7, r2
 8001aa2:	430c      	orrs	r4, r1
 8001aa4:	4304      	orrs	r4, r0
 8001aa6:	44b9      	add	r9, r7
 8001aa8:	e701      	b.n	80018ae <__aeabi_dsub+0x342>
 8001aaa:	496b      	ldr	r1, [pc, #428]	; (8001c58 <__aeabi_dsub+0x6ec>)
 8001aac:	428a      	cmp	r2, r1
 8001aae:	d100      	bne.n	8001ab2 <__aeabi_dsub+0x546>
 8001ab0:	e70c      	b.n	80018cc <__aeabi_dsub+0x360>
 8001ab2:	1818      	adds	r0, r3, r0
 8001ab4:	4298      	cmp	r0, r3
 8001ab6:	419b      	sbcs	r3, r3
 8001ab8:	444f      	add	r7, r9
 8001aba:	425b      	negs	r3, r3
 8001abc:	18fb      	adds	r3, r7, r3
 8001abe:	07dc      	lsls	r4, r3, #31
 8001ac0:	0840      	lsrs	r0, r0, #1
 8001ac2:	085b      	lsrs	r3, r3, #1
 8001ac4:	469a      	mov	sl, r3
 8001ac6:	0016      	movs	r6, r2
 8001ac8:	4304      	orrs	r4, r0
 8001aca:	e6d9      	b.n	8001880 <__aeabi_dsub+0x314>
 8001acc:	2a00      	cmp	r2, #0
 8001ace:	d000      	beq.n	8001ad2 <__aeabi_dsub+0x566>
 8001ad0:	e081      	b.n	8001bd6 <__aeabi_dsub+0x66a>
 8001ad2:	003b      	movs	r3, r7
 8001ad4:	4303      	orrs	r3, r0
 8001ad6:	d11d      	bne.n	8001b14 <__aeabi_dsub+0x5a8>
 8001ad8:	2280      	movs	r2, #128	; 0x80
 8001ada:	2500      	movs	r5, #0
 8001adc:	0312      	lsls	r2, r2, #12
 8001ade:	e70b      	b.n	80018f8 <__aeabi_dsub+0x38c>
 8001ae0:	08c0      	lsrs	r0, r0, #3
 8001ae2:	077b      	lsls	r3, r7, #29
 8001ae4:	465d      	mov	r5, fp
 8001ae6:	4303      	orrs	r3, r0
 8001ae8:	08fa      	lsrs	r2, r7, #3
 8001aea:	e6d3      	b.n	8001894 <__aeabi_dsub+0x328>
 8001aec:	1ac4      	subs	r4, r0, r3
 8001aee:	42a0      	cmp	r0, r4
 8001af0:	4180      	sbcs	r0, r0
 8001af2:	464b      	mov	r3, r9
 8001af4:	4240      	negs	r0, r0
 8001af6:	1aff      	subs	r7, r7, r3
 8001af8:	1a3b      	subs	r3, r7, r0
 8001afa:	469a      	mov	sl, r3
 8001afc:	465d      	mov	r5, fp
 8001afe:	e597      	b.n	8001630 <__aeabi_dsub+0xc4>
 8001b00:	1a1c      	subs	r4, r3, r0
 8001b02:	464a      	mov	r2, r9
 8001b04:	42a3      	cmp	r3, r4
 8001b06:	419b      	sbcs	r3, r3
 8001b08:	1bd7      	subs	r7, r2, r7
 8001b0a:	425b      	negs	r3, r3
 8001b0c:	1afb      	subs	r3, r7, r3
 8001b0e:	469a      	mov	sl, r3
 8001b10:	2601      	movs	r6, #1
 8001b12:	e585      	b.n	8001620 <__aeabi_dsub+0xb4>
 8001b14:	08c0      	lsrs	r0, r0, #3
 8001b16:	077b      	lsls	r3, r7, #29
 8001b18:	465d      	mov	r5, fp
 8001b1a:	4303      	orrs	r3, r0
 8001b1c:	08fa      	lsrs	r2, r7, #3
 8001b1e:	e6e7      	b.n	80018f0 <__aeabi_dsub+0x384>
 8001b20:	464a      	mov	r2, r9
 8001b22:	08db      	lsrs	r3, r3, #3
 8001b24:	0752      	lsls	r2, r2, #29
 8001b26:	4313      	orrs	r3, r2
 8001b28:	464a      	mov	r2, r9
 8001b2a:	08d2      	lsrs	r2, r2, #3
 8001b2c:	e6b5      	b.n	800189a <__aeabi_dsub+0x32e>
 8001b2e:	08c0      	lsrs	r0, r0, #3
 8001b30:	077b      	lsls	r3, r7, #29
 8001b32:	4303      	orrs	r3, r0
 8001b34:	08fa      	lsrs	r2, r7, #3
 8001b36:	e6db      	b.n	80018f0 <__aeabi_dsub+0x384>
 8001b38:	4649      	mov	r1, r9
 8001b3a:	4319      	orrs	r1, r3
 8001b3c:	000b      	movs	r3, r1
 8001b3e:	1e59      	subs	r1, r3, #1
 8001b40:	418b      	sbcs	r3, r1
 8001b42:	001c      	movs	r4, r3
 8001b44:	e653      	b.n	80017ee <__aeabi_dsub+0x282>
 8001b46:	464d      	mov	r5, r9
 8001b48:	3c20      	subs	r4, #32
 8001b4a:	40e5      	lsrs	r5, r4
 8001b4c:	2920      	cmp	r1, #32
 8001b4e:	d005      	beq.n	8001b5c <__aeabi_dsub+0x5f0>
 8001b50:	2440      	movs	r4, #64	; 0x40
 8001b52:	1a64      	subs	r4, r4, r1
 8001b54:	4649      	mov	r1, r9
 8001b56:	40a1      	lsls	r1, r4
 8001b58:	430b      	orrs	r3, r1
 8001b5a:	4698      	mov	r8, r3
 8001b5c:	4643      	mov	r3, r8
 8001b5e:	1e5c      	subs	r4, r3, #1
 8001b60:	41a3      	sbcs	r3, r4
 8001b62:	432b      	orrs	r3, r5
 8001b64:	e776      	b.n	8001a54 <__aeabi_dsub+0x4e8>
 8001b66:	2a00      	cmp	r2, #0
 8001b68:	d0e1      	beq.n	8001b2e <__aeabi_dsub+0x5c2>
 8001b6a:	003a      	movs	r2, r7
 8001b6c:	08db      	lsrs	r3, r3, #3
 8001b6e:	4302      	orrs	r2, r0
 8001b70:	d100      	bne.n	8001b74 <__aeabi_dsub+0x608>
 8001b72:	e6b8      	b.n	80018e6 <__aeabi_dsub+0x37a>
 8001b74:	464a      	mov	r2, r9
 8001b76:	0752      	lsls	r2, r2, #29
 8001b78:	2480      	movs	r4, #128	; 0x80
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	464a      	mov	r2, r9
 8001b7e:	0324      	lsls	r4, r4, #12
 8001b80:	08d2      	lsrs	r2, r2, #3
 8001b82:	4222      	tst	r2, r4
 8001b84:	d007      	beq.n	8001b96 <__aeabi_dsub+0x62a>
 8001b86:	08fe      	lsrs	r6, r7, #3
 8001b88:	4226      	tst	r6, r4
 8001b8a:	d104      	bne.n	8001b96 <__aeabi_dsub+0x62a>
 8001b8c:	465d      	mov	r5, fp
 8001b8e:	0032      	movs	r2, r6
 8001b90:	08c3      	lsrs	r3, r0, #3
 8001b92:	077f      	lsls	r7, r7, #29
 8001b94:	433b      	orrs	r3, r7
 8001b96:	0f59      	lsrs	r1, r3, #29
 8001b98:	00db      	lsls	r3, r3, #3
 8001b9a:	0749      	lsls	r1, r1, #29
 8001b9c:	08db      	lsrs	r3, r3, #3
 8001b9e:	430b      	orrs	r3, r1
 8001ba0:	e6a6      	b.n	80018f0 <__aeabi_dsub+0x384>
 8001ba2:	1ac4      	subs	r4, r0, r3
 8001ba4:	42a0      	cmp	r0, r4
 8001ba6:	4180      	sbcs	r0, r0
 8001ba8:	464b      	mov	r3, r9
 8001baa:	4240      	negs	r0, r0
 8001bac:	1aff      	subs	r7, r7, r3
 8001bae:	1a3b      	subs	r3, r7, r0
 8001bb0:	469a      	mov	sl, r3
 8001bb2:	465d      	mov	r5, fp
 8001bb4:	2601      	movs	r6, #1
 8001bb6:	e533      	b.n	8001620 <__aeabi_dsub+0xb4>
 8001bb8:	003b      	movs	r3, r7
 8001bba:	4303      	orrs	r3, r0
 8001bbc:	d100      	bne.n	8001bc0 <__aeabi_dsub+0x654>
 8001bbe:	e715      	b.n	80019ec <__aeabi_dsub+0x480>
 8001bc0:	08c0      	lsrs	r0, r0, #3
 8001bc2:	077b      	lsls	r3, r7, #29
 8001bc4:	465d      	mov	r5, fp
 8001bc6:	4303      	orrs	r3, r0
 8001bc8:	08fa      	lsrs	r2, r7, #3
 8001bca:	e666      	b.n	800189a <__aeabi_dsub+0x32e>
 8001bcc:	08c0      	lsrs	r0, r0, #3
 8001bce:	077b      	lsls	r3, r7, #29
 8001bd0:	4303      	orrs	r3, r0
 8001bd2:	08fa      	lsrs	r2, r7, #3
 8001bd4:	e65e      	b.n	8001894 <__aeabi_dsub+0x328>
 8001bd6:	003a      	movs	r2, r7
 8001bd8:	08db      	lsrs	r3, r3, #3
 8001bda:	4302      	orrs	r2, r0
 8001bdc:	d100      	bne.n	8001be0 <__aeabi_dsub+0x674>
 8001bde:	e682      	b.n	80018e6 <__aeabi_dsub+0x37a>
 8001be0:	464a      	mov	r2, r9
 8001be2:	0752      	lsls	r2, r2, #29
 8001be4:	2480      	movs	r4, #128	; 0x80
 8001be6:	4313      	orrs	r3, r2
 8001be8:	464a      	mov	r2, r9
 8001bea:	0324      	lsls	r4, r4, #12
 8001bec:	08d2      	lsrs	r2, r2, #3
 8001bee:	4222      	tst	r2, r4
 8001bf0:	d007      	beq.n	8001c02 <__aeabi_dsub+0x696>
 8001bf2:	08fe      	lsrs	r6, r7, #3
 8001bf4:	4226      	tst	r6, r4
 8001bf6:	d104      	bne.n	8001c02 <__aeabi_dsub+0x696>
 8001bf8:	465d      	mov	r5, fp
 8001bfa:	0032      	movs	r2, r6
 8001bfc:	08c3      	lsrs	r3, r0, #3
 8001bfe:	077f      	lsls	r7, r7, #29
 8001c00:	433b      	orrs	r3, r7
 8001c02:	0f59      	lsrs	r1, r3, #29
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	08db      	lsrs	r3, r3, #3
 8001c08:	0749      	lsls	r1, r1, #29
 8001c0a:	430b      	orrs	r3, r1
 8001c0c:	e670      	b.n	80018f0 <__aeabi_dsub+0x384>
 8001c0e:	08c0      	lsrs	r0, r0, #3
 8001c10:	077b      	lsls	r3, r7, #29
 8001c12:	4303      	orrs	r3, r0
 8001c14:	08fa      	lsrs	r2, r7, #3
 8001c16:	e640      	b.n	800189a <__aeabi_dsub+0x32e>
 8001c18:	464c      	mov	r4, r9
 8001c1a:	3920      	subs	r1, #32
 8001c1c:	40cc      	lsrs	r4, r1
 8001c1e:	4661      	mov	r1, ip
 8001c20:	2920      	cmp	r1, #32
 8001c22:	d006      	beq.n	8001c32 <__aeabi_dsub+0x6c6>
 8001c24:	4666      	mov	r6, ip
 8001c26:	2140      	movs	r1, #64	; 0x40
 8001c28:	1b89      	subs	r1, r1, r6
 8001c2a:	464e      	mov	r6, r9
 8001c2c:	408e      	lsls	r6, r1
 8001c2e:	4333      	orrs	r3, r6
 8001c30:	4698      	mov	r8, r3
 8001c32:	4643      	mov	r3, r8
 8001c34:	1e59      	subs	r1, r3, #1
 8001c36:	418b      	sbcs	r3, r1
 8001c38:	431c      	orrs	r4, r3
 8001c3a:	e5d8      	b.n	80017ee <__aeabi_dsub+0x282>
 8001c3c:	181c      	adds	r4, r3, r0
 8001c3e:	4284      	cmp	r4, r0
 8001c40:	4180      	sbcs	r0, r0
 8001c42:	444f      	add	r7, r9
 8001c44:	46ba      	mov	sl, r7
 8001c46:	4240      	negs	r0, r0
 8001c48:	4482      	add	sl, r0
 8001c4a:	e6d9      	b.n	8001a00 <__aeabi_dsub+0x494>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	4323      	orrs	r3, r4
 8001c50:	d100      	bne.n	8001c54 <__aeabi_dsub+0x6e8>
 8001c52:	e6cb      	b.n	80019ec <__aeabi_dsub+0x480>
 8001c54:	e614      	b.n	8001880 <__aeabi_dsub+0x314>
 8001c56:	46c0      	nop			; (mov r8, r8)
 8001c58:	000007ff 	.word	0x000007ff
 8001c5c:	ff7fffff 	.word	0xff7fffff
 8001c60:	000007fe 	.word	0x000007fe
 8001c64:	2300      	movs	r3, #0
 8001c66:	4a01      	ldr	r2, [pc, #4]	; (8001c6c <__aeabi_dsub+0x700>)
 8001c68:	001c      	movs	r4, r3
 8001c6a:	e529      	b.n	80016c0 <__aeabi_dsub+0x154>
 8001c6c:	000007ff 	.word	0x000007ff

08001c70 <__aeabi_dcmpun>:
 8001c70:	b570      	push	{r4, r5, r6, lr}
 8001c72:	0005      	movs	r5, r0
 8001c74:	480c      	ldr	r0, [pc, #48]	; (8001ca8 <__aeabi_dcmpun+0x38>)
 8001c76:	031c      	lsls	r4, r3, #12
 8001c78:	0016      	movs	r6, r2
 8001c7a:	005b      	lsls	r3, r3, #1
 8001c7c:	030a      	lsls	r2, r1, #12
 8001c7e:	0049      	lsls	r1, r1, #1
 8001c80:	0b12      	lsrs	r2, r2, #12
 8001c82:	0d49      	lsrs	r1, r1, #21
 8001c84:	0b24      	lsrs	r4, r4, #12
 8001c86:	0d5b      	lsrs	r3, r3, #21
 8001c88:	4281      	cmp	r1, r0
 8001c8a:	d008      	beq.n	8001c9e <__aeabi_dcmpun+0x2e>
 8001c8c:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <__aeabi_dcmpun+0x38>)
 8001c8e:	2000      	movs	r0, #0
 8001c90:	4293      	cmp	r3, r2
 8001c92:	d103      	bne.n	8001c9c <__aeabi_dcmpun+0x2c>
 8001c94:	0020      	movs	r0, r4
 8001c96:	4330      	orrs	r0, r6
 8001c98:	1e43      	subs	r3, r0, #1
 8001c9a:	4198      	sbcs	r0, r3
 8001c9c:	bd70      	pop	{r4, r5, r6, pc}
 8001c9e:	2001      	movs	r0, #1
 8001ca0:	432a      	orrs	r2, r5
 8001ca2:	d1fb      	bne.n	8001c9c <__aeabi_dcmpun+0x2c>
 8001ca4:	e7f2      	b.n	8001c8c <__aeabi_dcmpun+0x1c>
 8001ca6:	46c0      	nop			; (mov r8, r8)
 8001ca8:	000007ff 	.word	0x000007ff

08001cac <__aeabi_d2iz>:
 8001cac:	000a      	movs	r2, r1
 8001cae:	b530      	push	{r4, r5, lr}
 8001cb0:	4c13      	ldr	r4, [pc, #76]	; (8001d00 <__aeabi_d2iz+0x54>)
 8001cb2:	0053      	lsls	r3, r2, #1
 8001cb4:	0309      	lsls	r1, r1, #12
 8001cb6:	0005      	movs	r5, r0
 8001cb8:	0b09      	lsrs	r1, r1, #12
 8001cba:	2000      	movs	r0, #0
 8001cbc:	0d5b      	lsrs	r3, r3, #21
 8001cbe:	0fd2      	lsrs	r2, r2, #31
 8001cc0:	42a3      	cmp	r3, r4
 8001cc2:	dd04      	ble.n	8001cce <__aeabi_d2iz+0x22>
 8001cc4:	480f      	ldr	r0, [pc, #60]	; (8001d04 <__aeabi_d2iz+0x58>)
 8001cc6:	4283      	cmp	r3, r0
 8001cc8:	dd02      	ble.n	8001cd0 <__aeabi_d2iz+0x24>
 8001cca:	4b0f      	ldr	r3, [pc, #60]	; (8001d08 <__aeabi_d2iz+0x5c>)
 8001ccc:	18d0      	adds	r0, r2, r3
 8001cce:	bd30      	pop	{r4, r5, pc}
 8001cd0:	2080      	movs	r0, #128	; 0x80
 8001cd2:	0340      	lsls	r0, r0, #13
 8001cd4:	4301      	orrs	r1, r0
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <__aeabi_d2iz+0x60>)
 8001cd8:	1ac0      	subs	r0, r0, r3
 8001cda:	281f      	cmp	r0, #31
 8001cdc:	dd08      	ble.n	8001cf0 <__aeabi_d2iz+0x44>
 8001cde:	480c      	ldr	r0, [pc, #48]	; (8001d10 <__aeabi_d2iz+0x64>)
 8001ce0:	1ac3      	subs	r3, r0, r3
 8001ce2:	40d9      	lsrs	r1, r3
 8001ce4:	000b      	movs	r3, r1
 8001ce6:	4258      	negs	r0, r3
 8001ce8:	2a00      	cmp	r2, #0
 8001cea:	d1f0      	bne.n	8001cce <__aeabi_d2iz+0x22>
 8001cec:	0018      	movs	r0, r3
 8001cee:	e7ee      	b.n	8001cce <__aeabi_d2iz+0x22>
 8001cf0:	4c08      	ldr	r4, [pc, #32]	; (8001d14 <__aeabi_d2iz+0x68>)
 8001cf2:	40c5      	lsrs	r5, r0
 8001cf4:	46a4      	mov	ip, r4
 8001cf6:	4463      	add	r3, ip
 8001cf8:	4099      	lsls	r1, r3
 8001cfa:	000b      	movs	r3, r1
 8001cfc:	432b      	orrs	r3, r5
 8001cfe:	e7f2      	b.n	8001ce6 <__aeabi_d2iz+0x3a>
 8001d00:	000003fe 	.word	0x000003fe
 8001d04:	0000041d 	.word	0x0000041d
 8001d08:	7fffffff 	.word	0x7fffffff
 8001d0c:	00000433 	.word	0x00000433
 8001d10:	00000413 	.word	0x00000413
 8001d14:	fffffbed 	.word	0xfffffbed

08001d18 <__aeabi_i2d>:
 8001d18:	b570      	push	{r4, r5, r6, lr}
 8001d1a:	2800      	cmp	r0, #0
 8001d1c:	d016      	beq.n	8001d4c <__aeabi_i2d+0x34>
 8001d1e:	17c3      	asrs	r3, r0, #31
 8001d20:	18c5      	adds	r5, r0, r3
 8001d22:	405d      	eors	r5, r3
 8001d24:	0fc4      	lsrs	r4, r0, #31
 8001d26:	0028      	movs	r0, r5
 8001d28:	f000 f84c 	bl	8001dc4 <__clzsi2>
 8001d2c:	4b11      	ldr	r3, [pc, #68]	; (8001d74 <__aeabi_i2d+0x5c>)
 8001d2e:	1a1b      	subs	r3, r3, r0
 8001d30:	280a      	cmp	r0, #10
 8001d32:	dc16      	bgt.n	8001d62 <__aeabi_i2d+0x4a>
 8001d34:	0002      	movs	r2, r0
 8001d36:	002e      	movs	r6, r5
 8001d38:	3215      	adds	r2, #21
 8001d3a:	4096      	lsls	r6, r2
 8001d3c:	220b      	movs	r2, #11
 8001d3e:	1a12      	subs	r2, r2, r0
 8001d40:	40d5      	lsrs	r5, r2
 8001d42:	055b      	lsls	r3, r3, #21
 8001d44:	032d      	lsls	r5, r5, #12
 8001d46:	0b2d      	lsrs	r5, r5, #12
 8001d48:	0d5b      	lsrs	r3, r3, #21
 8001d4a:	e003      	b.n	8001d54 <__aeabi_i2d+0x3c>
 8001d4c:	2400      	movs	r4, #0
 8001d4e:	2300      	movs	r3, #0
 8001d50:	2500      	movs	r5, #0
 8001d52:	2600      	movs	r6, #0
 8001d54:	051b      	lsls	r3, r3, #20
 8001d56:	432b      	orrs	r3, r5
 8001d58:	07e4      	lsls	r4, r4, #31
 8001d5a:	4323      	orrs	r3, r4
 8001d5c:	0030      	movs	r0, r6
 8001d5e:	0019      	movs	r1, r3
 8001d60:	bd70      	pop	{r4, r5, r6, pc}
 8001d62:	380b      	subs	r0, #11
 8001d64:	4085      	lsls	r5, r0
 8001d66:	055b      	lsls	r3, r3, #21
 8001d68:	032d      	lsls	r5, r5, #12
 8001d6a:	2600      	movs	r6, #0
 8001d6c:	0b2d      	lsrs	r5, r5, #12
 8001d6e:	0d5b      	lsrs	r3, r3, #21
 8001d70:	e7f0      	b.n	8001d54 <__aeabi_i2d+0x3c>
 8001d72:	46c0      	nop			; (mov r8, r8)
 8001d74:	0000041e 	.word	0x0000041e

08001d78 <__aeabi_ui2d>:
 8001d78:	b510      	push	{r4, lr}
 8001d7a:	1e04      	subs	r4, r0, #0
 8001d7c:	d010      	beq.n	8001da0 <__aeabi_ui2d+0x28>
 8001d7e:	f000 f821 	bl	8001dc4 <__clzsi2>
 8001d82:	4b0f      	ldr	r3, [pc, #60]	; (8001dc0 <__aeabi_ui2d+0x48>)
 8001d84:	1a1b      	subs	r3, r3, r0
 8001d86:	280a      	cmp	r0, #10
 8001d88:	dc11      	bgt.n	8001dae <__aeabi_ui2d+0x36>
 8001d8a:	220b      	movs	r2, #11
 8001d8c:	0021      	movs	r1, r4
 8001d8e:	1a12      	subs	r2, r2, r0
 8001d90:	40d1      	lsrs	r1, r2
 8001d92:	3015      	adds	r0, #21
 8001d94:	030a      	lsls	r2, r1, #12
 8001d96:	055b      	lsls	r3, r3, #21
 8001d98:	4084      	lsls	r4, r0
 8001d9a:	0b12      	lsrs	r2, r2, #12
 8001d9c:	0d5b      	lsrs	r3, r3, #21
 8001d9e:	e001      	b.n	8001da4 <__aeabi_ui2d+0x2c>
 8001da0:	2300      	movs	r3, #0
 8001da2:	2200      	movs	r2, #0
 8001da4:	051b      	lsls	r3, r3, #20
 8001da6:	4313      	orrs	r3, r2
 8001da8:	0020      	movs	r0, r4
 8001daa:	0019      	movs	r1, r3
 8001dac:	bd10      	pop	{r4, pc}
 8001dae:	0022      	movs	r2, r4
 8001db0:	380b      	subs	r0, #11
 8001db2:	4082      	lsls	r2, r0
 8001db4:	055b      	lsls	r3, r3, #21
 8001db6:	0312      	lsls	r2, r2, #12
 8001db8:	2400      	movs	r4, #0
 8001dba:	0b12      	lsrs	r2, r2, #12
 8001dbc:	0d5b      	lsrs	r3, r3, #21
 8001dbe:	e7f1      	b.n	8001da4 <__aeabi_ui2d+0x2c>
 8001dc0:	0000041e 	.word	0x0000041e

08001dc4 <__clzsi2>:
 8001dc4:	211c      	movs	r1, #28
 8001dc6:	2301      	movs	r3, #1
 8001dc8:	041b      	lsls	r3, r3, #16
 8001dca:	4298      	cmp	r0, r3
 8001dcc:	d301      	bcc.n	8001dd2 <__clzsi2+0xe>
 8001dce:	0c00      	lsrs	r0, r0, #16
 8001dd0:	3910      	subs	r1, #16
 8001dd2:	0a1b      	lsrs	r3, r3, #8
 8001dd4:	4298      	cmp	r0, r3
 8001dd6:	d301      	bcc.n	8001ddc <__clzsi2+0x18>
 8001dd8:	0a00      	lsrs	r0, r0, #8
 8001dda:	3908      	subs	r1, #8
 8001ddc:	091b      	lsrs	r3, r3, #4
 8001dde:	4298      	cmp	r0, r3
 8001de0:	d301      	bcc.n	8001de6 <__clzsi2+0x22>
 8001de2:	0900      	lsrs	r0, r0, #4
 8001de4:	3904      	subs	r1, #4
 8001de6:	a202      	add	r2, pc, #8	; (adr r2, 8001df0 <__clzsi2+0x2c>)
 8001de8:	5c10      	ldrb	r0, [r2, r0]
 8001dea:	1840      	adds	r0, r0, r1
 8001dec:	4770      	bx	lr
 8001dee:	46c0      	nop			; (mov r8, r8)
 8001df0:	02020304 	.word	0x02020304
 8001df4:	01010101 	.word	0x01010101
	...

08001e00 <__clzdi2>:
 8001e00:	b510      	push	{r4, lr}
 8001e02:	2900      	cmp	r1, #0
 8001e04:	d103      	bne.n	8001e0e <__clzdi2+0xe>
 8001e06:	f7ff ffdd 	bl	8001dc4 <__clzsi2>
 8001e0a:	3020      	adds	r0, #32
 8001e0c:	e002      	b.n	8001e14 <__clzdi2+0x14>
 8001e0e:	0008      	movs	r0, r1
 8001e10:	f7ff ffd8 	bl	8001dc4 <__clzsi2>
 8001e14:	bd10      	pop	{r4, pc}
 8001e16:	46c0      	nop			; (mov r8, r8)

08001e18 <modem_check_resp>:
/****************************** External Variables **************************************/
extern UART_HandleTypeDef huart1;
extern int Msg_cnt;
/****************************** Function Prototypes **************************************/
uint8_t modem_check_resp(const char *str,char *find_str)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
 8001e20:	6039      	str	r1, [r7, #0]
    if (strstr(str, find_str) != NULL)
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	0011      	movs	r1, r2
 8001e28:	0018      	movs	r0, r3
 8001e2a:	f007 f9d2 	bl	80091d2 <strstr>
 8001e2e:	1e03      	subs	r3, r0, #0
 8001e30:	d001      	beq.n	8001e36 <modem_check_resp+0x1e>
    {
        return 1;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <modem_check_resp+0x20>
    } else
    {
        return 0;
 8001e36:	2300      	movs	r3, #0
    }
}
 8001e38:	0018      	movs	r0, r3
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	b002      	add	sp, #8
 8001e3e:	bd80      	pop	{r7, pc}

08001e40 <modem_send_msg>:
void modem_send_msg(const char* msg)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b082      	sub	sp, #8
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)msg,strlen(msg), 1000);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	0018      	movs	r0, r3
 8001e4c:	f7fe f95c 	bl	8000108 <strlen>
 8001e50:	0003      	movs	r3, r0
 8001e52:	b29a      	uxth	r2, r3
 8001e54:	23fa      	movs	r3, #250	; 0xfa
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	6879      	ldr	r1, [r7, #4]
 8001e5a:	4807      	ldr	r0, [pc, #28]	; (8001e78 <modem_send_msg+0x38>)
 8001e5c:	f003 feaa 	bl	8005bb4 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", strlen("\r\n"), 1000);
 8001e60:	23fa      	movs	r3, #250	; 0xfa
 8001e62:	009b      	lsls	r3, r3, #2
 8001e64:	4905      	ldr	r1, [pc, #20]	; (8001e7c <modem_send_msg+0x3c>)
 8001e66:	4804      	ldr	r0, [pc, #16]	; (8001e78 <modem_send_msg+0x38>)
 8001e68:	2202      	movs	r2, #2
 8001e6a:	f003 fea3 	bl	8005bb4 <HAL_UART_Transmit>
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	46c0      	nop			; (mov r8, r8)
 8001e78:	200002e0 	.word	0x200002e0
 8001e7c:	0800994c 	.word	0x0800994c

08001e80 <modem_initiate_cmd>:
void modem_initiate_cmd(uint8_t cmd)
{
 8001e80:	b590      	push	{r4, r7, lr}
 8001e82:	b0a7      	sub	sp, #156	; 0x9c
 8001e84:	af04      	add	r7, sp, #16
 8001e86:	0002      	movs	r2, r0
 8001e88:	1dfb      	adds	r3, r7, #7
 8001e8a:	701a      	strb	r2, [r3, #0]
	switch(cmd)
 8001e8c:	1dfb      	adds	r3, r7, #7
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	2b16      	cmp	r3, #22
 8001e92:	d900      	bls.n	8001e96 <modem_initiate_cmd+0x16>
 8001e94:	e0dc      	b.n	8002050 <modem_initiate_cmd+0x1d0>
 8001e96:	009a      	lsls	r2, r3, #2
 8001e98:	4b70      	ldr	r3, [pc, #448]	; (800205c <modem_initiate_cmd+0x1dc>)
 8001e9a:	18d3      	adds	r3, r2, r3
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	469f      	mov	pc, r3
	{
		case MODEM_AT_CHECK:
		{
			modem_send_msg("AT");
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <modem_initiate_cmd+0x1e0>)
 8001ea2:	0018      	movs	r0, r3
 8001ea4:	f7ff ffcc 	bl	8001e40 <modem_send_msg>
			cmd_val=MODEM_AT_CHECK;
 8001ea8:	4b6e      	ldr	r3, [pc, #440]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001eaa:	2200      	movs	r2, #0
 8001eac:	701a      	strb	r2, [r3, #0]
			break;
 8001eae:	e0d0      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_GET_INF0:
		{
			cmd_val=MODEM_GET_INF0;
 8001eb0:	4b6c      	ldr	r3, [pc, #432]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001eb2:	2201      	movs	r2, #1
 8001eb4:	701a      	strb	r2, [r3, #0]
			modem_send_msg("ATI");
 8001eb6:	4b6c      	ldr	r3, [pc, #432]	; (8002068 <modem_initiate_cmd+0x1e8>)
 8001eb8:	0018      	movs	r0, r3
 8001eba:	f7ff ffc1 	bl	8001e40 <modem_send_msg>
			break;
 8001ebe:	e0c8      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_GET_MANF_ID:
		{
			cmd_val=MODEM_GET_MANF_ID;
 8001ec0:	4b68      	ldr	r3, [pc, #416]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001ec2:	2204      	movs	r2, #4
 8001ec4:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+GMI");
 8001ec6:	4b69      	ldr	r3, [pc, #420]	; (800206c <modem_initiate_cmd+0x1ec>)
 8001ec8:	0018      	movs	r0, r3
 8001eca:	f7ff ffb9 	bl	8001e40 <modem_send_msg>
			break;
 8001ece:	e0c0      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_DISABLE_ECHO:
		{
			modem_send_msg("ATE0");
 8001ed0:	4b67      	ldr	r3, [pc, #412]	; (8002070 <modem_initiate_cmd+0x1f0>)
 8001ed2:	0018      	movs	r0, r3
 8001ed4:	f7ff ffb4 	bl	8001e40 <modem_send_msg>
			break;
 8001ed8:	e0bb      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_ENABLE_ECHO:
		{
			modem_send_msg("ATE1");
 8001eda:	4b66      	ldr	r3, [pc, #408]	; (8002074 <modem_initiate_cmd+0x1f4>)
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff ffaf 	bl	8001e40 <modem_send_msg>
			break;
 8001ee2:	e0b6      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_GET_TA_MODEL_INFO:
		{
			cmd_val=MODEM_GET_TA_MODEL_INFO;
 8001ee4:	4b5f      	ldr	r3, [pc, #380]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001ee6:	2205      	movs	r2, #5
 8001ee8:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+GMM");
 8001eea:	4b63      	ldr	r3, [pc, #396]	; (8002078 <modem_initiate_cmd+0x1f8>)
 8001eec:	0018      	movs	r0, r3
 8001eee:	f7ff ffa7 	bl	8001e40 <modem_send_msg>
			break;
 8001ef2:	e0ae      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_CHECK_SIM_READY:
		{
			cmd_val=MODEM_CHECK_SIM_READY;
 8001ef4:	4b5b      	ldr	r3, [pc, #364]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001ef6:	2206      	movs	r2, #6
 8001ef8:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CPIN?");
 8001efa:	4b60      	ldr	r3, [pc, #384]	; (800207c <modem_initiate_cmd+0x1fc>)
 8001efc:	0018      	movs	r0, r3
 8001efe:	f7ff ff9f 	bl	8001e40 <modem_send_msg>
			break;
 8001f02:	e0a6      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_SET_NETWORK_REG:
		{
			cmd_val=MODEM_SET_NETWORK_REG;
 8001f04:	4b57      	ldr	r3, [pc, #348]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001f06:	2209      	movs	r2, #9
 8001f08:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CREG=1");
 8001f0a:	4b5d      	ldr	r3, [pc, #372]	; (8002080 <modem_initiate_cmd+0x200>)
 8001f0c:	0018      	movs	r0, r3
 8001f0e:	f7ff ff97 	bl	8001e40 <modem_send_msg>
			break;
 8001f12:	e09e      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_CHECK_NETWORK_REG:
		{
			cmd_val=MODEM_CHECK_NETWORK_REG;
 8001f14:	4b53      	ldr	r3, [pc, #332]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001f16:	2208      	movs	r2, #8
 8001f18:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CREG?");
 8001f1a:	4b5a      	ldr	r3, [pc, #360]	; (8002084 <modem_initiate_cmd+0x204>)
 8001f1c:	0018      	movs	r0, r3
 8001f1e:	f7ff ff8f 	bl	8001e40 <modem_send_msg>
			break;
 8001f22:	e096      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_ATTACH_GPRS:
		{
			cmd_val=MODEM_ATTACH_GPRS;
 8001f24:	4b4f      	ldr	r3, [pc, #316]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001f26:	220a      	movs	r2, #10
 8001f28:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CGATT=1");
 8001f2a:	4b57      	ldr	r3, [pc, #348]	; (8002088 <modem_initiate_cmd+0x208>)
 8001f2c:	0018      	movs	r0, r3
 8001f2e:	f7ff ff87 	bl	8001e40 <modem_send_msg>
			break;
 8001f32:	e08e      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_DETACH_GPRS:
		{
			cmd_val=9;
 8001f34:	4b4b      	ldr	r3, [pc, #300]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001f36:	2209      	movs	r2, #9
 8001f38:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CGATT=0");
 8001f3a:	4b54      	ldr	r3, [pc, #336]	; (800208c <modem_initiate_cmd+0x20c>)
 8001f3c:	0018      	movs	r0, r3
 8001f3e:	f7ff ff7f 	bl	8001e40 <modem_send_msg>
			break;
 8001f42:	e086      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_CHECK_CGATT:
		{
			cmd_val=10;
 8001f44:	4b47      	ldr	r3, [pc, #284]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001f46:	220a      	movs	r2, #10
 8001f48:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CGATT=?");
 8001f4a:	4b51      	ldr	r3, [pc, #324]	; (8002090 <modem_initiate_cmd+0x210>)
 8001f4c:	0018      	movs	r0, r3
 8001f4e:	f7ff ff77 	bl	8001e40 <modem_send_msg>
			break;
 8001f52:	e07e      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_SET_PDP:
		{
			cmd_val=MODEM_SET_PDP;
 8001f54:	4b43      	ldr	r3, [pc, #268]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001f56:	220d      	movs	r2, #13
 8001f58:	701a      	strb	r2, [r3, #0]
			char cmd[64];
			sprintf(cmd, "AT+CGDCONT=1,\"IP\",\"%s\"", AIRTEL_APN);
 8001f5a:	4a4e      	ldr	r2, [pc, #312]	; (8002094 <modem_initiate_cmd+0x214>)
 8001f5c:	494e      	ldr	r1, [pc, #312]	; (8002098 <modem_initiate_cmd+0x218>)
 8001f5e:	2408      	movs	r4, #8
 8001f60:	193b      	adds	r3, r7, r4
 8001f62:	0018      	movs	r0, r3
 8001f64:	f007 f8e8 	bl	8009138 <siprintf>
			modem_send_msg(cmd);
 8001f68:	193b      	adds	r3, r7, r4
 8001f6a:	0018      	movs	r0, r3
 8001f6c:	f7ff ff68 	bl	8001e40 <modem_send_msg>
			break;
 8001f70:	e06f      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_ACTIVATE_PDP:
		{
			cmd_val=MODEM_ACTIVATE_PDP;
 8001f72:	4b3c      	ldr	r3, [pc, #240]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001f74:	220e      	movs	r2, #14
 8001f76:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QIACT=1");
 8001f78:	4b48      	ldr	r3, [pc, #288]	; (800209c <modem_initiate_cmd+0x21c>)
 8001f7a:	0018      	movs	r0, r3
 8001f7c:	f7ff ff60 	bl	8001e40 <modem_send_msg>
			break;
 8001f80:	e067      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_RESET:
		{
			modem_send_msg("ATZ");
 8001f82:	4b47      	ldr	r3, [pc, #284]	; (80020a0 <modem_initiate_cmd+0x220>)
 8001f84:	0018      	movs	r0, r3
 8001f86:	f7ff ff5b 	bl	8001e40 <modem_send_msg>
			break;
 8001f8a:	e062      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}

		/********************************** MQTT AT Commands *****************************/
		case MODEM_MQTT_VERSION_CFG:
		{
			cmd_val=MODEM_MQTT_VERSION_CFG;
 8001f8c:	4b35      	ldr	r3, [pc, #212]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001f8e:	2210      	movs	r2, #16
 8001f90:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Configure MQTT Version ---
			sprintf(cmd, "AT+QMTCFG=\"version\",%d,4", MQTT_CLIENT_IDX);  //// MQTT v3.1.1
 8001f92:	4944      	ldr	r1, [pc, #272]	; (80020a4 <modem_initiate_cmd+0x224>)
 8001f94:	2408      	movs	r4, #8
 8001f96:	193b      	adds	r3, r7, r4
 8001f98:	2200      	movs	r2, #0
 8001f9a:	0018      	movs	r0, r3
 8001f9c:	f007 f8cc 	bl	8009138 <siprintf>
			modem_send_msg(cmd);
 8001fa0:	193b      	adds	r3, r7, r4
 8001fa2:	0018      	movs	r0, r3
 8001fa4:	f7ff ff4c 	bl	8001e40 <modem_send_msg>
			break;
 8001fa8:	e053      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_MQTT_OPEN:
		{
			cmd_val=MODEM_MQTT_OPEN;
 8001faa:	4b2e      	ldr	r3, [pc, #184]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001fac:	2211      	movs	r2, #17
 8001fae:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Open MQTT Connection ---
			sprintf(cmd, "AT+QMTOPEN=%d,\"%s\",%d", MQTT_CLIENT_IDX, MQTT_HOSTNAME, MQTT_PORT);
 8001fb0:	4b3d      	ldr	r3, [pc, #244]	; (80020a8 <modem_initiate_cmd+0x228>)
 8001fb2:	493e      	ldr	r1, [pc, #248]	; (80020ac <modem_initiate_cmd+0x22c>)
 8001fb4:	2408      	movs	r4, #8
 8001fb6:	1938      	adds	r0, r7, r4
 8001fb8:	4a3d      	ldr	r2, [pc, #244]	; (80020b0 <modem_initiate_cmd+0x230>)
 8001fba:	9200      	str	r2, [sp, #0]
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f007 f8bb 	bl	8009138 <siprintf>
			modem_send_msg(cmd);
 8001fc2:	193b      	adds	r3, r7, r4
 8001fc4:	0018      	movs	r0, r3
 8001fc6:	f7ff ff3b 	bl	8001e40 <modem_send_msg>
			break;
 8001fca:	e042      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_MQTT_CONN:
		{
			cmd_val=MODEM_MQTT_CONN;
 8001fcc:	4b25      	ldr	r3, [pc, #148]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001fce:	2213      	movs	r2, #19
 8001fd0:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Connect MQTT Client ---
			sprintf(cmd, "AT+QMTCONN=%d,\"%s\"", MQTT_CLIENT_IDX, MQTT_CLIENT_ID);
 8001fd2:	4b38      	ldr	r3, [pc, #224]	; (80020b4 <modem_initiate_cmd+0x234>)
 8001fd4:	4938      	ldr	r1, [pc, #224]	; (80020b8 <modem_initiate_cmd+0x238>)
 8001fd6:	2408      	movs	r4, #8
 8001fd8:	1938      	adds	r0, r7, r4
 8001fda:	2200      	movs	r2, #0
 8001fdc:	f007 f8ac 	bl	8009138 <siprintf>
			modem_send_msg(cmd);
 8001fe0:	193b      	adds	r3, r7, r4
 8001fe2:	0018      	movs	r0, r3
 8001fe4:	f7ff ff2c 	bl	8001e40 <modem_send_msg>
			break;
 8001fe8:	e033      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_MQTT_SUBSCRIBE:
		{
			cmd_val=MODEM_MQTT_SUBSCRIBE;
 8001fea:	4b1e      	ldr	r3, [pc, #120]	; (8002064 <modem_initiate_cmd+0x1e4>)
 8001fec:	2215      	movs	r2, #21
 8001fee:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Subscribe to Topic ---
			sprintf(cmd, "AT+QMTSUB=%d,1,\"%s\",%d", MQTT_CLIENT_IDX, MQTT_TOPIC_SUB, MQTT_QOS);
 8001ff0:	4b32      	ldr	r3, [pc, #200]	; (80020bc <modem_initiate_cmd+0x23c>)
 8001ff2:	4933      	ldr	r1, [pc, #204]	; (80020c0 <modem_initiate_cmd+0x240>)
 8001ff4:	2408      	movs	r4, #8
 8001ff6:	1938      	adds	r0, r7, r4
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	9200      	str	r2, [sp, #0]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f007 f89b 	bl	8009138 <siprintf>
			modem_send_msg(cmd);
 8002002:	193b      	adds	r3, r7, r4
 8002004:	0018      	movs	r0, r3
 8002006:	f7ff ff1b 	bl	8001e40 <modem_send_msg>
			break;
 800200a:	e022      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		case MODEM_MQTT_PUBLISH:
		{
			cmd_val=MODEM_MQTT_PUBLISH;
 800200c:	4b15      	ldr	r3, [pc, #84]	; (8002064 <modem_initiate_cmd+0x1e4>)
 800200e:	2216      	movs	r2, #22
 8002010:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			//sprintf(cmd, "AT+QMTPUB=%d,0,%d,\"%s\"", MQTT_CLIENT_IDX, MQTT_QOS, MQTT_TOPIC_PUB);
			sprintf(cmd, "AT+QMTPUBEX=%d,%d,%d,%d,\"%s\",%d",
 8002012:	4b2c      	ldr	r3, [pc, #176]	; (80020c4 <modem_initiate_cmd+0x244>)
 8002014:	0018      	movs	r0, r3
 8002016:	f7fe f877 	bl	8000108 <strlen>
 800201a:	0003      	movs	r3, r0
 800201c:	492a      	ldr	r1, [pc, #168]	; (80020c8 <modem_initiate_cmd+0x248>)
 800201e:	2408      	movs	r4, #8
 8002020:	1938      	adds	r0, r7, r4
 8002022:	9303      	str	r3, [sp, #12]
 8002024:	4b29      	ldr	r3, [pc, #164]	; (80020cc <modem_initiate_cmd+0x24c>)
 8002026:	9302      	str	r3, [sp, #8]
 8002028:	2300      	movs	r3, #0
 800202a:	9301      	str	r3, [sp, #4]
 800202c:	2301      	movs	r3, #1
 800202e:	9300      	str	r3, [sp, #0]
 8002030:	2301      	movs	r3, #1
 8002032:	2200      	movs	r2, #0
 8002034:	f007 f880 	bl	8009138 <siprintf>
			        MQTT_MSG_ID,
			        MQTT_QOS,
			        MQTT_RETAIN_FLAG,
			        MQTT_TOPIC_PUB,
			        strlen(MQTT_PUB_Buff));
			modem_send_msg(cmd);
 8002038:	193b      	adds	r3, r7, r4
 800203a:	0018      	movs	r0, r3
 800203c:	f7ff ff00 	bl	8001e40 <modem_send_msg>
			osDelay(100);
 8002040:	2064      	movs	r0, #100	; 0x64
 8002042:	f005 feee 	bl	8007e22 <osDelay>
			modem_send_msg(MQTT_PUB_Buff);
 8002046:	4b1f      	ldr	r3, [pc, #124]	; (80020c4 <modem_initiate_cmd+0x244>)
 8002048:	0018      	movs	r0, r3
 800204a:	f7ff fef9 	bl	8001e40 <modem_send_msg>
			break;
 800204e:	e000      	b.n	8002052 <modem_initiate_cmd+0x1d2>
		}
		default:
		{
			break;
 8002050:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8002052:	46c0      	nop			; (mov r8, r8)
 8002054:	46bd      	mov	sp, r7
 8002056:	b023      	add	sp, #140	; 0x8c
 8002058:	bd90      	pop	{r4, r7, pc}
 800205a:	46c0      	nop			; (mov r8, r8)
 800205c:	08009d3c 	.word	0x08009d3c
 8002060:	08009950 	.word	0x08009950
 8002064:	20000088 	.word	0x20000088
 8002068:	08009954 	.word	0x08009954
 800206c:	08009958 	.word	0x08009958
 8002070:	08009960 	.word	0x08009960
 8002074:	08009968 	.word	0x08009968
 8002078:	08009970 	.word	0x08009970
 800207c:	08009978 	.word	0x08009978
 8002080:	08009984 	.word	0x08009984
 8002084:	08009990 	.word	0x08009990
 8002088:	0800999c 	.word	0x0800999c
 800208c:	080099a8 	.word	0x080099a8
 8002090:	080099b4 	.word	0x080099b4
 8002094:	080099c0 	.word	0x080099c0
 8002098:	080099d0 	.word	0x080099d0
 800209c:	080099e8 	.word	0x080099e8
 80020a0:	080099f4 	.word	0x080099f4
 80020a4:	080099f8 	.word	0x080099f8
 80020a8:	08009a14 	.word	0x08009a14
 80020ac:	08009a28 	.word	0x08009a28
 80020b0:	0000075b 	.word	0x0000075b
 80020b4:	08009a40 	.word	0x08009a40
 80020b8:	08009a50 	.word	0x08009a50
 80020bc:	08009a64 	.word	0x08009a64
 80020c0:	08009a70 	.word	0x08009a70
 80020c4:	2000008c 	.word	0x2000008c
 80020c8:	08009a88 	.word	0x08009a88
 80020cc:	08009aa8 	.word	0x08009aa8

080020d0 <get_modem_info>:
void get_modem_info()
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	af00      	add	r7, sp, #0
	  modem_initiate_cmd(MODEM_GET_INF0);
 80020d4:	2001      	movs	r0, #1
 80020d6:	f7ff fed3 	bl	8001e80 <modem_initiate_cmd>
	  osDelay(300);
 80020da:	2396      	movs	r3, #150	; 0x96
 80020dc:	005b      	lsls	r3, r3, #1
 80020de:	0018      	movs	r0, r3
 80020e0:	f005 fe9f 	bl	8007e22 <osDelay>

	  modem_initiate_cmd(MODEM_GET_MANF_ID);
 80020e4:	2004      	movs	r0, #4
 80020e6:	f7ff fecb 	bl	8001e80 <modem_initiate_cmd>
	  osDelay(300);
 80020ea:	2396      	movs	r3, #150	; 0x96
 80020ec:	005b      	lsls	r3, r3, #1
 80020ee:	0018      	movs	r0, r3
 80020f0:	f005 fe97 	bl	8007e22 <osDelay>

	  modem_initiate_cmd(MODEM_GET_TA_MODEL_INFO);
 80020f4:	2005      	movs	r0, #5
 80020f6:	f7ff fec3 	bl	8001e80 <modem_initiate_cmd>
	  osDelay(300);
 80020fa:	2396      	movs	r3, #150	; 0x96
 80020fc:	005b      	lsls	r3, r3, #1
 80020fe:	0018      	movs	r0, r3
 8002100:	f005 fe8f 	bl	8007e22 <osDelay>
}
 8002104:	46c0      	nop			; (mov r8, r8)
 8002106:	46bd      	mov	sp, r7
 8002108:	bd80      	pop	{r7, pc}

0800210a <modem_set_sim_configurations>:
void modem_set_sim_configurations()
{
 800210a:	b580      	push	{r7, lr}
 800210c:	af00      	add	r7, sp, #0
	  modem_initiate_cmd(MODEM_CHECK_SIM_READY);
 800210e:	2006      	movs	r0, #6
 8002110:	f7ff feb6 	bl	8001e80 <modem_initiate_cmd>
	  osDelay(300);
 8002114:	2396      	movs	r3, #150	; 0x96
 8002116:	005b      	lsls	r3, r3, #1
 8002118:	0018      	movs	r0, r3
 800211a:	f005 fe82 	bl	8007e22 <osDelay>

	  modem_initiate_cmd(MODEM_SET_NETWORK_REG);
 800211e:	2009      	movs	r0, #9
 8002120:	f7ff feae 	bl	8001e80 <modem_initiate_cmd>
	  osDelay(300);
 8002124:	2396      	movs	r3, #150	; 0x96
 8002126:	005b      	lsls	r3, r3, #1
 8002128:	0018      	movs	r0, r3
 800212a:	f005 fe7a 	bl	8007e22 <osDelay>

	  modem_initiate_cmd(MODEM_SET_PDP);
 800212e:	200d      	movs	r0, #13
 8002130:	f7ff fea6 	bl	8001e80 <modem_initiate_cmd>
	  osDelay(300);
 8002134:	2396      	movs	r3, #150	; 0x96
 8002136:	005b      	lsls	r3, r3, #1
 8002138:	0018      	movs	r0, r3
 800213a:	f005 fe72 	bl	8007e22 <osDelay>

	  modem_initiate_cmd(MODEM_ATTACH_GPRS);
 800213e:	200a      	movs	r0, #10
 8002140:	f7ff fe9e 	bl	8001e80 <modem_initiate_cmd>
	  osDelay(300);
 8002144:	2396      	movs	r3, #150	; 0x96
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	0018      	movs	r0, r3
 800214a:	f005 fe6a 	bl	8007e22 <osDelay>

	  modem_initiate_cmd(MODEM_ACTIVATE_PDP);
 800214e:	200e      	movs	r0, #14
 8002150:	f7ff fe96 	bl	8001e80 <modem_initiate_cmd>
	  osDelay(300);
 8002154:	2396      	movs	r3, #150	; 0x96
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	0018      	movs	r0, r3
 800215a:	f005 fe62 	bl	8007e22 <osDelay>

	  /*
	  modem_initiate_cmd(MODEM_CHECK_SIM_READY);
	  osDelay(300);
	  */
}
 800215e:	46c0      	nop			; (mov r8, r8)
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}

08002164 <modem_mqtt_init>:
{
	 modem_initiate_cmd(MODEM_RESET);
	 osDelay(300);
}
void modem_mqtt_init()
{
 8002164:	b580      	push	{r7, lr}
 8002166:	af00      	add	r7, sp, #0
	modem_initiate_cmd(MODEM_MQTT_VERSION_CFG);
 8002168:	2010      	movs	r0, #16
 800216a:	f7ff fe89 	bl	8001e80 <modem_initiate_cmd>
	osDelay(300);
 800216e:	2396      	movs	r3, #150	; 0x96
 8002170:	005b      	lsls	r3, r3, #1
 8002172:	0018      	movs	r0, r3
 8002174:	f005 fe55 	bl	8007e22 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_OPEN);
 8002178:	2011      	movs	r0, #17
 800217a:	f7ff fe81 	bl	8001e80 <modem_initiate_cmd>
	osDelay(2000);
 800217e:	23fa      	movs	r3, #250	; 0xfa
 8002180:	00db      	lsls	r3, r3, #3
 8002182:	0018      	movs	r0, r3
 8002184:	f005 fe4d 	bl	8007e22 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_CONN);
 8002188:	2013      	movs	r0, #19
 800218a:	f7ff fe79 	bl	8001e80 <modem_initiate_cmd>
	osDelay(2000);
 800218e:	23fa      	movs	r3, #250	; 0xfa
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	0018      	movs	r0, r3
 8002194:	f005 fe45 	bl	8007e22 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_SUBSCRIBE);
 8002198:	2015      	movs	r0, #21
 800219a:	f7ff fe71 	bl	8001e80 <modem_initiate_cmd>
	osDelay(2000);
 800219e:	23fa      	movs	r3, #250	; 0xfa
 80021a0:	00db      	lsls	r3, r3, #3
 80021a2:	0018      	movs	r0, r3
 80021a4:	f005 fe3d 	bl	8007e22 <osDelay>

	/*
	modem_initiate_cmd(MODEM_MQTT_VERSION_CFG);
	osDelay(300);
	*/
}
 80021a8:	46c0      	nop			; (mov r8, r8)
 80021aa:	46bd      	mov	sp, r7
 80021ac:	bd80      	pop	{r7, pc}

080021ae <modem_mqtt_publish>:
void modem_mqtt_publish()
{
 80021ae:	b580      	push	{r7, lr}
 80021b0:	af00      	add	r7, sp, #0
	format_json_message();
 80021b2:	f000 f80f 	bl	80021d4 <format_json_message>
	osDelay(100);
 80021b6:	2064      	movs	r0, #100	; 0x64
 80021b8:	f005 fe33 	bl	8007e22 <osDelay>
	modem_initiate_cmd(MODEM_MQTT_PUBLISH);
 80021bc:	2016      	movs	r0, #22
 80021be:	f7ff fe5f 	bl	8001e80 <modem_initiate_cmd>
	osDelay(300);
 80021c2:	2396      	movs	r3, #150	; 0x96
 80021c4:	005b      	lsls	r3, r3, #1
 80021c6:	0018      	movs	r0, r3
 80021c8:	f005 fe2b 	bl	8007e22 <osDelay>
}
 80021cc:	46c0      	nop			; (mov r8, r8)
 80021ce:	46bd      	mov	sp, r7
 80021d0:	bd80      	pop	{r7, pc}
	...

080021d4 <format_json_message>:
void format_json_message(void)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b082      	sub	sp, #8
 80021d8:	af00      	add	r7, sp, #0
    cJSON *root = cJSON_CreateObject();
 80021da:	f001 fbc9 	bl	8003970 <cJSON_CreateObject>
 80021de:	0003      	movs	r3, r0
 80021e0:	607b      	str	r3, [r7, #4]
    if (root == NULL)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d104      	bne.n	80021f2 <format_json_message+0x1e>
    {
        print_msg("JSON object creation failed\r\n");
 80021e8:	4b19      	ldr	r3, [pc, #100]	; (8002250 <format_json_message+0x7c>)
 80021ea:	0018      	movs	r0, r3
 80021ec:	f000 f83c 	bl	8002268 <print_msg>
        return;
 80021f0:	e02a      	b.n	8002248 <format_json_message+0x74>
    }

    cJSON_AddNumberToObject(root, "Msg_Count", Msg_cnt);
 80021f2:	4b18      	ldr	r3, [pc, #96]	; (8002254 <format_json_message+0x80>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	0018      	movs	r0, r3
 80021f8:	f7ff fd8e 	bl	8001d18 <__aeabi_i2d>
 80021fc:	0002      	movs	r2, r0
 80021fe:	000b      	movs	r3, r1
 8002200:	4915      	ldr	r1, [pc, #84]	; (8002258 <format_json_message+0x84>)
 8002202:	6878      	ldr	r0, [r7, #4]
 8002204:	f001 fb48 	bl	8003898 <cJSON_AddNumberToObject>

    char *json_str = cJSON_Print(root);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	0018      	movs	r0, r3
 800220c:	f001 f80a 	bl	8003224 <cJSON_Print>
 8002210:	0003      	movs	r3, r0
 8002212:	603b      	str	r3, [r7, #0]
    if (json_str != NULL)
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00e      	beq.n	8002238 <format_json_message+0x64>
    {
        strncpy(MQTT_PUB_Buff, json_str, MQTT_PUB_BUFF_LEN - 1);
 800221a:	4a10      	ldr	r2, [pc, #64]	; (800225c <format_json_message+0x88>)
 800221c:	6839      	ldr	r1, [r7, #0]
 800221e:	4b10      	ldr	r3, [pc, #64]	; (8002260 <format_json_message+0x8c>)
 8002220:	0018      	movs	r0, r3
 8002222:	f006 ffc2 	bl	80091aa <strncpy>
        MQTT_PUB_Buff[MQTT_PUB_BUFF_LEN - 1] = '\0';
 8002226:	4b0e      	ldr	r3, [pc, #56]	; (8002260 <format_json_message+0x8c>)
 8002228:	4a0c      	ldr	r2, [pc, #48]	; (800225c <format_json_message+0x88>)
 800222a:	2100      	movs	r1, #0
 800222c:	5499      	strb	r1, [r3, r2]

        /*
        print_msg("Formatted JSON:\r\n");
        print_msg(MQTT_PUB_Buff);
		*/
        free(json_str);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	0018      	movs	r0, r3
 8002232:	f006 fe89 	bl	8008f48 <free>
 8002236:	e003      	b.n	8002240 <format_json_message+0x6c>
    } else
    {
        print_msg("JSON formatting failed\r\n");
 8002238:	4b0a      	ldr	r3, [pc, #40]	; (8002264 <format_json_message+0x90>)
 800223a:	0018      	movs	r0, r3
 800223c:	f000 f814 	bl	8002268 <print_msg>
    }

    cJSON_Delete(root);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	0018      	movs	r0, r3
 8002244:	f000 fb18 	bl	8002878 <cJSON_Delete>
}
 8002248:	46bd      	mov	sp, r7
 800224a:	b002      	add	sp, #8
 800224c:	bd80      	pop	{r7, pc}
 800224e:	46c0      	nop			; (mov r8, r8)
 8002250:	08009ab4 	.word	0x08009ab4
 8002254:	20000474 	.word	0x20000474
 8002258:	08009ad4 	.word	0x08009ad4
 800225c:	000001ff 	.word	0x000001ff
 8002260:	2000008c 	.word	0x2000008c
 8002264:	08009ae0 	.word	0x08009ae0

08002268 <print_msg>:


/****************************** Function Prototypes **************************************/

void print_msg(const char *msg)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b082      	sub	sp, #8
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg), 1000);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	0018      	movs	r0, r3
 8002274:	f7fd ff48 	bl	8000108 <strlen>
 8002278:	0003      	movs	r3, r0
 800227a:	b29a      	uxth	r2, r3
 800227c:	23fa      	movs	r3, #250	; 0xfa
 800227e:	009b      	lsls	r3, r3, #2
 8002280:	6879      	ldr	r1, [r7, #4]
 8002282:	4803      	ldr	r0, [pc, #12]	; (8002290 <print_msg+0x28>)
 8002284:	f003 fc96 	bl	8005bb4 <HAL_UART_Transmit>
}
 8002288:	46c0      	nop			; (mov r8, r8)
 800228a:	46bd      	mov	sp, r7
 800228c:	b002      	add	sp, #8
 800228e:	bd80      	pop	{r7, pc}
 8002290:	20000374 	.word	0x20000374

08002294 <Modem_Rx_Process_start>:

void Modem_Rx_Process_start()
{
 8002294:	b590      	push	{r4, r7, lr}
 8002296:	b087      	sub	sp, #28
 8002298:	af00      	add	r7, sp, #0
	osThreadDef(ModemRxTask, ModemRx_Process, osPriorityNormal, 0, 256);
 800229a:	1d3b      	adds	r3, r7, #4
 800229c:	4a08      	ldr	r2, [pc, #32]	; (80022c0 <Modem_Rx_Process_start+0x2c>)
 800229e:	ca13      	ldmia	r2!, {r0, r1, r4}
 80022a0:	c313      	stmia	r3!, {r0, r1, r4}
 80022a2:	ca03      	ldmia	r2!, {r0, r1}
 80022a4:	c303      	stmia	r3!, {r0, r1}
	ModemRx_TaskHandle = osThreadCreate(osThread(ModemRxTask), NULL);
 80022a6:	1d3b      	adds	r3, r7, #4
 80022a8:	2100      	movs	r1, #0
 80022aa:	0018      	movs	r0, r3
 80022ac:	f005 fd91 	bl	8007dd2 <osThreadCreate>
 80022b0:	0002      	movs	r2, r0
 80022b2:	4b04      	ldr	r3, [pc, #16]	; (80022c4 <Modem_Rx_Process_start+0x30>)
 80022b4:	601a      	str	r2, [r3, #0]
}
 80022b6:	46c0      	nop			; (mov r8, r8)
 80022b8:	46bd      	mov	sp, r7
 80022ba:	b007      	add	sp, #28
 80022bc:	bd90      	pop	{r4, r7, pc}
 80022be:	46c0      	nop			; (mov r8, r8)
 80022c0:	08009b08 	.word	0x08009b08
 80022c4:	2000040c 	.word	0x2000040c

080022c8 <ModemRx_Process>:
void ModemRx_Process(void const * argument)
{
 80022c8:	b590      	push	{r4, r7, lr}
 80022ca:	b089      	sub	sp, #36	; 0x24
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
//	osDelay(2000);
	uint32_t ulNotifiedValue;
	for(;;)
	{
        // Wait for notification from ISR
		ulNotifiedValue=ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 80022d0:	2301      	movs	r3, #1
 80022d2:	425b      	negs	r3, r3
 80022d4:	0019      	movs	r1, r3
 80022d6:	2001      	movs	r0, #1
 80022d8:	f006 fa36 	bl	8008748 <ulTaskNotifyTake>
 80022dc:	0003      	movs	r3, r0
 80022de:	61fb      	str	r3, [r7, #28]
		if(ulNotifiedValue>0)
 80022e0:	69fb      	ldr	r3, [r7, #28]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d100      	bne.n	80022e8 <ModemRx_Process+0x20>
 80022e6:	e189      	b.n	80025fc <ModemRx_Process+0x334>
		{
			print_msg((const char*)EC200u_Rx_Buff);
 80022e8:	4bc6      	ldr	r3, [pc, #792]	; (8002604 <ModemRx_Process+0x33c>)
 80022ea:	0018      	movs	r0, r3
 80022ec:	f7ff ffbc 	bl	8002268 <print_msg>
			//print_msg("Rx Task Running\r\n");
			switch(cmd_val)
 80022f0:	4bc5      	ldr	r3, [pc, #788]	; (8002608 <ModemRx_Process+0x340>)
 80022f2:	781b      	ldrb	r3, [r3, #0]
 80022f4:	2b15      	cmp	r3, #21
 80022f6:	d900      	bls.n	80022fa <ModemRx_Process+0x32>
 80022f8:	e177      	b.n	80025ea <ModemRx_Process+0x322>
 80022fa:	009a      	lsls	r2, r3, #2
 80022fc:	4bc3      	ldr	r3, [pc, #780]	; (800260c <ModemRx_Process+0x344>)
 80022fe:	18d3      	adds	r3, r2, r3
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	469f      	mov	pc, r3
			{
				case MODEM_AT_CHECK:
				{
					osDelay(100);
 8002304:	2064      	movs	r0, #100	; 0x64
 8002306:	f005 fd8c 	bl	8007e22 <osDelay>
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 800230a:	4ac1      	ldr	r2, [pc, #772]	; (8002610 <ModemRx_Process+0x348>)
 800230c:	4bbd      	ldr	r3, [pc, #756]	; (8002604 <ModemRx_Process+0x33c>)
 800230e:	0011      	movs	r1, r2
 8002310:	0018      	movs	r0, r3
 8002312:	f7ff fd81 	bl	8001e18 <modem_check_resp>
 8002316:	1e03      	subs	r3, r0, #0
 8002318:	d100      	bne.n	800231c <ModemRx_Process+0x54>
 800231a:	e168      	b.n	80025ee <ModemRx_Process+0x326>
					{
						Modem_AT_check=1;
 800231c:	4bbd      	ldr	r3, [pc, #756]	; (8002614 <ModemRx_Process+0x34c>)
 800231e:	2201      	movs	r2, #1
 8002320:	701a      	strb	r2, [r3, #0]
						cmd_val=0;
 8002322:	4bb9      	ldr	r3, [pc, #740]	; (8002608 <ModemRx_Process+0x340>)
 8002324:	2200      	movs	r2, #0
 8002326:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002328:	e161      	b.n	80025ee <ModemRx_Process+0x326>
				}
				case MODEM_GET_INF0:
				{
					osDelay(100);
 800232a:	2064      	movs	r0, #100	; 0x64
 800232c:	f005 fd79 	bl	8007e22 <osDelay>
					const char* buffer_ptr = (const char*)EC200u_Rx_Buff;
 8002330:	4bb4      	ldr	r3, [pc, #720]	; (8002604 <ModemRx_Process+0x33c>)
 8002332:	61bb      	str	r3, [r7, #24]
					modem_parse_string(&buffer_ptr, modem_info_t.modem_prd_id_info, sizeof(modem_info_t.modem_prd_id_info));
 8002334:	49b8      	ldr	r1, [pc, #736]	; (8002618 <ModemRx_Process+0x350>)
 8002336:	2318      	movs	r3, #24
 8002338:	18fb      	adds	r3, r7, r3
 800233a:	2214      	movs	r2, #20
 800233c:	0018      	movs	r0, r3
 800233e:	f000 f995 	bl	800266c <modem_parse_string>
					//strcpy(modem_info_t.modem_prd_id_info,(char*)EC200u_Rx_Buff);
					cmd_val=0;
 8002342:	4bb1      	ldr	r3, [pc, #708]	; (8002608 <ModemRx_Process+0x340>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
					break;
 8002348:	e158      	b.n	80025fc <ModemRx_Process+0x334>
				}
				case MODEM_GET_MANF_ID:
				{
					osDelay(100);
 800234a:	2064      	movs	r0, #100	; 0x64
 800234c:	f005 fd69 	bl	8007e22 <osDelay>
					const char* buffer_ptr = (const char*)EC200u_Rx_Buff;
 8002350:	4bac      	ldr	r3, [pc, #688]	; (8002604 <ModemRx_Process+0x33c>)
 8002352:	617b      	str	r3, [r7, #20]
					modem_parse_string(&buffer_ptr, modem_info_t.modem_manf_id, sizeof(modem_info_t.modem_manf_id));
 8002354:	49b1      	ldr	r1, [pc, #708]	; (800261c <ModemRx_Process+0x354>)
 8002356:	2314      	movs	r3, #20
 8002358:	18fb      	adds	r3, r7, r3
 800235a:	2219      	movs	r2, #25
 800235c:	0018      	movs	r0, r3
 800235e:	f000 f985 	bl	800266c <modem_parse_string>
					cmd_val=0;
 8002362:	4ba9      	ldr	r3, [pc, #676]	; (8002608 <ModemRx_Process+0x340>)
 8002364:	2200      	movs	r2, #0
 8002366:	701a      	strb	r2, [r3, #0]
					break;
 8002368:	e148      	b.n	80025fc <ModemRx_Process+0x334>
				}
				case MODEM_GET_TA_MODEL_INFO:
				{
					osDelay(100);
 800236a:	2064      	movs	r0, #100	; 0x64
 800236c:	f005 fd59 	bl	8007e22 <osDelay>
					const char* buffer_ptr = (const char*)EC200u_Rx_Buff;
 8002370:	4ba4      	ldr	r3, [pc, #656]	; (8002604 <ModemRx_Process+0x33c>)
 8002372:	613b      	str	r3, [r7, #16]
					modem_parse_string(&buffer_ptr, modem_info_t.modem_TA_model_info, sizeof(modem_info_t.modem_TA_model_info));
 8002374:	49aa      	ldr	r1, [pc, #680]	; (8002620 <ModemRx_Process+0x358>)
 8002376:	2310      	movs	r3, #16
 8002378:	18fb      	adds	r3, r7, r3
 800237a:	2219      	movs	r2, #25
 800237c:	0018      	movs	r0, r3
 800237e:	f000 f975 	bl	800266c <modem_parse_string>
					cmd_val=0;
 8002382:	4ba1      	ldr	r3, [pc, #644]	; (8002608 <ModemRx_Process+0x340>)
 8002384:	2200      	movs	r2, #0
 8002386:	701a      	strb	r2, [r3, #0]
					memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
 8002388:	4b9e      	ldr	r3, [pc, #632]	; (8002604 <ModemRx_Process+0x33c>)
 800238a:	2264      	movs	r2, #100	; 0x64
 800238c:	2100      	movs	r1, #0
 800238e:	0018      	movs	r0, r3
 8002390:	f006 fef2 	bl	8009178 <memset>
					break;
 8002394:	e132      	b.n	80025fc <ModemRx_Process+0x334>
				}
				case MODEM_CHECK_SIM_READY:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"READY"))
 8002396:	4aa3      	ldr	r2, [pc, #652]	; (8002624 <ModemRx_Process+0x35c>)
 8002398:	4b9a      	ldr	r3, [pc, #616]	; (8002604 <ModemRx_Process+0x33c>)
 800239a:	0011      	movs	r1, r2
 800239c:	0018      	movs	r0, r3
 800239e:	f7ff fd3b 	bl	8001e18 <modem_check_resp>
 80023a2:	1e03      	subs	r3, r0, #0
 80023a4:	d00b      	beq.n	80023be <ModemRx_Process+0xf6>
					{
						cmd_val=0;
 80023a6:	4b98      	ldr	r3, [pc, #608]	; (8002608 <ModemRx_Process+0x340>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.sim_status=1;
 80023ac:	4b9a      	ldr	r3, [pc, #616]	; (8002618 <ModemRx_Process+0x350>)
 80023ae:	2246      	movs	r2, #70	; 0x46
 80023b0:	2101      	movs	r1, #1
 80023b2:	5499      	strb	r1, [r3, r2]
						print_msg("Sim Card Detected\r\n");
 80023b4:	4b9c      	ldr	r3, [pc, #624]	; (8002628 <ModemRx_Process+0x360>)
 80023b6:	0018      	movs	r0, r3
 80023b8:	f7ff ff56 	bl	8002268 <print_msg>
					else
					{
						modem_info_t.simcard_info.sim_status=255;
						print_msg("Sim Card Not Detected\r\n");
					}
					break;
 80023bc:	e11e      	b.n	80025fc <ModemRx_Process+0x334>
						modem_info_t.simcard_info.sim_status=255;
 80023be:	4b96      	ldr	r3, [pc, #600]	; (8002618 <ModemRx_Process+0x350>)
 80023c0:	2246      	movs	r2, #70	; 0x46
 80023c2:	21ff      	movs	r1, #255	; 0xff
 80023c4:	5499      	strb	r1, [r3, r2]
						print_msg("Sim Card Not Detected\r\n");
 80023c6:	4b99      	ldr	r3, [pc, #612]	; (800262c <ModemRx_Process+0x364>)
 80023c8:	0018      	movs	r0, r3
 80023ca:	f7ff ff4d 	bl	8002268 <print_msg>
					break;
 80023ce:	e115      	b.n	80025fc <ModemRx_Process+0x334>
				}
				case MODEM_CHECK_NETWORK_REG:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 80023d0:	4a8f      	ldr	r2, [pc, #572]	; (8002610 <ModemRx_Process+0x348>)
 80023d2:	4b8c      	ldr	r3, [pc, #560]	; (8002604 <ModemRx_Process+0x33c>)
 80023d4:	0011      	movs	r1, r2
 80023d6:	0018      	movs	r0, r3
 80023d8:	f7ff fd1e 	bl	8001e18 <modem_check_resp>
 80023dc:	1e03      	subs	r3, r0, #0
 80023de:	d00b      	beq.n	80023f8 <ModemRx_Process+0x130>
					{
						cmd_val=0;
 80023e0:	4b89      	ldr	r3, [pc, #548]	; (8002608 <ModemRx_Process+0x340>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.sim_reg_status=1;
 80023e6:	4b8c      	ldr	r3, [pc, #560]	; (8002618 <ModemRx_Process+0x350>)
 80023e8:	2247      	movs	r2, #71	; 0x47
 80023ea:	2101      	movs	r1, #1
 80023ec:	5499      	strb	r1, [r3, r2]
						print_msg("Sim Card Registered\r\n");
 80023ee:	4b90      	ldr	r3, [pc, #576]	; (8002630 <ModemRx_Process+0x368>)
 80023f0:	0018      	movs	r0, r3
 80023f2:	f7ff ff39 	bl	8002268 <print_msg>
					else
					{
						modem_info_t.simcard_info.sim_reg_status=255;
						print_msg("Sim Card Registration Failed\r\n");
					}
					break;
 80023f6:	e101      	b.n	80025fc <ModemRx_Process+0x334>
						modem_info_t.simcard_info.sim_reg_status=255;
 80023f8:	4b87      	ldr	r3, [pc, #540]	; (8002618 <ModemRx_Process+0x350>)
 80023fa:	2247      	movs	r2, #71	; 0x47
 80023fc:	21ff      	movs	r1, #255	; 0xff
 80023fe:	5499      	strb	r1, [r3, r2]
						print_msg("Sim Card Registration Failed\r\n");
 8002400:	4b8c      	ldr	r3, [pc, #560]	; (8002634 <ModemRx_Process+0x36c>)
 8002402:	0018      	movs	r0, r3
 8002404:	f7ff ff30 	bl	8002268 <print_msg>
					break;
 8002408:	e0f8      	b.n	80025fc <ModemRx_Process+0x334>
				}
				case MODEM_ATTACH_GPRS:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 800240a:	4a81      	ldr	r2, [pc, #516]	; (8002610 <ModemRx_Process+0x348>)
 800240c:	4b7d      	ldr	r3, [pc, #500]	; (8002604 <ModemRx_Process+0x33c>)
 800240e:	0011      	movs	r1, r2
 8002410:	0018      	movs	r0, r3
 8002412:	f7ff fd01 	bl	8001e18 <modem_check_resp>
 8002416:	1e03      	subs	r3, r0, #0
 8002418:	d00b      	beq.n	8002432 <ModemRx_Process+0x16a>
					{
						cmd_val=0;
 800241a:	4b7b      	ldr	r3, [pc, #492]	; (8002608 <ModemRx_Process+0x340>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.gprs_attachment=1;
 8002420:	4b7d      	ldr	r3, [pc, #500]	; (8002618 <ModemRx_Process+0x350>)
 8002422:	2249      	movs	r2, #73	; 0x49
 8002424:	2101      	movs	r1, #1
 8002426:	5499      	strb	r1, [r3, r2]
						print_msg("GPRS attachment sucessfull\r\n");
 8002428:	4b83      	ldr	r3, [pc, #524]	; (8002638 <ModemRx_Process+0x370>)
 800242a:	0018      	movs	r0, r3
 800242c:	f7ff ff1c 	bl	8002268 <print_msg>
					else
					{
						modem_info_t.simcard_info.gprs_attachment=255;
						print_msg("GPRS attachment Failed\r\n");
					}
					break;
 8002430:	e0e4      	b.n	80025fc <ModemRx_Process+0x334>
						modem_info_t.simcard_info.gprs_attachment=255;
 8002432:	4b79      	ldr	r3, [pc, #484]	; (8002618 <ModemRx_Process+0x350>)
 8002434:	2249      	movs	r2, #73	; 0x49
 8002436:	21ff      	movs	r1, #255	; 0xff
 8002438:	5499      	strb	r1, [r3, r2]
						print_msg("GPRS attachment Failed\r\n");
 800243a:	4b80      	ldr	r3, [pc, #512]	; (800263c <ModemRx_Process+0x374>)
 800243c:	0018      	movs	r0, r3
 800243e:	f7ff ff13 	bl	8002268 <print_msg>
					break;
 8002442:	e0db      	b.n	80025fc <ModemRx_Process+0x334>
				}
				case MODEM_SET_PDP:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 8002444:	4a72      	ldr	r2, [pc, #456]	; (8002610 <ModemRx_Process+0x348>)
 8002446:	4b6f      	ldr	r3, [pc, #444]	; (8002604 <ModemRx_Process+0x33c>)
 8002448:	0011      	movs	r1, r2
 800244a:	0018      	movs	r0, r3
 800244c:	f7ff fce4 	bl	8001e18 <modem_check_resp>
 8002450:	1e03      	subs	r3, r0, #0
 8002452:	d00b      	beq.n	800246c <ModemRx_Process+0x1a4>
					{
						cmd_val=0;
 8002454:	4b6c      	ldr	r3, [pc, #432]	; (8002608 <ModemRx_Process+0x340>)
 8002456:	2200      	movs	r2, #0
 8002458:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.pdp_status=1;
 800245a:	4b6f      	ldr	r3, [pc, #444]	; (8002618 <ModemRx_Process+0x350>)
 800245c:	2248      	movs	r2, #72	; 0x48
 800245e:	2101      	movs	r1, #1
 8002460:	5499      	strb	r1, [r3, r2]
						print_msg("PDP is set\r\n");
 8002462:	4b77      	ldr	r3, [pc, #476]	; (8002640 <ModemRx_Process+0x378>)
 8002464:	0018      	movs	r0, r3
 8002466:	f7ff feff 	bl	8002268 <print_msg>
					else
					{
						modem_info_t.simcard_info.pdp_status=255;
						print_msg("PDP is Failed\r\n");
					}
					break;
 800246a:	e0c7      	b.n	80025fc <ModemRx_Process+0x334>
						modem_info_t.simcard_info.pdp_status=255;
 800246c:	4b6a      	ldr	r3, [pc, #424]	; (8002618 <ModemRx_Process+0x350>)
 800246e:	2248      	movs	r2, #72	; 0x48
 8002470:	21ff      	movs	r1, #255	; 0xff
 8002472:	5499      	strb	r1, [r3, r2]
						print_msg("PDP is Failed\r\n");
 8002474:	4b73      	ldr	r3, [pc, #460]	; (8002644 <ModemRx_Process+0x37c>)
 8002476:	0018      	movs	r0, r3
 8002478:	f7ff fef6 	bl	8002268 <print_msg>
					break;
 800247c:	e0be      	b.n	80025fc <ModemRx_Process+0x334>
				}
				case MODEM_ACTIVATE_PDP:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 800247e:	4a64      	ldr	r2, [pc, #400]	; (8002610 <ModemRx_Process+0x348>)
 8002480:	4b60      	ldr	r3, [pc, #384]	; (8002604 <ModemRx_Process+0x33c>)
 8002482:	0011      	movs	r1, r2
 8002484:	0018      	movs	r0, r3
 8002486:	f7ff fcc7 	bl	8001e18 <modem_check_resp>
 800248a:	1e03      	subs	r3, r0, #0
 800248c:	d00b      	beq.n	80024a6 <ModemRx_Process+0x1de>
					{
						cmd_val=0;
 800248e:	4b5e      	ldr	r3, [pc, #376]	; (8002608 <ModemRx_Process+0x340>)
 8002490:	2200      	movs	r2, #0
 8002492:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.pdp_active_status=1;
 8002494:	4b60      	ldr	r3, [pc, #384]	; (8002618 <ModemRx_Process+0x350>)
 8002496:	224a      	movs	r2, #74	; 0x4a
 8002498:	2101      	movs	r1, #1
 800249a:	5499      	strb	r1, [r3, r2]
						print_msg("PDP is active\r\n");
 800249c:	4b6a      	ldr	r3, [pc, #424]	; (8002648 <ModemRx_Process+0x380>)
 800249e:	0018      	movs	r0, r3
 80024a0:	f7ff fee2 	bl	8002268 <print_msg>
 80024a4:	e007      	b.n	80024b6 <ModemRx_Process+0x1ee>
					}
					else
					{
						modem_info_t.simcard_info.pdp_active_status=255;
 80024a6:	4b5c      	ldr	r3, [pc, #368]	; (8002618 <ModemRx_Process+0x350>)
 80024a8:	224a      	movs	r2, #74	; 0x4a
 80024aa:	21ff      	movs	r1, #255	; 0xff
 80024ac:	5499      	strb	r1, [r3, r2]
						print_msg("PDP is activation Failed\r\n");
 80024ae:	4b67      	ldr	r3, [pc, #412]	; (800264c <ModemRx_Process+0x384>)
 80024b0:	0018      	movs	r0, r3
 80024b2:	f7ff fed9 	bl	8002268 <print_msg>
					}
				}
				case MODEM_MQTT_VERSION_CFG:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 80024b6:	4a56      	ldr	r2, [pc, #344]	; (8002610 <ModemRx_Process+0x348>)
 80024b8:	4b52      	ldr	r3, [pc, #328]	; (8002604 <ModemRx_Process+0x33c>)
 80024ba:	0011      	movs	r1, r2
 80024bc:	0018      	movs	r0, r3
 80024be:	f7ff fcab 	bl	8001e18 <modem_check_resp>
 80024c2:	1e03      	subs	r3, r0, #0
 80024c4:	d100      	bne.n	80024c8 <ModemRx_Process+0x200>
 80024c6:	e094      	b.n	80025f2 <ModemRx_Process+0x32a>
					{
						cmd_val=0;
 80024c8:	4b4f      	ldr	r3, [pc, #316]	; (8002608 <ModemRx_Process+0x340>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	701a      	strb	r2, [r3, #0]
						print_msg("MQTT Configutations Done\r\n");
 80024ce:	4b60      	ldr	r3, [pc, #384]	; (8002650 <ModemRx_Process+0x388>)
 80024d0:	0018      	movs	r0, r3
 80024d2:	f7ff fec9 	bl	8002268 <print_msg>
					}
					break;
 80024d6:	e08c      	b.n	80025f2 <ModemRx_Process+0x32a>
				}
				case MODEM_MQTT_OPEN:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QMTOPEN"))
 80024d8:	4a5e      	ldr	r2, [pc, #376]	; (8002654 <ModemRx_Process+0x38c>)
 80024da:	4b4a      	ldr	r3, [pc, #296]	; (8002604 <ModemRx_Process+0x33c>)
 80024dc:	0011      	movs	r1, r2
 80024de:	0018      	movs	r0, r3
 80024e0:	f7ff fc9a 	bl	8001e18 <modem_check_resp>
 80024e4:	1e03      	subs	r3, r0, #0
 80024e6:	d018      	beq.n	800251a <ModemRx_Process+0x252>
					{
						cmd_val=0;
 80024e8:	4b47      	ldr	r3, [pc, #284]	; (8002608 <ModemRx_Process+0x340>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	701a      	strb	r2, [r3, #0]
						const char* p = (const char*)EC200u_Rx_Buff;
 80024ee:	4b45      	ldr	r3, [pc, #276]	; (8002604 <ModemRx_Process+0x33c>)
 80024f0:	60fb      	str	r3, [r7, #12]
						modem_info_t.mqtt_info_t.mqtt_client_idx = modem_parse_number(&p);
 80024f2:	240c      	movs	r4, #12
 80024f4:	193b      	adds	r3, r7, r4
 80024f6:	0018      	movs	r0, r3
 80024f8:	f000 f926 	bl	8002748 <modem_parse_number>
 80024fc:	0003      	movs	r3, r0
 80024fe:	b2d9      	uxtb	r1, r3
 8002500:	4b45      	ldr	r3, [pc, #276]	; (8002618 <ModemRx_Process+0x350>)
 8002502:	224c      	movs	r2, #76	; 0x4c
 8002504:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_open_stat  = modem_parse_number(&p);
 8002506:	193b      	adds	r3, r7, r4
 8002508:	0018      	movs	r0, r3
 800250a:	f000 f91d 	bl	8002748 <modem_parse_number>
 800250e:	0003      	movs	r3, r0
 8002510:	b2d9      	uxtb	r1, r3
 8002512:	4b41      	ldr	r3, [pc, #260]	; (8002618 <ModemRx_Process+0x350>)
 8002514:	224b      	movs	r2, #75	; 0x4b
 8002516:	5499      	strb	r1, [r3, r2]
					{
						print_msg("Failed to open MQTT network for a client\r\n");
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
						modem_info_t.mqtt_info_t.mqtt_open_stat=255;
					}
					break;
 8002518:	e06d      	b.n	80025f6 <ModemRx_Process+0x32e>
					else if(modem_check_resp((const char*)EC200u_Rx_Buff, "ERROR"))
 800251a:	4a4f      	ldr	r2, [pc, #316]	; (8002658 <ModemRx_Process+0x390>)
 800251c:	4b39      	ldr	r3, [pc, #228]	; (8002604 <ModemRx_Process+0x33c>)
 800251e:	0011      	movs	r1, r2
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff fc79 	bl	8001e18 <modem_check_resp>
 8002526:	1e03      	subs	r3, r0, #0
 8002528:	d065      	beq.n	80025f6 <ModemRx_Process+0x32e>
						print_msg("Failed to open MQTT network for a client\r\n");
 800252a:	4b4c      	ldr	r3, [pc, #304]	; (800265c <ModemRx_Process+0x394>)
 800252c:	0018      	movs	r0, r3
 800252e:	f7ff fe9b 	bl	8002268 <print_msg>
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
 8002532:	4b39      	ldr	r3, [pc, #228]	; (8002618 <ModemRx_Process+0x350>)
 8002534:	224c      	movs	r2, #76	; 0x4c
 8002536:	21ff      	movs	r1, #255	; 0xff
 8002538:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_open_stat=255;
 800253a:	4b37      	ldr	r3, [pc, #220]	; (8002618 <ModemRx_Process+0x350>)
 800253c:	224b      	movs	r2, #75	; 0x4b
 800253e:	21ff      	movs	r1, #255	; 0xff
 8002540:	5499      	strb	r1, [r3, r2]
					break;
 8002542:	e058      	b.n	80025f6 <ModemRx_Process+0x32e>
				}
				case MODEM_MQTT_CONN:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QMTCONN"))
 8002544:	4a46      	ldr	r2, [pc, #280]	; (8002660 <ModemRx_Process+0x398>)
 8002546:	4b2f      	ldr	r3, [pc, #188]	; (8002604 <ModemRx_Process+0x33c>)
 8002548:	0011      	movs	r1, r2
 800254a:	0018      	movs	r0, r3
 800254c:	f7ff fc64 	bl	8001e18 <modem_check_resp>
 8002550:	1e03      	subs	r3, r0, #0
 8002552:	d021      	beq.n	8002598 <ModemRx_Process+0x2d0>
					{
						cmd_val=0;
 8002554:	4b2c      	ldr	r3, [pc, #176]	; (8002608 <ModemRx_Process+0x340>)
 8002556:	2200      	movs	r2, #0
 8002558:	701a      	strb	r2, [r3, #0]
						const char* p = (const char*)EC200u_Rx_Buff;
 800255a:	4b2a      	ldr	r3, [pc, #168]	; (8002604 <ModemRx_Process+0x33c>)
 800255c:	60bb      	str	r3, [r7, #8]
						modem_info_t.mqtt_info_t.mqtt_client_idx = modem_parse_number(&p);
 800255e:	2408      	movs	r4, #8
 8002560:	193b      	adds	r3, r7, r4
 8002562:	0018      	movs	r0, r3
 8002564:	f000 f8f0 	bl	8002748 <modem_parse_number>
 8002568:	0003      	movs	r3, r0
 800256a:	b2d9      	uxtb	r1, r3
 800256c:	4b2a      	ldr	r3, [pc, #168]	; (8002618 <ModemRx_Process+0x350>)
 800256e:	224c      	movs	r2, #76	; 0x4c
 8002570:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_stat  = modem_parse_number(&p);
 8002572:	193b      	adds	r3, r7, r4
 8002574:	0018      	movs	r0, r3
 8002576:	f000 f8e7 	bl	8002748 <modem_parse_number>
 800257a:	0003      	movs	r3, r0
 800257c:	b2d9      	uxtb	r1, r3
 800257e:	4b26      	ldr	r3, [pc, #152]	; (8002618 <ModemRx_Process+0x350>)
 8002580:	224d      	movs	r2, #77	; 0x4d
 8002582:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_ret_code  = modem_parse_number(&p);
 8002584:	193b      	adds	r3, r7, r4
 8002586:	0018      	movs	r0, r3
 8002588:	f000 f8de 	bl	8002748 <modem_parse_number>
 800258c:	0003      	movs	r3, r0
 800258e:	b2d9      	uxtb	r1, r3
 8002590:	4b21      	ldr	r3, [pc, #132]	; (8002618 <ModemRx_Process+0x350>)
 8002592:	224e      	movs	r2, #78	; 0x4e
 8002594:	5499      	strb	r1, [r3, r2]
						print_msg("Failed to connect to a MQTT client\r\n");
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
						modem_info_t.mqtt_info_t.mqtt_conn_stat=255;
						modem_info_t.mqtt_info_t.mqtt_conn_ret_code=255;
					}
					break;
 8002596:	e030      	b.n	80025fa <ModemRx_Process+0x332>
					else if(modem_check_resp((const char*)EC200u_Rx_Buff, "ERROR"))
 8002598:	4a2f      	ldr	r2, [pc, #188]	; (8002658 <ModemRx_Process+0x390>)
 800259a:	4b1a      	ldr	r3, [pc, #104]	; (8002604 <ModemRx_Process+0x33c>)
 800259c:	0011      	movs	r1, r2
 800259e:	0018      	movs	r0, r3
 80025a0:	f7ff fc3a 	bl	8001e18 <modem_check_resp>
 80025a4:	1e03      	subs	r3, r0, #0
 80025a6:	d028      	beq.n	80025fa <ModemRx_Process+0x332>
						print_msg("Failed to connect to a MQTT client\r\n");
 80025a8:	4b2e      	ldr	r3, [pc, #184]	; (8002664 <ModemRx_Process+0x39c>)
 80025aa:	0018      	movs	r0, r3
 80025ac:	f7ff fe5c 	bl	8002268 <print_msg>
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
 80025b0:	4b19      	ldr	r3, [pc, #100]	; (8002618 <ModemRx_Process+0x350>)
 80025b2:	224c      	movs	r2, #76	; 0x4c
 80025b4:	21ff      	movs	r1, #255	; 0xff
 80025b6:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_stat=255;
 80025b8:	4b17      	ldr	r3, [pc, #92]	; (8002618 <ModemRx_Process+0x350>)
 80025ba:	224d      	movs	r2, #77	; 0x4d
 80025bc:	21ff      	movs	r1, #255	; 0xff
 80025be:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_ret_code=255;
 80025c0:	4b15      	ldr	r3, [pc, #84]	; (8002618 <ModemRx_Process+0x350>)
 80025c2:	224e      	movs	r2, #78	; 0x4e
 80025c4:	21ff      	movs	r1, #255	; 0xff
 80025c6:	5499      	strb	r1, [r3, r2]
					break;
 80025c8:	e017      	b.n	80025fa <ModemRx_Process+0x332>
				}
				case MODEM_MQTT_SUBSCRIBE:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "ERROR"))
 80025ca:	4a23      	ldr	r2, [pc, #140]	; (8002658 <ModemRx_Process+0x390>)
 80025cc:	4b0d      	ldr	r3, [pc, #52]	; (8002604 <ModemRx_Process+0x33c>)
 80025ce:	0011      	movs	r1, r2
 80025d0:	0018      	movs	r0, r3
 80025d2:	f7ff fc21 	bl	8001e18 <modem_check_resp>
 80025d6:	1e03      	subs	r3, r0, #0
 80025d8:	d007      	beq.n	80025ea <ModemRx_Process+0x322>
					{
						modem_info_t.mqtt_info_t.mqtt_subs_stat=255;
 80025da:	4b0f      	ldr	r3, [pc, #60]	; (8002618 <ModemRx_Process+0x350>)
 80025dc:	224f      	movs	r2, #79	; 0x4f
 80025de:	21ff      	movs	r1, #255	; 0xff
 80025e0:	5499      	strb	r1, [r3, r2]
						print_msg("Failed To subscribe to a topic\r\n");
 80025e2:	4b21      	ldr	r3, [pc, #132]	; (8002668 <ModemRx_Process+0x3a0>)
 80025e4:	0018      	movs	r0, r3
 80025e6:	f7ff fe3f 	bl	8002268 <print_msg>
					}
				}
				default:
				{
					break;
 80025ea:	46c0      	nop			; (mov r8, r8)
 80025ec:	e006      	b.n	80025fc <ModemRx_Process+0x334>
					break;
 80025ee:	46c0      	nop			; (mov r8, r8)
 80025f0:	e004      	b.n	80025fc <ModemRx_Process+0x334>
					break;
 80025f2:	46c0      	nop			; (mov r8, r8)
 80025f4:	e002      	b.n	80025fc <ModemRx_Process+0x334>
					break;
 80025f6:	46c0      	nop			; (mov r8, r8)
 80025f8:	e000      	b.n	80025fc <ModemRx_Process+0x334>
					break;
 80025fa:	46c0      	nop			; (mov r8, r8)
				}
			}

		}
		osDelay(10);
 80025fc:	200a      	movs	r0, #10
 80025fe:	f005 fc10 	bl	8007e22 <osDelay>
		ulNotifiedValue=ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002602:	e665      	b.n	80022d0 <ModemRx_Process+0x8>
 8002604:	20000410 	.word	0x20000410
 8002608:	20000088 	.word	0x20000088
 800260c:	08009d98 	.word	0x08009d98
 8002610:	08009b1c 	.word	0x08009b1c
 8002614:	200002dc 	.word	0x200002dc
 8002618:	2000028c 	.word	0x2000028c
 800261c:	200002a0 	.word	0x200002a0
 8002620:	200002b9 	.word	0x200002b9
 8002624:	08009b20 	.word	0x08009b20
 8002628:	08009b28 	.word	0x08009b28
 800262c:	08009b3c 	.word	0x08009b3c
 8002630:	08009b54 	.word	0x08009b54
 8002634:	08009b6c 	.word	0x08009b6c
 8002638:	08009b8c 	.word	0x08009b8c
 800263c:	08009bac 	.word	0x08009bac
 8002640:	08009bc8 	.word	0x08009bc8
 8002644:	08009bd8 	.word	0x08009bd8
 8002648:	08009be8 	.word	0x08009be8
 800264c:	08009bf8 	.word	0x08009bf8
 8002650:	08009c14 	.word	0x08009c14
 8002654:	08009c30 	.word	0x08009c30
 8002658:	08009c3c 	.word	0x08009c3c
 800265c:	08009c44 	.word	0x08009c44
 8002660:	08009c70 	.word	0x08009c70
 8002664:	08009c7c 	.word	0x08009c7c
 8002668:	08009ca4 	.word	0x08009ca4

0800266c <modem_parse_string>:
 * \param[in]       dst: Destination buffer to copy revision into
 * \param[in]       dst_len: Size of destination buffer, including null terminator
 * \return          `1` on success, `0` otherwise
 */
uint8_t modem_parse_string(const char** src, char* dst, size_t dst_len)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b088      	sub	sp, #32
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
    const char* p = *src;
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	61fb      	str	r3, [r7, #28]
    const char* rev_start = NULL;
 800267e:	2300      	movs	r3, #0
 8002680:	61bb      	str	r3, [r7, #24]
    size_t i = 0;
 8002682:	2300      	movs	r3, #0
 8002684:	617b      	str	r3, [r7, #20]

    // Scan for "Revision: "
    while (*p != '\0') {
 8002686:	e054      	b.n	8002732 <modem_parse_string+0xc6>
        if (strncmp(p, "Revision:", 9) == 0) {
 8002688:	492e      	ldr	r1, [pc, #184]	; (8002744 <modem_parse_string+0xd8>)
 800268a:	69fb      	ldr	r3, [r7, #28]
 800268c:	2209      	movs	r2, #9
 800268e:	0018      	movs	r0, r3
 8002690:	f006 fd7a 	bl	8009188 <strncmp>
 8002694:	1e03      	subs	r3, r0, #0
 8002696:	d13d      	bne.n	8002714 <modem_parse_string+0xa8>
            rev_start = p + 9;
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	3309      	adds	r3, #9
 800269c:	61bb      	str	r3, [r7, #24]

            // Skip leading whitespace
            while (*rev_start == ' ') {
 800269e:	e002      	b.n	80026a6 <modem_parse_string+0x3a>
                ++rev_start;
 80026a0:	69bb      	ldr	r3, [r7, #24]
 80026a2:	3301      	adds	r3, #1
 80026a4:	61bb      	str	r3, [r7, #24]
            while (*rev_start == ' ') {
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	2b20      	cmp	r3, #32
 80026ac:	d0f8      	beq.n	80026a0 <modem_parse_string+0x34>
            }

            // Copy up to newline or buffer limit
            if (dst != NULL && dst_len > 0) {
 80026ae:	68bb      	ldr	r3, [r7, #8]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d027      	beq.n	8002704 <modem_parse_string+0x98>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d024      	beq.n	8002704 <modem_parse_string+0x98>
                --dst_len;
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	3b01      	subs	r3, #1
 80026be:	607b      	str	r3, [r7, #4]
                while (*rev_start != '\0' && *rev_start != '\r' && *rev_start != '\n') {
 80026c0:	e00d      	b.n	80026de <modem_parse_string+0x72>
                    if (i < dst_len) {
 80026c2:	697a      	ldr	r2, [r7, #20]
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d216      	bcs.n	80026f8 <modem_parse_string+0x8c>
                        dst[i++] = *rev_start++;
 80026ca:	69bb      	ldr	r3, [r7, #24]
 80026cc:	1c5a      	adds	r2, r3, #1
 80026ce:	61ba      	str	r2, [r7, #24]
 80026d0:	697a      	ldr	r2, [r7, #20]
 80026d2:	1c51      	adds	r1, r2, #1
 80026d4:	6179      	str	r1, [r7, #20]
 80026d6:	68b9      	ldr	r1, [r7, #8]
 80026d8:	188a      	adds	r2, r1, r2
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	7013      	strb	r3, [r2, #0]
                while (*rev_start != '\0' && *rev_start != '\r' && *rev_start != '\n') {
 80026de:	69bb      	ldr	r3, [r7, #24]
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d009      	beq.n	80026fa <modem_parse_string+0x8e>
 80026e6:	69bb      	ldr	r3, [r7, #24]
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	2b0d      	cmp	r3, #13
 80026ec:	d005      	beq.n	80026fa <modem_parse_string+0x8e>
 80026ee:	69bb      	ldr	r3, [r7, #24]
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b0a      	cmp	r3, #10
 80026f4:	d1e5      	bne.n	80026c2 <modem_parse_string+0x56>
 80026f6:	e000      	b.n	80026fa <modem_parse_string+0x8e>
                    } else {
                        break;
 80026f8:	46c0      	nop			; (mov r8, r8)
                    }
                }
                dst[i] = '\0';
 80026fa:	68ba      	ldr	r2, [r7, #8]
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	18d3      	adds	r3, r2, r3
 8002700:	2200      	movs	r2, #0
 8002702:	701a      	strb	r2, [r3, #0]
            }

            *src = p;
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	69fa      	ldr	r2, [r7, #28]
 8002708:	601a      	str	r2, [r3, #0]
            return 1;
 800270a:	2301      	movs	r3, #1
 800270c:	e016      	b.n	800273c <modem_parse_string+0xd0>
        }

        // Move to next line
        while (*p != '\0' && *p != '\n') {
            ++p;
 800270e:	69fb      	ldr	r3, [r7, #28]
 8002710:	3301      	adds	r3, #1
 8002712:	61fb      	str	r3, [r7, #28]
        while (*p != '\0' && *p != '\n') {
 8002714:	69fb      	ldr	r3, [r7, #28]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d003      	beq.n	8002724 <modem_parse_string+0xb8>
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b0a      	cmp	r3, #10
 8002722:	d1f4      	bne.n	800270e <modem_parse_string+0xa2>
        }
        if (*p == '\n') {
 8002724:	69fb      	ldr	r3, [r7, #28]
 8002726:	781b      	ldrb	r3, [r3, #0]
 8002728:	2b0a      	cmp	r3, #10
 800272a:	d102      	bne.n	8002732 <modem_parse_string+0xc6>
            ++p;
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	3301      	adds	r3, #1
 8002730:	61fb      	str	r3, [r7, #28]
    while (*p != '\0') {
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	781b      	ldrb	r3, [r3, #0]
 8002736:	2b00      	cmp	r3, #0
 8002738:	d1a6      	bne.n	8002688 <modem_parse_string+0x1c>
        }
    }

    return 0; // Revision not found
 800273a:	2300      	movs	r3, #0
}
 800273c:	0018      	movs	r0, r3
 800273e:	46bd      	mov	sp, r7
 8002740:	b008      	add	sp, #32
 8002742:	bd80      	pop	{r7, pc}
 8002744:	08009cc8 	.word	0x08009cc8

08002748 <modem_parse_number>:
int32_t modem_parse_number(const char** str)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
    int32_t val = 0;
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
    uint8_t minus = 0;
 8002754:	2313      	movs	r3, #19
 8002756:	18fb      	adds	r3, r7, r3
 8002758:	2200      	movs	r2, #0
 800275a:	701a      	strb	r2, [r3, #0]
    const char* p = *str;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	60fb      	str	r3, [r7, #12]

    // Skip until we find a digit or minus sign
    while (*p && !(CHAR_IS_NUM(*p) || *p == '-')) {
 8002762:	e002      	b.n	800276a <modem_parse_number+0x22>
        ++p;
 8002764:	68fb      	ldr	r3, [r7, #12]
 8002766:	3301      	adds	r3, #1
 8002768:	60fb      	str	r3, [r7, #12]
    while (*p && !(CHAR_IS_NUM(*p) || *p == '-')) {
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d00b      	beq.n	800278a <modem_parse_number+0x42>
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	781b      	ldrb	r3, [r3, #0]
 8002776:	2b2f      	cmp	r3, #47	; 0x2f
 8002778:	d903      	bls.n	8002782 <modem_parse_number+0x3a>
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	781b      	ldrb	r3, [r3, #0]
 800277e:	2b39      	cmp	r3, #57	; 0x39
 8002780:	d903      	bls.n	800278a <modem_parse_number+0x42>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b2d      	cmp	r3, #45	; 0x2d
 8002788:	d1ec      	bne.n	8002764 <modem_parse_number+0x1c>
    }

    // Handle negative sign if present
    if (*p == '-') {
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	2b2d      	cmp	r3, #45	; 0x2d
 8002790:	d115      	bne.n	80027be <modem_parse_number+0x76>
        minus = 1;
 8002792:	2313      	movs	r3, #19
 8002794:	18fb      	adds	r3, r7, r3
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
        ++p;
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	3301      	adds	r3, #1
 800279e:	60fb      	str	r3, [r7, #12]
    }

    // Parse the number
    while (CHAR_IS_NUM(*p)) {
 80027a0:	e00d      	b.n	80027be <modem_parse_number+0x76>
        val = val * 10 + CHAR_TO_NUM(*p);
 80027a2:	697a      	ldr	r2, [r7, #20]
 80027a4:	0013      	movs	r3, r2
 80027a6:	009b      	lsls	r3, r3, #2
 80027a8:	189b      	adds	r3, r3, r2
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	001a      	movs	r2, r3
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	781b      	ldrb	r3, [r3, #0]
 80027b2:	3b30      	subs	r3, #48	; 0x30
 80027b4:	18d3      	adds	r3, r2, r3
 80027b6:	617b      	str	r3, [r7, #20]
        ++p;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	3301      	adds	r3, #1
 80027bc:	60fb      	str	r3, [r7, #12]
    while (CHAR_IS_NUM(*p)) {
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	781b      	ldrb	r3, [r3, #0]
 80027c2:	2b2f      	cmp	r3, #47	; 0x2f
 80027c4:	d903      	bls.n	80027ce <modem_parse_number+0x86>
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	781b      	ldrb	r3, [r3, #0]
 80027ca:	2b39      	cmp	r3, #57	; 0x39
 80027cc:	d9e9      	bls.n	80027a2 <modem_parse_number+0x5a>
    }

    *str = p; // Save updated pointer
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68fa      	ldr	r2, [r7, #12]
 80027d2:	601a      	str	r2, [r3, #0]
    return minus ? -val : val;
 80027d4:	2313      	movs	r3, #19
 80027d6:	18fb      	adds	r3, r7, r3
 80027d8:	781b      	ldrb	r3, [r3, #0]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d002      	beq.n	80027e4 <modem_parse_number+0x9c>
 80027de:	697b      	ldr	r3, [r7, #20]
 80027e0:	425b      	negs	r3, r3
 80027e2:	e000      	b.n	80027e6 <modem_parse_number+0x9e>
 80027e4:	697b      	ldr	r3, [r7, #20]
}
 80027e6:	0018      	movs	r0, r3
 80027e8:	46bd      	mov	sp, r7
 80027ea:	b006      	add	sp, #24
 80027ec:	bd80      	pop	{r7, pc}

080027ee <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80027ee:	b580      	push	{r7, lr}
 80027f0:	b084      	sub	sp, #16
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
 80027f6:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80027f8:	2300      	movs	r3, #0
 80027fa:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80027fc:	2300      	movs	r3, #0
 80027fe:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <cJSON_strdup+0x1c>
    {
        return NULL;
 8002806:	2300      	movs	r3, #0
 8002808:	e019      	b.n	800283e <cJSON_strdup+0x50>
    }

    length = strlen((const char*)string) + sizeof("");
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	0018      	movs	r0, r3
 800280e:	f7fd fc7b 	bl	8000108 <strlen>
 8002812:	0003      	movs	r3, r0
 8002814:	3301      	adds	r3, #1
 8002816:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	68fa      	ldr	r2, [r7, #12]
 800281e:	0010      	movs	r0, r2
 8002820:	4798      	blx	r3
 8002822:	0003      	movs	r3, r0
 8002824:	60bb      	str	r3, [r7, #8]
    if (copy == NULL)
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	2b00      	cmp	r3, #0
 800282a:	d101      	bne.n	8002830 <cJSON_strdup+0x42>
    {
        return NULL;
 800282c:	2300      	movs	r3, #0
 800282e:	e006      	b.n	800283e <cJSON_strdup+0x50>
    }
    memcpy(copy, string, length);
 8002830:	68fa      	ldr	r2, [r7, #12]
 8002832:	6879      	ldr	r1, [r7, #4]
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	0018      	movs	r0, r3
 8002838:	f006 fd20 	bl	800927c <memcpy>

    return copy;
 800283c:	68bb      	ldr	r3, [r7, #8]
}
 800283e:	0018      	movs	r0, r3
 8002840:	46bd      	mov	sp, r7
 8002842:	b004      	add	sp, #16
 8002844:	bd80      	pop	{r7, pc}

08002846 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8002846:	b580      	push	{r7, lr}
 8002848:	b084      	sub	sp, #16
 800284a:	af00      	add	r7, sp, #0
 800284c:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	2028      	movs	r0, #40	; 0x28
 8002854:	4798      	blx	r3
 8002856:	0003      	movs	r3, r0
 8002858:	60fb      	str	r3, [r7, #12]
    if (node)
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	2b00      	cmp	r3, #0
 800285e:	d005      	beq.n	800286c <cJSON_New_Item+0x26>
    {
        memset(node, '\0', sizeof(cJSON));
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	2228      	movs	r2, #40	; 0x28
 8002864:	2100      	movs	r1, #0
 8002866:	0018      	movs	r0, r3
 8002868:	f006 fc86 	bl	8009178 <memset>
    }

    return node;
 800286c:	68fb      	ldr	r3, [r7, #12]
}
 800286e:	0018      	movs	r0, r3
 8002870:	46bd      	mov	sp, r7
 8002872:	b004      	add	sp, #16
 8002874:	bd80      	pop	{r7, pc}
	...

08002878 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8002878:	b580      	push	{r7, lr}
 800287a:	b084      	sub	sp, #16
 800287c:	af00      	add	r7, sp, #0
 800287e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8002880:	2300      	movs	r3, #0
 8002882:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8002884:	e038      	b.n	80028f8 <cJSON_Delete+0x80>
    {
        next = item->next;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	68da      	ldr	r2, [r3, #12]
 8002890:	2380      	movs	r3, #128	; 0x80
 8002892:	005b      	lsls	r3, r3, #1
 8002894:	4013      	ands	r3, r2
 8002896:	d108      	bne.n	80028aa <cJSON_Delete+0x32>
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d004      	beq.n	80028aa <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	0018      	movs	r0, r3
 80028a6:	f7ff ffe7 	bl	8002878 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	68da      	ldr	r2, [r3, #12]
 80028ae:	2380      	movs	r3, #128	; 0x80
 80028b0:	005b      	lsls	r3, r3, #1
 80028b2:	4013      	ands	r3, r2
 80028b4:	d109      	bne.n	80028ca <cJSON_Delete+0x52>
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	691b      	ldr	r3, [r3, #16]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d005      	beq.n	80028ca <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 80028be:	4b12      	ldr	r3, [pc, #72]	; (8002908 <cJSON_Delete+0x90>)
 80028c0:	685a      	ldr	r2, [r3, #4]
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	691b      	ldr	r3, [r3, #16]
 80028c6:	0018      	movs	r0, r3
 80028c8:	4790      	blx	r2
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	68da      	ldr	r2, [r3, #12]
 80028ce:	2380      	movs	r3, #128	; 0x80
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	4013      	ands	r3, r2
 80028d4:	d109      	bne.n	80028ea <cJSON_Delete+0x72>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6a1b      	ldr	r3, [r3, #32]
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d005      	beq.n	80028ea <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80028de:	4b0a      	ldr	r3, [pc, #40]	; (8002908 <cJSON_Delete+0x90>)
 80028e0:	685a      	ldr	r2, [r3, #4]
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	6a1b      	ldr	r3, [r3, #32]
 80028e6:	0018      	movs	r0, r3
 80028e8:	4790      	blx	r2
        }
        global_hooks.deallocate(item);
 80028ea:	4b07      	ldr	r3, [pc, #28]	; (8002908 <cJSON_Delete+0x90>)
 80028ec:	685b      	ldr	r3, [r3, #4]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	0010      	movs	r0, r2
 80028f2:	4798      	blx	r3
        item = next;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d1c3      	bne.n	8002886 <cJSON_Delete+0xe>
    }
}
 80028fe:	46c0      	nop			; (mov r8, r8)
 8002900:	46c0      	nop			; (mov r8, r8)
 8002902:	46bd      	mov	sp, r7
 8002904:	b004      	add	sp, #16
 8002906:	bd80      	pop	{r7, pc}
 8002908:	20000000 	.word	0x20000000

0800290c <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 800290c:	b580      	push	{r7, lr}
 800290e:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 8002910:	232e      	movs	r3, #46	; 0x2e
#endif
}
 8002912:	0018      	movs	r0, r3
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}

08002918 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 8002922:	2300      	movs	r3, #0
 8002924:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2b00      	cmp	r3, #0
 800292e:	d003      	beq.n	8002938 <ensure+0x20>
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	2b00      	cmp	r3, #0
 8002936:	d101      	bne.n	800293c <ensure+0x24>
    {
        return NULL;
 8002938:	2300      	movs	r3, #0
 800293a:	e086      	b.n	8002a4a <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	685b      	ldr	r3, [r3, #4]
 8002940:	2b00      	cmp	r3, #0
 8002942:	d007      	beq.n	8002954 <ensure+0x3c>
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	685b      	ldr	r3, [r3, #4]
 800294c:	429a      	cmp	r2, r3
 800294e:	d301      	bcc.n	8002954 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8002950:	2300      	movs	r3, #0
 8002952:	e07a      	b.n	8002a4a <ensure+0x132>
    }

    if (needed > INT_MAX)
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	2b00      	cmp	r3, #0
 8002958:	da01      	bge.n	800295e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800295a:	2300      	movs	r3, #0
 800295c:	e075      	b.n	8002a4a <ensure+0x132>
    }

    needed += p->offset + 1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	18d3      	adds	r3, r2, r3
 8002966:	3301      	adds	r3, #1
 8002968:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	683a      	ldr	r2, [r7, #0]
 8002970:	429a      	cmp	r2, r3
 8002972:	d805      	bhi.n	8002980 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	18d3      	adds	r3, r2, r3
 800297e:	e064      	b.n	8002a4a <ensure+0x132>
    }

    if (p->noalloc) {
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	691b      	ldr	r3, [r3, #16]
 8002984:	2b00      	cmp	r3, #0
 8002986:	d001      	beq.n	800298c <ensure+0x74>
        return NULL;
 8002988:	2300      	movs	r3, #0
 800298a:	e05e      	b.n	8002a4a <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800298c:	683a      	ldr	r2, [r7, #0]
 800298e:	2380      	movs	r3, #128	; 0x80
 8002990:	05db      	lsls	r3, r3, #23
 8002992:	429a      	cmp	r2, r3
 8002994:	d307      	bcc.n	80029a6 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	2b00      	cmp	r3, #0
 800299a:	db02      	blt.n	80029a2 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800299c:	4b2d      	ldr	r3, [pc, #180]	; (8002a54 <ensure+0x13c>)
 800299e:	60bb      	str	r3, [r7, #8]
 80029a0:	e004      	b.n	80029ac <ensure+0x94>
        }
        else
        {
            return NULL;
 80029a2:	2300      	movs	r3, #0
 80029a4:	e051      	b.n	8002a4a <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	005b      	lsls	r3, r3, #1
 80029aa:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6a1b      	ldr	r3, [r3, #32]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d019      	beq.n	80029e8 <ensure+0xd0>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a1a      	ldr	r2, [r3, #32]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	68b9      	ldr	r1, [r7, #8]
 80029be:	0018      	movs	r0, r3
 80029c0:	4790      	blx	r2
 80029c2:	0003      	movs	r3, r0
 80029c4:	60fb      	str	r3, [r7, #12]
        if (newbuffer == NULL)
 80029c6:	68fb      	ldr	r3, [r7, #12]
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d134      	bne.n	8002a36 <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	69da      	ldr	r2, [r3, #28]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	0018      	movs	r0, r3
 80029d6:	4790      	blx	r2
            p->length = 0;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2200      	movs	r2, #0
 80029dc:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	601a      	str	r2, [r3, #0]

            return NULL;
 80029e4:	2300      	movs	r3, #0
 80029e6:	e030      	b.n	8002a4a <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	699b      	ldr	r3, [r3, #24]
 80029ec:	68ba      	ldr	r2, [r7, #8]
 80029ee:	0010      	movs	r0, r2
 80029f0:	4798      	blx	r3
 80029f2:	0003      	movs	r3, r0
 80029f4:	60fb      	str	r3, [r7, #12]
        if (!newbuffer)
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10d      	bne.n	8002a18 <ensure+0x100>
        {
            p->hooks.deallocate(p->buffer);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	69da      	ldr	r2, [r3, #28]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	0018      	movs	r0, r3
 8002a06:	4790      	blx	r2
            p->length = 0;
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2200      	movs	r2, #0
 8002a0c:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	601a      	str	r2, [r3, #0]

            return NULL;
 8002a14:	2300      	movs	r3, #0
 8002a16:	e018      	b.n	8002a4a <ensure+0x132>
        }
        
        memcpy(newbuffer, p->buffer, p->offset + 1);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6819      	ldr	r1, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	689b      	ldr	r3, [r3, #8]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	0018      	movs	r0, r3
 8002a26:	f006 fc29 	bl	800927c <memcpy>
        p->hooks.deallocate(p->buffer);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	69da      	ldr	r2, [r3, #28]
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	0018      	movs	r0, r3
 8002a34:	4790      	blx	r2
    }
    p->length = newsize;
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	68ba      	ldr	r2, [r7, #8]
 8002a3a:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	689b      	ldr	r3, [r3, #8]
 8002a46:	68fa      	ldr	r2, [r7, #12]
 8002a48:	18d3      	adds	r3, r2, r3
}
 8002a4a:	0018      	movs	r0, r3
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	b004      	add	sp, #16
 8002a50:	bd80      	pop	{r7, pc}
 8002a52:	46c0      	nop			; (mov r8, r8)
 8002a54:	7fffffff 	.word	0x7fffffff

08002a58 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8002a58:	b590      	push	{r4, r7, lr}
 8002a5a:	b085      	sub	sp, #20
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d014      	beq.n	8002a94 <update_offset+0x3c>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d010      	beq.n	8002a94 <update_offset+0x3c>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681a      	ldr	r2, [r3, #0]
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	689b      	ldr	r3, [r3, #8]
 8002a7a:	18d3      	adds	r3, r2, r3
 8002a7c:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	689c      	ldr	r4, [r3, #8]
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	0018      	movs	r0, r3
 8002a86:	f7fd fb3f 	bl	8000108 <strlen>
 8002a8a:	0003      	movs	r3, r0
 8002a8c:	18e2      	adds	r2, r4, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	609a      	str	r2, [r3, #8]
 8002a92:	e000      	b.n	8002a96 <update_offset+0x3e>
        return;
 8002a94:	46c0      	nop			; (mov r8, r8)
}
 8002a96:	46bd      	mov	sp, r7
 8002a98:	b005      	add	sp, #20
 8002a9a:	bd90      	pop	{r4, r7, pc}

08002a9c <reverse>:
{
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
}
void reverse(char* str, int len)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b086      	sub	sp, #24
 8002aa0:	af00      	add	r7, sp, #0
 8002aa2:	6078      	str	r0, [r7, #4]
 8002aa4:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8002aa6:	2300      	movs	r3, #0
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	3b01      	subs	r3, #1
 8002aae:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002ab0:	e018      	b.n	8002ae4 <reverse+0x48>
        temp = str[i];
 8002ab2:	697b      	ldr	r3, [r7, #20]
 8002ab4:	687a      	ldr	r2, [r7, #4]
 8002ab6:	18d3      	adds	r3, r2, r3
 8002ab8:	781b      	ldrb	r3, [r3, #0]
 8002aba:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8002abc:	693b      	ldr	r3, [r7, #16]
 8002abe:	687a      	ldr	r2, [r7, #4]
 8002ac0:	18d2      	adds	r2, r2, r3
 8002ac2:	697b      	ldr	r3, [r7, #20]
 8002ac4:	6879      	ldr	r1, [r7, #4]
 8002ac6:	18cb      	adds	r3, r1, r3
 8002ac8:	7812      	ldrb	r2, [r2, #0]
 8002aca:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	687a      	ldr	r2, [r7, #4]
 8002ad0:	18d3      	adds	r3, r2, r3
 8002ad2:	68fa      	ldr	r2, [r7, #12]
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	701a      	strb	r2, [r3, #0]
        i++;
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	3301      	adds	r3, #1
 8002adc:	617b      	str	r3, [r7, #20]
        j--;
 8002ade:	693b      	ldr	r3, [r7, #16]
 8002ae0:	3b01      	subs	r3, #1
 8002ae2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8002ae4:	697a      	ldr	r2, [r7, #20]
 8002ae6:	693b      	ldr	r3, [r7, #16]
 8002ae8:	429a      	cmp	r2, r3
 8002aea:	dbe2      	blt.n	8002ab2 <reverse+0x16>
    }
}
 8002aec:	46c0      	nop			; (mov r8, r8)
 8002aee:	46c0      	nop			; (mov r8, r8)
 8002af0:	46bd      	mov	sp, r7
 8002af2:	b006      	add	sp, #24
 8002af4:	bd80      	pop	{r7, pc}

08002af6 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(uint64_t x, char str[], int d)
{
 8002af6:	b580      	push	{r7, lr}
 8002af8:	b086      	sub	sp, #24
 8002afa:	af00      	add	r7, sp, #0
 8002afc:	60b8      	str	r0, [r7, #8]
 8002afe:	60f9      	str	r1, [r7, #12]
 8002b00:	607a      	str	r2, [r7, #4]
 8002b02:	603b      	str	r3, [r7, #0]
    int i = 0;
 8002b04:	2300      	movs	r3, #0
 8002b06:	617b      	str	r3, [r7, #20]
    while (x) {
 8002b08:	e019      	b.n	8002b3e <intToStr+0x48>
        str[i++] = (x % 10) + '0';
 8002b0a:	68b8      	ldr	r0, [r7, #8]
 8002b0c:	68f9      	ldr	r1, [r7, #12]
 8002b0e:	220a      	movs	r2, #10
 8002b10:	2300      	movs	r3, #0
 8002b12:	f7fd fcbf 	bl	8000494 <__aeabi_uldivmod>
 8002b16:	b2d2      	uxtb	r2, r2
 8002b18:	697b      	ldr	r3, [r7, #20]
 8002b1a:	1c59      	adds	r1, r3, #1
 8002b1c:	6179      	str	r1, [r7, #20]
 8002b1e:	0019      	movs	r1, r3
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	185b      	adds	r3, r3, r1
 8002b24:	3230      	adds	r2, #48	; 0x30
 8002b26:	b2d2      	uxtb	r2, r2
 8002b28:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 8002b2a:	68b8      	ldr	r0, [r7, #8]
 8002b2c:	68f9      	ldr	r1, [r7, #12]
 8002b2e:	220a      	movs	r2, #10
 8002b30:	2300      	movs	r3, #0
 8002b32:	f7fd fcaf 	bl	8000494 <__aeabi_uldivmod>
 8002b36:	0002      	movs	r2, r0
 8002b38:	000b      	movs	r3, r1
 8002b3a:	60ba      	str	r2, [r7, #8]
 8002b3c:	60fb      	str	r3, [r7, #12]
    while (x) {
 8002b3e:	68bb      	ldr	r3, [r7, #8]
 8002b40:	68fa      	ldr	r2, [r7, #12]
 8002b42:	4313      	orrs	r3, r2
 8002b44:	d1e1      	bne.n	8002b0a <intToStr+0x14>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8002b46:	e007      	b.n	8002b58 <intToStr+0x62>
        str[i++] = '0';
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	1c5a      	adds	r2, r3, #1
 8002b4c:	617a      	str	r2, [r7, #20]
 8002b4e:	001a      	movs	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	189b      	adds	r3, r3, r2
 8002b54:	2230      	movs	r2, #48	; 0x30
 8002b56:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8002b58:	697a      	ldr	r2, [r7, #20]
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	429a      	cmp	r2, r3
 8002b5e:	dbf3      	blt.n	8002b48 <intToStr+0x52>

    reverse(str, i);
 8002b60:	697a      	ldr	r2, [r7, #20]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	0011      	movs	r1, r2
 8002b66:	0018      	movs	r0, r3
 8002b68:	f7ff ff98 	bl	8002a9c <reverse>
    str[i] = '\0';
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	18d3      	adds	r3, r2, r3
 8002b72:	2200      	movs	r2, #0
 8002b74:	701a      	strb	r2, [r3, #0]
    return i;
 8002b76:	697b      	ldr	r3, [r7, #20]
}
 8002b78:	0018      	movs	r0, r3
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	b006      	add	sp, #24
 8002b7e:	bd80      	pop	{r7, pc}

08002b80 <Shift_array_byPosition>:
void Shift_array_byPosition(char str[], int length){ //1.4.3
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
 8002b88:	6039      	str	r1, [r7, #0]

  while(length != 0){
 8002b8a:	e00b      	b.n	8002ba4 <Shift_array_byPosition+0x24>
	  str[length+1] = str[length];
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	687a      	ldr	r2, [r7, #4]
 8002b90:	18d2      	adds	r2, r2, r3
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	3301      	adds	r3, #1
 8002b96:	6879      	ldr	r1, [r7, #4]
 8002b98:	18cb      	adds	r3, r1, r3
 8002b9a:	7812      	ldrb	r2, [r2, #0]
 8002b9c:	701a      	strb	r2, [r3, #0]
	  length--;
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	603b      	str	r3, [r7, #0]
  while(length != 0){
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d1f0      	bne.n	8002b8c <Shift_array_byPosition+0xc>
  }
  str[length+1] = str[length];
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	687a      	ldr	r2, [r7, #4]
 8002bae:	18d2      	adds	r2, r2, r3
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	3301      	adds	r3, #1
 8002bb4:	6879      	ldr	r1, [r7, #4]
 8002bb6:	18cb      	adds	r3, r1, r3
 8002bb8:	7812      	ldrb	r2, [r2, #0]
 8002bba:	701a      	strb	r2, [r3, #0]
}
 8002bbc:	46c0      	nop			; (mov r8, r8)
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	b002      	add	sp, #8
 8002bc2:	bd80      	pop	{r7, pc}

08002bc4 <print_number>:
        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}
/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8002bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bc6:	b097      	sub	sp, #92	; 0x5c
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6178      	str	r0, [r7, #20]
 8002bcc:	6139      	str	r1, [r7, #16]
    unsigned char *output_pointer = NULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	64fb      	str	r3, [r7, #76]	; 0x4c
    double d = item->valuedouble;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	699a      	ldr	r2, [r3, #24]
 8002bd6:	69db      	ldr	r3, [r3, #28]
 8002bd8:	643a      	str	r2, [r7, #64]	; 0x40
 8002bda:	647b      	str	r3, [r7, #68]	; 0x44
    uint64_t longInt_d=d;
 8002bdc:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002bde:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002be0:	f7fd fc96 	bl	8000510 <__aeabi_d2ulz>
 8002be4:	0002      	movs	r2, r0
 8002be6:	000b      	movs	r3, r1
 8002be8:	63ba      	str	r2, [r7, #56]	; 0x38
 8002bea:	63fb      	str	r3, [r7, #60]	; 0x3c
    int length = 0;
 8002bec:	2300      	movs	r3, #0
 8002bee:	657b      	str	r3, [r7, #84]	; 0x54
    size_t i = 0;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	653b      	str	r3, [r7, #80]	; 0x50
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 8002bf4:	230c      	movs	r3, #12
 8002bf6:	2610      	movs	r6, #16
 8002bf8:	199b      	adds	r3, r3, r6
 8002bfa:	19db      	adds	r3, r3, r7
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	601a      	str	r2, [r3, #0]
 8002c00:	3304      	adds	r3, #4
 8002c02:	2216      	movs	r2, #22
 8002c04:	2100      	movs	r1, #0
 8002c06:	0018      	movs	r0, r3
 8002c08:	f006 fab6 	bl	8009178 <memset>
    unsigned char decimal_point = get_decimal_point();
 8002c0c:	2327      	movs	r3, #39	; 0x27
 8002c0e:	199b      	adds	r3, r3, r6
 8002c10:	19de      	adds	r6, r3, r7
 8002c12:	f7ff fe7b 	bl	800290c <get_decimal_point>
 8002c16:	0003      	movs	r3, r0
 8002c18:	7033      	strb	r3, [r6, #0]

    if (output_buffer == NULL)
 8002c1a:	693b      	ldr	r3, [r7, #16]
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d101      	bne.n	8002c24 <print_number+0x60>
    {
        return false;
 8002c20:	2300      	movs	r3, #0
 8002c22:	e144      	b.n	8002eae <print_number+0x2ea>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 8002c24:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002c26:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c28:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c2a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c2c:	f7ff f820 	bl	8001c70 <__aeabi_dcmpun>
 8002c30:	1e03      	subs	r3, r0, #0
 8002c32:	d120      	bne.n	8002c76 <print_number+0xb2>
 8002c34:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c36:	001c      	movs	r4, r3
 8002c38:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	085d      	lsrs	r5, r3, #1
 8002c3e:	2301      	movs	r3, #1
 8002c40:	1c1e      	adds	r6, r3, #0
 8002c42:	2201      	movs	r2, #1
 8002c44:	4252      	negs	r2, r2
 8002c46:	4b9c      	ldr	r3, [pc, #624]	; (8002eb8 <print_number+0x2f4>)
 8002c48:	0020      	movs	r0, r4
 8002c4a:	0029      	movs	r1, r5
 8002c4c:	f7ff f810 	bl	8001c70 <__aeabi_dcmpun>
 8002c50:	1e03      	subs	r3, r0, #0
 8002c52:	d10a      	bne.n	8002c6a <print_number+0xa6>
 8002c54:	2201      	movs	r2, #1
 8002c56:	4252      	negs	r2, r2
 8002c58:	4b97      	ldr	r3, [pc, #604]	; (8002eb8 <print_number+0x2f4>)
 8002c5a:	0020      	movs	r0, r4
 8002c5c:	0029      	movs	r1, r5
 8002c5e:	f7fd fbfb 	bl	8000458 <__aeabi_dcmple>
 8002c62:	1e03      	subs	r3, r0, #0
 8002c64:	d101      	bne.n	8002c6a <print_number+0xa6>
 8002c66:	2300      	movs	r3, #0
 8002c68:	1c1e      	adds	r6, r3, #0
 8002c6a:	b2f3      	uxtb	r3, r6
 8002c6c:	2201      	movs	r2, #1
 8002c6e:	4053      	eors	r3, r2
 8002c70:	b2db      	uxtb	r3, r3
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d00b      	beq.n	8002c8e <print_number+0xca>
    {
        length = sprintf((char*)number_buffer, "null");
 8002c76:	4a91      	ldr	r2, [pc, #580]	; (8002ebc <print_number+0x2f8>)
 8002c78:	230c      	movs	r3, #12
 8002c7a:	2110      	movs	r1, #16
 8002c7c:	185b      	adds	r3, r3, r1
 8002c7e:	19db      	adds	r3, r3, r7
 8002c80:	0011      	movs	r1, r2
 8002c82:	0018      	movs	r0, r3
 8002c84:	f006 fa58 	bl	8009138 <siprintf>
 8002c88:	0003      	movs	r3, r0
 8002c8a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c8c:	e0c5      	b.n	8002e1a <print_number+0x256>
//        	ftoa_new(d, number_buffer,3);
//    	}
//    	length=strlen(number_buffer);


		if(d==0)
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2300      	movs	r3, #0
 8002c92:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002c94:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002c96:	f7fd fbcf 	bl	8000438 <__aeabi_dcmpeq>
 8002c9a:	1e03      	subs	r3, r0, #0
 8002c9c:	d006      	beq.n	8002cac <print_number+0xe8>
		{
			number_buffer[0]='0';
 8002c9e:	230c      	movs	r3, #12
 8002ca0:	2210      	movs	r2, #16
 8002ca2:	189b      	adds	r3, r3, r2
 8002ca4:	19db      	adds	r3, r3, r7
 8002ca6:	2230      	movs	r2, #48	; 0x30
 8002ca8:	701a      	strb	r2, [r3, #0]
 8002caa:	e0ad      	b.n	8002e08 <print_number+0x244>
		}
		else if((longInt_d-d)==0)
 8002cac:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cb0:	f7fd fc4c 	bl	800054c <__aeabi_ul2d>
 8002cb4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002cb6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cb8:	f7fe fc58 	bl	800156c <__aeabi_dsub>
 8002cbc:	0002      	movs	r2, r0
 8002cbe:	000b      	movs	r3, r1
 8002cc0:	0010      	movs	r0, r2
 8002cc2:	0019      	movs	r1, r3
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	f7fd fbb6 	bl	8000438 <__aeabi_dcmpeq>
 8002ccc:	1e03      	subs	r3, r0, #0
 8002cce:	d009      	beq.n	8002ce4 <print_number+0x120>
		{
			intToStr((uint64_t)longInt_d, (char*)number_buffer, 0);
 8002cd0:	230c      	movs	r3, #12
 8002cd2:	2210      	movs	r2, #16
 8002cd4:	189b      	adds	r3, r3, r2
 8002cd6:	19da      	adds	r2, r3, r7
 8002cd8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cda:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002cdc:	2300      	movs	r3, #0
 8002cde:	f7ff ff0a 	bl	8002af6 <intToStr>
 8002ce2:	e091      	b.n	8002e08 <print_number+0x244>
		}
		else if (d < 0)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	2300      	movs	r3, #0
 8002ce8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002cea:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002cec:	f7fd fbaa 	bl	8000444 <__aeabi_dcmplt>
 8002cf0:	1e03      	subs	r3, r0, #0
 8002cf2:	d06a      	beq.n	8002dca <print_number+0x206>
		{
			d = d * (-1);
 8002cf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002cf6:	60bb      	str	r3, [r7, #8]
 8002cf8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002cfa:	2280      	movs	r2, #128	; 0x80
 8002cfc:	0612      	lsls	r2, r2, #24
 8002cfe:	405a      	eors	r2, r3
 8002d00:	60fa      	str	r2, [r7, #12]
 8002d02:	68bb      	ldr	r3, [r7, #8]
 8002d04:	68fc      	ldr	r4, [r7, #12]
 8002d06:	643b      	str	r3, [r7, #64]	; 0x40
 8002d08:	647c      	str	r4, [r7, #68]	; 0x44
			longInt_d = d;
 8002d0a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d0c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d0e:	f7fd fbff 	bl	8000510 <__aeabi_d2ulz>
 8002d12:	0002      	movs	r2, r0
 8002d14:	000b      	movs	r3, r1
 8002d16:	63ba      	str	r2, [r7, #56]	; 0x38
 8002d18:	63fb      	str	r3, [r7, #60]	; 0x3c
			if((longInt_d-d)==0)
 8002d1a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d1c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d1e:	f7fd fc15 	bl	800054c <__aeabi_ul2d>
 8002d22:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d24:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d26:	f7fe fc21 	bl	800156c <__aeabi_dsub>
 8002d2a:	0002      	movs	r2, r0
 8002d2c:	000b      	movs	r3, r1
 8002d2e:	0010      	movs	r0, r2
 8002d30:	0019      	movs	r1, r3
 8002d32:	2200      	movs	r2, #0
 8002d34:	2300      	movs	r3, #0
 8002d36:	f7fd fb7f 	bl	8000438 <__aeabi_dcmpeq>
 8002d3a:	1e03      	subs	r3, r0, #0
 8002d3c:	d01a      	beq.n	8002d74 <print_number+0x1b0>
			{
				intToStr((uint64_t)longInt_d,(char*)number_buffer, 0);
 8002d3e:	240c      	movs	r4, #12
 8002d40:	2510      	movs	r5, #16
 8002d42:	1963      	adds	r3, r4, r5
 8002d44:	19da      	adds	r2, r3, r7
 8002d46:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002d48:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	f7ff fed3 	bl	8002af6 <intToStr>
				Shift_array_byPosition((char*)number_buffer,strlen((const char *)number_buffer));
 8002d50:	1963      	adds	r3, r4, r5
 8002d52:	19db      	adds	r3, r3, r7
 8002d54:	0018      	movs	r0, r3
 8002d56:	f7fd f9d7 	bl	8000108 <strlen>
 8002d5a:	0003      	movs	r3, r0
 8002d5c:	001a      	movs	r2, r3
 8002d5e:	1963      	adds	r3, r4, r5
 8002d60:	19db      	adds	r3, r3, r7
 8002d62:	0011      	movs	r1, r2
 8002d64:	0018      	movs	r0, r3
 8002d66:	f7ff ff0b 	bl	8002b80 <Shift_array_byPosition>
				number_buffer[0]='-';
 8002d6a:	1963      	adds	r3, r4, r5
 8002d6c:	19db      	adds	r3, r3, r7
 8002d6e:	222d      	movs	r2, #45	; 0x2d
 8002d70:	701a      	strb	r2, [r3, #0]
 8002d72:	e049      	b.n	8002e08 <print_number+0x244>
			}
			else
			{
				d = d * (-1);
 8002d74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002d76:	603b      	str	r3, [r7, #0]
 8002d78:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d7a:	2280      	movs	r2, #128	; 0x80
 8002d7c:	0612      	lsls	r2, r2, #24
 8002d7e:	405a      	eors	r2, r3
 8002d80:	607a      	str	r2, [r7, #4]
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	687c      	ldr	r4, [r7, #4]
 8002d86:	643b      	str	r3, [r7, #64]	; 0x40
 8002d88:	647c      	str	r4, [r7, #68]	; 0x44
				if(d > 0x7FFFFFFFFFFFFFFF) // for convert Exponent format  || ticket : https://cimcondigital.atlassian.net/browse/IRTU6000PP-35
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	4b4c      	ldr	r3, [pc, #304]	; (8002ec0 <print_number+0x2fc>)
 8002d8e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002d90:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002d92:	f7fd fb6b 	bl	800046c <__aeabi_dcmpgt>
 8002d96:	1e03      	subs	r3, r0, #0
 8002d98:	d00b      	beq.n	8002db2 <print_number+0x1ee>
				{
					length = sprintf((char*)number_buffer, "%2.3f", d);
 8002d9a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002d9c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002d9e:	4949      	ldr	r1, [pc, #292]	; (8002ec4 <print_number+0x300>)
 8002da0:	200c      	movs	r0, #12
 8002da2:	2410      	movs	r4, #16
 8002da4:	1900      	adds	r0, r0, r4
 8002da6:	19c0      	adds	r0, r0, r7
 8002da8:	f006 f9c6 	bl	8009138 <siprintf>
 8002dac:	0003      	movs	r3, r0
 8002dae:	657b      	str	r3, [r7, #84]	; 0x54
 8002db0:	e02a      	b.n	8002e08 <print_number+0x244>
				}
				else
				{
					length = sprintf((char*)number_buffer, "%e", d);
 8002db2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002db6:	4944      	ldr	r1, [pc, #272]	; (8002ec8 <print_number+0x304>)
 8002db8:	200c      	movs	r0, #12
 8002dba:	2410      	movs	r4, #16
 8002dbc:	1900      	adds	r0, r0, r4
 8002dbe:	19c0      	adds	r0, r0, r7
 8002dc0:	f006 f9ba 	bl	8009138 <siprintf>
 8002dc4:	0003      	movs	r3, r0
 8002dc6:	657b      	str	r3, [r7, #84]	; 0x54
 8002dc8:	e01e      	b.n	8002e08 <print_number+0x244>
				//number_buffer[0]='-';
			}
		}
		else
		{
			if(d < 0x7FFFFFFFFFFFFFFF) // for convert Exponent format  || ticket : https://cimcondigital.atlassian.net/browse/IRTU6000PP-35
 8002dca:	2200      	movs	r2, #0
 8002dcc:	4b3c      	ldr	r3, [pc, #240]	; (8002ec0 <print_number+0x2fc>)
 8002dce:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8002dd0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002dd2:	f7fd fb37 	bl	8000444 <__aeabi_dcmplt>
 8002dd6:	1e03      	subs	r3, r0, #0
 8002dd8:	d00b      	beq.n	8002df2 <print_number+0x22e>
			{
				length = sprintf((char*)number_buffer, "%2.3f", d);
 8002dda:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002ddc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002dde:	4939      	ldr	r1, [pc, #228]	; (8002ec4 <print_number+0x300>)
 8002de0:	200c      	movs	r0, #12
 8002de2:	2410      	movs	r4, #16
 8002de4:	1900      	adds	r0, r0, r4
 8002de6:	19c0      	adds	r0, r0, r7
 8002de8:	f006 f9a6 	bl	8009138 <siprintf>
 8002dec:	0003      	movs	r3, r0
 8002dee:	657b      	str	r3, [r7, #84]	; 0x54
 8002df0:	e00a      	b.n	8002e08 <print_number+0x244>
			}
			else
			{
				length = sprintf((char*)number_buffer, "%e", d);  // for convert to Exponential foam
 8002df2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002df4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002df6:	4934      	ldr	r1, [pc, #208]	; (8002ec8 <print_number+0x304>)
 8002df8:	200c      	movs	r0, #12
 8002dfa:	2410      	movs	r4, #16
 8002dfc:	1900      	adds	r0, r0, r4
 8002dfe:	19c0      	adds	r0, r0, r7
 8002e00:	f006 f99a 	bl	8009138 <siprintf>
 8002e04:	0003      	movs	r3, r0
 8002e06:	657b      	str	r3, [r7, #84]	; 0x54
			}
			//ftoa_new(d, number_buffer,3);
		}
		length=strlen((const char *)number_buffer);
 8002e08:	230c      	movs	r3, #12
 8002e0a:	2210      	movs	r2, #16
 8002e0c:	189b      	adds	r3, r3, r2
 8002e0e:	19db      	adds	r3, r3, r7
 8002e10:	0018      	movs	r0, r3
 8002e12:	f7fd f979 	bl	8000108 <strlen>
 8002e16:	0003      	movs	r3, r0
 8002e18:	657b      	str	r3, [r7, #84]	; 0x54
//            length = sprintf((char*)number_buffer, "%lf", d);
//        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8002e1a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	db02      	blt.n	8002e26 <print_number+0x262>
 8002e20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e22:	2b19      	cmp	r3, #25
 8002e24:	dd01      	ble.n	8002e2a <print_number+0x266>
    {
        return false;
 8002e26:	2300      	movs	r3, #0
 8002e28:	e041      	b.n	8002eae <print_number+0x2ea>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8002e2a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e2c:	1c5a      	adds	r2, r3, #1
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	0011      	movs	r1, r2
 8002e32:	0018      	movs	r0, r3
 8002e34:	f7ff fd70 	bl	8002918 <ensure>
 8002e38:	0003      	movs	r3, r0
 8002e3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (output_pointer == NULL)
 8002e3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d101      	bne.n	8002e46 <print_number+0x282>
    {
        return false;
 8002e42:	2300      	movs	r3, #0
 8002e44:	e033      	b.n	8002eae <print_number+0x2ea>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8002e46:	2300      	movs	r3, #0
 8002e48:	653b      	str	r3, [r7, #80]	; 0x50
 8002e4a:	e020      	b.n	8002e8e <print_number+0x2ca>
    {
        if (number_buffer[i] == decimal_point)
 8002e4c:	230c      	movs	r3, #12
 8002e4e:	2110      	movs	r1, #16
 8002e50:	185b      	adds	r3, r3, r1
 8002e52:	19da      	adds	r2, r3, r7
 8002e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e56:	18d3      	adds	r3, r2, r3
 8002e58:	781b      	ldrb	r3, [r3, #0]
 8002e5a:	2227      	movs	r2, #39	; 0x27
 8002e5c:	1852      	adds	r2, r2, r1
 8002e5e:	19d2      	adds	r2, r2, r7
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	429a      	cmp	r2, r3
 8002e64:	d105      	bne.n	8002e72 <print_number+0x2ae>
        {
            output_pointer[i] = '.';
 8002e66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e6a:	18d3      	adds	r3, r2, r3
 8002e6c:	222e      	movs	r2, #46	; 0x2e
 8002e6e:	701a      	strb	r2, [r3, #0]
            continue;
 8002e70:	e00a      	b.n	8002e88 <print_number+0x2c4>
        }

        output_pointer[i] = number_buffer[i];
 8002e72:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e74:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e76:	18d3      	adds	r3, r2, r3
 8002e78:	220c      	movs	r2, #12
 8002e7a:	2110      	movs	r1, #16
 8002e7c:	1852      	adds	r2, r2, r1
 8002e7e:	19d1      	adds	r1, r2, r7
 8002e80:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e82:	188a      	adds	r2, r1, r2
 8002e84:	7812      	ldrb	r2, [r2, #0]
 8002e86:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8002e88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e8a:	3301      	adds	r3, #1
 8002e8c:	653b      	str	r3, [r7, #80]	; 0x50
 8002e8e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002e90:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8002e92:	429a      	cmp	r2, r3
 8002e94:	d3da      	bcc.n	8002e4c <print_number+0x288>
    }
    output_pointer[i] = '\0';
 8002e96:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002e98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002e9a:	18d3      	adds	r3, r2, r3
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8002ea0:	693b      	ldr	r3, [r7, #16]
 8002ea2:	689a      	ldr	r2, [r3, #8]
 8002ea4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ea6:	18d2      	adds	r2, r2, r3
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	609a      	str	r2, [r3, #8]

    return true;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	0018      	movs	r0, r3
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	b017      	add	sp, #92	; 0x5c
 8002eb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb6:	46c0      	nop			; (mov r8, r8)
 8002eb8:	7fefffff 	.word	0x7fefffff
 8002ebc:	08009ce0 	.word	0x08009ce0
 8002ec0:	43e00000 	.word	0x43e00000
 8002ec4:	08009ce8 	.word	0x08009ce8
 8002ec8:	08009cf0 	.word	0x08009cf0

08002ecc <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b088      	sub	sp, #32
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
 8002ed4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8002eda:	2300      	movs	r3, #0
 8002edc:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	2b00      	cmp	r3, #0
 8002eee:	d101      	bne.n	8002ef4 <print_string_ptr+0x28>
    {
        return false;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	e0e0      	b.n	80030b6 <print_string_ptr+0x1ea>
    }

    /* empty string */
    if (input == NULL)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d115      	bne.n	8002f26 <print_string_ptr+0x5a>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	2103      	movs	r1, #3
 8002efe:	0018      	movs	r0, r3
 8002f00:	f7ff fd0a 	bl	8002918 <ensure>
 8002f04:	0003      	movs	r3, r0
 8002f06:	613b      	str	r3, [r7, #16]
        if (output == NULL)
 8002f08:	693b      	ldr	r3, [r7, #16]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <print_string_ptr+0x46>
        {
            return false;
 8002f0e:	2300      	movs	r3, #0
 8002f10:	e0d1      	b.n	80030b6 <print_string_ptr+0x1ea>
        }
        strcpy((char*)output, "\"\"");
 8002f12:	693a      	ldr	r2, [r7, #16]
 8002f14:	4b6a      	ldr	r3, [pc, #424]	; (80030c0 <print_string_ptr+0x1f4>)
 8002f16:	0010      	movs	r0, r2
 8002f18:	0019      	movs	r1, r3
 8002f1a:	2303      	movs	r3, #3
 8002f1c:	001a      	movs	r2, r3
 8002f1e:	f006 f9ad 	bl	800927c <memcpy>

        return true;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e0c7      	b.n	80030b6 <print_string_ptr+0x1ea>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	61fb      	str	r3, [r7, #28]
 8002f2a:	e022      	b.n	8002f72 <print_string_ptr+0xa6>
    {
        switch (*input_pointer)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	2b22      	cmp	r3, #34	; 0x22
 8002f32:	dc0d      	bgt.n	8002f50 <print_string_ptr+0x84>
 8002f34:	2b08      	cmp	r3, #8
 8002f36:	db11      	blt.n	8002f5c <print_string_ptr+0x90>
 8002f38:	3b08      	subs	r3, #8
 8002f3a:	4a62      	ldr	r2, [pc, #392]	; (80030c4 <print_string_ptr+0x1f8>)
 8002f3c:	40da      	lsrs	r2, r3
 8002f3e:	0013      	movs	r3, r2
 8002f40:	2201      	movs	r2, #1
 8002f42:	4013      	ands	r3, r2
 8002f44:	1e5a      	subs	r2, r3, #1
 8002f46:	4193      	sbcs	r3, r2
 8002f48:	b2db      	uxtb	r3, r3
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d102      	bne.n	8002f54 <print_string_ptr+0x88>
 8002f4e:	e005      	b.n	8002f5c <print_string_ptr+0x90>
 8002f50:	2b5c      	cmp	r3, #92	; 0x5c
 8002f52:	d103      	bne.n	8002f5c <print_string_ptr+0x90>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8002f54:	697b      	ldr	r3, [r7, #20]
 8002f56:	3301      	adds	r3, #1
 8002f58:	617b      	str	r3, [r7, #20]
                break;
 8002f5a:	e007      	b.n	8002f6c <print_string_ptr+0xa0>
            default:
                if (*input_pointer < 32)
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	2b1f      	cmp	r3, #31
 8002f62:	d802      	bhi.n	8002f6a <print_string_ptr+0x9e>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8002f64:	697b      	ldr	r3, [r7, #20]
 8002f66:	3305      	adds	r3, #5
 8002f68:	617b      	str	r3, [r7, #20]
                }
                break;
 8002f6a:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer; input_pointer++)
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	3301      	adds	r3, #1
 8002f70:	61fb      	str	r3, [r7, #28]
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	781b      	ldrb	r3, [r3, #0]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d1d8      	bne.n	8002f2c <print_string_ptr+0x60>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8002f7a:	69fa      	ldr	r2, [r7, #28]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	001a      	movs	r2, r3
 8002f82:	697b      	ldr	r3, [r7, #20]
 8002f84:	189b      	adds	r3, r3, r2
 8002f86:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	1cda      	adds	r2, r3, #3
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	0011      	movs	r1, r2
 8002f90:	0018      	movs	r0, r3
 8002f92:	f7ff fcc1 	bl	8002918 <ensure>
 8002f96:	0003      	movs	r3, r0
 8002f98:	613b      	str	r3, [r7, #16]
    if (output == NULL)
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d101      	bne.n	8002fa4 <print_string_ptr+0xd8>
    {
        return false;
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	e088      	b.n	80030b6 <print_string_ptr+0x1ea>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d117      	bne.n	8002fda <print_string_ptr+0x10e>
    {
        output[0] = '\"';
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	2222      	movs	r2, #34	; 0x22
 8002fae:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8002fb0:	693b      	ldr	r3, [r7, #16]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	6879      	ldr	r1, [r7, #4]
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f006 f95f 	bl	800927c <memcpy>
        output[output_length + 1] = '\"';
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	693a      	ldr	r2, [r7, #16]
 8002fc4:	18d3      	adds	r3, r2, r3
 8002fc6:	2222      	movs	r2, #34	; 0x22
 8002fc8:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	3302      	adds	r3, #2
 8002fce:	693a      	ldr	r2, [r7, #16]
 8002fd0:	18d3      	adds	r3, r2, r3
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	701a      	strb	r2, [r3, #0]

        return true;
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	e06d      	b.n	80030b6 <print_string_ptr+0x1ea>
    }

    output[0] = '\"';
 8002fda:	693b      	ldr	r3, [r7, #16]
 8002fdc:	2222      	movs	r2, #34	; 0x22
 8002fde:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8002fe0:	693b      	ldr	r3, [r7, #16]
 8002fe2:	3301      	adds	r3, #1
 8002fe4:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	61fb      	str	r3, [r7, #28]
 8002fea:	e053      	b.n	8003094 <print_string_ptr+0x1c8>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b1f      	cmp	r3, #31
 8002ff2:	d90c      	bls.n	800300e <print_string_ptr+0x142>
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	781b      	ldrb	r3, [r3, #0]
 8002ff8:	2b22      	cmp	r3, #34	; 0x22
 8002ffa:	d008      	beq.n	800300e <print_string_ptr+0x142>
 8002ffc:	69fb      	ldr	r3, [r7, #28]
 8002ffe:	781b      	ldrb	r3, [r3, #0]
 8003000:	2b5c      	cmp	r3, #92	; 0x5c
 8003002:	d004      	beq.n	800300e <print_string_ptr+0x142>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8003004:	69fb      	ldr	r3, [r7, #28]
 8003006:	781a      	ldrb	r2, [r3, #0]
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	701a      	strb	r2, [r3, #0]
 800300c:	e03c      	b.n	8003088 <print_string_ptr+0x1bc>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 800300e:	69bb      	ldr	r3, [r7, #24]
 8003010:	1c5a      	adds	r2, r3, #1
 8003012:	61ba      	str	r2, [r7, #24]
 8003014:	225c      	movs	r2, #92	; 0x5c
 8003016:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	781b      	ldrb	r3, [r3, #0]
 800301c:	2b22      	cmp	r3, #34	; 0x22
 800301e:	dc09      	bgt.n	8003034 <print_string_ptr+0x168>
 8003020:	2b08      	cmp	r3, #8
 8003022:	db25      	blt.n	8003070 <print_string_ptr+0x1a4>
 8003024:	3b08      	subs	r3, #8
 8003026:	2b1a      	cmp	r3, #26
 8003028:	d822      	bhi.n	8003070 <print_string_ptr+0x1a4>
 800302a:	009a      	lsls	r2, r3, #2
 800302c:	4b26      	ldr	r3, [pc, #152]	; (80030c8 <print_string_ptr+0x1fc>)
 800302e:	18d3      	adds	r3, r2, r3
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	469f      	mov	pc, r3
 8003034:	2b5c      	cmp	r3, #92	; 0x5c
 8003036:	d11b      	bne.n	8003070 <print_string_ptr+0x1a4>
            {
                case '\\':
                    *output_pointer = '\\';
 8003038:	69bb      	ldr	r3, [r7, #24]
 800303a:	225c      	movs	r2, #92	; 0x5c
 800303c:	701a      	strb	r2, [r3, #0]
                    break;
 800303e:	e023      	b.n	8003088 <print_string_ptr+0x1bc>
                case '\"':
                    *output_pointer = '\"';
 8003040:	69bb      	ldr	r3, [r7, #24]
 8003042:	2222      	movs	r2, #34	; 0x22
 8003044:	701a      	strb	r2, [r3, #0]
                    break;
 8003046:	e01f      	b.n	8003088 <print_string_ptr+0x1bc>
                case '\b':
                    *output_pointer = 'b';
 8003048:	69bb      	ldr	r3, [r7, #24]
 800304a:	2262      	movs	r2, #98	; 0x62
 800304c:	701a      	strb	r2, [r3, #0]
                    break;
 800304e:	e01b      	b.n	8003088 <print_string_ptr+0x1bc>
                case '\f':
                    *output_pointer = 'f';
 8003050:	69bb      	ldr	r3, [r7, #24]
 8003052:	2266      	movs	r2, #102	; 0x66
 8003054:	701a      	strb	r2, [r3, #0]
                    break;
 8003056:	e017      	b.n	8003088 <print_string_ptr+0x1bc>
                case '\n':
                    *output_pointer = 'n';
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	226e      	movs	r2, #110	; 0x6e
 800305c:	701a      	strb	r2, [r3, #0]
                    break;
 800305e:	e013      	b.n	8003088 <print_string_ptr+0x1bc>
                case '\r':
                    *output_pointer = 'r';
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	2272      	movs	r2, #114	; 0x72
 8003064:	701a      	strb	r2, [r3, #0]
                    break;
 8003066:	e00f      	b.n	8003088 <print_string_ptr+0x1bc>
                case '\t':
                    *output_pointer = 't';
 8003068:	69bb      	ldr	r3, [r7, #24]
 800306a:	2274      	movs	r2, #116	; 0x74
 800306c:	701a      	strb	r2, [r3, #0]
                    break;
 800306e:	e00b      	b.n	8003088 <print_string_ptr+0x1bc>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	001a      	movs	r2, r3
 8003076:	4915      	ldr	r1, [pc, #84]	; (80030cc <print_string_ptr+0x200>)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	0018      	movs	r0, r3
 800307c:	f006 f85c 	bl	8009138 <siprintf>
                    output_pointer += 4;
 8003080:	69bb      	ldr	r3, [r7, #24]
 8003082:	3304      	adds	r3, #4
 8003084:	61bb      	str	r3, [r7, #24]
                    break;
 8003086:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8003088:	69fb      	ldr	r3, [r7, #28]
 800308a:	3301      	adds	r3, #1
 800308c:	61fb      	str	r3, [r7, #28]
 800308e:	69bb      	ldr	r3, [r7, #24]
 8003090:	3301      	adds	r3, #1
 8003092:	61bb      	str	r3, [r7, #24]
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	781b      	ldrb	r3, [r3, #0]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d1a7      	bne.n	8002fec <print_string_ptr+0x120>
            }
        }
    }
    output[output_length + 1] = '\"';
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	3301      	adds	r3, #1
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	18d3      	adds	r3, r2, r3
 80030a4:	2222      	movs	r2, #34	; 0x22
 80030a6:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	3302      	adds	r3, #2
 80030ac:	693a      	ldr	r2, [r7, #16]
 80030ae:	18d3      	adds	r3, r2, r3
 80030b0:	2200      	movs	r2, #0
 80030b2:	701a      	strb	r2, [r3, #0]

    return true;
 80030b4:	2301      	movs	r3, #1
}
 80030b6:	0018      	movs	r0, r3
 80030b8:	46bd      	mov	sp, r7
 80030ba:	b008      	add	sp, #32
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	08009cf4 	.word	0x08009cf4
 80030c4:	04000037 	.word	0x04000037
 80030c8:	08009df0 	.word	0x08009df0
 80030cc:	08009cf8 	.word	0x08009cf8

080030d0 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	683a      	ldr	r2, [r7, #0]
 80030e0:	0011      	movs	r1, r2
 80030e2:	0018      	movs	r0, r3
 80030e4:	f7ff fef2 	bl	8002ecc <print_string_ptr>
 80030e8:	0003      	movs	r3, r0
}
 80030ea:	0018      	movs	r0, r3
 80030ec:	46bd      	mov	sp, r7
 80030ee:	b002      	add	sp, #8
 80030f0:	bd80      	pop	{r7, pc}
	...

080030f4 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 80030f4:	b5b0      	push	{r4, r5, r7, lr}
 80030f6:	b08e      	sub	sp, #56	; 0x38
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8003100:	2300      	movs	r3, #0
 8003102:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8003104:	2410      	movs	r4, #16
 8003106:	193b      	adds	r3, r7, r4
 8003108:	2224      	movs	r2, #36	; 0x24
 800310a:	2100      	movs	r1, #0
 800310c:	0018      	movs	r0, r3
 800310e:	f006 f833 	bl	8009178 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681a      	ldr	r2, [r3, #0]
 8003116:	4b42      	ldr	r3, [pc, #264]	; (8003220 <print+0x12c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	0018      	movs	r0, r3
 800311c:	4790      	blx	r2
 800311e:	0002      	movs	r2, r0
 8003120:	193b      	adds	r3, r7, r4
 8003122:	601a      	str	r2, [r3, #0]
    buffer->length = default_buffer_size;
 8003124:	4b3e      	ldr	r3, [pc, #248]	; (8003220 <print+0x12c>)
 8003126:	681a      	ldr	r2, [r3, #0]
 8003128:	193b      	adds	r3, r7, r4
 800312a:	605a      	str	r2, [r3, #4]
    buffer->format = format;
 800312c:	0025      	movs	r5, r4
 800312e:	193b      	adds	r3, r7, r4
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	615a      	str	r2, [r3, #20]
    buffer->hooks = *hooks;
 8003134:	197b      	adds	r3, r7, r5
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	3318      	adds	r3, #24
 800313a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800313c:	c313      	stmia	r3!, {r0, r1, r4}
    if (buffer->buffer == NULL)
 800313e:	002c      	movs	r4, r5
 8003140:	193b      	adds	r3, r7, r4
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	2b00      	cmp	r3, #0
 8003146:	d04c      	beq.n	80031e2 <print+0xee>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8003148:	193a      	adds	r2, r7, r4
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	0011      	movs	r1, r2
 800314e:	0018      	movs	r0, r3
 8003150:	f000 f87a 	bl	8003248 <print_value>
 8003154:	1e03      	subs	r3, r0, #0
 8003156:	d046      	beq.n	80031e6 <print+0xf2>
    {
        goto fail;
    }
    update_offset(buffer);
 8003158:	193b      	adds	r3, r7, r4
 800315a:	0018      	movs	r0, r3
 800315c:	f7ff fc7c 	bl	8002a58 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	689b      	ldr	r3, [r3, #8]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d011      	beq.n	800318c <print+0x98>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	689a      	ldr	r2, [r3, #8]
 800316c:	193b      	adds	r3, r7, r4
 800316e:	6818      	ldr	r0, [r3, #0]
 8003170:	193b      	adds	r3, r7, r4
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	3301      	adds	r3, #1
 8003176:	0019      	movs	r1, r3
 8003178:	4790      	blx	r2
 800317a:	0003      	movs	r3, r0
 800317c:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL) {
 800317e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003180:	2b00      	cmp	r3, #0
 8003182:	d032      	beq.n	80031ea <print+0xf6>
            goto fail;
        }
        buffer->buffer = NULL;
 8003184:	193b      	adds	r3, r7, r4
 8003186:	2200      	movs	r2, #0
 8003188:	601a      	str	r2, [r3, #0]
 800318a:	e028      	b.n	80031de <print+0xea>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681a      	ldr	r2, [r3, #0]
 8003190:	2410      	movs	r4, #16
 8003192:	193b      	adds	r3, r7, r4
 8003194:	689b      	ldr	r3, [r3, #8]
 8003196:	3301      	adds	r3, #1
 8003198:	0018      	movs	r0, r3
 800319a:	4790      	blx	r2
 800319c:	0003      	movs	r3, r0
 800319e:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL)
 80031a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d023      	beq.n	80031ee <print+0xfa>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 80031a6:	193b      	adds	r3, r7, r4
 80031a8:	6819      	ldr	r1, [r3, #0]
 80031aa:	193b      	adds	r3, r7, r4
 80031ac:	689b      	ldr	r3, [r3, #8]
 80031ae:	1c58      	adds	r0, r3, #1
 80031b0:	193b      	adds	r3, r7, r4
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	0003      	movs	r3, r0
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d900      	bls.n	80031bc <print+0xc8>
 80031ba:	0013      	movs	r3, r2
 80031bc:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80031be:	001a      	movs	r2, r3
 80031c0:	f006 f85c 	bl	800927c <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 80031c4:	2110      	movs	r1, #16
 80031c6:	187b      	adds	r3, r7, r1
 80031c8:	689b      	ldr	r3, [r3, #8]
 80031ca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80031cc:	18d3      	adds	r3, r2, r3
 80031ce:	2200      	movs	r2, #0
 80031d0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	685a      	ldr	r2, [r3, #4]
 80031d6:	187b      	adds	r3, r7, r1
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	0018      	movs	r0, r3
 80031dc:	4790      	blx	r2
    }

    return printed;
 80031de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80031e0:	e01a      	b.n	8003218 <print+0x124>
        goto fail;
 80031e2:	46c0      	nop			; (mov r8, r8)
 80031e4:	e004      	b.n	80031f0 <print+0xfc>
        goto fail;
 80031e6:	46c0      	nop			; (mov r8, r8)
 80031e8:	e002      	b.n	80031f0 <print+0xfc>
            goto fail;
 80031ea:	46c0      	nop			; (mov r8, r8)
 80031ec:	e000      	b.n	80031f0 <print+0xfc>
            goto fail;
 80031ee:	46c0      	nop			; (mov r8, r8)

fail:
    if (buffer->buffer != NULL)
 80031f0:	2110      	movs	r1, #16
 80031f2:	187b      	adds	r3, r7, r1
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d005      	beq.n	8003206 <print+0x112>
    {
        hooks->deallocate(buffer->buffer);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	685a      	ldr	r2, [r3, #4]
 80031fe:	187b      	adds	r3, r7, r1
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	0018      	movs	r0, r3
 8003204:	4790      	blx	r2
    }

    if (printed != NULL)
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	2b00      	cmp	r3, #0
 800320a:	d004      	beq.n	8003216 <print+0x122>
    {
        hooks->deallocate(printed);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003212:	0010      	movs	r0, r2
 8003214:	4798      	blx	r3
    }

    return NULL;
 8003216:	2300      	movs	r3, #0
}
 8003218:	0018      	movs	r0, r3
 800321a:	46bd      	mov	sp, r7
 800321c:	b00e      	add	sp, #56	; 0x38
 800321e:	bdb0      	pop	{r4, r5, r7, pc}
 8003220:	08009ee0 	.word	0x08009ee0

08003224 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	b082      	sub	sp, #8
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 800322c:	4a05      	ldr	r2, [pc, #20]	; (8003244 <cJSON_Print+0x20>)
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2101      	movs	r1, #1
 8003232:	0018      	movs	r0, r3
 8003234:	f7ff ff5e 	bl	80030f4 <print>
 8003238:	0003      	movs	r3, r0
}
 800323a:	0018      	movs	r0, r3
 800323c:	46bd      	mov	sp, r7
 800323e:	b002      	add	sp, #8
 8003240:	bd80      	pop	{r7, pc}
 8003242:	46c0      	nop			; (mov r8, r8)
 8003244:	20000000 	.word	0x20000000

08003248 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8003248:	b580      	push	{r7, lr}
 800324a:	b084      	sub	sp, #16
 800324c:	af00      	add	r7, sp, #0
 800324e:	6078      	str	r0, [r7, #4]
 8003250:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8003252:	2300      	movs	r3, #0
 8003254:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d002      	beq.n	8003262 <print_value+0x1a>
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <print_value+0x1e>
    {
        return false;
 8003262:	2300      	movs	r3, #0
 8003264:	e0a1      	b.n	80033aa <print_value+0x162>
    }

    switch ((item->type) & 0xFF)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	22ff      	movs	r2, #255	; 0xff
 800326c:	4013      	ands	r3, r2
 800326e:	2b80      	cmp	r3, #128	; 0x80
 8003270:	d05c      	beq.n	800332c <print_value+0xe4>
 8003272:	dd00      	ble.n	8003276 <print_value+0x2e>
 8003274:	e098      	b.n	80033a8 <print_value+0x160>
 8003276:	2b20      	cmp	r3, #32
 8003278:	dc0a      	bgt.n	8003290 <print_value+0x48>
 800327a:	2b00      	cmp	r3, #0
 800327c:	dc00      	bgt.n	8003280 <print_value+0x38>
 800327e:	e093      	b.n	80033a8 <print_value+0x160>
 8003280:	2b20      	cmp	r3, #32
 8003282:	d900      	bls.n	8003286 <print_value+0x3e>
 8003284:	e090      	b.n	80033a8 <print_value+0x160>
 8003286:	009a      	lsls	r2, r3, #2
 8003288:	4b4a      	ldr	r3, [pc, #296]	; (80033b4 <print_value+0x16c>)
 800328a:	18d3      	adds	r3, r2, r3
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	469f      	mov	pc, r3
 8003290:	2b40      	cmp	r3, #64	; 0x40
 8003292:	d100      	bne.n	8003296 <print_value+0x4e>
 8003294:	e080      	b.n	8003398 <print_value+0x150>
 8003296:	e087      	b.n	80033a8 <print_value+0x160>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	2105      	movs	r1, #5
 800329c:	0018      	movs	r0, r3
 800329e:	f7ff fb3b 	bl	8002918 <ensure>
 80032a2:	0003      	movs	r3, r0
 80032a4:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d101      	bne.n	80032b0 <print_value+0x68>
            {
                return false;
 80032ac:	2300      	movs	r3, #0
 80032ae:	e07c      	b.n	80033aa <print_value+0x162>
            }
            strcpy((char*)output, "null");
 80032b0:	68fa      	ldr	r2, [r7, #12]
 80032b2:	4b41      	ldr	r3, [pc, #260]	; (80033b8 <print_value+0x170>)
 80032b4:	0010      	movs	r0, r2
 80032b6:	0019      	movs	r1, r3
 80032b8:	2305      	movs	r3, #5
 80032ba:	001a      	movs	r2, r3
 80032bc:	f005 ffde 	bl	800927c <memcpy>
            return true;
 80032c0:	2301      	movs	r3, #1
 80032c2:	e072      	b.n	80033aa <print_value+0x162>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	2106      	movs	r1, #6
 80032c8:	0018      	movs	r0, r3
 80032ca:	f7ff fb25 	bl	8002918 <ensure>
 80032ce:	0003      	movs	r3, r0
 80032d0:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <print_value+0x94>
            {
                return false;
 80032d8:	2300      	movs	r3, #0
 80032da:	e066      	b.n	80033aa <print_value+0x162>
            }
            strcpy((char*)output, "false");
 80032dc:	68fa      	ldr	r2, [r7, #12]
 80032de:	4b37      	ldr	r3, [pc, #220]	; (80033bc <print_value+0x174>)
 80032e0:	0010      	movs	r0, r2
 80032e2:	0019      	movs	r1, r3
 80032e4:	2306      	movs	r3, #6
 80032e6:	001a      	movs	r2, r3
 80032e8:	f005 ffc8 	bl	800927c <memcpy>
            return true;
 80032ec:	2301      	movs	r3, #1
 80032ee:	e05c      	b.n	80033aa <print_value+0x162>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	2105      	movs	r1, #5
 80032f4:	0018      	movs	r0, r3
 80032f6:	f7ff fb0f 	bl	8002918 <ensure>
 80032fa:	0003      	movs	r3, r0
 80032fc:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	2b00      	cmp	r3, #0
 8003302:	d101      	bne.n	8003308 <print_value+0xc0>
            {
                return false;
 8003304:	2300      	movs	r3, #0
 8003306:	e050      	b.n	80033aa <print_value+0x162>
            }
            strcpy((char*)output, "true");
 8003308:	68fa      	ldr	r2, [r7, #12]
 800330a:	4b2d      	ldr	r3, [pc, #180]	; (80033c0 <print_value+0x178>)
 800330c:	0010      	movs	r0, r2
 800330e:	0019      	movs	r1, r3
 8003310:	2305      	movs	r3, #5
 8003312:	001a      	movs	r2, r3
 8003314:	f005 ffb2 	bl	800927c <memcpy>
            return true;
 8003318:	2301      	movs	r3, #1
 800331a:	e046      	b.n	80033aa <print_value+0x162>

        case cJSON_Number:
            return print_number(item, output_buffer);
 800331c:	683a      	ldr	r2, [r7, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0011      	movs	r1, r2
 8003322:	0018      	movs	r0, r3
 8003324:	f7ff fc4e 	bl	8002bc4 <print_number>
 8003328:	0003      	movs	r3, r0
 800332a:	e03e      	b.n	80033aa <print_value+0x162>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 800332c:	2300      	movs	r3, #0
 800332e:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	691b      	ldr	r3, [r3, #16]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d101      	bne.n	800333c <print_value+0xf4>
            {
                return false;
 8003338:	2300      	movs	r3, #0
 800333a:	e036      	b.n	80033aa <print_value+0x162>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	0018      	movs	r0, r3
 8003342:	f7fc fee1 	bl	8000108 <strlen>
 8003346:	0003      	movs	r3, r0
 8003348:	3301      	adds	r3, #1
 800334a:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800334c:	68ba      	ldr	r2, [r7, #8]
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	0011      	movs	r1, r2
 8003352:	0018      	movs	r0, r3
 8003354:	f7ff fae0 	bl	8002918 <ensure>
 8003358:	0003      	movs	r3, r0
 800335a:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d101      	bne.n	8003366 <print_value+0x11e>
            {
                return false;
 8003362:	2300      	movs	r3, #0
 8003364:	e021      	b.n	80033aa <print_value+0x162>
            }
            memcpy(output, item->valuestring, raw_length);
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	6919      	ldr	r1, [r3, #16]
 800336a:	68ba      	ldr	r2, [r7, #8]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	0018      	movs	r0, r3
 8003370:	f005 ff84 	bl	800927c <memcpy>
            return true;
 8003374:	2301      	movs	r3, #1
 8003376:	e018      	b.n	80033aa <print_value+0x162>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8003378:	683a      	ldr	r2, [r7, #0]
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	0011      	movs	r1, r2
 800337e:	0018      	movs	r0, r3
 8003380:	f7ff fea6 	bl	80030d0 <print_string>
 8003384:	0003      	movs	r3, r0
 8003386:	e010      	b.n	80033aa <print_value+0x162>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	0011      	movs	r1, r2
 800338e:	0018      	movs	r0, r3
 8003390:	f000 f818 	bl	80033c4 <print_array>
 8003394:	0003      	movs	r3, r0
 8003396:	e008      	b.n	80033aa <print_value+0x162>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8003398:	683a      	ldr	r2, [r7, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	0011      	movs	r1, r2
 800339e:	0018      	movs	r0, r3
 80033a0:	f000 f89e 	bl	80034e0 <print_object>
 80033a4:	0003      	movs	r3, r0
 80033a6:	e000      	b.n	80033aa <print_value+0x162>

        default:
            return false;
 80033a8:	2300      	movs	r3, #0
    }
}
 80033aa:	0018      	movs	r0, r3
 80033ac:	46bd      	mov	sp, r7
 80033ae:	b004      	add	sp, #16
 80033b0:	bd80      	pop	{r7, pc}
 80033b2:	46c0      	nop			; (mov r8, r8)
 80033b4:	08009e5c 	.word	0x08009e5c
 80033b8:	08009ce0 	.word	0x08009ce0
 80033bc:	08009d04 	.word	0x08009d04
 80033c0:	08009d0c 	.word	0x08009d0c

080033c4 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b086      	sub	sp, #24
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
 80033cc:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 80033d2:	2300      	movs	r3, #0
 80033d4:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	689b      	ldr	r3, [r3, #8]
 80033da:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d101      	bne.n	80033e6 <print_array+0x22>
    {
        return false;
 80033e2:	2300      	movs	r3, #0
 80033e4:	e078      	b.n	80034d8 <print_array+0x114>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	2101      	movs	r1, #1
 80033ea:	0018      	movs	r0, r3
 80033ec:	f7ff fa94 	bl	8002918 <ensure>
 80033f0:	0003      	movs	r3, r0
 80033f2:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 80033f4:	697b      	ldr	r3, [r7, #20]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <print_array+0x3a>
    {
        return false;
 80033fa:	2300      	movs	r3, #0
 80033fc:	e06c      	b.n	80034d8 <print_array+0x114>
    }

    *output_pointer = '[';
 80033fe:	697b      	ldr	r3, [r7, #20]
 8003400:	225b      	movs	r2, #91	; 0x5b
 8003402:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8003404:	683b      	ldr	r3, [r7, #0]
 8003406:	689b      	ldr	r3, [r3, #8]
 8003408:	1c5a      	adds	r2, r3, #1
 800340a:	683b      	ldr	r3, [r7, #0]
 800340c:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	1c5a      	adds	r2, r3, #1
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8003418:	e041      	b.n	800349e <print_array+0xda>
    {
        if (!print_value(current_element, output_buffer))
 800341a:	683a      	ldr	r2, [r7, #0]
 800341c:	693b      	ldr	r3, [r7, #16]
 800341e:	0011      	movs	r1, r2
 8003420:	0018      	movs	r0, r3
 8003422:	f7ff ff11 	bl	8003248 <print_value>
 8003426:	1e03      	subs	r3, r0, #0
 8003428:	d101      	bne.n	800342e <print_array+0x6a>
        {
            return false;
 800342a:	2300      	movs	r3, #0
 800342c:	e054      	b.n	80034d8 <print_array+0x114>
        }
        update_offset(output_buffer);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	0018      	movs	r0, r3
 8003432:	f7ff fb11 	bl	8002a58 <update_offset>
        if (current_element->next)
 8003436:	693b      	ldr	r3, [r7, #16]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d02c      	beq.n	8003498 <print_array+0xd4>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	695b      	ldr	r3, [r3, #20]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d001      	beq.n	800344a <print_array+0x86>
 8003446:	2302      	movs	r3, #2
 8003448:	e000      	b.n	800344c <print_array+0x88>
 800344a:	2301      	movs	r3, #1
 800344c:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	1c5a      	adds	r2, r3, #1
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	0011      	movs	r1, r2
 8003456:	0018      	movs	r0, r3
 8003458:	f7ff fa5e 	bl	8002918 <ensure>
 800345c:	0003      	movs	r3, r0
 800345e:	617b      	str	r3, [r7, #20]
            if (output_pointer == NULL)
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <print_array+0xa6>
            {
                return false;
 8003466:	2300      	movs	r3, #0
 8003468:	e036      	b.n	80034d8 <print_array+0x114>
            }
            *output_pointer++ = ',';
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	1c5a      	adds	r2, r3, #1
 800346e:	617a      	str	r2, [r7, #20]
 8003470:	222c      	movs	r2, #44	; 0x2c
 8003472:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	695b      	ldr	r3, [r3, #20]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d004      	beq.n	8003486 <print_array+0xc2>
            {
                *output_pointer++ = ' ';
 800347c:	697b      	ldr	r3, [r7, #20]
 800347e:	1c5a      	adds	r2, r3, #1
 8003480:	617a      	str	r2, [r7, #20]
 8003482:	2220      	movs	r2, #32
 8003484:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8003486:	697b      	ldr	r3, [r7, #20]
 8003488:	2200      	movs	r2, #0
 800348a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	689a      	ldr	r2, [r3, #8]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	18d2      	adds	r2, r2, r3
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d1ba      	bne.n	800341a <print_array+0x56>
    }

    output_pointer = ensure(output_buffer, 2);
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	2102      	movs	r1, #2
 80034a8:	0018      	movs	r0, r3
 80034aa:	f7ff fa35 	bl	8002918 <ensure>
 80034ae:	0003      	movs	r3, r0
 80034b0:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 80034b2:	697b      	ldr	r3, [r7, #20]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d101      	bne.n	80034bc <print_array+0xf8>
    {
        return false;
 80034b8:	2300      	movs	r3, #0
 80034ba:	e00d      	b.n	80034d8 <print_array+0x114>
    }
    *output_pointer++ = ']';
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	1c5a      	adds	r2, r3, #1
 80034c0:	617a      	str	r2, [r7, #20]
 80034c2:	225d      	movs	r2, #93	; 0x5d
 80034c4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80034c6:	697b      	ldr	r3, [r7, #20]
 80034c8:	2200      	movs	r2, #0
 80034ca:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	68db      	ldr	r3, [r3, #12]
 80034d0:	1e5a      	subs	r2, r3, #1
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	60da      	str	r2, [r3, #12]

    return true;
 80034d6:	2301      	movs	r3, #1
}
 80034d8:	0018      	movs	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	b006      	add	sp, #24
 80034de:	bd80      	pop	{r7, pc}

080034e0 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b088      	sub	sp, #32
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
 80034e8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80034ea:	2300      	movs	r3, #0
 80034ec:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 80034ee:	2300      	movs	r3, #0
 80034f0:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <print_object+0x22>
    {
        return false;
 80034fe:	2300      	movs	r3, #0
 8003500:	e116      	b.n	8003730 <print_object+0x250>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	695b      	ldr	r3, [r3, #20]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d001      	beq.n	800350e <print_object+0x2e>
 800350a:	2302      	movs	r3, #2
 800350c:	e000      	b.n	8003510 <print_object+0x30>
 800350e:	2301      	movs	r3, #1
 8003510:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	1c5a      	adds	r2, r3, #1
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	0011      	movs	r1, r2
 800351a:	0018      	movs	r0, r3
 800351c:	f7ff f9fc 	bl	8002918 <ensure>
 8003520:	0003      	movs	r3, r0
 8003522:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d101      	bne.n	800352e <print_object+0x4e>
    {
        return false;
 800352a:	2300      	movs	r3, #0
 800352c:	e100      	b.n	8003730 <print_object+0x250>
    }

    *output_pointer++ = '{';
 800352e:	69fb      	ldr	r3, [r7, #28]
 8003530:	1c5a      	adds	r2, r3, #1
 8003532:	61fa      	str	r2, [r7, #28]
 8003534:	227b      	movs	r2, #123	; 0x7b
 8003536:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8003538:	683b      	ldr	r3, [r7, #0]
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	1c5a      	adds	r2, r3, #1
 800353e:	683b      	ldr	r3, [r7, #0]
 8003540:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	695b      	ldr	r3, [r3, #20]
 8003546:	2b00      	cmp	r3, #0
 8003548:	d004      	beq.n	8003554 <print_object+0x74>
    {
        *output_pointer++ = '\n';
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	1c5a      	adds	r2, r3, #1
 800354e:	61fa      	str	r2, [r7, #28]
 8003550:	220a      	movs	r2, #10
 8003552:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	689a      	ldr	r2, [r3, #8]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	18d2      	adds	r2, r2, r3
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	609a      	str	r2, [r3, #8]

    while (current_item)
 8003560:	e0aa      	b.n	80036b8 <print_object+0x1d8>
    {
        if (output_buffer->format)
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	695b      	ldr	r3, [r3, #20]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d024      	beq.n	80035b4 <print_object+0xd4>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	68da      	ldr	r2, [r3, #12]
 800356e:	683b      	ldr	r3, [r7, #0]
 8003570:	0011      	movs	r1, r2
 8003572:	0018      	movs	r0, r3
 8003574:	f7ff f9d0 	bl	8002918 <ensure>
 8003578:	0003      	movs	r3, r0
 800357a:	61fb      	str	r3, [r7, #28]
            if (output_pointer == NULL)
 800357c:	69fb      	ldr	r3, [r7, #28]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d101      	bne.n	8003586 <print_object+0xa6>
            {
                return false;
 8003582:	2300      	movs	r3, #0
 8003584:	e0d4      	b.n	8003730 <print_object+0x250>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
 800358a:	e007      	b.n	800359c <print_object+0xbc>
            {
                *output_pointer++ = '\t';
 800358c:	69fb      	ldr	r3, [r7, #28]
 800358e:	1c5a      	adds	r2, r3, #1
 8003590:	61fa      	str	r2, [r7, #28]
 8003592:	2209      	movs	r2, #9
 8003594:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8003596:	697b      	ldr	r3, [r7, #20]
 8003598:	3301      	adds	r3, #1
 800359a:	617b      	str	r3, [r7, #20]
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	697a      	ldr	r2, [r7, #20]
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d3f2      	bcc.n	800358c <print_object+0xac>
            }
            output_buffer->offset += output_buffer->depth;
 80035a6:	683b      	ldr	r3, [r7, #0]
 80035a8:	689a      	ldr	r2, [r3, #8]
 80035aa:	683b      	ldr	r3, [r7, #0]
 80035ac:	68db      	ldr	r3, [r3, #12]
 80035ae:	18d2      	adds	r2, r2, r3
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 80035b4:	69bb      	ldr	r3, [r7, #24]
 80035b6:	6a1b      	ldr	r3, [r3, #32]
 80035b8:	683a      	ldr	r2, [r7, #0]
 80035ba:	0011      	movs	r1, r2
 80035bc:	0018      	movs	r0, r3
 80035be:	f7ff fc85 	bl	8002ecc <print_string_ptr>
 80035c2:	1e03      	subs	r3, r0, #0
 80035c4:	d101      	bne.n	80035ca <print_object+0xea>
        {
            return false;
 80035c6:	2300      	movs	r3, #0
 80035c8:	e0b2      	b.n	8003730 <print_object+0x250>
        }
        update_offset(output_buffer);
 80035ca:	683b      	ldr	r3, [r7, #0]
 80035cc:	0018      	movs	r0, r3
 80035ce:	f7ff fa43 	bl	8002a58 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	695b      	ldr	r3, [r3, #20]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <print_object+0xfe>
 80035da:	2302      	movs	r3, #2
 80035dc:	e000      	b.n	80035e0 <print_object+0x100>
 80035de:	2301      	movs	r3, #1
 80035e0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 80035e2:	68fa      	ldr	r2, [r7, #12]
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	0011      	movs	r1, r2
 80035e8:	0018      	movs	r0, r3
 80035ea:	f7ff f995 	bl	8002918 <ensure>
 80035ee:	0003      	movs	r3, r0
 80035f0:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 80035f2:	69fb      	ldr	r3, [r7, #28]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d101      	bne.n	80035fc <print_object+0x11c>
        {
            return false;
 80035f8:	2300      	movs	r3, #0
 80035fa:	e099      	b.n	8003730 <print_object+0x250>
        }
        *output_pointer++ = ':';
 80035fc:	69fb      	ldr	r3, [r7, #28]
 80035fe:	1c5a      	adds	r2, r3, #1
 8003600:	61fa      	str	r2, [r7, #28]
 8003602:	223a      	movs	r2, #58	; 0x3a
 8003604:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	695b      	ldr	r3, [r3, #20]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d004      	beq.n	8003618 <print_object+0x138>
        {
            *output_pointer++ = '\t';
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	1c5a      	adds	r2, r3, #1
 8003612:	61fa      	str	r2, [r7, #28]
 8003614:	2209      	movs	r2, #9
 8003616:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	689a      	ldr	r2, [r3, #8]
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	18d2      	adds	r2, r2, r3
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 8003624:	683a      	ldr	r2, [r7, #0]
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	0011      	movs	r1, r2
 800362a:	0018      	movs	r0, r3
 800362c:	f7ff fe0c 	bl	8003248 <print_value>
 8003630:	1e03      	subs	r3, r0, #0
 8003632:	d101      	bne.n	8003638 <print_object+0x158>
        {
            return false;
 8003634:	2300      	movs	r3, #0
 8003636:	e07b      	b.n	8003730 <print_object+0x250>
        }
        update_offset(output_buffer);
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	0018      	movs	r0, r3
 800363c:	f7ff fa0c 	bl	8002a58 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	695b      	ldr	r3, [r3, #20]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d001      	beq.n	800364c <print_object+0x16c>
 8003648:	2201      	movs	r2, #1
 800364a:	e000      	b.n	800364e <print_object+0x16e>
 800364c:	2200      	movs	r2, #0
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <print_object+0x17a>
 8003656:	2301      	movs	r3, #1
 8003658:	e000      	b.n	800365c <print_object+0x17c>
 800365a:	2300      	movs	r3, #0
 800365c:	18d3      	adds	r3, r2, r3
 800365e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	1c5a      	adds	r2, r3, #1
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	0011      	movs	r1, r2
 8003668:	0018      	movs	r0, r3
 800366a:	f7ff f955 	bl	8002918 <ensure>
 800366e:	0003      	movs	r3, r0
 8003670:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 8003672:	69fb      	ldr	r3, [r7, #28]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d101      	bne.n	800367c <print_object+0x19c>
        {
            return false;
 8003678:	2300      	movs	r3, #0
 800367a:	e059      	b.n	8003730 <print_object+0x250>
        }
        if (current_item->next)
 800367c:	69bb      	ldr	r3, [r7, #24]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d004      	beq.n	800368e <print_object+0x1ae>
        {
            *output_pointer++ = ',';
 8003684:	69fb      	ldr	r3, [r7, #28]
 8003686:	1c5a      	adds	r2, r3, #1
 8003688:	61fa      	str	r2, [r7, #28]
 800368a:	222c      	movs	r2, #44	; 0x2c
 800368c:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800368e:	683b      	ldr	r3, [r7, #0]
 8003690:	695b      	ldr	r3, [r3, #20]
 8003692:	2b00      	cmp	r3, #0
 8003694:	d004      	beq.n	80036a0 <print_object+0x1c0>
        {
            *output_pointer++ = '\n';
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	1c5a      	adds	r2, r3, #1
 800369a:	61fa      	str	r2, [r7, #28]
 800369c:	220a      	movs	r2, #10
 800369e:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2200      	movs	r2, #0
 80036a4:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 80036a6:	683b      	ldr	r3, [r7, #0]
 80036a8:	689a      	ldr	r2, [r3, #8]
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	18d2      	adds	r2, r2, r3
 80036ae:	683b      	ldr	r3, [r7, #0]
 80036b0:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 80036b2:	69bb      	ldr	r3, [r7, #24]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	61bb      	str	r3, [r7, #24]
    while (current_item)
 80036b8:	69bb      	ldr	r3, [r7, #24]
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d000      	beq.n	80036c0 <print_object+0x1e0>
 80036be:	e750      	b.n	8003562 <print_object+0x82>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	695b      	ldr	r3, [r3, #20]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d003      	beq.n	80036d0 <print_object+0x1f0>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	68db      	ldr	r3, [r3, #12]
 80036cc:	3301      	adds	r3, #1
 80036ce:	e000      	b.n	80036d2 <print_object+0x1f2>
 80036d0:	2302      	movs	r3, #2
 80036d2:	683a      	ldr	r2, [r7, #0]
 80036d4:	0019      	movs	r1, r3
 80036d6:	0010      	movs	r0, r2
 80036d8:	f7ff f91e 	bl	8002918 <ensure>
 80036dc:	0003      	movs	r3, r0
 80036de:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d101      	bne.n	80036ea <print_object+0x20a>
    {
        return false;
 80036e6:	2300      	movs	r3, #0
 80036e8:	e022      	b.n	8003730 <print_object+0x250>
    }
    if (output_buffer->format)
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	695b      	ldr	r3, [r3, #20]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d010      	beq.n	8003714 <print_object+0x234>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80036f2:	2300      	movs	r3, #0
 80036f4:	613b      	str	r3, [r7, #16]
 80036f6:	e007      	b.n	8003708 <print_object+0x228>
        {
            *output_pointer++ = '\t';
 80036f8:	69fb      	ldr	r3, [r7, #28]
 80036fa:	1c5a      	adds	r2, r3, #1
 80036fc:	61fa      	str	r2, [r7, #28]
 80036fe:	2209      	movs	r2, #9
 8003700:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	3301      	adds	r3, #1
 8003706:	613b      	str	r3, [r7, #16]
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	3b01      	subs	r3, #1
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	429a      	cmp	r2, r3
 8003712:	d3f1      	bcc.n	80036f8 <print_object+0x218>
        }
    }
    *output_pointer++ = '}';
 8003714:	69fb      	ldr	r3, [r7, #28]
 8003716:	1c5a      	adds	r2, r3, #1
 8003718:	61fa      	str	r2, [r7, #28]
 800371a:	227d      	movs	r2, #125	; 0x7d
 800371c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	2200      	movs	r2, #0
 8003722:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8003724:	683b      	ldr	r3, [r7, #0]
 8003726:	68db      	ldr	r3, [r3, #12]
 8003728:	1e5a      	subs	r2, r3, #1
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	60da      	str	r2, [r3, #12]

    return true;
 800372e:	2301      	movs	r3, #1
}
 8003730:	0018      	movs	r0, r3
 8003732:	46bd      	mov	sp, r7
 8003734:	b008      	add	sp, #32
 8003736:	bd80      	pop	{r7, pc}

08003738 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	605a      	str	r2, [r3, #4]
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b002      	add	sp, #8
 8003754:	bd80      	pop	{r7, pc}

08003756 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8003756:	b580      	push	{r7, lr}
 8003758:	b084      	sub	sp, #16
 800375a:	af00      	add	r7, sp, #0
 800375c:	6078      	str	r0, [r7, #4]
 800375e:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d006      	beq.n	8003778 <add_item_to_array+0x22>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	2b00      	cmp	r3, #0
 800376e:	d003      	beq.n	8003778 <add_item_to_array+0x22>
 8003770:	687a      	ldr	r2, [r7, #4]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	429a      	cmp	r2, r3
 8003776:	d101      	bne.n	800377c <add_item_to_array+0x26>
    {
        return false;
 8003778:	2300      	movs	r3, #0
 800377a:	e01f      	b.n	80037bc <add_item_to_array+0x66>
    }

    child = array->child;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	689b      	ldr	r3, [r3, #8]
 8003780:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d109      	bne.n	800379c <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	683a      	ldr	r2, [r7, #0]
 800378c:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800378e:	683b      	ldr	r3, [r7, #0]
 8003790:	683a      	ldr	r2, [r7, #0]
 8003792:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	2200      	movs	r2, #0
 8003798:	601a      	str	r2, [r3, #0]
 800379a:	e00e      	b.n	80037ba <add_item_to_array+0x64>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	685b      	ldr	r3, [r3, #4]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d00a      	beq.n	80037ba <add_item_to_array+0x64>
        {
            suffix_object(child->prev, item);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	683a      	ldr	r2, [r7, #0]
 80037aa:	0011      	movs	r1, r2
 80037ac:	0018      	movs	r0, r3
 80037ae:	f7ff ffc3 	bl	8003738 <suffix_object>
            array->child->prev = item;
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	683a      	ldr	r2, [r7, #0]
 80037b8:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 80037ba:	2301      	movs	r3, #1
}
 80037bc:	0018      	movs	r0, r3
 80037be:	46bd      	mov	sp, r7
 80037c0:	b004      	add	sp, #16
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
    return (void*)string;
 80037cc:	687b      	ldr	r3, [r7, #4]
}
 80037ce:	0018      	movs	r0, r3
 80037d0:	46bd      	mov	sp, r7
 80037d2:	b002      	add	sp, #8
 80037d4:	bd80      	pop	{r7, pc}
	...

080037d8 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80037d8:	b580      	push	{r7, lr}
 80037da:	b086      	sub	sp, #24
 80037dc:	af00      	add	r7, sp, #0
 80037de:	60f8      	str	r0, [r7, #12]
 80037e0:	60b9      	str	r1, [r7, #8]
 80037e2:	607a      	str	r2, [r7, #4]
 80037e4:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 80037ea:	2300      	movs	r3, #0
 80037ec:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d009      	beq.n	8003808 <add_item_to_object+0x30>
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d006      	beq.n	8003808 <add_item_to_object+0x30>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d003      	beq.n	8003808 <add_item_to_object+0x30>
 8003800:	68fa      	ldr	r2, [r7, #12]
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	429a      	cmp	r2, r3
 8003806:	d101      	bne.n	800380c <add_item_to_object+0x34>
    {
        return false;
 8003808:	2300      	movs	r3, #0
 800380a:	e03e      	b.n	800388a <add_item_to_object+0xb2>
    }

    if (constant_key)
 800380c:	6a3b      	ldr	r3, [r7, #32]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d00c      	beq.n	800382c <add_item_to_object+0x54>
    {
        new_key = (char*)cast_away_const(string);
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	0018      	movs	r0, r3
 8003816:	f7ff ffd5 	bl	80037c4 <cast_away_const>
 800381a:	0003      	movs	r3, r0
 800381c:	617b      	str	r3, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	2280      	movs	r2, #128	; 0x80
 8003824:	0092      	lsls	r2, r2, #2
 8003826:	4313      	orrs	r3, r2
 8003828:	613b      	str	r3, [r7, #16]
 800382a:	e011      	b.n	8003850 <add_item_to_object+0x78>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 800382c:	683a      	ldr	r2, [r7, #0]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	0011      	movs	r1, r2
 8003832:	0018      	movs	r0, r3
 8003834:	f7fe ffdb 	bl	80027ee <cJSON_strdup>
 8003838:	0003      	movs	r3, r0
 800383a:	617b      	str	r3, [r7, #20]
        if (new_key == NULL)
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d101      	bne.n	8003846 <add_item_to_object+0x6e>
        {
            return false;
 8003842:	2300      	movs	r3, #0
 8003844:	e021      	b.n	800388a <add_item_to_object+0xb2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	68db      	ldr	r3, [r3, #12]
 800384a:	4a12      	ldr	r2, [pc, #72]	; (8003894 <add_item_to_object+0xbc>)
 800384c:	4013      	ands	r3, r2
 800384e:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	68da      	ldr	r2, [r3, #12]
 8003854:	2380      	movs	r3, #128	; 0x80
 8003856:	009b      	lsls	r3, r3, #2
 8003858:	4013      	ands	r3, r2
 800385a:	d109      	bne.n	8003870 <add_item_to_object+0x98>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a1b      	ldr	r3, [r3, #32]
 8003860:	2b00      	cmp	r3, #0
 8003862:	d005      	beq.n	8003870 <add_item_to_object+0x98>
    {
        hooks->deallocate(item->string);
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	685a      	ldr	r2, [r3, #4]
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	0018      	movs	r0, r3
 800386e:	4790      	blx	r2
    }

    item->string = new_key;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	693a      	ldr	r2, [r7, #16]
 800387a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	0011      	movs	r1, r2
 8003882:	0018      	movs	r0, r3
 8003884:	f7ff ff67 	bl	8003756 <add_item_to_array>
 8003888:	0003      	movs	r3, r0
}
 800388a:	0018      	movs	r0, r3
 800388c:	46bd      	mov	sp, r7
 800388e:	b006      	add	sp, #24
 8003890:	bd80      	pop	{r7, pc}
 8003892:	46c0      	nop			; (mov r8, r8)
 8003894:	fffffdff 	.word	0xfffffdff

08003898 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, double number)
{
 8003898:	b590      	push	{r4, r7, lr}
 800389a:	b089      	sub	sp, #36	; 0x24
 800389c:	af02      	add	r7, sp, #8
 800389e:	60f8      	str	r0, [r7, #12]
 80038a0:	60b9      	str	r1, [r7, #8]
 80038a2:	603a      	str	r2, [r7, #0]
 80038a4:	607b      	str	r3, [r7, #4]
//   if(number==0)
//	{
//		number=0.00001;
//	}//maulin
    cJSON *number_item = cJSON_CreateNumber(number);
 80038a6:	683a      	ldr	r2, [r7, #0]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	0010      	movs	r0, r2
 80038ac:	0019      	movs	r1, r3
 80038ae:	f000 f819 	bl	80038e4 <cJSON_CreateNumber>
 80038b2:	0003      	movs	r3, r0
 80038b4:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 80038b6:	4b0a      	ldr	r3, [pc, #40]	; (80038e0 <cJSON_AddNumberToObject+0x48>)
 80038b8:	697a      	ldr	r2, [r7, #20]
 80038ba:	68b9      	ldr	r1, [r7, #8]
 80038bc:	68f8      	ldr	r0, [r7, #12]
 80038be:	2400      	movs	r4, #0
 80038c0:	9400      	str	r4, [sp, #0]
 80038c2:	f7ff ff89 	bl	80037d8 <add_item_to_object>
 80038c6:	1e03      	subs	r3, r0, #0
 80038c8:	d001      	beq.n	80038ce <cJSON_AddNumberToObject+0x36>
    {
        return number_item;
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	e004      	b.n	80038d8 <cJSON_AddNumberToObject+0x40>
    }

    cJSON_Delete(number_item);
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	0018      	movs	r0, r3
 80038d2:	f7fe ffd1 	bl	8002878 <cJSON_Delete>
    return NULL;
 80038d6:	2300      	movs	r3, #0
}
 80038d8:	0018      	movs	r0, r3
 80038da:	46bd      	mov	sp, r7
 80038dc:	b007      	add	sp, #28
 80038de:	bd90      	pop	{r4, r7, pc}
 80038e0:	20000000 	.word	0x20000000

080038e4 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b084      	sub	sp, #16
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6038      	str	r0, [r7, #0]
 80038ec:	6079      	str	r1, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80038ee:	4b1b      	ldr	r3, [pc, #108]	; (800395c <cJSON_CreateNumber+0x78>)
 80038f0:	0018      	movs	r0, r3
 80038f2:	f7fe ffa8 	bl	8002846 <cJSON_New_Item>
 80038f6:	0003      	movs	r3, r0
 80038f8:	60fb      	str	r3, [r7, #12]
    if(item)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d027      	beq.n	8003950 <cJSON_CreateNumber+0x6c>
    {
        item->type = cJSON_Number;
 8003900:	68fb      	ldr	r3, [r7, #12]
 8003902:	2208      	movs	r2, #8
 8003904:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8003906:	68f9      	ldr	r1, [r7, #12]
 8003908:	683a      	ldr	r2, [r7, #0]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	618a      	str	r2, [r1, #24]
 800390e:	61cb      	str	r3, [r1, #28]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8003910:	4a13      	ldr	r2, [pc, #76]	; (8003960 <cJSON_CreateNumber+0x7c>)
 8003912:	4b14      	ldr	r3, [pc, #80]	; (8003964 <cJSON_CreateNumber+0x80>)
 8003914:	6838      	ldr	r0, [r7, #0]
 8003916:	6879      	ldr	r1, [r7, #4]
 8003918:	f7fc fdb2 	bl	8000480 <__aeabi_dcmpge>
 800391c:	1e03      	subs	r3, r0, #0
 800391e:	d003      	beq.n	8003928 <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	4a11      	ldr	r2, [pc, #68]	; (8003968 <cJSON_CreateNumber+0x84>)
 8003924:	615a      	str	r2, [r3, #20]
 8003926:	e013      	b.n	8003950 <cJSON_CreateNumber+0x6c>
        }
        else if (num <= (double)INT_MIN)
 8003928:	2200      	movs	r2, #0
 800392a:	4b10      	ldr	r3, [pc, #64]	; (800396c <cJSON_CreateNumber+0x88>)
 800392c:	6838      	ldr	r0, [r7, #0]
 800392e:	6879      	ldr	r1, [r7, #4]
 8003930:	f7fc fd92 	bl	8000458 <__aeabi_dcmple>
 8003934:	1e03      	subs	r3, r0, #0
 8003936:	d004      	beq.n	8003942 <cJSON_CreateNumber+0x5e>
        {
            item->valueint = INT_MIN;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2280      	movs	r2, #128	; 0x80
 800393c:	0612      	lsls	r2, r2, #24
 800393e:	615a      	str	r2, [r3, #20]
 8003940:	e006      	b.n	8003950 <cJSON_CreateNumber+0x6c>
        }
        else
        {
            item->valueint = (int)num;
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	6879      	ldr	r1, [r7, #4]
 8003946:	f7fe f9b1 	bl	8001cac <__aeabi_d2iz>
 800394a:	0002      	movs	r2, r0
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8003950:	68fb      	ldr	r3, [r7, #12]
}
 8003952:	0018      	movs	r0, r3
 8003954:	46bd      	mov	sp, r7
 8003956:	b004      	add	sp, #16
 8003958:	bd80      	pop	{r7, pc}
 800395a:	46c0      	nop			; (mov r8, r8)
 800395c:	20000000 	.word	0x20000000
 8003960:	ffc00000 	.word	0xffc00000
 8003964:	41dfffff 	.word	0x41dfffff
 8003968:	7fffffff 	.word	0x7fffffff
 800396c:	c1e00000 	.word	0xc1e00000

08003970 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8003976:	4b08      	ldr	r3, [pc, #32]	; (8003998 <cJSON_CreateObject+0x28>)
 8003978:	0018      	movs	r0, r3
 800397a:	f7fe ff64 	bl	8002846 <cJSON_New_Item>
 800397e:	0003      	movs	r3, r0
 8003980:	607b      	str	r3, [r7, #4]
    if (item)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <cJSON_CreateObject+0x1e>
    {
        item->type = cJSON_Object;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2240      	movs	r2, #64	; 0x40
 800398c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800398e:	687b      	ldr	r3, [r7, #4]
}
 8003990:	0018      	movs	r0, r3
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000000 	.word	0x20000000

0800399c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800399c:	b590      	push	{r4, r7, lr}
 800399e:	b087      	sub	sp, #28
 80039a0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80039a2:	f000 fbc7 	bl	8004134 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80039a6:	f000 f81d 	bl	80039e4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80039aa:	f000 f8ff 	bl	8003bac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80039ae:	f000 f8af 	bl	8003b10 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80039b2:	f000 f85f 	bl	8003a74 <MX_USART1_UART_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 80039b6:	1d3b      	adds	r3, r7, #4
 80039b8:	4a08      	ldr	r2, [pc, #32]	; (80039dc <main+0x40>)
 80039ba:	ca13      	ldmia	r2!, {r0, r1, r4}
 80039bc:	c313      	stmia	r3!, {r0, r1, r4}
 80039be:	ca03      	ldmia	r2!, {r0, r1}
 80039c0:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	2100      	movs	r1, #0
 80039c6:	0018      	movs	r0, r3
 80039c8:	f004 fa03 	bl	8007dd2 <osThreadCreate>
 80039cc:	0002      	movs	r2, r0
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <main+0x44>)
 80039d0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Modem_Rx_Process_start();
 80039d2:	f7fe fc5f 	bl	8002294 <Modem_Rx_Process_start>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80039d6:	f004 f9f4 	bl	8007dc2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80039da:	e7fe      	b.n	80039da <main+0x3e>
 80039dc:	08009d20 	.word	0x08009d20
 80039e0:	20000408 	.word	0x20000408

080039e4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80039e4:	b590      	push	{r4, r7, lr}
 80039e6:	b093      	sub	sp, #76	; 0x4c
 80039e8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80039ea:	2410      	movs	r4, #16
 80039ec:	193b      	adds	r3, r7, r4
 80039ee:	0018      	movs	r0, r3
 80039f0:	2338      	movs	r3, #56	; 0x38
 80039f2:	001a      	movs	r2, r3
 80039f4:	2100      	movs	r1, #0
 80039f6:	f005 fbbf 	bl	8009178 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80039fa:	003b      	movs	r3, r7
 80039fc:	0018      	movs	r0, r3
 80039fe:	2310      	movs	r3, #16
 8003a00:	001a      	movs	r2, r3
 8003a02:	2100      	movs	r1, #0
 8003a04:	f005 fbb8 	bl	8009178 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a08:	2380      	movs	r3, #128	; 0x80
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	0018      	movs	r0, r3
 8003a0e:	f000 feff 	bl	8004810 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a12:	193b      	adds	r3, r7, r4
 8003a14:	2202      	movs	r2, #2
 8003a16:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a18:	193b      	adds	r3, r7, r4
 8003a1a:	2280      	movs	r2, #128	; 0x80
 8003a1c:	0052      	lsls	r2, r2, #1
 8003a1e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8003a20:	193b      	adds	r3, r7, r4
 8003a22:	2200      	movs	r2, #0
 8003a24:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a26:	193b      	adds	r3, r7, r4
 8003a28:	2240      	movs	r2, #64	; 0x40
 8003a2a:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8003a2c:	193b      	adds	r3, r7, r4
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003a32:	193b      	adds	r3, r7, r4
 8003a34:	0018      	movs	r0, r3
 8003a36:	f000 ff37 	bl	80048a8 <HAL_RCC_OscConfig>
 8003a3a:	1e03      	subs	r3, r0, #0
 8003a3c:	d001      	beq.n	8003a42 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8003a3e:	f000 f94b 	bl	8003cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003a42:	003b      	movs	r3, r7
 8003a44:	2207      	movs	r2, #7
 8003a46:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8003a48:	003b      	movs	r3, r7
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003a4e:	003b      	movs	r3, r7
 8003a50:	2200      	movs	r2, #0
 8003a52:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003a54:	003b      	movs	r3, r7
 8003a56:	2200      	movs	r2, #0
 8003a58:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8003a5a:	003b      	movs	r3, r7
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	0018      	movs	r0, r3
 8003a60:	f001 fa3c 	bl	8004edc <HAL_RCC_ClockConfig>
 8003a64:	1e03      	subs	r3, r0, #0
 8003a66:	d001      	beq.n	8003a6c <SystemClock_Config+0x88>
  {
    Error_Handler();
 8003a68:	f000 f936 	bl	8003cd8 <Error_Handler>
  }
}
 8003a6c:	46c0      	nop			; (mov r8, r8)
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	b013      	add	sp, #76	; 0x4c
 8003a72:	bd90      	pop	{r4, r7, pc}

08003a74 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8003a74:	b580      	push	{r7, lr}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003a78:	4b23      	ldr	r3, [pc, #140]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003a7a:	4a24      	ldr	r2, [pc, #144]	; (8003b0c <MX_USART1_UART_Init+0x98>)
 8003a7c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8003a7e:	4b22      	ldr	r3, [pc, #136]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003a80:	22e1      	movs	r2, #225	; 0xe1
 8003a82:	0252      	lsls	r2, r2, #9
 8003a84:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003a86:	4b20      	ldr	r3, [pc, #128]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003a88:	2200      	movs	r2, #0
 8003a8a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003a8c:	4b1e      	ldr	r3, [pc, #120]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003a8e:	2200      	movs	r2, #0
 8003a90:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003a92:	4b1d      	ldr	r3, [pc, #116]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003a94:	2200      	movs	r2, #0
 8003a96:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003a98:	4b1b      	ldr	r3, [pc, #108]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003a9a:	220c      	movs	r2, #12
 8003a9c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003a9e:	4b1a      	ldr	r3, [pc, #104]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003aa4:	4b18      	ldr	r3, [pc, #96]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003aaa:	4b17      	ldr	r3, [pc, #92]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003aac:	2200      	movs	r2, #0
 8003aae:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003ab0:	4b15      	ldr	r3, [pc, #84]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ab6:	4b14      	ldr	r3, [pc, #80]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003ab8:	2200      	movs	r2, #0
 8003aba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003abc:	4b12      	ldr	r3, [pc, #72]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003abe:	0018      	movs	r0, r3
 8003ac0:	f002 f822 	bl	8005b08 <HAL_UART_Init>
 8003ac4:	1e03      	subs	r3, r0, #0
 8003ac6:	d001      	beq.n	8003acc <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8003ac8:	f000 f906 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003acc:	4b0e      	ldr	r3, [pc, #56]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003ace:	2100      	movs	r1, #0
 8003ad0:	0018      	movs	r0, r3
 8003ad2:	f004 f819 	bl	8007b08 <HAL_UARTEx_SetTxFifoThreshold>
 8003ad6:	1e03      	subs	r3, r0, #0
 8003ad8:	d001      	beq.n	8003ade <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8003ada:	f000 f8fd 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003ade:	4b0a      	ldr	r3, [pc, #40]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003ae0:	2100      	movs	r1, #0
 8003ae2:	0018      	movs	r0, r3
 8003ae4:	f004 f850 	bl	8007b88 <HAL_UARTEx_SetRxFifoThreshold>
 8003ae8:	1e03      	subs	r3, r0, #0
 8003aea:	d001      	beq.n	8003af0 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8003aec:	f000 f8f4 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8003af0:	4b05      	ldr	r3, [pc, #20]	; (8003b08 <MX_USART1_UART_Init+0x94>)
 8003af2:	0018      	movs	r0, r3
 8003af4:	f003 ffce 	bl	8007a94 <HAL_UARTEx_DisableFifoMode>
 8003af8:	1e03      	subs	r3, r0, #0
 8003afa:	d001      	beq.n	8003b00 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8003afc:	f000 f8ec 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8003b00:	46c0      	nop			; (mov r8, r8)
 8003b02:	46bd      	mov	sp, r7
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	46c0      	nop			; (mov r8, r8)
 8003b08:	200002e0 	.word	0x200002e0
 8003b0c:	40013800 	.word	0x40013800

08003b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003b14:	4b23      	ldr	r3, [pc, #140]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b16:	4a24      	ldr	r2, [pc, #144]	; (8003ba8 <MX_USART2_UART_Init+0x98>)
 8003b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003b1a:	4b22      	ldr	r3, [pc, #136]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b1c:	22e1      	movs	r2, #225	; 0xe1
 8003b1e:	0252      	lsls	r2, r2, #9
 8003b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b22:	4b20      	ldr	r3, [pc, #128]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b24:	2200      	movs	r2, #0
 8003b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003b28:	4b1e      	ldr	r3, [pc, #120]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003b2e:	4b1d      	ldr	r3, [pc, #116]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b30:	2200      	movs	r2, #0
 8003b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003b34:	4b1b      	ldr	r3, [pc, #108]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b36:	220c      	movs	r2, #12
 8003b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b3a:	4b1a      	ldr	r3, [pc, #104]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b40:	4b18      	ldr	r3, [pc, #96]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b42:	2200      	movs	r2, #0
 8003b44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b46:	4b17      	ldr	r3, [pc, #92]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b48:	2200      	movs	r2, #0
 8003b4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8003b4c:	4b15      	ldr	r3, [pc, #84]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b52:	4b14      	ldr	r3, [pc, #80]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003b58:	4b12      	ldr	r3, [pc, #72]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b5a:	0018      	movs	r0, r3
 8003b5c:	f001 ffd4 	bl	8005b08 <HAL_UART_Init>
 8003b60:	1e03      	subs	r3, r0, #0
 8003b62:	d001      	beq.n	8003b68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8003b64:	f000 f8b8 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b68:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b6a:	2100      	movs	r1, #0
 8003b6c:	0018      	movs	r0, r3
 8003b6e:	f003 ffcb 	bl	8007b08 <HAL_UARTEx_SetTxFifoThreshold>
 8003b72:	1e03      	subs	r3, r0, #0
 8003b74:	d001      	beq.n	8003b7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8003b76:	f000 f8af 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8003b7a:	4b0a      	ldr	r3, [pc, #40]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b7c:	2100      	movs	r1, #0
 8003b7e:	0018      	movs	r0, r3
 8003b80:	f004 f802 	bl	8007b88 <HAL_UARTEx_SetRxFifoThreshold>
 8003b84:	1e03      	subs	r3, r0, #0
 8003b86:	d001      	beq.n	8003b8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8003b88:	f000 f8a6 	bl	8003cd8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8003b8c:	4b05      	ldr	r3, [pc, #20]	; (8003ba4 <MX_USART2_UART_Init+0x94>)
 8003b8e:	0018      	movs	r0, r3
 8003b90:	f003 ff80 	bl	8007a94 <HAL_UARTEx_DisableFifoMode>
 8003b94:	1e03      	subs	r3, r0, #0
 8003b96:	d001      	beq.n	8003b9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8003b98:	f000 f89e 	bl	8003cd8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003b9c:	46c0      	nop			; (mov r8, r8)
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	46c0      	nop			; (mov r8, r8)
 8003ba4:	20000374 	.word	0x20000374
 8003ba8:	40004400 	.word	0x40004400

08003bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003bac:	b590      	push	{r4, r7, lr}
 8003bae:	b089      	sub	sp, #36	; 0x24
 8003bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb2:	240c      	movs	r4, #12
 8003bb4:	193b      	adds	r3, r7, r4
 8003bb6:	0018      	movs	r0, r3
 8003bb8:	2314      	movs	r3, #20
 8003bba:	001a      	movs	r2, r3
 8003bbc:	2100      	movs	r1, #0
 8003bbe:	f005 fadb 	bl	8009178 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bc2:	4b20      	ldr	r3, [pc, #128]	; (8003c44 <MX_GPIO_Init+0x98>)
 8003bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bc6:	4b1f      	ldr	r3, [pc, #124]	; (8003c44 <MX_GPIO_Init+0x98>)
 8003bc8:	2104      	movs	r1, #4
 8003bca:	430a      	orrs	r2, r1
 8003bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8003bce:	4b1d      	ldr	r3, [pc, #116]	; (8003c44 <MX_GPIO_Init+0x98>)
 8003bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bd2:	2204      	movs	r2, #4
 8003bd4:	4013      	ands	r3, r2
 8003bd6:	60bb      	str	r3, [r7, #8]
 8003bd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8003bda:	4b1a      	ldr	r3, [pc, #104]	; (8003c44 <MX_GPIO_Init+0x98>)
 8003bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bde:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <MX_GPIO_Init+0x98>)
 8003be0:	2120      	movs	r1, #32
 8003be2:	430a      	orrs	r2, r1
 8003be4:	635a      	str	r2, [r3, #52]	; 0x34
 8003be6:	4b17      	ldr	r3, [pc, #92]	; (8003c44 <MX_GPIO_Init+0x98>)
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	2220      	movs	r2, #32
 8003bec:	4013      	ands	r3, r2
 8003bee:	607b      	str	r3, [r7, #4]
 8003bf0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bf2:	4b14      	ldr	r3, [pc, #80]	; (8003c44 <MX_GPIO_Init+0x98>)
 8003bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003bf6:	4b13      	ldr	r3, [pc, #76]	; (8003c44 <MX_GPIO_Init+0x98>)
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	430a      	orrs	r2, r1
 8003bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8003bfe:	4b11      	ldr	r3, [pc, #68]	; (8003c44 <MX_GPIO_Init+0x98>)
 8003c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003c02:	2201      	movs	r2, #1
 8003c04:	4013      	ands	r3, r2
 8003c06:	603b      	str	r3, [r7, #0]
 8003c08:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8003c0a:	193b      	adds	r3, r7, r4
 8003c0c:	2280      	movs	r2, #128	; 0x80
 8003c0e:	0192      	lsls	r2, r2, #6
 8003c10:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8003c12:	193b      	adds	r3, r7, r4
 8003c14:	2288      	movs	r2, #136	; 0x88
 8003c16:	0352      	lsls	r2, r2, #13
 8003c18:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1a:	193b      	adds	r3, r7, r4
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c20:	193b      	adds	r3, r7, r4
 8003c22:	4a09      	ldr	r2, [pc, #36]	; (8003c48 <MX_GPIO_Init+0x9c>)
 8003c24:	0019      	movs	r1, r3
 8003c26:	0010      	movs	r0, r2
 8003c28:	f000 fc50 	bl	80044cc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	2103      	movs	r1, #3
 8003c30:	2007      	movs	r0, #7
 8003c32:	f000 fb59 	bl	80042e8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8003c36:	2007      	movs	r0, #7
 8003c38:	f000 fb6b 	bl	8004312 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b009      	add	sp, #36	; 0x24
 8003c42:	bd90      	pop	{r4, r7, pc}
 8003c44:	40021000 	.word	0x40021000
 8003c48:	50000800 	.word	0x50000800

08003c4c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b082      	sub	sp, #8
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1,(uint8_t*)EC200u_Rx_Buff, sizeof(EC200u_Rx_Buff));
 8003c54:	4914      	ldr	r1, [pc, #80]	; (8003ca8 <StartDefaultTask+0x5c>)
 8003c56:	4b15      	ldr	r3, [pc, #84]	; (8003cac <StartDefaultTask+0x60>)
 8003c58:	2264      	movs	r2, #100	; 0x64
 8003c5a:	0018      	movs	r0, r3
 8003c5c:	f003 ffd6 	bl	8007c0c <HAL_UARTEx_ReceiveToIdle_IT>

//  osDelay(1000);

  modem_initiate_cmd(MODEM_AT_CHECK);
 8003c60:	2000      	movs	r0, #0
 8003c62:	f7fe f90d 	bl	8001e80 <modem_initiate_cmd>
  osDelay(300);
 8003c66:	2396      	movs	r3, #150	; 0x96
 8003c68:	005b      	lsls	r3, r3, #1
 8003c6a:	0018      	movs	r0, r3
 8003c6c:	f004 f8d9 	bl	8007e22 <osDelay>

  modem_initiate_cmd(MODEM_DISABLE_ECHO);
 8003c70:	2003      	movs	r0, #3
 8003c72:	f7fe f905 	bl	8001e80 <modem_initiate_cmd>
  osDelay(300);
 8003c76:	2396      	movs	r3, #150	; 0x96
 8003c78:	005b      	lsls	r3, r3, #1
 8003c7a:	0018      	movs	r0, r3
 8003c7c:	f004 f8d1 	bl	8007e22 <osDelay>

  get_modem_info();
 8003c80:	f7fe fa26 	bl	80020d0 <get_modem_info>

  modem_set_sim_configurations();
 8003c84:	f7fe fa41 	bl	800210a <modem_set_sim_configurations>

  modem_mqtt_init();
 8003c88:	f7fe fa6c 	bl	8002164 <modem_mqtt_init>
  for(;;)
  {
	//HAL_UART_Transmit(&huart1,(uint8_t*)"AT\r\n",strlen("AT\r\n"), 1000);
	//HAL_UART_Transmit(&huart2,(uint8_t*)"Hello\r\n",strlen("Hello\r\n"), 1000);
	//sprintf(MQTT_PUB_Buff,"Msg_count:%d",Msg_cnt++);
	Msg_cnt++;
 8003c8c:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <StartDefaultTask+0x64>)
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	1c5a      	adds	r2, r3, #1
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <StartDefaultTask+0x64>)
 8003c94:	601a      	str	r2, [r3, #0]
	modem_mqtt_publish();
 8003c96:	f7fe fa8a 	bl	80021ae <modem_mqtt_publish>
    osDelay(500);
 8003c9a:	23fa      	movs	r3, #250	; 0xfa
 8003c9c:	005b      	lsls	r3, r3, #1
 8003c9e:	0018      	movs	r0, r3
 8003ca0:	f004 f8bf 	bl	8007e22 <osDelay>
	Msg_cnt++;
 8003ca4:	e7f2      	b.n	8003c8c <StartDefaultTask+0x40>
 8003ca6:	46c0      	nop			; (mov r8, r8)
 8003ca8:	20000410 	.word	0x20000410
 8003cac:	200002e0 	.word	0x200002e0
 8003cb0:	20000474 	.word	0x20000474

08003cb4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003cb4:	b580      	push	{r7, lr}
 8003cb6:	b082      	sub	sp, #8
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	4a04      	ldr	r2, [pc, #16]	; (8003cd4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d101      	bne.n	8003cca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8003cc6:	f000 fa55 	bl	8004174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	b002      	add	sp, #8
 8003cd0:	bd80      	pop	{r7, pc}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	40014800 	.word	0x40014800

08003cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003cdc:	b672      	cpsid	i
}
 8003cde:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003ce0:	e7fe      	b.n	8003ce0 <Error_Handler+0x8>
	...

08003ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b082      	sub	sp, #8
 8003ce8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003cea:	4b15      	ldr	r3, [pc, #84]	; (8003d40 <HAL_MspInit+0x5c>)
 8003cec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003cee:	4b14      	ldr	r3, [pc, #80]	; (8003d40 <HAL_MspInit+0x5c>)
 8003cf0:	2101      	movs	r1, #1
 8003cf2:	430a      	orrs	r2, r1
 8003cf4:	641a      	str	r2, [r3, #64]	; 0x40
 8003cf6:	4b12      	ldr	r3, [pc, #72]	; (8003d40 <HAL_MspInit+0x5c>)
 8003cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	4013      	ands	r3, r2
 8003cfe:	607b      	str	r3, [r7, #4]
 8003d00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d02:	4b0f      	ldr	r3, [pc, #60]	; (8003d40 <HAL_MspInit+0x5c>)
 8003d04:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d06:	4b0e      	ldr	r3, [pc, #56]	; (8003d40 <HAL_MspInit+0x5c>)
 8003d08:	2180      	movs	r1, #128	; 0x80
 8003d0a:	0549      	lsls	r1, r1, #21
 8003d0c:	430a      	orrs	r2, r1
 8003d0e:	63da      	str	r2, [r3, #60]	; 0x3c
 8003d10:	4b0b      	ldr	r3, [pc, #44]	; (8003d40 <HAL_MspInit+0x5c>)
 8003d12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d14:	2380      	movs	r3, #128	; 0x80
 8003d16:	055b      	lsls	r3, r3, #21
 8003d18:	4013      	ands	r3, r2
 8003d1a:	603b      	str	r3, [r7, #0]
 8003d1c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8003d1e:	2302      	movs	r3, #2
 8003d20:	425b      	negs	r3, r3
 8003d22:	2200      	movs	r2, #0
 8003d24:	2103      	movs	r1, #3
 8003d26:	0018      	movs	r0, r3
 8003d28:	f000 fade 	bl	80042e8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8003d2c:	23c0      	movs	r3, #192	; 0xc0
 8003d2e:	00db      	lsls	r3, r3, #3
 8003d30:	0018      	movs	r0, r3
 8003d32:	f000 fa3b 	bl	80041ac <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003d36:	46c0      	nop			; (mov r8, r8)
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	b002      	add	sp, #8
 8003d3c:	bd80      	pop	{r7, pc}
 8003d3e:	46c0      	nop			; (mov r8, r8)
 8003d40:	40021000 	.word	0x40021000

08003d44 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003d44:	b590      	push	{r4, r7, lr}
 8003d46:	b099      	sub	sp, #100	; 0x64
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d4c:	234c      	movs	r3, #76	; 0x4c
 8003d4e:	18fb      	adds	r3, r7, r3
 8003d50:	0018      	movs	r0, r3
 8003d52:	2314      	movs	r3, #20
 8003d54:	001a      	movs	r2, r3
 8003d56:	2100      	movs	r1, #0
 8003d58:	f005 fa0e 	bl	8009178 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003d5c:	2418      	movs	r4, #24
 8003d5e:	193b      	adds	r3, r7, r4
 8003d60:	0018      	movs	r0, r3
 8003d62:	2334      	movs	r3, #52	; 0x34
 8003d64:	001a      	movs	r2, r3
 8003d66:	2100      	movs	r1, #0
 8003d68:	f005 fa06 	bl	8009178 <memset>
  if(huart->Instance==USART1)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4a4d      	ldr	r2, [pc, #308]	; (8003ea8 <HAL_UART_MspInit+0x164>)
 8003d72:	4293      	cmp	r3, r2
 8003d74:	d146      	bne.n	8003e04 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003d76:	193b      	adds	r3, r7, r4
 8003d78:	2201      	movs	r2, #1
 8003d7a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8003d7c:	193b      	adds	r3, r7, r4
 8003d7e:	2200      	movs	r2, #0
 8003d80:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003d82:	193b      	adds	r3, r7, r4
 8003d84:	0018      	movs	r0, r3
 8003d86:	f001 fa7d 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 8003d8a:	1e03      	subs	r3, r0, #0
 8003d8c:	d001      	beq.n	8003d92 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8003d8e:	f7ff ffa3 	bl	8003cd8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003d92:	4b46      	ldr	r3, [pc, #280]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003d94:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003d96:	4b45      	ldr	r3, [pc, #276]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003d98:	2180      	movs	r1, #128	; 0x80
 8003d9a:	01c9      	lsls	r1, r1, #7
 8003d9c:	430a      	orrs	r2, r1
 8003d9e:	641a      	str	r2, [r3, #64]	; 0x40
 8003da0:	4b42      	ldr	r3, [pc, #264]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003da2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003da4:	2380      	movs	r3, #128	; 0x80
 8003da6:	01db      	lsls	r3, r3, #7
 8003da8:	4013      	ands	r3, r2
 8003daa:	617b      	str	r3, [r7, #20]
 8003dac:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003dae:	4b3f      	ldr	r3, [pc, #252]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003db0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003db2:	4b3e      	ldr	r3, [pc, #248]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003db4:	2104      	movs	r1, #4
 8003db6:	430a      	orrs	r2, r1
 8003db8:	635a      	str	r2, [r3, #52]	; 0x34
 8003dba:	4b3c      	ldr	r3, [pc, #240]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003dbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	4013      	ands	r3, r2
 8003dc2:	613b      	str	r3, [r7, #16]
 8003dc4:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003dc6:	214c      	movs	r1, #76	; 0x4c
 8003dc8:	187b      	adds	r3, r7, r1
 8003dca:	2230      	movs	r2, #48	; 0x30
 8003dcc:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dce:	187b      	adds	r3, r7, r1
 8003dd0:	2202      	movs	r2, #2
 8003dd2:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd4:	187b      	adds	r3, r7, r1
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003dda:	187b      	adds	r3, r7, r1
 8003ddc:	2200      	movs	r2, #0
 8003dde:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8003de0:	187b      	adds	r3, r7, r1
 8003de2:	2201      	movs	r2, #1
 8003de4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003de6:	187b      	adds	r3, r7, r1
 8003de8:	4a31      	ldr	r2, [pc, #196]	; (8003eb0 <HAL_UART_MspInit+0x16c>)
 8003dea:	0019      	movs	r1, r3
 8003dec:	0010      	movs	r0, r2
 8003dee:	f000 fb6d 	bl	80044cc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8003df2:	2200      	movs	r2, #0
 8003df4:	2103      	movs	r1, #3
 8003df6:	201b      	movs	r0, #27
 8003df8:	f000 fa76 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003dfc:	201b      	movs	r0, #27
 8003dfe:	f000 fa88 	bl	8004312 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003e02:	e04c      	b.n	8003e9e <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	4a2a      	ldr	r2, [pc, #168]	; (8003eb4 <HAL_UART_MspInit+0x170>)
 8003e0a:	4293      	cmp	r3, r2
 8003e0c:	d147      	bne.n	8003e9e <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003e0e:	2118      	movs	r1, #24
 8003e10:	187b      	adds	r3, r7, r1
 8003e12:	2202      	movs	r2, #2
 8003e14:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003e16:	187b      	adds	r3, r7, r1
 8003e18:	2200      	movs	r2, #0
 8003e1a:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003e1c:	187b      	adds	r3, r7, r1
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f001 fa30 	bl	8005284 <HAL_RCCEx_PeriphCLKConfig>
 8003e24:	1e03      	subs	r3, r0, #0
 8003e26:	d001      	beq.n	8003e2c <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8003e28:	f7ff ff56 	bl	8003cd8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003e2c:	4b1f      	ldr	r3, [pc, #124]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003e2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e30:	4b1e      	ldr	r3, [pc, #120]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003e32:	2180      	movs	r1, #128	; 0x80
 8003e34:	0289      	lsls	r1, r1, #10
 8003e36:	430a      	orrs	r2, r1
 8003e38:	63da      	str	r2, [r3, #60]	; 0x3c
 8003e3a:	4b1c      	ldr	r3, [pc, #112]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003e3c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	029b      	lsls	r3, r3, #10
 8003e42:	4013      	ands	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]
 8003e46:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003e48:	4b18      	ldr	r3, [pc, #96]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003e4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e4c:	4b17      	ldr	r3, [pc, #92]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003e4e:	2101      	movs	r1, #1
 8003e50:	430a      	orrs	r2, r1
 8003e52:	635a      	str	r2, [r3, #52]	; 0x34
 8003e54:	4b15      	ldr	r3, [pc, #84]	; (8003eac <HAL_UART_MspInit+0x168>)
 8003e56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e58:	2201      	movs	r2, #1
 8003e5a:	4013      	ands	r3, r2
 8003e5c:	60bb      	str	r3, [r7, #8]
 8003e5e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003e60:	214c      	movs	r1, #76	; 0x4c
 8003e62:	187b      	adds	r3, r7, r1
 8003e64:	220c      	movs	r2, #12
 8003e66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e68:	187b      	adds	r3, r7, r1
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e6e:	187b      	adds	r3, r7, r1
 8003e70:	2200      	movs	r2, #0
 8003e72:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e74:	187b      	adds	r3, r7, r1
 8003e76:	2200      	movs	r2, #0
 8003e78:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8003e7a:	187b      	adds	r3, r7, r1
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e80:	187a      	adds	r2, r7, r1
 8003e82:	23a0      	movs	r3, #160	; 0xa0
 8003e84:	05db      	lsls	r3, r3, #23
 8003e86:	0011      	movs	r1, r2
 8003e88:	0018      	movs	r0, r3
 8003e8a:	f000 fb1f 	bl	80044cc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8003e8e:	2200      	movs	r2, #0
 8003e90:	2103      	movs	r1, #3
 8003e92:	201c      	movs	r0, #28
 8003e94:	f000 fa28 	bl	80042e8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003e98:	201c      	movs	r0, #28
 8003e9a:	f000 fa3a 	bl	8004312 <HAL_NVIC_EnableIRQ>
}
 8003e9e:	46c0      	nop			; (mov r8, r8)
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	b019      	add	sp, #100	; 0x64
 8003ea4:	bd90      	pop	{r4, r7, pc}
 8003ea6:	46c0      	nop			; (mov r8, r8)
 8003ea8:	40013800 	.word	0x40013800
 8003eac:	40021000 	.word	0x40021000
 8003eb0:	50000800 	.word	0x50000800
 8003eb4:	40004400 	.word	0x40004400

08003eb8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003eb8:	b5b0      	push	{r4, r5, r7, lr}
 8003eba:	b08c      	sub	sp, #48	; 0x30
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003ec0:	232b      	movs	r3, #43	; 0x2b
 8003ec2:	18fb      	adds	r3, r7, r3
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8003ec8:	4b38      	ldr	r3, [pc, #224]	; (8003fac <HAL_InitTick+0xf4>)
 8003eca:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ecc:	4b37      	ldr	r3, [pc, #220]	; (8003fac <HAL_InitTick+0xf4>)
 8003ece:	2180      	movs	r1, #128	; 0x80
 8003ed0:	02c9      	lsls	r1, r1, #11
 8003ed2:	430a      	orrs	r2, r1
 8003ed4:	641a      	str	r2, [r3, #64]	; 0x40
 8003ed6:	4b35      	ldr	r3, [pc, #212]	; (8003fac <HAL_InitTick+0xf4>)
 8003ed8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eda:	2380      	movs	r3, #128	; 0x80
 8003edc:	02db      	lsls	r3, r3, #11
 8003ede:	4013      	ands	r3, r2
 8003ee0:	60bb      	str	r3, [r7, #8]
 8003ee2:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003ee4:	230c      	movs	r3, #12
 8003ee6:	18fa      	adds	r2, r7, r3
 8003ee8:	2410      	movs	r4, #16
 8003eea:	193b      	adds	r3, r7, r4
 8003eec:	0011      	movs	r1, r2
 8003eee:	0018      	movs	r0, r3
 8003ef0:	f001 f99e 	bl	8005230 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003ef4:	193b      	adds	r3, r7, r4
 8003ef6:	68db      	ldr	r3, [r3, #12]
 8003ef8:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003efa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d104      	bne.n	8003f0a <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003f00:	f001 f980 	bl	8005204 <HAL_RCC_GetPCLK1Freq>
 8003f04:	0003      	movs	r3, r0
 8003f06:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003f08:	e004      	b.n	8003f14 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003f0a:	f001 f97b 	bl	8005204 <HAL_RCC_GetPCLK1Freq>
 8003f0e:	0003      	movs	r3, r0
 8003f10:	005b      	lsls	r3, r3, #1
 8003f12:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003f14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f16:	4926      	ldr	r1, [pc, #152]	; (8003fb0 <HAL_InitTick+0xf8>)
 8003f18:	0018      	movs	r0, r3
 8003f1a:	f7fc f907 	bl	800012c <__udivsi3>
 8003f1e:	0003      	movs	r3, r0
 8003f20:	3b01      	subs	r3, #1
 8003f22:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8003f24:	4b23      	ldr	r3, [pc, #140]	; (8003fb4 <HAL_InitTick+0xfc>)
 8003f26:	4a24      	ldr	r2, [pc, #144]	; (8003fb8 <HAL_InitTick+0x100>)
 8003f28:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8003f2a:	4b22      	ldr	r3, [pc, #136]	; (8003fb4 <HAL_InitTick+0xfc>)
 8003f2c:	4a23      	ldr	r2, [pc, #140]	; (8003fbc <HAL_InitTick+0x104>)
 8003f2e:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8003f30:	4b20      	ldr	r3, [pc, #128]	; (8003fb4 <HAL_InitTick+0xfc>)
 8003f32:	6a3a      	ldr	r2, [r7, #32]
 8003f34:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8003f36:	4b1f      	ldr	r3, [pc, #124]	; (8003fb4 <HAL_InitTick+0xfc>)
 8003f38:	2200      	movs	r2, #0
 8003f3a:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003f3c:	4b1d      	ldr	r3, [pc, #116]	; (8003fb4 <HAL_InitTick+0xfc>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003f42:	4b1c      	ldr	r3, [pc, #112]	; (8003fb4 <HAL_InitTick+0xfc>)
 8003f44:	2200      	movs	r2, #0
 8003f46:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8003f48:	252b      	movs	r5, #43	; 0x2b
 8003f4a:	197c      	adds	r4, r7, r5
 8003f4c:	4b19      	ldr	r3, [pc, #100]	; (8003fb4 <HAL_InitTick+0xfc>)
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f001 fb50 	bl	80055f4 <HAL_TIM_Base_Init>
 8003f54:	0003      	movs	r3, r0
 8003f56:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8003f58:	197b      	adds	r3, r7, r5
 8003f5a:	781b      	ldrb	r3, [r3, #0]
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d11e      	bne.n	8003f9e <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8003f60:	197c      	adds	r4, r7, r5
 8003f62:	4b14      	ldr	r3, [pc, #80]	; (8003fb4 <HAL_InitTick+0xfc>)
 8003f64:	0018      	movs	r0, r3
 8003f66:	f001 fba5 	bl	80056b4 <HAL_TIM_Base_Start_IT>
 8003f6a:	0003      	movs	r3, r0
 8003f6c:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8003f6e:	197b      	adds	r3, r7, r5
 8003f70:	781b      	ldrb	r3, [r3, #0]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d113      	bne.n	8003f9e <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8003f76:	2016      	movs	r0, #22
 8003f78:	f000 f9cb 	bl	8004312 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d809      	bhi.n	8003f96 <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	0019      	movs	r1, r3
 8003f88:	2016      	movs	r0, #22
 8003f8a:	f000 f9ad 	bl	80042e8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003f8e:	4b0c      	ldr	r3, [pc, #48]	; (8003fc0 <HAL_InitTick+0x108>)
 8003f90:	687a      	ldr	r2, [r7, #4]
 8003f92:	601a      	str	r2, [r3, #0]
 8003f94:	e003      	b.n	8003f9e <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8003f96:	232b      	movs	r3, #43	; 0x2b
 8003f98:	18fb      	adds	r3, r7, r3
 8003f9a:	2201      	movs	r2, #1
 8003f9c:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8003f9e:	232b      	movs	r3, #43	; 0x2b
 8003fa0:	18fb      	adds	r3, r7, r3
 8003fa2:	781b      	ldrb	r3, [r3, #0]
}
 8003fa4:	0018      	movs	r0, r3
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b00c      	add	sp, #48	; 0x30
 8003faa:	bdb0      	pop	{r4, r5, r7, pc}
 8003fac:	40021000 	.word	0x40021000
 8003fb0:	000f4240 	.word	0x000f4240
 8003fb4:	20000478 	.word	0x20000478
 8003fb8:	40014800 	.word	0x40014800
 8003fbc:	000003e7 	.word	0x000003e7
 8003fc0:	20000010 	.word	0x20000010

08003fc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003fc8:	e7fe      	b.n	8003fc8 <NMI_Handler+0x4>

08003fca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003fca:	b580      	push	{r7, lr}
 8003fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003fce:	e7fe      	b.n	8003fce <HardFault_Handler+0x4>

08003fd0 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8003fd4:	2380      	movs	r3, #128	; 0x80
 8003fd6:	019b      	lsls	r3, r3, #6
 8003fd8:	0018      	movs	r0, r3
 8003fda:	f000 fbdb 	bl	8004794 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8003fde:	46c0      	nop			; (mov r8, r8)
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bd80      	pop	{r7, pc}

08003fe4 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <TIM17_IRQHandler+0x14>)
 8003fea:	0018      	movs	r0, r3
 8003fec:	f001 fbbe 	bl	800576c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8003ff0:	46c0      	nop			; (mov r8, r8)
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bd80      	pop	{r7, pc}
 8003ff6:	46c0      	nop			; (mov r8, r8)
 8003ff8:	20000478 	.word	0x20000478

08003ffc <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8003ffc:	b580      	push	{r7, lr}
 8003ffe:	b082      	sub	sp, #8
 8004000:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004002:	2300      	movs	r3, #0
 8004004:	607b      	str	r3, [r7, #4]

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004006:	4b0e      	ldr	r3, [pc, #56]	; (8004040 <USART1_IRQHandler+0x44>)
 8004008:	0018      	movs	r0, r3
 800400a:	f001 fe77 	bl	8005cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  vTaskNotifyGiveFromISR(ModemRx_TaskHandle, &xHigherPriorityTaskWoken);
 800400e:	4b0d      	ldr	r3, [pc, #52]	; (8004044 <USART1_IRQHandler+0x48>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	1d3a      	adds	r2, r7, #4
 8004014:	0011      	movs	r1, r2
 8004016:	0018      	movs	r0, r3
 8004018:	f004 fbd8 	bl	80087cc <vTaskNotifyGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d003      	beq.n	800402a <USART1_IRQHandler+0x2e>
 8004022:	4b09      	ldr	r3, [pc, #36]	; (8004048 <USART1_IRQHandler+0x4c>)
 8004024:	2280      	movs	r2, #128	; 0x80
 8004026:	0552      	lsls	r2, r2, #21
 8004028:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_IT(&huart1,(uint8_t*)EC200u_Rx_Buff, sizeof(EC200u_Rx_Buff));
 800402a:	4908      	ldr	r1, [pc, #32]	; (800404c <USART1_IRQHandler+0x50>)
 800402c:	4b04      	ldr	r3, [pc, #16]	; (8004040 <USART1_IRQHandler+0x44>)
 800402e:	2264      	movs	r2, #100	; 0x64
 8004030:	0018      	movs	r0, r3
 8004032:	f003 fdeb 	bl	8007c0c <HAL_UARTEx_ReceiveToIdle_IT>
//  memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
  /* USER CODE END USART1_IRQn 1 */
}
 8004036:	46c0      	nop			; (mov r8, r8)
 8004038:	46bd      	mov	sp, r7
 800403a:	b002      	add	sp, #8
 800403c:	bd80      	pop	{r7, pc}
 800403e:	46c0      	nop			; (mov r8, r8)
 8004040:	200002e0 	.word	0x200002e0
 8004044:	2000040c 	.word	0x2000040c
 8004048:	e000ed04 	.word	0xe000ed04
 800404c:	20000410 	.word	0x20000410

08004050 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004054:	4b03      	ldr	r3, [pc, #12]	; (8004064 <USART2_IRQHandler+0x14>)
 8004056:	0018      	movs	r0, r3
 8004058:	f001 fe50 	bl	8005cfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800405c:	46c0      	nop			; (mov r8, r8)
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	46c0      	nop			; (mov r8, r8)
 8004064:	20000374 	.word	0x20000374

08004068 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b086      	sub	sp, #24
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004070:	4a14      	ldr	r2, [pc, #80]	; (80040c4 <_sbrk+0x5c>)
 8004072:	4b15      	ldr	r3, [pc, #84]	; (80040c8 <_sbrk+0x60>)
 8004074:	1ad3      	subs	r3, r2, r3
 8004076:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004078:	697b      	ldr	r3, [r7, #20]
 800407a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800407c:	4b13      	ldr	r3, [pc, #76]	; (80040cc <_sbrk+0x64>)
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	2b00      	cmp	r3, #0
 8004082:	d102      	bne.n	800408a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004084:	4b11      	ldr	r3, [pc, #68]	; (80040cc <_sbrk+0x64>)
 8004086:	4a12      	ldr	r2, [pc, #72]	; (80040d0 <_sbrk+0x68>)
 8004088:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800408a:	4b10      	ldr	r3, [pc, #64]	; (80040cc <_sbrk+0x64>)
 800408c:	681a      	ldr	r2, [r3, #0]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	18d3      	adds	r3, r2, r3
 8004092:	693a      	ldr	r2, [r7, #16]
 8004094:	429a      	cmp	r2, r3
 8004096:	d207      	bcs.n	80040a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004098:	f005 f8c4 	bl	8009224 <__errno>
 800409c:	0003      	movs	r3, r0
 800409e:	220c      	movs	r2, #12
 80040a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80040a2:	2301      	movs	r3, #1
 80040a4:	425b      	negs	r3, r3
 80040a6:	e009      	b.n	80040bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80040a8:	4b08      	ldr	r3, [pc, #32]	; (80040cc <_sbrk+0x64>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80040ae:	4b07      	ldr	r3, [pc, #28]	; (80040cc <_sbrk+0x64>)
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	18d2      	adds	r2, r2, r3
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <_sbrk+0x64>)
 80040b8:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 80040ba:	68fb      	ldr	r3, [r7, #12]
}
 80040bc:	0018      	movs	r0, r3
 80040be:	46bd      	mov	sp, r7
 80040c0:	b006      	add	sp, #24
 80040c2:	bd80      	pop	{r7, pc}
 80040c4:	20009000 	.word	0x20009000
 80040c8:	00000400 	.word	0x00000400
 80040cc:	200004c4 	.word	0x200004c4
 80040d0:	20001760 	.word	0x20001760

080040d4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80040d4:	b580      	push	{r7, lr}
 80040d6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80040d8:	46c0      	nop			; (mov r8, r8)
 80040da:	46bd      	mov	sp, r7
 80040dc:	bd80      	pop	{r7, pc}
	...

080040e0 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80040e0:	480d      	ldr	r0, [pc, #52]	; (8004118 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80040e2:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 80040e4:	f7ff fff6 	bl	80040d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80040e8:	480c      	ldr	r0, [pc, #48]	; (800411c <LoopForever+0x6>)
  ldr r1, =_edata
 80040ea:	490d      	ldr	r1, [pc, #52]	; (8004120 <LoopForever+0xa>)
  ldr r2, =_sidata
 80040ec:	4a0d      	ldr	r2, [pc, #52]	; (8004124 <LoopForever+0xe>)
  movs r3, #0
 80040ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80040f0:	e002      	b.n	80040f8 <LoopCopyDataInit>

080040f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80040f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80040f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80040f6:	3304      	adds	r3, #4

080040f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80040f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80040fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80040fc:	d3f9      	bcc.n	80040f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80040fe:	4a0a      	ldr	r2, [pc, #40]	; (8004128 <LoopForever+0x12>)
  ldr r4, =_ebss
 8004100:	4c0a      	ldr	r4, [pc, #40]	; (800412c <LoopForever+0x16>)
  movs r3, #0
 8004102:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004104:	e001      	b.n	800410a <LoopFillZerobss>

08004106 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004106:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004108:	3204      	adds	r2, #4

0800410a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800410a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800410c:	d3fb      	bcc.n	8004106 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 800410e:	f005 f88f 	bl	8009230 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004112:	f7ff fc43 	bl	800399c <main>

08004116 <LoopForever>:

LoopForever:
  b LoopForever
 8004116:	e7fe      	b.n	8004116 <LoopForever>
  ldr   r0, =_estack
 8004118:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 800411c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004120:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8004124:	08009fb0 	.word	0x08009fb0
  ldr r2, =_sbss
 8004128:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800412c:	20001760 	.word	0x20001760

08004130 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004130:	e7fe      	b.n	8004130 <ADC1_COMP_IRQHandler>
	...

08004134 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800413a:	1dfb      	adds	r3, r7, #7
 800413c:	2200      	movs	r2, #0
 800413e:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004140:	4b0b      	ldr	r3, [pc, #44]	; (8004170 <HAL_Init+0x3c>)
 8004142:	681a      	ldr	r2, [r3, #0]
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <HAL_Init+0x3c>)
 8004146:	2180      	movs	r1, #128	; 0x80
 8004148:	0049      	lsls	r1, r1, #1
 800414a:	430a      	orrs	r2, r1
 800414c:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800414e:	2003      	movs	r0, #3
 8004150:	f7ff feb2 	bl	8003eb8 <HAL_InitTick>
 8004154:	1e03      	subs	r3, r0, #0
 8004156:	d003      	beq.n	8004160 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004158:	1dfb      	adds	r3, r7, #7
 800415a:	2201      	movs	r2, #1
 800415c:	701a      	strb	r2, [r3, #0]
 800415e:	e001      	b.n	8004164 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004160:	f7ff fdc0 	bl	8003ce4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004164:	1dfb      	adds	r3, r7, #7
 8004166:	781b      	ldrb	r3, [r3, #0]
}
 8004168:	0018      	movs	r0, r3
 800416a:	46bd      	mov	sp, r7
 800416c:	b002      	add	sp, #8
 800416e:	bd80      	pop	{r7, pc}
 8004170:	40022000 	.word	0x40022000

08004174 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004174:	b580      	push	{r7, lr}
 8004176:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004178:	4b05      	ldr	r3, [pc, #20]	; (8004190 <HAL_IncTick+0x1c>)
 800417a:	781b      	ldrb	r3, [r3, #0]
 800417c:	001a      	movs	r2, r3
 800417e:	4b05      	ldr	r3, [pc, #20]	; (8004194 <HAL_IncTick+0x20>)
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	18d2      	adds	r2, r2, r3
 8004184:	4b03      	ldr	r3, [pc, #12]	; (8004194 <HAL_IncTick+0x20>)
 8004186:	601a      	str	r2, [r3, #0]
}
 8004188:	46c0      	nop			; (mov r8, r8)
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	46c0      	nop			; (mov r8, r8)
 8004190:	20000014 	.word	0x20000014
 8004194:	200004c8 	.word	0x200004c8

08004198 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004198:	b580      	push	{r7, lr}
 800419a:	af00      	add	r7, sp, #0
  return uwTick;
 800419c:	4b02      	ldr	r3, [pc, #8]	; (80041a8 <HAL_GetTick+0x10>)
 800419e:	681b      	ldr	r3, [r3, #0]
}
 80041a0:	0018      	movs	r0, r3
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
 80041a6:	46c0      	nop			; (mov r8, r8)
 80041a8:	200004c8 	.word	0x200004c8

080041ac <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80041ac:	b580      	push	{r7, lr}
 80041ae:	b082      	sub	sp, #8
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80041b4:	4b06      	ldr	r3, [pc, #24]	; (80041d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4a06      	ldr	r2, [pc, #24]	; (80041d4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80041ba:	4013      	ands	r3, r2
 80041bc:	0019      	movs	r1, r3
 80041be:	4b04      	ldr	r3, [pc, #16]	; (80041d0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80041c0:	687a      	ldr	r2, [r7, #4]
 80041c2:	430a      	orrs	r2, r1
 80041c4:	601a      	str	r2, [r3, #0]
}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	46bd      	mov	sp, r7
 80041ca:	b002      	add	sp, #8
 80041cc:	bd80      	pop	{r7, pc}
 80041ce:	46c0      	nop			; (mov r8, r8)
 80041d0:	40010000 	.word	0x40010000
 80041d4:	fffff9ff 	.word	0xfffff9ff

080041d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b082      	sub	sp, #8
 80041dc:	af00      	add	r7, sp, #0
 80041de:	0002      	movs	r2, r0
 80041e0:	1dfb      	adds	r3, r7, #7
 80041e2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80041e4:	1dfb      	adds	r3, r7, #7
 80041e6:	781b      	ldrb	r3, [r3, #0]
 80041e8:	2b7f      	cmp	r3, #127	; 0x7f
 80041ea:	d809      	bhi.n	8004200 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80041ec:	1dfb      	adds	r3, r7, #7
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	001a      	movs	r2, r3
 80041f2:	231f      	movs	r3, #31
 80041f4:	401a      	ands	r2, r3
 80041f6:	4b04      	ldr	r3, [pc, #16]	; (8004208 <__NVIC_EnableIRQ+0x30>)
 80041f8:	2101      	movs	r1, #1
 80041fa:	4091      	lsls	r1, r2
 80041fc:	000a      	movs	r2, r1
 80041fe:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	46bd      	mov	sp, r7
 8004204:	b002      	add	sp, #8
 8004206:	bd80      	pop	{r7, pc}
 8004208:	e000e100 	.word	0xe000e100

0800420c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800420c:	b590      	push	{r4, r7, lr}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	0002      	movs	r2, r0
 8004214:	6039      	str	r1, [r7, #0]
 8004216:	1dfb      	adds	r3, r7, #7
 8004218:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800421a:	1dfb      	adds	r3, r7, #7
 800421c:	781b      	ldrb	r3, [r3, #0]
 800421e:	2b7f      	cmp	r3, #127	; 0x7f
 8004220:	d828      	bhi.n	8004274 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004222:	4a2f      	ldr	r2, [pc, #188]	; (80042e0 <__NVIC_SetPriority+0xd4>)
 8004224:	1dfb      	adds	r3, r7, #7
 8004226:	781b      	ldrb	r3, [r3, #0]
 8004228:	b25b      	sxtb	r3, r3
 800422a:	089b      	lsrs	r3, r3, #2
 800422c:	33c0      	adds	r3, #192	; 0xc0
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	589b      	ldr	r3, [r3, r2]
 8004232:	1dfa      	adds	r2, r7, #7
 8004234:	7812      	ldrb	r2, [r2, #0]
 8004236:	0011      	movs	r1, r2
 8004238:	2203      	movs	r2, #3
 800423a:	400a      	ands	r2, r1
 800423c:	00d2      	lsls	r2, r2, #3
 800423e:	21ff      	movs	r1, #255	; 0xff
 8004240:	4091      	lsls	r1, r2
 8004242:	000a      	movs	r2, r1
 8004244:	43d2      	mvns	r2, r2
 8004246:	401a      	ands	r2, r3
 8004248:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	019b      	lsls	r3, r3, #6
 800424e:	22ff      	movs	r2, #255	; 0xff
 8004250:	401a      	ands	r2, r3
 8004252:	1dfb      	adds	r3, r7, #7
 8004254:	781b      	ldrb	r3, [r3, #0]
 8004256:	0018      	movs	r0, r3
 8004258:	2303      	movs	r3, #3
 800425a:	4003      	ands	r3, r0
 800425c:	00db      	lsls	r3, r3, #3
 800425e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004260:	481f      	ldr	r0, [pc, #124]	; (80042e0 <__NVIC_SetPriority+0xd4>)
 8004262:	1dfb      	adds	r3, r7, #7
 8004264:	781b      	ldrb	r3, [r3, #0]
 8004266:	b25b      	sxtb	r3, r3
 8004268:	089b      	lsrs	r3, r3, #2
 800426a:	430a      	orrs	r2, r1
 800426c:	33c0      	adds	r3, #192	; 0xc0
 800426e:	009b      	lsls	r3, r3, #2
 8004270:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8004272:	e031      	b.n	80042d8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8004274:	4a1b      	ldr	r2, [pc, #108]	; (80042e4 <__NVIC_SetPriority+0xd8>)
 8004276:	1dfb      	adds	r3, r7, #7
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	0019      	movs	r1, r3
 800427c:	230f      	movs	r3, #15
 800427e:	400b      	ands	r3, r1
 8004280:	3b08      	subs	r3, #8
 8004282:	089b      	lsrs	r3, r3, #2
 8004284:	3306      	adds	r3, #6
 8004286:	009b      	lsls	r3, r3, #2
 8004288:	18d3      	adds	r3, r2, r3
 800428a:	3304      	adds	r3, #4
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	1dfa      	adds	r2, r7, #7
 8004290:	7812      	ldrb	r2, [r2, #0]
 8004292:	0011      	movs	r1, r2
 8004294:	2203      	movs	r2, #3
 8004296:	400a      	ands	r2, r1
 8004298:	00d2      	lsls	r2, r2, #3
 800429a:	21ff      	movs	r1, #255	; 0xff
 800429c:	4091      	lsls	r1, r2
 800429e:	000a      	movs	r2, r1
 80042a0:	43d2      	mvns	r2, r2
 80042a2:	401a      	ands	r2, r3
 80042a4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	019b      	lsls	r3, r3, #6
 80042aa:	22ff      	movs	r2, #255	; 0xff
 80042ac:	401a      	ands	r2, r3
 80042ae:	1dfb      	adds	r3, r7, #7
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	0018      	movs	r0, r3
 80042b4:	2303      	movs	r3, #3
 80042b6:	4003      	ands	r3, r0
 80042b8:	00db      	lsls	r3, r3, #3
 80042ba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80042bc:	4809      	ldr	r0, [pc, #36]	; (80042e4 <__NVIC_SetPriority+0xd8>)
 80042be:	1dfb      	adds	r3, r7, #7
 80042c0:	781b      	ldrb	r3, [r3, #0]
 80042c2:	001c      	movs	r4, r3
 80042c4:	230f      	movs	r3, #15
 80042c6:	4023      	ands	r3, r4
 80042c8:	3b08      	subs	r3, #8
 80042ca:	089b      	lsrs	r3, r3, #2
 80042cc:	430a      	orrs	r2, r1
 80042ce:	3306      	adds	r3, #6
 80042d0:	009b      	lsls	r3, r3, #2
 80042d2:	18c3      	adds	r3, r0, r3
 80042d4:	3304      	adds	r3, #4
 80042d6:	601a      	str	r2, [r3, #0]
}
 80042d8:	46c0      	nop			; (mov r8, r8)
 80042da:	46bd      	mov	sp, r7
 80042dc:	b003      	add	sp, #12
 80042de:	bd90      	pop	{r4, r7, pc}
 80042e0:	e000e100 	.word	0xe000e100
 80042e4:	e000ed00 	.word	0xe000ed00

080042e8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b084      	sub	sp, #16
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	60b9      	str	r1, [r7, #8]
 80042f0:	607a      	str	r2, [r7, #4]
 80042f2:	210f      	movs	r1, #15
 80042f4:	187b      	adds	r3, r7, r1
 80042f6:	1c02      	adds	r2, r0, #0
 80042f8:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80042fa:	68ba      	ldr	r2, [r7, #8]
 80042fc:	187b      	adds	r3, r7, r1
 80042fe:	781b      	ldrb	r3, [r3, #0]
 8004300:	b25b      	sxtb	r3, r3
 8004302:	0011      	movs	r1, r2
 8004304:	0018      	movs	r0, r3
 8004306:	f7ff ff81 	bl	800420c <__NVIC_SetPriority>
}
 800430a:	46c0      	nop			; (mov r8, r8)
 800430c:	46bd      	mov	sp, r7
 800430e:	b004      	add	sp, #16
 8004310:	bd80      	pop	{r7, pc}

08004312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004312:	b580      	push	{r7, lr}
 8004314:	b082      	sub	sp, #8
 8004316:	af00      	add	r7, sp, #0
 8004318:	0002      	movs	r2, r0
 800431a:	1dfb      	adds	r3, r7, #7
 800431c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800431e:	1dfb      	adds	r3, r7, #7
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	b25b      	sxtb	r3, r3
 8004324:	0018      	movs	r0, r3
 8004326:	f7ff ff57 	bl	80041d8 <__NVIC_EnableIRQ>
}
 800432a:	46c0      	nop			; (mov r8, r8)
 800432c:	46bd      	mov	sp, r7
 800432e:	b002      	add	sp, #8
 8004330:	bd80      	pop	{r7, pc}
	...

08004334 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b082      	sub	sp, #8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2b00      	cmp	r3, #0
 8004340:	d101      	bne.n	8004346 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	e050      	b.n	80043e8 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2225      	movs	r2, #37	; 0x25
 800434a:	5c9b      	ldrb	r3, [r3, r2]
 800434c:	b2db      	uxtb	r3, r3
 800434e:	2b02      	cmp	r3, #2
 8004350:	d008      	beq.n	8004364 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2204      	movs	r2, #4
 8004356:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2224      	movs	r2, #36	; 0x24
 800435c:	2100      	movs	r1, #0
 800435e:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e041      	b.n	80043e8 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	210e      	movs	r1, #14
 8004370:	438a      	bics	r2, r1
 8004372:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800437e:	491c      	ldr	r1, [pc, #112]	; (80043f0 <HAL_DMA_Abort+0xbc>)
 8004380:	400a      	ands	r2, r1
 8004382:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	681a      	ldr	r2, [r3, #0]
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	2101      	movs	r1, #1
 8004390:	438a      	bics	r2, r1
 8004392:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8004394:	4b17      	ldr	r3, [pc, #92]	; (80043f4 <HAL_DMA_Abort+0xc0>)
 8004396:	6859      	ldr	r1, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800439c:	221c      	movs	r2, #28
 800439e:	4013      	ands	r3, r2
 80043a0:	2201      	movs	r2, #1
 80043a2:	409a      	lsls	r2, r3
 80043a4:	4b13      	ldr	r3, [pc, #76]	; (80043f4 <HAL_DMA_Abort+0xc0>)
 80043a6:	430a      	orrs	r2, r1
 80043a8:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043ae:	687a      	ldr	r2, [r7, #4]
 80043b0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80043b2:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c6:	490a      	ldr	r1, [pc, #40]	; (80043f0 <HAL_DMA_Abort+0xbc>)
 80043c8:	400a      	ands	r2, r1
 80043ca:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043d0:	687a      	ldr	r2, [r7, #4]
 80043d2:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80043d4:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2225      	movs	r2, #37	; 0x25
 80043da:	2101      	movs	r1, #1
 80043dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2224      	movs	r2, #36	; 0x24
 80043e2:	2100      	movs	r1, #0
 80043e4:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80043e6:	2300      	movs	r3, #0
}
 80043e8:	0018      	movs	r0, r3
 80043ea:	46bd      	mov	sp, r7
 80043ec:	b002      	add	sp, #8
 80043ee:	bd80      	pop	{r7, pc}
 80043f0:	fffffeff 	.word	0xfffffeff
 80043f4:	40020000 	.word	0x40020000

080043f8 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b084      	sub	sp, #16
 80043fc:	af00      	add	r7, sp, #0
 80043fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004400:	210f      	movs	r1, #15
 8004402:	187b      	adds	r3, r7, r1
 8004404:	2200      	movs	r2, #0
 8004406:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2225      	movs	r2, #37	; 0x25
 800440c:	5c9b      	ldrb	r3, [r3, r2]
 800440e:	b2db      	uxtb	r3, r3
 8004410:	2b02      	cmp	r3, #2
 8004412:	d006      	beq.n	8004422 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2204      	movs	r2, #4
 8004418:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800441a:	187b      	adds	r3, r7, r1
 800441c:	2201      	movs	r2, #1
 800441e:	701a      	strb	r2, [r3, #0]
 8004420:	e049      	b.n	80044b6 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	681a      	ldr	r2, [r3, #0]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	210e      	movs	r1, #14
 800442e:	438a      	bics	r2, r1
 8004430:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	2101      	movs	r1, #1
 800443e:	438a      	bics	r2, r1
 8004440:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004446:	681a      	ldr	r2, [r3, #0]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800444c:	491d      	ldr	r1, [pc, #116]	; (80044c4 <HAL_DMA_Abort_IT+0xcc>)
 800444e:	400a      	ands	r2, r1
 8004450:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8004452:	4b1d      	ldr	r3, [pc, #116]	; (80044c8 <HAL_DMA_Abort_IT+0xd0>)
 8004454:	6859      	ldr	r1, [r3, #4]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800445a:	221c      	movs	r2, #28
 800445c:	4013      	ands	r3, r2
 800445e:	2201      	movs	r2, #1
 8004460:	409a      	lsls	r2, r3
 8004462:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <HAL_DMA_Abort_IT+0xd0>)
 8004464:	430a      	orrs	r2, r1
 8004466:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800446c:	687a      	ldr	r2, [r7, #4]
 800446e:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8004470:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	d00c      	beq.n	8004494 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004484:	490f      	ldr	r1, [pc, #60]	; (80044c4 <HAL_DMA_Abort_IT+0xcc>)
 8004486:	400a      	ands	r2, r1
 8004488:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448e:	687a      	ldr	r2, [r7, #4]
 8004490:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8004492:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2225      	movs	r2, #37	; 0x25
 8004498:	2101      	movs	r1, #1
 800449a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2224      	movs	r2, #36	; 0x24
 80044a0:	2100      	movs	r1, #0
 80044a2:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d004      	beq.n	80044b6 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	687a      	ldr	r2, [r7, #4]
 80044b2:	0010      	movs	r0, r2
 80044b4:	4798      	blx	r3
    }
  }
  return status;
 80044b6:	230f      	movs	r3, #15
 80044b8:	18fb      	adds	r3, r7, r3
 80044ba:	781b      	ldrb	r3, [r3, #0]
}
 80044bc:	0018      	movs	r0, r3
 80044be:	46bd      	mov	sp, r7
 80044c0:	b004      	add	sp, #16
 80044c2:	bd80      	pop	{r7, pc}
 80044c4:	fffffeff 	.word	0xfffffeff
 80044c8:	40020000 	.word	0x40020000

080044cc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b086      	sub	sp, #24
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
 80044d4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80044d6:	2300      	movs	r3, #0
 80044d8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80044da:	e147      	b.n	800476c <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	2101      	movs	r1, #1
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	4091      	lsls	r1, r2
 80044e6:	000a      	movs	r2, r1
 80044e8:	4013      	ands	r3, r2
 80044ea:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d100      	bne.n	80044f4 <HAL_GPIO_Init+0x28>
 80044f2:	e138      	b.n	8004766 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	2203      	movs	r2, #3
 80044fa:	4013      	ands	r3, r2
 80044fc:	2b01      	cmp	r3, #1
 80044fe:	d005      	beq.n	800450c <HAL_GPIO_Init+0x40>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	685b      	ldr	r3, [r3, #4]
 8004504:	2203      	movs	r2, #3
 8004506:	4013      	ands	r3, r2
 8004508:	2b02      	cmp	r3, #2
 800450a:	d130      	bne.n	800456e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689b      	ldr	r3, [r3, #8]
 8004510:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	005b      	lsls	r3, r3, #1
 8004516:	2203      	movs	r2, #3
 8004518:	409a      	lsls	r2, r3
 800451a:	0013      	movs	r3, r2
 800451c:	43da      	mvns	r2, r3
 800451e:	693b      	ldr	r3, [r7, #16]
 8004520:	4013      	ands	r3, r2
 8004522:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	68da      	ldr	r2, [r3, #12]
 8004528:	697b      	ldr	r3, [r7, #20]
 800452a:	005b      	lsls	r3, r3, #1
 800452c:	409a      	lsls	r2, r3
 800452e:	0013      	movs	r3, r2
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	693a      	ldr	r2, [r7, #16]
 800453a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	685b      	ldr	r3, [r3, #4]
 8004540:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004542:	2201      	movs	r2, #1
 8004544:	697b      	ldr	r3, [r7, #20]
 8004546:	409a      	lsls	r2, r3
 8004548:	0013      	movs	r3, r2
 800454a:	43da      	mvns	r2, r3
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	4013      	ands	r3, r2
 8004550:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	091b      	lsrs	r3, r3, #4
 8004558:	2201      	movs	r2, #1
 800455a:	401a      	ands	r2, r3
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	409a      	lsls	r2, r3
 8004560:	0013      	movs	r3, r2
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	4313      	orrs	r3, r2
 8004566:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	685b      	ldr	r3, [r3, #4]
 8004572:	2203      	movs	r2, #3
 8004574:	4013      	ands	r3, r2
 8004576:	2b03      	cmp	r3, #3
 8004578:	d017      	beq.n	80045aa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	68db      	ldr	r3, [r3, #12]
 800457e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8004580:	697b      	ldr	r3, [r7, #20]
 8004582:	005b      	lsls	r3, r3, #1
 8004584:	2203      	movs	r2, #3
 8004586:	409a      	lsls	r2, r3
 8004588:	0013      	movs	r3, r2
 800458a:	43da      	mvns	r2, r3
 800458c:	693b      	ldr	r3, [r7, #16]
 800458e:	4013      	ands	r3, r2
 8004590:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	689a      	ldr	r2, [r3, #8]
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	005b      	lsls	r3, r3, #1
 800459a:	409a      	lsls	r2, r3
 800459c:	0013      	movs	r3, r2
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	693a      	ldr	r2, [r7, #16]
 80045a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	685b      	ldr	r3, [r3, #4]
 80045ae:	2203      	movs	r2, #3
 80045b0:	4013      	ands	r3, r2
 80045b2:	2b02      	cmp	r3, #2
 80045b4:	d123      	bne.n	80045fe <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	08da      	lsrs	r2, r3, #3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	3208      	adds	r2, #8
 80045be:	0092      	lsls	r2, r2, #2
 80045c0:	58d3      	ldr	r3, [r2, r3]
 80045c2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	2207      	movs	r2, #7
 80045c8:	4013      	ands	r3, r2
 80045ca:	009b      	lsls	r3, r3, #2
 80045cc:	220f      	movs	r2, #15
 80045ce:	409a      	lsls	r2, r3
 80045d0:	0013      	movs	r3, r2
 80045d2:	43da      	mvns	r2, r3
 80045d4:	693b      	ldr	r3, [r7, #16]
 80045d6:	4013      	ands	r3, r2
 80045d8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	691a      	ldr	r2, [r3, #16]
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	2107      	movs	r1, #7
 80045e2:	400b      	ands	r3, r1
 80045e4:	009b      	lsls	r3, r3, #2
 80045e6:	409a      	lsls	r2, r3
 80045e8:	0013      	movs	r3, r2
 80045ea:	693a      	ldr	r2, [r7, #16]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80045f0:	697b      	ldr	r3, [r7, #20]
 80045f2:	08da      	lsrs	r2, r3, #3
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	3208      	adds	r2, #8
 80045f8:	0092      	lsls	r2, r2, #2
 80045fa:	6939      	ldr	r1, [r7, #16]
 80045fc:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	005b      	lsls	r3, r3, #1
 8004608:	2203      	movs	r2, #3
 800460a:	409a      	lsls	r2, r3
 800460c:	0013      	movs	r3, r2
 800460e:	43da      	mvns	r2, r3
 8004610:	693b      	ldr	r3, [r7, #16]
 8004612:	4013      	ands	r3, r2
 8004614:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	2203      	movs	r2, #3
 800461c:	401a      	ands	r2, r3
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	005b      	lsls	r3, r3, #1
 8004622:	409a      	lsls	r2, r3
 8004624:	0013      	movs	r3, r2
 8004626:	693a      	ldr	r2, [r7, #16]
 8004628:	4313      	orrs	r3, r2
 800462a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	693a      	ldr	r2, [r7, #16]
 8004630:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	685a      	ldr	r2, [r3, #4]
 8004636:	23c0      	movs	r3, #192	; 0xc0
 8004638:	029b      	lsls	r3, r3, #10
 800463a:	4013      	ands	r3, r2
 800463c:	d100      	bne.n	8004640 <HAL_GPIO_Init+0x174>
 800463e:	e092      	b.n	8004766 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8004640:	4a50      	ldr	r2, [pc, #320]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	089b      	lsrs	r3, r3, #2
 8004646:	3318      	adds	r3, #24
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	589b      	ldr	r3, [r3, r2]
 800464c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	2203      	movs	r2, #3
 8004652:	4013      	ands	r3, r2
 8004654:	00db      	lsls	r3, r3, #3
 8004656:	220f      	movs	r2, #15
 8004658:	409a      	lsls	r2, r3
 800465a:	0013      	movs	r3, r2
 800465c:	43da      	mvns	r2, r3
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	4013      	ands	r3, r2
 8004662:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	23a0      	movs	r3, #160	; 0xa0
 8004668:	05db      	lsls	r3, r3, #23
 800466a:	429a      	cmp	r2, r3
 800466c:	d013      	beq.n	8004696 <HAL_GPIO_Init+0x1ca>
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a45      	ldr	r2, [pc, #276]	; (8004788 <HAL_GPIO_Init+0x2bc>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00d      	beq.n	8004692 <HAL_GPIO_Init+0x1c6>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a44      	ldr	r2, [pc, #272]	; (800478c <HAL_GPIO_Init+0x2c0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d007      	beq.n	800468e <HAL_GPIO_Init+0x1c2>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	4a43      	ldr	r2, [pc, #268]	; (8004790 <HAL_GPIO_Init+0x2c4>)
 8004682:	4293      	cmp	r3, r2
 8004684:	d101      	bne.n	800468a <HAL_GPIO_Init+0x1be>
 8004686:	2303      	movs	r3, #3
 8004688:	e006      	b.n	8004698 <HAL_GPIO_Init+0x1cc>
 800468a:	2305      	movs	r3, #5
 800468c:	e004      	b.n	8004698 <HAL_GPIO_Init+0x1cc>
 800468e:	2302      	movs	r3, #2
 8004690:	e002      	b.n	8004698 <HAL_GPIO_Init+0x1cc>
 8004692:	2301      	movs	r3, #1
 8004694:	e000      	b.n	8004698 <HAL_GPIO_Init+0x1cc>
 8004696:	2300      	movs	r3, #0
 8004698:	697a      	ldr	r2, [r7, #20]
 800469a:	2103      	movs	r1, #3
 800469c:	400a      	ands	r2, r1
 800469e:	00d2      	lsls	r2, r2, #3
 80046a0:	4093      	lsls	r3, r2
 80046a2:	693a      	ldr	r2, [r7, #16]
 80046a4:	4313      	orrs	r3, r2
 80046a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80046a8:	4936      	ldr	r1, [pc, #216]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	089b      	lsrs	r3, r3, #2
 80046ae:	3318      	adds	r3, #24
 80046b0:	009b      	lsls	r3, r3, #2
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80046b6:	4b33      	ldr	r3, [pc, #204]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	43da      	mvns	r2, r3
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	4013      	ands	r3, r2
 80046c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	685a      	ldr	r2, [r3, #4]
 80046ca:	2380      	movs	r3, #128	; 0x80
 80046cc:	035b      	lsls	r3, r3, #13
 80046ce:	4013      	ands	r3, r2
 80046d0:	d003      	beq.n	80046da <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4313      	orrs	r3, r2
 80046d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80046da:	4b2a      	ldr	r3, [pc, #168]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 80046dc:	693a      	ldr	r2, [r7, #16]
 80046de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80046e0:	4b28      	ldr	r3, [pc, #160]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	43da      	mvns	r2, r3
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	4013      	ands	r3, r2
 80046ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	2380      	movs	r3, #128	; 0x80
 80046f6:	039b      	lsls	r3, r3, #14
 80046f8:	4013      	ands	r3, r2
 80046fa:	d003      	beq.n	8004704 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80046fc:	693a      	ldr	r2, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	4313      	orrs	r3, r2
 8004702:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004704:	4b1f      	ldr	r3, [pc, #124]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 8004706:	693a      	ldr	r2, [r7, #16]
 8004708:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800470a:	4a1e      	ldr	r2, [pc, #120]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 800470c:	2384      	movs	r3, #132	; 0x84
 800470e:	58d3      	ldr	r3, [r2, r3]
 8004710:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	43da      	mvns	r2, r3
 8004716:	693b      	ldr	r3, [r7, #16]
 8004718:	4013      	ands	r3, r2
 800471a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	685a      	ldr	r2, [r3, #4]
 8004720:	2380      	movs	r3, #128	; 0x80
 8004722:	029b      	lsls	r3, r3, #10
 8004724:	4013      	ands	r3, r2
 8004726:	d003      	beq.n	8004730 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	4313      	orrs	r3, r2
 800472e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004730:	4914      	ldr	r1, [pc, #80]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 8004732:	2284      	movs	r2, #132	; 0x84
 8004734:	693b      	ldr	r3, [r7, #16]
 8004736:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8004738:	4a12      	ldr	r2, [pc, #72]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 800473a:	2380      	movs	r3, #128	; 0x80
 800473c:	58d3      	ldr	r3, [r2, r3]
 800473e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	43da      	mvns	r2, r3
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	4013      	ands	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	685a      	ldr	r2, [r3, #4]
 800474e:	2380      	movs	r3, #128	; 0x80
 8004750:	025b      	lsls	r3, r3, #9
 8004752:	4013      	ands	r3, r2
 8004754:	d003      	beq.n	800475e <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8004756:	693a      	ldr	r2, [r7, #16]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	4313      	orrs	r3, r2
 800475c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800475e:	4909      	ldr	r1, [pc, #36]	; (8004784 <HAL_GPIO_Init+0x2b8>)
 8004760:	2280      	movs	r2, #128	; 0x80
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	3301      	adds	r3, #1
 800476a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	681a      	ldr	r2, [r3, #0]
 8004770:	697b      	ldr	r3, [r7, #20]
 8004772:	40da      	lsrs	r2, r3
 8004774:	1e13      	subs	r3, r2, #0
 8004776:	d000      	beq.n	800477a <HAL_GPIO_Init+0x2ae>
 8004778:	e6b0      	b.n	80044dc <HAL_GPIO_Init+0x10>
  }
}
 800477a:	46c0      	nop			; (mov r8, r8)
 800477c:	46c0      	nop			; (mov r8, r8)
 800477e:	46bd      	mov	sp, r7
 8004780:	b006      	add	sp, #24
 8004782:	bd80      	pop	{r7, pc}
 8004784:	40021800 	.word	0x40021800
 8004788:	50000400 	.word	0x50000400
 800478c:	50000800 	.word	0x50000800
 8004790:	50000c00 	.word	0x50000c00

08004794 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b082      	sub	sp, #8
 8004798:	af00      	add	r7, sp, #0
 800479a:	0002      	movs	r2, r0
 800479c:	1dbb      	adds	r3, r7, #6
 800479e:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	1dba      	adds	r2, r7, #6
 80047a6:	8812      	ldrh	r2, [r2, #0]
 80047a8:	4013      	ands	r3, r2
 80047aa:	d008      	beq.n	80047be <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80047ac:	4b0d      	ldr	r3, [pc, #52]	; (80047e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80047ae:	1dba      	adds	r2, r7, #6
 80047b0:	8812      	ldrh	r2, [r2, #0]
 80047b2:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80047b4:	1dbb      	adds	r3, r7, #6
 80047b6:	881b      	ldrh	r3, [r3, #0]
 80047b8:	0018      	movs	r0, r3
 80047ba:	f000 f815 	bl	80047e8 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80047be:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	1dba      	adds	r2, r7, #6
 80047c4:	8812      	ldrh	r2, [r2, #0]
 80047c6:	4013      	ands	r3, r2
 80047c8:	d008      	beq.n	80047dc <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80047ca:	4b06      	ldr	r3, [pc, #24]	; (80047e4 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80047cc:	1dba      	adds	r2, r7, #6
 80047ce:	8812      	ldrh	r2, [r2, #0]
 80047d0:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80047d2:	1dbb      	adds	r3, r7, #6
 80047d4:	881b      	ldrh	r3, [r3, #0]
 80047d6:	0018      	movs	r0, r3
 80047d8:	f000 f810 	bl	80047fc <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80047dc:	46c0      	nop			; (mov r8, r8)
 80047de:	46bd      	mov	sp, r7
 80047e0:	b002      	add	sp, #8
 80047e2:	bd80      	pop	{r7, pc}
 80047e4:	40021800 	.word	0x40021800

080047e8 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b082      	sub	sp, #8
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	0002      	movs	r2, r0
 80047f0:	1dbb      	adds	r3, r7, #6
 80047f2:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 80047f4:	46c0      	nop			; (mov r8, r8)
 80047f6:	46bd      	mov	sp, r7
 80047f8:	b002      	add	sp, #8
 80047fa:	bd80      	pop	{r7, pc}

080047fc <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b082      	sub	sp, #8
 8004800:	af00      	add	r7, sp, #0
 8004802:	0002      	movs	r2, r0
 8004804:	1dbb      	adds	r3, r7, #6
 8004806:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8004808:	46c0      	nop			; (mov r8, r8)
 800480a:	46bd      	mov	sp, r7
 800480c:	b002      	add	sp, #8
 800480e:	bd80      	pop	{r7, pc}

08004810 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004810:	b580      	push	{r7, lr}
 8004812:	b084      	sub	sp, #16
 8004814:	af00      	add	r7, sp, #0
 8004816:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8004818:	4b19      	ldr	r3, [pc, #100]	; (8004880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	4a19      	ldr	r2, [pc, #100]	; (8004884 <HAL_PWREx_ControlVoltageScaling+0x74>)
 800481e:	4013      	ands	r3, r2
 8004820:	0019      	movs	r1, r3
 8004822:	4b17      	ldr	r3, [pc, #92]	; (8004880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004824:	687a      	ldr	r2, [r7, #4]
 8004826:	430a      	orrs	r2, r1
 8004828:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	2380      	movs	r3, #128	; 0x80
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	429a      	cmp	r2, r3
 8004832:	d11f      	bne.n	8004874 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8004834:	4b14      	ldr	r3, [pc, #80]	; (8004888 <HAL_PWREx_ControlVoltageScaling+0x78>)
 8004836:	681a      	ldr	r2, [r3, #0]
 8004838:	0013      	movs	r3, r2
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	189b      	adds	r3, r3, r2
 800483e:	005b      	lsls	r3, r3, #1
 8004840:	4912      	ldr	r1, [pc, #72]	; (800488c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8004842:	0018      	movs	r0, r3
 8004844:	f7fb fc72 	bl	800012c <__udivsi3>
 8004848:	0003      	movs	r3, r0
 800484a:	3301      	adds	r3, #1
 800484c:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800484e:	e008      	b.n	8004862 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	2b00      	cmp	r3, #0
 8004854:	d003      	beq.n	800485e <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	3b01      	subs	r3, #1
 800485a:	60fb      	str	r3, [r7, #12]
 800485c:	e001      	b.n	8004862 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 800485e:	2303      	movs	r3, #3
 8004860:	e009      	b.n	8004876 <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004862:	4b07      	ldr	r3, [pc, #28]	; (8004880 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8004864:	695a      	ldr	r2, [r3, #20]
 8004866:	2380      	movs	r3, #128	; 0x80
 8004868:	00db      	lsls	r3, r3, #3
 800486a:	401a      	ands	r2, r3
 800486c:	2380      	movs	r3, #128	; 0x80
 800486e:	00db      	lsls	r3, r3, #3
 8004870:	429a      	cmp	r2, r3
 8004872:	d0ed      	beq.n	8004850 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8004874:	2300      	movs	r3, #0
}
 8004876:	0018      	movs	r0, r3
 8004878:	46bd      	mov	sp, r7
 800487a:	b004      	add	sp, #16
 800487c:	bd80      	pop	{r7, pc}
 800487e:	46c0      	nop			; (mov r8, r8)
 8004880:	40007000 	.word	0x40007000
 8004884:	fffff9ff 	.word	0xfffff9ff
 8004888:	2000000c 	.word	0x2000000c
 800488c:	000f4240 	.word	0x000f4240

08004890 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8004894:	4b03      	ldr	r3, [pc, #12]	; (80048a4 <LL_RCC_GetAPB1Prescaler+0x14>)
 8004896:	689a      	ldr	r2, [r3, #8]
 8004898:	23e0      	movs	r3, #224	; 0xe0
 800489a:	01db      	lsls	r3, r3, #7
 800489c:	4013      	ands	r3, r2
}
 800489e:	0018      	movs	r0, r3
 80048a0:	46bd      	mov	sp, r7
 80048a2:	bd80      	pop	{r7, pc}
 80048a4:	40021000 	.word	0x40021000

080048a8 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b088      	sub	sp, #32
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d101      	bne.n	80048ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048b6:	2301      	movs	r3, #1
 80048b8:	e2fe      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	2201      	movs	r2, #1
 80048c0:	4013      	ands	r3, r2
 80048c2:	d100      	bne.n	80048c6 <HAL_RCC_OscConfig+0x1e>
 80048c4:	e07c      	b.n	80049c0 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80048c6:	4bc3      	ldr	r3, [pc, #780]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2238      	movs	r2, #56	; 0x38
 80048cc:	4013      	ands	r3, r2
 80048ce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80048d0:	4bc0      	ldr	r3, [pc, #768]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80048d2:	68db      	ldr	r3, [r3, #12]
 80048d4:	2203      	movs	r2, #3
 80048d6:	4013      	ands	r3, r2
 80048d8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80048da:	69bb      	ldr	r3, [r7, #24]
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d102      	bne.n	80048e6 <HAL_RCC_OscConfig+0x3e>
 80048e0:	697b      	ldr	r3, [r7, #20]
 80048e2:	2b03      	cmp	r3, #3
 80048e4:	d002      	beq.n	80048ec <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b08      	cmp	r3, #8
 80048ea:	d10b      	bne.n	8004904 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048ec:	4bb9      	ldr	r3, [pc, #740]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80048ee:	681a      	ldr	r2, [r3, #0]
 80048f0:	2380      	movs	r3, #128	; 0x80
 80048f2:	029b      	lsls	r3, r3, #10
 80048f4:	4013      	ands	r3, r2
 80048f6:	d062      	beq.n	80049be <HAL_RCC_OscConfig+0x116>
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d15e      	bne.n	80049be <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	e2d9      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685a      	ldr	r2, [r3, #4]
 8004908:	2380      	movs	r3, #128	; 0x80
 800490a:	025b      	lsls	r3, r3, #9
 800490c:	429a      	cmp	r2, r3
 800490e:	d107      	bne.n	8004920 <HAL_RCC_OscConfig+0x78>
 8004910:	4bb0      	ldr	r3, [pc, #704]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004912:	681a      	ldr	r2, [r3, #0]
 8004914:	4baf      	ldr	r3, [pc, #700]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004916:	2180      	movs	r1, #128	; 0x80
 8004918:	0249      	lsls	r1, r1, #9
 800491a:	430a      	orrs	r2, r1
 800491c:	601a      	str	r2, [r3, #0]
 800491e:	e020      	b.n	8004962 <HAL_RCC_OscConfig+0xba>
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685a      	ldr	r2, [r3, #4]
 8004924:	23a0      	movs	r3, #160	; 0xa0
 8004926:	02db      	lsls	r3, r3, #11
 8004928:	429a      	cmp	r2, r3
 800492a:	d10e      	bne.n	800494a <HAL_RCC_OscConfig+0xa2>
 800492c:	4ba9      	ldr	r3, [pc, #676]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 800492e:	681a      	ldr	r2, [r3, #0]
 8004930:	4ba8      	ldr	r3, [pc, #672]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004932:	2180      	movs	r1, #128	; 0x80
 8004934:	02c9      	lsls	r1, r1, #11
 8004936:	430a      	orrs	r2, r1
 8004938:	601a      	str	r2, [r3, #0]
 800493a:	4ba6      	ldr	r3, [pc, #664]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 800493c:	681a      	ldr	r2, [r3, #0]
 800493e:	4ba5      	ldr	r3, [pc, #660]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004940:	2180      	movs	r1, #128	; 0x80
 8004942:	0249      	lsls	r1, r1, #9
 8004944:	430a      	orrs	r2, r1
 8004946:	601a      	str	r2, [r3, #0]
 8004948:	e00b      	b.n	8004962 <HAL_RCC_OscConfig+0xba>
 800494a:	4ba2      	ldr	r3, [pc, #648]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	4ba1      	ldr	r3, [pc, #644]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004950:	49a1      	ldr	r1, [pc, #644]	; (8004bd8 <HAL_RCC_OscConfig+0x330>)
 8004952:	400a      	ands	r2, r1
 8004954:	601a      	str	r2, [r3, #0]
 8004956:	4b9f      	ldr	r3, [pc, #636]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004958:	681a      	ldr	r2, [r3, #0]
 800495a:	4b9e      	ldr	r3, [pc, #632]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 800495c:	499f      	ldr	r1, [pc, #636]	; (8004bdc <HAL_RCC_OscConfig+0x334>)
 800495e:	400a      	ands	r2, r1
 8004960:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	685b      	ldr	r3, [r3, #4]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d014      	beq.n	8004994 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800496a:	f7ff fc15 	bl	8004198 <HAL_GetTick>
 800496e:	0003      	movs	r3, r0
 8004970:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004974:	f7ff fc10 	bl	8004198 <HAL_GetTick>
 8004978:	0002      	movs	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b64      	cmp	r3, #100	; 0x64
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e298      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004986:	4b93      	ldr	r3, [pc, #588]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	2380      	movs	r3, #128	; 0x80
 800498c:	029b      	lsls	r3, r3, #10
 800498e:	4013      	ands	r3, r2
 8004990:	d0f0      	beq.n	8004974 <HAL_RCC_OscConfig+0xcc>
 8004992:	e015      	b.n	80049c0 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004994:	f7ff fc00 	bl	8004198 <HAL_GetTick>
 8004998:	0003      	movs	r3, r0
 800499a:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800499c:	e008      	b.n	80049b0 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800499e:	f7ff fbfb 	bl	8004198 <HAL_GetTick>
 80049a2:	0002      	movs	r2, r0
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	1ad3      	subs	r3, r2, r3
 80049a8:	2b64      	cmp	r3, #100	; 0x64
 80049aa:	d901      	bls.n	80049b0 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80049ac:	2303      	movs	r3, #3
 80049ae:	e283      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80049b0:	4b88      	ldr	r3, [pc, #544]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80049b2:	681a      	ldr	r2, [r3, #0]
 80049b4:	2380      	movs	r3, #128	; 0x80
 80049b6:	029b      	lsls	r3, r3, #10
 80049b8:	4013      	ands	r3, r2
 80049ba:	d1f0      	bne.n	800499e <HAL_RCC_OscConfig+0xf6>
 80049bc:	e000      	b.n	80049c0 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049be:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	2202      	movs	r2, #2
 80049c6:	4013      	ands	r3, r2
 80049c8:	d100      	bne.n	80049cc <HAL_RCC_OscConfig+0x124>
 80049ca:	e099      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80049cc:	4b81      	ldr	r3, [pc, #516]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	2238      	movs	r2, #56	; 0x38
 80049d2:	4013      	ands	r3, r2
 80049d4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80049d6:	4b7f      	ldr	r3, [pc, #508]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2203      	movs	r2, #3
 80049dc:	4013      	ands	r3, r2
 80049de:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80049e0:	69bb      	ldr	r3, [r7, #24]
 80049e2:	2b10      	cmp	r3, #16
 80049e4:	d102      	bne.n	80049ec <HAL_RCC_OscConfig+0x144>
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d002      	beq.n	80049f2 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80049ec:	69bb      	ldr	r3, [r7, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d135      	bne.n	8004a5e <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80049f2:	4b78      	ldr	r3, [pc, #480]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 80049f4:	681a      	ldr	r2, [r3, #0]
 80049f6:	2380      	movs	r3, #128	; 0x80
 80049f8:	00db      	lsls	r3, r3, #3
 80049fa:	4013      	ands	r3, r2
 80049fc:	d005      	beq.n	8004a0a <HAL_RCC_OscConfig+0x162>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	68db      	ldr	r3, [r3, #12]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d101      	bne.n	8004a0a <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8004a06:	2301      	movs	r3, #1
 8004a08:	e256      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a0a:	4b72      	ldr	r3, [pc, #456]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a0c:	685b      	ldr	r3, [r3, #4]
 8004a0e:	4a74      	ldr	r2, [pc, #464]	; (8004be0 <HAL_RCC_OscConfig+0x338>)
 8004a10:	4013      	ands	r3, r2
 8004a12:	0019      	movs	r1, r3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	695b      	ldr	r3, [r3, #20]
 8004a18:	021a      	lsls	r2, r3, #8
 8004a1a:	4b6e      	ldr	r3, [pc, #440]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a1c:	430a      	orrs	r2, r1
 8004a1e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a20:	69bb      	ldr	r3, [r7, #24]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	d112      	bne.n	8004a4c <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a26:	4b6b      	ldr	r3, [pc, #428]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	4a6e      	ldr	r2, [pc, #440]	; (8004be4 <HAL_RCC_OscConfig+0x33c>)
 8004a2c:	4013      	ands	r3, r2
 8004a2e:	0019      	movs	r1, r3
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691a      	ldr	r2, [r3, #16]
 8004a34:	4b67      	ldr	r3, [pc, #412]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a36:	430a      	orrs	r2, r1
 8004a38:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8004a3a:	4b66      	ldr	r3, [pc, #408]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	0adb      	lsrs	r3, r3, #11
 8004a40:	2207      	movs	r2, #7
 8004a42:	4013      	ands	r3, r2
 8004a44:	4a68      	ldr	r2, [pc, #416]	; (8004be8 <HAL_RCC_OscConfig+0x340>)
 8004a46:	40da      	lsrs	r2, r3
 8004a48:	4b68      	ldr	r3, [pc, #416]	; (8004bec <HAL_RCC_OscConfig+0x344>)
 8004a4a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004a4c:	4b68      	ldr	r3, [pc, #416]	; (8004bf0 <HAL_RCC_OscConfig+0x348>)
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0018      	movs	r0, r3
 8004a52:	f7ff fa31 	bl	8003eb8 <HAL_InitTick>
 8004a56:	1e03      	subs	r3, r0, #0
 8004a58:	d051      	beq.n	8004afe <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e22c      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	68db      	ldr	r3, [r3, #12]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d030      	beq.n	8004ac8 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8004a66:	4b5b      	ldr	r3, [pc, #364]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	4a5e      	ldr	r2, [pc, #376]	; (8004be4 <HAL_RCC_OscConfig+0x33c>)
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	0019      	movs	r1, r3
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	691a      	ldr	r2, [r3, #16]
 8004a74:	4b57      	ldr	r3, [pc, #348]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a76:	430a      	orrs	r2, r1
 8004a78:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8004a7a:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a7c:	681a      	ldr	r2, [r3, #0]
 8004a7e:	4b55      	ldr	r3, [pc, #340]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004a80:	2180      	movs	r1, #128	; 0x80
 8004a82:	0049      	lsls	r1, r1, #1
 8004a84:	430a      	orrs	r2, r1
 8004a86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a88:	f7ff fb86 	bl	8004198 <HAL_GetTick>
 8004a8c:	0003      	movs	r3, r0
 8004a8e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004a90:	e008      	b.n	8004aa4 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a92:	f7ff fb81 	bl	8004198 <HAL_GetTick>
 8004a96:	0002      	movs	r2, r0
 8004a98:	693b      	ldr	r3, [r7, #16]
 8004a9a:	1ad3      	subs	r3, r2, r3
 8004a9c:	2b02      	cmp	r3, #2
 8004a9e:	d901      	bls.n	8004aa4 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8004aa0:	2303      	movs	r3, #3
 8004aa2:	e209      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004aa4:	4b4b      	ldr	r3, [pc, #300]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004aa6:	681a      	ldr	r2, [r3, #0]
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	00db      	lsls	r3, r3, #3
 8004aac:	4013      	ands	r3, r2
 8004aae:	d0f0      	beq.n	8004a92 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ab0:	4b48      	ldr	r3, [pc, #288]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004ab2:	685b      	ldr	r3, [r3, #4]
 8004ab4:	4a4a      	ldr	r2, [pc, #296]	; (8004be0 <HAL_RCC_OscConfig+0x338>)
 8004ab6:	4013      	ands	r3, r2
 8004ab8:	0019      	movs	r1, r3
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	695b      	ldr	r3, [r3, #20]
 8004abe:	021a      	lsls	r2, r3, #8
 8004ac0:	4b44      	ldr	r3, [pc, #272]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004ac2:	430a      	orrs	r2, r1
 8004ac4:	605a      	str	r2, [r3, #4]
 8004ac6:	e01b      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	4b41      	ldr	r3, [pc, #260]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004ace:	4949      	ldr	r1, [pc, #292]	; (8004bf4 <HAL_RCC_OscConfig+0x34c>)
 8004ad0:	400a      	ands	r2, r1
 8004ad2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ad4:	f7ff fb60 	bl	8004198 <HAL_GetTick>
 8004ad8:	0003      	movs	r3, r0
 8004ada:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004adc:	e008      	b.n	8004af0 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ade:	f7ff fb5b 	bl	8004198 <HAL_GetTick>
 8004ae2:	0002      	movs	r2, r0
 8004ae4:	693b      	ldr	r3, [r7, #16]
 8004ae6:	1ad3      	subs	r3, r2, r3
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d901      	bls.n	8004af0 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e1e3      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004af0:	4b38      	ldr	r3, [pc, #224]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004af2:	681a      	ldr	r2, [r3, #0]
 8004af4:	2380      	movs	r3, #128	; 0x80
 8004af6:	00db      	lsls	r3, r3, #3
 8004af8:	4013      	ands	r3, r2
 8004afa:	d1f0      	bne.n	8004ade <HAL_RCC_OscConfig+0x236>
 8004afc:	e000      	b.n	8004b00 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004afe:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	2208      	movs	r2, #8
 8004b06:	4013      	ands	r3, r2
 8004b08:	d047      	beq.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8004b0a:	4b32      	ldr	r3, [pc, #200]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b0c:	689b      	ldr	r3, [r3, #8]
 8004b0e:	2238      	movs	r2, #56	; 0x38
 8004b10:	4013      	ands	r3, r2
 8004b12:	2b18      	cmp	r3, #24
 8004b14:	d10a      	bne.n	8004b2c <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8004b16:	4b2f      	ldr	r3, [pc, #188]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b18:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b1a:	2202      	movs	r2, #2
 8004b1c:	4013      	ands	r3, r2
 8004b1e:	d03c      	beq.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	699b      	ldr	r3, [r3, #24]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d138      	bne.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e1c5      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	699b      	ldr	r3, [r3, #24]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d019      	beq.n	8004b68 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8004b34:	4b27      	ldr	r3, [pc, #156]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b36:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b38:	4b26      	ldr	r3, [pc, #152]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b3a:	2101      	movs	r1, #1
 8004b3c:	430a      	orrs	r2, r1
 8004b3e:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b40:	f7ff fb2a 	bl	8004198 <HAL_GetTick>
 8004b44:	0003      	movs	r3, r0
 8004b46:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b48:	e008      	b.n	8004b5c <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b4a:	f7ff fb25 	bl	8004198 <HAL_GetTick>
 8004b4e:	0002      	movs	r2, r0
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	1ad3      	subs	r3, r2, r3
 8004b54:	2b02      	cmp	r3, #2
 8004b56:	d901      	bls.n	8004b5c <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8004b58:	2303      	movs	r3, #3
 8004b5a:	e1ad      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004b5c:	4b1d      	ldr	r3, [pc, #116]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b5e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b60:	2202      	movs	r2, #2
 8004b62:	4013      	ands	r3, r2
 8004b64:	d0f1      	beq.n	8004b4a <HAL_RCC_OscConfig+0x2a2>
 8004b66:	e018      	b.n	8004b9a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8004b68:	4b1a      	ldr	r3, [pc, #104]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b6a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004b6c:	4b19      	ldr	r3, [pc, #100]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b6e:	2101      	movs	r1, #1
 8004b70:	438a      	bics	r2, r1
 8004b72:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b74:	f7ff fb10 	bl	8004198 <HAL_GetTick>
 8004b78:	0003      	movs	r3, r0
 8004b7a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b7c:	e008      	b.n	8004b90 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b7e:	f7ff fb0b 	bl	8004198 <HAL_GetTick>
 8004b82:	0002      	movs	r2, r0
 8004b84:	693b      	ldr	r3, [r7, #16]
 8004b86:	1ad3      	subs	r3, r2, r3
 8004b88:	2b02      	cmp	r3, #2
 8004b8a:	d901      	bls.n	8004b90 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8004b8c:	2303      	movs	r3, #3
 8004b8e:	e193      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004b90:	4b10      	ldr	r3, [pc, #64]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004b92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b94:	2202      	movs	r2, #2
 8004b96:	4013      	ands	r3, r2
 8004b98:	d1f1      	bne.n	8004b7e <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	2204      	movs	r2, #4
 8004ba0:	4013      	ands	r3, r2
 8004ba2:	d100      	bne.n	8004ba6 <HAL_RCC_OscConfig+0x2fe>
 8004ba4:	e0c6      	b.n	8004d34 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004ba6:	231f      	movs	r3, #31
 8004ba8:	18fb      	adds	r3, r7, r3
 8004baa:	2200      	movs	r2, #0
 8004bac:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8004bae:	4b09      	ldr	r3, [pc, #36]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004bb0:	689b      	ldr	r3, [r3, #8]
 8004bb2:	2238      	movs	r2, #56	; 0x38
 8004bb4:	4013      	ands	r3, r2
 8004bb6:	2b20      	cmp	r3, #32
 8004bb8:	d11e      	bne.n	8004bf8 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8004bba:	4b06      	ldr	r3, [pc, #24]	; (8004bd4 <HAL_RCC_OscConfig+0x32c>)
 8004bbc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004bbe:	2202      	movs	r2, #2
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	d100      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x31e>
 8004bc4:	e0b6      	b.n	8004d34 <HAL_RCC_OscConfig+0x48c>
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	689b      	ldr	r3, [r3, #8]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d000      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x328>
 8004bce:	e0b1      	b.n	8004d34 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8004bd0:	2301      	movs	r3, #1
 8004bd2:	e171      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
 8004bd4:	40021000 	.word	0x40021000
 8004bd8:	fffeffff 	.word	0xfffeffff
 8004bdc:	fffbffff 	.word	0xfffbffff
 8004be0:	ffff80ff 	.word	0xffff80ff
 8004be4:	ffffc7ff 	.word	0xffffc7ff
 8004be8:	00f42400 	.word	0x00f42400
 8004bec:	2000000c 	.word	0x2000000c
 8004bf0:	20000010 	.word	0x20000010
 8004bf4:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004bf8:	4bb1      	ldr	r3, [pc, #708]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004bfa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004bfc:	2380      	movs	r3, #128	; 0x80
 8004bfe:	055b      	lsls	r3, r3, #21
 8004c00:	4013      	ands	r3, r2
 8004c02:	d101      	bne.n	8004c08 <HAL_RCC_OscConfig+0x360>
 8004c04:	2301      	movs	r3, #1
 8004c06:	e000      	b.n	8004c0a <HAL_RCC_OscConfig+0x362>
 8004c08:	2300      	movs	r3, #0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d011      	beq.n	8004c32 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8004c0e:	4bac      	ldr	r3, [pc, #688]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004c10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c12:	4bab      	ldr	r3, [pc, #684]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004c14:	2180      	movs	r1, #128	; 0x80
 8004c16:	0549      	lsls	r1, r1, #21
 8004c18:	430a      	orrs	r2, r1
 8004c1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8004c1c:	4ba8      	ldr	r3, [pc, #672]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004c1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004c20:	2380      	movs	r3, #128	; 0x80
 8004c22:	055b      	lsls	r3, r3, #21
 8004c24:	4013      	ands	r3, r2
 8004c26:	60fb      	str	r3, [r7, #12]
 8004c28:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8004c2a:	231f      	movs	r3, #31
 8004c2c:	18fb      	adds	r3, r7, r3
 8004c2e:	2201      	movs	r2, #1
 8004c30:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c32:	4ba4      	ldr	r3, [pc, #656]	; (8004ec4 <HAL_RCC_OscConfig+0x61c>)
 8004c34:	681a      	ldr	r2, [r3, #0]
 8004c36:	2380      	movs	r3, #128	; 0x80
 8004c38:	005b      	lsls	r3, r3, #1
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	d11a      	bne.n	8004c74 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c3e:	4ba1      	ldr	r3, [pc, #644]	; (8004ec4 <HAL_RCC_OscConfig+0x61c>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4ba0      	ldr	r3, [pc, #640]	; (8004ec4 <HAL_RCC_OscConfig+0x61c>)
 8004c44:	2180      	movs	r1, #128	; 0x80
 8004c46:	0049      	lsls	r1, r1, #1
 8004c48:	430a      	orrs	r2, r1
 8004c4a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8004c4c:	f7ff faa4 	bl	8004198 <HAL_GetTick>
 8004c50:	0003      	movs	r3, r0
 8004c52:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c54:	e008      	b.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c56:	f7ff fa9f 	bl	8004198 <HAL_GetTick>
 8004c5a:	0002      	movs	r2, r0
 8004c5c:	693b      	ldr	r3, [r7, #16]
 8004c5e:	1ad3      	subs	r3, r2, r3
 8004c60:	2b02      	cmp	r3, #2
 8004c62:	d901      	bls.n	8004c68 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8004c64:	2303      	movs	r3, #3
 8004c66:	e127      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004c68:	4b96      	ldr	r3, [pc, #600]	; (8004ec4 <HAL_RCC_OscConfig+0x61c>)
 8004c6a:	681a      	ldr	r2, [r3, #0]
 8004c6c:	2380      	movs	r3, #128	; 0x80
 8004c6e:	005b      	lsls	r3, r3, #1
 8004c70:	4013      	ands	r3, r2
 8004c72:	d0f0      	beq.n	8004c56 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	689b      	ldr	r3, [r3, #8]
 8004c78:	2b01      	cmp	r3, #1
 8004c7a:	d106      	bne.n	8004c8a <HAL_RCC_OscConfig+0x3e2>
 8004c7c:	4b90      	ldr	r3, [pc, #576]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004c7e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c80:	4b8f      	ldr	r3, [pc, #572]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004c82:	2101      	movs	r1, #1
 8004c84:	430a      	orrs	r2, r1
 8004c86:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c88:	e01c      	b.n	8004cc4 <HAL_RCC_OscConfig+0x41c>
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	689b      	ldr	r3, [r3, #8]
 8004c8e:	2b05      	cmp	r3, #5
 8004c90:	d10c      	bne.n	8004cac <HAL_RCC_OscConfig+0x404>
 8004c92:	4b8b      	ldr	r3, [pc, #556]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004c94:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004c96:	4b8a      	ldr	r3, [pc, #552]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004c98:	2104      	movs	r1, #4
 8004c9a:	430a      	orrs	r2, r1
 8004c9c:	65da      	str	r2, [r3, #92]	; 0x5c
 8004c9e:	4b88      	ldr	r3, [pc, #544]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004ca0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004ca2:	4b87      	ldr	r3, [pc, #540]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004ca4:	2101      	movs	r1, #1
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	65da      	str	r2, [r3, #92]	; 0x5c
 8004caa:	e00b      	b.n	8004cc4 <HAL_RCC_OscConfig+0x41c>
 8004cac:	4b84      	ldr	r3, [pc, #528]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004cae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cb0:	4b83      	ldr	r3, [pc, #524]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004cb2:	2101      	movs	r1, #1
 8004cb4:	438a      	bics	r2, r1
 8004cb6:	65da      	str	r2, [r3, #92]	; 0x5c
 8004cb8:	4b81      	ldr	r3, [pc, #516]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004cba:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8004cbc:	4b80      	ldr	r3, [pc, #512]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004cbe:	2104      	movs	r1, #4
 8004cc0:	438a      	bics	r2, r1
 8004cc2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	689b      	ldr	r3, [r3, #8]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d014      	beq.n	8004cf6 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ccc:	f7ff fa64 	bl	8004198 <HAL_GetTick>
 8004cd0:	0003      	movs	r3, r0
 8004cd2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cd4:	e009      	b.n	8004cea <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cd6:	f7ff fa5f 	bl	8004198 <HAL_GetTick>
 8004cda:	0002      	movs	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	4a79      	ldr	r2, [pc, #484]	; (8004ec8 <HAL_RCC_OscConfig+0x620>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d901      	bls.n	8004cea <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8004ce6:	2303      	movs	r3, #3
 8004ce8:	e0e6      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cea:	4b75      	ldr	r3, [pc, #468]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004cec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004cee:	2202      	movs	r2, #2
 8004cf0:	4013      	ands	r3, r2
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x42e>
 8004cf4:	e013      	b.n	8004d1e <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cf6:	f7ff fa4f 	bl	8004198 <HAL_GetTick>
 8004cfa:	0003      	movs	r3, r0
 8004cfc:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004cfe:	e009      	b.n	8004d14 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d00:	f7ff fa4a 	bl	8004198 <HAL_GetTick>
 8004d04:	0002      	movs	r2, r0
 8004d06:	693b      	ldr	r3, [r7, #16]
 8004d08:	1ad3      	subs	r3, r2, r3
 8004d0a:	4a6f      	ldr	r2, [pc, #444]	; (8004ec8 <HAL_RCC_OscConfig+0x620>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d901      	bls.n	8004d14 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8004d10:	2303      	movs	r3, #3
 8004d12:	e0d1      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004d14:	4b6a      	ldr	r3, [pc, #424]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004d18:	2202      	movs	r2, #2
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	d1f0      	bne.n	8004d00 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8004d1e:	231f      	movs	r3, #31
 8004d20:	18fb      	adds	r3, r7, r3
 8004d22:	781b      	ldrb	r3, [r3, #0]
 8004d24:	2b01      	cmp	r3, #1
 8004d26:	d105      	bne.n	8004d34 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8004d28:	4b65      	ldr	r3, [pc, #404]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004d2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004d2c:	4b64      	ldr	r3, [pc, #400]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004d2e:	4967      	ldr	r1, [pc, #412]	; (8004ecc <HAL_RCC_OscConfig+0x624>)
 8004d30:	400a      	ands	r2, r1
 8004d32:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d100      	bne.n	8004d3e <HAL_RCC_OscConfig+0x496>
 8004d3c:	e0bb      	b.n	8004eb6 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004d3e:	4b60      	ldr	r3, [pc, #384]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004d40:	689b      	ldr	r3, [r3, #8]
 8004d42:	2238      	movs	r2, #56	; 0x38
 8004d44:	4013      	ands	r3, r2
 8004d46:	2b10      	cmp	r3, #16
 8004d48:	d100      	bne.n	8004d4c <HAL_RCC_OscConfig+0x4a4>
 8004d4a:	e07b      	b.n	8004e44 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	69db      	ldr	r3, [r3, #28]
 8004d50:	2b02      	cmp	r3, #2
 8004d52:	d156      	bne.n	8004e02 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d54:	4b5a      	ldr	r3, [pc, #360]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	4b59      	ldr	r3, [pc, #356]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004d5a:	495d      	ldr	r1, [pc, #372]	; (8004ed0 <HAL_RCC_OscConfig+0x628>)
 8004d5c:	400a      	ands	r2, r1
 8004d5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d60:	f7ff fa1a 	bl	8004198 <HAL_GetTick>
 8004d64:	0003      	movs	r3, r0
 8004d66:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d68:	e008      	b.n	8004d7c <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6a:	f7ff fa15 	bl	8004198 <HAL_GetTick>
 8004d6e:	0002      	movs	r2, r0
 8004d70:	693b      	ldr	r3, [r7, #16]
 8004d72:	1ad3      	subs	r3, r2, r3
 8004d74:	2b02      	cmp	r3, #2
 8004d76:	d901      	bls.n	8004d7c <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8004d78:	2303      	movs	r3, #3
 8004d7a:	e09d      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004d7c:	4b50      	ldr	r3, [pc, #320]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004d7e:	681a      	ldr	r2, [r3, #0]
 8004d80:	2380      	movs	r3, #128	; 0x80
 8004d82:	049b      	lsls	r3, r3, #18
 8004d84:	4013      	ands	r3, r2
 8004d86:	d1f0      	bne.n	8004d6a <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d88:	4b4d      	ldr	r3, [pc, #308]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004d8a:	68db      	ldr	r3, [r3, #12]
 8004d8c:	4a51      	ldr	r2, [pc, #324]	; (8004ed4 <HAL_RCC_OscConfig+0x62c>)
 8004d8e:	4013      	ands	r3, r2
 8004d90:	0019      	movs	r1, r3
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6a1a      	ldr	r2, [r3, #32]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004da0:	021b      	lsls	r3, r3, #8
 8004da2:	431a      	orrs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004da8:	431a      	orrs	r2, r3
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	431a      	orrs	r2, r3
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004db4:	431a      	orrs	r2, r3
 8004db6:	4b42      	ldr	r3, [pc, #264]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004db8:	430a      	orrs	r2, r1
 8004dba:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004dbc:	4b40      	ldr	r3, [pc, #256]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004dbe:	681a      	ldr	r2, [r3, #0]
 8004dc0:	4b3f      	ldr	r3, [pc, #252]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004dc2:	2180      	movs	r1, #128	; 0x80
 8004dc4:	0449      	lsls	r1, r1, #17
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8004dca:	4b3d      	ldr	r3, [pc, #244]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004dcc:	68da      	ldr	r2, [r3, #12]
 8004dce:	4b3c      	ldr	r3, [pc, #240]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004dd0:	2180      	movs	r1, #128	; 0x80
 8004dd2:	0549      	lsls	r1, r1, #21
 8004dd4:	430a      	orrs	r2, r1
 8004dd6:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004dd8:	f7ff f9de 	bl	8004198 <HAL_GetTick>
 8004ddc:	0003      	movs	r3, r0
 8004dde:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004de0:	e008      	b.n	8004df4 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004de2:	f7ff f9d9 	bl	8004198 <HAL_GetTick>
 8004de6:	0002      	movs	r2, r0
 8004de8:	693b      	ldr	r3, [r7, #16]
 8004dea:	1ad3      	subs	r3, r2, r3
 8004dec:	2b02      	cmp	r3, #2
 8004dee:	d901      	bls.n	8004df4 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8004df0:	2303      	movs	r3, #3
 8004df2:	e061      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004df4:	4b32      	ldr	r3, [pc, #200]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	2380      	movs	r3, #128	; 0x80
 8004dfa:	049b      	lsls	r3, r3, #18
 8004dfc:	4013      	ands	r3, r2
 8004dfe:	d0f0      	beq.n	8004de2 <HAL_RCC_OscConfig+0x53a>
 8004e00:	e059      	b.n	8004eb6 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004e02:	4b2f      	ldr	r3, [pc, #188]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004e04:	681a      	ldr	r2, [r3, #0]
 8004e06:	4b2e      	ldr	r3, [pc, #184]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004e08:	4931      	ldr	r1, [pc, #196]	; (8004ed0 <HAL_RCC_OscConfig+0x628>)
 8004e0a:	400a      	ands	r2, r1
 8004e0c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e0e:	f7ff f9c3 	bl	8004198 <HAL_GetTick>
 8004e12:	0003      	movs	r3, r0
 8004e14:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e16:	e008      	b.n	8004e2a <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004e18:	f7ff f9be 	bl	8004198 <HAL_GetTick>
 8004e1c:	0002      	movs	r2, r0
 8004e1e:	693b      	ldr	r3, [r7, #16]
 8004e20:	1ad3      	subs	r3, r2, r3
 8004e22:	2b02      	cmp	r3, #2
 8004e24:	d901      	bls.n	8004e2a <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8004e26:	2303      	movs	r3, #3
 8004e28:	e046      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004e2a:	4b25      	ldr	r3, [pc, #148]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004e2c:	681a      	ldr	r2, [r3, #0]
 8004e2e:	2380      	movs	r3, #128	; 0x80
 8004e30:	049b      	lsls	r3, r3, #18
 8004e32:	4013      	ands	r3, r2
 8004e34:	d1f0      	bne.n	8004e18 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8004e36:	4b22      	ldr	r3, [pc, #136]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004e38:	68da      	ldr	r2, [r3, #12]
 8004e3a:	4b21      	ldr	r3, [pc, #132]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004e3c:	4926      	ldr	r1, [pc, #152]	; (8004ed8 <HAL_RCC_OscConfig+0x630>)
 8004e3e:	400a      	ands	r2, r1
 8004e40:	60da      	str	r2, [r3, #12]
 8004e42:	e038      	b.n	8004eb6 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	69db      	ldr	r3, [r3, #28]
 8004e48:	2b01      	cmp	r3, #1
 8004e4a:	d101      	bne.n	8004e50 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8004e4c:	2301      	movs	r3, #1
 8004e4e:	e033      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8004e50:	4b1b      	ldr	r3, [pc, #108]	; (8004ec0 <HAL_RCC_OscConfig+0x618>)
 8004e52:	68db      	ldr	r3, [r3, #12]
 8004e54:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2203      	movs	r2, #3
 8004e5a:	401a      	ands	r2, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6a1b      	ldr	r3, [r3, #32]
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d126      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e64:	697b      	ldr	r3, [r7, #20]
 8004e66:	2270      	movs	r2, #112	; 0x70
 8004e68:	401a      	ands	r2, r3
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d11f      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e72:	697a      	ldr	r2, [r7, #20]
 8004e74:	23fe      	movs	r3, #254	; 0xfe
 8004e76:	01db      	lsls	r3, r3, #7
 8004e78:	401a      	ands	r2, r3
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e7e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e80:	429a      	cmp	r2, r3
 8004e82:	d116      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004e84:	697a      	ldr	r2, [r7, #20]
 8004e86:	23f8      	movs	r3, #248	; 0xf8
 8004e88:	039b      	lsls	r3, r3, #14
 8004e8a:	401a      	ands	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d10e      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004e94:	697a      	ldr	r2, [r7, #20]
 8004e96:	23e0      	movs	r3, #224	; 0xe0
 8004e98:	051b      	lsls	r3, r3, #20
 8004e9a:	401a      	ands	r2, r3
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8004ea0:	429a      	cmp	r2, r3
 8004ea2:	d106      	bne.n	8004eb2 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8004ea4:	697b      	ldr	r3, [r7, #20]
 8004ea6:	0f5b      	lsrs	r3, r3, #29
 8004ea8:	075a      	lsls	r2, r3, #29
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8004eae:	429a      	cmp	r2, r3
 8004eb0:	d001      	beq.n	8004eb6 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e000      	b.n	8004eb8 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8004eb6:	2300      	movs	r3, #0
}
 8004eb8:	0018      	movs	r0, r3
 8004eba:	46bd      	mov	sp, r7
 8004ebc:	b008      	add	sp, #32
 8004ebe:	bd80      	pop	{r7, pc}
 8004ec0:	40021000 	.word	0x40021000
 8004ec4:	40007000 	.word	0x40007000
 8004ec8:	00001388 	.word	0x00001388
 8004ecc:	efffffff 	.word	0xefffffff
 8004ed0:	feffffff 	.word	0xfeffffff
 8004ed4:	11c1808c 	.word	0x11c1808c
 8004ed8:	eefefffc 	.word	0xeefefffc

08004edc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b084      	sub	sp, #16
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	6078      	str	r0, [r7, #4]
 8004ee4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d101      	bne.n	8004ef0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eec:	2301      	movs	r3, #1
 8004eee:	e0e9      	b.n	80050c4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004ef0:	4b76      	ldr	r3, [pc, #472]	; (80050cc <HAL_RCC_ClockConfig+0x1f0>)
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2207      	movs	r2, #7
 8004ef6:	4013      	ands	r3, r2
 8004ef8:	683a      	ldr	r2, [r7, #0]
 8004efa:	429a      	cmp	r2, r3
 8004efc:	d91e      	bls.n	8004f3c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004efe:	4b73      	ldr	r3, [pc, #460]	; (80050cc <HAL_RCC_ClockConfig+0x1f0>)
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	2207      	movs	r2, #7
 8004f04:	4393      	bics	r3, r2
 8004f06:	0019      	movs	r1, r3
 8004f08:	4b70      	ldr	r3, [pc, #448]	; (80050cc <HAL_RCC_ClockConfig+0x1f0>)
 8004f0a:	683a      	ldr	r2, [r7, #0]
 8004f0c:	430a      	orrs	r2, r1
 8004f0e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004f10:	f7ff f942 	bl	8004198 <HAL_GetTick>
 8004f14:	0003      	movs	r3, r0
 8004f16:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f18:	e009      	b.n	8004f2e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f1a:	f7ff f93d 	bl	8004198 <HAL_GetTick>
 8004f1e:	0002      	movs	r2, r0
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	4a6a      	ldr	r2, [pc, #424]	; (80050d0 <HAL_RCC_ClockConfig+0x1f4>)
 8004f26:	4293      	cmp	r3, r2
 8004f28:	d901      	bls.n	8004f2e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8004f2a:	2303      	movs	r3, #3
 8004f2c:	e0ca      	b.n	80050c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8004f2e:	4b67      	ldr	r3, [pc, #412]	; (80050cc <HAL_RCC_ClockConfig+0x1f0>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	2207      	movs	r2, #7
 8004f34:	4013      	ands	r3, r2
 8004f36:	683a      	ldr	r2, [r7, #0]
 8004f38:	429a      	cmp	r2, r3
 8004f3a:	d1ee      	bne.n	8004f1a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	2202      	movs	r2, #2
 8004f42:	4013      	ands	r3, r2
 8004f44:	d015      	beq.n	8004f72 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	2204      	movs	r2, #4
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	d006      	beq.n	8004f5e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8004f50:	4b60      	ldr	r3, [pc, #384]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f52:	689a      	ldr	r2, [r3, #8]
 8004f54:	4b5f      	ldr	r3, [pc, #380]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f56:	21e0      	movs	r1, #224	; 0xe0
 8004f58:	01c9      	lsls	r1, r1, #7
 8004f5a:	430a      	orrs	r2, r1
 8004f5c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f5e:	4b5d      	ldr	r3, [pc, #372]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	4a5d      	ldr	r2, [pc, #372]	; (80050d8 <HAL_RCC_ClockConfig+0x1fc>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	0019      	movs	r1, r3
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	689a      	ldr	r2, [r3, #8]
 8004f6c:	4b59      	ldr	r3, [pc, #356]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f6e:	430a      	orrs	r2, r1
 8004f70:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	2201      	movs	r2, #1
 8004f78:	4013      	ands	r3, r2
 8004f7a:	d057      	beq.n	800502c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	685b      	ldr	r3, [r3, #4]
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	d107      	bne.n	8004f94 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f84:	4b53      	ldr	r3, [pc, #332]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	2380      	movs	r3, #128	; 0x80
 8004f8a:	029b      	lsls	r3, r3, #10
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	d12b      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e097      	b.n	80050c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	685b      	ldr	r3, [r3, #4]
 8004f98:	2b02      	cmp	r3, #2
 8004f9a:	d107      	bne.n	8004fac <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004f9c:	4b4d      	ldr	r3, [pc, #308]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	2380      	movs	r3, #128	; 0x80
 8004fa2:	049b      	lsls	r3, r3, #18
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	d11f      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fa8:	2301      	movs	r3, #1
 8004faa:	e08b      	b.n	80050c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d107      	bne.n	8004fc4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004fb4:	4b47      	ldr	r3, [pc, #284]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fb6:	681a      	ldr	r2, [r3, #0]
 8004fb8:	2380      	movs	r3, #128	; 0x80
 8004fba:	00db      	lsls	r3, r3, #3
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	d113      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	e07f      	b.n	80050c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	685b      	ldr	r3, [r3, #4]
 8004fc8:	2b03      	cmp	r3, #3
 8004fca:	d106      	bne.n	8004fda <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004fcc:	4b41      	ldr	r3, [pc, #260]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004fd0:	2202      	movs	r2, #2
 8004fd2:	4013      	ands	r3, r2
 8004fd4:	d108      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e074      	b.n	80050c4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004fda:	4b3e      	ldr	r3, [pc, #248]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004fde:	2202      	movs	r2, #2
 8004fe0:	4013      	ands	r3, r2
 8004fe2:	d101      	bne.n	8004fe8 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8004fe4:	2301      	movs	r3, #1
 8004fe6:	e06d      	b.n	80050c4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004fe8:	4b3a      	ldr	r3, [pc, #232]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004fea:	689b      	ldr	r3, [r3, #8]
 8004fec:	2207      	movs	r2, #7
 8004fee:	4393      	bics	r3, r2
 8004ff0:	0019      	movs	r1, r3
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	4b37      	ldr	r3, [pc, #220]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8004ff8:	430a      	orrs	r2, r1
 8004ffa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ffc:	f7ff f8cc 	bl	8004198 <HAL_GetTick>
 8005000:	0003      	movs	r3, r0
 8005002:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005004:	e009      	b.n	800501a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005006:	f7ff f8c7 	bl	8004198 <HAL_GetTick>
 800500a:	0002      	movs	r2, r0
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	1ad3      	subs	r3, r2, r3
 8005010:	4a2f      	ldr	r2, [pc, #188]	; (80050d0 <HAL_RCC_ClockConfig+0x1f4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d901      	bls.n	800501a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005016:	2303      	movs	r3, #3
 8005018:	e054      	b.n	80050c4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800501a:	4b2e      	ldr	r3, [pc, #184]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 800501c:	689b      	ldr	r3, [r3, #8]
 800501e:	2238      	movs	r2, #56	; 0x38
 8005020:	401a      	ands	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	00db      	lsls	r3, r3, #3
 8005028:	429a      	cmp	r2, r3
 800502a:	d1ec      	bne.n	8005006 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800502c:	4b27      	ldr	r3, [pc, #156]	; (80050cc <HAL_RCC_ClockConfig+0x1f0>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	2207      	movs	r2, #7
 8005032:	4013      	ands	r3, r2
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	429a      	cmp	r2, r3
 8005038:	d21e      	bcs.n	8005078 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800503a:	4b24      	ldr	r3, [pc, #144]	; (80050cc <HAL_RCC_ClockConfig+0x1f0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	2207      	movs	r2, #7
 8005040:	4393      	bics	r3, r2
 8005042:	0019      	movs	r1, r3
 8005044:	4b21      	ldr	r3, [pc, #132]	; (80050cc <HAL_RCC_ClockConfig+0x1f0>)
 8005046:	683a      	ldr	r2, [r7, #0]
 8005048:	430a      	orrs	r2, r1
 800504a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800504c:	f7ff f8a4 	bl	8004198 <HAL_GetTick>
 8005050:	0003      	movs	r3, r0
 8005052:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005054:	e009      	b.n	800506a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005056:	f7ff f89f 	bl	8004198 <HAL_GetTick>
 800505a:	0002      	movs	r2, r0
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	1ad3      	subs	r3, r2, r3
 8005060:	4a1b      	ldr	r2, [pc, #108]	; (80050d0 <HAL_RCC_ClockConfig+0x1f4>)
 8005062:	4293      	cmp	r3, r2
 8005064:	d901      	bls.n	800506a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005066:	2303      	movs	r3, #3
 8005068:	e02c      	b.n	80050c4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800506a:	4b18      	ldr	r3, [pc, #96]	; (80050cc <HAL_RCC_ClockConfig+0x1f0>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2207      	movs	r2, #7
 8005070:	4013      	ands	r3, r2
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d1ee      	bne.n	8005056 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2204      	movs	r2, #4
 800507e:	4013      	ands	r3, r2
 8005080:	d009      	beq.n	8005096 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005082:	4b14      	ldr	r3, [pc, #80]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005084:	689b      	ldr	r3, [r3, #8]
 8005086:	4a15      	ldr	r2, [pc, #84]	; (80050dc <HAL_RCC_ClockConfig+0x200>)
 8005088:	4013      	ands	r3, r2
 800508a:	0019      	movs	r1, r3
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	68da      	ldr	r2, [r3, #12]
 8005090:	4b10      	ldr	r3, [pc, #64]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 8005092:	430a      	orrs	r2, r1
 8005094:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005096:	f000 f829 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 800509a:	0001      	movs	r1, r0
 800509c:	4b0d      	ldr	r3, [pc, #52]	; (80050d4 <HAL_RCC_ClockConfig+0x1f8>)
 800509e:	689b      	ldr	r3, [r3, #8]
 80050a0:	0a1b      	lsrs	r3, r3, #8
 80050a2:	220f      	movs	r2, #15
 80050a4:	401a      	ands	r2, r3
 80050a6:	4b0e      	ldr	r3, [pc, #56]	; (80050e0 <HAL_RCC_ClockConfig+0x204>)
 80050a8:	0092      	lsls	r2, r2, #2
 80050aa:	58d3      	ldr	r3, [r2, r3]
 80050ac:	221f      	movs	r2, #31
 80050ae:	4013      	ands	r3, r2
 80050b0:	000a      	movs	r2, r1
 80050b2:	40da      	lsrs	r2, r3
 80050b4:	4b0b      	ldr	r3, [pc, #44]	; (80050e4 <HAL_RCC_ClockConfig+0x208>)
 80050b6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80050b8:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <HAL_RCC_ClockConfig+0x20c>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	0018      	movs	r0, r3
 80050be:	f7fe fefb 	bl	8003eb8 <HAL_InitTick>
 80050c2:	0003      	movs	r3, r0
}
 80050c4:	0018      	movs	r0, r3
 80050c6:	46bd      	mov	sp, r7
 80050c8:	b004      	add	sp, #16
 80050ca:	bd80      	pop	{r7, pc}
 80050cc:	40022000 	.word	0x40022000
 80050d0:	00001388 	.word	0x00001388
 80050d4:	40021000 	.word	0x40021000
 80050d8:	fffff0ff 	.word	0xfffff0ff
 80050dc:	ffff8fff 	.word	0xffff8fff
 80050e0:	08009ee4 	.word	0x08009ee4
 80050e4:	2000000c 	.word	0x2000000c
 80050e8:	20000010 	.word	0x20000010

080050ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b086      	sub	sp, #24
 80050f0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80050f2:	4b3c      	ldr	r3, [pc, #240]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2238      	movs	r2, #56	; 0x38
 80050f8:	4013      	ands	r3, r2
 80050fa:	d10f      	bne.n	800511c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80050fc:	4b39      	ldr	r3, [pc, #228]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	0adb      	lsrs	r3, r3, #11
 8005102:	2207      	movs	r2, #7
 8005104:	4013      	ands	r3, r2
 8005106:	2201      	movs	r2, #1
 8005108:	409a      	lsls	r2, r3
 800510a:	0013      	movs	r3, r2
 800510c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800510e:	6839      	ldr	r1, [r7, #0]
 8005110:	4835      	ldr	r0, [pc, #212]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005112:	f7fb f80b 	bl	800012c <__udivsi3>
 8005116:	0003      	movs	r3, r0
 8005118:	613b      	str	r3, [r7, #16]
 800511a:	e05d      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800511c:	4b31      	ldr	r3, [pc, #196]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	2238      	movs	r2, #56	; 0x38
 8005122:	4013      	ands	r3, r2
 8005124:	2b08      	cmp	r3, #8
 8005126:	d102      	bne.n	800512e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005128:	4b30      	ldr	r3, [pc, #192]	; (80051ec <HAL_RCC_GetSysClockFreq+0x100>)
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	e054      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800512e:	4b2d      	ldr	r3, [pc, #180]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005130:	689b      	ldr	r3, [r3, #8]
 8005132:	2238      	movs	r2, #56	; 0x38
 8005134:	4013      	ands	r3, r2
 8005136:	2b10      	cmp	r3, #16
 8005138:	d138      	bne.n	80051ac <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 800513a:	4b2a      	ldr	r3, [pc, #168]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 800513c:	68db      	ldr	r3, [r3, #12]
 800513e:	2203      	movs	r2, #3
 8005140:	4013      	ands	r3, r2
 8005142:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005144:	4b27      	ldr	r3, [pc, #156]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005146:	68db      	ldr	r3, [r3, #12]
 8005148:	091b      	lsrs	r3, r3, #4
 800514a:	2207      	movs	r2, #7
 800514c:	4013      	ands	r3, r2
 800514e:	3301      	adds	r3, #1
 8005150:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	2b03      	cmp	r3, #3
 8005156:	d10d      	bne.n	8005174 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005158:	68b9      	ldr	r1, [r7, #8]
 800515a:	4824      	ldr	r0, [pc, #144]	; (80051ec <HAL_RCC_GetSysClockFreq+0x100>)
 800515c:	f7fa ffe6 	bl	800012c <__udivsi3>
 8005160:	0003      	movs	r3, r0
 8005162:	0019      	movs	r1, r3
 8005164:	4b1f      	ldr	r3, [pc, #124]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	0a1b      	lsrs	r3, r3, #8
 800516a:	227f      	movs	r2, #127	; 0x7f
 800516c:	4013      	ands	r3, r2
 800516e:	434b      	muls	r3, r1
 8005170:	617b      	str	r3, [r7, #20]
        break;
 8005172:	e00d      	b.n	8005190 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005174:	68b9      	ldr	r1, [r7, #8]
 8005176:	481c      	ldr	r0, [pc, #112]	; (80051e8 <HAL_RCC_GetSysClockFreq+0xfc>)
 8005178:	f7fa ffd8 	bl	800012c <__udivsi3>
 800517c:	0003      	movs	r3, r0
 800517e:	0019      	movs	r1, r3
 8005180:	4b18      	ldr	r3, [pc, #96]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005182:	68db      	ldr	r3, [r3, #12]
 8005184:	0a1b      	lsrs	r3, r3, #8
 8005186:	227f      	movs	r2, #127	; 0x7f
 8005188:	4013      	ands	r3, r2
 800518a:	434b      	muls	r3, r1
 800518c:	617b      	str	r3, [r7, #20]
        break;
 800518e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005190:	4b14      	ldr	r3, [pc, #80]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005192:	68db      	ldr	r3, [r3, #12]
 8005194:	0f5b      	lsrs	r3, r3, #29
 8005196:	2207      	movs	r2, #7
 8005198:	4013      	ands	r3, r2
 800519a:	3301      	adds	r3, #1
 800519c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800519e:	6879      	ldr	r1, [r7, #4]
 80051a0:	6978      	ldr	r0, [r7, #20]
 80051a2:	f7fa ffc3 	bl	800012c <__udivsi3>
 80051a6:	0003      	movs	r3, r0
 80051a8:	613b      	str	r3, [r7, #16]
 80051aa:	e015      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80051ac:	4b0d      	ldr	r3, [pc, #52]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051ae:	689b      	ldr	r3, [r3, #8]
 80051b0:	2238      	movs	r2, #56	; 0x38
 80051b2:	4013      	ands	r3, r2
 80051b4:	2b20      	cmp	r3, #32
 80051b6:	d103      	bne.n	80051c0 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80051b8:	2380      	movs	r3, #128	; 0x80
 80051ba:	021b      	lsls	r3, r3, #8
 80051bc:	613b      	str	r3, [r7, #16]
 80051be:	e00b      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80051c0:	4b08      	ldr	r3, [pc, #32]	; (80051e4 <HAL_RCC_GetSysClockFreq+0xf8>)
 80051c2:	689b      	ldr	r3, [r3, #8]
 80051c4:	2238      	movs	r2, #56	; 0x38
 80051c6:	4013      	ands	r3, r2
 80051c8:	2b18      	cmp	r3, #24
 80051ca:	d103      	bne.n	80051d4 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80051cc:	23fa      	movs	r3, #250	; 0xfa
 80051ce:	01db      	lsls	r3, r3, #7
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e001      	b.n	80051d8 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 80051d4:	2300      	movs	r3, #0
 80051d6:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80051d8:	693b      	ldr	r3, [r7, #16]
}
 80051da:	0018      	movs	r0, r3
 80051dc:	46bd      	mov	sp, r7
 80051de:	b006      	add	sp, #24
 80051e0:	bd80      	pop	{r7, pc}
 80051e2:	46c0      	nop			; (mov r8, r8)
 80051e4:	40021000 	.word	0x40021000
 80051e8:	00f42400 	.word	0x00f42400
 80051ec:	007a1200 	.word	0x007a1200

080051f0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80051f4:	4b02      	ldr	r3, [pc, #8]	; (8005200 <HAL_RCC_GetHCLKFreq+0x10>)
 80051f6:	681b      	ldr	r3, [r3, #0]
}
 80051f8:	0018      	movs	r0, r3
 80051fa:	46bd      	mov	sp, r7
 80051fc:	bd80      	pop	{r7, pc}
 80051fe:	46c0      	nop			; (mov r8, r8)
 8005200:	2000000c 	.word	0x2000000c

08005204 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005204:	b5b0      	push	{r4, r5, r7, lr}
 8005206:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8005208:	f7ff fff2 	bl	80051f0 <HAL_RCC_GetHCLKFreq>
 800520c:	0004      	movs	r4, r0
 800520e:	f7ff fb3f 	bl	8004890 <LL_RCC_GetAPB1Prescaler>
 8005212:	0003      	movs	r3, r0
 8005214:	0b1a      	lsrs	r2, r3, #12
 8005216:	4b05      	ldr	r3, [pc, #20]	; (800522c <HAL_RCC_GetPCLK1Freq+0x28>)
 8005218:	0092      	lsls	r2, r2, #2
 800521a:	58d3      	ldr	r3, [r2, r3]
 800521c:	221f      	movs	r2, #31
 800521e:	4013      	ands	r3, r2
 8005220:	40dc      	lsrs	r4, r3
 8005222:	0023      	movs	r3, r4
}
 8005224:	0018      	movs	r0, r3
 8005226:	46bd      	mov	sp, r7
 8005228:	bdb0      	pop	{r4, r5, r7, pc}
 800522a:	46c0      	nop			; (mov r8, r8)
 800522c:	08009f24 	.word	0x08009f24

08005230 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b082      	sub	sp, #8
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2207      	movs	r2, #7
 800523e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8005240:	4b0e      	ldr	r3, [pc, #56]	; (800527c <HAL_RCC_GetClockConfig+0x4c>)
 8005242:	689b      	ldr	r3, [r3, #8]
 8005244:	2207      	movs	r2, #7
 8005246:	401a      	ands	r2, r3
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800524c:	4b0b      	ldr	r3, [pc, #44]	; (800527c <HAL_RCC_GetClockConfig+0x4c>)
 800524e:	689a      	ldr	r2, [r3, #8]
 8005250:	23f0      	movs	r3, #240	; 0xf0
 8005252:	011b      	lsls	r3, r3, #4
 8005254:	401a      	ands	r2, r3
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800525a:	4b08      	ldr	r3, [pc, #32]	; (800527c <HAL_RCC_GetClockConfig+0x4c>)
 800525c:	689a      	ldr	r2, [r3, #8]
 800525e:	23e0      	movs	r3, #224	; 0xe0
 8005260:	01db      	lsls	r3, r3, #7
 8005262:	401a      	ands	r2, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8005268:	4b05      	ldr	r3, [pc, #20]	; (8005280 <HAL_RCC_GetClockConfig+0x50>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	2207      	movs	r2, #7
 800526e:	401a      	ands	r2, r3
 8005270:	683b      	ldr	r3, [r7, #0]
 8005272:	601a      	str	r2, [r3, #0]
}
 8005274:	46c0      	nop			; (mov r8, r8)
 8005276:	46bd      	mov	sp, r7
 8005278:	b002      	add	sp, #8
 800527a:	bd80      	pop	{r7, pc}
 800527c:	40021000 	.word	0x40021000
 8005280:	40022000 	.word	0x40022000

08005284 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b086      	sub	sp, #24
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 800528c:	2313      	movs	r3, #19
 800528e:	18fb      	adds	r3, r7, r3
 8005290:	2200      	movs	r2, #0
 8005292:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005294:	2312      	movs	r3, #18
 8005296:	18fb      	adds	r3, r7, r3
 8005298:	2200      	movs	r2, #0
 800529a:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681a      	ldr	r2, [r3, #0]
 80052a0:	2380      	movs	r3, #128	; 0x80
 80052a2:	029b      	lsls	r3, r3, #10
 80052a4:	4013      	ands	r3, r2
 80052a6:	d100      	bne.n	80052aa <HAL_RCCEx_PeriphCLKConfig+0x26>
 80052a8:	e0a3      	b.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052aa:	2011      	movs	r0, #17
 80052ac:	183b      	adds	r3, r7, r0
 80052ae:	2200      	movs	r2, #0
 80052b0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052b2:	4bc3      	ldr	r3, [pc, #780]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052b6:	2380      	movs	r3, #128	; 0x80
 80052b8:	055b      	lsls	r3, r3, #21
 80052ba:	4013      	ands	r3, r2
 80052bc:	d110      	bne.n	80052e0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052be:	4bc0      	ldr	r3, [pc, #768]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052c0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052c2:	4bbf      	ldr	r3, [pc, #764]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052c4:	2180      	movs	r1, #128	; 0x80
 80052c6:	0549      	lsls	r1, r1, #21
 80052c8:	430a      	orrs	r2, r1
 80052ca:	63da      	str	r2, [r3, #60]	; 0x3c
 80052cc:	4bbc      	ldr	r3, [pc, #752]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80052ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052d0:	2380      	movs	r3, #128	; 0x80
 80052d2:	055b      	lsls	r3, r3, #21
 80052d4:	4013      	ands	r3, r2
 80052d6:	60bb      	str	r3, [r7, #8]
 80052d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052da:	183b      	adds	r3, r7, r0
 80052dc:	2201      	movs	r2, #1
 80052de:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80052e0:	4bb8      	ldr	r3, [pc, #736]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	4bb7      	ldr	r3, [pc, #732]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80052e6:	2180      	movs	r1, #128	; 0x80
 80052e8:	0049      	lsls	r1, r1, #1
 80052ea:	430a      	orrs	r2, r1
 80052ec:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80052ee:	f7fe ff53 	bl	8004198 <HAL_GetTick>
 80052f2:	0003      	movs	r3, r0
 80052f4:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80052f6:	e00b      	b.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80052f8:	f7fe ff4e 	bl	8004198 <HAL_GetTick>
 80052fc:	0002      	movs	r2, r0
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	1ad3      	subs	r3, r2, r3
 8005302:	2b02      	cmp	r3, #2
 8005304:	d904      	bls.n	8005310 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8005306:	2313      	movs	r3, #19
 8005308:	18fb      	adds	r3, r7, r3
 800530a:	2203      	movs	r2, #3
 800530c:	701a      	strb	r2, [r3, #0]
        break;
 800530e:	e005      	b.n	800531c <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005310:	4bac      	ldr	r3, [pc, #688]	; (80055c4 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8005312:	681a      	ldr	r2, [r3, #0]
 8005314:	2380      	movs	r3, #128	; 0x80
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4013      	ands	r3, r2
 800531a:	d0ed      	beq.n	80052f8 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 800531c:	2313      	movs	r3, #19
 800531e:	18fb      	adds	r3, r7, r3
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d154      	bne.n	80053d0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005326:	4ba6      	ldr	r3, [pc, #664]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005328:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800532a:	23c0      	movs	r3, #192	; 0xc0
 800532c:	009b      	lsls	r3, r3, #2
 800532e:	4013      	ands	r3, r2
 8005330:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005332:	697b      	ldr	r3, [r7, #20]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d019      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533c:	697a      	ldr	r2, [r7, #20]
 800533e:	429a      	cmp	r2, r3
 8005340:	d014      	beq.n	800536c <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005342:	4b9f      	ldr	r3, [pc, #636]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005344:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005346:	4aa0      	ldr	r2, [pc, #640]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8005348:	4013      	ands	r3, r2
 800534a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800534c:	4b9c      	ldr	r3, [pc, #624]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800534e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005350:	4b9b      	ldr	r3, [pc, #620]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005352:	2180      	movs	r1, #128	; 0x80
 8005354:	0249      	lsls	r1, r1, #9
 8005356:	430a      	orrs	r2, r1
 8005358:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800535a:	4b99      	ldr	r3, [pc, #612]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800535c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800535e:	4b98      	ldr	r3, [pc, #608]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005360:	499a      	ldr	r1, [pc, #616]	; (80055cc <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8005362:	400a      	ands	r2, r1
 8005364:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005366:	4b96      	ldr	r3, [pc, #600]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005368:	697a      	ldr	r2, [r7, #20]
 800536a:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800536c:	697b      	ldr	r3, [r7, #20]
 800536e:	2201      	movs	r2, #1
 8005370:	4013      	ands	r3, r2
 8005372:	d016      	beq.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005374:	f7fe ff10 	bl	8004198 <HAL_GetTick>
 8005378:	0003      	movs	r3, r0
 800537a:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800537c:	e00c      	b.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800537e:	f7fe ff0b 	bl	8004198 <HAL_GetTick>
 8005382:	0002      	movs	r2, r0
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	4a91      	ldr	r2, [pc, #580]	; (80055d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800538a:	4293      	cmp	r3, r2
 800538c:	d904      	bls.n	8005398 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 800538e:	2313      	movs	r3, #19
 8005390:	18fb      	adds	r3, r7, r3
 8005392:	2203      	movs	r2, #3
 8005394:	701a      	strb	r2, [r3, #0]
            break;
 8005396:	e004      	b.n	80053a2 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005398:	4b89      	ldr	r3, [pc, #548]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800539a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800539c:	2202      	movs	r2, #2
 800539e:	4013      	ands	r3, r2
 80053a0:	d0ed      	beq.n	800537e <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80053a2:	2313      	movs	r3, #19
 80053a4:	18fb      	adds	r3, r7, r3
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d10a      	bne.n	80053c2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053ac:	4b84      	ldr	r3, [pc, #528]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80053b0:	4a85      	ldr	r2, [pc, #532]	; (80055c8 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80053b2:	4013      	ands	r3, r2
 80053b4:	0019      	movs	r1, r3
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80053ba:	4b81      	ldr	r3, [pc, #516]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053bc:	430a      	orrs	r2, r1
 80053be:	65da      	str	r2, [r3, #92]	; 0x5c
 80053c0:	e00c      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80053c2:	2312      	movs	r3, #18
 80053c4:	18fb      	adds	r3, r7, r3
 80053c6:	2213      	movs	r2, #19
 80053c8:	18ba      	adds	r2, r7, r2
 80053ca:	7812      	ldrb	r2, [r2, #0]
 80053cc:	701a      	strb	r2, [r3, #0]
 80053ce:	e005      	b.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80053d0:	2312      	movs	r3, #18
 80053d2:	18fb      	adds	r3, r7, r3
 80053d4:	2213      	movs	r2, #19
 80053d6:	18ba      	adds	r2, r7, r2
 80053d8:	7812      	ldrb	r2, [r2, #0]
 80053da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80053dc:	2311      	movs	r3, #17
 80053de:	18fb      	adds	r3, r7, r3
 80053e0:	781b      	ldrb	r3, [r3, #0]
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d105      	bne.n	80053f2 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053e6:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80053ea:	4b75      	ldr	r3, [pc, #468]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053ec:	4979      	ldr	r1, [pc, #484]	; (80055d4 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 80053ee:	400a      	ands	r2, r1
 80053f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	2201      	movs	r2, #1
 80053f8:	4013      	ands	r3, r2
 80053fa:	d009      	beq.n	8005410 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80053fc:	4b70      	ldr	r3, [pc, #448]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80053fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005400:	2203      	movs	r2, #3
 8005402:	4393      	bics	r3, r2
 8005404:	0019      	movs	r1, r3
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	685a      	ldr	r2, [r3, #4]
 800540a:	4b6d      	ldr	r3, [pc, #436]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800540c:	430a      	orrs	r2, r1
 800540e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	2202      	movs	r2, #2
 8005416:	4013      	ands	r3, r2
 8005418:	d009      	beq.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800541a:	4b69      	ldr	r3, [pc, #420]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800541c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800541e:	220c      	movs	r2, #12
 8005420:	4393      	bics	r3, r2
 8005422:	0019      	movs	r1, r3
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689a      	ldr	r2, [r3, #8]
 8005428:	4b65      	ldr	r3, [pc, #404]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800542a:	430a      	orrs	r2, r1
 800542c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	2210      	movs	r2, #16
 8005434:	4013      	ands	r3, r2
 8005436:	d009      	beq.n	800544c <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005438:	4b61      	ldr	r3, [pc, #388]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800543a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800543c:	4a66      	ldr	r2, [pc, #408]	; (80055d8 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 800543e:	4013      	ands	r3, r2
 8005440:	0019      	movs	r1, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	68da      	ldr	r2, [r3, #12]
 8005446:	4b5e      	ldr	r3, [pc, #376]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005448:	430a      	orrs	r2, r1
 800544a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681a      	ldr	r2, [r3, #0]
 8005450:	2380      	movs	r3, #128	; 0x80
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4013      	ands	r3, r2
 8005456:	d009      	beq.n	800546c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005458:	4b59      	ldr	r3, [pc, #356]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800545a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800545c:	4a5f      	ldr	r2, [pc, #380]	; (80055dc <HAL_RCCEx_PeriphCLKConfig+0x358>)
 800545e:	4013      	ands	r3, r2
 8005460:	0019      	movs	r1, r3
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699a      	ldr	r2, [r3, #24]
 8005466:	4b56      	ldr	r3, [pc, #344]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005468:	430a      	orrs	r2, r1
 800546a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681a      	ldr	r2, [r3, #0]
 8005470:	2380      	movs	r3, #128	; 0x80
 8005472:	00db      	lsls	r3, r3, #3
 8005474:	4013      	ands	r3, r2
 8005476:	d009      	beq.n	800548c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8005478:	4b51      	ldr	r3, [pc, #324]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800547a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800547c:	4a58      	ldr	r2, [pc, #352]	; (80055e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 800547e:	4013      	ands	r3, r2
 8005480:	0019      	movs	r1, r3
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	69da      	ldr	r2, [r3, #28]
 8005486:	4b4e      	ldr	r3, [pc, #312]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005488:	430a      	orrs	r2, r1
 800548a:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	2220      	movs	r2, #32
 8005492:	4013      	ands	r3, r2
 8005494:	d009      	beq.n	80054aa <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005496:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800549a:	4a52      	ldr	r2, [pc, #328]	; (80055e4 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 800549c:	4013      	ands	r3, r2
 800549e:	0019      	movs	r1, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	691a      	ldr	r2, [r3, #16]
 80054a4:	4b46      	ldr	r3, [pc, #280]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054a6:	430a      	orrs	r2, r1
 80054a8:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	2380      	movs	r3, #128	; 0x80
 80054b0:	01db      	lsls	r3, r3, #7
 80054b2:	4013      	ands	r3, r2
 80054b4:	d015      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80054b6:	4b42      	ldr	r3, [pc, #264]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054ba:	009b      	lsls	r3, r3, #2
 80054bc:	0899      	lsrs	r1, r3, #2
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6a1a      	ldr	r2, [r3, #32]
 80054c2:	4b3f      	ldr	r3, [pc, #252]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054c4:	430a      	orrs	r2, r1
 80054c6:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a1a      	ldr	r2, [r3, #32]
 80054cc:	2380      	movs	r3, #128	; 0x80
 80054ce:	05db      	lsls	r3, r3, #23
 80054d0:	429a      	cmp	r2, r3
 80054d2:	d106      	bne.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80054d4:	4b3a      	ldr	r3, [pc, #232]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054d6:	68da      	ldr	r2, [r3, #12]
 80054d8:	4b39      	ldr	r3, [pc, #228]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054da:	2180      	movs	r1, #128	; 0x80
 80054dc:	0249      	lsls	r1, r1, #9
 80054de:	430a      	orrs	r2, r1
 80054e0:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	2380      	movs	r3, #128	; 0x80
 80054e8:	031b      	lsls	r3, r3, #12
 80054ea:	4013      	ands	r3, r2
 80054ec:	d009      	beq.n	8005502 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80054ee:	4b34      	ldr	r3, [pc, #208]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054f2:	2240      	movs	r2, #64	; 0x40
 80054f4:	4393      	bics	r3, r2
 80054f6:	0019      	movs	r1, r3
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054fc:	4b30      	ldr	r3, [pc, #192]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80054fe:	430a      	orrs	r2, r1
 8005500:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681a      	ldr	r2, [r3, #0]
 8005506:	2380      	movs	r3, #128	; 0x80
 8005508:	039b      	lsls	r3, r3, #14
 800550a:	4013      	ands	r3, r2
 800550c:	d016      	beq.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800550e:	4b2c      	ldr	r3, [pc, #176]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005510:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005512:	4a35      	ldr	r2, [pc, #212]	; (80055e8 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8005514:	4013      	ands	r3, r2
 8005516:	0019      	movs	r1, r3
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800551c:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800551e:	430a      	orrs	r2, r1
 8005520:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8005526:	2380      	movs	r3, #128	; 0x80
 8005528:	03db      	lsls	r3, r3, #15
 800552a:	429a      	cmp	r2, r3
 800552c:	d106      	bne.n	800553c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800552e:	4b24      	ldr	r3, [pc, #144]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005530:	68da      	ldr	r2, [r3, #12]
 8005532:	4b23      	ldr	r3, [pc, #140]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005534:	2180      	movs	r1, #128	; 0x80
 8005536:	0449      	lsls	r1, r1, #17
 8005538:	430a      	orrs	r2, r1
 800553a:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	2380      	movs	r3, #128	; 0x80
 8005542:	03db      	lsls	r3, r3, #15
 8005544:	4013      	ands	r3, r2
 8005546:	d016      	beq.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8005548:	4b1d      	ldr	r3, [pc, #116]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800554a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554c:	4a27      	ldr	r2, [pc, #156]	; (80055ec <HAL_RCCEx_PeriphCLKConfig+0x368>)
 800554e:	4013      	ands	r3, r2
 8005550:	0019      	movs	r1, r3
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005556:	4b1a      	ldr	r3, [pc, #104]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005558:	430a      	orrs	r2, r1
 800555a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005560:	2380      	movs	r3, #128	; 0x80
 8005562:	045b      	lsls	r3, r3, #17
 8005564:	429a      	cmp	r2, r3
 8005566:	d106      	bne.n	8005576 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8005568:	4b15      	ldr	r3, [pc, #84]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800556a:	68da      	ldr	r2, [r3, #12]
 800556c:	4b14      	ldr	r3, [pc, #80]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800556e:	2180      	movs	r1, #128	; 0x80
 8005570:	0449      	lsls	r1, r1, #17
 8005572:	430a      	orrs	r2, r1
 8005574:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	681a      	ldr	r2, [r3, #0]
 800557a:	2380      	movs	r3, #128	; 0x80
 800557c:	011b      	lsls	r3, r3, #4
 800557e:	4013      	ands	r3, r2
 8005580:	d016      	beq.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005584:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005586:	4a1a      	ldr	r2, [pc, #104]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 8005588:	4013      	ands	r3, r2
 800558a:	0019      	movs	r1, r3
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	695a      	ldr	r2, [r3, #20]
 8005590:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8005592:	430a      	orrs	r2, r1
 8005594:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	695a      	ldr	r2, [r3, #20]
 800559a:	2380      	movs	r3, #128	; 0x80
 800559c:	01db      	lsls	r3, r3, #7
 800559e:	429a      	cmp	r2, r3
 80055a0:	d106      	bne.n	80055b0 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80055a2:	4b07      	ldr	r3, [pc, #28]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a4:	68da      	ldr	r2, [r3, #12]
 80055a6:	4b06      	ldr	r3, [pc, #24]	; (80055c0 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80055a8:	2180      	movs	r1, #128	; 0x80
 80055aa:	0249      	lsls	r1, r1, #9
 80055ac:	430a      	orrs	r2, r1
 80055ae:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80055b0:	2312      	movs	r3, #18
 80055b2:	18fb      	adds	r3, r7, r3
 80055b4:	781b      	ldrb	r3, [r3, #0]
}
 80055b6:	0018      	movs	r0, r3
 80055b8:	46bd      	mov	sp, r7
 80055ba:	b006      	add	sp, #24
 80055bc:	bd80      	pop	{r7, pc}
 80055be:	46c0      	nop			; (mov r8, r8)
 80055c0:	40021000 	.word	0x40021000
 80055c4:	40007000 	.word	0x40007000
 80055c8:	fffffcff 	.word	0xfffffcff
 80055cc:	fffeffff 	.word	0xfffeffff
 80055d0:	00001388 	.word	0x00001388
 80055d4:	efffffff 	.word	0xefffffff
 80055d8:	fffff3ff 	.word	0xfffff3ff
 80055dc:	fff3ffff 	.word	0xfff3ffff
 80055e0:	ffcfffff 	.word	0xffcfffff
 80055e4:	ffffcfff 	.word	0xffffcfff
 80055e8:	ffbfffff 	.word	0xffbfffff
 80055ec:	feffffff 	.word	0xfeffffff
 80055f0:	ffff3fff 	.word	0xffff3fff

080055f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b082      	sub	sp, #8
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d101      	bne.n	8005606 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e04a      	b.n	800569c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	223d      	movs	r2, #61	; 0x3d
 800560a:	5c9b      	ldrb	r3, [r3, r2]
 800560c:	b2db      	uxtb	r3, r3
 800560e:	2b00      	cmp	r3, #0
 8005610:	d107      	bne.n	8005622 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	223c      	movs	r2, #60	; 0x3c
 8005616:	2100      	movs	r1, #0
 8005618:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	0018      	movs	r0, r3
 800561e:	f000 f841 	bl	80056a4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	223d      	movs	r2, #61	; 0x3d
 8005626:	2102      	movs	r1, #2
 8005628:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681a      	ldr	r2, [r3, #0]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	3304      	adds	r3, #4
 8005632:	0019      	movs	r1, r3
 8005634:	0010      	movs	r0, r2
 8005636:	f000 f9c1 	bl	80059bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	2248      	movs	r2, #72	; 0x48
 800563e:	2101      	movs	r1, #1
 8005640:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	223e      	movs	r2, #62	; 0x3e
 8005646:	2101      	movs	r1, #1
 8005648:	5499      	strb	r1, [r3, r2]
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	223f      	movs	r2, #63	; 0x3f
 800564e:	2101      	movs	r1, #1
 8005650:	5499      	strb	r1, [r3, r2]
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2240      	movs	r2, #64	; 0x40
 8005656:	2101      	movs	r1, #1
 8005658:	5499      	strb	r1, [r3, r2]
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2241      	movs	r2, #65	; 0x41
 800565e:	2101      	movs	r1, #1
 8005660:	5499      	strb	r1, [r3, r2]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	2242      	movs	r2, #66	; 0x42
 8005666:	2101      	movs	r1, #1
 8005668:	5499      	strb	r1, [r3, r2]
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	2243      	movs	r2, #67	; 0x43
 800566e:	2101      	movs	r1, #1
 8005670:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	2244      	movs	r2, #68	; 0x44
 8005676:	2101      	movs	r1, #1
 8005678:	5499      	strb	r1, [r3, r2]
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2245      	movs	r2, #69	; 0x45
 800567e:	2101      	movs	r1, #1
 8005680:	5499      	strb	r1, [r3, r2]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2246      	movs	r2, #70	; 0x46
 8005686:	2101      	movs	r1, #1
 8005688:	5499      	strb	r1, [r3, r2]
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2247      	movs	r2, #71	; 0x47
 800568e:	2101      	movs	r1, #1
 8005690:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	223d      	movs	r2, #61	; 0x3d
 8005696:	2101      	movs	r1, #1
 8005698:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800569a:	2300      	movs	r3, #0
}
 800569c:	0018      	movs	r0, r3
 800569e:	46bd      	mov	sp, r7
 80056a0:	b002      	add	sp, #8
 80056a2:	bd80      	pop	{r7, pc}

080056a4 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b082      	sub	sp, #8
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80056ac:	46c0      	nop			; (mov r8, r8)
 80056ae:	46bd      	mov	sp, r7
 80056b0:	b002      	add	sp, #8
 80056b2:	bd80      	pop	{r7, pc}

080056b4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80056b4:	b580      	push	{r7, lr}
 80056b6:	b084      	sub	sp, #16
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	223d      	movs	r2, #61	; 0x3d
 80056c0:	5c9b      	ldrb	r3, [r3, r2]
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	2b01      	cmp	r3, #1
 80056c6:	d001      	beq.n	80056cc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e042      	b.n	8005752 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	223d      	movs	r2, #61	; 0x3d
 80056d0:	2102      	movs	r1, #2
 80056d2:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681b      	ldr	r3, [r3, #0]
 80056d8:	68da      	ldr	r2, [r3, #12]
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	2101      	movs	r1, #1
 80056e0:	430a      	orrs	r2, r1
 80056e2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	4a1c      	ldr	r2, [pc, #112]	; (800575c <HAL_TIM_Base_Start_IT+0xa8>)
 80056ea:	4293      	cmp	r3, r2
 80056ec:	d00f      	beq.n	800570e <HAL_TIM_Base_Start_IT+0x5a>
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681a      	ldr	r2, [r3, #0]
 80056f2:	2380      	movs	r3, #128	; 0x80
 80056f4:	05db      	lsls	r3, r3, #23
 80056f6:	429a      	cmp	r2, r3
 80056f8:	d009      	beq.n	800570e <HAL_TIM_Base_Start_IT+0x5a>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	681b      	ldr	r3, [r3, #0]
 80056fe:	4a18      	ldr	r2, [pc, #96]	; (8005760 <HAL_TIM_Base_Start_IT+0xac>)
 8005700:	4293      	cmp	r3, r2
 8005702:	d004      	beq.n	800570e <HAL_TIM_Base_Start_IT+0x5a>
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	4a16      	ldr	r2, [pc, #88]	; (8005764 <HAL_TIM_Base_Start_IT+0xb0>)
 800570a:	4293      	cmp	r3, r2
 800570c:	d116      	bne.n	800573c <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4a14      	ldr	r2, [pc, #80]	; (8005768 <HAL_TIM_Base_Start_IT+0xb4>)
 8005716:	4013      	ands	r3, r2
 8005718:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	2b06      	cmp	r3, #6
 800571e:	d016      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x9a>
 8005720:	68fa      	ldr	r2, [r7, #12]
 8005722:	2380      	movs	r3, #128	; 0x80
 8005724:	025b      	lsls	r3, r3, #9
 8005726:	429a      	cmp	r2, r3
 8005728:	d011      	beq.n	800574e <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	2101      	movs	r1, #1
 8005736:	430a      	orrs	r2, r1
 8005738:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800573a:	e008      	b.n	800574e <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	681a      	ldr	r2, [r3, #0]
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	2101      	movs	r1, #1
 8005748:	430a      	orrs	r2, r1
 800574a:	601a      	str	r2, [r3, #0]
 800574c:	e000      	b.n	8005750 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800574e:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8005750:	2300      	movs	r3, #0
}
 8005752:	0018      	movs	r0, r3
 8005754:	46bd      	mov	sp, r7
 8005756:	b004      	add	sp, #16
 8005758:	bd80      	pop	{r7, pc}
 800575a:	46c0      	nop			; (mov r8, r8)
 800575c:	40012c00 	.word	0x40012c00
 8005760:	40000400 	.word	0x40000400
 8005764:	40014000 	.word	0x40014000
 8005768:	00010007 	.word	0x00010007

0800576c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b084      	sub	sp, #16
 8005770:	af00      	add	r7, sp, #0
 8005772:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68db      	ldr	r3, [r3, #12]
 800577a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	691b      	ldr	r3, [r3, #16]
 8005782:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005784:	68bb      	ldr	r3, [r7, #8]
 8005786:	2202      	movs	r2, #2
 8005788:	4013      	ands	r3, r2
 800578a:	d021      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2202      	movs	r2, #2
 8005790:	4013      	ands	r3, r2
 8005792:	d01d      	beq.n	80057d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	2203      	movs	r2, #3
 800579a:	4252      	negs	r2, r2
 800579c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2201      	movs	r2, #1
 80057a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	699b      	ldr	r3, [r3, #24]
 80057aa:	2203      	movs	r2, #3
 80057ac:	4013      	ands	r3, r2
 80057ae:	d004      	beq.n	80057ba <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	0018      	movs	r0, r3
 80057b4:	f000 f8ea 	bl	800598c <HAL_TIM_IC_CaptureCallback>
 80057b8:	e007      	b.n	80057ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	0018      	movs	r0, r3
 80057be:	f000 f8dd 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	0018      	movs	r0, r3
 80057c6:	f000 f8e9 	bl	800599c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2200      	movs	r2, #0
 80057ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	2204      	movs	r2, #4
 80057d4:	4013      	ands	r3, r2
 80057d6:	d022      	beq.n	800581e <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	2204      	movs	r2, #4
 80057dc:	4013      	ands	r3, r2
 80057de:	d01e      	beq.n	800581e <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	2205      	movs	r2, #5
 80057e6:	4252      	negs	r2, r2
 80057e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2202      	movs	r2, #2
 80057ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	699a      	ldr	r2, [r3, #24]
 80057f6:	23c0      	movs	r3, #192	; 0xc0
 80057f8:	009b      	lsls	r3, r3, #2
 80057fa:	4013      	ands	r3, r2
 80057fc:	d004      	beq.n	8005808 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	0018      	movs	r0, r3
 8005802:	f000 f8c3 	bl	800598c <HAL_TIM_IC_CaptureCallback>
 8005806:	e007      	b.n	8005818 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	0018      	movs	r0, r3
 800580c:	f000 f8b6 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	0018      	movs	r0, r3
 8005814:	f000 f8c2 	bl	800599c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800581e:	68bb      	ldr	r3, [r7, #8]
 8005820:	2208      	movs	r2, #8
 8005822:	4013      	ands	r3, r2
 8005824:	d021      	beq.n	800586a <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	2208      	movs	r2, #8
 800582a:	4013      	ands	r3, r2
 800582c:	d01d      	beq.n	800586a <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	2209      	movs	r2, #9
 8005834:	4252      	negs	r2, r2
 8005836:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	2204      	movs	r2, #4
 800583c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	69db      	ldr	r3, [r3, #28]
 8005844:	2203      	movs	r2, #3
 8005846:	4013      	ands	r3, r2
 8005848:	d004      	beq.n	8005854 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	0018      	movs	r0, r3
 800584e:	f000 f89d 	bl	800598c <HAL_TIM_IC_CaptureCallback>
 8005852:	e007      	b.n	8005864 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	0018      	movs	r0, r3
 8005858:	f000 f890 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	0018      	movs	r0, r3
 8005860:	f000 f89c 	bl	800599c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2200      	movs	r2, #0
 8005868:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800586a:	68bb      	ldr	r3, [r7, #8]
 800586c:	2210      	movs	r2, #16
 800586e:	4013      	ands	r3, r2
 8005870:	d022      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	2210      	movs	r2, #16
 8005876:	4013      	ands	r3, r2
 8005878:	d01e      	beq.n	80058b8 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	2211      	movs	r2, #17
 8005880:	4252      	negs	r2, r2
 8005882:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2208      	movs	r2, #8
 8005888:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	69da      	ldr	r2, [r3, #28]
 8005890:	23c0      	movs	r3, #192	; 0xc0
 8005892:	009b      	lsls	r3, r3, #2
 8005894:	4013      	ands	r3, r2
 8005896:	d004      	beq.n	80058a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	0018      	movs	r0, r3
 800589c:	f000 f876 	bl	800598c <HAL_TIM_IC_CaptureCallback>
 80058a0:	e007      	b.n	80058b2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	0018      	movs	r0, r3
 80058a6:	f000 f869 	bl	800597c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	0018      	movs	r0, r3
 80058ae:	f000 f875 	bl	800599c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	2200      	movs	r2, #0
 80058b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	2201      	movs	r2, #1
 80058bc:	4013      	ands	r3, r2
 80058be:	d00c      	beq.n	80058da <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2201      	movs	r2, #1
 80058c4:	4013      	ands	r3, r2
 80058c6:	d008      	beq.n	80058da <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	2202      	movs	r2, #2
 80058ce:	4252      	negs	r2, r2
 80058d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	0018      	movs	r0, r3
 80058d6:	f7fe f9ed 	bl	8003cb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	2280      	movs	r2, #128	; 0x80
 80058de:	4013      	ands	r3, r2
 80058e0:	d104      	bne.n	80058ec <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80058e2:	68ba      	ldr	r2, [r7, #8]
 80058e4:	2380      	movs	r3, #128	; 0x80
 80058e6:	019b      	lsls	r3, r3, #6
 80058e8:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80058ea:	d00b      	beq.n	8005904 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	2280      	movs	r2, #128	; 0x80
 80058f0:	4013      	ands	r3, r2
 80058f2:	d007      	beq.n	8005904 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	4a1e      	ldr	r2, [pc, #120]	; (8005974 <HAL_TIM_IRQHandler+0x208>)
 80058fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	0018      	movs	r0, r3
 8005900:	f000 f8f2 	bl	8005ae8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	2380      	movs	r3, #128	; 0x80
 8005908:	005b      	lsls	r3, r3, #1
 800590a:	4013      	ands	r3, r2
 800590c:	d00b      	beq.n	8005926 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2280      	movs	r2, #128	; 0x80
 8005912:	4013      	ands	r3, r2
 8005914:	d007      	beq.n	8005926 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	4a17      	ldr	r2, [pc, #92]	; (8005978 <HAL_TIM_IRQHandler+0x20c>)
 800591c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	0018      	movs	r0, r3
 8005922:	f000 f8e9 	bl	8005af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2240      	movs	r2, #64	; 0x40
 800592a:	4013      	ands	r3, r2
 800592c:	d00c      	beq.n	8005948 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	2240      	movs	r2, #64	; 0x40
 8005932:	4013      	ands	r3, r2
 8005934:	d008      	beq.n	8005948 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	2241      	movs	r2, #65	; 0x41
 800593c:	4252      	negs	r2, r2
 800593e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	0018      	movs	r0, r3
 8005944:	f000 f832 	bl	80059ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	2220      	movs	r2, #32
 800594c:	4013      	ands	r3, r2
 800594e:	d00c      	beq.n	800596a <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	2220      	movs	r2, #32
 8005954:	4013      	ands	r3, r2
 8005956:	d008      	beq.n	800596a <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	2221      	movs	r2, #33	; 0x21
 800595e:	4252      	negs	r2, r2
 8005960:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	0018      	movs	r0, r3
 8005966:	f000 f8b7 	bl	8005ad8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800596a:	46c0      	nop			; (mov r8, r8)
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bd80      	pop	{r7, pc}
 8005972:	46c0      	nop			; (mov r8, r8)
 8005974:	ffffdf7f 	.word	0xffffdf7f
 8005978:	fffffeff 	.word	0xfffffeff

0800597c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b082      	sub	sp, #8
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005984:	46c0      	nop			; (mov r8, r8)
 8005986:	46bd      	mov	sp, r7
 8005988:	b002      	add	sp, #8
 800598a:	bd80      	pop	{r7, pc}

0800598c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b082      	sub	sp, #8
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005994:	46c0      	nop			; (mov r8, r8)
 8005996:	46bd      	mov	sp, r7
 8005998:	b002      	add	sp, #8
 800599a:	bd80      	pop	{r7, pc}

0800599c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800599c:	b580      	push	{r7, lr}
 800599e:	b082      	sub	sp, #8
 80059a0:	af00      	add	r7, sp, #0
 80059a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80059a4:	46c0      	nop			; (mov r8, r8)
 80059a6:	46bd      	mov	sp, r7
 80059a8:	b002      	add	sp, #8
 80059aa:	bd80      	pop	{r7, pc}

080059ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80059ac:	b580      	push	{r7, lr}
 80059ae:	b082      	sub	sp, #8
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80059b4:	46c0      	nop			; (mov r8, r8)
 80059b6:	46bd      	mov	sp, r7
 80059b8:	b002      	add	sp, #8
 80059ba:	bd80      	pop	{r7, pc}

080059bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b084      	sub	sp, #16
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
 80059c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	4a3b      	ldr	r2, [pc, #236]	; (8005abc <TIM_Base_SetConfig+0x100>)
 80059d0:	4293      	cmp	r3, r2
 80059d2:	d008      	beq.n	80059e6 <TIM_Base_SetConfig+0x2a>
 80059d4:	687a      	ldr	r2, [r7, #4]
 80059d6:	2380      	movs	r3, #128	; 0x80
 80059d8:	05db      	lsls	r3, r3, #23
 80059da:	429a      	cmp	r2, r3
 80059dc:	d003      	beq.n	80059e6 <TIM_Base_SetConfig+0x2a>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	4a37      	ldr	r2, [pc, #220]	; (8005ac0 <TIM_Base_SetConfig+0x104>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d108      	bne.n	80059f8 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2270      	movs	r2, #112	; 0x70
 80059ea:	4393      	bics	r3, r2
 80059ec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80059ee:	683b      	ldr	r3, [r7, #0]
 80059f0:	685b      	ldr	r3, [r3, #4]
 80059f2:	68fa      	ldr	r2, [r7, #12]
 80059f4:	4313      	orrs	r3, r2
 80059f6:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a30      	ldr	r2, [pc, #192]	; (8005abc <TIM_Base_SetConfig+0x100>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d018      	beq.n	8005a32 <TIM_Base_SetConfig+0x76>
 8005a00:	687a      	ldr	r2, [r7, #4]
 8005a02:	2380      	movs	r3, #128	; 0x80
 8005a04:	05db      	lsls	r3, r3, #23
 8005a06:	429a      	cmp	r2, r3
 8005a08:	d013      	beq.n	8005a32 <TIM_Base_SetConfig+0x76>
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	4a2c      	ldr	r2, [pc, #176]	; (8005ac0 <TIM_Base_SetConfig+0x104>)
 8005a0e:	4293      	cmp	r3, r2
 8005a10:	d00f      	beq.n	8005a32 <TIM_Base_SetConfig+0x76>
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	4a2b      	ldr	r2, [pc, #172]	; (8005ac4 <TIM_Base_SetConfig+0x108>)
 8005a16:	4293      	cmp	r3, r2
 8005a18:	d00b      	beq.n	8005a32 <TIM_Base_SetConfig+0x76>
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	4a2a      	ldr	r2, [pc, #168]	; (8005ac8 <TIM_Base_SetConfig+0x10c>)
 8005a1e:	4293      	cmp	r3, r2
 8005a20:	d007      	beq.n	8005a32 <TIM_Base_SetConfig+0x76>
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	4a29      	ldr	r2, [pc, #164]	; (8005acc <TIM_Base_SetConfig+0x110>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d003      	beq.n	8005a32 <TIM_Base_SetConfig+0x76>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	4a28      	ldr	r2, [pc, #160]	; (8005ad0 <TIM_Base_SetConfig+0x114>)
 8005a2e:	4293      	cmp	r3, r2
 8005a30:	d108      	bne.n	8005a44 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	4a27      	ldr	r2, [pc, #156]	; (8005ad4 <TIM_Base_SetConfig+0x118>)
 8005a36:	4013      	ands	r3, r2
 8005a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	68db      	ldr	r3, [r3, #12]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	2280      	movs	r2, #128	; 0x80
 8005a48:	4393      	bics	r3, r2
 8005a4a:	001a      	movs	r2, r3
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	695b      	ldr	r3, [r3, #20]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	68fa      	ldr	r2, [r7, #12]
 8005a58:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	689a      	ldr	r2, [r3, #8]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	681a      	ldr	r2, [r3, #0]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	4a13      	ldr	r2, [pc, #76]	; (8005abc <TIM_Base_SetConfig+0x100>)
 8005a6e:	4293      	cmp	r3, r2
 8005a70:	d00b      	beq.n	8005a8a <TIM_Base_SetConfig+0xce>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	4a14      	ldr	r2, [pc, #80]	; (8005ac8 <TIM_Base_SetConfig+0x10c>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d007      	beq.n	8005a8a <TIM_Base_SetConfig+0xce>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	; (8005acc <TIM_Base_SetConfig+0x110>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d003      	beq.n	8005a8a <TIM_Base_SetConfig+0xce>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	4a12      	ldr	r2, [pc, #72]	; (8005ad0 <TIM_Base_SetConfig+0x114>)
 8005a86:	4293      	cmp	r3, r2
 8005a88:	d103      	bne.n	8005a92 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	691a      	ldr	r2, [r3, #16]
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2201      	movs	r2, #1
 8005a96:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	691b      	ldr	r3, [r3, #16]
 8005a9c:	2201      	movs	r2, #1
 8005a9e:	4013      	ands	r3, r2
 8005aa0:	2b01      	cmp	r3, #1
 8005aa2:	d106      	bne.n	8005ab2 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	691b      	ldr	r3, [r3, #16]
 8005aa8:	2201      	movs	r2, #1
 8005aaa:	4393      	bics	r3, r2
 8005aac:	001a      	movs	r2, r3
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	611a      	str	r2, [r3, #16]
  }
}
 8005ab2:	46c0      	nop			; (mov r8, r8)
 8005ab4:	46bd      	mov	sp, r7
 8005ab6:	b004      	add	sp, #16
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	46c0      	nop			; (mov r8, r8)
 8005abc:	40012c00 	.word	0x40012c00
 8005ac0:	40000400 	.word	0x40000400
 8005ac4:	40002000 	.word	0x40002000
 8005ac8:	40014000 	.word	0x40014000
 8005acc:	40014400 	.word	0x40014400
 8005ad0:	40014800 	.word	0x40014800
 8005ad4:	fffffcff 	.word	0xfffffcff

08005ad8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005ad8:	b580      	push	{r7, lr}
 8005ada:	b082      	sub	sp, #8
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005ae0:	46c0      	nop			; (mov r8, r8)
 8005ae2:	46bd      	mov	sp, r7
 8005ae4:	b002      	add	sp, #8
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005ae8:	b580      	push	{r7, lr}
 8005aea:	b082      	sub	sp, #8
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005af0:	46c0      	nop			; (mov r8, r8)
 8005af2:	46bd      	mov	sp, r7
 8005af4:	b002      	add	sp, #8
 8005af6:	bd80      	pop	{r7, pc}

08005af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005af8:	b580      	push	{r7, lr}
 8005afa:	b082      	sub	sp, #8
 8005afc:	af00      	add	r7, sp, #0
 8005afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b00:	46c0      	nop			; (mov r8, r8)
 8005b02:	46bd      	mov	sp, r7
 8005b04:	b002      	add	sp, #8
 8005b06:	bd80      	pop	{r7, pc}

08005b08 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b08:	b580      	push	{r7, lr}
 8005b0a:	b082      	sub	sp, #8
 8005b0c:	af00      	add	r7, sp, #0
 8005b0e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d101      	bne.n	8005b1a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005b16:	2301      	movs	r3, #1
 8005b18:	e046      	b.n	8005ba8 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2288      	movs	r2, #136	; 0x88
 8005b1e:	589b      	ldr	r3, [r3, r2]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d107      	bne.n	8005b34 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2284      	movs	r2, #132	; 0x84
 8005b28:	2100      	movs	r1, #0
 8005b2a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	0018      	movs	r0, r3
 8005b30:	f7fe f908 	bl	8003d44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2288      	movs	r2, #136	; 0x88
 8005b38:	2124      	movs	r1, #36	; 0x24
 8005b3a:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	681a      	ldr	r2, [r3, #0]
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	2101      	movs	r1, #1
 8005b48:	438a      	bics	r2, r1
 8005b4a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d003      	beq.n	8005b5c <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	0018      	movs	r0, r3
 8005b58:	f000 fed8 	bl	800690c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	0018      	movs	r0, r3
 8005b60:	f000 fc16 	bl	8006390 <UART_SetConfig>
 8005b64:	0003      	movs	r3, r0
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	e01c      	b.n	8005ba8 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	685a      	ldr	r2, [r3, #4]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	490d      	ldr	r1, [pc, #52]	; (8005bb0 <HAL_UART_Init+0xa8>)
 8005b7a:	400a      	ands	r2, r1
 8005b7c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	212a      	movs	r1, #42	; 0x2a
 8005b8a:	438a      	bics	r2, r1
 8005b8c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	2101      	movs	r1, #1
 8005b9a:	430a      	orrs	r2, r1
 8005b9c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	0018      	movs	r0, r3
 8005ba2:	f000 ff67 	bl	8006a74 <UART_CheckIdleState>
 8005ba6:	0003      	movs	r3, r0
}
 8005ba8:	0018      	movs	r0, r3
 8005baa:	46bd      	mov	sp, r7
 8005bac:	b002      	add	sp, #8
 8005bae:	bd80      	pop	{r7, pc}
 8005bb0:	ffffb7ff 	.word	0xffffb7ff

08005bb4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005bb4:	b580      	push	{r7, lr}
 8005bb6:	b08a      	sub	sp, #40	; 0x28
 8005bb8:	af02      	add	r7, sp, #8
 8005bba:	60f8      	str	r0, [r7, #12]
 8005bbc:	60b9      	str	r1, [r7, #8]
 8005bbe:	603b      	str	r3, [r7, #0]
 8005bc0:	1dbb      	adds	r3, r7, #6
 8005bc2:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	2288      	movs	r2, #136	; 0x88
 8005bc8:	589b      	ldr	r3, [r3, r2]
 8005bca:	2b20      	cmp	r3, #32
 8005bcc:	d000      	beq.n	8005bd0 <HAL_UART_Transmit+0x1c>
 8005bce:	e090      	b.n	8005cf2 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005bd0:	68bb      	ldr	r3, [r7, #8]
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d003      	beq.n	8005bde <HAL_UART_Transmit+0x2a>
 8005bd6:	1dbb      	adds	r3, r7, #6
 8005bd8:	881b      	ldrh	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d101      	bne.n	8005be2 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e088      	b.n	8005cf4 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	2380      	movs	r3, #128	; 0x80
 8005be8:	015b      	lsls	r3, r3, #5
 8005bea:	429a      	cmp	r2, r3
 8005bec:	d109      	bne.n	8005c02 <HAL_UART_Transmit+0x4e>
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	691b      	ldr	r3, [r3, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d105      	bne.n	8005c02 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2201      	movs	r2, #1
 8005bfa:	4013      	ands	r3, r2
 8005bfc:	d001      	beq.n	8005c02 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e078      	b.n	8005cf4 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	2290      	movs	r2, #144	; 0x90
 8005c06:	2100      	movs	r1, #0
 8005c08:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	2288      	movs	r2, #136	; 0x88
 8005c0e:	2121      	movs	r1, #33	; 0x21
 8005c10:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c12:	f7fe fac1 	bl	8004198 <HAL_GetTick>
 8005c16:	0003      	movs	r3, r0
 8005c18:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	1dba      	adds	r2, r7, #6
 8005c1e:	2154      	movs	r1, #84	; 0x54
 8005c20:	8812      	ldrh	r2, [r2, #0]
 8005c22:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	1dba      	adds	r2, r7, #6
 8005c28:	2156      	movs	r1, #86	; 0x56
 8005c2a:	8812      	ldrh	r2, [r2, #0]
 8005c2c:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	689a      	ldr	r2, [r3, #8]
 8005c32:	2380      	movs	r3, #128	; 0x80
 8005c34:	015b      	lsls	r3, r3, #5
 8005c36:	429a      	cmp	r2, r3
 8005c38:	d108      	bne.n	8005c4c <HAL_UART_Transmit+0x98>
 8005c3a:	68fb      	ldr	r3, [r7, #12]
 8005c3c:	691b      	ldr	r3, [r3, #16]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d104      	bne.n	8005c4c <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8005c42:	2300      	movs	r3, #0
 8005c44:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	61bb      	str	r3, [r7, #24]
 8005c4a:	e003      	b.n	8005c54 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8005c4c:	68bb      	ldr	r3, [r7, #8]
 8005c4e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005c50:	2300      	movs	r3, #0
 8005c52:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005c54:	e030      	b.n	8005cb8 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	68f8      	ldr	r0, [r7, #12]
 8005c5a:	683b      	ldr	r3, [r7, #0]
 8005c5c:	9300      	str	r3, [sp, #0]
 8005c5e:	0013      	movs	r3, r2
 8005c60:	2200      	movs	r2, #0
 8005c62:	2180      	movs	r1, #128	; 0x80
 8005c64:	f000 ffb0 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8005c68:	1e03      	subs	r3, r0, #0
 8005c6a:	d005      	beq.n	8005c78 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2288      	movs	r2, #136	; 0x88
 8005c70:	2120      	movs	r1, #32
 8005c72:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e03d      	b.n	8005cf4 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8005c78:	69fb      	ldr	r3, [r7, #28]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d10b      	bne.n	8005c96 <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c7e:	69bb      	ldr	r3, [r7, #24]
 8005c80:	881b      	ldrh	r3, [r3, #0]
 8005c82:	001a      	movs	r2, r3
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	05d2      	lsls	r2, r2, #23
 8005c8a:	0dd2      	lsrs	r2, r2, #23
 8005c8c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	3302      	adds	r3, #2
 8005c92:	61bb      	str	r3, [r7, #24]
 8005c94:	e007      	b.n	8005ca6 <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c96:	69fb      	ldr	r3, [r7, #28]
 8005c98:	781a      	ldrb	r2, [r3, #0]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005ca0:	69fb      	ldr	r3, [r7, #28]
 8005ca2:	3301      	adds	r3, #1
 8005ca4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	2256      	movs	r2, #86	; 0x56
 8005caa:	5a9b      	ldrh	r3, [r3, r2]
 8005cac:	b29b      	uxth	r3, r3
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	b299      	uxth	r1, r3
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2256      	movs	r2, #86	; 0x56
 8005cb6:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	2256      	movs	r2, #86	; 0x56
 8005cbc:	5a9b      	ldrh	r3, [r3, r2]
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	2b00      	cmp	r3, #0
 8005cc2:	d1c8      	bne.n	8005c56 <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005cc4:	697a      	ldr	r2, [r7, #20]
 8005cc6:	68f8      	ldr	r0, [r7, #12]
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	9300      	str	r3, [sp, #0]
 8005ccc:	0013      	movs	r3, r2
 8005cce:	2200      	movs	r2, #0
 8005cd0:	2140      	movs	r1, #64	; 0x40
 8005cd2:	f000 ff79 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8005cd6:	1e03      	subs	r3, r0, #0
 8005cd8:	d005      	beq.n	8005ce6 <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	2288      	movs	r2, #136	; 0x88
 8005cde:	2120      	movs	r1, #32
 8005ce0:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8005ce2:	2303      	movs	r3, #3
 8005ce4:	e006      	b.n	8005cf4 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2288      	movs	r2, #136	; 0x88
 8005cea:	2120      	movs	r1, #32
 8005cec:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8005cee:	2300      	movs	r3, #0
 8005cf0:	e000      	b.n	8005cf4 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8005cf2:	2302      	movs	r3, #2
  }
}
 8005cf4:	0018      	movs	r0, r3
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b008      	add	sp, #32
 8005cfa:	bd80      	pop	{r7, pc}

08005cfc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005cfc:	b5b0      	push	{r4, r5, r7, lr}
 8005cfe:	b0aa      	sub	sp, #168	; 0xa8
 8005d00:	af00      	add	r7, sp, #0
 8005d02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69db      	ldr	r3, [r3, #28]
 8005d0a:	22a4      	movs	r2, #164	; 0xa4
 8005d0c:	18b9      	adds	r1, r7, r2
 8005d0e:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	20a0      	movs	r0, #160	; 0xa0
 8005d18:	1839      	adds	r1, r7, r0
 8005d1a:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	689b      	ldr	r3, [r3, #8]
 8005d22:	249c      	movs	r4, #156	; 0x9c
 8005d24:	1939      	adds	r1, r7, r4
 8005d26:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d28:	0011      	movs	r1, r2
 8005d2a:	18bb      	adds	r3, r7, r2
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	4aa2      	ldr	r2, [pc, #648]	; (8005fb8 <HAL_UART_IRQHandler+0x2bc>)
 8005d30:	4013      	ands	r3, r2
 8005d32:	2298      	movs	r2, #152	; 0x98
 8005d34:	18bd      	adds	r5, r7, r2
 8005d36:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8005d38:	18bb      	adds	r3, r7, r2
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d11a      	bne.n	8005d76 <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d40:	187b      	adds	r3, r7, r1
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	2220      	movs	r2, #32
 8005d46:	4013      	ands	r3, r2
 8005d48:	d015      	beq.n	8005d76 <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d4a:	183b      	adds	r3, r7, r0
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	2220      	movs	r2, #32
 8005d50:	4013      	ands	r3, r2
 8005d52:	d105      	bne.n	8005d60 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d54:	193b      	adds	r3, r7, r4
 8005d56:	681a      	ldr	r2, [r3, #0]
 8005d58:	2380      	movs	r3, #128	; 0x80
 8005d5a:	055b      	lsls	r3, r3, #21
 8005d5c:	4013      	ands	r3, r2
 8005d5e:	d00a      	beq.n	8005d76 <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d100      	bne.n	8005d6a <HAL_UART_IRQHandler+0x6e>
 8005d68:	e2dc      	b.n	8006324 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d6e:	687a      	ldr	r2, [r7, #4]
 8005d70:	0010      	movs	r0, r2
 8005d72:	4798      	blx	r3
      }
      return;
 8005d74:	e2d6      	b.n	8006324 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005d76:	2398      	movs	r3, #152	; 0x98
 8005d78:	18fb      	adds	r3, r7, r3
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d100      	bne.n	8005d82 <HAL_UART_IRQHandler+0x86>
 8005d80:	e122      	b.n	8005fc8 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005d82:	239c      	movs	r3, #156	; 0x9c
 8005d84:	18fb      	adds	r3, r7, r3
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	4a8c      	ldr	r2, [pc, #560]	; (8005fbc <HAL_UART_IRQHandler+0x2c0>)
 8005d8a:	4013      	ands	r3, r2
 8005d8c:	d106      	bne.n	8005d9c <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005d8e:	23a0      	movs	r3, #160	; 0xa0
 8005d90:	18fb      	adds	r3, r7, r3
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a8a      	ldr	r2, [pc, #552]	; (8005fc0 <HAL_UART_IRQHandler+0x2c4>)
 8005d96:	4013      	ands	r3, r2
 8005d98:	d100      	bne.n	8005d9c <HAL_UART_IRQHandler+0xa0>
 8005d9a:	e115      	b.n	8005fc8 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005d9c:	23a4      	movs	r3, #164	; 0xa4
 8005d9e:	18fb      	adds	r3, r7, r3
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2201      	movs	r2, #1
 8005da4:	4013      	ands	r3, r2
 8005da6:	d012      	beq.n	8005dce <HAL_UART_IRQHandler+0xd2>
 8005da8:	23a0      	movs	r3, #160	; 0xa0
 8005daa:	18fb      	adds	r3, r7, r3
 8005dac:	681a      	ldr	r2, [r3, #0]
 8005dae:	2380      	movs	r3, #128	; 0x80
 8005db0:	005b      	lsls	r3, r3, #1
 8005db2:	4013      	ands	r3, r2
 8005db4:	d00b      	beq.n	8005dce <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	2201      	movs	r2, #1
 8005dbc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2290      	movs	r2, #144	; 0x90
 8005dc2:	589b      	ldr	r3, [r3, r2]
 8005dc4:	2201      	movs	r2, #1
 8005dc6:	431a      	orrs	r2, r3
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2190      	movs	r1, #144	; 0x90
 8005dcc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dce:	23a4      	movs	r3, #164	; 0xa4
 8005dd0:	18fb      	adds	r3, r7, r3
 8005dd2:	681b      	ldr	r3, [r3, #0]
 8005dd4:	2202      	movs	r2, #2
 8005dd6:	4013      	ands	r3, r2
 8005dd8:	d011      	beq.n	8005dfe <HAL_UART_IRQHandler+0x102>
 8005dda:	239c      	movs	r3, #156	; 0x9c
 8005ddc:	18fb      	adds	r3, r7, r3
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	2201      	movs	r2, #1
 8005de2:	4013      	ands	r3, r2
 8005de4:	d00b      	beq.n	8005dfe <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	2202      	movs	r2, #2
 8005dec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2290      	movs	r2, #144	; 0x90
 8005df2:	589b      	ldr	r3, [r3, r2]
 8005df4:	2204      	movs	r2, #4
 8005df6:	431a      	orrs	r2, r3
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2190      	movs	r1, #144	; 0x90
 8005dfc:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005dfe:	23a4      	movs	r3, #164	; 0xa4
 8005e00:	18fb      	adds	r3, r7, r3
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2204      	movs	r2, #4
 8005e06:	4013      	ands	r3, r2
 8005e08:	d011      	beq.n	8005e2e <HAL_UART_IRQHandler+0x132>
 8005e0a:	239c      	movs	r3, #156	; 0x9c
 8005e0c:	18fb      	adds	r3, r7, r3
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	2201      	movs	r2, #1
 8005e12:	4013      	ands	r3, r2
 8005e14:	d00b      	beq.n	8005e2e <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	2204      	movs	r2, #4
 8005e1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2290      	movs	r2, #144	; 0x90
 8005e22:	589b      	ldr	r3, [r3, r2]
 8005e24:	2202      	movs	r2, #2
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2190      	movs	r1, #144	; 0x90
 8005e2c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e2e:	23a4      	movs	r3, #164	; 0xa4
 8005e30:	18fb      	adds	r3, r7, r3
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	2208      	movs	r2, #8
 8005e36:	4013      	ands	r3, r2
 8005e38:	d017      	beq.n	8005e6a <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e3a:	23a0      	movs	r3, #160	; 0xa0
 8005e3c:	18fb      	adds	r3, r7, r3
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2220      	movs	r2, #32
 8005e42:	4013      	ands	r3, r2
 8005e44:	d105      	bne.n	8005e52 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e46:	239c      	movs	r3, #156	; 0x9c
 8005e48:	18fb      	adds	r3, r7, r3
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	4a5b      	ldr	r2, [pc, #364]	; (8005fbc <HAL_UART_IRQHandler+0x2c0>)
 8005e4e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e50:	d00b      	beq.n	8005e6a <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	2208      	movs	r2, #8
 8005e58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2290      	movs	r2, #144	; 0x90
 8005e5e:	589b      	ldr	r3, [r3, r2]
 8005e60:	2208      	movs	r2, #8
 8005e62:	431a      	orrs	r2, r3
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	2190      	movs	r1, #144	; 0x90
 8005e68:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e6a:	23a4      	movs	r3, #164	; 0xa4
 8005e6c:	18fb      	adds	r3, r7, r3
 8005e6e:	681a      	ldr	r2, [r3, #0]
 8005e70:	2380      	movs	r3, #128	; 0x80
 8005e72:	011b      	lsls	r3, r3, #4
 8005e74:	4013      	ands	r3, r2
 8005e76:	d013      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x1a4>
 8005e78:	23a0      	movs	r3, #160	; 0xa0
 8005e7a:	18fb      	adds	r3, r7, r3
 8005e7c:	681a      	ldr	r2, [r3, #0]
 8005e7e:	2380      	movs	r3, #128	; 0x80
 8005e80:	04db      	lsls	r3, r3, #19
 8005e82:	4013      	ands	r3, r2
 8005e84:	d00c      	beq.n	8005ea0 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	2280      	movs	r2, #128	; 0x80
 8005e8c:	0112      	lsls	r2, r2, #4
 8005e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2290      	movs	r2, #144	; 0x90
 8005e94:	589b      	ldr	r3, [r3, r2]
 8005e96:	2220      	movs	r2, #32
 8005e98:	431a      	orrs	r2, r3
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2190      	movs	r1, #144	; 0x90
 8005e9e:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2290      	movs	r2, #144	; 0x90
 8005ea4:	589b      	ldr	r3, [r3, r2]
 8005ea6:	2b00      	cmp	r3, #0
 8005ea8:	d100      	bne.n	8005eac <HAL_UART_IRQHandler+0x1b0>
 8005eaa:	e23d      	b.n	8006328 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005eac:	23a4      	movs	r3, #164	; 0xa4
 8005eae:	18fb      	adds	r3, r7, r3
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2220      	movs	r2, #32
 8005eb4:	4013      	ands	r3, r2
 8005eb6:	d015      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005eb8:	23a0      	movs	r3, #160	; 0xa0
 8005eba:	18fb      	adds	r3, r7, r3
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	2220      	movs	r2, #32
 8005ec0:	4013      	ands	r3, r2
 8005ec2:	d106      	bne.n	8005ed2 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ec4:	239c      	movs	r3, #156	; 0x9c
 8005ec6:	18fb      	adds	r3, r7, r3
 8005ec8:	681a      	ldr	r2, [r3, #0]
 8005eca:	2380      	movs	r3, #128	; 0x80
 8005ecc:	055b      	lsls	r3, r3, #21
 8005ece:	4013      	ands	r3, r2
 8005ed0:	d008      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d004      	beq.n	8005ee4 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ede:	687a      	ldr	r2, [r7, #4]
 8005ee0:	0010      	movs	r0, r2
 8005ee2:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2290      	movs	r2, #144	; 0x90
 8005ee8:	589b      	ldr	r3, [r3, r2]
 8005eea:	2194      	movs	r1, #148	; 0x94
 8005eec:	187a      	adds	r2, r7, r1
 8005eee:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	689b      	ldr	r3, [r3, #8]
 8005ef6:	2240      	movs	r2, #64	; 0x40
 8005ef8:	4013      	ands	r3, r2
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d004      	beq.n	8005f08 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005efe:	187b      	adds	r3, r7, r1
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	2228      	movs	r2, #40	; 0x28
 8005f04:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f06:	d04c      	beq.n	8005fa2 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	0018      	movs	r0, r3
 8005f0c:	f000 fff0 	bl	8006ef0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	2240      	movs	r2, #64	; 0x40
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2b40      	cmp	r3, #64	; 0x40
 8005f1c:	d13c      	bne.n	8005f98 <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8005f22:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8005f24:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f26:	2090      	movs	r0, #144	; 0x90
 8005f28:	183a      	adds	r2, r7, r0
 8005f2a:	6013      	str	r3, [r2, #0]
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f30:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005f32:	f383 8810 	msr	PRIMASK, r3
}
 8005f36:	46c0      	nop			; (mov r8, r8)
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	2140      	movs	r1, #64	; 0x40
 8005f44:	438a      	bics	r2, r1
 8005f46:	609a      	str	r2, [r3, #8]
 8005f48:	183b      	adds	r3, r7, r0
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005f4e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f50:	f383 8810 	msr	PRIMASK, r3
}
 8005f54:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2280      	movs	r2, #128	; 0x80
 8005f5a:	589b      	ldr	r3, [r3, r2]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d016      	beq.n	8005f8e <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2280      	movs	r2, #128	; 0x80
 8005f64:	589b      	ldr	r3, [r3, r2]
 8005f66:	4a17      	ldr	r2, [pc, #92]	; (8005fc4 <HAL_UART_IRQHandler+0x2c8>)
 8005f68:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	2280      	movs	r2, #128	; 0x80
 8005f6e:	589b      	ldr	r3, [r3, r2]
 8005f70:	0018      	movs	r0, r3
 8005f72:	f7fe fa41 	bl	80043f8 <HAL_DMA_Abort_IT>
 8005f76:	1e03      	subs	r3, r0, #0
 8005f78:	d01c      	beq.n	8005fb4 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2280      	movs	r2, #128	; 0x80
 8005f7e:	589b      	ldr	r3, [r3, r2]
 8005f80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f82:	687a      	ldr	r2, [r7, #4]
 8005f84:	2180      	movs	r1, #128	; 0x80
 8005f86:	5852      	ldr	r2, [r2, r1]
 8005f88:	0010      	movs	r0, r2
 8005f8a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f8c:	e012      	b.n	8005fb4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	0018      	movs	r0, r3
 8005f92:	f000 f9e9 	bl	8006368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f96:	e00d      	b.n	8005fb4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f000 f9e4 	bl	8006368 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fa0:	e008      	b.n	8005fb4 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	0018      	movs	r0, r3
 8005fa6:	f000 f9df 	bl	8006368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	2290      	movs	r2, #144	; 0x90
 8005fae:	2100      	movs	r1, #0
 8005fb0:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8005fb2:	e1b9      	b.n	8006328 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fb4:	46c0      	nop			; (mov r8, r8)
    return;
 8005fb6:	e1b7      	b.n	8006328 <HAL_UART_IRQHandler+0x62c>
 8005fb8:	0000080f 	.word	0x0000080f
 8005fbc:	10000001 	.word	0x10000001
 8005fc0:	04000120 	.word	0x04000120
 8005fc4:	08006fbd 	.word	0x08006fbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005fcc:	2b01      	cmp	r3, #1
 8005fce:	d000      	beq.n	8005fd2 <HAL_UART_IRQHandler+0x2d6>
 8005fd0:	e13e      	b.n	8006250 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005fd2:	23a4      	movs	r3, #164	; 0xa4
 8005fd4:	18fb      	adds	r3, r7, r3
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	2210      	movs	r2, #16
 8005fda:	4013      	ands	r3, r2
 8005fdc:	d100      	bne.n	8005fe0 <HAL_UART_IRQHandler+0x2e4>
 8005fde:	e137      	b.n	8006250 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005fe0:	23a0      	movs	r3, #160	; 0xa0
 8005fe2:	18fb      	adds	r3, r7, r3
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	2210      	movs	r2, #16
 8005fe8:	4013      	ands	r3, r2
 8005fea:	d100      	bne.n	8005fee <HAL_UART_IRQHandler+0x2f2>
 8005fec:	e130      	b.n	8006250 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	2210      	movs	r2, #16
 8005ff4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	2240      	movs	r2, #64	; 0x40
 8005ffe:	4013      	ands	r3, r2
 8006000:	2b40      	cmp	r3, #64	; 0x40
 8006002:	d000      	beq.n	8006006 <HAL_UART_IRQHandler+0x30a>
 8006004:	e0a4      	b.n	8006150 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	2280      	movs	r2, #128	; 0x80
 800600a:	589b      	ldr	r3, [r3, r2]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	685a      	ldr	r2, [r3, #4]
 8006010:	217e      	movs	r1, #126	; 0x7e
 8006012:	187b      	adds	r3, r7, r1
 8006014:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006016:	187b      	adds	r3, r7, r1
 8006018:	881b      	ldrh	r3, [r3, #0]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d100      	bne.n	8006020 <HAL_UART_IRQHandler+0x324>
 800601e:	e185      	b.n	800632c <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	225c      	movs	r2, #92	; 0x5c
 8006024:	5a9b      	ldrh	r3, [r3, r2]
 8006026:	187a      	adds	r2, r7, r1
 8006028:	8812      	ldrh	r2, [r2, #0]
 800602a:	429a      	cmp	r2, r3
 800602c:	d300      	bcc.n	8006030 <HAL_UART_IRQHandler+0x334>
 800602e:	e17d      	b.n	800632c <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	187a      	adds	r2, r7, r1
 8006034:	215e      	movs	r1, #94	; 0x5e
 8006036:	8812      	ldrh	r2, [r2, #0]
 8006038:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	2280      	movs	r2, #128	; 0x80
 800603e:	589b      	ldr	r3, [r3, r2]
 8006040:	681b      	ldr	r3, [r3, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	2220      	movs	r2, #32
 8006046:	4013      	ands	r3, r2
 8006048:	d170      	bne.n	800612c <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800604a:	f3ef 8310 	mrs	r3, PRIMASK
 800604e:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006052:	67bb      	str	r3, [r7, #120]	; 0x78
 8006054:	2301      	movs	r3, #1
 8006056:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006058:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800605a:	f383 8810 	msr	PRIMASK, r3
}
 800605e:	46c0      	nop			; (mov r8, r8)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	49b4      	ldr	r1, [pc, #720]	; (800633c <HAL_UART_IRQHandler+0x640>)
 800606c:	400a      	ands	r2, r1
 800606e:	601a      	str	r2, [r3, #0]
 8006070:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006072:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006076:	f383 8810 	msr	PRIMASK, r3
}
 800607a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800607c:	f3ef 8310 	mrs	r3, PRIMASK
 8006080:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006082:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006084:	677b      	str	r3, [r7, #116]	; 0x74
 8006086:	2301      	movs	r3, #1
 8006088:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800608a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800608c:	f383 8810 	msr	PRIMASK, r3
}
 8006090:	46c0      	nop			; (mov r8, r8)
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	689a      	ldr	r2, [r3, #8]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	2101      	movs	r1, #1
 800609e:	438a      	bics	r2, r1
 80060a0:	609a      	str	r2, [r3, #8]
 80060a2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80060a4:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80060a8:	f383 8810 	msr	PRIMASK, r3
}
 80060ac:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ae:	f3ef 8310 	mrs	r3, PRIMASK
 80060b2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80060b4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060b6:	673b      	str	r3, [r7, #112]	; 0x70
 80060b8:	2301      	movs	r3, #1
 80060ba:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060be:	f383 8810 	msr	PRIMASK, r3
}
 80060c2:	46c0      	nop			; (mov r8, r8)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	689a      	ldr	r2, [r3, #8]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2140      	movs	r1, #64	; 0x40
 80060d0:	438a      	bics	r2, r1
 80060d2:	609a      	str	r2, [r3, #8]
 80060d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80060d6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060da:	f383 8810 	msr	PRIMASK, r3
}
 80060de:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	228c      	movs	r2, #140	; 0x8c
 80060e4:	2120      	movs	r1, #32
 80060e6:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	2200      	movs	r2, #0
 80060ec:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80060ee:	f3ef 8310 	mrs	r3, PRIMASK
 80060f2:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 80060f4:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80060f6:	66fb      	str	r3, [r7, #108]	; 0x6c
 80060f8:	2301      	movs	r3, #1
 80060fa:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80060fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80060fe:	f383 8810 	msr	PRIMASK, r3
}
 8006102:	46c0      	nop			; (mov r8, r8)
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	681a      	ldr	r2, [r3, #0]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2110      	movs	r1, #16
 8006110:	438a      	bics	r2, r1
 8006112:	601a      	str	r2, [r3, #0]
 8006114:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006116:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006118:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800611a:	f383 8810 	msr	PRIMASK, r3
}
 800611e:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2280      	movs	r2, #128	; 0x80
 8006124:	589b      	ldr	r3, [r3, r2]
 8006126:	0018      	movs	r0, r3
 8006128:	f7fe f904 	bl	8004334 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	2202      	movs	r2, #2
 8006130:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	225c      	movs	r2, #92	; 0x5c
 8006136:	5a9a      	ldrh	r2, [r3, r2]
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	215e      	movs	r1, #94	; 0x5e
 800613c:	5a5b      	ldrh	r3, [r3, r1]
 800613e:	b29b      	uxth	r3, r3
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	b29a      	uxth	r2, r3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	0011      	movs	r1, r2
 8006148:	0018      	movs	r0, r3
 800614a:	f000 f915 	bl	8006378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800614e:	e0ed      	b.n	800632c <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	225c      	movs	r2, #92	; 0x5c
 8006154:	5a99      	ldrh	r1, [r3, r2]
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	225e      	movs	r2, #94	; 0x5e
 800615a:	5a9b      	ldrh	r3, [r3, r2]
 800615c:	b29a      	uxth	r2, r3
 800615e:	208e      	movs	r0, #142	; 0x8e
 8006160:	183b      	adds	r3, r7, r0
 8006162:	1a8a      	subs	r2, r1, r2
 8006164:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	225e      	movs	r2, #94	; 0x5e
 800616a:	5a9b      	ldrh	r3, [r3, r2]
 800616c:	b29b      	uxth	r3, r3
 800616e:	2b00      	cmp	r3, #0
 8006170:	d100      	bne.n	8006174 <HAL_UART_IRQHandler+0x478>
 8006172:	e0dd      	b.n	8006330 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006174:	183b      	adds	r3, r7, r0
 8006176:	881b      	ldrh	r3, [r3, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d100      	bne.n	800617e <HAL_UART_IRQHandler+0x482>
 800617c:	e0d8      	b.n	8006330 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800617e:	f3ef 8310 	mrs	r3, PRIMASK
 8006182:	60fb      	str	r3, [r7, #12]
  return(result);
 8006184:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006186:	2488      	movs	r4, #136	; 0x88
 8006188:	193a      	adds	r2, r7, r4
 800618a:	6013      	str	r3, [r2, #0]
 800618c:	2301      	movs	r3, #1
 800618e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006190:	693b      	ldr	r3, [r7, #16]
 8006192:	f383 8810 	msr	PRIMASK, r3
}
 8006196:	46c0      	nop			; (mov r8, r8)
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	681a      	ldr	r2, [r3, #0]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	4967      	ldr	r1, [pc, #412]	; (8006340 <HAL_UART_IRQHandler+0x644>)
 80061a4:	400a      	ands	r2, r1
 80061a6:	601a      	str	r2, [r3, #0]
 80061a8:	193b      	adds	r3, r7, r4
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061ae:	697b      	ldr	r3, [r7, #20]
 80061b0:	f383 8810 	msr	PRIMASK, r3
}
 80061b4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80061b6:	f3ef 8310 	mrs	r3, PRIMASK
 80061ba:	61bb      	str	r3, [r7, #24]
  return(result);
 80061bc:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80061be:	2484      	movs	r4, #132	; 0x84
 80061c0:	193a      	adds	r2, r7, r4
 80061c2:	6013      	str	r3, [r2, #0]
 80061c4:	2301      	movs	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061c8:	69fb      	ldr	r3, [r7, #28]
 80061ca:	f383 8810 	msr	PRIMASK, r3
}
 80061ce:	46c0      	nop			; (mov r8, r8)
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	689a      	ldr	r2, [r3, #8]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	495a      	ldr	r1, [pc, #360]	; (8006344 <HAL_UART_IRQHandler+0x648>)
 80061dc:	400a      	ands	r2, r1
 80061de:	609a      	str	r2, [r3, #8]
 80061e0:	193b      	adds	r3, r7, r4
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80061e6:	6a3b      	ldr	r3, [r7, #32]
 80061e8:	f383 8810 	msr	PRIMASK, r3
}
 80061ec:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	228c      	movs	r2, #140	; 0x8c
 80061f2:	2120      	movs	r1, #32
 80061f4:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2200      	movs	r2, #0
 8006200:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006202:	f3ef 8310 	mrs	r3, PRIMASK
 8006206:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006208:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800620a:	2480      	movs	r4, #128	; 0x80
 800620c:	193a      	adds	r2, r7, r4
 800620e:	6013      	str	r3, [r2, #0]
 8006210:	2301      	movs	r3, #1
 8006212:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006214:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006216:	f383 8810 	msr	PRIMASK, r3
}
 800621a:	46c0      	nop			; (mov r8, r8)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	681a      	ldr	r2, [r3, #0]
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2110      	movs	r1, #16
 8006228:	438a      	bics	r2, r1
 800622a:	601a      	str	r2, [r3, #0]
 800622c:	193b      	adds	r3, r7, r4
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006232:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006234:	f383 8810 	msr	PRIMASK, r3
}
 8006238:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2202      	movs	r2, #2
 800623e:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006240:	183b      	adds	r3, r7, r0
 8006242:	881a      	ldrh	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	0011      	movs	r1, r2
 8006248:	0018      	movs	r0, r3
 800624a:	f000 f895 	bl	8006378 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800624e:	e06f      	b.n	8006330 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8006250:	23a4      	movs	r3, #164	; 0xa4
 8006252:	18fb      	adds	r3, r7, r3
 8006254:	681a      	ldr	r2, [r3, #0]
 8006256:	2380      	movs	r3, #128	; 0x80
 8006258:	035b      	lsls	r3, r3, #13
 800625a:	4013      	ands	r3, r2
 800625c:	d010      	beq.n	8006280 <HAL_UART_IRQHandler+0x584>
 800625e:	239c      	movs	r3, #156	; 0x9c
 8006260:	18fb      	adds	r3, r7, r3
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	03db      	lsls	r3, r3, #15
 8006268:	4013      	ands	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	2280      	movs	r2, #128	; 0x80
 8006272:	0352      	lsls	r2, r2, #13
 8006274:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	0018      	movs	r0, r3
 800627a:	f001 fbf3 	bl	8007a64 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800627e:	e05a      	b.n	8006336 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006280:	23a4      	movs	r3, #164	; 0xa4
 8006282:	18fb      	adds	r3, r7, r3
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	2280      	movs	r2, #128	; 0x80
 8006288:	4013      	ands	r3, r2
 800628a:	d016      	beq.n	80062ba <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800628c:	23a0      	movs	r3, #160	; 0xa0
 800628e:	18fb      	adds	r3, r7, r3
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	2280      	movs	r2, #128	; 0x80
 8006294:	4013      	ands	r3, r2
 8006296:	d106      	bne.n	80062a6 <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8006298:	239c      	movs	r3, #156	; 0x9c
 800629a:	18fb      	adds	r3, r7, r3
 800629c:	681a      	ldr	r2, [r3, #0]
 800629e:	2380      	movs	r3, #128	; 0x80
 80062a0:	041b      	lsls	r3, r3, #16
 80062a2:	4013      	ands	r3, r2
 80062a4:	d009      	beq.n	80062ba <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d042      	beq.n	8006334 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	0010      	movs	r0, r2
 80062b6:	4798      	blx	r3
    }
    return;
 80062b8:	e03c      	b.n	8006334 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80062ba:	23a4      	movs	r3, #164	; 0xa4
 80062bc:	18fb      	adds	r3, r7, r3
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	2240      	movs	r2, #64	; 0x40
 80062c2:	4013      	ands	r3, r2
 80062c4:	d00a      	beq.n	80062dc <HAL_UART_IRQHandler+0x5e0>
 80062c6:	23a0      	movs	r3, #160	; 0xa0
 80062c8:	18fb      	adds	r3, r7, r3
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	2240      	movs	r2, #64	; 0x40
 80062ce:	4013      	ands	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	0018      	movs	r0, r3
 80062d6:	f000 fe88 	bl	8006fea <UART_EndTransmit_IT>
    return;
 80062da:	e02c      	b.n	8006336 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80062dc:	23a4      	movs	r3, #164	; 0xa4
 80062de:	18fb      	adds	r3, r7, r3
 80062e0:	681a      	ldr	r2, [r3, #0]
 80062e2:	2380      	movs	r3, #128	; 0x80
 80062e4:	041b      	lsls	r3, r3, #16
 80062e6:	4013      	ands	r3, r2
 80062e8:	d00b      	beq.n	8006302 <HAL_UART_IRQHandler+0x606>
 80062ea:	23a0      	movs	r3, #160	; 0xa0
 80062ec:	18fb      	adds	r3, r7, r3
 80062ee:	681a      	ldr	r2, [r3, #0]
 80062f0:	2380      	movs	r3, #128	; 0x80
 80062f2:	05db      	lsls	r3, r3, #23
 80062f4:	4013      	ands	r3, r2
 80062f6:	d004      	beq.n	8006302 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	0018      	movs	r0, r3
 80062fc:	f001 fbc2 	bl	8007a84 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006300:	e019      	b.n	8006336 <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006302:	23a4      	movs	r3, #164	; 0xa4
 8006304:	18fb      	adds	r3, r7, r3
 8006306:	681a      	ldr	r2, [r3, #0]
 8006308:	2380      	movs	r3, #128	; 0x80
 800630a:	045b      	lsls	r3, r3, #17
 800630c:	4013      	ands	r3, r2
 800630e:	d012      	beq.n	8006336 <HAL_UART_IRQHandler+0x63a>
 8006310:	23a0      	movs	r3, #160	; 0xa0
 8006312:	18fb      	adds	r3, r7, r3
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	da0d      	bge.n	8006336 <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	0018      	movs	r0, r3
 800631e:	f001 fba9 	bl	8007a74 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006322:	e008      	b.n	8006336 <HAL_UART_IRQHandler+0x63a>
      return;
 8006324:	46c0      	nop			; (mov r8, r8)
 8006326:	e006      	b.n	8006336 <HAL_UART_IRQHandler+0x63a>
    return;
 8006328:	46c0      	nop			; (mov r8, r8)
 800632a:	e004      	b.n	8006336 <HAL_UART_IRQHandler+0x63a>
      return;
 800632c:	46c0      	nop			; (mov r8, r8)
 800632e:	e002      	b.n	8006336 <HAL_UART_IRQHandler+0x63a>
      return;
 8006330:	46c0      	nop			; (mov r8, r8)
 8006332:	e000      	b.n	8006336 <HAL_UART_IRQHandler+0x63a>
    return;
 8006334:	46c0      	nop			; (mov r8, r8)
  }
}
 8006336:	46bd      	mov	sp, r7
 8006338:	b02a      	add	sp, #168	; 0xa8
 800633a:	bdb0      	pop	{r4, r5, r7, pc}
 800633c:	fffffeff 	.word	0xfffffeff
 8006340:	fffffedf 	.word	0xfffffedf
 8006344:	effffffe 	.word	0xeffffffe

08006348 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006348:	b580      	push	{r7, lr}
 800634a:	b082      	sub	sp, #8
 800634c:	af00      	add	r7, sp, #0
 800634e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006350:	46c0      	nop			; (mov r8, r8)
 8006352:	46bd      	mov	sp, r7
 8006354:	b002      	add	sp, #8
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b082      	sub	sp, #8
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006360:	46c0      	nop			; (mov r8, r8)
 8006362:	46bd      	mov	sp, r7
 8006364:	b002      	add	sp, #8
 8006366:	bd80      	pop	{r7, pc}

08006368 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006368:	b580      	push	{r7, lr}
 800636a:	b082      	sub	sp, #8
 800636c:	af00      	add	r7, sp, #0
 800636e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006370:	46c0      	nop			; (mov r8, r8)
 8006372:	46bd      	mov	sp, r7
 8006374:	b002      	add	sp, #8
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b082      	sub	sp, #8
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
 8006380:	000a      	movs	r2, r1
 8006382:	1cbb      	adds	r3, r7, #2
 8006384:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006386:	46c0      	nop			; (mov r8, r8)
 8006388:	46bd      	mov	sp, r7
 800638a:	b002      	add	sp, #8
 800638c:	bd80      	pop	{r7, pc}
	...

08006390 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006390:	b5b0      	push	{r4, r5, r7, lr}
 8006392:	b090      	sub	sp, #64	; 0x40
 8006394:	af00      	add	r7, sp, #0
 8006396:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006398:	231a      	movs	r3, #26
 800639a:	2220      	movs	r2, #32
 800639c:	189b      	adds	r3, r3, r2
 800639e:	19db      	adds	r3, r3, r7
 80063a0:	2200      	movs	r2, #0
 80063a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80063a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063aa:	691b      	ldr	r3, [r3, #16]
 80063ac:	431a      	orrs	r2, r3
 80063ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b0:	695b      	ldr	r3, [r3, #20]
 80063b2:	431a      	orrs	r2, r3
 80063b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063b6:	69db      	ldr	r3, [r3, #28]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80063bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4aaf      	ldr	r2, [pc, #700]	; (8006680 <UART_SetConfig+0x2f0>)
 80063c4:	4013      	ands	r3, r2
 80063c6:	0019      	movs	r1, r3
 80063c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ca:	681a      	ldr	r2, [r3, #0]
 80063cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80063ce:	430b      	orrs	r3, r1
 80063d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4aaa      	ldr	r2, [pc, #680]	; (8006684 <UART_SetConfig+0x2f4>)
 80063da:	4013      	ands	r3, r2
 80063dc:	0018      	movs	r0, r3
 80063de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e0:	68d9      	ldr	r1, [r3, #12]
 80063e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	0003      	movs	r3, r0
 80063e8:	430b      	orrs	r3, r1
 80063ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ee:	699b      	ldr	r3, [r3, #24]
 80063f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	4aa4      	ldr	r2, [pc, #656]	; (8006688 <UART_SetConfig+0x2f8>)
 80063f8:	4293      	cmp	r3, r2
 80063fa:	d004      	beq.n	8006406 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063fe:	6a1b      	ldr	r3, [r3, #32]
 8006400:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006402:	4313      	orrs	r3, r2
 8006404:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006406:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	4a9f      	ldr	r2, [pc, #636]	; (800668c <UART_SetConfig+0x2fc>)
 800640e:	4013      	ands	r3, r2
 8006410:	0019      	movs	r1, r3
 8006412:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006414:	681a      	ldr	r2, [r3, #0]
 8006416:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006418:	430b      	orrs	r3, r1
 800641a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800641c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006422:	220f      	movs	r2, #15
 8006424:	4393      	bics	r3, r2
 8006426:	0018      	movs	r0, r3
 8006428:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800642c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800642e:	681a      	ldr	r2, [r3, #0]
 8006430:	0003      	movs	r3, r0
 8006432:	430b      	orrs	r3, r1
 8006434:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	4a95      	ldr	r2, [pc, #596]	; (8006690 <UART_SetConfig+0x300>)
 800643c:	4293      	cmp	r3, r2
 800643e:	d131      	bne.n	80064a4 <UART_SetConfig+0x114>
 8006440:	4b94      	ldr	r3, [pc, #592]	; (8006694 <UART_SetConfig+0x304>)
 8006442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006444:	2203      	movs	r2, #3
 8006446:	4013      	ands	r3, r2
 8006448:	2b03      	cmp	r3, #3
 800644a:	d01d      	beq.n	8006488 <UART_SetConfig+0xf8>
 800644c:	d823      	bhi.n	8006496 <UART_SetConfig+0x106>
 800644e:	2b02      	cmp	r3, #2
 8006450:	d00c      	beq.n	800646c <UART_SetConfig+0xdc>
 8006452:	d820      	bhi.n	8006496 <UART_SetConfig+0x106>
 8006454:	2b00      	cmp	r3, #0
 8006456:	d002      	beq.n	800645e <UART_SetConfig+0xce>
 8006458:	2b01      	cmp	r3, #1
 800645a:	d00e      	beq.n	800647a <UART_SetConfig+0xea>
 800645c:	e01b      	b.n	8006496 <UART_SetConfig+0x106>
 800645e:	231b      	movs	r3, #27
 8006460:	2220      	movs	r2, #32
 8006462:	189b      	adds	r3, r3, r2
 8006464:	19db      	adds	r3, r3, r7
 8006466:	2200      	movs	r2, #0
 8006468:	701a      	strb	r2, [r3, #0]
 800646a:	e0b4      	b.n	80065d6 <UART_SetConfig+0x246>
 800646c:	231b      	movs	r3, #27
 800646e:	2220      	movs	r2, #32
 8006470:	189b      	adds	r3, r3, r2
 8006472:	19db      	adds	r3, r3, r7
 8006474:	2202      	movs	r2, #2
 8006476:	701a      	strb	r2, [r3, #0]
 8006478:	e0ad      	b.n	80065d6 <UART_SetConfig+0x246>
 800647a:	231b      	movs	r3, #27
 800647c:	2220      	movs	r2, #32
 800647e:	189b      	adds	r3, r3, r2
 8006480:	19db      	adds	r3, r3, r7
 8006482:	2204      	movs	r2, #4
 8006484:	701a      	strb	r2, [r3, #0]
 8006486:	e0a6      	b.n	80065d6 <UART_SetConfig+0x246>
 8006488:	231b      	movs	r3, #27
 800648a:	2220      	movs	r2, #32
 800648c:	189b      	adds	r3, r3, r2
 800648e:	19db      	adds	r3, r3, r7
 8006490:	2208      	movs	r2, #8
 8006492:	701a      	strb	r2, [r3, #0]
 8006494:	e09f      	b.n	80065d6 <UART_SetConfig+0x246>
 8006496:	231b      	movs	r3, #27
 8006498:	2220      	movs	r2, #32
 800649a:	189b      	adds	r3, r3, r2
 800649c:	19db      	adds	r3, r3, r7
 800649e:	2210      	movs	r2, #16
 80064a0:	701a      	strb	r2, [r3, #0]
 80064a2:	e098      	b.n	80065d6 <UART_SetConfig+0x246>
 80064a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4a7b      	ldr	r2, [pc, #492]	; (8006698 <UART_SetConfig+0x308>)
 80064aa:	4293      	cmp	r3, r2
 80064ac:	d131      	bne.n	8006512 <UART_SetConfig+0x182>
 80064ae:	4b79      	ldr	r3, [pc, #484]	; (8006694 <UART_SetConfig+0x304>)
 80064b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80064b2:	220c      	movs	r2, #12
 80064b4:	4013      	ands	r3, r2
 80064b6:	2b0c      	cmp	r3, #12
 80064b8:	d01d      	beq.n	80064f6 <UART_SetConfig+0x166>
 80064ba:	d823      	bhi.n	8006504 <UART_SetConfig+0x174>
 80064bc:	2b08      	cmp	r3, #8
 80064be:	d00c      	beq.n	80064da <UART_SetConfig+0x14a>
 80064c0:	d820      	bhi.n	8006504 <UART_SetConfig+0x174>
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d002      	beq.n	80064cc <UART_SetConfig+0x13c>
 80064c6:	2b04      	cmp	r3, #4
 80064c8:	d00e      	beq.n	80064e8 <UART_SetConfig+0x158>
 80064ca:	e01b      	b.n	8006504 <UART_SetConfig+0x174>
 80064cc:	231b      	movs	r3, #27
 80064ce:	2220      	movs	r2, #32
 80064d0:	189b      	adds	r3, r3, r2
 80064d2:	19db      	adds	r3, r3, r7
 80064d4:	2200      	movs	r2, #0
 80064d6:	701a      	strb	r2, [r3, #0]
 80064d8:	e07d      	b.n	80065d6 <UART_SetConfig+0x246>
 80064da:	231b      	movs	r3, #27
 80064dc:	2220      	movs	r2, #32
 80064de:	189b      	adds	r3, r3, r2
 80064e0:	19db      	adds	r3, r3, r7
 80064e2:	2202      	movs	r2, #2
 80064e4:	701a      	strb	r2, [r3, #0]
 80064e6:	e076      	b.n	80065d6 <UART_SetConfig+0x246>
 80064e8:	231b      	movs	r3, #27
 80064ea:	2220      	movs	r2, #32
 80064ec:	189b      	adds	r3, r3, r2
 80064ee:	19db      	adds	r3, r3, r7
 80064f0:	2204      	movs	r2, #4
 80064f2:	701a      	strb	r2, [r3, #0]
 80064f4:	e06f      	b.n	80065d6 <UART_SetConfig+0x246>
 80064f6:	231b      	movs	r3, #27
 80064f8:	2220      	movs	r2, #32
 80064fa:	189b      	adds	r3, r3, r2
 80064fc:	19db      	adds	r3, r3, r7
 80064fe:	2208      	movs	r2, #8
 8006500:	701a      	strb	r2, [r3, #0]
 8006502:	e068      	b.n	80065d6 <UART_SetConfig+0x246>
 8006504:	231b      	movs	r3, #27
 8006506:	2220      	movs	r2, #32
 8006508:	189b      	adds	r3, r3, r2
 800650a:	19db      	adds	r3, r3, r7
 800650c:	2210      	movs	r2, #16
 800650e:	701a      	strb	r2, [r3, #0]
 8006510:	e061      	b.n	80065d6 <UART_SetConfig+0x246>
 8006512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a61      	ldr	r2, [pc, #388]	; (800669c <UART_SetConfig+0x30c>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d106      	bne.n	800652a <UART_SetConfig+0x19a>
 800651c:	231b      	movs	r3, #27
 800651e:	2220      	movs	r2, #32
 8006520:	189b      	adds	r3, r3, r2
 8006522:	19db      	adds	r3, r3, r7
 8006524:	2200      	movs	r2, #0
 8006526:	701a      	strb	r2, [r3, #0]
 8006528:	e055      	b.n	80065d6 <UART_SetConfig+0x246>
 800652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	4a5c      	ldr	r2, [pc, #368]	; (80066a0 <UART_SetConfig+0x310>)
 8006530:	4293      	cmp	r3, r2
 8006532:	d106      	bne.n	8006542 <UART_SetConfig+0x1b2>
 8006534:	231b      	movs	r3, #27
 8006536:	2220      	movs	r2, #32
 8006538:	189b      	adds	r3, r3, r2
 800653a:	19db      	adds	r3, r3, r7
 800653c:	2200      	movs	r2, #0
 800653e:	701a      	strb	r2, [r3, #0]
 8006540:	e049      	b.n	80065d6 <UART_SetConfig+0x246>
 8006542:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	4a50      	ldr	r2, [pc, #320]	; (8006688 <UART_SetConfig+0x2f8>)
 8006548:	4293      	cmp	r3, r2
 800654a:	d13e      	bne.n	80065ca <UART_SetConfig+0x23a>
 800654c:	4b51      	ldr	r3, [pc, #324]	; (8006694 <UART_SetConfig+0x304>)
 800654e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006550:	23c0      	movs	r3, #192	; 0xc0
 8006552:	011b      	lsls	r3, r3, #4
 8006554:	4013      	ands	r3, r2
 8006556:	22c0      	movs	r2, #192	; 0xc0
 8006558:	0112      	lsls	r2, r2, #4
 800655a:	4293      	cmp	r3, r2
 800655c:	d027      	beq.n	80065ae <UART_SetConfig+0x21e>
 800655e:	22c0      	movs	r2, #192	; 0xc0
 8006560:	0112      	lsls	r2, r2, #4
 8006562:	4293      	cmp	r3, r2
 8006564:	d82a      	bhi.n	80065bc <UART_SetConfig+0x22c>
 8006566:	2280      	movs	r2, #128	; 0x80
 8006568:	0112      	lsls	r2, r2, #4
 800656a:	4293      	cmp	r3, r2
 800656c:	d011      	beq.n	8006592 <UART_SetConfig+0x202>
 800656e:	2280      	movs	r2, #128	; 0x80
 8006570:	0112      	lsls	r2, r2, #4
 8006572:	4293      	cmp	r3, r2
 8006574:	d822      	bhi.n	80065bc <UART_SetConfig+0x22c>
 8006576:	2b00      	cmp	r3, #0
 8006578:	d004      	beq.n	8006584 <UART_SetConfig+0x1f4>
 800657a:	2280      	movs	r2, #128	; 0x80
 800657c:	00d2      	lsls	r2, r2, #3
 800657e:	4293      	cmp	r3, r2
 8006580:	d00e      	beq.n	80065a0 <UART_SetConfig+0x210>
 8006582:	e01b      	b.n	80065bc <UART_SetConfig+0x22c>
 8006584:	231b      	movs	r3, #27
 8006586:	2220      	movs	r2, #32
 8006588:	189b      	adds	r3, r3, r2
 800658a:	19db      	adds	r3, r3, r7
 800658c:	2200      	movs	r2, #0
 800658e:	701a      	strb	r2, [r3, #0]
 8006590:	e021      	b.n	80065d6 <UART_SetConfig+0x246>
 8006592:	231b      	movs	r3, #27
 8006594:	2220      	movs	r2, #32
 8006596:	189b      	adds	r3, r3, r2
 8006598:	19db      	adds	r3, r3, r7
 800659a:	2202      	movs	r2, #2
 800659c:	701a      	strb	r2, [r3, #0]
 800659e:	e01a      	b.n	80065d6 <UART_SetConfig+0x246>
 80065a0:	231b      	movs	r3, #27
 80065a2:	2220      	movs	r2, #32
 80065a4:	189b      	adds	r3, r3, r2
 80065a6:	19db      	adds	r3, r3, r7
 80065a8:	2204      	movs	r2, #4
 80065aa:	701a      	strb	r2, [r3, #0]
 80065ac:	e013      	b.n	80065d6 <UART_SetConfig+0x246>
 80065ae:	231b      	movs	r3, #27
 80065b0:	2220      	movs	r2, #32
 80065b2:	189b      	adds	r3, r3, r2
 80065b4:	19db      	adds	r3, r3, r7
 80065b6:	2208      	movs	r2, #8
 80065b8:	701a      	strb	r2, [r3, #0]
 80065ba:	e00c      	b.n	80065d6 <UART_SetConfig+0x246>
 80065bc:	231b      	movs	r3, #27
 80065be:	2220      	movs	r2, #32
 80065c0:	189b      	adds	r3, r3, r2
 80065c2:	19db      	adds	r3, r3, r7
 80065c4:	2210      	movs	r2, #16
 80065c6:	701a      	strb	r2, [r3, #0]
 80065c8:	e005      	b.n	80065d6 <UART_SetConfig+0x246>
 80065ca:	231b      	movs	r3, #27
 80065cc:	2220      	movs	r2, #32
 80065ce:	189b      	adds	r3, r3, r2
 80065d0:	19db      	adds	r3, r3, r7
 80065d2:	2210      	movs	r2, #16
 80065d4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a2b      	ldr	r2, [pc, #172]	; (8006688 <UART_SetConfig+0x2f8>)
 80065dc:	4293      	cmp	r3, r2
 80065de:	d000      	beq.n	80065e2 <UART_SetConfig+0x252>
 80065e0:	e0a9      	b.n	8006736 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065e2:	231b      	movs	r3, #27
 80065e4:	2220      	movs	r2, #32
 80065e6:	189b      	adds	r3, r3, r2
 80065e8:	19db      	adds	r3, r3, r7
 80065ea:	781b      	ldrb	r3, [r3, #0]
 80065ec:	2b08      	cmp	r3, #8
 80065ee:	d015      	beq.n	800661c <UART_SetConfig+0x28c>
 80065f0:	dc18      	bgt.n	8006624 <UART_SetConfig+0x294>
 80065f2:	2b04      	cmp	r3, #4
 80065f4:	d00d      	beq.n	8006612 <UART_SetConfig+0x282>
 80065f6:	dc15      	bgt.n	8006624 <UART_SetConfig+0x294>
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d002      	beq.n	8006602 <UART_SetConfig+0x272>
 80065fc:	2b02      	cmp	r3, #2
 80065fe:	d005      	beq.n	800660c <UART_SetConfig+0x27c>
 8006600:	e010      	b.n	8006624 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006602:	f7fe fdff 	bl	8005204 <HAL_RCC_GetPCLK1Freq>
 8006606:	0003      	movs	r3, r0
 8006608:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800660a:	e014      	b.n	8006636 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800660c:	4b25      	ldr	r3, [pc, #148]	; (80066a4 <UART_SetConfig+0x314>)
 800660e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006610:	e011      	b.n	8006636 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006612:	f7fe fd6b 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 8006616:	0003      	movs	r3, r0
 8006618:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800661a:	e00c      	b.n	8006636 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800661c:	2380      	movs	r3, #128	; 0x80
 800661e:	021b      	lsls	r3, r3, #8
 8006620:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006622:	e008      	b.n	8006636 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8006624:	2300      	movs	r3, #0
 8006626:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8006628:	231a      	movs	r3, #26
 800662a:	2220      	movs	r2, #32
 800662c:	189b      	adds	r3, r3, r2
 800662e:	19db      	adds	r3, r3, r7
 8006630:	2201      	movs	r2, #1
 8006632:	701a      	strb	r2, [r3, #0]
        break;
 8006634:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006638:	2b00      	cmp	r3, #0
 800663a:	d100      	bne.n	800663e <UART_SetConfig+0x2ae>
 800663c:	e14b      	b.n	80068d6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800663e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006640:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006642:	4b19      	ldr	r3, [pc, #100]	; (80066a8 <UART_SetConfig+0x318>)
 8006644:	0052      	lsls	r2, r2, #1
 8006646:	5ad3      	ldrh	r3, [r2, r3]
 8006648:	0019      	movs	r1, r3
 800664a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800664c:	f7f9 fd6e 	bl	800012c <__udivsi3>
 8006650:	0003      	movs	r3, r0
 8006652:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006656:	685a      	ldr	r2, [r3, #4]
 8006658:	0013      	movs	r3, r2
 800665a:	005b      	lsls	r3, r3, #1
 800665c:	189b      	adds	r3, r3, r2
 800665e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006660:	429a      	cmp	r2, r3
 8006662:	d305      	bcc.n	8006670 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006664:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006666:	685b      	ldr	r3, [r3, #4]
 8006668:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800666a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666c:	429a      	cmp	r2, r3
 800666e:	d91d      	bls.n	80066ac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8006670:	231a      	movs	r3, #26
 8006672:	2220      	movs	r2, #32
 8006674:	189b      	adds	r3, r3, r2
 8006676:	19db      	adds	r3, r3, r7
 8006678:	2201      	movs	r2, #1
 800667a:	701a      	strb	r2, [r3, #0]
 800667c:	e12b      	b.n	80068d6 <UART_SetConfig+0x546>
 800667e:	46c0      	nop			; (mov r8, r8)
 8006680:	cfff69f3 	.word	0xcfff69f3
 8006684:	ffffcfff 	.word	0xffffcfff
 8006688:	40008000 	.word	0x40008000
 800668c:	11fff4ff 	.word	0x11fff4ff
 8006690:	40013800 	.word	0x40013800
 8006694:	40021000 	.word	0x40021000
 8006698:	40004400 	.word	0x40004400
 800669c:	40004800 	.word	0x40004800
 80066a0:	40004c00 	.word	0x40004c00
 80066a4:	00f42400 	.word	0x00f42400
 80066a8:	08009f44 	.word	0x08009f44
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80066ae:	61bb      	str	r3, [r7, #24]
 80066b0:	2300      	movs	r3, #0
 80066b2:	61fb      	str	r3, [r7, #28]
 80066b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80066b8:	4b92      	ldr	r3, [pc, #584]	; (8006904 <UART_SetConfig+0x574>)
 80066ba:	0052      	lsls	r2, r2, #1
 80066bc:	5ad3      	ldrh	r3, [r2, r3]
 80066be:	613b      	str	r3, [r7, #16]
 80066c0:	2300      	movs	r3, #0
 80066c2:	617b      	str	r3, [r7, #20]
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	697b      	ldr	r3, [r7, #20]
 80066c8:	69b8      	ldr	r0, [r7, #24]
 80066ca:	69f9      	ldr	r1, [r7, #28]
 80066cc:	f7f9 fee2 	bl	8000494 <__aeabi_uldivmod>
 80066d0:	0002      	movs	r2, r0
 80066d2:	000b      	movs	r3, r1
 80066d4:	0e11      	lsrs	r1, r2, #24
 80066d6:	021d      	lsls	r5, r3, #8
 80066d8:	430d      	orrs	r5, r1
 80066da:	0214      	lsls	r4, r2, #8
 80066dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066de:	685b      	ldr	r3, [r3, #4]
 80066e0:	085b      	lsrs	r3, r3, #1
 80066e2:	60bb      	str	r3, [r7, #8]
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]
 80066e8:	68b8      	ldr	r0, [r7, #8]
 80066ea:	68f9      	ldr	r1, [r7, #12]
 80066ec:	1900      	adds	r0, r0, r4
 80066ee:	4169      	adcs	r1, r5
 80066f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f2:	685b      	ldr	r3, [r3, #4]
 80066f4:	603b      	str	r3, [r7, #0]
 80066f6:	2300      	movs	r3, #0
 80066f8:	607b      	str	r3, [r7, #4]
 80066fa:	683a      	ldr	r2, [r7, #0]
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	f7f9 fec9 	bl	8000494 <__aeabi_uldivmod>
 8006702:	0002      	movs	r2, r0
 8006704:	000b      	movs	r3, r1
 8006706:	0013      	movs	r3, r2
 8006708:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800670a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800670c:	23c0      	movs	r3, #192	; 0xc0
 800670e:	009b      	lsls	r3, r3, #2
 8006710:	429a      	cmp	r2, r3
 8006712:	d309      	bcc.n	8006728 <UART_SetConfig+0x398>
 8006714:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006716:	2380      	movs	r3, #128	; 0x80
 8006718:	035b      	lsls	r3, r3, #13
 800671a:	429a      	cmp	r2, r3
 800671c:	d204      	bcs.n	8006728 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800671e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006724:	60da      	str	r2, [r3, #12]
 8006726:	e0d6      	b.n	80068d6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8006728:	231a      	movs	r3, #26
 800672a:	2220      	movs	r2, #32
 800672c:	189b      	adds	r3, r3, r2
 800672e:	19db      	adds	r3, r3, r7
 8006730:	2201      	movs	r2, #1
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e0cf      	b.n	80068d6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006736:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006738:	69da      	ldr	r2, [r3, #28]
 800673a:	2380      	movs	r3, #128	; 0x80
 800673c:	021b      	lsls	r3, r3, #8
 800673e:	429a      	cmp	r2, r3
 8006740:	d000      	beq.n	8006744 <UART_SetConfig+0x3b4>
 8006742:	e070      	b.n	8006826 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8006744:	231b      	movs	r3, #27
 8006746:	2220      	movs	r2, #32
 8006748:	189b      	adds	r3, r3, r2
 800674a:	19db      	adds	r3, r3, r7
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	2b08      	cmp	r3, #8
 8006750:	d015      	beq.n	800677e <UART_SetConfig+0x3ee>
 8006752:	dc18      	bgt.n	8006786 <UART_SetConfig+0x3f6>
 8006754:	2b04      	cmp	r3, #4
 8006756:	d00d      	beq.n	8006774 <UART_SetConfig+0x3e4>
 8006758:	dc15      	bgt.n	8006786 <UART_SetConfig+0x3f6>
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <UART_SetConfig+0x3d4>
 800675e:	2b02      	cmp	r3, #2
 8006760:	d005      	beq.n	800676e <UART_SetConfig+0x3de>
 8006762:	e010      	b.n	8006786 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006764:	f7fe fd4e 	bl	8005204 <HAL_RCC_GetPCLK1Freq>
 8006768:	0003      	movs	r3, r0
 800676a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800676c:	e014      	b.n	8006798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800676e:	4b66      	ldr	r3, [pc, #408]	; (8006908 <UART_SetConfig+0x578>)
 8006770:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006772:	e011      	b.n	8006798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006774:	f7fe fcba 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 8006778:	0003      	movs	r3, r0
 800677a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800677c:	e00c      	b.n	8006798 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800677e:	2380      	movs	r3, #128	; 0x80
 8006780:	021b      	lsls	r3, r3, #8
 8006782:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006784:	e008      	b.n	8006798 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006786:	2300      	movs	r3, #0
 8006788:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800678a:	231a      	movs	r3, #26
 800678c:	2220      	movs	r2, #32
 800678e:	189b      	adds	r3, r3, r2
 8006790:	19db      	adds	r3, r3, r7
 8006792:	2201      	movs	r2, #1
 8006794:	701a      	strb	r2, [r3, #0]
        break;
 8006796:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006798:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800679a:	2b00      	cmp	r3, #0
 800679c:	d100      	bne.n	80067a0 <UART_SetConfig+0x410>
 800679e:	e09a      	b.n	80068d6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80067a4:	4b57      	ldr	r3, [pc, #348]	; (8006904 <UART_SetConfig+0x574>)
 80067a6:	0052      	lsls	r2, r2, #1
 80067a8:	5ad3      	ldrh	r3, [r2, r3]
 80067aa:	0019      	movs	r1, r3
 80067ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80067ae:	f7f9 fcbd 	bl	800012c <__udivsi3>
 80067b2:	0003      	movs	r3, r0
 80067b4:	005a      	lsls	r2, r3, #1
 80067b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b8:	685b      	ldr	r3, [r3, #4]
 80067ba:	085b      	lsrs	r3, r3, #1
 80067bc:	18d2      	adds	r2, r2, r3
 80067be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c0:	685b      	ldr	r3, [r3, #4]
 80067c2:	0019      	movs	r1, r3
 80067c4:	0010      	movs	r0, r2
 80067c6:	f7f9 fcb1 	bl	800012c <__udivsi3>
 80067ca:	0003      	movs	r3, r0
 80067cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067d0:	2b0f      	cmp	r3, #15
 80067d2:	d921      	bls.n	8006818 <UART_SetConfig+0x488>
 80067d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067d6:	2380      	movs	r3, #128	; 0x80
 80067d8:	025b      	lsls	r3, r3, #9
 80067da:	429a      	cmp	r2, r3
 80067dc:	d21c      	bcs.n	8006818 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067e0:	b29a      	uxth	r2, r3
 80067e2:	200e      	movs	r0, #14
 80067e4:	2420      	movs	r4, #32
 80067e6:	1903      	adds	r3, r0, r4
 80067e8:	19db      	adds	r3, r3, r7
 80067ea:	210f      	movs	r1, #15
 80067ec:	438a      	bics	r2, r1
 80067ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80067f2:	085b      	lsrs	r3, r3, #1
 80067f4:	b29b      	uxth	r3, r3
 80067f6:	2207      	movs	r2, #7
 80067f8:	4013      	ands	r3, r2
 80067fa:	b299      	uxth	r1, r3
 80067fc:	1903      	adds	r3, r0, r4
 80067fe:	19db      	adds	r3, r3, r7
 8006800:	1902      	adds	r2, r0, r4
 8006802:	19d2      	adds	r2, r2, r7
 8006804:	8812      	ldrh	r2, [r2, #0]
 8006806:	430a      	orrs	r2, r1
 8006808:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800680a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	1902      	adds	r2, r0, r4
 8006810:	19d2      	adds	r2, r2, r7
 8006812:	8812      	ldrh	r2, [r2, #0]
 8006814:	60da      	str	r2, [r3, #12]
 8006816:	e05e      	b.n	80068d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8006818:	231a      	movs	r3, #26
 800681a:	2220      	movs	r2, #32
 800681c:	189b      	adds	r3, r3, r2
 800681e:	19db      	adds	r3, r3, r7
 8006820:	2201      	movs	r2, #1
 8006822:	701a      	strb	r2, [r3, #0]
 8006824:	e057      	b.n	80068d6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006826:	231b      	movs	r3, #27
 8006828:	2220      	movs	r2, #32
 800682a:	189b      	adds	r3, r3, r2
 800682c:	19db      	adds	r3, r3, r7
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	2b08      	cmp	r3, #8
 8006832:	d015      	beq.n	8006860 <UART_SetConfig+0x4d0>
 8006834:	dc18      	bgt.n	8006868 <UART_SetConfig+0x4d8>
 8006836:	2b04      	cmp	r3, #4
 8006838:	d00d      	beq.n	8006856 <UART_SetConfig+0x4c6>
 800683a:	dc15      	bgt.n	8006868 <UART_SetConfig+0x4d8>
 800683c:	2b00      	cmp	r3, #0
 800683e:	d002      	beq.n	8006846 <UART_SetConfig+0x4b6>
 8006840:	2b02      	cmp	r3, #2
 8006842:	d005      	beq.n	8006850 <UART_SetConfig+0x4c0>
 8006844:	e010      	b.n	8006868 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006846:	f7fe fcdd 	bl	8005204 <HAL_RCC_GetPCLK1Freq>
 800684a:	0003      	movs	r3, r0
 800684c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800684e:	e014      	b.n	800687a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006850:	4b2d      	ldr	r3, [pc, #180]	; (8006908 <UART_SetConfig+0x578>)
 8006852:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006854:	e011      	b.n	800687a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006856:	f7fe fc49 	bl	80050ec <HAL_RCC_GetSysClockFreq>
 800685a:	0003      	movs	r3, r0
 800685c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800685e:	e00c      	b.n	800687a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006860:	2380      	movs	r3, #128	; 0x80
 8006862:	021b      	lsls	r3, r3, #8
 8006864:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8006866:	e008      	b.n	800687a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8006868:	2300      	movs	r3, #0
 800686a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800686c:	231a      	movs	r3, #26
 800686e:	2220      	movs	r2, #32
 8006870:	189b      	adds	r3, r3, r2
 8006872:	19db      	adds	r3, r3, r7
 8006874:	2201      	movs	r2, #1
 8006876:	701a      	strb	r2, [r3, #0]
        break;
 8006878:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800687a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800687c:	2b00      	cmp	r3, #0
 800687e:	d02a      	beq.n	80068d6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006884:	4b1f      	ldr	r3, [pc, #124]	; (8006904 <UART_SetConfig+0x574>)
 8006886:	0052      	lsls	r2, r2, #1
 8006888:	5ad3      	ldrh	r3, [r2, r3]
 800688a:	0019      	movs	r1, r3
 800688c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800688e:	f7f9 fc4d 	bl	800012c <__udivsi3>
 8006892:	0003      	movs	r3, r0
 8006894:	001a      	movs	r2, r3
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	18d2      	adds	r2, r2, r3
 800689e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	0019      	movs	r1, r3
 80068a4:	0010      	movs	r0, r2
 80068a6:	f7f9 fc41 	bl	800012c <__udivsi3>
 80068aa:	0003      	movs	r3, r0
 80068ac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068b0:	2b0f      	cmp	r3, #15
 80068b2:	d90a      	bls.n	80068ca <UART_SetConfig+0x53a>
 80068b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b6:	2380      	movs	r3, #128	; 0x80
 80068b8:	025b      	lsls	r3, r3, #9
 80068ba:	429a      	cmp	r2, r3
 80068bc:	d205      	bcs.n	80068ca <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068c0:	b29a      	uxth	r2, r3
 80068c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	60da      	str	r2, [r3, #12]
 80068c8:	e005      	b.n	80068d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80068ca:	231a      	movs	r3, #26
 80068cc:	2220      	movs	r2, #32
 80068ce:	189b      	adds	r3, r3, r2
 80068d0:	19db      	adds	r3, r3, r7
 80068d2:	2201      	movs	r2, #1
 80068d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d8:	226a      	movs	r2, #106	; 0x6a
 80068da:	2101      	movs	r1, #1
 80068dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80068de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e0:	2268      	movs	r2, #104	; 0x68
 80068e2:	2101      	movs	r1, #1
 80068e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068e8:	2200      	movs	r2, #0
 80068ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80068ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ee:	2200      	movs	r2, #0
 80068f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80068f2:	231a      	movs	r3, #26
 80068f4:	2220      	movs	r2, #32
 80068f6:	189b      	adds	r3, r3, r2
 80068f8:	19db      	adds	r3, r3, r7
 80068fa:	781b      	ldrb	r3, [r3, #0]
}
 80068fc:	0018      	movs	r0, r3
 80068fe:	46bd      	mov	sp, r7
 8006900:	b010      	add	sp, #64	; 0x40
 8006902:	bdb0      	pop	{r4, r5, r7, pc}
 8006904:	08009f44 	.word	0x08009f44
 8006908:	00f42400 	.word	0x00f42400

0800690c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006918:	2208      	movs	r2, #8
 800691a:	4013      	ands	r3, r2
 800691c:	d00b      	beq.n	8006936 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	4a4a      	ldr	r2, [pc, #296]	; (8006a50 <UART_AdvFeatureConfig+0x144>)
 8006926:	4013      	ands	r3, r2
 8006928:	0019      	movs	r1, r3
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	430a      	orrs	r2, r1
 8006934:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800693a:	2201      	movs	r2, #1
 800693c:	4013      	ands	r3, r2
 800693e:	d00b      	beq.n	8006958 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	685b      	ldr	r3, [r3, #4]
 8006946:	4a43      	ldr	r2, [pc, #268]	; (8006a54 <UART_AdvFeatureConfig+0x148>)
 8006948:	4013      	ands	r3, r2
 800694a:	0019      	movs	r1, r3
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	430a      	orrs	r2, r1
 8006956:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800695c:	2202      	movs	r2, #2
 800695e:	4013      	ands	r3, r2
 8006960:	d00b      	beq.n	800697a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	685b      	ldr	r3, [r3, #4]
 8006968:	4a3b      	ldr	r2, [pc, #236]	; (8006a58 <UART_AdvFeatureConfig+0x14c>)
 800696a:	4013      	ands	r3, r2
 800696c:	0019      	movs	r1, r3
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	430a      	orrs	r2, r1
 8006978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800697e:	2204      	movs	r2, #4
 8006980:	4013      	ands	r3, r2
 8006982:	d00b      	beq.n	800699c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	685b      	ldr	r3, [r3, #4]
 800698a:	4a34      	ldr	r2, [pc, #208]	; (8006a5c <UART_AdvFeatureConfig+0x150>)
 800698c:	4013      	ands	r3, r2
 800698e:	0019      	movs	r1, r3
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	430a      	orrs	r2, r1
 800699a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069a0:	2210      	movs	r2, #16
 80069a2:	4013      	ands	r3, r2
 80069a4:	d00b      	beq.n	80069be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	689b      	ldr	r3, [r3, #8]
 80069ac:	4a2c      	ldr	r2, [pc, #176]	; (8006a60 <UART_AdvFeatureConfig+0x154>)
 80069ae:	4013      	ands	r3, r2
 80069b0:	0019      	movs	r1, r3
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	430a      	orrs	r2, r1
 80069bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069c2:	2220      	movs	r2, #32
 80069c4:	4013      	ands	r3, r2
 80069c6:	d00b      	beq.n	80069e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	689b      	ldr	r3, [r3, #8]
 80069ce:	4a25      	ldr	r2, [pc, #148]	; (8006a64 <UART_AdvFeatureConfig+0x158>)
 80069d0:	4013      	ands	r3, r2
 80069d2:	0019      	movs	r1, r3
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	430a      	orrs	r2, r1
 80069de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069e4:	2240      	movs	r2, #64	; 0x40
 80069e6:	4013      	ands	r3, r2
 80069e8:	d01d      	beq.n	8006a26 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	4a1d      	ldr	r2, [pc, #116]	; (8006a68 <UART_AdvFeatureConfig+0x15c>)
 80069f2:	4013      	ands	r3, r2
 80069f4:	0019      	movs	r1, r3
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	430a      	orrs	r2, r1
 8006a00:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006a06:	2380      	movs	r3, #128	; 0x80
 8006a08:	035b      	lsls	r3, r3, #13
 8006a0a:	429a      	cmp	r2, r3
 8006a0c:	d10b      	bne.n	8006a26 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681b      	ldr	r3, [r3, #0]
 8006a12:	685b      	ldr	r3, [r3, #4]
 8006a14:	4a15      	ldr	r2, [pc, #84]	; (8006a6c <UART_AdvFeatureConfig+0x160>)
 8006a16:	4013      	ands	r3, r2
 8006a18:	0019      	movs	r1, r3
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	430a      	orrs	r2, r1
 8006a24:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a2a:	2280      	movs	r2, #128	; 0x80
 8006a2c:	4013      	ands	r3, r2
 8006a2e:	d00b      	beq.n	8006a48 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <UART_AdvFeatureConfig+0x164>)
 8006a38:	4013      	ands	r3, r2
 8006a3a:	0019      	movs	r1, r3
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	430a      	orrs	r2, r1
 8006a46:	605a      	str	r2, [r3, #4]
  }
}
 8006a48:	46c0      	nop			; (mov r8, r8)
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	b002      	add	sp, #8
 8006a4e:	bd80      	pop	{r7, pc}
 8006a50:	ffff7fff 	.word	0xffff7fff
 8006a54:	fffdffff 	.word	0xfffdffff
 8006a58:	fffeffff 	.word	0xfffeffff
 8006a5c:	fffbffff 	.word	0xfffbffff
 8006a60:	ffffefff 	.word	0xffffefff
 8006a64:	ffffdfff 	.word	0xffffdfff
 8006a68:	ffefffff 	.word	0xffefffff
 8006a6c:	ff9fffff 	.word	0xff9fffff
 8006a70:	fff7ffff 	.word	0xfff7ffff

08006a74 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b092      	sub	sp, #72	; 0x48
 8006a78:	af02      	add	r7, sp, #8
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	2290      	movs	r2, #144	; 0x90
 8006a80:	2100      	movs	r1, #0
 8006a82:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a84:	f7fd fb88 	bl	8004198 <HAL_GetTick>
 8006a88:	0003      	movs	r3, r0
 8006a8a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	2208      	movs	r2, #8
 8006a94:	4013      	ands	r3, r2
 8006a96:	2b08      	cmp	r3, #8
 8006a98:	d12d      	bne.n	8006af6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006a9c:	2280      	movs	r2, #128	; 0x80
 8006a9e:	0391      	lsls	r1, r2, #14
 8006aa0:	6878      	ldr	r0, [r7, #4]
 8006aa2:	4a47      	ldr	r2, [pc, #284]	; (8006bc0 <UART_CheckIdleState+0x14c>)
 8006aa4:	9200      	str	r2, [sp, #0]
 8006aa6:	2200      	movs	r2, #0
 8006aa8:	f000 f88e 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8006aac:	1e03      	subs	r3, r0, #0
 8006aae:	d022      	beq.n	8006af6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ab0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ab4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006ab8:	63bb      	str	r3, [r7, #56]	; 0x38
 8006aba:	2301      	movs	r3, #1
 8006abc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006abe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ac0:	f383 8810 	msr	PRIMASK, r3
}
 8006ac4:	46c0      	nop			; (mov r8, r8)
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681a      	ldr	r2, [r3, #0]
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	2180      	movs	r1, #128	; 0x80
 8006ad2:	438a      	bics	r2, r1
 8006ad4:	601a      	str	r2, [r3, #0]
 8006ad6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ad8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ada:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006adc:	f383 8810 	msr	PRIMASK, r3
}
 8006ae0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	2288      	movs	r2, #136	; 0x88
 8006ae6:	2120      	movs	r1, #32
 8006ae8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2284      	movs	r2, #132	; 0x84
 8006aee:	2100      	movs	r1, #0
 8006af0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006af2:	2303      	movs	r3, #3
 8006af4:	e060      	b.n	8006bb8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	681b      	ldr	r3, [r3, #0]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	2204      	movs	r2, #4
 8006afe:	4013      	ands	r3, r2
 8006b00:	2b04      	cmp	r3, #4
 8006b02:	d146      	bne.n	8006b92 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b06:	2280      	movs	r2, #128	; 0x80
 8006b08:	03d1      	lsls	r1, r2, #15
 8006b0a:	6878      	ldr	r0, [r7, #4]
 8006b0c:	4a2c      	ldr	r2, [pc, #176]	; (8006bc0 <UART_CheckIdleState+0x14c>)
 8006b0e:	9200      	str	r2, [sp, #0]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f000 f859 	bl	8006bc8 <UART_WaitOnFlagUntilTimeout>
 8006b16:	1e03      	subs	r3, r0, #0
 8006b18:	d03b      	beq.n	8006b92 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b1a:	f3ef 8310 	mrs	r3, PRIMASK
 8006b1e:	60fb      	str	r3, [r7, #12]
  return(result);
 8006b20:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006b22:	637b      	str	r3, [r7, #52]	; 0x34
 8006b24:	2301      	movs	r3, #1
 8006b26:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b28:	693b      	ldr	r3, [r7, #16]
 8006b2a:	f383 8810 	msr	PRIMASK, r3
}
 8006b2e:	46c0      	nop			; (mov r8, r8)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	681a      	ldr	r2, [r3, #0]
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	4922      	ldr	r1, [pc, #136]	; (8006bc4 <UART_CheckIdleState+0x150>)
 8006b3c:	400a      	ands	r2, r1
 8006b3e:	601a      	str	r2, [r3, #0]
 8006b40:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b42:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b44:	697b      	ldr	r3, [r7, #20]
 8006b46:	f383 8810 	msr	PRIMASK, r3
}
 8006b4a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006b4c:	f3ef 8310 	mrs	r3, PRIMASK
 8006b50:	61bb      	str	r3, [r7, #24]
  return(result);
 8006b52:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b54:	633b      	str	r3, [r7, #48]	; 0x30
 8006b56:	2301      	movs	r3, #1
 8006b58:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b5a:	69fb      	ldr	r3, [r7, #28]
 8006b5c:	f383 8810 	msr	PRIMASK, r3
}
 8006b60:	46c0      	nop			; (mov r8, r8)
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	689a      	ldr	r2, [r3, #8]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	2101      	movs	r1, #1
 8006b6e:	438a      	bics	r2, r1
 8006b70:	609a      	str	r2, [r3, #8]
 8006b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b74:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006b76:	6a3b      	ldr	r3, [r7, #32]
 8006b78:	f383 8810 	msr	PRIMASK, r3
}
 8006b7c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	228c      	movs	r2, #140	; 0x8c
 8006b82:	2120      	movs	r1, #32
 8006b84:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2284      	movs	r2, #132	; 0x84
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b8e:	2303      	movs	r3, #3
 8006b90:	e012      	b.n	8006bb8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2288      	movs	r2, #136	; 0x88
 8006b96:	2120      	movs	r1, #32
 8006b98:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	228c      	movs	r2, #140	; 0x8c
 8006b9e:	2120      	movs	r1, #32
 8006ba0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	2200      	movs	r2, #0
 8006ba6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	2200      	movs	r2, #0
 8006bac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2284      	movs	r2, #132	; 0x84
 8006bb2:	2100      	movs	r1, #0
 8006bb4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8006bb6:	2300      	movs	r3, #0
}
 8006bb8:	0018      	movs	r0, r3
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	b010      	add	sp, #64	; 0x40
 8006bbe:	bd80      	pop	{r7, pc}
 8006bc0:	01ffffff 	.word	0x01ffffff
 8006bc4:	fffffedf 	.word	0xfffffedf

08006bc8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b084      	sub	sp, #16
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	60f8      	str	r0, [r7, #12]
 8006bd0:	60b9      	str	r1, [r7, #8]
 8006bd2:	603b      	str	r3, [r7, #0]
 8006bd4:	1dfb      	adds	r3, r7, #7
 8006bd6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bd8:	e051      	b.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	3301      	adds	r3, #1
 8006bde:	d04e      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006be0:	f7fd fada 	bl	8004198 <HAL_GetTick>
 8006be4:	0002      	movs	r2, r0
 8006be6:	683b      	ldr	r3, [r7, #0]
 8006be8:	1ad3      	subs	r3, r2, r3
 8006bea:	69ba      	ldr	r2, [r7, #24]
 8006bec:	429a      	cmp	r2, r3
 8006bee:	d302      	bcc.n	8006bf6 <UART_WaitOnFlagUntilTimeout+0x2e>
 8006bf0:	69bb      	ldr	r3, [r7, #24]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d101      	bne.n	8006bfa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8006bf6:	2303      	movs	r3, #3
 8006bf8:	e051      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bfa:	68fb      	ldr	r3, [r7, #12]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	2204      	movs	r2, #4
 8006c02:	4013      	ands	r3, r2
 8006c04:	d03b      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006c06:	68bb      	ldr	r3, [r7, #8]
 8006c08:	2b80      	cmp	r3, #128	; 0x80
 8006c0a:	d038      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8006c0c:	68bb      	ldr	r3, [r7, #8]
 8006c0e:	2b40      	cmp	r3, #64	; 0x40
 8006c10:	d035      	beq.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	2208      	movs	r2, #8
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	2b08      	cmp	r3, #8
 8006c1e:	d111      	bne.n	8006c44 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2208      	movs	r2, #8
 8006c26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	0018      	movs	r0, r3
 8006c2c:	f000 f960 	bl	8006ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c30:	68fb      	ldr	r3, [r7, #12]
 8006c32:	2290      	movs	r2, #144	; 0x90
 8006c34:	2108      	movs	r1, #8
 8006c36:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2284      	movs	r2, #132	; 0x84
 8006c3c:	2100      	movs	r1, #0
 8006c3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8006c40:	2301      	movs	r3, #1
 8006c42:	e02c      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	69da      	ldr	r2, [r3, #28]
 8006c4a:	2380      	movs	r3, #128	; 0x80
 8006c4c:	011b      	lsls	r3, r3, #4
 8006c4e:	401a      	ands	r2, r3
 8006c50:	2380      	movs	r3, #128	; 0x80
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d112      	bne.n	8006c7e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	2280      	movs	r2, #128	; 0x80
 8006c5e:	0112      	lsls	r2, r2, #4
 8006c60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	0018      	movs	r0, r3
 8006c66:	f000 f943 	bl	8006ef0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c6a:	68fb      	ldr	r3, [r7, #12]
 8006c6c:	2290      	movs	r2, #144	; 0x90
 8006c6e:	2120      	movs	r1, #32
 8006c70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	2284      	movs	r2, #132	; 0x84
 8006c76:	2100      	movs	r1, #0
 8006c78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8006c7a:	2303      	movs	r3, #3
 8006c7c:	e00f      	b.n	8006c9e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	69db      	ldr	r3, [r3, #28]
 8006c84:	68ba      	ldr	r2, [r7, #8]
 8006c86:	4013      	ands	r3, r2
 8006c88:	68ba      	ldr	r2, [r7, #8]
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	425a      	negs	r2, r3
 8006c8e:	4153      	adcs	r3, r2
 8006c90:	b2db      	uxtb	r3, r3
 8006c92:	001a      	movs	r2, r3
 8006c94:	1dfb      	adds	r3, r7, #7
 8006c96:	781b      	ldrb	r3, [r3, #0]
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d09e      	beq.n	8006bda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c9c:	2300      	movs	r3, #0
}
 8006c9e:	0018      	movs	r0, r3
 8006ca0:	46bd      	mov	sp, r7
 8006ca2:	b004      	add	sp, #16
 8006ca4:	bd80      	pop	{r7, pc}
	...

08006ca8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ca8:	b580      	push	{r7, lr}
 8006caa:	b098      	sub	sp, #96	; 0x60
 8006cac:	af00      	add	r7, sp, #0
 8006cae:	60f8      	str	r0, [r7, #12]
 8006cb0:	60b9      	str	r1, [r7, #8]
 8006cb2:	1dbb      	adds	r3, r7, #6
 8006cb4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8006cb6:	68fb      	ldr	r3, [r7, #12]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	1dba      	adds	r2, r7, #6
 8006cc0:	215c      	movs	r1, #92	; 0x5c
 8006cc2:	8812      	ldrh	r2, [r2, #0]
 8006cc4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	1dba      	adds	r2, r7, #6
 8006cca:	215e      	movs	r1, #94	; 0x5e
 8006ccc:	8812      	ldrh	r2, [r2, #0]
 8006cce:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2200      	movs	r2, #0
 8006cd4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	689a      	ldr	r2, [r3, #8]
 8006cda:	2380      	movs	r3, #128	; 0x80
 8006cdc:	015b      	lsls	r3, r3, #5
 8006cde:	429a      	cmp	r2, r3
 8006ce0:	d10d      	bne.n	8006cfe <UART_Start_Receive_IT+0x56>
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	691b      	ldr	r3, [r3, #16]
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d104      	bne.n	8006cf4 <UART_Start_Receive_IT+0x4c>
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	2260      	movs	r2, #96	; 0x60
 8006cee:	497b      	ldr	r1, [pc, #492]	; (8006edc <UART_Start_Receive_IT+0x234>)
 8006cf0:	5299      	strh	r1, [r3, r2]
 8006cf2:	e02e      	b.n	8006d52 <UART_Start_Receive_IT+0xaa>
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	2260      	movs	r2, #96	; 0x60
 8006cf8:	21ff      	movs	r1, #255	; 0xff
 8006cfa:	5299      	strh	r1, [r3, r2]
 8006cfc:	e029      	b.n	8006d52 <UART_Start_Receive_IT+0xaa>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	689b      	ldr	r3, [r3, #8]
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d10d      	bne.n	8006d22 <UART_Start_Receive_IT+0x7a>
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	691b      	ldr	r3, [r3, #16]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d104      	bne.n	8006d18 <UART_Start_Receive_IT+0x70>
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	2260      	movs	r2, #96	; 0x60
 8006d12:	21ff      	movs	r1, #255	; 0xff
 8006d14:	5299      	strh	r1, [r3, r2]
 8006d16:	e01c      	b.n	8006d52 <UART_Start_Receive_IT+0xaa>
 8006d18:	68fb      	ldr	r3, [r7, #12]
 8006d1a:	2260      	movs	r2, #96	; 0x60
 8006d1c:	217f      	movs	r1, #127	; 0x7f
 8006d1e:	5299      	strh	r1, [r3, r2]
 8006d20:	e017      	b.n	8006d52 <UART_Start_Receive_IT+0xaa>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	689a      	ldr	r2, [r3, #8]
 8006d26:	2380      	movs	r3, #128	; 0x80
 8006d28:	055b      	lsls	r3, r3, #21
 8006d2a:	429a      	cmp	r2, r3
 8006d2c:	d10d      	bne.n	8006d4a <UART_Start_Receive_IT+0xa2>
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	691b      	ldr	r3, [r3, #16]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d104      	bne.n	8006d40 <UART_Start_Receive_IT+0x98>
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	2260      	movs	r2, #96	; 0x60
 8006d3a:	217f      	movs	r1, #127	; 0x7f
 8006d3c:	5299      	strh	r1, [r3, r2]
 8006d3e:	e008      	b.n	8006d52 <UART_Start_Receive_IT+0xaa>
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	2260      	movs	r2, #96	; 0x60
 8006d44:	213f      	movs	r1, #63	; 0x3f
 8006d46:	5299      	strh	r1, [r3, r2]
 8006d48:	e003      	b.n	8006d52 <UART_Start_Receive_IT+0xaa>
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2260      	movs	r2, #96	; 0x60
 8006d4e:	2100      	movs	r1, #0
 8006d50:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	2290      	movs	r2, #144	; 0x90
 8006d56:	2100      	movs	r1, #0
 8006d58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	228c      	movs	r2, #140	; 0x8c
 8006d5e:	2122      	movs	r1, #34	; 0x22
 8006d60:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d62:	f3ef 8310 	mrs	r3, PRIMASK
 8006d66:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8006d68:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d6c:	2301      	movs	r3, #1
 8006d6e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d72:	f383 8810 	msr	PRIMASK, r3
}
 8006d76:	46c0      	nop			; (mov r8, r8)
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	689a      	ldr	r2, [r3, #8]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	2101      	movs	r1, #1
 8006d84:	430a      	orrs	r2, r1
 8006d86:	609a      	str	r2, [r3, #8]
 8006d88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d8a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d8e:	f383 8810 	msr	PRIMASK, r3
}
 8006d92:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8006d98:	2380      	movs	r3, #128	; 0x80
 8006d9a:	059b      	lsls	r3, r3, #22
 8006d9c:	429a      	cmp	r2, r3
 8006d9e:	d150      	bne.n	8006e42 <UART_Start_Receive_IT+0x19a>
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2268      	movs	r2, #104	; 0x68
 8006da4:	5a9b      	ldrh	r3, [r3, r2]
 8006da6:	1dba      	adds	r2, r7, #6
 8006da8:	8812      	ldrh	r2, [r2, #0]
 8006daa:	429a      	cmp	r2, r3
 8006dac:	d349      	bcc.n	8006e42 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	689a      	ldr	r2, [r3, #8]
 8006db2:	2380      	movs	r3, #128	; 0x80
 8006db4:	015b      	lsls	r3, r3, #5
 8006db6:	429a      	cmp	r2, r3
 8006db8:	d107      	bne.n	8006dca <UART_Start_Receive_IT+0x122>
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	2b00      	cmp	r3, #0
 8006dc0:	d103      	bne.n	8006dca <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	4a46      	ldr	r2, [pc, #280]	; (8006ee0 <UART_Start_Receive_IT+0x238>)
 8006dc6:	675a      	str	r2, [r3, #116]	; 0x74
 8006dc8:	e002      	b.n	8006dd0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	4a45      	ldr	r2, [pc, #276]	; (8006ee4 <UART_Start_Receive_IT+0x23c>)
 8006dce:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	691b      	ldr	r3, [r3, #16]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d019      	beq.n	8006e0c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006dd8:	f3ef 8310 	mrs	r3, PRIMASK
 8006ddc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8006dde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006de0:	65bb      	str	r3, [r7, #88]	; 0x58
 8006de2:	2301      	movs	r3, #1
 8006de4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006de6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006de8:	f383 8810 	msr	PRIMASK, r3
}
 8006dec:	46c0      	nop			; (mov r8, r8)
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681a      	ldr	r2, [r3, #0]
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2180      	movs	r1, #128	; 0x80
 8006dfa:	0049      	lsls	r1, r1, #1
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	601a      	str	r2, [r3, #0]
 8006e00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006e02:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e06:	f383 8810 	msr	PRIMASK, r3
}
 8006e0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e0c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8006e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006e14:	657b      	str	r3, [r7, #84]	; 0x54
 8006e16:	2301      	movs	r3, #1
 8006e18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1c:	f383 8810 	msr	PRIMASK, r3
}
 8006e20:	46c0      	nop			; (mov r8, r8)
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	2180      	movs	r1, #128	; 0x80
 8006e2e:	0549      	lsls	r1, r1, #21
 8006e30:	430a      	orrs	r2, r1
 8006e32:	609a      	str	r2, [r3, #8]
 8006e34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006e36:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e3a:	f383 8810 	msr	PRIMASK, r3
}
 8006e3e:	46c0      	nop			; (mov r8, r8)
 8006e40:	e047      	b.n	8006ed2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	689a      	ldr	r2, [r3, #8]
 8006e46:	2380      	movs	r3, #128	; 0x80
 8006e48:	015b      	lsls	r3, r3, #5
 8006e4a:	429a      	cmp	r2, r3
 8006e4c:	d107      	bne.n	8006e5e <UART_Start_Receive_IT+0x1b6>
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	691b      	ldr	r3, [r3, #16]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d103      	bne.n	8006e5e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	4a23      	ldr	r2, [pc, #140]	; (8006ee8 <UART_Start_Receive_IT+0x240>)
 8006e5a:	675a      	str	r2, [r3, #116]	; 0x74
 8006e5c:	e002      	b.n	8006e64 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	4a22      	ldr	r2, [pc, #136]	; (8006eec <UART_Start_Receive_IT+0x244>)
 8006e62:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	691b      	ldr	r3, [r3, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d019      	beq.n	8006ea0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e6c:	f3ef 8310 	mrs	r3, PRIMASK
 8006e70:	61fb      	str	r3, [r7, #28]
  return(result);
 8006e72:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006e76:	2301      	movs	r3, #1
 8006e78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e7a:	6a3b      	ldr	r3, [r7, #32]
 8006e7c:	f383 8810 	msr	PRIMASK, r3
}
 8006e80:	46c0      	nop			; (mov r8, r8)
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2190      	movs	r1, #144	; 0x90
 8006e8e:	0049      	lsls	r1, r1, #1
 8006e90:	430a      	orrs	r2, r1
 8006e92:	601a      	str	r2, [r3, #0]
 8006e94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006e96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9a:	f383 8810 	msr	PRIMASK, r3
}
 8006e9e:	e018      	b.n	8006ed2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ea0:	f3ef 8310 	mrs	r3, PRIMASK
 8006ea4:	613b      	str	r3, [r7, #16]
  return(result);
 8006ea6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8006ea8:	653b      	str	r3, [r7, #80]	; 0x50
 8006eaa:	2301      	movs	r3, #1
 8006eac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eae:	697b      	ldr	r3, [r7, #20]
 8006eb0:	f383 8810 	msr	PRIMASK, r3
}
 8006eb4:	46c0      	nop			; (mov r8, r8)
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	2120      	movs	r1, #32
 8006ec2:	430a      	orrs	r2, r1
 8006ec4:	601a      	str	r2, [r3, #0]
 8006ec6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006ec8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eca:	69bb      	ldr	r3, [r7, #24]
 8006ecc:	f383 8810 	msr	PRIMASK, r3
}
 8006ed0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8006ed2:	2300      	movs	r3, #0
}
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	b018      	add	sp, #96	; 0x60
 8006eda:	bd80      	pop	{r7, pc}
 8006edc:	000001ff 	.word	0x000001ff
 8006ee0:	0800770d 	.word	0x0800770d
 8006ee4:	080073cd 	.word	0x080073cd
 8006ee8:	08007209 	.word	0x08007209
 8006eec:	08007045 	.word	0x08007045

08006ef0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08e      	sub	sp, #56	; 0x38
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ef8:	f3ef 8310 	mrs	r3, PRIMASK
 8006efc:	617b      	str	r3, [r7, #20]
  return(result);
 8006efe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f00:	637b      	str	r3, [r7, #52]	; 0x34
 8006f02:	2301      	movs	r3, #1
 8006f04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f06:	69bb      	ldr	r3, [r7, #24]
 8006f08:	f383 8810 	msr	PRIMASK, r3
}
 8006f0c:	46c0      	nop			; (mov r8, r8)
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681a      	ldr	r2, [r3, #0]
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	4926      	ldr	r1, [pc, #152]	; (8006fb4 <UART_EndRxTransfer+0xc4>)
 8006f1a:	400a      	ands	r2, r1
 8006f1c:	601a      	str	r2, [r3, #0]
 8006f1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006f20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f22:	69fb      	ldr	r3, [r7, #28]
 8006f24:	f383 8810 	msr	PRIMASK, r3
}
 8006f28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f2a:	f3ef 8310 	mrs	r3, PRIMASK
 8006f2e:	623b      	str	r3, [r7, #32]
  return(result);
 8006f30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006f32:	633b      	str	r3, [r7, #48]	; 0x30
 8006f34:	2301      	movs	r3, #1
 8006f36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f3a:	f383 8810 	msr	PRIMASK, r3
}
 8006f3e:	46c0      	nop			; (mov r8, r8)
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	689a      	ldr	r2, [r3, #8]
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	681b      	ldr	r3, [r3, #0]
 8006f4a:	491b      	ldr	r1, [pc, #108]	; (8006fb8 <UART_EndRxTransfer+0xc8>)
 8006f4c:	400a      	ands	r2, r1
 8006f4e:	609a      	str	r2, [r3, #8]
 8006f50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006f52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f56:	f383 8810 	msr	PRIMASK, r3
}
 8006f5a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006f60:	2b01      	cmp	r3, #1
 8006f62:	d118      	bne.n	8006f96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f64:	f3ef 8310 	mrs	r3, PRIMASK
 8006f68:	60bb      	str	r3, [r7, #8]
  return(result);
 8006f6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006f6e:	2301      	movs	r3, #1
 8006f70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	f383 8810 	msr	PRIMASK, r3
}
 8006f78:	46c0      	nop			; (mov r8, r8)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	681a      	ldr	r2, [r3, #0]
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	2110      	movs	r1, #16
 8006f86:	438a      	bics	r2, r1
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	f383 8810 	msr	PRIMASK, r3
}
 8006f94:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	228c      	movs	r2, #140	; 0x8c
 8006f9a:	2120      	movs	r1, #32
 8006f9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	2200      	movs	r2, #0
 8006fa2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	46bd      	mov	sp, r7
 8006fae:	b00e      	add	sp, #56	; 0x38
 8006fb0:	bd80      	pop	{r7, pc}
 8006fb2:	46c0      	nop			; (mov r8, r8)
 8006fb4:	fffffedf 	.word	0xfffffedf
 8006fb8:	effffffe 	.word	0xeffffffe

08006fbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006fbc:	b580      	push	{r7, lr}
 8006fbe:	b084      	sub	sp, #16
 8006fc0:	af00      	add	r7, sp, #0
 8006fc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	225e      	movs	r2, #94	; 0x5e
 8006fce:	2100      	movs	r1, #0
 8006fd0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2256      	movs	r2, #86	; 0x56
 8006fd6:	2100      	movs	r1, #0
 8006fd8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	0018      	movs	r0, r3
 8006fde:	f7ff f9c3 	bl	8006368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	b004      	add	sp, #16
 8006fe8:	bd80      	pop	{r7, pc}

08006fea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006fea:	b580      	push	{r7, lr}
 8006fec:	b086      	sub	sp, #24
 8006fee:	af00      	add	r7, sp, #0
 8006ff0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ff2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ff6:	60bb      	str	r3, [r7, #8]
  return(result);
 8006ff8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006ffa:	617b      	str	r3, [r7, #20]
 8006ffc:	2301      	movs	r3, #1
 8006ffe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	f383 8810 	msr	PRIMASK, r3
}
 8007006:	46c0      	nop			; (mov r8, r8)
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	681b      	ldr	r3, [r3, #0]
 800700c:	681a      	ldr	r2, [r3, #0]
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	2140      	movs	r1, #64	; 0x40
 8007014:	438a      	bics	r2, r1
 8007016:	601a      	str	r2, [r3, #0]
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800701c:	693b      	ldr	r3, [r7, #16]
 800701e:	f383 8810 	msr	PRIMASK, r3
}
 8007022:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	2288      	movs	r2, #136	; 0x88
 8007028:	2120      	movs	r1, #32
 800702a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2200      	movs	r2, #0
 8007030:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	0018      	movs	r0, r3
 8007036:	f7ff f987 	bl	8006348 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800703a:	46c0      	nop			; (mov r8, r8)
 800703c:	46bd      	mov	sp, r7
 800703e:	b006      	add	sp, #24
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007044:	b580      	push	{r7, lr}
 8007046:	b094      	sub	sp, #80	; 0x50
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800704c:	204e      	movs	r0, #78	; 0x4e
 800704e:	183b      	adds	r3, r7, r0
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	2160      	movs	r1, #96	; 0x60
 8007054:	5a52      	ldrh	r2, [r2, r1]
 8007056:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	228c      	movs	r2, #140	; 0x8c
 800705c:	589b      	ldr	r3, [r3, r2]
 800705e:	2b22      	cmp	r3, #34	; 0x22
 8007060:	d000      	beq.n	8007064 <UART_RxISR_8BIT+0x20>
 8007062:	e0bf      	b.n	80071e4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800706a:	214c      	movs	r1, #76	; 0x4c
 800706c:	187b      	adds	r3, r7, r1
 800706e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007070:	187b      	adds	r3, r7, r1
 8007072:	881b      	ldrh	r3, [r3, #0]
 8007074:	b2da      	uxtb	r2, r3
 8007076:	183b      	adds	r3, r7, r0
 8007078:	881b      	ldrh	r3, [r3, #0]
 800707a:	b2d9      	uxtb	r1, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007080:	400a      	ands	r2, r1
 8007082:	b2d2      	uxtb	r2, r2
 8007084:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800708a:	1c5a      	adds	r2, r3, #1
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007090:	687b      	ldr	r3, [r7, #4]
 8007092:	225e      	movs	r2, #94	; 0x5e
 8007094:	5a9b      	ldrh	r3, [r3, r2]
 8007096:	b29b      	uxth	r3, r3
 8007098:	3b01      	subs	r3, #1
 800709a:	b299      	uxth	r1, r3
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	225e      	movs	r2, #94	; 0x5e
 80070a0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	225e      	movs	r2, #94	; 0x5e
 80070a6:	5a9b      	ldrh	r3, [r3, r2]
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d000      	beq.n	80070b0 <UART_RxISR_8BIT+0x6c>
 80070ae:	e0a1      	b.n	80071f4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070b0:	f3ef 8310 	mrs	r3, PRIMASK
 80070b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80070b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070b8:	64bb      	str	r3, [r7, #72]	; 0x48
 80070ba:	2301      	movs	r3, #1
 80070bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c0:	f383 8810 	msr	PRIMASK, r3
}
 80070c4:	46c0      	nop			; (mov r8, r8)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	494a      	ldr	r1, [pc, #296]	; (80071fc <UART_RxISR_8BIT+0x1b8>)
 80070d2:	400a      	ands	r2, r1
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80070d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070dc:	f383 8810 	msr	PRIMASK, r3
}
 80070e0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80070e2:	f3ef 8310 	mrs	r3, PRIMASK
 80070e6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80070e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070ea:	647b      	str	r3, [r7, #68]	; 0x44
 80070ec:	2301      	movs	r3, #1
 80070ee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80070f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070f2:	f383 8810 	msr	PRIMASK, r3
}
 80070f6:	46c0      	nop			; (mov r8, r8)
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	681b      	ldr	r3, [r3, #0]
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	2101      	movs	r1, #1
 8007104:	438a      	bics	r2, r1
 8007106:	609a      	str	r2, [r3, #8]
 8007108:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800710a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800710c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800710e:	f383 8810 	msr	PRIMASK, r3
}
 8007112:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	228c      	movs	r2, #140	; 0x8c
 8007118:	2120      	movs	r1, #32
 800711a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	2200      	movs	r2, #0
 8007120:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	2200      	movs	r2, #0
 8007126:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a34      	ldr	r2, [pc, #208]	; (8007200 <UART_RxISR_8BIT+0x1bc>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01f      	beq.n	8007172 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	685a      	ldr	r2, [r3, #4]
 8007138:	2380      	movs	r3, #128	; 0x80
 800713a:	041b      	lsls	r3, r3, #16
 800713c:	4013      	ands	r3, r2
 800713e:	d018      	beq.n	8007172 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007140:	f3ef 8310 	mrs	r3, PRIMASK
 8007144:	61bb      	str	r3, [r7, #24]
  return(result);
 8007146:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007148:	643b      	str	r3, [r7, #64]	; 0x40
 800714a:	2301      	movs	r3, #1
 800714c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800714e:	69fb      	ldr	r3, [r7, #28]
 8007150:	f383 8810 	msr	PRIMASK, r3
}
 8007154:	46c0      	nop			; (mov r8, r8)
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4928      	ldr	r1, [pc, #160]	; (8007204 <UART_RxISR_8BIT+0x1c0>)
 8007162:	400a      	ands	r2, r1
 8007164:	601a      	str	r2, [r3, #0]
 8007166:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007168:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800716a:	6a3b      	ldr	r3, [r7, #32]
 800716c:	f383 8810 	msr	PRIMASK, r3
}
 8007170:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007176:	2b01      	cmp	r3, #1
 8007178:	d12f      	bne.n	80071da <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2200      	movs	r2, #0
 800717e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007180:	f3ef 8310 	mrs	r3, PRIMASK
 8007184:	60fb      	str	r3, [r7, #12]
  return(result);
 8007186:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007188:	63fb      	str	r3, [r7, #60]	; 0x3c
 800718a:	2301      	movs	r3, #1
 800718c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	f383 8810 	msr	PRIMASK, r3
}
 8007194:	46c0      	nop			; (mov r8, r8)
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	2110      	movs	r1, #16
 80071a2:	438a      	bics	r2, r1
 80071a4:	601a      	str	r2, [r3, #0]
 80071a6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071a8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80071aa:	697b      	ldr	r3, [r7, #20]
 80071ac:	f383 8810 	msr	PRIMASK, r3
}
 80071b0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	2210      	movs	r2, #16
 80071ba:	4013      	ands	r3, r2
 80071bc:	2b10      	cmp	r3, #16
 80071be:	d103      	bne.n	80071c8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	2210      	movs	r2, #16
 80071c6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	225c      	movs	r2, #92	; 0x5c
 80071cc:	5a9a      	ldrh	r2, [r3, r2]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	0011      	movs	r1, r2
 80071d2:	0018      	movs	r0, r3
 80071d4:	f7ff f8d0 	bl	8006378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80071d8:	e00c      	b.n	80071f4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	0018      	movs	r0, r3
 80071de:	f7ff f8bb 	bl	8006358 <HAL_UART_RxCpltCallback>
}
 80071e2:	e007      	b.n	80071f4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	699a      	ldr	r2, [r3, #24]
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	681b      	ldr	r3, [r3, #0]
 80071ee:	2108      	movs	r1, #8
 80071f0:	430a      	orrs	r2, r1
 80071f2:	619a      	str	r2, [r3, #24]
}
 80071f4:	46c0      	nop			; (mov r8, r8)
 80071f6:	46bd      	mov	sp, r7
 80071f8:	b014      	add	sp, #80	; 0x50
 80071fa:	bd80      	pop	{r7, pc}
 80071fc:	fffffedf 	.word	0xfffffedf
 8007200:	40008000 	.word	0x40008000
 8007204:	fbffffff 	.word	0xfbffffff

08007208 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b094      	sub	sp, #80	; 0x50
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007210:	204e      	movs	r0, #78	; 0x4e
 8007212:	183b      	adds	r3, r7, r0
 8007214:	687a      	ldr	r2, [r7, #4]
 8007216:	2160      	movs	r1, #96	; 0x60
 8007218:	5a52      	ldrh	r2, [r2, r1]
 800721a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	228c      	movs	r2, #140	; 0x8c
 8007220:	589b      	ldr	r3, [r3, r2]
 8007222:	2b22      	cmp	r3, #34	; 0x22
 8007224:	d000      	beq.n	8007228 <UART_RxISR_16BIT+0x20>
 8007226:	e0bf      	b.n	80073a8 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800722e:	214c      	movs	r1, #76	; 0x4c
 8007230:	187b      	adds	r3, r7, r1
 8007232:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007238:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800723a:	187b      	adds	r3, r7, r1
 800723c:	183a      	adds	r2, r7, r0
 800723e:	881b      	ldrh	r3, [r3, #0]
 8007240:	8812      	ldrh	r2, [r2, #0]
 8007242:	4013      	ands	r3, r2
 8007244:	b29a      	uxth	r2, r3
 8007246:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007248:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800724e:	1c9a      	adds	r2, r3, #2
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	225e      	movs	r2, #94	; 0x5e
 8007258:	5a9b      	ldrh	r3, [r3, r2]
 800725a:	b29b      	uxth	r3, r3
 800725c:	3b01      	subs	r3, #1
 800725e:	b299      	uxth	r1, r3
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	225e      	movs	r2, #94	; 0x5e
 8007264:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	225e      	movs	r2, #94	; 0x5e
 800726a:	5a9b      	ldrh	r3, [r3, r2]
 800726c:	b29b      	uxth	r3, r3
 800726e:	2b00      	cmp	r3, #0
 8007270:	d000      	beq.n	8007274 <UART_RxISR_16BIT+0x6c>
 8007272:	e0a1      	b.n	80073b8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007274:	f3ef 8310 	mrs	r3, PRIMASK
 8007278:	623b      	str	r3, [r7, #32]
  return(result);
 800727a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800727c:	647b      	str	r3, [r7, #68]	; 0x44
 800727e:	2301      	movs	r3, #1
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007284:	f383 8810 	msr	PRIMASK, r3
}
 8007288:	46c0      	nop			; (mov r8, r8)
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681a      	ldr	r2, [r3, #0]
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	494a      	ldr	r1, [pc, #296]	; (80073c0 <UART_RxISR_16BIT+0x1b8>)
 8007296:	400a      	ands	r2, r1
 8007298:	601a      	str	r2, [r3, #0]
 800729a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800729c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800729e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072a0:	f383 8810 	msr	PRIMASK, r3
}
 80072a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80072a6:	f3ef 8310 	mrs	r3, PRIMASK
 80072aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80072ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80072ae:	643b      	str	r3, [r7, #64]	; 0x40
 80072b0:	2301      	movs	r3, #1
 80072b2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80072b6:	f383 8810 	msr	PRIMASK, r3
}
 80072ba:	46c0      	nop			; (mov r8, r8)
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	689a      	ldr	r2, [r3, #8]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	2101      	movs	r1, #1
 80072c8:	438a      	bics	r2, r1
 80072ca:	609a      	str	r2, [r3, #8]
 80072cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80072ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80072d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072d2:	f383 8810 	msr	PRIMASK, r3
}
 80072d6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	228c      	movs	r2, #140	; 0x8c
 80072dc:	2120      	movs	r1, #32
 80072de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2200      	movs	r2, #0
 80072e4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	2200      	movs	r2, #0
 80072ea:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	4a34      	ldr	r2, [pc, #208]	; (80073c4 <UART_RxISR_16BIT+0x1bc>)
 80072f2:	4293      	cmp	r3, r2
 80072f4:	d01f      	beq.n	8007336 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	685a      	ldr	r2, [r3, #4]
 80072fc:	2380      	movs	r3, #128	; 0x80
 80072fe:	041b      	lsls	r3, r3, #16
 8007300:	4013      	ands	r3, r2
 8007302:	d018      	beq.n	8007336 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007304:	f3ef 8310 	mrs	r3, PRIMASK
 8007308:	617b      	str	r3, [r7, #20]
  return(result);
 800730a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800730c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800730e:	2301      	movs	r3, #1
 8007310:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007312:	69bb      	ldr	r3, [r7, #24]
 8007314:	f383 8810 	msr	PRIMASK, r3
}
 8007318:	46c0      	nop			; (mov r8, r8)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681a      	ldr	r2, [r3, #0]
 8007320:	687b      	ldr	r3, [r7, #4]
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4928      	ldr	r1, [pc, #160]	; (80073c8 <UART_RxISR_16BIT+0x1c0>)
 8007326:	400a      	ands	r2, r1
 8007328:	601a      	str	r2, [r3, #0]
 800732a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800732c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800732e:	69fb      	ldr	r3, [r7, #28]
 8007330:	f383 8810 	msr	PRIMASK, r3
}
 8007334:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800733a:	2b01      	cmp	r3, #1
 800733c:	d12f      	bne.n	800739e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	2200      	movs	r2, #0
 8007342:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007344:	f3ef 8310 	mrs	r3, PRIMASK
 8007348:	60bb      	str	r3, [r7, #8]
  return(result);
 800734a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800734c:	63bb      	str	r3, [r7, #56]	; 0x38
 800734e:	2301      	movs	r3, #1
 8007350:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007352:	68fb      	ldr	r3, [r7, #12]
 8007354:	f383 8810 	msr	PRIMASK, r3
}
 8007358:	46c0      	nop			; (mov r8, r8)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	681a      	ldr	r2, [r3, #0]
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	2110      	movs	r1, #16
 8007366:	438a      	bics	r2, r1
 8007368:	601a      	str	r2, [r3, #0]
 800736a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800736c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	f383 8810 	msr	PRIMASK, r3
}
 8007374:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	681b      	ldr	r3, [r3, #0]
 800737a:	69db      	ldr	r3, [r3, #28]
 800737c:	2210      	movs	r2, #16
 800737e:	4013      	ands	r3, r2
 8007380:	2b10      	cmp	r3, #16
 8007382:	d103      	bne.n	800738c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2210      	movs	r2, #16
 800738a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	225c      	movs	r2, #92	; 0x5c
 8007390:	5a9a      	ldrh	r2, [r3, r2]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	0011      	movs	r1, r2
 8007396:	0018      	movs	r0, r3
 8007398:	f7fe ffee 	bl	8006378 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800739c:	e00c      	b.n	80073b8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	0018      	movs	r0, r3
 80073a2:	f7fe ffd9 	bl	8006358 <HAL_UART_RxCpltCallback>
}
 80073a6:	e007      	b.n	80073b8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	699a      	ldr	r2, [r3, #24]
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	2108      	movs	r1, #8
 80073b4:	430a      	orrs	r2, r1
 80073b6:	619a      	str	r2, [r3, #24]
}
 80073b8:	46c0      	nop			; (mov r8, r8)
 80073ba:	46bd      	mov	sp, r7
 80073bc:	b014      	add	sp, #80	; 0x50
 80073be:	bd80      	pop	{r7, pc}
 80073c0:	fffffedf 	.word	0xfffffedf
 80073c4:	40008000 	.word	0x40008000
 80073c8:	fbffffff 	.word	0xfbffffff

080073cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80073cc:	b580      	push	{r7, lr}
 80073ce:	b0a0      	sub	sp, #128	; 0x80
 80073d0:	af00      	add	r7, sp, #0
 80073d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80073d4:	237a      	movs	r3, #122	; 0x7a
 80073d6:	18fb      	adds	r3, r7, r3
 80073d8:	687a      	ldr	r2, [r7, #4]
 80073da:	2160      	movs	r1, #96	; 0x60
 80073dc:	5a52      	ldrh	r2, [r2, r1]
 80073de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	69db      	ldr	r3, [r3, #28]
 80073e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	689b      	ldr	r3, [r3, #8]
 80073f6:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	228c      	movs	r2, #140	; 0x8c
 80073fc:	589b      	ldr	r3, [r3, r2]
 80073fe:	2b22      	cmp	r3, #34	; 0x22
 8007400:	d000      	beq.n	8007404 <UART_RxISR_8BIT_FIFOEN+0x38>
 8007402:	e16a      	b.n	80076da <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007404:	236e      	movs	r3, #110	; 0x6e
 8007406:	18fb      	adds	r3, r7, r3
 8007408:	687a      	ldr	r2, [r7, #4]
 800740a:	2168      	movs	r1, #104	; 0x68
 800740c:	5a52      	ldrh	r2, [r2, r1]
 800740e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007410:	e111      	b.n	8007636 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007418:	216c      	movs	r1, #108	; 0x6c
 800741a:	187b      	adds	r3, r7, r1
 800741c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800741e:	187b      	adds	r3, r7, r1
 8007420:	881b      	ldrh	r3, [r3, #0]
 8007422:	b2da      	uxtb	r2, r3
 8007424:	237a      	movs	r3, #122	; 0x7a
 8007426:	18fb      	adds	r3, r7, r3
 8007428:	881b      	ldrh	r3, [r3, #0]
 800742a:	b2d9      	uxtb	r1, r3
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007430:	400a      	ands	r2, r1
 8007432:	b2d2      	uxtb	r2, r2
 8007434:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800743a:	1c5a      	adds	r2, r3, #1
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	225e      	movs	r2, #94	; 0x5e
 8007444:	5a9b      	ldrh	r3, [r3, r2]
 8007446:	b29b      	uxth	r3, r3
 8007448:	3b01      	subs	r3, #1
 800744a:	b299      	uxth	r1, r3
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	225e      	movs	r2, #94	; 0x5e
 8007450:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	69db      	ldr	r3, [r3, #28]
 8007458:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800745a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800745c:	2207      	movs	r2, #7
 800745e:	4013      	ands	r3, r2
 8007460:	d049      	beq.n	80074f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007462:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007464:	2201      	movs	r2, #1
 8007466:	4013      	ands	r3, r2
 8007468:	d010      	beq.n	800748c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800746a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800746c:	2380      	movs	r3, #128	; 0x80
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	4013      	ands	r3, r2
 8007472:	d00b      	beq.n	800748c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	2201      	movs	r2, #1
 800747a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	2290      	movs	r2, #144	; 0x90
 8007480:	589b      	ldr	r3, [r3, r2]
 8007482:	2201      	movs	r2, #1
 8007484:	431a      	orrs	r2, r3
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	2190      	movs	r1, #144	; 0x90
 800748a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800748c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800748e:	2202      	movs	r2, #2
 8007490:	4013      	ands	r3, r2
 8007492:	d00f      	beq.n	80074b4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8007494:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007496:	2201      	movs	r2, #1
 8007498:	4013      	ands	r3, r2
 800749a:	d00b      	beq.n	80074b4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2202      	movs	r2, #2
 80074a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2290      	movs	r2, #144	; 0x90
 80074a8:	589b      	ldr	r3, [r3, r2]
 80074aa:	2204      	movs	r2, #4
 80074ac:	431a      	orrs	r2, r3
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	2190      	movs	r1, #144	; 0x90
 80074b2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80074b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80074b6:	2204      	movs	r2, #4
 80074b8:	4013      	ands	r3, r2
 80074ba:	d00f      	beq.n	80074dc <UART_RxISR_8BIT_FIFOEN+0x110>
 80074bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80074be:	2201      	movs	r2, #1
 80074c0:	4013      	ands	r3, r2
 80074c2:	d00b      	beq.n	80074dc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	2204      	movs	r2, #4
 80074ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2290      	movs	r2, #144	; 0x90
 80074d0:	589b      	ldr	r3, [r3, r2]
 80074d2:	2202      	movs	r2, #2
 80074d4:	431a      	orrs	r2, r3
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	2190      	movs	r1, #144	; 0x90
 80074da:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	2290      	movs	r2, #144	; 0x90
 80074e0:	589b      	ldr	r3, [r3, r2]
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d007      	beq.n	80074f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	0018      	movs	r0, r3
 80074ea:	f7fe ff3d 	bl	8006368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2290      	movs	r2, #144	; 0x90
 80074f2:	2100      	movs	r1, #0
 80074f4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	225e      	movs	r2, #94	; 0x5e
 80074fa:	5a9b      	ldrh	r3, [r3, r2]
 80074fc:	b29b      	uxth	r3, r3
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d000      	beq.n	8007504 <UART_RxISR_8BIT_FIFOEN+0x138>
 8007502:	e098      	b.n	8007636 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007504:	f3ef 8310 	mrs	r3, PRIMASK
 8007508:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800750a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800750c:	66bb      	str	r3, [r7, #104]	; 0x68
 800750e:	2301      	movs	r3, #1
 8007510:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007512:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007514:	f383 8810 	msr	PRIMASK, r3
}
 8007518:	46c0      	nop			; (mov r8, r8)
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	4973      	ldr	r1, [pc, #460]	; (80076f4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8007526:	400a      	ands	r2, r1
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800752c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800752e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007530:	f383 8810 	msr	PRIMASK, r3
}
 8007534:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007536:	f3ef 8310 	mrs	r3, PRIMASK
 800753a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800753c:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800753e:	667b      	str	r3, [r7, #100]	; 0x64
 8007540:	2301      	movs	r3, #1
 8007542:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007544:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007546:	f383 8810 	msr	PRIMASK, r3
}
 800754a:	46c0      	nop			; (mov r8, r8)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	689a      	ldr	r2, [r3, #8]
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	4968      	ldr	r1, [pc, #416]	; (80076f8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8007558:	400a      	ands	r2, r1
 800755a:	609a      	str	r2, [r3, #8]
 800755c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800755e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007560:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007562:	f383 8810 	msr	PRIMASK, r3
}
 8007566:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	228c      	movs	r2, #140	; 0x8c
 800756c:	2120      	movs	r1, #32
 800756e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	2200      	movs	r2, #0
 8007574:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	4a5e      	ldr	r2, [pc, #376]	; (80076fc <UART_RxISR_8BIT_FIFOEN+0x330>)
 8007582:	4293      	cmp	r3, r2
 8007584:	d01f      	beq.n	80075c6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	2380      	movs	r3, #128	; 0x80
 800758e:	041b      	lsls	r3, r3, #16
 8007590:	4013      	ands	r3, r2
 8007592:	d018      	beq.n	80075c6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007594:	f3ef 8310 	mrs	r3, PRIMASK
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800759a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800759c:	663b      	str	r3, [r7, #96]	; 0x60
 800759e:	2301      	movs	r3, #1
 80075a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075a4:	f383 8810 	msr	PRIMASK, r3
}
 80075a8:	46c0      	nop			; (mov r8, r8)
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	681a      	ldr	r2, [r3, #0]
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	4952      	ldr	r1, [pc, #328]	; (8007700 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80075b6:	400a      	ands	r2, r1
 80075b8:	601a      	str	r2, [r3, #0]
 80075ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80075bc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075c0:	f383 8810 	msr	PRIMASK, r3
}
 80075c4:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80075ca:	2b01      	cmp	r3, #1
 80075cc:	d12f      	bne.n	800762e <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	2200      	movs	r2, #0
 80075d2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80075d4:	f3ef 8310 	mrs	r3, PRIMASK
 80075d8:	623b      	str	r3, [r7, #32]
  return(result);
 80075da:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80075dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80075de:	2301      	movs	r3, #1
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075e4:	f383 8810 	msr	PRIMASK, r3
}
 80075e8:	46c0      	nop			; (mov r8, r8)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	681a      	ldr	r2, [r3, #0]
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2110      	movs	r1, #16
 80075f6:	438a      	bics	r2, r1
 80075f8:	601a      	str	r2, [r3, #0]
 80075fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80075fc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80075fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007600:	f383 8810 	msr	PRIMASK, r3
}
 8007604:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	69db      	ldr	r3, [r3, #28]
 800760c:	2210      	movs	r2, #16
 800760e:	4013      	ands	r3, r2
 8007610:	2b10      	cmp	r3, #16
 8007612:	d103      	bne.n	800761c <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	2210      	movs	r2, #16
 800761a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	225c      	movs	r2, #92	; 0x5c
 8007620:	5a9a      	ldrh	r2, [r3, r2]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	0011      	movs	r1, r2
 8007626:	0018      	movs	r0, r3
 8007628:	f7fe fea6 	bl	8006378 <HAL_UARTEx_RxEventCallback>
 800762c:	e003      	b.n	8007636 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	0018      	movs	r0, r3
 8007632:	f7fe fe91 	bl	8006358 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007636:	236e      	movs	r3, #110	; 0x6e
 8007638:	18fb      	adds	r3, r7, r3
 800763a:	881b      	ldrh	r3, [r3, #0]
 800763c:	2b00      	cmp	r3, #0
 800763e:	d004      	beq.n	800764a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007640:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8007642:	2220      	movs	r2, #32
 8007644:	4013      	ands	r3, r2
 8007646:	d000      	beq.n	800764a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8007648:	e6e3      	b.n	8007412 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800764a:	205a      	movs	r0, #90	; 0x5a
 800764c:	183b      	adds	r3, r7, r0
 800764e:	687a      	ldr	r2, [r7, #4]
 8007650:	215e      	movs	r1, #94	; 0x5e
 8007652:	5a52      	ldrh	r2, [r2, r1]
 8007654:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007656:	0001      	movs	r1, r0
 8007658:	187b      	adds	r3, r7, r1
 800765a:	881b      	ldrh	r3, [r3, #0]
 800765c:	2b00      	cmp	r3, #0
 800765e:	d044      	beq.n	80076ea <UART_RxISR_8BIT_FIFOEN+0x31e>
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	2268      	movs	r2, #104	; 0x68
 8007664:	5a9b      	ldrh	r3, [r3, r2]
 8007666:	187a      	adds	r2, r7, r1
 8007668:	8812      	ldrh	r2, [r2, #0]
 800766a:	429a      	cmp	r2, r3
 800766c:	d23d      	bcs.n	80076ea <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800766e:	f3ef 8310 	mrs	r3, PRIMASK
 8007672:	60bb      	str	r3, [r7, #8]
  return(result);
 8007674:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007676:	657b      	str	r3, [r7, #84]	; 0x54
 8007678:	2301      	movs	r3, #1
 800767a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	f383 8810 	msr	PRIMASK, r3
}
 8007682:	46c0      	nop			; (mov r8, r8)
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	681b      	ldr	r3, [r3, #0]
 8007688:	689a      	ldr	r2, [r3, #8]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	491d      	ldr	r1, [pc, #116]	; (8007704 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8007690:	400a      	ands	r2, r1
 8007692:	609a      	str	r2, [r3, #8]
 8007694:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007696:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	f383 8810 	msr	PRIMASK, r3
}
 800769e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80076a0:	687b      	ldr	r3, [r7, #4]
 80076a2:	4a19      	ldr	r2, [pc, #100]	; (8007708 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80076a4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80076a6:	f3ef 8310 	mrs	r3, PRIMASK
 80076aa:	617b      	str	r3, [r7, #20]
  return(result);
 80076ac:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80076ae:	653b      	str	r3, [r7, #80]	; 0x50
 80076b0:	2301      	movs	r3, #1
 80076b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076b4:	69bb      	ldr	r3, [r7, #24]
 80076b6:	f383 8810 	msr	PRIMASK, r3
}
 80076ba:	46c0      	nop			; (mov r8, r8)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	681a      	ldr	r2, [r3, #0]
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	2120      	movs	r1, #32
 80076c8:	430a      	orrs	r2, r1
 80076ca:	601a      	str	r2, [r3, #0]
 80076cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80076d0:	69fb      	ldr	r3, [r7, #28]
 80076d2:	f383 8810 	msr	PRIMASK, r3
}
 80076d6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076d8:	e007      	b.n	80076ea <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2108      	movs	r1, #8
 80076e6:	430a      	orrs	r2, r1
 80076e8:	619a      	str	r2, [r3, #24]
}
 80076ea:	46c0      	nop			; (mov r8, r8)
 80076ec:	46bd      	mov	sp, r7
 80076ee:	b020      	add	sp, #128	; 0x80
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	46c0      	nop			; (mov r8, r8)
 80076f4:	fffffeff 	.word	0xfffffeff
 80076f8:	effffffe 	.word	0xeffffffe
 80076fc:	40008000 	.word	0x40008000
 8007700:	fbffffff 	.word	0xfbffffff
 8007704:	efffffff 	.word	0xefffffff
 8007708:	08007045 	.word	0x08007045

0800770c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b0a2      	sub	sp, #136	; 0x88
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007714:	2382      	movs	r3, #130	; 0x82
 8007716:	18fb      	adds	r3, r7, r3
 8007718:	687a      	ldr	r2, [r7, #4]
 800771a:	2160      	movs	r1, #96	; 0x60
 800771c:	5a52      	ldrh	r2, [r2, r1]
 800771e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	69db      	ldr	r3, [r3, #28]
 8007726:	2284      	movs	r2, #132	; 0x84
 8007728:	18ba      	adds	r2, r7, r2
 800772a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	689b      	ldr	r3, [r3, #8]
 800773a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	228c      	movs	r2, #140	; 0x8c
 8007740:	589b      	ldr	r3, [r3, r2]
 8007742:	2b22      	cmp	r3, #34	; 0x22
 8007744:	d000      	beq.n	8007748 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8007746:	e174      	b.n	8007a32 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007748:	2376      	movs	r3, #118	; 0x76
 800774a:	18fb      	adds	r3, r7, r3
 800774c:	687a      	ldr	r2, [r7, #4]
 800774e:	2168      	movs	r1, #104	; 0x68
 8007750:	5a52      	ldrh	r2, [r2, r1]
 8007752:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007754:	e119      	b.n	800798a <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800775c:	2174      	movs	r1, #116	; 0x74
 800775e:	187b      	adds	r3, r7, r1
 8007760:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007766:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8007768:	187b      	adds	r3, r7, r1
 800776a:	2282      	movs	r2, #130	; 0x82
 800776c:	18ba      	adds	r2, r7, r2
 800776e:	881b      	ldrh	r3, [r3, #0]
 8007770:	8812      	ldrh	r2, [r2, #0]
 8007772:	4013      	ands	r3, r2
 8007774:	b29a      	uxth	r2, r3
 8007776:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007778:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777e:	1c9a      	adds	r2, r3, #2
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	225e      	movs	r2, #94	; 0x5e
 8007788:	5a9b      	ldrh	r3, [r3, r2]
 800778a:	b29b      	uxth	r3, r3
 800778c:	3b01      	subs	r3, #1
 800778e:	b299      	uxth	r1, r3
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	225e      	movs	r2, #94	; 0x5e
 8007794:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	69db      	ldr	r3, [r3, #28]
 800779c:	2184      	movs	r1, #132	; 0x84
 800779e:	187a      	adds	r2, r7, r1
 80077a0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80077a2:	187b      	adds	r3, r7, r1
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	2207      	movs	r2, #7
 80077a8:	4013      	ands	r3, r2
 80077aa:	d04e      	beq.n	800784a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80077ac:	187b      	adds	r3, r7, r1
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	2201      	movs	r2, #1
 80077b2:	4013      	ands	r3, r2
 80077b4:	d010      	beq.n	80077d8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80077b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80077b8:	2380      	movs	r3, #128	; 0x80
 80077ba:	005b      	lsls	r3, r3, #1
 80077bc:	4013      	ands	r3, r2
 80077be:	d00b      	beq.n	80077d8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	2201      	movs	r2, #1
 80077c6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	2290      	movs	r2, #144	; 0x90
 80077cc:	589b      	ldr	r3, [r3, r2]
 80077ce:	2201      	movs	r2, #1
 80077d0:	431a      	orrs	r2, r3
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	2190      	movs	r1, #144	; 0x90
 80077d6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077d8:	2384      	movs	r3, #132	; 0x84
 80077da:	18fb      	adds	r3, r7, r3
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2202      	movs	r2, #2
 80077e0:	4013      	ands	r3, r2
 80077e2:	d00f      	beq.n	8007804 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80077e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80077e6:	2201      	movs	r2, #1
 80077e8:	4013      	ands	r3, r2
 80077ea:	d00b      	beq.n	8007804 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	2202      	movs	r2, #2
 80077f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	2290      	movs	r2, #144	; 0x90
 80077f8:	589b      	ldr	r3, [r3, r2]
 80077fa:	2204      	movs	r2, #4
 80077fc:	431a      	orrs	r2, r3
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	2190      	movs	r1, #144	; 0x90
 8007802:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007804:	2384      	movs	r3, #132	; 0x84
 8007806:	18fb      	adds	r3, r7, r3
 8007808:	681b      	ldr	r3, [r3, #0]
 800780a:	2204      	movs	r2, #4
 800780c:	4013      	ands	r3, r2
 800780e:	d00f      	beq.n	8007830 <UART_RxISR_16BIT_FIFOEN+0x124>
 8007810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007812:	2201      	movs	r2, #1
 8007814:	4013      	ands	r3, r2
 8007816:	d00b      	beq.n	8007830 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	681b      	ldr	r3, [r3, #0]
 800781c:	2204      	movs	r2, #4
 800781e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	2290      	movs	r2, #144	; 0x90
 8007824:	589b      	ldr	r3, [r3, r2]
 8007826:	2202      	movs	r2, #2
 8007828:	431a      	orrs	r2, r3
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	2190      	movs	r1, #144	; 0x90
 800782e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	2290      	movs	r2, #144	; 0x90
 8007834:	589b      	ldr	r3, [r3, r2]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d007      	beq.n	800784a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	0018      	movs	r0, r3
 800783e:	f7fe fd93 	bl	8006368 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2290      	movs	r2, #144	; 0x90
 8007846:	2100      	movs	r1, #0
 8007848:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	225e      	movs	r2, #94	; 0x5e
 800784e:	5a9b      	ldrh	r3, [r3, r2]
 8007850:	b29b      	uxth	r3, r3
 8007852:	2b00      	cmp	r3, #0
 8007854:	d000      	beq.n	8007858 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8007856:	e098      	b.n	800798a <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007858:	f3ef 8310 	mrs	r3, PRIMASK
 800785c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800785e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007860:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007862:	2301      	movs	r3, #1
 8007864:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007866:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007868:	f383 8810 	msr	PRIMASK, r3
}
 800786c:	46c0      	nop			; (mov r8, r8)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	681a      	ldr	r2, [r3, #0]
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4974      	ldr	r1, [pc, #464]	; (8007a4c <UART_RxISR_16BIT_FIFOEN+0x340>)
 800787a:	400a      	ands	r2, r1
 800787c:	601a      	str	r2, [r3, #0]
 800787e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007880:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007882:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007884:	f383 8810 	msr	PRIMASK, r3
}
 8007888:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800788a:	f3ef 8310 	mrs	r3, PRIMASK
 800788e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007890:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007892:	66bb      	str	r3, [r7, #104]	; 0x68
 8007894:	2301      	movs	r3, #1
 8007896:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800789a:	f383 8810 	msr	PRIMASK, r3
}
 800789e:	46c0      	nop			; (mov r8, r8)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	689a      	ldr	r2, [r3, #8]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	4969      	ldr	r1, [pc, #420]	; (8007a50 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80078ac:	400a      	ands	r2, r1
 80078ae:	609a      	str	r2, [r3, #8]
 80078b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80078b2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80078b6:	f383 8810 	msr	PRIMASK, r3
}
 80078ba:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	228c      	movs	r2, #140	; 0x8c
 80078c0:	2120      	movs	r1, #32
 80078c2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2200      	movs	r2, #0
 80078c8:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2200      	movs	r2, #0
 80078ce:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	4a5f      	ldr	r2, [pc, #380]	; (8007a54 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80078d6:	4293      	cmp	r3, r2
 80078d8:	d01f      	beq.n	800791a <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	685a      	ldr	r2, [r3, #4]
 80078e0:	2380      	movs	r3, #128	; 0x80
 80078e2:	041b      	lsls	r3, r3, #16
 80078e4:	4013      	ands	r3, r2
 80078e6:	d018      	beq.n	800791a <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078e8:	f3ef 8310 	mrs	r3, PRIMASK
 80078ec:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80078ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078f0:	667b      	str	r3, [r7, #100]	; 0x64
 80078f2:	2301      	movs	r3, #1
 80078f4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80078f8:	f383 8810 	msr	PRIMASK, r3
}
 80078fc:	46c0      	nop			; (mov r8, r8)
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	681a      	ldr	r2, [r3, #0]
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	4953      	ldr	r1, [pc, #332]	; (8007a58 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800790a:	400a      	ands	r2, r1
 800790c:	601a      	str	r2, [r3, #0]
 800790e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007910:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007914:	f383 8810 	msr	PRIMASK, r3
}
 8007918:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800791e:	2b01      	cmp	r3, #1
 8007920:	d12f      	bne.n	8007982 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	2200      	movs	r2, #0
 8007926:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007928:	f3ef 8310 	mrs	r3, PRIMASK
 800792c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800792e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007930:	663b      	str	r3, [r7, #96]	; 0x60
 8007932:	2301      	movs	r3, #1
 8007934:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007936:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007938:	f383 8810 	msr	PRIMASK, r3
}
 800793c:	46c0      	nop			; (mov r8, r8)
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	2110      	movs	r1, #16
 800794a:	438a      	bics	r2, r1
 800794c:	601a      	str	r2, [r3, #0]
 800794e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007950:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007952:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007954:	f383 8810 	msr	PRIMASK, r3
}
 8007958:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69db      	ldr	r3, [r3, #28]
 8007960:	2210      	movs	r2, #16
 8007962:	4013      	ands	r3, r2
 8007964:	2b10      	cmp	r3, #16
 8007966:	d103      	bne.n	8007970 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	2210      	movs	r2, #16
 800796e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	225c      	movs	r2, #92	; 0x5c
 8007974:	5a9a      	ldrh	r2, [r3, r2]
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	0011      	movs	r1, r2
 800797a:	0018      	movs	r0, r3
 800797c:	f7fe fcfc 	bl	8006378 <HAL_UARTEx_RxEventCallback>
 8007980:	e003      	b.n	800798a <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	0018      	movs	r0, r3
 8007986:	f7fe fce7 	bl	8006358 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800798a:	2376      	movs	r3, #118	; 0x76
 800798c:	18fb      	adds	r3, r7, r3
 800798e:	881b      	ldrh	r3, [r3, #0]
 8007990:	2b00      	cmp	r3, #0
 8007992:	d006      	beq.n	80079a2 <UART_RxISR_16BIT_FIFOEN+0x296>
 8007994:	2384      	movs	r3, #132	; 0x84
 8007996:	18fb      	adds	r3, r7, r3
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	2220      	movs	r2, #32
 800799c:	4013      	ands	r3, r2
 800799e:	d000      	beq.n	80079a2 <UART_RxISR_16BIT_FIFOEN+0x296>
 80079a0:	e6d9      	b.n	8007756 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079a2:	205e      	movs	r0, #94	; 0x5e
 80079a4:	183b      	adds	r3, r7, r0
 80079a6:	687a      	ldr	r2, [r7, #4]
 80079a8:	215e      	movs	r1, #94	; 0x5e
 80079aa:	5a52      	ldrh	r2, [r2, r1]
 80079ac:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079ae:	0001      	movs	r1, r0
 80079b0:	187b      	adds	r3, r7, r1
 80079b2:	881b      	ldrh	r3, [r3, #0]
 80079b4:	2b00      	cmp	r3, #0
 80079b6:	d044      	beq.n	8007a42 <UART_RxISR_16BIT_FIFOEN+0x336>
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2268      	movs	r2, #104	; 0x68
 80079bc:	5a9b      	ldrh	r3, [r3, r2]
 80079be:	187a      	adds	r2, r7, r1
 80079c0:	8812      	ldrh	r2, [r2, #0]
 80079c2:	429a      	cmp	r2, r3
 80079c4:	d23d      	bcs.n	8007a42 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079c6:	f3ef 8310 	mrs	r3, PRIMASK
 80079ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80079cc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80079d0:	2301      	movs	r3, #1
 80079d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079d4:	693b      	ldr	r3, [r7, #16]
 80079d6:	f383 8810 	msr	PRIMASK, r3
}
 80079da:	46c0      	nop			; (mov r8, r8)
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	689a      	ldr	r2, [r3, #8]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	491d      	ldr	r1, [pc, #116]	; (8007a5c <UART_RxISR_16BIT_FIFOEN+0x350>)
 80079e8:	400a      	ands	r2, r1
 80079ea:	609a      	str	r2, [r3, #8]
 80079ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80079ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80079f0:	697b      	ldr	r3, [r7, #20]
 80079f2:	f383 8810 	msr	PRIMASK, r3
}
 80079f6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	4a19      	ldr	r2, [pc, #100]	; (8007a60 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80079fc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80079fe:	f3ef 8310 	mrs	r3, PRIMASK
 8007a02:	61bb      	str	r3, [r7, #24]
  return(result);
 8007a04:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a06:	657b      	str	r3, [r7, #84]	; 0x54
 8007a08:	2301      	movs	r3, #1
 8007a0a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	f383 8810 	msr	PRIMASK, r3
}
 8007a12:	46c0      	nop			; (mov r8, r8)
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	681a      	ldr	r2, [r3, #0]
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	2120      	movs	r1, #32
 8007a20:	430a      	orrs	r2, r1
 8007a22:	601a      	str	r2, [r3, #0]
 8007a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a26:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007a28:	6a3b      	ldr	r3, [r7, #32]
 8007a2a:	f383 8810 	msr	PRIMASK, r3
}
 8007a2e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a30:	e007      	b.n	8007a42 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	699a      	ldr	r2, [r3, #24]
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	2108      	movs	r1, #8
 8007a3e:	430a      	orrs	r2, r1
 8007a40:	619a      	str	r2, [r3, #24]
}
 8007a42:	46c0      	nop			; (mov r8, r8)
 8007a44:	46bd      	mov	sp, r7
 8007a46:	b022      	add	sp, #136	; 0x88
 8007a48:	bd80      	pop	{r7, pc}
 8007a4a:	46c0      	nop			; (mov r8, r8)
 8007a4c:	fffffeff 	.word	0xfffffeff
 8007a50:	effffffe 	.word	0xeffffffe
 8007a54:	40008000 	.word	0x40008000
 8007a58:	fbffffff 	.word	0xfbffffff
 8007a5c:	efffffff 	.word	0xefffffff
 8007a60:	08007209 	.word	0x08007209

08007a64 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b082      	sub	sp, #8
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007a6c:	46c0      	nop			; (mov r8, r8)
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	b002      	add	sp, #8
 8007a72:	bd80      	pop	{r7, pc}

08007a74 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007a74:	b580      	push	{r7, lr}
 8007a76:	b082      	sub	sp, #8
 8007a78:	af00      	add	r7, sp, #0
 8007a7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007a7c:	46c0      	nop			; (mov r8, r8)
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	b002      	add	sp, #8
 8007a82:	bd80      	pop	{r7, pc}

08007a84 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b082      	sub	sp, #8
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007a8c:	46c0      	nop			; (mov r8, r8)
 8007a8e:	46bd      	mov	sp, r7
 8007a90:	b002      	add	sp, #8
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	2284      	movs	r2, #132	; 0x84
 8007aa0:	5c9b      	ldrb	r3, [r3, r2]
 8007aa2:	2b01      	cmp	r3, #1
 8007aa4:	d101      	bne.n	8007aaa <HAL_UARTEx_DisableFifoMode+0x16>
 8007aa6:	2302      	movs	r3, #2
 8007aa8:	e027      	b.n	8007afa <HAL_UARTEx_DisableFifoMode+0x66>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2284      	movs	r2, #132	; 0x84
 8007aae:	2101      	movs	r1, #1
 8007ab0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2288      	movs	r2, #136	; 0x88
 8007ab6:	2124      	movs	r1, #36	; 0x24
 8007ab8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	681a      	ldr	r2, [r3, #0]
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	2101      	movs	r1, #1
 8007ace:	438a      	bics	r2, r1
 8007ad0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	4a0b      	ldr	r2, [pc, #44]	; (8007b04 <HAL_UARTEx_DisableFifoMode+0x70>)
 8007ad6:	4013      	ands	r3, r2
 8007ad8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2200      	movs	r2, #0
 8007ade:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68fa      	ldr	r2, [r7, #12]
 8007ae6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2288      	movs	r2, #136	; 0x88
 8007aec:	2120      	movs	r1, #32
 8007aee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2284      	movs	r2, #132	; 0x84
 8007af4:	2100      	movs	r1, #0
 8007af6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007af8:	2300      	movs	r3, #0
}
 8007afa:	0018      	movs	r0, r3
 8007afc:	46bd      	mov	sp, r7
 8007afe:	b004      	add	sp, #16
 8007b00:	bd80      	pop	{r7, pc}
 8007b02:	46c0      	nop			; (mov r8, r8)
 8007b04:	dfffffff 	.word	0xdfffffff

08007b08 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b08:	b580      	push	{r7, lr}
 8007b0a:	b084      	sub	sp, #16
 8007b0c:	af00      	add	r7, sp, #0
 8007b0e:	6078      	str	r0, [r7, #4]
 8007b10:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	2284      	movs	r2, #132	; 0x84
 8007b16:	5c9b      	ldrb	r3, [r3, r2]
 8007b18:	2b01      	cmp	r3, #1
 8007b1a:	d101      	bne.n	8007b20 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b1c:	2302      	movs	r3, #2
 8007b1e:	e02e      	b.n	8007b7e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2284      	movs	r2, #132	; 0x84
 8007b24:	2101      	movs	r1, #1
 8007b26:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2288      	movs	r2, #136	; 0x88
 8007b2c:	2124      	movs	r1, #36	; 0x24
 8007b2e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	681a      	ldr	r2, [r3, #0]
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2101      	movs	r1, #1
 8007b44:	438a      	bics	r2, r1
 8007b46:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	00db      	lsls	r3, r3, #3
 8007b50:	08d9      	lsrs	r1, r3, #3
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	683a      	ldr	r2, [r7, #0]
 8007b58:	430a      	orrs	r2, r1
 8007b5a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	0018      	movs	r0, r3
 8007b60:	f000 f8b8 	bl	8007cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	68fa      	ldr	r2, [r7, #12]
 8007b6a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2288      	movs	r2, #136	; 0x88
 8007b70:	2120      	movs	r1, #32
 8007b72:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2284      	movs	r2, #132	; 0x84
 8007b78:	2100      	movs	r1, #0
 8007b7a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007b7c:	2300      	movs	r3, #0
}
 8007b7e:	0018      	movs	r0, r3
 8007b80:	46bd      	mov	sp, r7
 8007b82:	b004      	add	sp, #16
 8007b84:	bd80      	pop	{r7, pc}
	...

08007b88 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b88:	b580      	push	{r7, lr}
 8007b8a:	b084      	sub	sp, #16
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2284      	movs	r2, #132	; 0x84
 8007b96:	5c9b      	ldrb	r3, [r3, r2]
 8007b98:	2b01      	cmp	r3, #1
 8007b9a:	d101      	bne.n	8007ba0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007b9c:	2302      	movs	r3, #2
 8007b9e:	e02f      	b.n	8007c00 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	2284      	movs	r2, #132	; 0x84
 8007ba4:	2101      	movs	r1, #1
 8007ba6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2288      	movs	r2, #136	; 0x88
 8007bac:	2124      	movs	r1, #36	; 0x24
 8007bae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	681a      	ldr	r2, [r3, #0]
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	2101      	movs	r1, #1
 8007bc4:	438a      	bics	r2, r1
 8007bc6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	689b      	ldr	r3, [r3, #8]
 8007bce:	4a0e      	ldr	r2, [pc, #56]	; (8007c08 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	0019      	movs	r1, r3
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	683a      	ldr	r2, [r7, #0]
 8007bda:	430a      	orrs	r2, r1
 8007bdc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	0018      	movs	r0, r3
 8007be2:	f000 f877 	bl	8007cd4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68fa      	ldr	r2, [r7, #12]
 8007bec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	2288      	movs	r2, #136	; 0x88
 8007bf2:	2120      	movs	r1, #32
 8007bf4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	2284      	movs	r2, #132	; 0x84
 8007bfa:	2100      	movs	r1, #0
 8007bfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8007bfe:	2300      	movs	r3, #0
}
 8007c00:	0018      	movs	r0, r3
 8007c02:	46bd      	mov	sp, r7
 8007c04:	b004      	add	sp, #16
 8007c06:	bd80      	pop	{r7, pc}
 8007c08:	f1ffffff 	.word	0xf1ffffff

08007c0c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08a      	sub	sp, #40	; 0x28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	1dbb      	adds	r3, r7, #6
 8007c18:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c1a:	2327      	movs	r3, #39	; 0x27
 8007c1c:	18fb      	adds	r3, r7, r3
 8007c1e:	2200      	movs	r2, #0
 8007c20:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	228c      	movs	r2, #140	; 0x8c
 8007c26:	589b      	ldr	r3, [r3, r2]
 8007c28:	2b20      	cmp	r3, #32
 8007c2a:	d14e      	bne.n	8007cca <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8007c2c:	68bb      	ldr	r3, [r7, #8]
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d003      	beq.n	8007c3a <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 8007c32:	1dbb      	adds	r3, r7, #6
 8007c34:	881b      	ldrh	r3, [r3, #0]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d101      	bne.n	8007c3e <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 8007c3a:	2301      	movs	r3, #1
 8007c3c:	e046      	b.n	8007ccc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c3e:	68fb      	ldr	r3, [r7, #12]
 8007c40:	689a      	ldr	r2, [r3, #8]
 8007c42:	2380      	movs	r3, #128	; 0x80
 8007c44:	015b      	lsls	r3, r3, #5
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d109      	bne.n	8007c5e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 8007c4a:	68fb      	ldr	r3, [r7, #12]
 8007c4c:	691b      	ldr	r3, [r3, #16]
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d105      	bne.n	8007c5e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007c52:	68bb      	ldr	r3, [r7, #8]
 8007c54:	2201      	movs	r2, #1
 8007c56:	4013      	ands	r3, r2
 8007c58:	d001      	beq.n	8007c5e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 8007c5a:	2301      	movs	r3, #1
 8007c5c:	e036      	b.n	8007ccc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2201      	movs	r2, #1
 8007c62:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	2200      	movs	r2, #0
 8007c68:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8007c6a:	1dbb      	adds	r3, r7, #6
 8007c6c:	881a      	ldrh	r2, [r3, #0]
 8007c6e:	68b9      	ldr	r1, [r7, #8]
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	0018      	movs	r0, r3
 8007c74:	f7ff f818 	bl	8006ca8 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	d11c      	bne.n	8007cba <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c80:	68fb      	ldr	r3, [r7, #12]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2210      	movs	r2, #16
 8007c86:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c88:	f3ef 8310 	mrs	r3, PRIMASK
 8007c8c:	617b      	str	r3, [r7, #20]
  return(result);
 8007c8e:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c90:	623b      	str	r3, [r7, #32]
 8007c92:	2301      	movs	r3, #1
 8007c94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c96:	69bb      	ldr	r3, [r7, #24]
 8007c98:	f383 8810 	msr	PRIMASK, r3
}
 8007c9c:	46c0      	nop			; (mov r8, r8)
 8007c9e:	68fb      	ldr	r3, [r7, #12]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	681a      	ldr	r2, [r3, #0]
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	2110      	movs	r1, #16
 8007caa:	430a      	orrs	r2, r1
 8007cac:	601a      	str	r2, [r3, #0]
 8007cae:	6a3b      	ldr	r3, [r7, #32]
 8007cb0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cb2:	69fb      	ldr	r3, [r7, #28]
 8007cb4:	f383 8810 	msr	PRIMASK, r3
}
 8007cb8:	e003      	b.n	8007cc2 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8007cba:	2327      	movs	r3, #39	; 0x27
 8007cbc:	18fb      	adds	r3, r7, r3
 8007cbe:	2201      	movs	r2, #1
 8007cc0:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8007cc2:	2327      	movs	r3, #39	; 0x27
 8007cc4:	18fb      	adds	r3, r7, r3
 8007cc6:	781b      	ldrb	r3, [r3, #0]
 8007cc8:	e000      	b.n	8007ccc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8007cca:	2302      	movs	r3, #2
  }
}
 8007ccc:	0018      	movs	r0, r3
 8007cce:	46bd      	mov	sp, r7
 8007cd0:	b00a      	add	sp, #40	; 0x28
 8007cd2:	bd80      	pop	{r7, pc}

08007cd4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007cd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d108      	bne.n	8007cf6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	226a      	movs	r2, #106	; 0x6a
 8007ce8:	2101      	movs	r1, #1
 8007cea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	2268      	movs	r2, #104	; 0x68
 8007cf0:	2101      	movs	r1, #1
 8007cf2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007cf4:	e043      	b.n	8007d7e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007cf6:	260f      	movs	r6, #15
 8007cf8:	19bb      	adds	r3, r7, r6
 8007cfa:	2208      	movs	r2, #8
 8007cfc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007cfe:	200e      	movs	r0, #14
 8007d00:	183b      	adds	r3, r7, r0
 8007d02:	2208      	movs	r2, #8
 8007d04:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	689b      	ldr	r3, [r3, #8]
 8007d0c:	0e5b      	lsrs	r3, r3, #25
 8007d0e:	b2da      	uxtb	r2, r3
 8007d10:	240d      	movs	r4, #13
 8007d12:	193b      	adds	r3, r7, r4
 8007d14:	2107      	movs	r1, #7
 8007d16:	400a      	ands	r2, r1
 8007d18:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	689b      	ldr	r3, [r3, #8]
 8007d20:	0f5b      	lsrs	r3, r3, #29
 8007d22:	b2da      	uxtb	r2, r3
 8007d24:	250c      	movs	r5, #12
 8007d26:	197b      	adds	r3, r7, r5
 8007d28:	2107      	movs	r1, #7
 8007d2a:	400a      	ands	r2, r1
 8007d2c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d2e:	183b      	adds	r3, r7, r0
 8007d30:	781b      	ldrb	r3, [r3, #0]
 8007d32:	197a      	adds	r2, r7, r5
 8007d34:	7812      	ldrb	r2, [r2, #0]
 8007d36:	4914      	ldr	r1, [pc, #80]	; (8007d88 <UARTEx_SetNbDataToProcess+0xb4>)
 8007d38:	5c8a      	ldrb	r2, [r1, r2]
 8007d3a:	435a      	muls	r2, r3
 8007d3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8007d3e:	197b      	adds	r3, r7, r5
 8007d40:	781b      	ldrb	r3, [r3, #0]
 8007d42:	4a12      	ldr	r2, [pc, #72]	; (8007d8c <UARTEx_SetNbDataToProcess+0xb8>)
 8007d44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007d46:	0019      	movs	r1, r3
 8007d48:	f7f8 fa7a 	bl	8000240 <__divsi3>
 8007d4c:	0003      	movs	r3, r0
 8007d4e:	b299      	uxth	r1, r3
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	226a      	movs	r2, #106	; 0x6a
 8007d54:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d56:	19bb      	adds	r3, r7, r6
 8007d58:	781b      	ldrb	r3, [r3, #0]
 8007d5a:	193a      	adds	r2, r7, r4
 8007d5c:	7812      	ldrb	r2, [r2, #0]
 8007d5e:	490a      	ldr	r1, [pc, #40]	; (8007d88 <UARTEx_SetNbDataToProcess+0xb4>)
 8007d60:	5c8a      	ldrb	r2, [r1, r2]
 8007d62:	435a      	muls	r2, r3
 8007d64:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8007d66:	193b      	adds	r3, r7, r4
 8007d68:	781b      	ldrb	r3, [r3, #0]
 8007d6a:	4a08      	ldr	r2, [pc, #32]	; (8007d8c <UARTEx_SetNbDataToProcess+0xb8>)
 8007d6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007d6e:	0019      	movs	r1, r3
 8007d70:	f7f8 fa66 	bl	8000240 <__divsi3>
 8007d74:	0003      	movs	r3, r0
 8007d76:	b299      	uxth	r1, r3
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2268      	movs	r2, #104	; 0x68
 8007d7c:	5299      	strh	r1, [r3, r2]
}
 8007d7e:	46c0      	nop			; (mov r8, r8)
 8007d80:	46bd      	mov	sp, r7
 8007d82:	b005      	add	sp, #20
 8007d84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007d86:	46c0      	nop			; (mov r8, r8)
 8007d88:	08009f5c 	.word	0x08009f5c
 8007d8c:	08009f64 	.word	0x08009f64

08007d90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8007d90:	b580      	push	{r7, lr}
 8007d92:	b084      	sub	sp, #16
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	0002      	movs	r2, r0
 8007d98:	1dbb      	adds	r3, r7, #6
 8007d9a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8007da0:	1dbb      	adds	r3, r7, #6
 8007da2:	2200      	movs	r2, #0
 8007da4:	5e9b      	ldrsh	r3, [r3, r2]
 8007da6:	2b84      	cmp	r3, #132	; 0x84
 8007da8:	d006      	beq.n	8007db8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8007daa:	1dbb      	adds	r3, r7, #6
 8007dac:	2200      	movs	r2, #0
 8007dae:	5e9a      	ldrsh	r2, [r3, r2]
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	18d3      	adds	r3, r2, r3
 8007db4:	3303      	adds	r3, #3
 8007db6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8007db8:	68fb      	ldr	r3, [r7, #12]
}
 8007dba:	0018      	movs	r0, r3
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	b004      	add	sp, #16
 8007dc0:	bd80      	pop	{r7, pc}

08007dc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8007dc2:	b580      	push	{r7, lr}
 8007dc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8007dc6:	f000 fa3d 	bl	8008244 <vTaskStartScheduler>
  
  return osOK;
 8007dca:	2300      	movs	r3, #0
}
 8007dcc:	0018      	movs	r0, r3
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8007dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007dd4:	b087      	sub	sp, #28
 8007dd6:	af02      	add	r7, sp, #8
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	685c      	ldr	r4, [r3, #4]
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007de8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	2208      	movs	r2, #8
 8007dee:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8007df0:	0018      	movs	r0, r3
 8007df2:	f7ff ffcd 	bl	8007d90 <makeFreeRtosPriority>
 8007df6:	0001      	movs	r1, r0
 8007df8:	683a      	ldr	r2, [r7, #0]
 8007dfa:	230c      	movs	r3, #12
 8007dfc:	18fb      	adds	r3, r7, r3
 8007dfe:	9301      	str	r3, [sp, #4]
 8007e00:	9100      	str	r1, [sp, #0]
 8007e02:	0013      	movs	r3, r2
 8007e04:	0032      	movs	r2, r6
 8007e06:	0029      	movs	r1, r5
 8007e08:	0020      	movs	r0, r4
 8007e0a:	f000 f8c7 	bl	8007f9c <xTaskCreate>
 8007e0e:	0003      	movs	r3, r0
 8007e10:	2b01      	cmp	r3, #1
 8007e12:	d001      	beq.n	8007e18 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8007e14:	2300      	movs	r3, #0
 8007e16:	e000      	b.n	8007e1a <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8007e18:	68fb      	ldr	r3, [r7, #12]
}
 8007e1a:	0018      	movs	r0, r3
 8007e1c:	46bd      	mov	sp, r7
 8007e1e:	b005      	add	sp, #20
 8007e20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08007e22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8007e22:	b580      	push	{r7, lr}
 8007e24:	b084      	sub	sp, #16
 8007e26:	af00      	add	r7, sp, #0
 8007e28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8007e2e:	68fb      	ldr	r3, [r7, #12]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d001      	beq.n	8007e38 <osDelay+0x16>
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	e000      	b.n	8007e3a <osDelay+0x18>
 8007e38:	2301      	movs	r3, #1
 8007e3a:	0018      	movs	r0, r3
 8007e3c:	f000 f9dc 	bl	80081f8 <vTaskDelay>
  
  return osOK;
 8007e40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8007e42:	0018      	movs	r0, r3
 8007e44:	46bd      	mov	sp, r7
 8007e46:	b004      	add	sp, #16
 8007e48:	bd80      	pop	{r7, pc}

08007e4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8007e4a:	b580      	push	{r7, lr}
 8007e4c:	b082      	sub	sp, #8
 8007e4e:	af00      	add	r7, sp, #0
 8007e50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	3308      	adds	r3, #8
 8007e56:	001a      	movs	r2, r3
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2201      	movs	r2, #1
 8007e60:	4252      	negs	r2, r2
 8007e62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	3308      	adds	r3, #8
 8007e68:	001a      	movs	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	3308      	adds	r3, #8
 8007e72:	001a      	movs	r2, r3
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2200      	movs	r2, #0
 8007e7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8007e7e:	46c0      	nop			; (mov r8, r8)
 8007e80:	46bd      	mov	sp, r7
 8007e82:	b002      	add	sp, #8
 8007e84:	bd80      	pop	{r7, pc}

08007e86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8007e86:	b580      	push	{r7, lr}
 8007e88:	b082      	sub	sp, #8
 8007e8a:	af00      	add	r7, sp, #0
 8007e8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	2200      	movs	r2, #0
 8007e92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8007e94:	46c0      	nop			; (mov r8, r8)
 8007e96:	46bd      	mov	sp, r7
 8007e98:	b002      	add	sp, #8
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b084      	sub	sp, #16
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
 8007ea4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	685b      	ldr	r3, [r3, #4]
 8007eaa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8007eac:	683b      	ldr	r3, [r7, #0]
 8007eae:	68fa      	ldr	r2, [r7, #12]
 8007eb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	689a      	ldr	r2, [r3, #8]
 8007eb6:	683b      	ldr	r3, [r7, #0]
 8007eb8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	689b      	ldr	r3, [r3, #8]
 8007ebe:	683a      	ldr	r2, [r7, #0]
 8007ec0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8007ec2:	68fb      	ldr	r3, [r7, #12]
 8007ec4:	683a      	ldr	r2, [r7, #0]
 8007ec6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8007ec8:	683b      	ldr	r3, [r7, #0]
 8007eca:	687a      	ldr	r2, [r7, #4]
 8007ecc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	681b      	ldr	r3, [r3, #0]
 8007ed2:	1c5a      	adds	r2, r3, #1
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	601a      	str	r2, [r3, #0]
}
 8007ed8:	46c0      	nop			; (mov r8, r8)
 8007eda:	46bd      	mov	sp, r7
 8007edc:	b004      	add	sp, #16
 8007ede:	bd80      	pop	{r7, pc}

08007ee0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8007ee0:	b580      	push	{r7, lr}
 8007ee2:	b084      	sub	sp, #16
 8007ee4:	af00      	add	r7, sp, #0
 8007ee6:	6078      	str	r0, [r7, #4]
 8007ee8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	3301      	adds	r3, #1
 8007ef4:	d103      	bne.n	8007efe <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	60fb      	str	r3, [r7, #12]
 8007efc:	e00c      	b.n	8007f18 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	3308      	adds	r3, #8
 8007f02:	60fb      	str	r3, [r7, #12]
 8007f04:	e002      	b.n	8007f0c <vListInsert+0x2c>
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	685b      	ldr	r3, [r3, #4]
 8007f0a:	60fb      	str	r3, [r7, #12]
 8007f0c:	68fb      	ldr	r3, [r7, #12]
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	681b      	ldr	r3, [r3, #0]
 8007f12:	68ba      	ldr	r2, [r7, #8]
 8007f14:	429a      	cmp	r2, r3
 8007f16:	d2f6      	bcs.n	8007f06 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8007f18:	68fb      	ldr	r3, [r7, #12]
 8007f1a:	685a      	ldr	r2, [r3, #4]
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	685b      	ldr	r3, [r3, #4]
 8007f24:	683a      	ldr	r2, [r7, #0]
 8007f26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	68fa      	ldr	r2, [r7, #12]
 8007f2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8007f2e:	68fb      	ldr	r3, [r7, #12]
 8007f30:	683a      	ldr	r2, [r7, #0]
 8007f32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8007f34:	683b      	ldr	r3, [r7, #0]
 8007f36:	687a      	ldr	r2, [r7, #4]
 8007f38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	1c5a      	adds	r2, r3, #1
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	601a      	str	r2, [r3, #0]
}
 8007f44:	46c0      	nop			; (mov r8, r8)
 8007f46:	46bd      	mov	sp, r7
 8007f48:	b004      	add	sp, #16
 8007f4a:	bd80      	pop	{r7, pc}

08007f4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b084      	sub	sp, #16
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	691b      	ldr	r3, [r3, #16]
 8007f58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	685b      	ldr	r3, [r3, #4]
 8007f5e:	687a      	ldr	r2, [r7, #4]
 8007f60:	6892      	ldr	r2, [r2, #8]
 8007f62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	689b      	ldr	r3, [r3, #8]
 8007f68:	687a      	ldr	r2, [r7, #4]
 8007f6a:	6852      	ldr	r2, [r2, #4]
 8007f6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8007f6e:	68fb      	ldr	r3, [r7, #12]
 8007f70:	685b      	ldr	r3, [r3, #4]
 8007f72:	687a      	ldr	r2, [r7, #4]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d103      	bne.n	8007f80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	689a      	ldr	r2, [r3, #8]
 8007f7c:	68fb      	ldr	r3, [r7, #12]
 8007f7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	2200      	movs	r2, #0
 8007f84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	681b      	ldr	r3, [r3, #0]
 8007f8a:	1e5a      	subs	r2, r3, #1
 8007f8c:	68fb      	ldr	r3, [r7, #12]
 8007f8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	681b      	ldr	r3, [r3, #0]
}
 8007f94:	0018      	movs	r0, r3
 8007f96:	46bd      	mov	sp, r7
 8007f98:	b004      	add	sp, #16
 8007f9a:	bd80      	pop	{r7, pc}

08007f9c <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007f9c:	b590      	push	{r4, r7, lr}
 8007f9e:	b08d      	sub	sp, #52	; 0x34
 8007fa0:	af04      	add	r7, sp, #16
 8007fa2:	60f8      	str	r0, [r7, #12]
 8007fa4:	60b9      	str	r1, [r7, #8]
 8007fa6:	603b      	str	r3, [r7, #0]
 8007fa8:	1dbb      	adds	r3, r7, #6
 8007faa:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8007fac:	1dbb      	adds	r3, r7, #6
 8007fae:	881b      	ldrh	r3, [r3, #0]
 8007fb0:	009b      	lsls	r3, r3, #2
 8007fb2:	0018      	movs	r0, r3
 8007fb4:	f000 fe0c 	bl	8008bd0 <pvPortMalloc>
 8007fb8:	0003      	movs	r3, r0
 8007fba:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8007fbc:	697b      	ldr	r3, [r7, #20]
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d010      	beq.n	8007fe4 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007fc2:	2054      	movs	r0, #84	; 0x54
 8007fc4:	f000 fe04 	bl	8008bd0 <pvPortMalloc>
 8007fc8:	0003      	movs	r3, r0
 8007fca:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8007fcc:	69fb      	ldr	r3, [r7, #28]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007fd2:	69fb      	ldr	r3, [r7, #28]
 8007fd4:	697a      	ldr	r2, [r7, #20]
 8007fd6:	631a      	str	r2, [r3, #48]	; 0x30
 8007fd8:	e006      	b.n	8007fe8 <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8007fda:	697b      	ldr	r3, [r7, #20]
 8007fdc:	0018      	movs	r0, r3
 8007fde:	f000 fea3 	bl	8008d28 <vPortFree>
 8007fe2:	e001      	b.n	8007fe8 <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007fe8:	69fb      	ldr	r3, [r7, #28]
 8007fea:	2b00      	cmp	r3, #0
 8007fec:	d016      	beq.n	800801c <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007fee:	1dbb      	adds	r3, r7, #6
 8007ff0:	881a      	ldrh	r2, [r3, #0]
 8007ff2:	683c      	ldr	r4, [r7, #0]
 8007ff4:	68b9      	ldr	r1, [r7, #8]
 8007ff6:	68f8      	ldr	r0, [r7, #12]
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9303      	str	r3, [sp, #12]
 8007ffc:	69fb      	ldr	r3, [r7, #28]
 8007ffe:	9302      	str	r3, [sp, #8]
 8008000:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008002:	9301      	str	r3, [sp, #4]
 8008004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008006:	9300      	str	r3, [sp, #0]
 8008008:	0023      	movs	r3, r4
 800800a:	f000 f80f 	bl	800802c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800800e:	69fb      	ldr	r3, [r7, #28]
 8008010:	0018      	movs	r0, r3
 8008012:	f000 f88d 	bl	8008130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008016:	2301      	movs	r3, #1
 8008018:	61bb      	str	r3, [r7, #24]
 800801a:	e002      	b.n	8008022 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800801c:	2301      	movs	r3, #1
 800801e:	425b      	negs	r3, r3
 8008020:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008022:	69bb      	ldr	r3, [r7, #24]
	}
 8008024:	0018      	movs	r0, r3
 8008026:	46bd      	mov	sp, r7
 8008028:	b009      	add	sp, #36	; 0x24
 800802a:	bd90      	pop	{r4, r7, pc}

0800802c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800802c:	b580      	push	{r7, lr}
 800802e:	b086      	sub	sp, #24
 8008030:	af00      	add	r7, sp, #0
 8008032:	60f8      	str	r0, [r7, #12]
 8008034:	60b9      	str	r1, [r7, #8]
 8008036:	607a      	str	r2, [r7, #4]
 8008038:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800803a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800803c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	493a      	ldr	r1, [pc, #232]	; (800812c <prvInitialiseNewTask+0x100>)
 8008042:	468c      	mov	ip, r1
 8008044:	4463      	add	r3, ip
 8008046:	009b      	lsls	r3, r3, #2
 8008048:	18d3      	adds	r3, r2, r3
 800804a:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800804c:	693b      	ldr	r3, [r7, #16]
 800804e:	2207      	movs	r2, #7
 8008050:	4393      	bics	r3, r2
 8008052:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008054:	693b      	ldr	r3, [r7, #16]
 8008056:	2207      	movs	r2, #7
 8008058:	4013      	ands	r3, r2
 800805a:	d001      	beq.n	8008060 <prvInitialiseNewTask+0x34>
 800805c:	b672      	cpsid	i
 800805e:	e7fe      	b.n	800805e <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008060:	68bb      	ldr	r3, [r7, #8]
 8008062:	2b00      	cmp	r3, #0
 8008064:	d020      	beq.n	80080a8 <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008066:	2300      	movs	r3, #0
 8008068:	617b      	str	r3, [r7, #20]
 800806a:	e013      	b.n	8008094 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800806c:	68ba      	ldr	r2, [r7, #8]
 800806e:	697b      	ldr	r3, [r7, #20]
 8008070:	18d3      	adds	r3, r2, r3
 8008072:	7818      	ldrb	r0, [r3, #0]
 8008074:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008076:	2134      	movs	r1, #52	; 0x34
 8008078:	697b      	ldr	r3, [r7, #20]
 800807a:	18d3      	adds	r3, r2, r3
 800807c:	185b      	adds	r3, r3, r1
 800807e:	1c02      	adds	r2, r0, #0
 8008080:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008082:	68ba      	ldr	r2, [r7, #8]
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	18d3      	adds	r3, r2, r3
 8008088:	781b      	ldrb	r3, [r3, #0]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d006      	beq.n	800809c <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	3301      	adds	r3, #1
 8008092:	617b      	str	r3, [r7, #20]
 8008094:	697b      	ldr	r3, [r7, #20]
 8008096:	2b0f      	cmp	r3, #15
 8008098:	d9e8      	bls.n	800806c <prvInitialiseNewTask+0x40>
 800809a:	e000      	b.n	800809e <prvInitialiseNewTask+0x72>
			{
				break;
 800809c:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800809e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080a0:	2243      	movs	r2, #67	; 0x43
 80080a2:	2100      	movs	r1, #0
 80080a4:	5499      	strb	r1, [r3, r2]
 80080a6:	e003      	b.n	80080b0 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80080a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080aa:	2234      	movs	r2, #52	; 0x34
 80080ac:	2100      	movs	r1, #0
 80080ae:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80080b0:	6a3b      	ldr	r3, [r7, #32]
 80080b2:	2b06      	cmp	r3, #6
 80080b4:	d901      	bls.n	80080ba <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80080b6:	2306      	movs	r3, #6
 80080b8:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80080ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080bc:	6a3a      	ldr	r2, [r7, #32]
 80080be:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80080c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c2:	6a3a      	ldr	r2, [r7, #32]
 80080c4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80080c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080c8:	2200      	movs	r2, #0
 80080ca:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80080cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ce:	3304      	adds	r3, #4
 80080d0:	0018      	movs	r0, r3
 80080d2:	f7ff fed8 	bl	8007e86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	3318      	adds	r3, #24
 80080da:	0018      	movs	r0, r3
 80080dc:	f7ff fed3 	bl	8007e86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80080e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080e4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80080e6:	6a3b      	ldr	r3, [r7, #32]
 80080e8:	2207      	movs	r2, #7
 80080ea:	1ad2      	subs	r2, r2, r3
 80080ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080ee:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80080f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80080f4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80080f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080f8:	2200      	movs	r2, #0
 80080fa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80080fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080fe:	2250      	movs	r2, #80	; 0x50
 8008100:	2100      	movs	r1, #0
 8008102:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008104:	683a      	ldr	r2, [r7, #0]
 8008106:	68f9      	ldr	r1, [r7, #12]
 8008108:	693b      	ldr	r3, [r7, #16]
 800810a:	0018      	movs	r0, r3
 800810c:	f000 fc2a 	bl	8008964 <pxPortInitialiseStack>
 8008110:	0002      	movs	r2, r0
 8008112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008114:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008118:	2b00      	cmp	r3, #0
 800811a:	d002      	beq.n	8008122 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800811c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800811e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008120:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008122:	46c0      	nop			; (mov r8, r8)
 8008124:	46bd      	mov	sp, r7
 8008126:	b006      	add	sp, #24
 8008128:	bd80      	pop	{r7, pc}
 800812a:	46c0      	nop			; (mov r8, r8)
 800812c:	3fffffff 	.word	0x3fffffff

08008130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008130:	b580      	push	{r7, lr}
 8008132:	b082      	sub	sp, #8
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008138:	f000 fcb2 	bl	8008aa0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800813c:	4b28      	ldr	r3, [pc, #160]	; (80081e0 <prvAddNewTaskToReadyList+0xb0>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	1c5a      	adds	r2, r3, #1
 8008142:	4b27      	ldr	r3, [pc, #156]	; (80081e0 <prvAddNewTaskToReadyList+0xb0>)
 8008144:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008146:	4b27      	ldr	r3, [pc, #156]	; (80081e4 <prvAddNewTaskToReadyList+0xb4>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d109      	bne.n	8008162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800814e:	4b25      	ldr	r3, [pc, #148]	; (80081e4 <prvAddNewTaskToReadyList+0xb4>)
 8008150:	687a      	ldr	r2, [r7, #4]
 8008152:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008154:	4b22      	ldr	r3, [pc, #136]	; (80081e0 <prvAddNewTaskToReadyList+0xb0>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	2b01      	cmp	r3, #1
 800815a:	d110      	bne.n	800817e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800815c:	f000 fa52 	bl	8008604 <prvInitialiseTaskLists>
 8008160:	e00d      	b.n	800817e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008162:	4b21      	ldr	r3, [pc, #132]	; (80081e8 <prvAddNewTaskToReadyList+0xb8>)
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	2b00      	cmp	r3, #0
 8008168:	d109      	bne.n	800817e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800816a:	4b1e      	ldr	r3, [pc, #120]	; (80081e4 <prvAddNewTaskToReadyList+0xb4>)
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008174:	429a      	cmp	r2, r3
 8008176:	d802      	bhi.n	800817e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008178:	4b1a      	ldr	r3, [pc, #104]	; (80081e4 <prvAddNewTaskToReadyList+0xb4>)
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800817e:	4b1b      	ldr	r3, [pc, #108]	; (80081ec <prvAddNewTaskToReadyList+0xbc>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	1c5a      	adds	r2, r3, #1
 8008184:	4b19      	ldr	r3, [pc, #100]	; (80081ec <prvAddNewTaskToReadyList+0xbc>)
 8008186:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800818c:	4b18      	ldr	r3, [pc, #96]	; (80081f0 <prvAddNewTaskToReadyList+0xc0>)
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	429a      	cmp	r2, r3
 8008192:	d903      	bls.n	800819c <prvAddNewTaskToReadyList+0x6c>
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008198:	4b15      	ldr	r3, [pc, #84]	; (80081f0 <prvAddNewTaskToReadyList+0xc0>)
 800819a:	601a      	str	r2, [r3, #0]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081a0:	0013      	movs	r3, r2
 80081a2:	009b      	lsls	r3, r3, #2
 80081a4:	189b      	adds	r3, r3, r2
 80081a6:	009b      	lsls	r3, r3, #2
 80081a8:	4a12      	ldr	r2, [pc, #72]	; (80081f4 <prvAddNewTaskToReadyList+0xc4>)
 80081aa:	189a      	adds	r2, r3, r2
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	3304      	adds	r3, #4
 80081b0:	0019      	movs	r1, r3
 80081b2:	0010      	movs	r0, r2
 80081b4:	f7ff fe72 	bl	8007e9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80081b8:	f000 fc84 	bl	8008ac4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80081bc:	4b0a      	ldr	r3, [pc, #40]	; (80081e8 <prvAddNewTaskToReadyList+0xb8>)
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	2b00      	cmp	r3, #0
 80081c2:	d008      	beq.n	80081d6 <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80081c4:	4b07      	ldr	r3, [pc, #28]	; (80081e4 <prvAddNewTaskToReadyList+0xb4>)
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d201      	bcs.n	80081d6 <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80081d2:	f000 fc55 	bl	8008a80 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081d6:	46c0      	nop			; (mov r8, r8)
 80081d8:	46bd      	mov	sp, r7
 80081da:	b002      	add	sp, #8
 80081dc:	bd80      	pop	{r7, pc}
 80081de:	46c0      	nop			; (mov r8, r8)
 80081e0:	200005cc 	.word	0x200005cc
 80081e4:	200004cc 	.word	0x200004cc
 80081e8:	200005d8 	.word	0x200005d8
 80081ec:	200005e8 	.word	0x200005e8
 80081f0:	200005d4 	.word	0x200005d4
 80081f4:	200004d0 	.word	0x200004d0

080081f8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8008200:	2300      	movs	r3, #0
 8008202:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d010      	beq.n	800822c <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800820a:	4b0d      	ldr	r3, [pc, #52]	; (8008240 <vTaskDelay+0x48>)
 800820c:	681b      	ldr	r3, [r3, #0]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d001      	beq.n	8008216 <vTaskDelay+0x1e>
 8008212:	b672      	cpsid	i
 8008214:	e7fe      	b.n	8008214 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 8008216:	f000 f84b 	bl	80082b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2100      	movs	r1, #0
 800821e:	0018      	movs	r0, r3
 8008220:	f000 fb4c 	bl	80088bc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8008224:	f000 f850 	bl	80082c8 <xTaskResumeAll>
 8008228:	0003      	movs	r3, r0
 800822a:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800822c:	68fb      	ldr	r3, [r7, #12]
 800822e:	2b00      	cmp	r3, #0
 8008230:	d101      	bne.n	8008236 <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8008232:	f000 fc25 	bl	8008a80 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8008236:	46c0      	nop			; (mov r8, r8)
 8008238:	46bd      	mov	sp, r7
 800823a:	b004      	add	sp, #16
 800823c:	bd80      	pop	{r7, pc}
 800823e:	46c0      	nop			; (mov r8, r8)
 8008240:	200005f4 	.word	0x200005f4

08008244 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b084      	sub	sp, #16
 8008248:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800824a:	4913      	ldr	r1, [pc, #76]	; (8008298 <vTaskStartScheduler+0x54>)
 800824c:	4813      	ldr	r0, [pc, #76]	; (800829c <vTaskStartScheduler+0x58>)
 800824e:	4b14      	ldr	r3, [pc, #80]	; (80082a0 <vTaskStartScheduler+0x5c>)
 8008250:	9301      	str	r3, [sp, #4]
 8008252:	2300      	movs	r3, #0
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	2300      	movs	r3, #0
 8008258:	2280      	movs	r2, #128	; 0x80
 800825a:	f7ff fe9f 	bl	8007f9c <xTaskCreate>
 800825e:	0003      	movs	r3, r0
 8008260:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2b01      	cmp	r3, #1
 8008266:	d10d      	bne.n	8008284 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 8008268:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800826a:	4b0e      	ldr	r3, [pc, #56]	; (80082a4 <vTaskStartScheduler+0x60>)
 800826c:	2201      	movs	r2, #1
 800826e:	4252      	negs	r2, r2
 8008270:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8008272:	4b0d      	ldr	r3, [pc, #52]	; (80082a8 <vTaskStartScheduler+0x64>)
 8008274:	2201      	movs	r2, #1
 8008276:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8008278:	4b0c      	ldr	r3, [pc, #48]	; (80082ac <vTaskStartScheduler+0x68>)
 800827a:	2200      	movs	r2, #0
 800827c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800827e:	f000 fbdb 	bl	8008a38 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8008282:	e004      	b.n	800828e <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	3301      	adds	r3, #1
 8008288:	d101      	bne.n	800828e <vTaskStartScheduler+0x4a>
 800828a:	b672      	cpsid	i
 800828c:	e7fe      	b.n	800828c <vTaskStartScheduler+0x48>
}
 800828e:	46c0      	nop			; (mov r8, r8)
 8008290:	46bd      	mov	sp, r7
 8008292:	b002      	add	sp, #8
 8008294:	bd80      	pop	{r7, pc}
 8008296:	46c0      	nop			; (mov r8, r8)
 8008298:	08009d34 	.word	0x08009d34
 800829c:	080085e5 	.word	0x080085e5
 80082a0:	200005f0 	.word	0x200005f0
 80082a4:	200005ec 	.word	0x200005ec
 80082a8:	200005d8 	.word	0x200005d8
 80082ac:	200005d0 	.word	0x200005d0

080082b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80082b0:	b580      	push	{r7, lr}
 80082b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80082b4:	4b03      	ldr	r3, [pc, #12]	; (80082c4 <vTaskSuspendAll+0x14>)
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	1c5a      	adds	r2, r3, #1
 80082ba:	4b02      	ldr	r3, [pc, #8]	; (80082c4 <vTaskSuspendAll+0x14>)
 80082bc:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80082be:	46c0      	nop			; (mov r8, r8)
 80082c0:	46bd      	mov	sp, r7
 80082c2:	bd80      	pop	{r7, pc}
 80082c4:	200005f4 	.word	0x200005f4

080082c8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80082c8:	b580      	push	{r7, lr}
 80082ca:	b084      	sub	sp, #16
 80082cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80082d2:	2300      	movs	r3, #0
 80082d4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80082d6:	4b3a      	ldr	r3, [pc, #232]	; (80083c0 <xTaskResumeAll+0xf8>)
 80082d8:	681b      	ldr	r3, [r3, #0]
 80082da:	2b00      	cmp	r3, #0
 80082dc:	d101      	bne.n	80082e2 <xTaskResumeAll+0x1a>
 80082de:	b672      	cpsid	i
 80082e0:	e7fe      	b.n	80082e0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80082e2:	f000 fbdd 	bl	8008aa0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80082e6:	4b36      	ldr	r3, [pc, #216]	; (80083c0 <xTaskResumeAll+0xf8>)
 80082e8:	681b      	ldr	r3, [r3, #0]
 80082ea:	1e5a      	subs	r2, r3, #1
 80082ec:	4b34      	ldr	r3, [pc, #208]	; (80083c0 <xTaskResumeAll+0xf8>)
 80082ee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80082f0:	4b33      	ldr	r3, [pc, #204]	; (80083c0 <xTaskResumeAll+0xf8>)
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d15b      	bne.n	80083b0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80082f8:	4b32      	ldr	r3, [pc, #200]	; (80083c4 <xTaskResumeAll+0xfc>)
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d057      	beq.n	80083b0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008300:	e02f      	b.n	8008362 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008302:	4b31      	ldr	r3, [pc, #196]	; (80083c8 <xTaskResumeAll+0x100>)
 8008304:	68db      	ldr	r3, [r3, #12]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800830a:	68fb      	ldr	r3, [r7, #12]
 800830c:	3318      	adds	r3, #24
 800830e:	0018      	movs	r0, r3
 8008310:	f7ff fe1c 	bl	8007f4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	3304      	adds	r3, #4
 8008318:	0018      	movs	r0, r3
 800831a:	f7ff fe17 	bl	8007f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008322:	4b2a      	ldr	r3, [pc, #168]	; (80083cc <xTaskResumeAll+0x104>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	429a      	cmp	r2, r3
 8008328:	d903      	bls.n	8008332 <xTaskResumeAll+0x6a>
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800832e:	4b27      	ldr	r3, [pc, #156]	; (80083cc <xTaskResumeAll+0x104>)
 8008330:	601a      	str	r2, [r3, #0]
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008336:	0013      	movs	r3, r2
 8008338:	009b      	lsls	r3, r3, #2
 800833a:	189b      	adds	r3, r3, r2
 800833c:	009b      	lsls	r3, r3, #2
 800833e:	4a24      	ldr	r2, [pc, #144]	; (80083d0 <xTaskResumeAll+0x108>)
 8008340:	189a      	adds	r2, r3, r2
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	3304      	adds	r3, #4
 8008346:	0019      	movs	r1, r3
 8008348:	0010      	movs	r0, r2
 800834a:	f7ff fda7 	bl	8007e9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008352:	4b20      	ldr	r3, [pc, #128]	; (80083d4 <xTaskResumeAll+0x10c>)
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008358:	429a      	cmp	r2, r3
 800835a:	d302      	bcc.n	8008362 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800835c:	4b1e      	ldr	r3, [pc, #120]	; (80083d8 <xTaskResumeAll+0x110>)
 800835e:	2201      	movs	r2, #1
 8008360:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008362:	4b19      	ldr	r3, [pc, #100]	; (80083c8 <xTaskResumeAll+0x100>)
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1cb      	bne.n	8008302 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	2b00      	cmp	r3, #0
 800836e:	d001      	beq.n	8008374 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8008370:	f000 f9cc 	bl	800870c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8008374:	4b19      	ldr	r3, [pc, #100]	; (80083dc <xTaskResumeAll+0x114>)
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	2b00      	cmp	r3, #0
 800837e:	d00f      	beq.n	80083a0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8008380:	f000 f82e 	bl	80083e0 <xTaskIncrementTick>
 8008384:	1e03      	subs	r3, r0, #0
 8008386:	d002      	beq.n	800838e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 8008388:	4b13      	ldr	r3, [pc, #76]	; (80083d8 <xTaskResumeAll+0x110>)
 800838a:	2201      	movs	r2, #1
 800838c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	3b01      	subs	r3, #1
 8008392:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1f2      	bne.n	8008380 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800839a:	4b10      	ldr	r3, [pc, #64]	; (80083dc <xTaskResumeAll+0x114>)
 800839c:	2200      	movs	r2, #0
 800839e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80083a0:	4b0d      	ldr	r3, [pc, #52]	; (80083d8 <xTaskResumeAll+0x110>)
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d003      	beq.n	80083b0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80083a8:	2301      	movs	r3, #1
 80083aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80083ac:	f000 fb68 	bl	8008a80 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80083b0:	f000 fb88 	bl	8008ac4 <vPortExitCritical>

	return xAlreadyYielded;
 80083b4:	68bb      	ldr	r3, [r7, #8]
}
 80083b6:	0018      	movs	r0, r3
 80083b8:	46bd      	mov	sp, r7
 80083ba:	b004      	add	sp, #16
 80083bc:	bd80      	pop	{r7, pc}
 80083be:	46c0      	nop			; (mov r8, r8)
 80083c0:	200005f4 	.word	0x200005f4
 80083c4:	200005cc 	.word	0x200005cc
 80083c8:	2000058c 	.word	0x2000058c
 80083cc:	200005d4 	.word	0x200005d4
 80083d0:	200004d0 	.word	0x200004d0
 80083d4:	200004cc 	.word	0x200004cc
 80083d8:	200005e0 	.word	0x200005e0
 80083dc:	200005dc 	.word	0x200005dc

080083e0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80083e0:	b580      	push	{r7, lr}
 80083e2:	b086      	sub	sp, #24
 80083e4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80083e6:	2300      	movs	r3, #0
 80083e8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80083ea:	4b4a      	ldr	r3, [pc, #296]	; (8008514 <xTaskIncrementTick+0x134>)
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	2b00      	cmp	r3, #0
 80083f0:	d000      	beq.n	80083f4 <xTaskIncrementTick+0x14>
 80083f2:	e084      	b.n	80084fe <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80083f4:	4b48      	ldr	r3, [pc, #288]	; (8008518 <xTaskIncrementTick+0x138>)
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	3301      	adds	r3, #1
 80083fa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80083fc:	4b46      	ldr	r3, [pc, #280]	; (8008518 <xTaskIncrementTick+0x138>)
 80083fe:	693a      	ldr	r2, [r7, #16]
 8008400:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	2b00      	cmp	r3, #0
 8008406:	d117      	bne.n	8008438 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 8008408:	4b44      	ldr	r3, [pc, #272]	; (800851c <xTaskIncrementTick+0x13c>)
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	2b00      	cmp	r3, #0
 8008410:	d001      	beq.n	8008416 <xTaskIncrementTick+0x36>
 8008412:	b672      	cpsid	i
 8008414:	e7fe      	b.n	8008414 <xTaskIncrementTick+0x34>
 8008416:	4b41      	ldr	r3, [pc, #260]	; (800851c <xTaskIncrementTick+0x13c>)
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	60fb      	str	r3, [r7, #12]
 800841c:	4b40      	ldr	r3, [pc, #256]	; (8008520 <xTaskIncrementTick+0x140>)
 800841e:	681a      	ldr	r2, [r3, #0]
 8008420:	4b3e      	ldr	r3, [pc, #248]	; (800851c <xTaskIncrementTick+0x13c>)
 8008422:	601a      	str	r2, [r3, #0]
 8008424:	4b3e      	ldr	r3, [pc, #248]	; (8008520 <xTaskIncrementTick+0x140>)
 8008426:	68fa      	ldr	r2, [r7, #12]
 8008428:	601a      	str	r2, [r3, #0]
 800842a:	4b3e      	ldr	r3, [pc, #248]	; (8008524 <xTaskIncrementTick+0x144>)
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	1c5a      	adds	r2, r3, #1
 8008430:	4b3c      	ldr	r3, [pc, #240]	; (8008524 <xTaskIncrementTick+0x144>)
 8008432:	601a      	str	r2, [r3, #0]
 8008434:	f000 f96a 	bl	800870c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8008438:	4b3b      	ldr	r3, [pc, #236]	; (8008528 <xTaskIncrementTick+0x148>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	693a      	ldr	r2, [r7, #16]
 800843e:	429a      	cmp	r2, r3
 8008440:	d349      	bcc.n	80084d6 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008442:	4b36      	ldr	r3, [pc, #216]	; (800851c <xTaskIncrementTick+0x13c>)
 8008444:	681b      	ldr	r3, [r3, #0]
 8008446:	681b      	ldr	r3, [r3, #0]
 8008448:	2b00      	cmp	r3, #0
 800844a:	d104      	bne.n	8008456 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800844c:	4b36      	ldr	r3, [pc, #216]	; (8008528 <xTaskIncrementTick+0x148>)
 800844e:	2201      	movs	r2, #1
 8008450:	4252      	negs	r2, r2
 8008452:	601a      	str	r2, [r3, #0]
					break;
 8008454:	e03f      	b.n	80084d6 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008456:	4b31      	ldr	r3, [pc, #196]	; (800851c <xTaskIncrementTick+0x13c>)
 8008458:	681b      	ldr	r3, [r3, #0]
 800845a:	68db      	ldr	r3, [r3, #12]
 800845c:	68db      	ldr	r3, [r3, #12]
 800845e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8008460:	68bb      	ldr	r3, [r7, #8]
 8008462:	685b      	ldr	r3, [r3, #4]
 8008464:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8008466:	693a      	ldr	r2, [r7, #16]
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	429a      	cmp	r2, r3
 800846c:	d203      	bcs.n	8008476 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800846e:	4b2e      	ldr	r3, [pc, #184]	; (8008528 <xTaskIncrementTick+0x148>)
 8008470:	687a      	ldr	r2, [r7, #4]
 8008472:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8008474:	e02f      	b.n	80084d6 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	3304      	adds	r3, #4
 800847a:	0018      	movs	r0, r3
 800847c:	f7ff fd66 	bl	8007f4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8008480:	68bb      	ldr	r3, [r7, #8]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	2b00      	cmp	r3, #0
 8008486:	d004      	beq.n	8008492 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008488:	68bb      	ldr	r3, [r7, #8]
 800848a:	3318      	adds	r3, #24
 800848c:	0018      	movs	r0, r3
 800848e:	f7ff fd5d 	bl	8007f4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8008492:	68bb      	ldr	r3, [r7, #8]
 8008494:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008496:	4b25      	ldr	r3, [pc, #148]	; (800852c <xTaskIncrementTick+0x14c>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	429a      	cmp	r2, r3
 800849c:	d903      	bls.n	80084a6 <xTaskIncrementTick+0xc6>
 800849e:	68bb      	ldr	r3, [r7, #8]
 80084a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084a2:	4b22      	ldr	r3, [pc, #136]	; (800852c <xTaskIncrementTick+0x14c>)
 80084a4:	601a      	str	r2, [r3, #0]
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084aa:	0013      	movs	r3, r2
 80084ac:	009b      	lsls	r3, r3, #2
 80084ae:	189b      	adds	r3, r3, r2
 80084b0:	009b      	lsls	r3, r3, #2
 80084b2:	4a1f      	ldr	r2, [pc, #124]	; (8008530 <xTaskIncrementTick+0x150>)
 80084b4:	189a      	adds	r2, r3, r2
 80084b6:	68bb      	ldr	r3, [r7, #8]
 80084b8:	3304      	adds	r3, #4
 80084ba:	0019      	movs	r1, r3
 80084bc:	0010      	movs	r0, r2
 80084be:	f7ff fced 	bl	8007e9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084c6:	4b1b      	ldr	r3, [pc, #108]	; (8008534 <xTaskIncrementTick+0x154>)
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d3b8      	bcc.n	8008442 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80084d0:	2301      	movs	r3, #1
 80084d2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80084d4:	e7b5      	b.n	8008442 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80084d6:	4b17      	ldr	r3, [pc, #92]	; (8008534 <xTaskIncrementTick+0x154>)
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084dc:	4914      	ldr	r1, [pc, #80]	; (8008530 <xTaskIncrementTick+0x150>)
 80084de:	0013      	movs	r3, r2
 80084e0:	009b      	lsls	r3, r3, #2
 80084e2:	189b      	adds	r3, r3, r2
 80084e4:	009b      	lsls	r3, r3, #2
 80084e6:	585b      	ldr	r3, [r3, r1]
 80084e8:	2b01      	cmp	r3, #1
 80084ea:	d901      	bls.n	80084f0 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 80084ec:	2301      	movs	r3, #1
 80084ee:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80084f0:	4b11      	ldr	r3, [pc, #68]	; (8008538 <xTaskIncrementTick+0x158>)
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d007      	beq.n	8008508 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 80084f8:	2301      	movs	r3, #1
 80084fa:	617b      	str	r3, [r7, #20]
 80084fc:	e004      	b.n	8008508 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80084fe:	4b0f      	ldr	r3, [pc, #60]	; (800853c <xTaskIncrementTick+0x15c>)
 8008500:	681b      	ldr	r3, [r3, #0]
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	4b0d      	ldr	r3, [pc, #52]	; (800853c <xTaskIncrementTick+0x15c>)
 8008506:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008508:	697b      	ldr	r3, [r7, #20]
}
 800850a:	0018      	movs	r0, r3
 800850c:	46bd      	mov	sp, r7
 800850e:	b006      	add	sp, #24
 8008510:	bd80      	pop	{r7, pc}
 8008512:	46c0      	nop			; (mov r8, r8)
 8008514:	200005f4 	.word	0x200005f4
 8008518:	200005d0 	.word	0x200005d0
 800851c:	20000584 	.word	0x20000584
 8008520:	20000588 	.word	0x20000588
 8008524:	200005e4 	.word	0x200005e4
 8008528:	200005ec 	.word	0x200005ec
 800852c:	200005d4 	.word	0x200005d4
 8008530:	200004d0 	.word	0x200004d0
 8008534:	200004cc 	.word	0x200004cc
 8008538:	200005e0 	.word	0x200005e0
 800853c:	200005dc 	.word	0x200005dc

08008540 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b082      	sub	sp, #8
 8008544:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8008546:	4b22      	ldr	r3, [pc, #136]	; (80085d0 <vTaskSwitchContext+0x90>)
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d003      	beq.n	8008556 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800854e:	4b21      	ldr	r3, [pc, #132]	; (80085d4 <vTaskSwitchContext+0x94>)
 8008550:	2201      	movs	r2, #1
 8008552:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8008554:	e037      	b.n	80085c6 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 8008556:	4b1f      	ldr	r3, [pc, #124]	; (80085d4 <vTaskSwitchContext+0x94>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800855c:	4b1e      	ldr	r3, [pc, #120]	; (80085d8 <vTaskSwitchContext+0x98>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	607b      	str	r3, [r7, #4]
 8008562:	e007      	b.n	8008574 <vTaskSwitchContext+0x34>
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d101      	bne.n	800856e <vTaskSwitchContext+0x2e>
 800856a:	b672      	cpsid	i
 800856c:	e7fe      	b.n	800856c <vTaskSwitchContext+0x2c>
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	3b01      	subs	r3, #1
 8008572:	607b      	str	r3, [r7, #4]
 8008574:	4919      	ldr	r1, [pc, #100]	; (80085dc <vTaskSwitchContext+0x9c>)
 8008576:	687a      	ldr	r2, [r7, #4]
 8008578:	0013      	movs	r3, r2
 800857a:	009b      	lsls	r3, r3, #2
 800857c:	189b      	adds	r3, r3, r2
 800857e:	009b      	lsls	r3, r3, #2
 8008580:	585b      	ldr	r3, [r3, r1]
 8008582:	2b00      	cmp	r3, #0
 8008584:	d0ee      	beq.n	8008564 <vTaskSwitchContext+0x24>
 8008586:	687a      	ldr	r2, [r7, #4]
 8008588:	0013      	movs	r3, r2
 800858a:	009b      	lsls	r3, r3, #2
 800858c:	189b      	adds	r3, r3, r2
 800858e:	009b      	lsls	r3, r3, #2
 8008590:	4a12      	ldr	r2, [pc, #72]	; (80085dc <vTaskSwitchContext+0x9c>)
 8008592:	189b      	adds	r3, r3, r2
 8008594:	603b      	str	r3, [r7, #0]
 8008596:	683b      	ldr	r3, [r7, #0]
 8008598:	685b      	ldr	r3, [r3, #4]
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	683b      	ldr	r3, [r7, #0]
 800859e:	605a      	str	r2, [r3, #4]
 80085a0:	683b      	ldr	r3, [r7, #0]
 80085a2:	685a      	ldr	r2, [r3, #4]
 80085a4:	683b      	ldr	r3, [r7, #0]
 80085a6:	3308      	adds	r3, #8
 80085a8:	429a      	cmp	r2, r3
 80085aa:	d104      	bne.n	80085b6 <vTaskSwitchContext+0x76>
 80085ac:	683b      	ldr	r3, [r7, #0]
 80085ae:	685b      	ldr	r3, [r3, #4]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	605a      	str	r2, [r3, #4]
 80085b6:	683b      	ldr	r3, [r7, #0]
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	68da      	ldr	r2, [r3, #12]
 80085bc:	4b08      	ldr	r3, [pc, #32]	; (80085e0 <vTaskSwitchContext+0xa0>)
 80085be:	601a      	str	r2, [r3, #0]
 80085c0:	4b05      	ldr	r3, [pc, #20]	; (80085d8 <vTaskSwitchContext+0x98>)
 80085c2:	687a      	ldr	r2, [r7, #4]
 80085c4:	601a      	str	r2, [r3, #0]
}
 80085c6:	46c0      	nop			; (mov r8, r8)
 80085c8:	46bd      	mov	sp, r7
 80085ca:	b002      	add	sp, #8
 80085cc:	bd80      	pop	{r7, pc}
 80085ce:	46c0      	nop			; (mov r8, r8)
 80085d0:	200005f4 	.word	0x200005f4
 80085d4:	200005e0 	.word	0x200005e0
 80085d8:	200005d4 	.word	0x200005d4
 80085dc:	200004d0 	.word	0x200004d0
 80085e0:	200004cc 	.word	0x200004cc

080085e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80085e4:	b580      	push	{r7, lr}
 80085e6:	b082      	sub	sp, #8
 80085e8:	af00      	add	r7, sp, #0
 80085ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80085ec:	f000 f84e 	bl	800868c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80085f0:	4b03      	ldr	r3, [pc, #12]	; (8008600 <prvIdleTask+0x1c>)
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	2b01      	cmp	r3, #1
 80085f6:	d9f9      	bls.n	80085ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80085f8:	f000 fa42 	bl	8008a80 <vPortYield>
		prvCheckTasksWaitingTermination();
 80085fc:	e7f6      	b.n	80085ec <prvIdleTask+0x8>
 80085fe:	46c0      	nop			; (mov r8, r8)
 8008600:	200004d0 	.word	0x200004d0

08008604 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008604:	b580      	push	{r7, lr}
 8008606:	b082      	sub	sp, #8
 8008608:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800860a:	2300      	movs	r3, #0
 800860c:	607b      	str	r3, [r7, #4]
 800860e:	e00c      	b.n	800862a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008610:	687a      	ldr	r2, [r7, #4]
 8008612:	0013      	movs	r3, r2
 8008614:	009b      	lsls	r3, r3, #2
 8008616:	189b      	adds	r3, r3, r2
 8008618:	009b      	lsls	r3, r3, #2
 800861a:	4a14      	ldr	r2, [pc, #80]	; (800866c <prvInitialiseTaskLists+0x68>)
 800861c:	189b      	adds	r3, r3, r2
 800861e:	0018      	movs	r0, r3
 8008620:	f7ff fc13 	bl	8007e4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	3301      	adds	r3, #1
 8008628:	607b      	str	r3, [r7, #4]
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2b06      	cmp	r3, #6
 800862e:	d9ef      	bls.n	8008610 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008630:	4b0f      	ldr	r3, [pc, #60]	; (8008670 <prvInitialiseTaskLists+0x6c>)
 8008632:	0018      	movs	r0, r3
 8008634:	f7ff fc09 	bl	8007e4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008638:	4b0e      	ldr	r3, [pc, #56]	; (8008674 <prvInitialiseTaskLists+0x70>)
 800863a:	0018      	movs	r0, r3
 800863c:	f7ff fc05 	bl	8007e4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008640:	4b0d      	ldr	r3, [pc, #52]	; (8008678 <prvInitialiseTaskLists+0x74>)
 8008642:	0018      	movs	r0, r3
 8008644:	f7ff fc01 	bl	8007e4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008648:	4b0c      	ldr	r3, [pc, #48]	; (800867c <prvInitialiseTaskLists+0x78>)
 800864a:	0018      	movs	r0, r3
 800864c:	f7ff fbfd 	bl	8007e4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008650:	4b0b      	ldr	r3, [pc, #44]	; (8008680 <prvInitialiseTaskLists+0x7c>)
 8008652:	0018      	movs	r0, r3
 8008654:	f7ff fbf9 	bl	8007e4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008658:	4b0a      	ldr	r3, [pc, #40]	; (8008684 <prvInitialiseTaskLists+0x80>)
 800865a:	4a05      	ldr	r2, [pc, #20]	; (8008670 <prvInitialiseTaskLists+0x6c>)
 800865c:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800865e:	4b0a      	ldr	r3, [pc, #40]	; (8008688 <prvInitialiseTaskLists+0x84>)
 8008660:	4a04      	ldr	r2, [pc, #16]	; (8008674 <prvInitialiseTaskLists+0x70>)
 8008662:	601a      	str	r2, [r3, #0]
}
 8008664:	46c0      	nop			; (mov r8, r8)
 8008666:	46bd      	mov	sp, r7
 8008668:	b002      	add	sp, #8
 800866a:	bd80      	pop	{r7, pc}
 800866c:	200004d0 	.word	0x200004d0
 8008670:	2000055c 	.word	0x2000055c
 8008674:	20000570 	.word	0x20000570
 8008678:	2000058c 	.word	0x2000058c
 800867c:	200005a0 	.word	0x200005a0
 8008680:	200005b8 	.word	0x200005b8
 8008684:	20000584 	.word	0x20000584
 8008688:	20000588 	.word	0x20000588

0800868c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800868c:	b580      	push	{r7, lr}
 800868e:	b082      	sub	sp, #8
 8008690:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008692:	e01a      	b.n	80086ca <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 8008694:	f000 fa04 	bl	8008aa0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008698:	4b10      	ldr	r3, [pc, #64]	; (80086dc <prvCheckTasksWaitingTermination+0x50>)
 800869a:	68db      	ldr	r3, [r3, #12]
 800869c:	68db      	ldr	r3, [r3, #12]
 800869e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3304      	adds	r3, #4
 80086a4:	0018      	movs	r0, r3
 80086a6:	f7ff fc51 	bl	8007f4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 80086aa:	4b0d      	ldr	r3, [pc, #52]	; (80086e0 <prvCheckTasksWaitingTermination+0x54>)
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	1e5a      	subs	r2, r3, #1
 80086b0:	4b0b      	ldr	r3, [pc, #44]	; (80086e0 <prvCheckTasksWaitingTermination+0x54>)
 80086b2:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80086b4:	4b0b      	ldr	r3, [pc, #44]	; (80086e4 <prvCheckTasksWaitingTermination+0x58>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	1e5a      	subs	r2, r3, #1
 80086ba:	4b0a      	ldr	r3, [pc, #40]	; (80086e4 <prvCheckTasksWaitingTermination+0x58>)
 80086bc:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80086be:	f000 fa01 	bl	8008ac4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	0018      	movs	r0, r3
 80086c6:	f000 f80f 	bl	80086e8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80086ca:	4b06      	ldr	r3, [pc, #24]	; (80086e4 <prvCheckTasksWaitingTermination+0x58>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d1e0      	bne.n	8008694 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80086d2:	46c0      	nop			; (mov r8, r8)
 80086d4:	46c0      	nop			; (mov r8, r8)
 80086d6:	46bd      	mov	sp, r7
 80086d8:	b002      	add	sp, #8
 80086da:	bd80      	pop	{r7, pc}
 80086dc:	200005a0 	.word	0x200005a0
 80086e0:	200005cc 	.word	0x200005cc
 80086e4:	200005b4 	.word	0x200005b4

080086e8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80086e8:	b580      	push	{r7, lr}
 80086ea:	b082      	sub	sp, #8
 80086ec:	af00      	add	r7, sp, #0
 80086ee:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80086f4:	0018      	movs	r0, r3
 80086f6:	f000 fb17 	bl	8008d28 <vPortFree>
			vPortFree( pxTCB );
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	0018      	movs	r0, r3
 80086fe:	f000 fb13 	bl	8008d28 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008702:	46c0      	nop			; (mov r8, r8)
 8008704:	46bd      	mov	sp, r7
 8008706:	b002      	add	sp, #8
 8008708:	bd80      	pop	{r7, pc}
	...

0800870c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008712:	4b0b      	ldr	r3, [pc, #44]	; (8008740 <prvResetNextTaskUnblockTime+0x34>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	2b00      	cmp	r3, #0
 800871a:	d104      	bne.n	8008726 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800871c:	4b09      	ldr	r3, [pc, #36]	; (8008744 <prvResetNextTaskUnblockTime+0x38>)
 800871e:	2201      	movs	r2, #1
 8008720:	4252      	negs	r2, r2
 8008722:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008724:	e008      	b.n	8008738 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008726:	4b06      	ldr	r3, [pc, #24]	; (8008740 <prvResetNextTaskUnblockTime+0x34>)
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	68db      	ldr	r3, [r3, #12]
 800872c:	68db      	ldr	r3, [r3, #12]
 800872e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	685a      	ldr	r2, [r3, #4]
 8008734:	4b03      	ldr	r3, [pc, #12]	; (8008744 <prvResetNextTaskUnblockTime+0x38>)
 8008736:	601a      	str	r2, [r3, #0]
}
 8008738:	46c0      	nop			; (mov r8, r8)
 800873a:	46bd      	mov	sp, r7
 800873c:	b002      	add	sp, #8
 800873e:	bd80      	pop	{r7, pc}
 8008740:	20000584 	.word	0x20000584
 8008744:	200005ec 	.word	0x200005ec

08008748 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 8008748:	b580      	push	{r7, lr}
 800874a:	b084      	sub	sp, #16
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
 8008750:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8008752:	f000 f9a5 	bl	8008aa0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 8008756:	4b1c      	ldr	r3, [pc, #112]	; (80087c8 <ulTaskNotifyTake+0x80>)
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800875c:	2b00      	cmp	r3, #0
 800875e:	d10e      	bne.n	800877e <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8008760:	4b19      	ldr	r3, [pc, #100]	; (80087c8 <ulTaskNotifyTake+0x80>)
 8008762:	681b      	ldr	r3, [r3, #0]
 8008764:	2250      	movs	r2, #80	; 0x50
 8008766:	2101      	movs	r1, #1
 8008768:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 800876a:	683b      	ldr	r3, [r7, #0]
 800876c:	2b00      	cmp	r3, #0
 800876e:	d006      	beq.n	800877e <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8008770:	683b      	ldr	r3, [r7, #0]
 8008772:	2101      	movs	r1, #1
 8008774:	0018      	movs	r0, r3
 8008776:	f000 f8a1 	bl	80088bc <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800877a:	f000 f981 	bl	8008a80 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800877e:	f000 f9a1 	bl	8008ac4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8008782:	f000 f98d 	bl	8008aa0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 8008786:	4b10      	ldr	r3, [pc, #64]	; (80087c8 <ulTaskNotifyTake+0x80>)
 8008788:	681b      	ldr	r3, [r3, #0]
 800878a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800878c:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	2b00      	cmp	r3, #0
 8008792:	d00c      	beq.n	80087ae <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	2b00      	cmp	r3, #0
 8008798:	d004      	beq.n	80087a4 <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800879a:	4b0b      	ldr	r3, [pc, #44]	; (80087c8 <ulTaskNotifyTake+0x80>)
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	2200      	movs	r2, #0
 80087a0:	64da      	str	r2, [r3, #76]	; 0x4c
 80087a2:	e004      	b.n	80087ae <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80087a4:	4b08      	ldr	r3, [pc, #32]	; (80087c8 <ulTaskNotifyTake+0x80>)
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	68fa      	ldr	r2, [r7, #12]
 80087aa:	3a01      	subs	r2, #1
 80087ac:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80087ae:	4b06      	ldr	r3, [pc, #24]	; (80087c8 <ulTaskNotifyTake+0x80>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	2250      	movs	r2, #80	; 0x50
 80087b4:	2100      	movs	r1, #0
 80087b6:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 80087b8:	f000 f984 	bl	8008ac4 <vPortExitCritical>

		return ulReturn;
 80087bc:	68fb      	ldr	r3, [r7, #12]
	}
 80087be:	0018      	movs	r0, r3
 80087c0:	46bd      	mov	sp, r7
 80087c2:	b004      	add	sp, #16
 80087c4:	bd80      	pop	{r7, pc}
 80087c6:	46c0      	nop			; (mov r8, r8)
 80087c8:	200004cc 	.word	0x200004cc

080087cc <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80087cc:	b580      	push	{r7, lr}
 80087ce:	b086      	sub	sp, #24
 80087d0:	af00      	add	r7, sp, #0
 80087d2:	6078      	str	r0, [r7, #4]
 80087d4:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d101      	bne.n	80087e0 <vTaskNotifyGiveFromISR+0x14>
 80087dc:	b672      	cpsid	i
 80087de:	e7fe      	b.n	80087de <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80087e4:	f000 f986 	bl	8008af4 <ulSetInterruptMaskFromISR>
 80087e8:	0003      	movs	r3, r0
 80087ea:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80087ec:	200f      	movs	r0, #15
 80087ee:	183b      	adds	r3, r7, r0
 80087f0:	697a      	ldr	r2, [r7, #20]
 80087f2:	2150      	movs	r1, #80	; 0x50
 80087f4:	5c52      	ldrb	r2, [r2, r1]
 80087f6:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80087f8:	697b      	ldr	r3, [r7, #20]
 80087fa:	2250      	movs	r2, #80	; 0x50
 80087fc:	2102      	movs	r1, #2
 80087fe:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8008800:	697b      	ldr	r3, [r7, #20]
 8008802:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008804:	1c5a      	adds	r2, r3, #1
 8008806:	697b      	ldr	r3, [r7, #20]
 8008808:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800880a:	183b      	adds	r3, r7, r0
 800880c:	781b      	ldrb	r3, [r3, #0]
 800880e:	2b01      	cmp	r3, #1
 8008810:	d13f      	bne.n	8008892 <vTaskNotifyGiveFromISR+0xc6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8008812:	697b      	ldr	r3, [r7, #20]
 8008814:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008816:	2b00      	cmp	r3, #0
 8008818:	d001      	beq.n	800881e <vTaskNotifyGiveFromISR+0x52>
 800881a:	b672      	cpsid	i
 800881c:	e7fe      	b.n	800881c <vTaskNotifyGiveFromISR+0x50>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800881e:	4b21      	ldr	r3, [pc, #132]	; (80088a4 <vTaskNotifyGiveFromISR+0xd8>)
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	2b00      	cmp	r3, #0
 8008824:	d11d      	bne.n	8008862 <vTaskNotifyGiveFromISR+0x96>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008826:	697b      	ldr	r3, [r7, #20]
 8008828:	3304      	adds	r3, #4
 800882a:	0018      	movs	r0, r3
 800882c:	f7ff fb8e 	bl	8007f4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008830:	697b      	ldr	r3, [r7, #20]
 8008832:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008834:	4b1c      	ldr	r3, [pc, #112]	; (80088a8 <vTaskNotifyGiveFromISR+0xdc>)
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	429a      	cmp	r2, r3
 800883a:	d903      	bls.n	8008844 <vTaskNotifyGiveFromISR+0x78>
 800883c:	697b      	ldr	r3, [r7, #20]
 800883e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008840:	4b19      	ldr	r3, [pc, #100]	; (80088a8 <vTaskNotifyGiveFromISR+0xdc>)
 8008842:	601a      	str	r2, [r3, #0]
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008848:	0013      	movs	r3, r2
 800884a:	009b      	lsls	r3, r3, #2
 800884c:	189b      	adds	r3, r3, r2
 800884e:	009b      	lsls	r3, r3, #2
 8008850:	4a16      	ldr	r2, [pc, #88]	; (80088ac <vTaskNotifyGiveFromISR+0xe0>)
 8008852:	189a      	adds	r2, r3, r2
 8008854:	697b      	ldr	r3, [r7, #20]
 8008856:	3304      	adds	r3, #4
 8008858:	0019      	movs	r1, r3
 800885a:	0010      	movs	r0, r2
 800885c:	f7ff fb1e 	bl	8007e9c <vListInsertEnd>
 8008860:	e007      	b.n	8008872 <vTaskNotifyGiveFromISR+0xa6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8008862:	697b      	ldr	r3, [r7, #20]
 8008864:	3318      	adds	r3, #24
 8008866:	001a      	movs	r2, r3
 8008868:	4b11      	ldr	r3, [pc, #68]	; (80088b0 <vTaskNotifyGiveFromISR+0xe4>)
 800886a:	0011      	movs	r1, r2
 800886c:	0018      	movs	r0, r3
 800886e:	f7ff fb15 	bl	8007e9c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8008872:	697b      	ldr	r3, [r7, #20]
 8008874:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008876:	4b0f      	ldr	r3, [pc, #60]	; (80088b4 <vTaskNotifyGiveFromISR+0xe8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800887c:	429a      	cmp	r2, r3
 800887e:	d908      	bls.n	8008892 <vTaskNotifyGiveFromISR+0xc6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d002      	beq.n	800888c <vTaskNotifyGiveFromISR+0xc0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	2201      	movs	r2, #1
 800888a:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800888c:	4b0a      	ldr	r3, [pc, #40]	; (80088b8 <vTaskNotifyGiveFromISR+0xec>)
 800888e:	2201      	movs	r2, #1
 8008890:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 8008892:	693b      	ldr	r3, [r7, #16]
 8008894:	0018      	movs	r0, r3
 8008896:	f000 f933 	bl	8008b00 <vClearInterruptMaskFromISR>
	}
 800889a:	46c0      	nop			; (mov r8, r8)
 800889c:	46bd      	mov	sp, r7
 800889e:	b006      	add	sp, #24
 80088a0:	bd80      	pop	{r7, pc}
 80088a2:	46c0      	nop			; (mov r8, r8)
 80088a4:	200005f4 	.word	0x200005f4
 80088a8:	200005d4 	.word	0x200005d4
 80088ac:	200004d0 	.word	0x200004d0
 80088b0:	2000058c 	.word	0x2000058c
 80088b4:	200004cc 	.word	0x200004cc
 80088b8:	200005e0 	.word	0x200005e0

080088bc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80088bc:	b580      	push	{r7, lr}
 80088be:	b084      	sub	sp, #16
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
 80088c4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80088c6:	4b21      	ldr	r3, [pc, #132]	; (800894c <prvAddCurrentTaskToDelayedList+0x90>)
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80088cc:	4b20      	ldr	r3, [pc, #128]	; (8008950 <prvAddCurrentTaskToDelayedList+0x94>)
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	3304      	adds	r3, #4
 80088d2:	0018      	movs	r0, r3
 80088d4:	f7ff fb3a 	bl	8007f4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	3301      	adds	r3, #1
 80088dc:	d10b      	bne.n	80088f6 <prvAddCurrentTaskToDelayedList+0x3a>
 80088de:	683b      	ldr	r3, [r7, #0]
 80088e0:	2b00      	cmp	r3, #0
 80088e2:	d008      	beq.n	80088f6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80088e4:	4b1a      	ldr	r3, [pc, #104]	; (8008950 <prvAddCurrentTaskToDelayedList+0x94>)
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	1d1a      	adds	r2, r3, #4
 80088ea:	4b1a      	ldr	r3, [pc, #104]	; (8008954 <prvAddCurrentTaskToDelayedList+0x98>)
 80088ec:	0011      	movs	r1, r2
 80088ee:	0018      	movs	r0, r3
 80088f0:	f7ff fad4 	bl	8007e9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80088f4:	e026      	b.n	8008944 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	18d3      	adds	r3, r2, r3
 80088fc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80088fe:	4b14      	ldr	r3, [pc, #80]	; (8008950 <prvAddCurrentTaskToDelayedList+0x94>)
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68ba      	ldr	r2, [r7, #8]
 8008904:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008906:	68ba      	ldr	r2, [r7, #8]
 8008908:	68fb      	ldr	r3, [r7, #12]
 800890a:	429a      	cmp	r2, r3
 800890c:	d209      	bcs.n	8008922 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800890e:	4b12      	ldr	r3, [pc, #72]	; (8008958 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008910:	681a      	ldr	r2, [r3, #0]
 8008912:	4b0f      	ldr	r3, [pc, #60]	; (8008950 <prvAddCurrentTaskToDelayedList+0x94>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	3304      	adds	r3, #4
 8008918:	0019      	movs	r1, r3
 800891a:	0010      	movs	r0, r2
 800891c:	f7ff fae0 	bl	8007ee0 <vListInsert>
}
 8008920:	e010      	b.n	8008944 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008922:	4b0e      	ldr	r3, [pc, #56]	; (800895c <prvAddCurrentTaskToDelayedList+0xa0>)
 8008924:	681a      	ldr	r2, [r3, #0]
 8008926:	4b0a      	ldr	r3, [pc, #40]	; (8008950 <prvAddCurrentTaskToDelayedList+0x94>)
 8008928:	681b      	ldr	r3, [r3, #0]
 800892a:	3304      	adds	r3, #4
 800892c:	0019      	movs	r1, r3
 800892e:	0010      	movs	r0, r2
 8008930:	f7ff fad6 	bl	8007ee0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008934:	4b0a      	ldr	r3, [pc, #40]	; (8008960 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	68ba      	ldr	r2, [r7, #8]
 800893a:	429a      	cmp	r2, r3
 800893c:	d202      	bcs.n	8008944 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800893e:	4b08      	ldr	r3, [pc, #32]	; (8008960 <prvAddCurrentTaskToDelayedList+0xa4>)
 8008940:	68ba      	ldr	r2, [r7, #8]
 8008942:	601a      	str	r2, [r3, #0]
}
 8008944:	46c0      	nop			; (mov r8, r8)
 8008946:	46bd      	mov	sp, r7
 8008948:	b004      	add	sp, #16
 800894a:	bd80      	pop	{r7, pc}
 800894c:	200005d0 	.word	0x200005d0
 8008950:	200004cc 	.word	0x200004cc
 8008954:	200005b8 	.word	0x200005b8
 8008958:	20000588 	.word	0x20000588
 800895c:	20000584 	.word	0x20000584
 8008960:	200005ec 	.word	0x200005ec

08008964 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008964:	b580      	push	{r7, lr}
 8008966:	b084      	sub	sp, #16
 8008968:	af00      	add	r7, sp, #0
 800896a:	60f8      	str	r0, [r7, #12]
 800896c:	60b9      	str	r1, [r7, #8]
 800896e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	3b04      	subs	r3, #4
 8008974:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	2280      	movs	r2, #128	; 0x80
 800897a:	0452      	lsls	r2, r2, #17
 800897c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	3b04      	subs	r3, #4
 8008982:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8008984:	68ba      	ldr	r2, [r7, #8]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	3b04      	subs	r3, #4
 800898e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008990:	4a08      	ldr	r2, [pc, #32]	; (80089b4 <pxPortInitialiseStack+0x50>)
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	3b14      	subs	r3, #20
 800899a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800899c:	687a      	ldr	r2, [r7, #4]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	3b20      	subs	r3, #32
 80089a6:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80089a8:	68fb      	ldr	r3, [r7, #12]
}
 80089aa:	0018      	movs	r0, r3
 80089ac:	46bd      	mov	sp, r7
 80089ae:	b004      	add	sp, #16
 80089b0:	bd80      	pop	{r7, pc}
 80089b2:	46c0      	nop			; (mov r8, r8)
 80089b4:	080089b9 	.word	0x080089b9

080089b8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089b8:	b580      	push	{r7, lr}
 80089ba:	b082      	sub	sp, #8
 80089bc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089be:	2300      	movs	r3, #0
 80089c0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089c2:	4b08      	ldr	r3, [pc, #32]	; (80089e4 <prvTaskExitError+0x2c>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	3301      	adds	r3, #1
 80089c8:	d001      	beq.n	80089ce <prvTaskExitError+0x16>
 80089ca:	b672      	cpsid	i
 80089cc:	e7fe      	b.n	80089cc <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80089ce:	b672      	cpsid	i
	while( ulDummy == 0 )
 80089d0:	46c0      	nop			; (mov r8, r8)
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	2b00      	cmp	r3, #0
 80089d6:	d0fc      	beq.n	80089d2 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089d8:	46c0      	nop			; (mov r8, r8)
 80089da:	46c0      	nop			; (mov r8, r8)
 80089dc:	46bd      	mov	sp, r7
 80089de:	b002      	add	sp, #8
 80089e0:	bd80      	pop	{r7, pc}
 80089e2:	46c0      	nop			; (mov r8, r8)
 80089e4:	20000018 	.word	0x20000018

080089e8 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80089e8:	b580      	push	{r7, lr}
 80089ea:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 80089ec:	46c0      	nop			; (mov r8, r8)
 80089ee:	46bd      	mov	sp, r7
 80089f0:	bd80      	pop	{r7, pc}
	...

08008a00 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8008a00:	4a0b      	ldr	r2, [pc, #44]	; (8008a30 <pxCurrentTCBConst2>)
 8008a02:	6813      	ldr	r3, [r2, #0]
 8008a04:	6818      	ldr	r0, [r3, #0]
 8008a06:	3020      	adds	r0, #32
 8008a08:	f380 8809 	msr	PSP, r0
 8008a0c:	2002      	movs	r0, #2
 8008a0e:	f380 8814 	msr	CONTROL, r0
 8008a12:	f3bf 8f6f 	isb	sy
 8008a16:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8008a18:	46ae      	mov	lr, r5
 8008a1a:	bc08      	pop	{r3}
 8008a1c:	bc04      	pop	{r2}
 8008a1e:	b662      	cpsie	i
 8008a20:	4718      	bx	r3
 8008a22:	46c0      	nop			; (mov r8, r8)
 8008a24:	46c0      	nop			; (mov r8, r8)
 8008a26:	46c0      	nop			; (mov r8, r8)
 8008a28:	46c0      	nop			; (mov r8, r8)
 8008a2a:	46c0      	nop			; (mov r8, r8)
 8008a2c:	46c0      	nop			; (mov r8, r8)
 8008a2e:	46c0      	nop			; (mov r8, r8)

08008a30 <pxCurrentTCBConst2>:
 8008a30:	200004cc 	.word	0x200004cc
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8008a34:	46c0      	nop			; (mov r8, r8)
 8008a36:	46c0      	nop			; (mov r8, r8)

08008a38 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a38:	b580      	push	{r7, lr}
 8008a3a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008a3c:	4b0e      	ldr	r3, [pc, #56]	; (8008a78 <xPortStartScheduler+0x40>)
 8008a3e:	681a      	ldr	r2, [r3, #0]
 8008a40:	4b0d      	ldr	r3, [pc, #52]	; (8008a78 <xPortStartScheduler+0x40>)
 8008a42:	21ff      	movs	r1, #255	; 0xff
 8008a44:	0409      	lsls	r1, r1, #16
 8008a46:	430a      	orrs	r2, r1
 8008a48:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008a4a:	4b0b      	ldr	r3, [pc, #44]	; (8008a78 <xPortStartScheduler+0x40>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	4b0a      	ldr	r3, [pc, #40]	; (8008a78 <xPortStartScheduler+0x40>)
 8008a50:	21ff      	movs	r1, #255	; 0xff
 8008a52:	0609      	lsls	r1, r1, #24
 8008a54:	430a      	orrs	r2, r1
 8008a56:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008a58:	f000 f898 	bl	8008b8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008a5c:	4b07      	ldr	r3, [pc, #28]	; (8008a7c <xPortStartScheduler+0x44>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8008a62:	f7ff ffcd 	bl	8008a00 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008a66:	f7ff fd6b 	bl	8008540 <vTaskSwitchContext>
	prvTaskExitError();
 8008a6a:	f7ff ffa5 	bl	80089b8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	0018      	movs	r0, r3
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd80      	pop	{r7, pc}
 8008a76:	46c0      	nop			; (mov r8, r8)
 8008a78:	e000ed20 	.word	0xe000ed20
 8008a7c:	20000018 	.word	0x20000018

08008a80 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008a84:	4b05      	ldr	r3, [pc, #20]	; (8008a9c <vPortYield+0x1c>)
 8008a86:	2280      	movs	r2, #128	; 0x80
 8008a88:	0552      	lsls	r2, r2, #21
 8008a8a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 8008a8c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008a90:	f3bf 8f6f 	isb	sy
}
 8008a94:	46c0      	nop			; (mov r8, r8)
 8008a96:	46bd      	mov	sp, r7
 8008a98:	bd80      	pop	{r7, pc}
 8008a9a:	46c0      	nop			; (mov r8, r8)
 8008a9c:	e000ed04 	.word	0xe000ed04

08008aa0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008aa0:	b580      	push	{r7, lr}
 8008aa2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 8008aa4:	b672      	cpsid	i
	uxCriticalNesting++;
 8008aa6:	4b06      	ldr	r3, [pc, #24]	; (8008ac0 <vPortEnterCritical+0x20>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	1c5a      	adds	r2, r3, #1
 8008aac:	4b04      	ldr	r3, [pc, #16]	; (8008ac0 <vPortEnterCritical+0x20>)
 8008aae:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 8008ab0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 8008ab4:	f3bf 8f6f 	isb	sy
}
 8008ab8:	46c0      	nop			; (mov r8, r8)
 8008aba:	46bd      	mov	sp, r7
 8008abc:	bd80      	pop	{r7, pc}
 8008abe:	46c0      	nop			; (mov r8, r8)
 8008ac0:	20000018 	.word	0x20000018

08008ac4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008ac4:	b580      	push	{r7, lr}
 8008ac6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008ac8:	4b09      	ldr	r3, [pc, #36]	; (8008af0 <vPortExitCritical+0x2c>)
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	2b00      	cmp	r3, #0
 8008ace:	d101      	bne.n	8008ad4 <vPortExitCritical+0x10>
 8008ad0:	b672      	cpsid	i
 8008ad2:	e7fe      	b.n	8008ad2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 8008ad4:	4b06      	ldr	r3, [pc, #24]	; (8008af0 <vPortExitCritical+0x2c>)
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	1e5a      	subs	r2, r3, #1
 8008ada:	4b05      	ldr	r3, [pc, #20]	; (8008af0 <vPortExitCritical+0x2c>)
 8008adc:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 8008ade:	4b04      	ldr	r3, [pc, #16]	; (8008af0 <vPortExitCritical+0x2c>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	d100      	bne.n	8008ae8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 8008ae6:	b662      	cpsie	i
	}
}
 8008ae8:	46c0      	nop			; (mov r8, r8)
 8008aea:	46bd      	mov	sp, r7
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	46c0      	nop			; (mov r8, r8)
 8008af0:	20000018 	.word	0x20000018

08008af4 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8008af4:	f3ef 8010 	mrs	r0, PRIMASK
 8008af8:	b672      	cpsid	i
 8008afa:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8008afc:	46c0      	nop			; (mov r8, r8)
 8008afe:	0018      	movs	r0, r3

08008b00 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8008b00:	f380 8810 	msr	PRIMASK, r0
 8008b04:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8008b06:	46c0      	nop			; (mov r8, r8)
	...

08008b10 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008b10:	f3ef 8009 	mrs	r0, PSP
 8008b14:	4b0e      	ldr	r3, [pc, #56]	; (8008b50 <pxCurrentTCBConst>)
 8008b16:	681a      	ldr	r2, [r3, #0]
 8008b18:	3820      	subs	r0, #32
 8008b1a:	6010      	str	r0, [r2, #0]
 8008b1c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008b1e:	4644      	mov	r4, r8
 8008b20:	464d      	mov	r5, r9
 8008b22:	4656      	mov	r6, sl
 8008b24:	465f      	mov	r7, fp
 8008b26:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8008b28:	b508      	push	{r3, lr}
 8008b2a:	b672      	cpsid	i
 8008b2c:	f7ff fd08 	bl	8008540 <vTaskSwitchContext>
 8008b30:	b662      	cpsie	i
 8008b32:	bc0c      	pop	{r2, r3}
 8008b34:	6811      	ldr	r1, [r2, #0]
 8008b36:	6808      	ldr	r0, [r1, #0]
 8008b38:	3010      	adds	r0, #16
 8008b3a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008b3c:	46a0      	mov	r8, r4
 8008b3e:	46a9      	mov	r9, r5
 8008b40:	46b2      	mov	sl, r6
 8008b42:	46bb      	mov	fp, r7
 8008b44:	f380 8809 	msr	PSP, r0
 8008b48:	3820      	subs	r0, #32
 8008b4a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 8008b4c:	4718      	bx	r3
 8008b4e:	46c0      	nop			; (mov r8, r8)

08008b50 <pxCurrentTCBConst>:
 8008b50:	200004cc 	.word	0x200004cc
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8008b54:	46c0      	nop			; (mov r8, r8)
 8008b56:	46c0      	nop			; (mov r8, r8)

08008b58 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008b58:	b580      	push	{r7, lr}
 8008b5a:	b082      	sub	sp, #8
 8008b5c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 8008b5e:	f7ff ffc9 	bl	8008af4 <ulSetInterruptMaskFromISR>
 8008b62:	0003      	movs	r3, r0
 8008b64:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008b66:	f7ff fc3b 	bl	80083e0 <xTaskIncrementTick>
 8008b6a:	1e03      	subs	r3, r0, #0
 8008b6c:	d003      	beq.n	8008b76 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008b6e:	4b06      	ldr	r3, [pc, #24]	; (8008b88 <SysTick_Handler+0x30>)
 8008b70:	2280      	movs	r2, #128	; 0x80
 8008b72:	0552      	lsls	r2, r2, #21
 8008b74:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	0018      	movs	r0, r3
 8008b7a:	f7ff ffc1 	bl	8008b00 <vClearInterruptMaskFromISR>
}
 8008b7e:	46c0      	nop			; (mov r8, r8)
 8008b80:	46bd      	mov	sp, r7
 8008b82:	b002      	add	sp, #8
 8008b84:	bd80      	pop	{r7, pc}
 8008b86:	46c0      	nop			; (mov r8, r8)
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008b8c:	b580      	push	{r7, lr}
 8008b8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008b90:	4b0b      	ldr	r3, [pc, #44]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008b92:	2200      	movs	r2, #0
 8008b94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008b96:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <vPortSetupTimerInterrupt+0x38>)
 8008b98:	2200      	movs	r2, #0
 8008b9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008b9c:	4b0a      	ldr	r3, [pc, #40]	; (8008bc8 <vPortSetupTimerInterrupt+0x3c>)
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	22fa      	movs	r2, #250	; 0xfa
 8008ba2:	0091      	lsls	r1, r2, #2
 8008ba4:	0018      	movs	r0, r3
 8008ba6:	f7f7 fac1 	bl	800012c <__udivsi3>
 8008baa:	0003      	movs	r3, r0
 8008bac:	001a      	movs	r2, r3
 8008bae:	4b07      	ldr	r3, [pc, #28]	; (8008bcc <vPortSetupTimerInterrupt+0x40>)
 8008bb0:	3a01      	subs	r2, #1
 8008bb2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 8008bb4:	4b02      	ldr	r3, [pc, #8]	; (8008bc0 <vPortSetupTimerInterrupt+0x34>)
 8008bb6:	2207      	movs	r2, #7
 8008bb8:	601a      	str	r2, [r3, #0]
}
 8008bba:	46c0      	nop			; (mov r8, r8)
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	bd80      	pop	{r7, pc}
 8008bc0:	e000e010 	.word	0xe000e010
 8008bc4:	e000e018 	.word	0xe000e018
 8008bc8:	2000000c 	.word	0x2000000c
 8008bcc:	e000e014 	.word	0xe000e014

08008bd0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008bd0:	b580      	push	{r7, lr}
 8008bd2:	b086      	sub	sp, #24
 8008bd4:	af00      	add	r7, sp, #0
 8008bd6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008bd8:	2300      	movs	r3, #0
 8008bda:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 8008bdc:	f7ff fb68 	bl	80082b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008be0:	4b4b      	ldr	r3, [pc, #300]	; (8008d10 <pvPortMalloc+0x140>)
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	2b00      	cmp	r3, #0
 8008be6:	d101      	bne.n	8008bec <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008be8:	f000 f8ec 	bl	8008dc4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008bec:	4b49      	ldr	r3, [pc, #292]	; (8008d14 <pvPortMalloc+0x144>)
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	687a      	ldr	r2, [r7, #4]
 8008bf2:	4013      	ands	r3, r2
 8008bf4:	d000      	beq.n	8008bf8 <pvPortMalloc+0x28>
 8008bf6:	e07e      	b.n	8008cf6 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d012      	beq.n	8008c24 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8008bfe:	2208      	movs	r2, #8
 8008c00:	687b      	ldr	r3, [r7, #4]
 8008c02:	189b      	adds	r3, r3, r2
 8008c04:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	2207      	movs	r2, #7
 8008c0a:	4013      	ands	r3, r2
 8008c0c:	d00a      	beq.n	8008c24 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	2207      	movs	r2, #7
 8008c12:	4393      	bics	r3, r2
 8008c14:	3308      	adds	r3, #8
 8008c16:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2207      	movs	r2, #7
 8008c1c:	4013      	ands	r3, r2
 8008c1e:	d001      	beq.n	8008c24 <pvPortMalloc+0x54>
 8008c20:	b672      	cpsid	i
 8008c22:	e7fe      	b.n	8008c22 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d065      	beq.n	8008cf6 <pvPortMalloc+0x126>
 8008c2a:	4b3b      	ldr	r3, [pc, #236]	; (8008d18 <pvPortMalloc+0x148>)
 8008c2c:	681b      	ldr	r3, [r3, #0]
 8008c2e:	687a      	ldr	r2, [r7, #4]
 8008c30:	429a      	cmp	r2, r3
 8008c32:	d860      	bhi.n	8008cf6 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008c34:	4b39      	ldr	r3, [pc, #228]	; (8008d1c <pvPortMalloc+0x14c>)
 8008c36:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8008c38:	4b38      	ldr	r3, [pc, #224]	; (8008d1c <pvPortMalloc+0x14c>)
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c3e:	e004      	b.n	8008c4a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8008c40:	697b      	ldr	r3, [r7, #20]
 8008c42:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008c44:	697b      	ldr	r3, [r7, #20]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008c4a:	697b      	ldr	r3, [r7, #20]
 8008c4c:	685b      	ldr	r3, [r3, #4]
 8008c4e:	687a      	ldr	r2, [r7, #4]
 8008c50:	429a      	cmp	r2, r3
 8008c52:	d903      	bls.n	8008c5c <pvPortMalloc+0x8c>
 8008c54:	697b      	ldr	r3, [r7, #20]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	d1f1      	bne.n	8008c40 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008c5c:	4b2c      	ldr	r3, [pc, #176]	; (8008d10 <pvPortMalloc+0x140>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	429a      	cmp	r2, r3
 8008c64:	d047      	beq.n	8008cf6 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008c66:	693b      	ldr	r3, [r7, #16]
 8008c68:	681b      	ldr	r3, [r3, #0]
 8008c6a:	2208      	movs	r2, #8
 8008c6c:	189b      	adds	r3, r3, r2
 8008c6e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008c70:	697b      	ldr	r3, [r7, #20]
 8008c72:	681a      	ldr	r2, [r3, #0]
 8008c74:	693b      	ldr	r3, [r7, #16]
 8008c76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008c78:	697b      	ldr	r3, [r7, #20]
 8008c7a:	685a      	ldr	r2, [r3, #4]
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	1ad2      	subs	r2, r2, r3
 8008c80:	2308      	movs	r3, #8
 8008c82:	005b      	lsls	r3, r3, #1
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d916      	bls.n	8008cb6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008c88:	697a      	ldr	r2, [r7, #20]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	18d3      	adds	r3, r2, r3
 8008c8e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	2207      	movs	r2, #7
 8008c94:	4013      	ands	r3, r2
 8008c96:	d001      	beq.n	8008c9c <pvPortMalloc+0xcc>
 8008c98:	b672      	cpsid	i
 8008c9a:	e7fe      	b.n	8008c9a <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008c9c:	697b      	ldr	r3, [r7, #20]
 8008c9e:	685a      	ldr	r2, [r3, #4]
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	1ad2      	subs	r2, r2, r3
 8008ca4:	68bb      	ldr	r3, [r7, #8]
 8008ca6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008ca8:	697b      	ldr	r3, [r7, #20]
 8008caa:	687a      	ldr	r2, [r7, #4]
 8008cac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008cae:	68bb      	ldr	r3, [r7, #8]
 8008cb0:	0018      	movs	r0, r3
 8008cb2:	f000 f8e7 	bl	8008e84 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008cb6:	4b18      	ldr	r3, [pc, #96]	; (8008d18 <pvPortMalloc+0x148>)
 8008cb8:	681a      	ldr	r2, [r3, #0]
 8008cba:	697b      	ldr	r3, [r7, #20]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	1ad2      	subs	r2, r2, r3
 8008cc0:	4b15      	ldr	r3, [pc, #84]	; (8008d18 <pvPortMalloc+0x148>)
 8008cc2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008cc4:	4b14      	ldr	r3, [pc, #80]	; (8008d18 <pvPortMalloc+0x148>)
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	4b15      	ldr	r3, [pc, #84]	; (8008d20 <pvPortMalloc+0x150>)
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	429a      	cmp	r2, r3
 8008cce:	d203      	bcs.n	8008cd8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008cd0:	4b11      	ldr	r3, [pc, #68]	; (8008d18 <pvPortMalloc+0x148>)
 8008cd2:	681a      	ldr	r2, [r3, #0]
 8008cd4:	4b12      	ldr	r3, [pc, #72]	; (8008d20 <pvPortMalloc+0x150>)
 8008cd6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008cd8:	697b      	ldr	r3, [r7, #20]
 8008cda:	685a      	ldr	r2, [r3, #4]
 8008cdc:	4b0d      	ldr	r3, [pc, #52]	; (8008d14 <pvPortMalloc+0x144>)
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	431a      	orrs	r2, r3
 8008ce2:	697b      	ldr	r3, [r7, #20]
 8008ce4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008ce6:	697b      	ldr	r3, [r7, #20]
 8008ce8:	2200      	movs	r2, #0
 8008cea:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <pvPortMalloc+0x154>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	1c5a      	adds	r2, r3, #1
 8008cf2:	4b0c      	ldr	r3, [pc, #48]	; (8008d24 <pvPortMalloc+0x154>)
 8008cf4:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008cf6:	f7ff fae7 	bl	80082c8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008cfa:	68fb      	ldr	r3, [r7, #12]
 8008cfc:	2207      	movs	r2, #7
 8008cfe:	4013      	ands	r3, r2
 8008d00:	d001      	beq.n	8008d06 <pvPortMalloc+0x136>
 8008d02:	b672      	cpsid	i
 8008d04:	e7fe      	b.n	8008d04 <pvPortMalloc+0x134>
	return pvReturn;
 8008d06:	68fb      	ldr	r3, [r7, #12]
}
 8008d08:	0018      	movs	r0, r3
 8008d0a:	46bd      	mov	sp, r7
 8008d0c:	b006      	add	sp, #24
 8008d0e:	bd80      	pop	{r7, pc}
 8008d10:	20001600 	.word	0x20001600
 8008d14:	20001614 	.word	0x20001614
 8008d18:	20001604 	.word	0x20001604
 8008d1c:	200015f8 	.word	0x200015f8
 8008d20:	20001608 	.word	0x20001608
 8008d24:	2000160c 	.word	0x2000160c

08008d28 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b084      	sub	sp, #16
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d03a      	beq.n	8008db0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008d3a:	2308      	movs	r3, #8
 8008d3c:	425b      	negs	r3, r3
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	18d3      	adds	r3, r2, r3
 8008d42:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008d44:	68fb      	ldr	r3, [r7, #12]
 8008d46:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008d48:	68bb      	ldr	r3, [r7, #8]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	4b1a      	ldr	r3, [pc, #104]	; (8008db8 <vPortFree+0x90>)
 8008d4e:	681b      	ldr	r3, [r3, #0]
 8008d50:	4013      	ands	r3, r2
 8008d52:	d101      	bne.n	8008d58 <vPortFree+0x30>
 8008d54:	b672      	cpsid	i
 8008d56:	e7fe      	b.n	8008d56 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008d58:	68bb      	ldr	r3, [r7, #8]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	2b00      	cmp	r3, #0
 8008d5e:	d001      	beq.n	8008d64 <vPortFree+0x3c>
 8008d60:	b672      	cpsid	i
 8008d62:	e7fe      	b.n	8008d62 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008d64:	68bb      	ldr	r3, [r7, #8]
 8008d66:	685a      	ldr	r2, [r3, #4]
 8008d68:	4b13      	ldr	r3, [pc, #76]	; (8008db8 <vPortFree+0x90>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	4013      	ands	r3, r2
 8008d6e:	d01f      	beq.n	8008db0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008d70:	68bb      	ldr	r3, [r7, #8]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d11b      	bne.n	8008db0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008d78:	68bb      	ldr	r3, [r7, #8]
 8008d7a:	685a      	ldr	r2, [r3, #4]
 8008d7c:	4b0e      	ldr	r3, [pc, #56]	; (8008db8 <vPortFree+0x90>)
 8008d7e:	681b      	ldr	r3, [r3, #0]
 8008d80:	43db      	mvns	r3, r3
 8008d82:	401a      	ands	r2, r3
 8008d84:	68bb      	ldr	r3, [r7, #8]
 8008d86:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008d88:	f7ff fa92 	bl	80082b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008d8c:	68bb      	ldr	r3, [r7, #8]
 8008d8e:	685a      	ldr	r2, [r3, #4]
 8008d90:	4b0a      	ldr	r3, [pc, #40]	; (8008dbc <vPortFree+0x94>)
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	18d2      	adds	r2, r2, r3
 8008d96:	4b09      	ldr	r3, [pc, #36]	; (8008dbc <vPortFree+0x94>)
 8008d98:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008d9a:	68bb      	ldr	r3, [r7, #8]
 8008d9c:	0018      	movs	r0, r3
 8008d9e:	f000 f871 	bl	8008e84 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008da2:	4b07      	ldr	r3, [pc, #28]	; (8008dc0 <vPortFree+0x98>)
 8008da4:	681b      	ldr	r3, [r3, #0]
 8008da6:	1c5a      	adds	r2, r3, #1
 8008da8:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <vPortFree+0x98>)
 8008daa:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8008dac:	f7ff fa8c 	bl	80082c8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008db0:	46c0      	nop			; (mov r8, r8)
 8008db2:	46bd      	mov	sp, r7
 8008db4:	b004      	add	sp, #16
 8008db6:	bd80      	pop	{r7, pc}
 8008db8:	20001614 	.word	0x20001614
 8008dbc:	20001604 	.word	0x20001604
 8008dc0:	20001610 	.word	0x20001610

08008dc4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008dc4:	b580      	push	{r7, lr}
 8008dc6:	b084      	sub	sp, #16
 8008dc8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008dca:	2380      	movs	r3, #128	; 0x80
 8008dcc:	015b      	lsls	r3, r3, #5
 8008dce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008dd0:	4b26      	ldr	r3, [pc, #152]	; (8008e6c <prvHeapInit+0xa8>)
 8008dd2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008dd4:	68fb      	ldr	r3, [r7, #12]
 8008dd6:	2207      	movs	r2, #7
 8008dd8:	4013      	ands	r3, r2
 8008dda:	d00c      	beq.n	8008df6 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	3307      	adds	r3, #7
 8008de0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2207      	movs	r2, #7
 8008de6:	4393      	bics	r3, r2
 8008de8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008dea:	68ba      	ldr	r2, [r7, #8]
 8008dec:	68fb      	ldr	r3, [r7, #12]
 8008dee:	1ad2      	subs	r2, r2, r3
 8008df0:	4b1e      	ldr	r3, [pc, #120]	; (8008e6c <prvHeapInit+0xa8>)
 8008df2:	18d3      	adds	r3, r2, r3
 8008df4:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008dfa:	4b1d      	ldr	r3, [pc, #116]	; (8008e70 <prvHeapInit+0xac>)
 8008dfc:	687a      	ldr	r2, [r7, #4]
 8008dfe:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008e00:	4b1b      	ldr	r3, [pc, #108]	; (8008e70 <prvHeapInit+0xac>)
 8008e02:	2200      	movs	r2, #0
 8008e04:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	68ba      	ldr	r2, [r7, #8]
 8008e0a:	18d3      	adds	r3, r2, r3
 8008e0c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008e0e:	2208      	movs	r2, #8
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	1a9b      	subs	r3, r3, r2
 8008e14:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	2207      	movs	r2, #7
 8008e1a:	4393      	bics	r3, r2
 8008e1c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008e1e:	68fa      	ldr	r2, [r7, #12]
 8008e20:	4b14      	ldr	r3, [pc, #80]	; (8008e74 <prvHeapInit+0xb0>)
 8008e22:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8008e24:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <prvHeapInit+0xb0>)
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	2200      	movs	r2, #0
 8008e2a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008e2c:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <prvHeapInit+0xb0>)
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	2200      	movs	r2, #0
 8008e32:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008e38:	683b      	ldr	r3, [r7, #0]
 8008e3a:	68fa      	ldr	r2, [r7, #12]
 8008e3c:	1ad2      	subs	r2, r2, r3
 8008e3e:	683b      	ldr	r3, [r7, #0]
 8008e40:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008e42:	4b0c      	ldr	r3, [pc, #48]	; (8008e74 <prvHeapInit+0xb0>)
 8008e44:	681a      	ldr	r2, [r3, #0]
 8008e46:	683b      	ldr	r3, [r7, #0]
 8008e48:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e4a:	683b      	ldr	r3, [r7, #0]
 8008e4c:	685a      	ldr	r2, [r3, #4]
 8008e4e:	4b0a      	ldr	r3, [pc, #40]	; (8008e78 <prvHeapInit+0xb4>)
 8008e50:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008e52:	683b      	ldr	r3, [r7, #0]
 8008e54:	685a      	ldr	r2, [r3, #4]
 8008e56:	4b09      	ldr	r3, [pc, #36]	; (8008e7c <prvHeapInit+0xb8>)
 8008e58:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8008e5a:	4b09      	ldr	r3, [pc, #36]	; (8008e80 <prvHeapInit+0xbc>)
 8008e5c:	2280      	movs	r2, #128	; 0x80
 8008e5e:	0612      	lsls	r2, r2, #24
 8008e60:	601a      	str	r2, [r3, #0]
}
 8008e62:	46c0      	nop			; (mov r8, r8)
 8008e64:	46bd      	mov	sp, r7
 8008e66:	b004      	add	sp, #16
 8008e68:	bd80      	pop	{r7, pc}
 8008e6a:	46c0      	nop			; (mov r8, r8)
 8008e6c:	200005f8 	.word	0x200005f8
 8008e70:	200015f8 	.word	0x200015f8
 8008e74:	20001600 	.word	0x20001600
 8008e78:	20001608 	.word	0x20001608
 8008e7c:	20001604 	.word	0x20001604
 8008e80:	20001614 	.word	0x20001614

08008e84 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008e84:	b580      	push	{r7, lr}
 8008e86:	b084      	sub	sp, #16
 8008e88:	af00      	add	r7, sp, #0
 8008e8a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008e8c:	4b27      	ldr	r3, [pc, #156]	; (8008f2c <prvInsertBlockIntoFreeList+0xa8>)
 8008e8e:	60fb      	str	r3, [r7, #12]
 8008e90:	e002      	b.n	8008e98 <prvInsertBlockIntoFreeList+0x14>
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	60fb      	str	r3, [r7, #12]
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	687a      	ldr	r2, [r7, #4]
 8008e9e:	429a      	cmp	r2, r3
 8008ea0:	d8f7      	bhi.n	8008e92 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	685b      	ldr	r3, [r3, #4]
 8008eaa:	68ba      	ldr	r2, [r7, #8]
 8008eac:	18d3      	adds	r3, r2, r3
 8008eae:	687a      	ldr	r2, [r7, #4]
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d108      	bne.n	8008ec6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	685a      	ldr	r2, [r3, #4]
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	18d2      	adds	r2, r2, r3
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	685b      	ldr	r3, [r3, #4]
 8008ece:	68ba      	ldr	r2, [r7, #8]
 8008ed0:	18d2      	adds	r2, r2, r3
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	429a      	cmp	r2, r3
 8008ed8:	d118      	bne.n	8008f0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8008eda:	68fb      	ldr	r3, [r7, #12]
 8008edc:	681a      	ldr	r2, [r3, #0]
 8008ede:	4b14      	ldr	r3, [pc, #80]	; (8008f30 <prvInsertBlockIntoFreeList+0xac>)
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	429a      	cmp	r2, r3
 8008ee4:	d00d      	beq.n	8008f02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	685a      	ldr	r2, [r3, #4]
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	681b      	ldr	r3, [r3, #0]
 8008eee:	685b      	ldr	r3, [r3, #4]
 8008ef0:	18d2      	adds	r2, r2, r3
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	681b      	ldr	r3, [r3, #0]
 8008efa:	681a      	ldr	r2, [r3, #0]
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	601a      	str	r2, [r3, #0]
 8008f00:	e008      	b.n	8008f14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008f02:	4b0b      	ldr	r3, [pc, #44]	; (8008f30 <prvInsertBlockIntoFreeList+0xac>)
 8008f04:	681a      	ldr	r2, [r3, #0]
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	601a      	str	r2, [r3, #0]
 8008f0a:	e003      	b.n	8008f14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	681a      	ldr	r2, [r3, #0]
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008f14:	68fa      	ldr	r2, [r7, #12]
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	429a      	cmp	r2, r3
 8008f1a:	d002      	beq.n	8008f22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	687a      	ldr	r2, [r7, #4]
 8008f20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f22:	46c0      	nop			; (mov r8, r8)
 8008f24:	46bd      	mov	sp, r7
 8008f26:	b004      	add	sp, #16
 8008f28:	bd80      	pop	{r7, pc}
 8008f2a:	46c0      	nop			; (mov r8, r8)
 8008f2c:	200015f8 	.word	0x200015f8
 8008f30:	20001600 	.word	0x20001600

08008f34 <malloc>:
 8008f34:	b510      	push	{r4, lr}
 8008f36:	4b03      	ldr	r3, [pc, #12]	; (8008f44 <malloc+0x10>)
 8008f38:	0001      	movs	r1, r0
 8008f3a:	6818      	ldr	r0, [r3, #0]
 8008f3c:	f000 f830 	bl	8008fa0 <_malloc_r>
 8008f40:	bd10      	pop	{r4, pc}
 8008f42:	46c0      	nop			; (mov r8, r8)
 8008f44:	20000068 	.word	0x20000068

08008f48 <free>:
 8008f48:	b510      	push	{r4, lr}
 8008f4a:	4b03      	ldr	r3, [pc, #12]	; (8008f58 <free+0x10>)
 8008f4c:	0001      	movs	r1, r0
 8008f4e:	6818      	ldr	r0, [r3, #0]
 8008f50:	f000 f99e 	bl	8009290 <_free_r>
 8008f54:	bd10      	pop	{r4, pc}
 8008f56:	46c0      	nop			; (mov r8, r8)
 8008f58:	20000068 	.word	0x20000068

08008f5c <sbrk_aligned>:
 8008f5c:	b570      	push	{r4, r5, r6, lr}
 8008f5e:	4e0f      	ldr	r6, [pc, #60]	; (8008f9c <sbrk_aligned+0x40>)
 8008f60:	000d      	movs	r5, r1
 8008f62:	6831      	ldr	r1, [r6, #0]
 8008f64:	0004      	movs	r4, r0
 8008f66:	2900      	cmp	r1, #0
 8008f68:	d102      	bne.n	8008f70 <sbrk_aligned+0x14>
 8008f6a:	f000 f949 	bl	8009200 <_sbrk_r>
 8008f6e:	6030      	str	r0, [r6, #0]
 8008f70:	0029      	movs	r1, r5
 8008f72:	0020      	movs	r0, r4
 8008f74:	f000 f944 	bl	8009200 <_sbrk_r>
 8008f78:	1c43      	adds	r3, r0, #1
 8008f7a:	d00a      	beq.n	8008f92 <sbrk_aligned+0x36>
 8008f7c:	2303      	movs	r3, #3
 8008f7e:	1cc5      	adds	r5, r0, #3
 8008f80:	439d      	bics	r5, r3
 8008f82:	42a8      	cmp	r0, r5
 8008f84:	d007      	beq.n	8008f96 <sbrk_aligned+0x3a>
 8008f86:	1a29      	subs	r1, r5, r0
 8008f88:	0020      	movs	r0, r4
 8008f8a:	f000 f939 	bl	8009200 <_sbrk_r>
 8008f8e:	3001      	adds	r0, #1
 8008f90:	d101      	bne.n	8008f96 <sbrk_aligned+0x3a>
 8008f92:	2501      	movs	r5, #1
 8008f94:	426d      	negs	r5, r5
 8008f96:	0028      	movs	r0, r5
 8008f98:	bd70      	pop	{r4, r5, r6, pc}
 8008f9a:	46c0      	nop			; (mov r8, r8)
 8008f9c:	2000161c 	.word	0x2000161c

08008fa0 <_malloc_r>:
 8008fa0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fa2:	2203      	movs	r2, #3
 8008fa4:	1ccb      	adds	r3, r1, #3
 8008fa6:	4393      	bics	r3, r2
 8008fa8:	3308      	adds	r3, #8
 8008faa:	0006      	movs	r6, r0
 8008fac:	001f      	movs	r7, r3
 8008fae:	2b0c      	cmp	r3, #12
 8008fb0:	d238      	bcs.n	8009024 <_malloc_r+0x84>
 8008fb2:	270c      	movs	r7, #12
 8008fb4:	42b9      	cmp	r1, r7
 8008fb6:	d837      	bhi.n	8009028 <_malloc_r+0x88>
 8008fb8:	0030      	movs	r0, r6
 8008fba:	f000 f873 	bl	80090a4 <__malloc_lock>
 8008fbe:	4b38      	ldr	r3, [pc, #224]	; (80090a0 <_malloc_r+0x100>)
 8008fc0:	9300      	str	r3, [sp, #0]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	001c      	movs	r4, r3
 8008fc6:	2c00      	cmp	r4, #0
 8008fc8:	d133      	bne.n	8009032 <_malloc_r+0x92>
 8008fca:	0039      	movs	r1, r7
 8008fcc:	0030      	movs	r0, r6
 8008fce:	f7ff ffc5 	bl	8008f5c <sbrk_aligned>
 8008fd2:	0004      	movs	r4, r0
 8008fd4:	1c43      	adds	r3, r0, #1
 8008fd6:	d15e      	bne.n	8009096 <_malloc_r+0xf6>
 8008fd8:	9b00      	ldr	r3, [sp, #0]
 8008fda:	681c      	ldr	r4, [r3, #0]
 8008fdc:	0025      	movs	r5, r4
 8008fde:	2d00      	cmp	r5, #0
 8008fe0:	d14e      	bne.n	8009080 <_malloc_r+0xe0>
 8008fe2:	2c00      	cmp	r4, #0
 8008fe4:	d051      	beq.n	800908a <_malloc_r+0xea>
 8008fe6:	6823      	ldr	r3, [r4, #0]
 8008fe8:	0029      	movs	r1, r5
 8008fea:	18e3      	adds	r3, r4, r3
 8008fec:	0030      	movs	r0, r6
 8008fee:	9301      	str	r3, [sp, #4]
 8008ff0:	f000 f906 	bl	8009200 <_sbrk_r>
 8008ff4:	9b01      	ldr	r3, [sp, #4]
 8008ff6:	4283      	cmp	r3, r0
 8008ff8:	d147      	bne.n	800908a <_malloc_r+0xea>
 8008ffa:	6823      	ldr	r3, [r4, #0]
 8008ffc:	0030      	movs	r0, r6
 8008ffe:	1aff      	subs	r7, r7, r3
 8009000:	0039      	movs	r1, r7
 8009002:	f7ff ffab 	bl	8008f5c <sbrk_aligned>
 8009006:	3001      	adds	r0, #1
 8009008:	d03f      	beq.n	800908a <_malloc_r+0xea>
 800900a:	6823      	ldr	r3, [r4, #0]
 800900c:	19db      	adds	r3, r3, r7
 800900e:	6023      	str	r3, [r4, #0]
 8009010:	9b00      	ldr	r3, [sp, #0]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d040      	beq.n	800909a <_malloc_r+0xfa>
 8009018:	685a      	ldr	r2, [r3, #4]
 800901a:	42a2      	cmp	r2, r4
 800901c:	d133      	bne.n	8009086 <_malloc_r+0xe6>
 800901e:	2200      	movs	r2, #0
 8009020:	605a      	str	r2, [r3, #4]
 8009022:	e014      	b.n	800904e <_malloc_r+0xae>
 8009024:	2b00      	cmp	r3, #0
 8009026:	dac5      	bge.n	8008fb4 <_malloc_r+0x14>
 8009028:	230c      	movs	r3, #12
 800902a:	2500      	movs	r5, #0
 800902c:	6033      	str	r3, [r6, #0]
 800902e:	0028      	movs	r0, r5
 8009030:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009032:	6821      	ldr	r1, [r4, #0]
 8009034:	1bc9      	subs	r1, r1, r7
 8009036:	d420      	bmi.n	800907a <_malloc_r+0xda>
 8009038:	290b      	cmp	r1, #11
 800903a:	d918      	bls.n	800906e <_malloc_r+0xce>
 800903c:	19e2      	adds	r2, r4, r7
 800903e:	6027      	str	r7, [r4, #0]
 8009040:	42a3      	cmp	r3, r4
 8009042:	d112      	bne.n	800906a <_malloc_r+0xca>
 8009044:	9b00      	ldr	r3, [sp, #0]
 8009046:	601a      	str	r2, [r3, #0]
 8009048:	6863      	ldr	r3, [r4, #4]
 800904a:	6011      	str	r1, [r2, #0]
 800904c:	6053      	str	r3, [r2, #4]
 800904e:	0030      	movs	r0, r6
 8009050:	0025      	movs	r5, r4
 8009052:	f000 f82f 	bl	80090b4 <__malloc_unlock>
 8009056:	2207      	movs	r2, #7
 8009058:	350b      	adds	r5, #11
 800905a:	1d23      	adds	r3, r4, #4
 800905c:	4395      	bics	r5, r2
 800905e:	1aea      	subs	r2, r5, r3
 8009060:	429d      	cmp	r5, r3
 8009062:	d0e4      	beq.n	800902e <_malloc_r+0x8e>
 8009064:	1b5b      	subs	r3, r3, r5
 8009066:	50a3      	str	r3, [r4, r2]
 8009068:	e7e1      	b.n	800902e <_malloc_r+0x8e>
 800906a:	605a      	str	r2, [r3, #4]
 800906c:	e7ec      	b.n	8009048 <_malloc_r+0xa8>
 800906e:	6862      	ldr	r2, [r4, #4]
 8009070:	42a3      	cmp	r3, r4
 8009072:	d1d5      	bne.n	8009020 <_malloc_r+0x80>
 8009074:	9b00      	ldr	r3, [sp, #0]
 8009076:	601a      	str	r2, [r3, #0]
 8009078:	e7e9      	b.n	800904e <_malloc_r+0xae>
 800907a:	0023      	movs	r3, r4
 800907c:	6864      	ldr	r4, [r4, #4]
 800907e:	e7a2      	b.n	8008fc6 <_malloc_r+0x26>
 8009080:	002c      	movs	r4, r5
 8009082:	686d      	ldr	r5, [r5, #4]
 8009084:	e7ab      	b.n	8008fde <_malloc_r+0x3e>
 8009086:	0013      	movs	r3, r2
 8009088:	e7c4      	b.n	8009014 <_malloc_r+0x74>
 800908a:	230c      	movs	r3, #12
 800908c:	0030      	movs	r0, r6
 800908e:	6033      	str	r3, [r6, #0]
 8009090:	f000 f810 	bl	80090b4 <__malloc_unlock>
 8009094:	e7cb      	b.n	800902e <_malloc_r+0x8e>
 8009096:	6027      	str	r7, [r4, #0]
 8009098:	e7d9      	b.n	800904e <_malloc_r+0xae>
 800909a:	605b      	str	r3, [r3, #4]
 800909c:	deff      	udf	#255	; 0xff
 800909e:	46c0      	nop			; (mov r8, r8)
 80090a0:	20001618 	.word	0x20001618

080090a4 <__malloc_lock>:
 80090a4:	b510      	push	{r4, lr}
 80090a6:	4802      	ldr	r0, [pc, #8]	; (80090b0 <__malloc_lock+0xc>)
 80090a8:	f000 f8e6 	bl	8009278 <__retarget_lock_acquire_recursive>
 80090ac:	bd10      	pop	{r4, pc}
 80090ae:	46c0      	nop			; (mov r8, r8)
 80090b0:	2000175c 	.word	0x2000175c

080090b4 <__malloc_unlock>:
 80090b4:	b510      	push	{r4, lr}
 80090b6:	4802      	ldr	r0, [pc, #8]	; (80090c0 <__malloc_unlock+0xc>)
 80090b8:	f000 f8df 	bl	800927a <__retarget_lock_release_recursive>
 80090bc:	bd10      	pop	{r4, pc}
 80090be:	46c0      	nop			; (mov r8, r8)
 80090c0:	2000175c 	.word	0x2000175c

080090c4 <realloc>:
 80090c4:	b510      	push	{r4, lr}
 80090c6:	4b03      	ldr	r3, [pc, #12]	; (80090d4 <realloc+0x10>)
 80090c8:	000a      	movs	r2, r1
 80090ca:	0001      	movs	r1, r0
 80090cc:	6818      	ldr	r0, [r3, #0]
 80090ce:	f000 f803 	bl	80090d8 <_realloc_r>
 80090d2:	bd10      	pop	{r4, pc}
 80090d4:	20000068 	.word	0x20000068

080090d8 <_realloc_r>:
 80090d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090da:	0007      	movs	r7, r0
 80090dc:	000e      	movs	r6, r1
 80090de:	0014      	movs	r4, r2
 80090e0:	2900      	cmp	r1, #0
 80090e2:	d105      	bne.n	80090f0 <_realloc_r+0x18>
 80090e4:	0011      	movs	r1, r2
 80090e6:	f7ff ff5b 	bl	8008fa0 <_malloc_r>
 80090ea:	0005      	movs	r5, r0
 80090ec:	0028      	movs	r0, r5
 80090ee:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80090f0:	2a00      	cmp	r2, #0
 80090f2:	d103      	bne.n	80090fc <_realloc_r+0x24>
 80090f4:	f000 f8cc 	bl	8009290 <_free_r>
 80090f8:	0025      	movs	r5, r4
 80090fa:	e7f7      	b.n	80090ec <_realloc_r+0x14>
 80090fc:	f000 f912 	bl	8009324 <_malloc_usable_size_r>
 8009100:	9001      	str	r0, [sp, #4]
 8009102:	4284      	cmp	r4, r0
 8009104:	d803      	bhi.n	800910e <_realloc_r+0x36>
 8009106:	0035      	movs	r5, r6
 8009108:	0843      	lsrs	r3, r0, #1
 800910a:	42a3      	cmp	r3, r4
 800910c:	d3ee      	bcc.n	80090ec <_realloc_r+0x14>
 800910e:	0021      	movs	r1, r4
 8009110:	0038      	movs	r0, r7
 8009112:	f7ff ff45 	bl	8008fa0 <_malloc_r>
 8009116:	1e05      	subs	r5, r0, #0
 8009118:	d0e8      	beq.n	80090ec <_realloc_r+0x14>
 800911a:	9b01      	ldr	r3, [sp, #4]
 800911c:	0022      	movs	r2, r4
 800911e:	429c      	cmp	r4, r3
 8009120:	d900      	bls.n	8009124 <_realloc_r+0x4c>
 8009122:	001a      	movs	r2, r3
 8009124:	0031      	movs	r1, r6
 8009126:	0028      	movs	r0, r5
 8009128:	f000 f8a8 	bl	800927c <memcpy>
 800912c:	0031      	movs	r1, r6
 800912e:	0038      	movs	r0, r7
 8009130:	f000 f8ae 	bl	8009290 <_free_r>
 8009134:	e7da      	b.n	80090ec <_realloc_r+0x14>
	...

08009138 <siprintf>:
 8009138:	b40e      	push	{r1, r2, r3}
 800913a:	b500      	push	{lr}
 800913c:	490b      	ldr	r1, [pc, #44]	; (800916c <siprintf+0x34>)
 800913e:	b09c      	sub	sp, #112	; 0x70
 8009140:	ab1d      	add	r3, sp, #116	; 0x74
 8009142:	9002      	str	r0, [sp, #8]
 8009144:	9006      	str	r0, [sp, #24]
 8009146:	9107      	str	r1, [sp, #28]
 8009148:	9104      	str	r1, [sp, #16]
 800914a:	4809      	ldr	r0, [pc, #36]	; (8009170 <siprintf+0x38>)
 800914c:	4909      	ldr	r1, [pc, #36]	; (8009174 <siprintf+0x3c>)
 800914e:	cb04      	ldmia	r3!, {r2}
 8009150:	9105      	str	r1, [sp, #20]
 8009152:	6800      	ldr	r0, [r0, #0]
 8009154:	a902      	add	r1, sp, #8
 8009156:	9301      	str	r3, [sp, #4]
 8009158:	f000 f94e 	bl	80093f8 <_svfiprintf_r>
 800915c:	2200      	movs	r2, #0
 800915e:	9b02      	ldr	r3, [sp, #8]
 8009160:	701a      	strb	r2, [r3, #0]
 8009162:	b01c      	add	sp, #112	; 0x70
 8009164:	bc08      	pop	{r3}
 8009166:	b003      	add	sp, #12
 8009168:	4718      	bx	r3
 800916a:	46c0      	nop			; (mov r8, r8)
 800916c:	7fffffff 	.word	0x7fffffff
 8009170:	20000068 	.word	0x20000068
 8009174:	ffff0208 	.word	0xffff0208

08009178 <memset>:
 8009178:	0003      	movs	r3, r0
 800917a:	1882      	adds	r2, r0, r2
 800917c:	4293      	cmp	r3, r2
 800917e:	d100      	bne.n	8009182 <memset+0xa>
 8009180:	4770      	bx	lr
 8009182:	7019      	strb	r1, [r3, #0]
 8009184:	3301      	adds	r3, #1
 8009186:	e7f9      	b.n	800917c <memset+0x4>

08009188 <strncmp>:
 8009188:	b530      	push	{r4, r5, lr}
 800918a:	0005      	movs	r5, r0
 800918c:	1e10      	subs	r0, r2, #0
 800918e:	d00b      	beq.n	80091a8 <strncmp+0x20>
 8009190:	2400      	movs	r4, #0
 8009192:	3a01      	subs	r2, #1
 8009194:	5d2b      	ldrb	r3, [r5, r4]
 8009196:	5d08      	ldrb	r0, [r1, r4]
 8009198:	4283      	cmp	r3, r0
 800919a:	d104      	bne.n	80091a6 <strncmp+0x1e>
 800919c:	42a2      	cmp	r2, r4
 800919e:	d002      	beq.n	80091a6 <strncmp+0x1e>
 80091a0:	3401      	adds	r4, #1
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1f6      	bne.n	8009194 <strncmp+0xc>
 80091a6:	1a18      	subs	r0, r3, r0
 80091a8:	bd30      	pop	{r4, r5, pc}

080091aa <strncpy>:
 80091aa:	0003      	movs	r3, r0
 80091ac:	b530      	push	{r4, r5, lr}
 80091ae:	001d      	movs	r5, r3
 80091b0:	2a00      	cmp	r2, #0
 80091b2:	d006      	beq.n	80091c2 <strncpy+0x18>
 80091b4:	780c      	ldrb	r4, [r1, #0]
 80091b6:	3a01      	subs	r2, #1
 80091b8:	3301      	adds	r3, #1
 80091ba:	702c      	strb	r4, [r5, #0]
 80091bc:	3101      	adds	r1, #1
 80091be:	2c00      	cmp	r4, #0
 80091c0:	d1f5      	bne.n	80091ae <strncpy+0x4>
 80091c2:	2100      	movs	r1, #0
 80091c4:	189a      	adds	r2, r3, r2
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d100      	bne.n	80091cc <strncpy+0x22>
 80091ca:	bd30      	pop	{r4, r5, pc}
 80091cc:	7019      	strb	r1, [r3, #0]
 80091ce:	3301      	adds	r3, #1
 80091d0:	e7f9      	b.n	80091c6 <strncpy+0x1c>

080091d2 <strstr>:
 80091d2:	780a      	ldrb	r2, [r1, #0]
 80091d4:	b530      	push	{r4, r5, lr}
 80091d6:	2a00      	cmp	r2, #0
 80091d8:	d10c      	bne.n	80091f4 <strstr+0x22>
 80091da:	bd30      	pop	{r4, r5, pc}
 80091dc:	429a      	cmp	r2, r3
 80091de:	d108      	bne.n	80091f2 <strstr+0x20>
 80091e0:	2301      	movs	r3, #1
 80091e2:	5ccc      	ldrb	r4, [r1, r3]
 80091e4:	2c00      	cmp	r4, #0
 80091e6:	d0f8      	beq.n	80091da <strstr+0x8>
 80091e8:	5cc5      	ldrb	r5, [r0, r3]
 80091ea:	42a5      	cmp	r5, r4
 80091ec:	d101      	bne.n	80091f2 <strstr+0x20>
 80091ee:	3301      	adds	r3, #1
 80091f0:	e7f7      	b.n	80091e2 <strstr+0x10>
 80091f2:	3001      	adds	r0, #1
 80091f4:	7803      	ldrb	r3, [r0, #0]
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d1f0      	bne.n	80091dc <strstr+0xa>
 80091fa:	0018      	movs	r0, r3
 80091fc:	e7ed      	b.n	80091da <strstr+0x8>
	...

08009200 <_sbrk_r>:
 8009200:	2300      	movs	r3, #0
 8009202:	b570      	push	{r4, r5, r6, lr}
 8009204:	4d06      	ldr	r5, [pc, #24]	; (8009220 <_sbrk_r+0x20>)
 8009206:	0004      	movs	r4, r0
 8009208:	0008      	movs	r0, r1
 800920a:	602b      	str	r3, [r5, #0]
 800920c:	f7fa ff2c 	bl	8004068 <_sbrk>
 8009210:	1c43      	adds	r3, r0, #1
 8009212:	d103      	bne.n	800921c <_sbrk_r+0x1c>
 8009214:	682b      	ldr	r3, [r5, #0]
 8009216:	2b00      	cmp	r3, #0
 8009218:	d000      	beq.n	800921c <_sbrk_r+0x1c>
 800921a:	6023      	str	r3, [r4, #0]
 800921c:	bd70      	pop	{r4, r5, r6, pc}
 800921e:	46c0      	nop			; (mov r8, r8)
 8009220:	20001758 	.word	0x20001758

08009224 <__errno>:
 8009224:	4b01      	ldr	r3, [pc, #4]	; (800922c <__errno+0x8>)
 8009226:	6818      	ldr	r0, [r3, #0]
 8009228:	4770      	bx	lr
 800922a:	46c0      	nop			; (mov r8, r8)
 800922c:	20000068 	.word	0x20000068

08009230 <__libc_init_array>:
 8009230:	b570      	push	{r4, r5, r6, lr}
 8009232:	2600      	movs	r6, #0
 8009234:	4c0c      	ldr	r4, [pc, #48]	; (8009268 <__libc_init_array+0x38>)
 8009236:	4d0d      	ldr	r5, [pc, #52]	; (800926c <__libc_init_array+0x3c>)
 8009238:	1b64      	subs	r4, r4, r5
 800923a:	10a4      	asrs	r4, r4, #2
 800923c:	42a6      	cmp	r6, r4
 800923e:	d109      	bne.n	8009254 <__libc_init_array+0x24>
 8009240:	2600      	movs	r6, #0
 8009242:	f000 fb77 	bl	8009934 <_init>
 8009246:	4c0a      	ldr	r4, [pc, #40]	; (8009270 <__libc_init_array+0x40>)
 8009248:	4d0a      	ldr	r5, [pc, #40]	; (8009274 <__libc_init_array+0x44>)
 800924a:	1b64      	subs	r4, r4, r5
 800924c:	10a4      	asrs	r4, r4, #2
 800924e:	42a6      	cmp	r6, r4
 8009250:	d105      	bne.n	800925e <__libc_init_array+0x2e>
 8009252:	bd70      	pop	{r4, r5, r6, pc}
 8009254:	00b3      	lsls	r3, r6, #2
 8009256:	58eb      	ldr	r3, [r5, r3]
 8009258:	4798      	blx	r3
 800925a:	3601      	adds	r6, #1
 800925c:	e7ee      	b.n	800923c <__libc_init_array+0xc>
 800925e:	00b3      	lsls	r3, r6, #2
 8009260:	58eb      	ldr	r3, [r5, r3]
 8009262:	4798      	blx	r3
 8009264:	3601      	adds	r6, #1
 8009266:	e7f2      	b.n	800924e <__libc_init_array+0x1e>
 8009268:	08009fa8 	.word	0x08009fa8
 800926c:	08009fa8 	.word	0x08009fa8
 8009270:	08009fac 	.word	0x08009fac
 8009274:	08009fa8 	.word	0x08009fa8

08009278 <__retarget_lock_acquire_recursive>:
 8009278:	4770      	bx	lr

0800927a <__retarget_lock_release_recursive>:
 800927a:	4770      	bx	lr

0800927c <memcpy>:
 800927c:	2300      	movs	r3, #0
 800927e:	b510      	push	{r4, lr}
 8009280:	429a      	cmp	r2, r3
 8009282:	d100      	bne.n	8009286 <memcpy+0xa>
 8009284:	bd10      	pop	{r4, pc}
 8009286:	5ccc      	ldrb	r4, [r1, r3]
 8009288:	54c4      	strb	r4, [r0, r3]
 800928a:	3301      	adds	r3, #1
 800928c:	e7f8      	b.n	8009280 <memcpy+0x4>
	...

08009290 <_free_r>:
 8009290:	b570      	push	{r4, r5, r6, lr}
 8009292:	0005      	movs	r5, r0
 8009294:	2900      	cmp	r1, #0
 8009296:	d010      	beq.n	80092ba <_free_r+0x2a>
 8009298:	1f0c      	subs	r4, r1, #4
 800929a:	6823      	ldr	r3, [r4, #0]
 800929c:	2b00      	cmp	r3, #0
 800929e:	da00      	bge.n	80092a2 <_free_r+0x12>
 80092a0:	18e4      	adds	r4, r4, r3
 80092a2:	0028      	movs	r0, r5
 80092a4:	f7ff fefe 	bl	80090a4 <__malloc_lock>
 80092a8:	4a1d      	ldr	r2, [pc, #116]	; (8009320 <_free_r+0x90>)
 80092aa:	6813      	ldr	r3, [r2, #0]
 80092ac:	2b00      	cmp	r3, #0
 80092ae:	d105      	bne.n	80092bc <_free_r+0x2c>
 80092b0:	6063      	str	r3, [r4, #4]
 80092b2:	6014      	str	r4, [r2, #0]
 80092b4:	0028      	movs	r0, r5
 80092b6:	f7ff fefd 	bl	80090b4 <__malloc_unlock>
 80092ba:	bd70      	pop	{r4, r5, r6, pc}
 80092bc:	42a3      	cmp	r3, r4
 80092be:	d908      	bls.n	80092d2 <_free_r+0x42>
 80092c0:	6820      	ldr	r0, [r4, #0]
 80092c2:	1821      	adds	r1, r4, r0
 80092c4:	428b      	cmp	r3, r1
 80092c6:	d1f3      	bne.n	80092b0 <_free_r+0x20>
 80092c8:	6819      	ldr	r1, [r3, #0]
 80092ca:	685b      	ldr	r3, [r3, #4]
 80092cc:	1809      	adds	r1, r1, r0
 80092ce:	6021      	str	r1, [r4, #0]
 80092d0:	e7ee      	b.n	80092b0 <_free_r+0x20>
 80092d2:	001a      	movs	r2, r3
 80092d4:	685b      	ldr	r3, [r3, #4]
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d001      	beq.n	80092de <_free_r+0x4e>
 80092da:	42a3      	cmp	r3, r4
 80092dc:	d9f9      	bls.n	80092d2 <_free_r+0x42>
 80092de:	6811      	ldr	r1, [r2, #0]
 80092e0:	1850      	adds	r0, r2, r1
 80092e2:	42a0      	cmp	r0, r4
 80092e4:	d10b      	bne.n	80092fe <_free_r+0x6e>
 80092e6:	6820      	ldr	r0, [r4, #0]
 80092e8:	1809      	adds	r1, r1, r0
 80092ea:	1850      	adds	r0, r2, r1
 80092ec:	6011      	str	r1, [r2, #0]
 80092ee:	4283      	cmp	r3, r0
 80092f0:	d1e0      	bne.n	80092b4 <_free_r+0x24>
 80092f2:	6818      	ldr	r0, [r3, #0]
 80092f4:	685b      	ldr	r3, [r3, #4]
 80092f6:	1841      	adds	r1, r0, r1
 80092f8:	6011      	str	r1, [r2, #0]
 80092fa:	6053      	str	r3, [r2, #4]
 80092fc:	e7da      	b.n	80092b4 <_free_r+0x24>
 80092fe:	42a0      	cmp	r0, r4
 8009300:	d902      	bls.n	8009308 <_free_r+0x78>
 8009302:	230c      	movs	r3, #12
 8009304:	602b      	str	r3, [r5, #0]
 8009306:	e7d5      	b.n	80092b4 <_free_r+0x24>
 8009308:	6820      	ldr	r0, [r4, #0]
 800930a:	1821      	adds	r1, r4, r0
 800930c:	428b      	cmp	r3, r1
 800930e:	d103      	bne.n	8009318 <_free_r+0x88>
 8009310:	6819      	ldr	r1, [r3, #0]
 8009312:	685b      	ldr	r3, [r3, #4]
 8009314:	1809      	adds	r1, r1, r0
 8009316:	6021      	str	r1, [r4, #0]
 8009318:	6063      	str	r3, [r4, #4]
 800931a:	6054      	str	r4, [r2, #4]
 800931c:	e7ca      	b.n	80092b4 <_free_r+0x24>
 800931e:	46c0      	nop			; (mov r8, r8)
 8009320:	20001618 	.word	0x20001618

08009324 <_malloc_usable_size_r>:
 8009324:	1f0b      	subs	r3, r1, #4
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	1f18      	subs	r0, r3, #4
 800932a:	2b00      	cmp	r3, #0
 800932c:	da01      	bge.n	8009332 <_malloc_usable_size_r+0xe>
 800932e:	580b      	ldr	r3, [r1, r0]
 8009330:	18c0      	adds	r0, r0, r3
 8009332:	4770      	bx	lr

08009334 <__ssputs_r>:
 8009334:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009336:	b085      	sub	sp, #20
 8009338:	9301      	str	r3, [sp, #4]
 800933a:	9203      	str	r2, [sp, #12]
 800933c:	688e      	ldr	r6, [r1, #8]
 800933e:	9a01      	ldr	r2, [sp, #4]
 8009340:	0007      	movs	r7, r0
 8009342:	000c      	movs	r4, r1
 8009344:	680b      	ldr	r3, [r1, #0]
 8009346:	4296      	cmp	r6, r2
 8009348:	d831      	bhi.n	80093ae <__ssputs_r+0x7a>
 800934a:	898a      	ldrh	r2, [r1, #12]
 800934c:	2190      	movs	r1, #144	; 0x90
 800934e:	00c9      	lsls	r1, r1, #3
 8009350:	420a      	tst	r2, r1
 8009352:	d029      	beq.n	80093a8 <__ssputs_r+0x74>
 8009354:	2003      	movs	r0, #3
 8009356:	6921      	ldr	r1, [r4, #16]
 8009358:	1a5b      	subs	r3, r3, r1
 800935a:	9302      	str	r3, [sp, #8]
 800935c:	6963      	ldr	r3, [r4, #20]
 800935e:	4343      	muls	r3, r0
 8009360:	0fdd      	lsrs	r5, r3, #31
 8009362:	18ed      	adds	r5, r5, r3
 8009364:	9b01      	ldr	r3, [sp, #4]
 8009366:	9802      	ldr	r0, [sp, #8]
 8009368:	3301      	adds	r3, #1
 800936a:	181b      	adds	r3, r3, r0
 800936c:	106d      	asrs	r5, r5, #1
 800936e:	42ab      	cmp	r3, r5
 8009370:	d900      	bls.n	8009374 <__ssputs_r+0x40>
 8009372:	001d      	movs	r5, r3
 8009374:	0552      	lsls	r2, r2, #21
 8009376:	d529      	bpl.n	80093cc <__ssputs_r+0x98>
 8009378:	0029      	movs	r1, r5
 800937a:	0038      	movs	r0, r7
 800937c:	f7ff fe10 	bl	8008fa0 <_malloc_r>
 8009380:	1e06      	subs	r6, r0, #0
 8009382:	d02d      	beq.n	80093e0 <__ssputs_r+0xac>
 8009384:	9a02      	ldr	r2, [sp, #8]
 8009386:	6921      	ldr	r1, [r4, #16]
 8009388:	f7ff ff78 	bl	800927c <memcpy>
 800938c:	89a2      	ldrh	r2, [r4, #12]
 800938e:	4b19      	ldr	r3, [pc, #100]	; (80093f4 <__ssputs_r+0xc0>)
 8009390:	401a      	ands	r2, r3
 8009392:	2380      	movs	r3, #128	; 0x80
 8009394:	4313      	orrs	r3, r2
 8009396:	81a3      	strh	r3, [r4, #12]
 8009398:	9b02      	ldr	r3, [sp, #8]
 800939a:	6126      	str	r6, [r4, #16]
 800939c:	18f6      	adds	r6, r6, r3
 800939e:	6026      	str	r6, [r4, #0]
 80093a0:	6165      	str	r5, [r4, #20]
 80093a2:	9e01      	ldr	r6, [sp, #4]
 80093a4:	1aed      	subs	r5, r5, r3
 80093a6:	60a5      	str	r5, [r4, #8]
 80093a8:	9b01      	ldr	r3, [sp, #4]
 80093aa:	429e      	cmp	r6, r3
 80093ac:	d900      	bls.n	80093b0 <__ssputs_r+0x7c>
 80093ae:	9e01      	ldr	r6, [sp, #4]
 80093b0:	0032      	movs	r2, r6
 80093b2:	9903      	ldr	r1, [sp, #12]
 80093b4:	6820      	ldr	r0, [r4, #0]
 80093b6:	f000 fa9f 	bl	80098f8 <memmove>
 80093ba:	2000      	movs	r0, #0
 80093bc:	68a3      	ldr	r3, [r4, #8]
 80093be:	1b9b      	subs	r3, r3, r6
 80093c0:	60a3      	str	r3, [r4, #8]
 80093c2:	6823      	ldr	r3, [r4, #0]
 80093c4:	199b      	adds	r3, r3, r6
 80093c6:	6023      	str	r3, [r4, #0]
 80093c8:	b005      	add	sp, #20
 80093ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093cc:	002a      	movs	r2, r5
 80093ce:	0038      	movs	r0, r7
 80093d0:	f7ff fe82 	bl	80090d8 <_realloc_r>
 80093d4:	1e06      	subs	r6, r0, #0
 80093d6:	d1df      	bne.n	8009398 <__ssputs_r+0x64>
 80093d8:	0038      	movs	r0, r7
 80093da:	6921      	ldr	r1, [r4, #16]
 80093dc:	f7ff ff58 	bl	8009290 <_free_r>
 80093e0:	230c      	movs	r3, #12
 80093e2:	2001      	movs	r0, #1
 80093e4:	603b      	str	r3, [r7, #0]
 80093e6:	89a2      	ldrh	r2, [r4, #12]
 80093e8:	3334      	adds	r3, #52	; 0x34
 80093ea:	4313      	orrs	r3, r2
 80093ec:	81a3      	strh	r3, [r4, #12]
 80093ee:	4240      	negs	r0, r0
 80093f0:	e7ea      	b.n	80093c8 <__ssputs_r+0x94>
 80093f2:	46c0      	nop			; (mov r8, r8)
 80093f4:	fffffb7f 	.word	0xfffffb7f

080093f8 <_svfiprintf_r>:
 80093f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093fa:	b0a1      	sub	sp, #132	; 0x84
 80093fc:	9003      	str	r0, [sp, #12]
 80093fe:	001d      	movs	r5, r3
 8009400:	898b      	ldrh	r3, [r1, #12]
 8009402:	000f      	movs	r7, r1
 8009404:	0016      	movs	r6, r2
 8009406:	061b      	lsls	r3, r3, #24
 8009408:	d511      	bpl.n	800942e <_svfiprintf_r+0x36>
 800940a:	690b      	ldr	r3, [r1, #16]
 800940c:	2b00      	cmp	r3, #0
 800940e:	d10e      	bne.n	800942e <_svfiprintf_r+0x36>
 8009410:	2140      	movs	r1, #64	; 0x40
 8009412:	f7ff fdc5 	bl	8008fa0 <_malloc_r>
 8009416:	6038      	str	r0, [r7, #0]
 8009418:	6138      	str	r0, [r7, #16]
 800941a:	2800      	cmp	r0, #0
 800941c:	d105      	bne.n	800942a <_svfiprintf_r+0x32>
 800941e:	230c      	movs	r3, #12
 8009420:	9a03      	ldr	r2, [sp, #12]
 8009422:	3801      	subs	r0, #1
 8009424:	6013      	str	r3, [r2, #0]
 8009426:	b021      	add	sp, #132	; 0x84
 8009428:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800942a:	2340      	movs	r3, #64	; 0x40
 800942c:	617b      	str	r3, [r7, #20]
 800942e:	2300      	movs	r3, #0
 8009430:	ac08      	add	r4, sp, #32
 8009432:	6163      	str	r3, [r4, #20]
 8009434:	3320      	adds	r3, #32
 8009436:	7663      	strb	r3, [r4, #25]
 8009438:	3310      	adds	r3, #16
 800943a:	76a3      	strb	r3, [r4, #26]
 800943c:	9507      	str	r5, [sp, #28]
 800943e:	0035      	movs	r5, r6
 8009440:	782b      	ldrb	r3, [r5, #0]
 8009442:	2b00      	cmp	r3, #0
 8009444:	d001      	beq.n	800944a <_svfiprintf_r+0x52>
 8009446:	2b25      	cmp	r3, #37	; 0x25
 8009448:	d148      	bne.n	80094dc <_svfiprintf_r+0xe4>
 800944a:	1bab      	subs	r3, r5, r6
 800944c:	9305      	str	r3, [sp, #20]
 800944e:	42b5      	cmp	r5, r6
 8009450:	d00b      	beq.n	800946a <_svfiprintf_r+0x72>
 8009452:	0032      	movs	r2, r6
 8009454:	0039      	movs	r1, r7
 8009456:	9803      	ldr	r0, [sp, #12]
 8009458:	f7ff ff6c 	bl	8009334 <__ssputs_r>
 800945c:	3001      	adds	r0, #1
 800945e:	d100      	bne.n	8009462 <_svfiprintf_r+0x6a>
 8009460:	e0af      	b.n	80095c2 <_svfiprintf_r+0x1ca>
 8009462:	6963      	ldr	r3, [r4, #20]
 8009464:	9a05      	ldr	r2, [sp, #20]
 8009466:	189b      	adds	r3, r3, r2
 8009468:	6163      	str	r3, [r4, #20]
 800946a:	782b      	ldrb	r3, [r5, #0]
 800946c:	2b00      	cmp	r3, #0
 800946e:	d100      	bne.n	8009472 <_svfiprintf_r+0x7a>
 8009470:	e0a7      	b.n	80095c2 <_svfiprintf_r+0x1ca>
 8009472:	2201      	movs	r2, #1
 8009474:	2300      	movs	r3, #0
 8009476:	4252      	negs	r2, r2
 8009478:	6062      	str	r2, [r4, #4]
 800947a:	a904      	add	r1, sp, #16
 800947c:	3254      	adds	r2, #84	; 0x54
 800947e:	1852      	adds	r2, r2, r1
 8009480:	1c6e      	adds	r6, r5, #1
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	60e3      	str	r3, [r4, #12]
 8009486:	60a3      	str	r3, [r4, #8]
 8009488:	7013      	strb	r3, [r2, #0]
 800948a:	65a3      	str	r3, [r4, #88]	; 0x58
 800948c:	4b55      	ldr	r3, [pc, #340]	; (80095e4 <_svfiprintf_r+0x1ec>)
 800948e:	2205      	movs	r2, #5
 8009490:	0018      	movs	r0, r3
 8009492:	7831      	ldrb	r1, [r6, #0]
 8009494:	9305      	str	r3, [sp, #20]
 8009496:	f000 fa42 	bl	800991e <memchr>
 800949a:	1c75      	adds	r5, r6, #1
 800949c:	2800      	cmp	r0, #0
 800949e:	d11f      	bne.n	80094e0 <_svfiprintf_r+0xe8>
 80094a0:	6822      	ldr	r2, [r4, #0]
 80094a2:	06d3      	lsls	r3, r2, #27
 80094a4:	d504      	bpl.n	80094b0 <_svfiprintf_r+0xb8>
 80094a6:	2353      	movs	r3, #83	; 0x53
 80094a8:	a904      	add	r1, sp, #16
 80094aa:	185b      	adds	r3, r3, r1
 80094ac:	2120      	movs	r1, #32
 80094ae:	7019      	strb	r1, [r3, #0]
 80094b0:	0713      	lsls	r3, r2, #28
 80094b2:	d504      	bpl.n	80094be <_svfiprintf_r+0xc6>
 80094b4:	2353      	movs	r3, #83	; 0x53
 80094b6:	a904      	add	r1, sp, #16
 80094b8:	185b      	adds	r3, r3, r1
 80094ba:	212b      	movs	r1, #43	; 0x2b
 80094bc:	7019      	strb	r1, [r3, #0]
 80094be:	7833      	ldrb	r3, [r6, #0]
 80094c0:	2b2a      	cmp	r3, #42	; 0x2a
 80094c2:	d016      	beq.n	80094f2 <_svfiprintf_r+0xfa>
 80094c4:	0035      	movs	r5, r6
 80094c6:	2100      	movs	r1, #0
 80094c8:	200a      	movs	r0, #10
 80094ca:	68e3      	ldr	r3, [r4, #12]
 80094cc:	782a      	ldrb	r2, [r5, #0]
 80094ce:	1c6e      	adds	r6, r5, #1
 80094d0:	3a30      	subs	r2, #48	; 0x30
 80094d2:	2a09      	cmp	r2, #9
 80094d4:	d94e      	bls.n	8009574 <_svfiprintf_r+0x17c>
 80094d6:	2900      	cmp	r1, #0
 80094d8:	d111      	bne.n	80094fe <_svfiprintf_r+0x106>
 80094da:	e017      	b.n	800950c <_svfiprintf_r+0x114>
 80094dc:	3501      	adds	r5, #1
 80094de:	e7af      	b.n	8009440 <_svfiprintf_r+0x48>
 80094e0:	9b05      	ldr	r3, [sp, #20]
 80094e2:	6822      	ldr	r2, [r4, #0]
 80094e4:	1ac0      	subs	r0, r0, r3
 80094e6:	2301      	movs	r3, #1
 80094e8:	4083      	lsls	r3, r0
 80094ea:	4313      	orrs	r3, r2
 80094ec:	002e      	movs	r6, r5
 80094ee:	6023      	str	r3, [r4, #0]
 80094f0:	e7cc      	b.n	800948c <_svfiprintf_r+0x94>
 80094f2:	9b07      	ldr	r3, [sp, #28]
 80094f4:	1d19      	adds	r1, r3, #4
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	9107      	str	r1, [sp, #28]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	db01      	blt.n	8009502 <_svfiprintf_r+0x10a>
 80094fe:	930b      	str	r3, [sp, #44]	; 0x2c
 8009500:	e004      	b.n	800950c <_svfiprintf_r+0x114>
 8009502:	425b      	negs	r3, r3
 8009504:	60e3      	str	r3, [r4, #12]
 8009506:	2302      	movs	r3, #2
 8009508:	4313      	orrs	r3, r2
 800950a:	6023      	str	r3, [r4, #0]
 800950c:	782b      	ldrb	r3, [r5, #0]
 800950e:	2b2e      	cmp	r3, #46	; 0x2e
 8009510:	d10a      	bne.n	8009528 <_svfiprintf_r+0x130>
 8009512:	786b      	ldrb	r3, [r5, #1]
 8009514:	2b2a      	cmp	r3, #42	; 0x2a
 8009516:	d135      	bne.n	8009584 <_svfiprintf_r+0x18c>
 8009518:	9b07      	ldr	r3, [sp, #28]
 800951a:	3502      	adds	r5, #2
 800951c:	1d1a      	adds	r2, r3, #4
 800951e:	681b      	ldr	r3, [r3, #0]
 8009520:	9207      	str	r2, [sp, #28]
 8009522:	2b00      	cmp	r3, #0
 8009524:	db2b      	blt.n	800957e <_svfiprintf_r+0x186>
 8009526:	9309      	str	r3, [sp, #36]	; 0x24
 8009528:	4e2f      	ldr	r6, [pc, #188]	; (80095e8 <_svfiprintf_r+0x1f0>)
 800952a:	2203      	movs	r2, #3
 800952c:	0030      	movs	r0, r6
 800952e:	7829      	ldrb	r1, [r5, #0]
 8009530:	f000 f9f5 	bl	800991e <memchr>
 8009534:	2800      	cmp	r0, #0
 8009536:	d006      	beq.n	8009546 <_svfiprintf_r+0x14e>
 8009538:	2340      	movs	r3, #64	; 0x40
 800953a:	1b80      	subs	r0, r0, r6
 800953c:	4083      	lsls	r3, r0
 800953e:	6822      	ldr	r2, [r4, #0]
 8009540:	3501      	adds	r5, #1
 8009542:	4313      	orrs	r3, r2
 8009544:	6023      	str	r3, [r4, #0]
 8009546:	7829      	ldrb	r1, [r5, #0]
 8009548:	2206      	movs	r2, #6
 800954a:	4828      	ldr	r0, [pc, #160]	; (80095ec <_svfiprintf_r+0x1f4>)
 800954c:	1c6e      	adds	r6, r5, #1
 800954e:	7621      	strb	r1, [r4, #24]
 8009550:	f000 f9e5 	bl	800991e <memchr>
 8009554:	2800      	cmp	r0, #0
 8009556:	d03c      	beq.n	80095d2 <_svfiprintf_r+0x1da>
 8009558:	4b25      	ldr	r3, [pc, #148]	; (80095f0 <_svfiprintf_r+0x1f8>)
 800955a:	2b00      	cmp	r3, #0
 800955c:	d125      	bne.n	80095aa <_svfiprintf_r+0x1b2>
 800955e:	2207      	movs	r2, #7
 8009560:	9b07      	ldr	r3, [sp, #28]
 8009562:	3307      	adds	r3, #7
 8009564:	4393      	bics	r3, r2
 8009566:	3308      	adds	r3, #8
 8009568:	9307      	str	r3, [sp, #28]
 800956a:	6963      	ldr	r3, [r4, #20]
 800956c:	9a04      	ldr	r2, [sp, #16]
 800956e:	189b      	adds	r3, r3, r2
 8009570:	6163      	str	r3, [r4, #20]
 8009572:	e764      	b.n	800943e <_svfiprintf_r+0x46>
 8009574:	4343      	muls	r3, r0
 8009576:	0035      	movs	r5, r6
 8009578:	2101      	movs	r1, #1
 800957a:	189b      	adds	r3, r3, r2
 800957c:	e7a6      	b.n	80094cc <_svfiprintf_r+0xd4>
 800957e:	2301      	movs	r3, #1
 8009580:	425b      	negs	r3, r3
 8009582:	e7d0      	b.n	8009526 <_svfiprintf_r+0x12e>
 8009584:	2300      	movs	r3, #0
 8009586:	200a      	movs	r0, #10
 8009588:	001a      	movs	r2, r3
 800958a:	3501      	adds	r5, #1
 800958c:	6063      	str	r3, [r4, #4]
 800958e:	7829      	ldrb	r1, [r5, #0]
 8009590:	1c6e      	adds	r6, r5, #1
 8009592:	3930      	subs	r1, #48	; 0x30
 8009594:	2909      	cmp	r1, #9
 8009596:	d903      	bls.n	80095a0 <_svfiprintf_r+0x1a8>
 8009598:	2b00      	cmp	r3, #0
 800959a:	d0c5      	beq.n	8009528 <_svfiprintf_r+0x130>
 800959c:	9209      	str	r2, [sp, #36]	; 0x24
 800959e:	e7c3      	b.n	8009528 <_svfiprintf_r+0x130>
 80095a0:	4342      	muls	r2, r0
 80095a2:	0035      	movs	r5, r6
 80095a4:	2301      	movs	r3, #1
 80095a6:	1852      	adds	r2, r2, r1
 80095a8:	e7f1      	b.n	800958e <_svfiprintf_r+0x196>
 80095aa:	aa07      	add	r2, sp, #28
 80095ac:	9200      	str	r2, [sp, #0]
 80095ae:	0021      	movs	r1, r4
 80095b0:	003a      	movs	r2, r7
 80095b2:	4b10      	ldr	r3, [pc, #64]	; (80095f4 <_svfiprintf_r+0x1fc>)
 80095b4:	9803      	ldr	r0, [sp, #12]
 80095b6:	e000      	b.n	80095ba <_svfiprintf_r+0x1c2>
 80095b8:	bf00      	nop
 80095ba:	9004      	str	r0, [sp, #16]
 80095bc:	9b04      	ldr	r3, [sp, #16]
 80095be:	3301      	adds	r3, #1
 80095c0:	d1d3      	bne.n	800956a <_svfiprintf_r+0x172>
 80095c2:	89bb      	ldrh	r3, [r7, #12]
 80095c4:	980d      	ldr	r0, [sp, #52]	; 0x34
 80095c6:	065b      	lsls	r3, r3, #25
 80095c8:	d400      	bmi.n	80095cc <_svfiprintf_r+0x1d4>
 80095ca:	e72c      	b.n	8009426 <_svfiprintf_r+0x2e>
 80095cc:	2001      	movs	r0, #1
 80095ce:	4240      	negs	r0, r0
 80095d0:	e729      	b.n	8009426 <_svfiprintf_r+0x2e>
 80095d2:	aa07      	add	r2, sp, #28
 80095d4:	9200      	str	r2, [sp, #0]
 80095d6:	0021      	movs	r1, r4
 80095d8:	003a      	movs	r2, r7
 80095da:	4b06      	ldr	r3, [pc, #24]	; (80095f4 <_svfiprintf_r+0x1fc>)
 80095dc:	9803      	ldr	r0, [sp, #12]
 80095de:	f000 f87b 	bl	80096d8 <_printf_i>
 80095e2:	e7ea      	b.n	80095ba <_svfiprintf_r+0x1c2>
 80095e4:	08009f6c 	.word	0x08009f6c
 80095e8:	08009f72 	.word	0x08009f72
 80095ec:	08009f76 	.word	0x08009f76
 80095f0:	00000000 	.word	0x00000000
 80095f4:	08009335 	.word	0x08009335

080095f8 <_printf_common>:
 80095f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80095fa:	0016      	movs	r6, r2
 80095fc:	9301      	str	r3, [sp, #4]
 80095fe:	688a      	ldr	r2, [r1, #8]
 8009600:	690b      	ldr	r3, [r1, #16]
 8009602:	000c      	movs	r4, r1
 8009604:	9000      	str	r0, [sp, #0]
 8009606:	4293      	cmp	r3, r2
 8009608:	da00      	bge.n	800960c <_printf_common+0x14>
 800960a:	0013      	movs	r3, r2
 800960c:	0022      	movs	r2, r4
 800960e:	6033      	str	r3, [r6, #0]
 8009610:	3243      	adds	r2, #67	; 0x43
 8009612:	7812      	ldrb	r2, [r2, #0]
 8009614:	2a00      	cmp	r2, #0
 8009616:	d001      	beq.n	800961c <_printf_common+0x24>
 8009618:	3301      	adds	r3, #1
 800961a:	6033      	str	r3, [r6, #0]
 800961c:	6823      	ldr	r3, [r4, #0]
 800961e:	069b      	lsls	r3, r3, #26
 8009620:	d502      	bpl.n	8009628 <_printf_common+0x30>
 8009622:	6833      	ldr	r3, [r6, #0]
 8009624:	3302      	adds	r3, #2
 8009626:	6033      	str	r3, [r6, #0]
 8009628:	6822      	ldr	r2, [r4, #0]
 800962a:	2306      	movs	r3, #6
 800962c:	0015      	movs	r5, r2
 800962e:	401d      	ands	r5, r3
 8009630:	421a      	tst	r2, r3
 8009632:	d027      	beq.n	8009684 <_printf_common+0x8c>
 8009634:	0023      	movs	r3, r4
 8009636:	3343      	adds	r3, #67	; 0x43
 8009638:	781b      	ldrb	r3, [r3, #0]
 800963a:	1e5a      	subs	r2, r3, #1
 800963c:	4193      	sbcs	r3, r2
 800963e:	6822      	ldr	r2, [r4, #0]
 8009640:	0692      	lsls	r2, r2, #26
 8009642:	d430      	bmi.n	80096a6 <_printf_common+0xae>
 8009644:	0022      	movs	r2, r4
 8009646:	9901      	ldr	r1, [sp, #4]
 8009648:	9800      	ldr	r0, [sp, #0]
 800964a:	9d08      	ldr	r5, [sp, #32]
 800964c:	3243      	adds	r2, #67	; 0x43
 800964e:	47a8      	blx	r5
 8009650:	3001      	adds	r0, #1
 8009652:	d025      	beq.n	80096a0 <_printf_common+0xa8>
 8009654:	2206      	movs	r2, #6
 8009656:	6823      	ldr	r3, [r4, #0]
 8009658:	2500      	movs	r5, #0
 800965a:	4013      	ands	r3, r2
 800965c:	2b04      	cmp	r3, #4
 800965e:	d105      	bne.n	800966c <_printf_common+0x74>
 8009660:	6833      	ldr	r3, [r6, #0]
 8009662:	68e5      	ldr	r5, [r4, #12]
 8009664:	1aed      	subs	r5, r5, r3
 8009666:	43eb      	mvns	r3, r5
 8009668:	17db      	asrs	r3, r3, #31
 800966a:	401d      	ands	r5, r3
 800966c:	68a3      	ldr	r3, [r4, #8]
 800966e:	6922      	ldr	r2, [r4, #16]
 8009670:	4293      	cmp	r3, r2
 8009672:	dd01      	ble.n	8009678 <_printf_common+0x80>
 8009674:	1a9b      	subs	r3, r3, r2
 8009676:	18ed      	adds	r5, r5, r3
 8009678:	2600      	movs	r6, #0
 800967a:	42b5      	cmp	r5, r6
 800967c:	d120      	bne.n	80096c0 <_printf_common+0xc8>
 800967e:	2000      	movs	r0, #0
 8009680:	e010      	b.n	80096a4 <_printf_common+0xac>
 8009682:	3501      	adds	r5, #1
 8009684:	68e3      	ldr	r3, [r4, #12]
 8009686:	6832      	ldr	r2, [r6, #0]
 8009688:	1a9b      	subs	r3, r3, r2
 800968a:	42ab      	cmp	r3, r5
 800968c:	ddd2      	ble.n	8009634 <_printf_common+0x3c>
 800968e:	0022      	movs	r2, r4
 8009690:	2301      	movs	r3, #1
 8009692:	9901      	ldr	r1, [sp, #4]
 8009694:	9800      	ldr	r0, [sp, #0]
 8009696:	9f08      	ldr	r7, [sp, #32]
 8009698:	3219      	adds	r2, #25
 800969a:	47b8      	blx	r7
 800969c:	3001      	adds	r0, #1
 800969e:	d1f0      	bne.n	8009682 <_printf_common+0x8a>
 80096a0:	2001      	movs	r0, #1
 80096a2:	4240      	negs	r0, r0
 80096a4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 80096a6:	2030      	movs	r0, #48	; 0x30
 80096a8:	18e1      	adds	r1, r4, r3
 80096aa:	3143      	adds	r1, #67	; 0x43
 80096ac:	7008      	strb	r0, [r1, #0]
 80096ae:	0021      	movs	r1, r4
 80096b0:	1c5a      	adds	r2, r3, #1
 80096b2:	3145      	adds	r1, #69	; 0x45
 80096b4:	7809      	ldrb	r1, [r1, #0]
 80096b6:	18a2      	adds	r2, r4, r2
 80096b8:	3243      	adds	r2, #67	; 0x43
 80096ba:	3302      	adds	r3, #2
 80096bc:	7011      	strb	r1, [r2, #0]
 80096be:	e7c1      	b.n	8009644 <_printf_common+0x4c>
 80096c0:	0022      	movs	r2, r4
 80096c2:	2301      	movs	r3, #1
 80096c4:	9901      	ldr	r1, [sp, #4]
 80096c6:	9800      	ldr	r0, [sp, #0]
 80096c8:	9f08      	ldr	r7, [sp, #32]
 80096ca:	321a      	adds	r2, #26
 80096cc:	47b8      	blx	r7
 80096ce:	3001      	adds	r0, #1
 80096d0:	d0e6      	beq.n	80096a0 <_printf_common+0xa8>
 80096d2:	3601      	adds	r6, #1
 80096d4:	e7d1      	b.n	800967a <_printf_common+0x82>
	...

080096d8 <_printf_i>:
 80096d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80096da:	b08b      	sub	sp, #44	; 0x2c
 80096dc:	9206      	str	r2, [sp, #24]
 80096de:	000a      	movs	r2, r1
 80096e0:	3243      	adds	r2, #67	; 0x43
 80096e2:	9307      	str	r3, [sp, #28]
 80096e4:	9005      	str	r0, [sp, #20]
 80096e6:	9204      	str	r2, [sp, #16]
 80096e8:	7e0a      	ldrb	r2, [r1, #24]
 80096ea:	000c      	movs	r4, r1
 80096ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096ee:	2a78      	cmp	r2, #120	; 0x78
 80096f0:	d809      	bhi.n	8009706 <_printf_i+0x2e>
 80096f2:	2a62      	cmp	r2, #98	; 0x62
 80096f4:	d80b      	bhi.n	800970e <_printf_i+0x36>
 80096f6:	2a00      	cmp	r2, #0
 80096f8:	d100      	bne.n	80096fc <_printf_i+0x24>
 80096fa:	e0be      	b.n	800987a <_printf_i+0x1a2>
 80096fc:	497c      	ldr	r1, [pc, #496]	; (80098f0 <_printf_i+0x218>)
 80096fe:	9103      	str	r1, [sp, #12]
 8009700:	2a58      	cmp	r2, #88	; 0x58
 8009702:	d100      	bne.n	8009706 <_printf_i+0x2e>
 8009704:	e093      	b.n	800982e <_printf_i+0x156>
 8009706:	0026      	movs	r6, r4
 8009708:	3642      	adds	r6, #66	; 0x42
 800970a:	7032      	strb	r2, [r6, #0]
 800970c:	e022      	b.n	8009754 <_printf_i+0x7c>
 800970e:	0010      	movs	r0, r2
 8009710:	3863      	subs	r0, #99	; 0x63
 8009712:	2815      	cmp	r0, #21
 8009714:	d8f7      	bhi.n	8009706 <_printf_i+0x2e>
 8009716:	f7f6 fcff 	bl	8000118 <__gnu_thumb1_case_shi>
 800971a:	0016      	.short	0x0016
 800971c:	fff6001f 	.word	0xfff6001f
 8009720:	fff6fff6 	.word	0xfff6fff6
 8009724:	001ffff6 	.word	0x001ffff6
 8009728:	fff6fff6 	.word	0xfff6fff6
 800972c:	fff6fff6 	.word	0xfff6fff6
 8009730:	003600a3 	.word	0x003600a3
 8009734:	fff60083 	.word	0xfff60083
 8009738:	00b4fff6 	.word	0x00b4fff6
 800973c:	0036fff6 	.word	0x0036fff6
 8009740:	fff6fff6 	.word	0xfff6fff6
 8009744:	0087      	.short	0x0087
 8009746:	0026      	movs	r6, r4
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	3642      	adds	r6, #66	; 0x42
 800974c:	1d11      	adds	r1, r2, #4
 800974e:	6019      	str	r1, [r3, #0]
 8009750:	6813      	ldr	r3, [r2, #0]
 8009752:	7033      	strb	r3, [r6, #0]
 8009754:	2301      	movs	r3, #1
 8009756:	e0a2      	b.n	800989e <_printf_i+0x1c6>
 8009758:	6818      	ldr	r0, [r3, #0]
 800975a:	6809      	ldr	r1, [r1, #0]
 800975c:	1d02      	adds	r2, r0, #4
 800975e:	060d      	lsls	r5, r1, #24
 8009760:	d50b      	bpl.n	800977a <_printf_i+0xa2>
 8009762:	6805      	ldr	r5, [r0, #0]
 8009764:	601a      	str	r2, [r3, #0]
 8009766:	2d00      	cmp	r5, #0
 8009768:	da03      	bge.n	8009772 <_printf_i+0x9a>
 800976a:	232d      	movs	r3, #45	; 0x2d
 800976c:	9a04      	ldr	r2, [sp, #16]
 800976e:	426d      	negs	r5, r5
 8009770:	7013      	strb	r3, [r2, #0]
 8009772:	4b5f      	ldr	r3, [pc, #380]	; (80098f0 <_printf_i+0x218>)
 8009774:	270a      	movs	r7, #10
 8009776:	9303      	str	r3, [sp, #12]
 8009778:	e01b      	b.n	80097b2 <_printf_i+0xda>
 800977a:	6805      	ldr	r5, [r0, #0]
 800977c:	601a      	str	r2, [r3, #0]
 800977e:	0649      	lsls	r1, r1, #25
 8009780:	d5f1      	bpl.n	8009766 <_printf_i+0x8e>
 8009782:	b22d      	sxth	r5, r5
 8009784:	e7ef      	b.n	8009766 <_printf_i+0x8e>
 8009786:	680d      	ldr	r5, [r1, #0]
 8009788:	6819      	ldr	r1, [r3, #0]
 800978a:	1d08      	adds	r0, r1, #4
 800978c:	6018      	str	r0, [r3, #0]
 800978e:	062e      	lsls	r6, r5, #24
 8009790:	d501      	bpl.n	8009796 <_printf_i+0xbe>
 8009792:	680d      	ldr	r5, [r1, #0]
 8009794:	e003      	b.n	800979e <_printf_i+0xc6>
 8009796:	066d      	lsls	r5, r5, #25
 8009798:	d5fb      	bpl.n	8009792 <_printf_i+0xba>
 800979a:	680d      	ldr	r5, [r1, #0]
 800979c:	b2ad      	uxth	r5, r5
 800979e:	4b54      	ldr	r3, [pc, #336]	; (80098f0 <_printf_i+0x218>)
 80097a0:	2708      	movs	r7, #8
 80097a2:	9303      	str	r3, [sp, #12]
 80097a4:	2a6f      	cmp	r2, #111	; 0x6f
 80097a6:	d000      	beq.n	80097aa <_printf_i+0xd2>
 80097a8:	3702      	adds	r7, #2
 80097aa:	0023      	movs	r3, r4
 80097ac:	2200      	movs	r2, #0
 80097ae:	3343      	adds	r3, #67	; 0x43
 80097b0:	701a      	strb	r2, [r3, #0]
 80097b2:	6863      	ldr	r3, [r4, #4]
 80097b4:	60a3      	str	r3, [r4, #8]
 80097b6:	2b00      	cmp	r3, #0
 80097b8:	db03      	blt.n	80097c2 <_printf_i+0xea>
 80097ba:	2104      	movs	r1, #4
 80097bc:	6822      	ldr	r2, [r4, #0]
 80097be:	438a      	bics	r2, r1
 80097c0:	6022      	str	r2, [r4, #0]
 80097c2:	2d00      	cmp	r5, #0
 80097c4:	d102      	bne.n	80097cc <_printf_i+0xf4>
 80097c6:	9e04      	ldr	r6, [sp, #16]
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d00c      	beq.n	80097e6 <_printf_i+0x10e>
 80097cc:	9e04      	ldr	r6, [sp, #16]
 80097ce:	0028      	movs	r0, r5
 80097d0:	0039      	movs	r1, r7
 80097d2:	f7f6 fd31 	bl	8000238 <__aeabi_uidivmod>
 80097d6:	9b03      	ldr	r3, [sp, #12]
 80097d8:	3e01      	subs	r6, #1
 80097da:	5c5b      	ldrb	r3, [r3, r1]
 80097dc:	7033      	strb	r3, [r6, #0]
 80097de:	002b      	movs	r3, r5
 80097e0:	0005      	movs	r5, r0
 80097e2:	429f      	cmp	r7, r3
 80097e4:	d9f3      	bls.n	80097ce <_printf_i+0xf6>
 80097e6:	2f08      	cmp	r7, #8
 80097e8:	d109      	bne.n	80097fe <_printf_i+0x126>
 80097ea:	6823      	ldr	r3, [r4, #0]
 80097ec:	07db      	lsls	r3, r3, #31
 80097ee:	d506      	bpl.n	80097fe <_printf_i+0x126>
 80097f0:	6862      	ldr	r2, [r4, #4]
 80097f2:	6923      	ldr	r3, [r4, #16]
 80097f4:	429a      	cmp	r2, r3
 80097f6:	dc02      	bgt.n	80097fe <_printf_i+0x126>
 80097f8:	2330      	movs	r3, #48	; 0x30
 80097fa:	3e01      	subs	r6, #1
 80097fc:	7033      	strb	r3, [r6, #0]
 80097fe:	9b04      	ldr	r3, [sp, #16]
 8009800:	1b9b      	subs	r3, r3, r6
 8009802:	6123      	str	r3, [r4, #16]
 8009804:	9b07      	ldr	r3, [sp, #28]
 8009806:	0021      	movs	r1, r4
 8009808:	9300      	str	r3, [sp, #0]
 800980a:	9805      	ldr	r0, [sp, #20]
 800980c:	9b06      	ldr	r3, [sp, #24]
 800980e:	aa09      	add	r2, sp, #36	; 0x24
 8009810:	f7ff fef2 	bl	80095f8 <_printf_common>
 8009814:	3001      	adds	r0, #1
 8009816:	d147      	bne.n	80098a8 <_printf_i+0x1d0>
 8009818:	2001      	movs	r0, #1
 800981a:	4240      	negs	r0, r0
 800981c:	b00b      	add	sp, #44	; 0x2c
 800981e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009820:	2220      	movs	r2, #32
 8009822:	6809      	ldr	r1, [r1, #0]
 8009824:	430a      	orrs	r2, r1
 8009826:	6022      	str	r2, [r4, #0]
 8009828:	2278      	movs	r2, #120	; 0x78
 800982a:	4932      	ldr	r1, [pc, #200]	; (80098f4 <_printf_i+0x21c>)
 800982c:	9103      	str	r1, [sp, #12]
 800982e:	0021      	movs	r1, r4
 8009830:	3145      	adds	r1, #69	; 0x45
 8009832:	700a      	strb	r2, [r1, #0]
 8009834:	6819      	ldr	r1, [r3, #0]
 8009836:	6822      	ldr	r2, [r4, #0]
 8009838:	c920      	ldmia	r1!, {r5}
 800983a:	0610      	lsls	r0, r2, #24
 800983c:	d402      	bmi.n	8009844 <_printf_i+0x16c>
 800983e:	0650      	lsls	r0, r2, #25
 8009840:	d500      	bpl.n	8009844 <_printf_i+0x16c>
 8009842:	b2ad      	uxth	r5, r5
 8009844:	6019      	str	r1, [r3, #0]
 8009846:	07d3      	lsls	r3, r2, #31
 8009848:	d502      	bpl.n	8009850 <_printf_i+0x178>
 800984a:	2320      	movs	r3, #32
 800984c:	4313      	orrs	r3, r2
 800984e:	6023      	str	r3, [r4, #0]
 8009850:	2710      	movs	r7, #16
 8009852:	2d00      	cmp	r5, #0
 8009854:	d1a9      	bne.n	80097aa <_printf_i+0xd2>
 8009856:	2220      	movs	r2, #32
 8009858:	6823      	ldr	r3, [r4, #0]
 800985a:	4393      	bics	r3, r2
 800985c:	6023      	str	r3, [r4, #0]
 800985e:	e7a4      	b.n	80097aa <_printf_i+0xd2>
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	680d      	ldr	r5, [r1, #0]
 8009864:	1d10      	adds	r0, r2, #4
 8009866:	6949      	ldr	r1, [r1, #20]
 8009868:	6018      	str	r0, [r3, #0]
 800986a:	6813      	ldr	r3, [r2, #0]
 800986c:	062e      	lsls	r6, r5, #24
 800986e:	d501      	bpl.n	8009874 <_printf_i+0x19c>
 8009870:	6019      	str	r1, [r3, #0]
 8009872:	e002      	b.n	800987a <_printf_i+0x1a2>
 8009874:	066d      	lsls	r5, r5, #25
 8009876:	d5fb      	bpl.n	8009870 <_printf_i+0x198>
 8009878:	8019      	strh	r1, [r3, #0]
 800987a:	2300      	movs	r3, #0
 800987c:	9e04      	ldr	r6, [sp, #16]
 800987e:	6123      	str	r3, [r4, #16]
 8009880:	e7c0      	b.n	8009804 <_printf_i+0x12c>
 8009882:	681a      	ldr	r2, [r3, #0]
 8009884:	1d11      	adds	r1, r2, #4
 8009886:	6019      	str	r1, [r3, #0]
 8009888:	6816      	ldr	r6, [r2, #0]
 800988a:	2100      	movs	r1, #0
 800988c:	0030      	movs	r0, r6
 800988e:	6862      	ldr	r2, [r4, #4]
 8009890:	f000 f845 	bl	800991e <memchr>
 8009894:	2800      	cmp	r0, #0
 8009896:	d001      	beq.n	800989c <_printf_i+0x1c4>
 8009898:	1b80      	subs	r0, r0, r6
 800989a:	6060      	str	r0, [r4, #4]
 800989c:	6863      	ldr	r3, [r4, #4]
 800989e:	6123      	str	r3, [r4, #16]
 80098a0:	2300      	movs	r3, #0
 80098a2:	9a04      	ldr	r2, [sp, #16]
 80098a4:	7013      	strb	r3, [r2, #0]
 80098a6:	e7ad      	b.n	8009804 <_printf_i+0x12c>
 80098a8:	0032      	movs	r2, r6
 80098aa:	6923      	ldr	r3, [r4, #16]
 80098ac:	9906      	ldr	r1, [sp, #24]
 80098ae:	9805      	ldr	r0, [sp, #20]
 80098b0:	9d07      	ldr	r5, [sp, #28]
 80098b2:	47a8      	blx	r5
 80098b4:	3001      	adds	r0, #1
 80098b6:	d0af      	beq.n	8009818 <_printf_i+0x140>
 80098b8:	6823      	ldr	r3, [r4, #0]
 80098ba:	079b      	lsls	r3, r3, #30
 80098bc:	d415      	bmi.n	80098ea <_printf_i+0x212>
 80098be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098c0:	68e0      	ldr	r0, [r4, #12]
 80098c2:	4298      	cmp	r0, r3
 80098c4:	daaa      	bge.n	800981c <_printf_i+0x144>
 80098c6:	0018      	movs	r0, r3
 80098c8:	e7a8      	b.n	800981c <_printf_i+0x144>
 80098ca:	0022      	movs	r2, r4
 80098cc:	2301      	movs	r3, #1
 80098ce:	9906      	ldr	r1, [sp, #24]
 80098d0:	9805      	ldr	r0, [sp, #20]
 80098d2:	9e07      	ldr	r6, [sp, #28]
 80098d4:	3219      	adds	r2, #25
 80098d6:	47b0      	blx	r6
 80098d8:	3001      	adds	r0, #1
 80098da:	d09d      	beq.n	8009818 <_printf_i+0x140>
 80098dc:	3501      	adds	r5, #1
 80098de:	68e3      	ldr	r3, [r4, #12]
 80098e0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098e2:	1a9b      	subs	r3, r3, r2
 80098e4:	42ab      	cmp	r3, r5
 80098e6:	dcf0      	bgt.n	80098ca <_printf_i+0x1f2>
 80098e8:	e7e9      	b.n	80098be <_printf_i+0x1e6>
 80098ea:	2500      	movs	r5, #0
 80098ec:	e7f7      	b.n	80098de <_printf_i+0x206>
 80098ee:	46c0      	nop			; (mov r8, r8)
 80098f0:	08009f7d 	.word	0x08009f7d
 80098f4:	08009f8e 	.word	0x08009f8e

080098f8 <memmove>:
 80098f8:	b510      	push	{r4, lr}
 80098fa:	4288      	cmp	r0, r1
 80098fc:	d902      	bls.n	8009904 <memmove+0xc>
 80098fe:	188b      	adds	r3, r1, r2
 8009900:	4298      	cmp	r0, r3
 8009902:	d303      	bcc.n	800990c <memmove+0x14>
 8009904:	2300      	movs	r3, #0
 8009906:	e007      	b.n	8009918 <memmove+0x20>
 8009908:	5c8b      	ldrb	r3, [r1, r2]
 800990a:	5483      	strb	r3, [r0, r2]
 800990c:	3a01      	subs	r2, #1
 800990e:	d2fb      	bcs.n	8009908 <memmove+0x10>
 8009910:	bd10      	pop	{r4, pc}
 8009912:	5ccc      	ldrb	r4, [r1, r3]
 8009914:	54c4      	strb	r4, [r0, r3]
 8009916:	3301      	adds	r3, #1
 8009918:	429a      	cmp	r2, r3
 800991a:	d1fa      	bne.n	8009912 <memmove+0x1a>
 800991c:	e7f8      	b.n	8009910 <memmove+0x18>

0800991e <memchr>:
 800991e:	b2c9      	uxtb	r1, r1
 8009920:	1882      	adds	r2, r0, r2
 8009922:	4290      	cmp	r0, r2
 8009924:	d101      	bne.n	800992a <memchr+0xc>
 8009926:	2000      	movs	r0, #0
 8009928:	4770      	bx	lr
 800992a:	7803      	ldrb	r3, [r0, #0]
 800992c:	428b      	cmp	r3, r1
 800992e:	d0fb      	beq.n	8009928 <memchr+0xa>
 8009930:	3001      	adds	r0, #1
 8009932:	e7f6      	b.n	8009922 <memchr+0x4>

08009934 <_init>:
 8009934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009936:	46c0      	nop			; (mov r8, r8)
 8009938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800993a:	bc08      	pop	{r3}
 800993c:	469e      	mov	lr, r3
 800993e:	4770      	bx	lr

08009940 <_fini>:
 8009940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009942:	46c0      	nop			; (mov r8, r8)
 8009944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009946:	bc08      	pop	{r3}
 8009948:	469e      	mov	lr, r3
 800994a:	4770      	bx	lr
