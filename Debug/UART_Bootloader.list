
UART_Bootloader.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004bf0  080000c0  080000c0  000100c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08004cb0  08004cb0  00014cb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004d8c  08004d8c  00020094  2**0
                  CONTENTS
  4 .ARM          00000008  08004d8c  08004d8c  00014d8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004d94  08004d94  00020094  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004d94  08004d94  00014d94  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004d98  08004d98  00014d98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000094  20000000  08004d9c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, CODE
  9 .bss          000006b4  20000094  08004e30  00020094  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000748  08004e30  00020748  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000cf8c  00000000  00000000  000200ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000241e  00000000  00000000  0002d08b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000a60  00000000  00000000  0002f4b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000007fa  00000000  00000000  0002ff10  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017b58  00000000  00000000  0003070a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5c7  00000000  00000000  00048262  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0009651f  00000000  00000000  00055829  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002444  00000000  00000000  000ebd48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  000ee18c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000094 	.word	0x20000094
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08004c88 	.word	0x08004c88

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000098 	.word	0x20000098
 8000104:	08004c88 	.word	0x08004c88

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f8f0 	bl	80003f0 <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__divsi3>:
 800021c:	4603      	mov	r3, r0
 800021e:	430b      	orrs	r3, r1
 8000220:	d47f      	bmi.n	8000322 <__divsi3+0x106>
 8000222:	2200      	movs	r2, #0
 8000224:	0843      	lsrs	r3, r0, #1
 8000226:	428b      	cmp	r3, r1
 8000228:	d374      	bcc.n	8000314 <__divsi3+0xf8>
 800022a:	0903      	lsrs	r3, r0, #4
 800022c:	428b      	cmp	r3, r1
 800022e:	d35f      	bcc.n	80002f0 <__divsi3+0xd4>
 8000230:	0a03      	lsrs	r3, r0, #8
 8000232:	428b      	cmp	r3, r1
 8000234:	d344      	bcc.n	80002c0 <__divsi3+0xa4>
 8000236:	0b03      	lsrs	r3, r0, #12
 8000238:	428b      	cmp	r3, r1
 800023a:	d328      	bcc.n	800028e <__divsi3+0x72>
 800023c:	0c03      	lsrs	r3, r0, #16
 800023e:	428b      	cmp	r3, r1
 8000240:	d30d      	bcc.n	800025e <__divsi3+0x42>
 8000242:	22ff      	movs	r2, #255	; 0xff
 8000244:	0209      	lsls	r1, r1, #8
 8000246:	ba12      	rev	r2, r2
 8000248:	0c03      	lsrs	r3, r0, #16
 800024a:	428b      	cmp	r3, r1
 800024c:	d302      	bcc.n	8000254 <__divsi3+0x38>
 800024e:	1212      	asrs	r2, r2, #8
 8000250:	0209      	lsls	r1, r1, #8
 8000252:	d065      	beq.n	8000320 <__divsi3+0x104>
 8000254:	0b03      	lsrs	r3, r0, #12
 8000256:	428b      	cmp	r3, r1
 8000258:	d319      	bcc.n	800028e <__divsi3+0x72>
 800025a:	e000      	b.n	800025e <__divsi3+0x42>
 800025c:	0a09      	lsrs	r1, r1, #8
 800025e:	0bc3      	lsrs	r3, r0, #15
 8000260:	428b      	cmp	r3, r1
 8000262:	d301      	bcc.n	8000268 <__divsi3+0x4c>
 8000264:	03cb      	lsls	r3, r1, #15
 8000266:	1ac0      	subs	r0, r0, r3
 8000268:	4152      	adcs	r2, r2
 800026a:	0b83      	lsrs	r3, r0, #14
 800026c:	428b      	cmp	r3, r1
 800026e:	d301      	bcc.n	8000274 <__divsi3+0x58>
 8000270:	038b      	lsls	r3, r1, #14
 8000272:	1ac0      	subs	r0, r0, r3
 8000274:	4152      	adcs	r2, r2
 8000276:	0b43      	lsrs	r3, r0, #13
 8000278:	428b      	cmp	r3, r1
 800027a:	d301      	bcc.n	8000280 <__divsi3+0x64>
 800027c:	034b      	lsls	r3, r1, #13
 800027e:	1ac0      	subs	r0, r0, r3
 8000280:	4152      	adcs	r2, r2
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d301      	bcc.n	800028c <__divsi3+0x70>
 8000288:	030b      	lsls	r3, r1, #12
 800028a:	1ac0      	subs	r0, r0, r3
 800028c:	4152      	adcs	r2, r2
 800028e:	0ac3      	lsrs	r3, r0, #11
 8000290:	428b      	cmp	r3, r1
 8000292:	d301      	bcc.n	8000298 <__divsi3+0x7c>
 8000294:	02cb      	lsls	r3, r1, #11
 8000296:	1ac0      	subs	r0, r0, r3
 8000298:	4152      	adcs	r2, r2
 800029a:	0a83      	lsrs	r3, r0, #10
 800029c:	428b      	cmp	r3, r1
 800029e:	d301      	bcc.n	80002a4 <__divsi3+0x88>
 80002a0:	028b      	lsls	r3, r1, #10
 80002a2:	1ac0      	subs	r0, r0, r3
 80002a4:	4152      	adcs	r2, r2
 80002a6:	0a43      	lsrs	r3, r0, #9
 80002a8:	428b      	cmp	r3, r1
 80002aa:	d301      	bcc.n	80002b0 <__divsi3+0x94>
 80002ac:	024b      	lsls	r3, r1, #9
 80002ae:	1ac0      	subs	r0, r0, r3
 80002b0:	4152      	adcs	r2, r2
 80002b2:	0a03      	lsrs	r3, r0, #8
 80002b4:	428b      	cmp	r3, r1
 80002b6:	d301      	bcc.n	80002bc <__divsi3+0xa0>
 80002b8:	020b      	lsls	r3, r1, #8
 80002ba:	1ac0      	subs	r0, r0, r3
 80002bc:	4152      	adcs	r2, r2
 80002be:	d2cd      	bcs.n	800025c <__divsi3+0x40>
 80002c0:	09c3      	lsrs	r3, r0, #7
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d301      	bcc.n	80002ca <__divsi3+0xae>
 80002c6:	01cb      	lsls	r3, r1, #7
 80002c8:	1ac0      	subs	r0, r0, r3
 80002ca:	4152      	adcs	r2, r2
 80002cc:	0983      	lsrs	r3, r0, #6
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d301      	bcc.n	80002d6 <__divsi3+0xba>
 80002d2:	018b      	lsls	r3, r1, #6
 80002d4:	1ac0      	subs	r0, r0, r3
 80002d6:	4152      	adcs	r2, r2
 80002d8:	0943      	lsrs	r3, r0, #5
 80002da:	428b      	cmp	r3, r1
 80002dc:	d301      	bcc.n	80002e2 <__divsi3+0xc6>
 80002de:	014b      	lsls	r3, r1, #5
 80002e0:	1ac0      	subs	r0, r0, r3
 80002e2:	4152      	adcs	r2, r2
 80002e4:	0903      	lsrs	r3, r0, #4
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d301      	bcc.n	80002ee <__divsi3+0xd2>
 80002ea:	010b      	lsls	r3, r1, #4
 80002ec:	1ac0      	subs	r0, r0, r3
 80002ee:	4152      	adcs	r2, r2
 80002f0:	08c3      	lsrs	r3, r0, #3
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d301      	bcc.n	80002fa <__divsi3+0xde>
 80002f6:	00cb      	lsls	r3, r1, #3
 80002f8:	1ac0      	subs	r0, r0, r3
 80002fa:	4152      	adcs	r2, r2
 80002fc:	0883      	lsrs	r3, r0, #2
 80002fe:	428b      	cmp	r3, r1
 8000300:	d301      	bcc.n	8000306 <__divsi3+0xea>
 8000302:	008b      	lsls	r3, r1, #2
 8000304:	1ac0      	subs	r0, r0, r3
 8000306:	4152      	adcs	r2, r2
 8000308:	0843      	lsrs	r3, r0, #1
 800030a:	428b      	cmp	r3, r1
 800030c:	d301      	bcc.n	8000312 <__divsi3+0xf6>
 800030e:	004b      	lsls	r3, r1, #1
 8000310:	1ac0      	subs	r0, r0, r3
 8000312:	4152      	adcs	r2, r2
 8000314:	1a41      	subs	r1, r0, r1
 8000316:	d200      	bcs.n	800031a <__divsi3+0xfe>
 8000318:	4601      	mov	r1, r0
 800031a:	4152      	adcs	r2, r2
 800031c:	4610      	mov	r0, r2
 800031e:	4770      	bx	lr
 8000320:	e05d      	b.n	80003de <__divsi3+0x1c2>
 8000322:	0fca      	lsrs	r2, r1, #31
 8000324:	d000      	beq.n	8000328 <__divsi3+0x10c>
 8000326:	4249      	negs	r1, r1
 8000328:	1003      	asrs	r3, r0, #32
 800032a:	d300      	bcc.n	800032e <__divsi3+0x112>
 800032c:	4240      	negs	r0, r0
 800032e:	4053      	eors	r3, r2
 8000330:	2200      	movs	r2, #0
 8000332:	469c      	mov	ip, r3
 8000334:	0903      	lsrs	r3, r0, #4
 8000336:	428b      	cmp	r3, r1
 8000338:	d32d      	bcc.n	8000396 <__divsi3+0x17a>
 800033a:	0a03      	lsrs	r3, r0, #8
 800033c:	428b      	cmp	r3, r1
 800033e:	d312      	bcc.n	8000366 <__divsi3+0x14a>
 8000340:	22fc      	movs	r2, #252	; 0xfc
 8000342:	0189      	lsls	r1, r1, #6
 8000344:	ba12      	rev	r2, r2
 8000346:	0a03      	lsrs	r3, r0, #8
 8000348:	428b      	cmp	r3, r1
 800034a:	d30c      	bcc.n	8000366 <__divsi3+0x14a>
 800034c:	0189      	lsls	r1, r1, #6
 800034e:	1192      	asrs	r2, r2, #6
 8000350:	428b      	cmp	r3, r1
 8000352:	d308      	bcc.n	8000366 <__divsi3+0x14a>
 8000354:	0189      	lsls	r1, r1, #6
 8000356:	1192      	asrs	r2, r2, #6
 8000358:	428b      	cmp	r3, r1
 800035a:	d304      	bcc.n	8000366 <__divsi3+0x14a>
 800035c:	0189      	lsls	r1, r1, #6
 800035e:	d03a      	beq.n	80003d6 <__divsi3+0x1ba>
 8000360:	1192      	asrs	r2, r2, #6
 8000362:	e000      	b.n	8000366 <__divsi3+0x14a>
 8000364:	0989      	lsrs	r1, r1, #6
 8000366:	09c3      	lsrs	r3, r0, #7
 8000368:	428b      	cmp	r3, r1
 800036a:	d301      	bcc.n	8000370 <__divsi3+0x154>
 800036c:	01cb      	lsls	r3, r1, #7
 800036e:	1ac0      	subs	r0, r0, r3
 8000370:	4152      	adcs	r2, r2
 8000372:	0983      	lsrs	r3, r0, #6
 8000374:	428b      	cmp	r3, r1
 8000376:	d301      	bcc.n	800037c <__divsi3+0x160>
 8000378:	018b      	lsls	r3, r1, #6
 800037a:	1ac0      	subs	r0, r0, r3
 800037c:	4152      	adcs	r2, r2
 800037e:	0943      	lsrs	r3, r0, #5
 8000380:	428b      	cmp	r3, r1
 8000382:	d301      	bcc.n	8000388 <__divsi3+0x16c>
 8000384:	014b      	lsls	r3, r1, #5
 8000386:	1ac0      	subs	r0, r0, r3
 8000388:	4152      	adcs	r2, r2
 800038a:	0903      	lsrs	r3, r0, #4
 800038c:	428b      	cmp	r3, r1
 800038e:	d301      	bcc.n	8000394 <__divsi3+0x178>
 8000390:	010b      	lsls	r3, r1, #4
 8000392:	1ac0      	subs	r0, r0, r3
 8000394:	4152      	adcs	r2, r2
 8000396:	08c3      	lsrs	r3, r0, #3
 8000398:	428b      	cmp	r3, r1
 800039a:	d301      	bcc.n	80003a0 <__divsi3+0x184>
 800039c:	00cb      	lsls	r3, r1, #3
 800039e:	1ac0      	subs	r0, r0, r3
 80003a0:	4152      	adcs	r2, r2
 80003a2:	0883      	lsrs	r3, r0, #2
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d301      	bcc.n	80003ac <__divsi3+0x190>
 80003a8:	008b      	lsls	r3, r1, #2
 80003aa:	1ac0      	subs	r0, r0, r3
 80003ac:	4152      	adcs	r2, r2
 80003ae:	d2d9      	bcs.n	8000364 <__divsi3+0x148>
 80003b0:	0843      	lsrs	r3, r0, #1
 80003b2:	428b      	cmp	r3, r1
 80003b4:	d301      	bcc.n	80003ba <__divsi3+0x19e>
 80003b6:	004b      	lsls	r3, r1, #1
 80003b8:	1ac0      	subs	r0, r0, r3
 80003ba:	4152      	adcs	r2, r2
 80003bc:	1a41      	subs	r1, r0, r1
 80003be:	d200      	bcs.n	80003c2 <__divsi3+0x1a6>
 80003c0:	4601      	mov	r1, r0
 80003c2:	4663      	mov	r3, ip
 80003c4:	4152      	adcs	r2, r2
 80003c6:	105b      	asrs	r3, r3, #1
 80003c8:	4610      	mov	r0, r2
 80003ca:	d301      	bcc.n	80003d0 <__divsi3+0x1b4>
 80003cc:	4240      	negs	r0, r0
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d500      	bpl.n	80003d4 <__divsi3+0x1b8>
 80003d2:	4249      	negs	r1, r1
 80003d4:	4770      	bx	lr
 80003d6:	4663      	mov	r3, ip
 80003d8:	105b      	asrs	r3, r3, #1
 80003da:	d300      	bcc.n	80003de <__divsi3+0x1c2>
 80003dc:	4240      	negs	r0, r0
 80003de:	b501      	push	{r0, lr}
 80003e0:	2000      	movs	r0, #0
 80003e2:	f000 f805 	bl	80003f0 <__aeabi_idiv0>
 80003e6:	bd02      	pop	{r1, pc}

080003e8 <__aeabi_idivmod>:
 80003e8:	2900      	cmp	r1, #0
 80003ea:	d0f8      	beq.n	80003de <__divsi3+0x1c2>
 80003ec:	e716      	b.n	800021c <__divsi3>
 80003ee:	4770      	bx	lr

080003f0 <__aeabi_idiv0>:
 80003f0:	4770      	bx	lr
 80003f2:	46c0      	nop			; (mov r8, r8)

080003f4 <__aeabi_uldivmod>:
 80003f4:	2b00      	cmp	r3, #0
 80003f6:	d111      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003f8:	2a00      	cmp	r2, #0
 80003fa:	d10f      	bne.n	800041c <__aeabi_uldivmod+0x28>
 80003fc:	2900      	cmp	r1, #0
 80003fe:	d100      	bne.n	8000402 <__aeabi_uldivmod+0xe>
 8000400:	2800      	cmp	r0, #0
 8000402:	d002      	beq.n	800040a <__aeabi_uldivmod+0x16>
 8000404:	2100      	movs	r1, #0
 8000406:	43c9      	mvns	r1, r1
 8000408:	0008      	movs	r0, r1
 800040a:	b407      	push	{r0, r1, r2}
 800040c:	4802      	ldr	r0, [pc, #8]	; (8000418 <__aeabi_uldivmod+0x24>)
 800040e:	a102      	add	r1, pc, #8	; (adr r1, 8000418 <__aeabi_uldivmod+0x24>)
 8000410:	1840      	adds	r0, r0, r1
 8000412:	9002      	str	r0, [sp, #8]
 8000414:	bd03      	pop	{r0, r1, pc}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	ffffffd9 	.word	0xffffffd9
 800041c:	b403      	push	{r0, r1}
 800041e:	4668      	mov	r0, sp
 8000420:	b501      	push	{r0, lr}
 8000422:	9802      	ldr	r0, [sp, #8]
 8000424:	f000 f806 	bl	8000434 <__udivmoddi4>
 8000428:	9b01      	ldr	r3, [sp, #4]
 800042a:	469e      	mov	lr, r3
 800042c:	b002      	add	sp, #8
 800042e:	bc0c      	pop	{r2, r3}
 8000430:	4770      	bx	lr
 8000432:	46c0      	nop			; (mov r8, r8)

08000434 <__udivmoddi4>:
 8000434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000436:	4657      	mov	r7, sl
 8000438:	464e      	mov	r6, r9
 800043a:	4645      	mov	r5, r8
 800043c:	46de      	mov	lr, fp
 800043e:	b5e0      	push	{r5, r6, r7, lr}
 8000440:	0004      	movs	r4, r0
 8000442:	000d      	movs	r5, r1
 8000444:	4692      	mov	sl, r2
 8000446:	4699      	mov	r9, r3
 8000448:	b083      	sub	sp, #12
 800044a:	428b      	cmp	r3, r1
 800044c:	d830      	bhi.n	80004b0 <__udivmoddi4+0x7c>
 800044e:	d02d      	beq.n	80004ac <__udivmoddi4+0x78>
 8000450:	4649      	mov	r1, r9
 8000452:	4650      	mov	r0, sl
 8000454:	f000 f8ba 	bl	80005cc <__clzdi2>
 8000458:	0029      	movs	r1, r5
 800045a:	0006      	movs	r6, r0
 800045c:	0020      	movs	r0, r4
 800045e:	f000 f8b5 	bl	80005cc <__clzdi2>
 8000462:	1a33      	subs	r3, r6, r0
 8000464:	4698      	mov	r8, r3
 8000466:	3b20      	subs	r3, #32
 8000468:	d434      	bmi.n	80004d4 <__udivmoddi4+0xa0>
 800046a:	469b      	mov	fp, r3
 800046c:	4653      	mov	r3, sl
 800046e:	465a      	mov	r2, fp
 8000470:	4093      	lsls	r3, r2
 8000472:	4642      	mov	r2, r8
 8000474:	001f      	movs	r7, r3
 8000476:	4653      	mov	r3, sl
 8000478:	4093      	lsls	r3, r2
 800047a:	001e      	movs	r6, r3
 800047c:	42af      	cmp	r7, r5
 800047e:	d83b      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 8000480:	42af      	cmp	r7, r5
 8000482:	d100      	bne.n	8000486 <__udivmoddi4+0x52>
 8000484:	e079      	b.n	800057a <__udivmoddi4+0x146>
 8000486:	465b      	mov	r3, fp
 8000488:	1ba4      	subs	r4, r4, r6
 800048a:	41bd      	sbcs	r5, r7
 800048c:	2b00      	cmp	r3, #0
 800048e:	da00      	bge.n	8000492 <__udivmoddi4+0x5e>
 8000490:	e076      	b.n	8000580 <__udivmoddi4+0x14c>
 8000492:	2200      	movs	r2, #0
 8000494:	2300      	movs	r3, #0
 8000496:	9200      	str	r2, [sp, #0]
 8000498:	9301      	str	r3, [sp, #4]
 800049a:	2301      	movs	r3, #1
 800049c:	465a      	mov	r2, fp
 800049e:	4093      	lsls	r3, r2
 80004a0:	9301      	str	r3, [sp, #4]
 80004a2:	2301      	movs	r3, #1
 80004a4:	4642      	mov	r2, r8
 80004a6:	4093      	lsls	r3, r2
 80004a8:	9300      	str	r3, [sp, #0]
 80004aa:	e029      	b.n	8000500 <__udivmoddi4+0xcc>
 80004ac:	4282      	cmp	r2, r0
 80004ae:	d9cf      	bls.n	8000450 <__udivmoddi4+0x1c>
 80004b0:	2200      	movs	r2, #0
 80004b2:	2300      	movs	r3, #0
 80004b4:	9200      	str	r2, [sp, #0]
 80004b6:	9301      	str	r3, [sp, #4]
 80004b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004ba:	2b00      	cmp	r3, #0
 80004bc:	d001      	beq.n	80004c2 <__udivmoddi4+0x8e>
 80004be:	601c      	str	r4, [r3, #0]
 80004c0:	605d      	str	r5, [r3, #4]
 80004c2:	9800      	ldr	r0, [sp, #0]
 80004c4:	9901      	ldr	r1, [sp, #4]
 80004c6:	b003      	add	sp, #12
 80004c8:	bcf0      	pop	{r4, r5, r6, r7}
 80004ca:	46bb      	mov	fp, r7
 80004cc:	46b2      	mov	sl, r6
 80004ce:	46a9      	mov	r9, r5
 80004d0:	46a0      	mov	r8, r4
 80004d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d4:	4642      	mov	r2, r8
 80004d6:	469b      	mov	fp, r3
 80004d8:	2320      	movs	r3, #32
 80004da:	1a9b      	subs	r3, r3, r2
 80004dc:	4652      	mov	r2, sl
 80004de:	40da      	lsrs	r2, r3
 80004e0:	4641      	mov	r1, r8
 80004e2:	0013      	movs	r3, r2
 80004e4:	464a      	mov	r2, r9
 80004e6:	408a      	lsls	r2, r1
 80004e8:	0017      	movs	r7, r2
 80004ea:	4642      	mov	r2, r8
 80004ec:	431f      	orrs	r7, r3
 80004ee:	4653      	mov	r3, sl
 80004f0:	4093      	lsls	r3, r2
 80004f2:	001e      	movs	r6, r3
 80004f4:	42af      	cmp	r7, r5
 80004f6:	d9c3      	bls.n	8000480 <__udivmoddi4+0x4c>
 80004f8:	2200      	movs	r2, #0
 80004fa:	2300      	movs	r3, #0
 80004fc:	9200      	str	r2, [sp, #0]
 80004fe:	9301      	str	r3, [sp, #4]
 8000500:	4643      	mov	r3, r8
 8000502:	2b00      	cmp	r3, #0
 8000504:	d0d8      	beq.n	80004b8 <__udivmoddi4+0x84>
 8000506:	07fb      	lsls	r3, r7, #31
 8000508:	0872      	lsrs	r2, r6, #1
 800050a:	431a      	orrs	r2, r3
 800050c:	4646      	mov	r6, r8
 800050e:	087b      	lsrs	r3, r7, #1
 8000510:	e00e      	b.n	8000530 <__udivmoddi4+0xfc>
 8000512:	42ab      	cmp	r3, r5
 8000514:	d101      	bne.n	800051a <__udivmoddi4+0xe6>
 8000516:	42a2      	cmp	r2, r4
 8000518:	d80c      	bhi.n	8000534 <__udivmoddi4+0x100>
 800051a:	1aa4      	subs	r4, r4, r2
 800051c:	419d      	sbcs	r5, r3
 800051e:	2001      	movs	r0, #1
 8000520:	1924      	adds	r4, r4, r4
 8000522:	416d      	adcs	r5, r5
 8000524:	2100      	movs	r1, #0
 8000526:	3e01      	subs	r6, #1
 8000528:	1824      	adds	r4, r4, r0
 800052a:	414d      	adcs	r5, r1
 800052c:	2e00      	cmp	r6, #0
 800052e:	d006      	beq.n	800053e <__udivmoddi4+0x10a>
 8000530:	42ab      	cmp	r3, r5
 8000532:	d9ee      	bls.n	8000512 <__udivmoddi4+0xde>
 8000534:	3e01      	subs	r6, #1
 8000536:	1924      	adds	r4, r4, r4
 8000538:	416d      	adcs	r5, r5
 800053a:	2e00      	cmp	r6, #0
 800053c:	d1f8      	bne.n	8000530 <__udivmoddi4+0xfc>
 800053e:	9800      	ldr	r0, [sp, #0]
 8000540:	9901      	ldr	r1, [sp, #4]
 8000542:	465b      	mov	r3, fp
 8000544:	1900      	adds	r0, r0, r4
 8000546:	4169      	adcs	r1, r5
 8000548:	2b00      	cmp	r3, #0
 800054a:	db24      	blt.n	8000596 <__udivmoddi4+0x162>
 800054c:	002b      	movs	r3, r5
 800054e:	465a      	mov	r2, fp
 8000550:	4644      	mov	r4, r8
 8000552:	40d3      	lsrs	r3, r2
 8000554:	002a      	movs	r2, r5
 8000556:	40e2      	lsrs	r2, r4
 8000558:	001c      	movs	r4, r3
 800055a:	465b      	mov	r3, fp
 800055c:	0015      	movs	r5, r2
 800055e:	2b00      	cmp	r3, #0
 8000560:	db2a      	blt.n	80005b8 <__udivmoddi4+0x184>
 8000562:	0026      	movs	r6, r4
 8000564:	409e      	lsls	r6, r3
 8000566:	0033      	movs	r3, r6
 8000568:	0026      	movs	r6, r4
 800056a:	4647      	mov	r7, r8
 800056c:	40be      	lsls	r6, r7
 800056e:	0032      	movs	r2, r6
 8000570:	1a80      	subs	r0, r0, r2
 8000572:	4199      	sbcs	r1, r3
 8000574:	9000      	str	r0, [sp, #0]
 8000576:	9101      	str	r1, [sp, #4]
 8000578:	e79e      	b.n	80004b8 <__udivmoddi4+0x84>
 800057a:	42a3      	cmp	r3, r4
 800057c:	d8bc      	bhi.n	80004f8 <__udivmoddi4+0xc4>
 800057e:	e782      	b.n	8000486 <__udivmoddi4+0x52>
 8000580:	4642      	mov	r2, r8
 8000582:	2320      	movs	r3, #32
 8000584:	2100      	movs	r1, #0
 8000586:	1a9b      	subs	r3, r3, r2
 8000588:	2200      	movs	r2, #0
 800058a:	9100      	str	r1, [sp, #0]
 800058c:	9201      	str	r2, [sp, #4]
 800058e:	2201      	movs	r2, #1
 8000590:	40da      	lsrs	r2, r3
 8000592:	9201      	str	r2, [sp, #4]
 8000594:	e785      	b.n	80004a2 <__udivmoddi4+0x6e>
 8000596:	4642      	mov	r2, r8
 8000598:	2320      	movs	r3, #32
 800059a:	1a9b      	subs	r3, r3, r2
 800059c:	002a      	movs	r2, r5
 800059e:	4646      	mov	r6, r8
 80005a0:	409a      	lsls	r2, r3
 80005a2:	0023      	movs	r3, r4
 80005a4:	40f3      	lsrs	r3, r6
 80005a6:	4644      	mov	r4, r8
 80005a8:	4313      	orrs	r3, r2
 80005aa:	002a      	movs	r2, r5
 80005ac:	40e2      	lsrs	r2, r4
 80005ae:	001c      	movs	r4, r3
 80005b0:	465b      	mov	r3, fp
 80005b2:	0015      	movs	r5, r2
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	dad4      	bge.n	8000562 <__udivmoddi4+0x12e>
 80005b8:	4642      	mov	r2, r8
 80005ba:	002f      	movs	r7, r5
 80005bc:	2320      	movs	r3, #32
 80005be:	0026      	movs	r6, r4
 80005c0:	4097      	lsls	r7, r2
 80005c2:	1a9b      	subs	r3, r3, r2
 80005c4:	40de      	lsrs	r6, r3
 80005c6:	003b      	movs	r3, r7
 80005c8:	4333      	orrs	r3, r6
 80005ca:	e7cd      	b.n	8000568 <__udivmoddi4+0x134>

080005cc <__clzdi2>:
 80005cc:	b510      	push	{r4, lr}
 80005ce:	2900      	cmp	r1, #0
 80005d0:	d103      	bne.n	80005da <__clzdi2+0xe>
 80005d2:	f000 f807 	bl	80005e4 <__clzsi2>
 80005d6:	3020      	adds	r0, #32
 80005d8:	e002      	b.n	80005e0 <__clzdi2+0x14>
 80005da:	0008      	movs	r0, r1
 80005dc:	f000 f802 	bl	80005e4 <__clzsi2>
 80005e0:	bd10      	pop	{r4, pc}
 80005e2:	46c0      	nop			; (mov r8, r8)

080005e4 <__clzsi2>:
 80005e4:	211c      	movs	r1, #28
 80005e6:	2301      	movs	r3, #1
 80005e8:	041b      	lsls	r3, r3, #16
 80005ea:	4298      	cmp	r0, r3
 80005ec:	d301      	bcc.n	80005f2 <__clzsi2+0xe>
 80005ee:	0c00      	lsrs	r0, r0, #16
 80005f0:	3910      	subs	r1, #16
 80005f2:	0a1b      	lsrs	r3, r3, #8
 80005f4:	4298      	cmp	r0, r3
 80005f6:	d301      	bcc.n	80005fc <__clzsi2+0x18>
 80005f8:	0a00      	lsrs	r0, r0, #8
 80005fa:	3908      	subs	r1, #8
 80005fc:	091b      	lsrs	r3, r3, #4
 80005fe:	4298      	cmp	r0, r3
 8000600:	d301      	bcc.n	8000606 <__clzsi2+0x22>
 8000602:	0900      	lsrs	r0, r0, #4
 8000604:	3904      	subs	r1, #4
 8000606:	a202      	add	r2, pc, #8	; (adr r2, 8000610 <__clzsi2+0x2c>)
 8000608:	5c10      	ldrb	r0, [r2, r0]
 800060a:	1840      	adds	r0, r0, r1
 800060c:	4770      	bx	lr
 800060e:	46c0      	nop			; (mov r8, r8)
 8000610:	02020304 	.word	0x02020304
 8000614:	01010101 	.word	0x01010101
	...

08000620 <write_flash_chunk>:
	HAL_UART_Transmit(&huart2, Nack, 4, 1000);
	HAL_Delay(100);
}
// ---------- Flash Write One 512-Byte Chunk ----------
HAL_StatusTypeDef write_flash_chunk(uint32_t address, uint8_t* data)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b086      	sub	sp, #24
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
 8000628:	6039      	str	r1, [r7, #0]
    HAL_FLASH_Unlock();
 800062a:	f000 fe5d 	bl	80012e8 <HAL_FLASH_Unlock>

    for (uint32_t i = 0; i < CHUNK_SIZE; i += 8)
 800062e:	2300      	movs	r3, #0
 8000630:	617b      	str	r3, [r7, #20]
 8000632:	e019      	b.n	8000668 <write_flash_chunk+0x48>
    {
        uint64_t doubleWord;
        memcpy(&doubleWord, &data[i], 8);
 8000634:	683a      	ldr	r2, [r7, #0]
 8000636:	697b      	ldr	r3, [r7, #20]
 8000638:	18d1      	adds	r1, r2, r3
 800063a:	2308      	movs	r3, #8
 800063c:	18fb      	adds	r3, r7, r3
 800063e:	2208      	movs	r2, #8
 8000640:	0018      	movs	r0, r3
 8000642:	f004 fb17 	bl	8004c74 <memcpy>

        if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, address + i, doubleWord) != HAL_OK)
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	697b      	ldr	r3, [r7, #20]
 800064a:	18d1      	adds	r1, r2, r3
 800064c:	68ba      	ldr	r2, [r7, #8]
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	2001      	movs	r0, #1
 8000652:	f000 fdfb 	bl	800124c <HAL_FLASH_Program>
 8000656:	1e03      	subs	r3, r0, #0
 8000658:	d003      	beq.n	8000662 <write_flash_chunk+0x42>
        {
 //       	bootloader_send_Nack();
            HAL_FLASH_Lock();
 800065a:	f000 fe69 	bl	8001330 <HAL_FLASH_Lock>
            return HAL_ERROR;
 800065e:	2301      	movs	r3, #1
 8000660:	e00a      	b.n	8000678 <write_flash_chunk+0x58>
    for (uint32_t i = 0; i < CHUNK_SIZE; i += 8)
 8000662:	697b      	ldr	r3, [r7, #20]
 8000664:	3308      	adds	r3, #8
 8000666:	617b      	str	r3, [r7, #20]
 8000668:	697a      	ldr	r2, [r7, #20]
 800066a:	2380      	movs	r3, #128	; 0x80
 800066c:	009b      	lsls	r3, r3, #2
 800066e:	429a      	cmp	r2, r3
 8000670:	d3e0      	bcc.n	8000634 <write_flash_chunk+0x14>
        }
    }
//    bootloader_send_ack();
    HAL_FLASH_Lock();
 8000672:	f000 fe5d 	bl	8001330 <HAL_FLASH_Lock>
    return HAL_OK;
 8000676:	2300      	movs	r3, #0
}
 8000678:	0018      	movs	r0, r3
 800067a:	46bd      	mov	sp, r7
 800067c:	b006      	add	sp, #24
 800067e:	bd80      	pop	{r7, pc}

08000680 <erase_application_flash>:
    }

    return HAL_OK;
}
HAL_StatusTypeDef erase_application_flash(void)
{
 8000680:	b5b0      	push	{r4, r5, r7, lr}
 8000682:	b088      	sub	sp, #32
 8000684:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status;
    FLASH_EraseInitTypeDef eraseInit;
    uint32_t pageError = 0;
 8000686:	2300      	movs	r3, #0
 8000688:	607b      	str	r3, [r7, #4]

    uint32_t page = (FLASH_APP_START_ADDRESS - FLASH_BASE) / FLASH_PAGE_SIZE;
 800068a:	2318      	movs	r3, #24
 800068c:	61fb      	str	r3, [r7, #28]

    HAL_FLASH_Unlock();
 800068e:	f000 fe2b 	bl	80012e8 <HAL_FLASH_Unlock>

    eraseInit.TypeErase = FLASH_TYPEERASE_PAGES;
 8000692:	2108      	movs	r1, #8
 8000694:	187b      	adds	r3, r7, r1
 8000696:	2202      	movs	r2, #2
 8000698:	601a      	str	r2, [r3, #0]
    eraseInit.Page      = page;
 800069a:	187b      	adds	r3, r7, r1
 800069c:	69fa      	ldr	r2, [r7, #28]
 800069e:	609a      	str	r2, [r3, #8]
    eraseInit.NbPages   = NUM_PAGES_TO_ERASE;
 80006a0:	187b      	adds	r3, r7, r1
 80006a2:	220a      	movs	r2, #10
 80006a4:	60da      	str	r2, [r3, #12]

    status = HAL_FLASHEx_Erase(&eraseInit, &pageError);
 80006a6:	251b      	movs	r5, #27
 80006a8:	197c      	adds	r4, r7, r5
 80006aa:	1d3a      	adds	r2, r7, #4
 80006ac:	187b      	adds	r3, r7, r1
 80006ae:	0011      	movs	r1, r2
 80006b0:	0018      	movs	r0, r3
 80006b2:	f000 fecd 	bl	8001450 <HAL_FLASHEx_Erase>
 80006b6:	0003      	movs	r3, r0
 80006b8:	7023      	strb	r3, [r4, #0]

    HAL_FLASH_Lock();
 80006ba:	f000 fe39 	bl	8001330 <HAL_FLASH_Lock>

    return status;
 80006be:	197b      	adds	r3, r7, r5
 80006c0:	781b      	ldrb	r3, [r3, #0]
}
 80006c2:	0018      	movs	r0, r3
 80006c4:	46bd      	mov	sp, r7
 80006c6:	b008      	add	sp, #32
 80006c8:	bdb0      	pop	{r4, r5, r7, pc}
	...

080006cc <jump_to_application>:
void jump_to_application(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b084      	sub	sp, #16
 80006d0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006d2:	b672      	cpsid	i
}
 80006d4:	46c0      	nop			; (mov r8, r8)
//	for (int i = 0; i < 8; i++) {
//		NVIC->ICER[i] = 0xFFFFFFFF;
//		NVIC->ICPR[i] = 0xFFFFFFFF;
//	}

	SysTick->CTRL = 0;
 80006d6:	4b12      	ldr	r3, [pc, #72]	; (8000720 <jump_to_application+0x54>)
 80006d8:	2200      	movs	r2, #0
 80006da:	601a      	str	r2, [r3, #0]
	SysTick->LOAD = 0;
 80006dc:	4b10      	ldr	r3, [pc, #64]	; (8000720 <jump_to_application+0x54>)
 80006de:	2200      	movs	r2, #0
 80006e0:	605a      	str	r2, [r3, #4]
	SysTick->VAL  = 0;
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <jump_to_application+0x54>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	609a      	str	r2, [r3, #8]

	HAL_UART_DeInit(&huart2);
 80006e8:	4b0e      	ldr	r3, [pc, #56]	; (8000724 <jump_to_application+0x58>)
 80006ea:	0018      	movs	r0, r3
 80006ec:	f002 f974 	bl	80029d8 <HAL_UART_DeInit>
	HAL_DeInit();
 80006f0:	f000 fb1a 	bl	8000d28 <HAL_DeInit>
	HAL_RCC_DeInit();
 80006f4:	f001 fa22 	bl	8001b3c <HAL_RCC_DeInit>

	uint32_t appStack = *(__IO uint32_t*)APP_ADDRESS;
 80006f8:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <jump_to_application+0x5c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	60fb      	str	r3, [r7, #12]
	uint32_t appResetHandler = *(__IO uint32_t*)(APP_ADDRESS + 4);
 80006fe:	4b0b      	ldr	r3, [pc, #44]	; (800072c <jump_to_application+0x60>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	60bb      	str	r3, [r7, #8]
	pFunction appEntry = (pFunction)appResetHandler;
 8000704:	68bb      	ldr	r3, [r7, #8]
 8000706:	607b      	str	r3, [r7, #4]
 8000708:	68fb      	ldr	r3, [r7, #12]
 800070a:	603b      	str	r3, [r7, #0]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 800070c:	683b      	ldr	r3, [r7, #0]
 800070e:	f383 8808 	msr	MSP, r3
}
 8000712:	46c0      	nop			; (mov r8, r8)

	__set_MSP(appStack);
	appEntry();
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	4798      	blx	r3
}
 8000718:	46c0      	nop			; (mov r8, r8)
 800071a:	46bd      	mov	sp, r7
 800071c:	b004      	add	sp, #16
 800071e:	bd80      	pop	{r7, pc}
 8000720:	e000e010 	.word	0xe000e010
 8000724:	200000b4 	.word	0x200000b4
 8000728:	0800c000 	.word	0x0800c000
 800072c:	0800c004 	.word	0x0800c004

08000730 <HAL_UARTEx_RxEventCallback>:
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8000730:	b580      	push	{r7, lr}
 8000732:	b084      	sub	sp, #16
 8000734:	af00      	add	r7, sp, #0
 8000736:	6078      	str	r0, [r7, #4]
 8000738:	000a      	movs	r2, r1
 800073a:	1cbb      	adds	r3, r7, #2
 800073c:	801a      	strh	r2, [r3, #0]
    if (huart->Instance == USART2)
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	4a29      	ldr	r2, [pc, #164]	; (80007e8 <HAL_UARTEx_RxEventCallback+0xb8>)
 8000744:	4293      	cmp	r3, r2
 8000746:	d14a      	bne.n	80007de <HAL_UARTEx_RxEventCallback+0xae>
    {
	    if(Ota_Buffer[0]==0xFF && Ota_Buffer[1]==0xF4 && Ota_Buffer[2]==0xF3)
 8000748:	4b28      	ldr	r3, [pc, #160]	; (80007ec <HAL_UARTEx_RxEventCallback+0xbc>)
 800074a:	781b      	ldrb	r3, [r3, #0]
 800074c:	2bff      	cmp	r3, #255	; 0xff
 800074e:	d119      	bne.n	8000784 <HAL_UARTEx_RxEventCallback+0x54>
 8000750:	4b26      	ldr	r3, [pc, #152]	; (80007ec <HAL_UARTEx_RxEventCallback+0xbc>)
 8000752:	785b      	ldrb	r3, [r3, #1]
 8000754:	2bf4      	cmp	r3, #244	; 0xf4
 8000756:	d115      	bne.n	8000784 <HAL_UARTEx_RxEventCallback+0x54>
 8000758:	4b24      	ldr	r3, [pc, #144]	; (80007ec <HAL_UARTEx_RxEventCallback+0xbc>)
 800075a:	789b      	ldrb	r3, [r3, #2]
 800075c:	2bf3      	cmp	r3, #243	; 0xf3
 800075e:	d111      	bne.n	8000784 <HAL_UARTEx_RxEventCallback+0x54>
	    {
	    	if (erase_application_flash() == HAL_OK)
 8000760:	f7ff ff8e 	bl	8000680 <erase_application_flash>
 8000764:	1e03      	subs	r3, r0, #0
 8000766:	d106      	bne.n	8000776 <HAL_UARTEx_RxEventCallback+0x46>
	    	{
	    	    HAL_UART_Transmit(&huart2, (uint8_t*)"Flash erase success\r\n", 25, 100);
 8000768:	4921      	ldr	r1, [pc, #132]	; (80007f0 <HAL_UARTEx_RxEventCallback+0xc0>)
 800076a:	4822      	ldr	r0, [pc, #136]	; (80007f4 <HAL_UARTEx_RxEventCallback+0xc4>)
 800076c:	2364      	movs	r3, #100	; 0x64
 800076e:	2219      	movs	r2, #25
 8000770:	f002 f972 	bl	8002a58 <HAL_UART_Transmit>
	    	if (erase_application_flash() == HAL_OK)
 8000774:	e02d      	b.n	80007d2 <HAL_UARTEx_RxEventCallback+0xa2>
	    	}
	    	else
	    	{
	    	    HAL_UART_Transmit(&huart2, (uint8_t*)"Flash erase failed\r\n", 24, 100);
 8000776:	4920      	ldr	r1, [pc, #128]	; (80007f8 <HAL_UARTEx_RxEventCallback+0xc8>)
 8000778:	481e      	ldr	r0, [pc, #120]	; (80007f4 <HAL_UARTEx_RxEventCallback+0xc4>)
 800077a:	2364      	movs	r3, #100	; 0x64
 800077c:	2218      	movs	r2, #24
 800077e:	f002 f96b 	bl	8002a58 <HAL_UART_Transmit>
	    	if (erase_application_flash() == HAL_OK)
 8000782:	e026      	b.n	80007d2 <HAL_UARTEx_RxEventCallback+0xa2>
	    	}
	    }
	    else
	    {
			if (Size < CHUNK_SIZE)
 8000784:	1cbb      	adds	r3, r7, #2
 8000786:	881a      	ldrh	r2, [r3, #0]
 8000788:	2380      	movs	r3, #128	; 0x80
 800078a:	009b      	lsls	r3, r3, #2
 800078c:	429a      	cmp	r2, r3
 800078e:	d20c      	bcs.n	80007aa <HAL_UARTEx_RxEventCallback+0x7a>
			{
				memset(&Ota_Buffer[Size], 0xFF, CHUNK_SIZE - Size);
 8000790:	1cbb      	adds	r3, r7, #2
 8000792:	881a      	ldrh	r2, [r3, #0]
 8000794:	4b15      	ldr	r3, [pc, #84]	; (80007ec <HAL_UARTEx_RxEventCallback+0xbc>)
 8000796:	18d0      	adds	r0, r2, r3
 8000798:	1cbb      	adds	r3, r7, #2
 800079a:	881b      	ldrh	r3, [r3, #0]
 800079c:	2280      	movs	r2, #128	; 0x80
 800079e:	0092      	lsls	r2, r2, #2
 80007a0:	1ad3      	subs	r3, r2, r3
 80007a2:	001a      	movs	r2, r3
 80007a4:	21ff      	movs	r1, #255	; 0xff
 80007a6:	f004 fa39 	bl	8004c1c <memset>
			}

			uint32_t flash_addr = FLASH_APP_START_ADDRESS + (chunk_index * CHUNK_SIZE);
 80007aa:	4b14      	ldr	r3, [pc, #80]	; (80007fc <HAL_UARTEx_RxEventCallback+0xcc>)
 80007ac:	681b      	ldr	r3, [r3, #0]
 80007ae:	4a14      	ldr	r2, [pc, #80]	; (8000800 <HAL_UARTEx_RxEventCallback+0xd0>)
 80007b0:	4694      	mov	ip, r2
 80007b2:	4463      	add	r3, ip
 80007b4:	025b      	lsls	r3, r3, #9
 80007b6:	60fb      	str	r3, [r7, #12]

			if (write_flash_chunk(flash_addr, Ota_Buffer) == HAL_OK)
 80007b8:	4a0c      	ldr	r2, [pc, #48]	; (80007ec <HAL_UARTEx_RxEventCallback+0xbc>)
 80007ba:	68fb      	ldr	r3, [r7, #12]
 80007bc:	0011      	movs	r1, r2
 80007be:	0018      	movs	r0, r3
 80007c0:	f7ff ff2e 	bl	8000620 <write_flash_chunk>
 80007c4:	1e03      	subs	r3, r0, #0
 80007c6:	d104      	bne.n	80007d2 <HAL_UARTEx_RxEventCallback+0xa2>
			{
				//HAL_UART_Transmit(&huart2, (uint8_t*)" Chunk written\r\n", 18, 100);
				chunk_index++;
 80007c8:	4b0c      	ldr	r3, [pc, #48]	; (80007fc <HAL_UARTEx_RxEventCallback+0xcc>)
 80007ca:	681b      	ldr	r3, [r3, #0]
 80007cc:	1c5a      	adds	r2, r3, #1
 80007ce:	4b0b      	ldr	r3, [pc, #44]	; (80007fc <HAL_UARTEx_RxEventCallback+0xcc>)
 80007d0:	601a      	str	r2, [r3, #0]
			{
				//HAL_UART_Transmit(&huart2, (uint8_t*)"Flash write failed\r\n", 24, 100);
			}
	    }

        HAL_UARTEx_ReceiveToIdle_IT(&huart2, Ota_Buffer, sizeof(Ota_Buffer));
 80007d2:	4a0c      	ldr	r2, [pc, #48]	; (8000804 <HAL_UARTEx_RxEventCallback+0xd4>)
 80007d4:	4905      	ldr	r1, [pc, #20]	; (80007ec <HAL_UARTEx_RxEventCallback+0xbc>)
 80007d6:	4b07      	ldr	r3, [pc, #28]	; (80007f4 <HAL_UARTEx_RxEventCallback+0xc4>)
 80007d8:	0018      	movs	r0, r3
 80007da:	f004 f95d 	bl	8004a98 <HAL_UARTEx_ReceiveToIdle_IT>
    }
}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	46bd      	mov	sp, r7
 80007e2:	b004      	add	sp, #16
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	46c0      	nop			; (mov r8, r8)
 80007e8:	40004400 	.word	0x40004400
 80007ec:	20000148 	.word	0x20000148
 80007f0:	08004cb0 	.word	0x08004cb0
 80007f4:	200000b4 	.word	0x200000b4
 80007f8:	08004cc8 	.word	0x08004cc8
 80007fc:	200000b0 	.word	0x200000b0
 8000800:	00040060 	.word	0x00040060
 8000804:	000005dc 	.word	0x000005dc

08000808 <HAL_GPIO_EXTI_Rising_Callback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	0002      	movs	r2, r0
 8000810:	1dbb      	adds	r3, r7, #6
 8000812:	801a      	strh	r2, [r3, #0]

	if(HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000814:	2380      	movs	r3, #128	; 0x80
 8000816:	019b      	lsls	r3, r3, #6
 8000818:	4a06      	ldr	r2, [pc, #24]	; (8000834 <HAL_GPIO_EXTI_Rising_Callback+0x2c>)
 800081a:	0019      	movs	r1, r3
 800081c:	0010      	movs	r0, r2
 800081e:	f001 f8ef 	bl	8001a00 <HAL_GPIO_ReadPin>
 8000822:	1e03      	subs	r3, r0, #0
 8000824:	d002      	beq.n	800082c <HAL_GPIO_EXTI_Rising_Callback+0x24>
	{
		jump_to_app=1;
 8000826:	4b04      	ldr	r3, [pc, #16]	; (8000838 <HAL_GPIO_EXTI_Rising_Callback+0x30>)
 8000828:	2201      	movs	r2, #1
 800082a:	701a      	strb	r2, [r3, #0]
	}

}
 800082c:	46c0      	nop			; (mov r8, r8)
 800082e:	46bd      	mov	sp, r7
 8000830:	b002      	add	sp, #8
 8000832:	bd80      	pop	{r7, pc}
 8000834:	50000800 	.word	0x50000800
 8000838:	20000724 	.word	0x20000724

0800083c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000840:	f000 fa52 	bl	8000ce8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000844:	f000 f838 	bl	80008b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000848:	f000 f8e2 	bl	8000a10 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800084c:	f000 f892 	bl	8000974 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart2,(uint8_t*)Ota_Buffer,sizeof(Ota_Buffer));
 8000850:	4a13      	ldr	r2, [pc, #76]	; (80008a0 <main+0x64>)
 8000852:	4914      	ldr	r1, [pc, #80]	; (80008a4 <main+0x68>)
 8000854:	4b14      	ldr	r3, [pc, #80]	; (80008a8 <main+0x6c>)
 8000856:	0018      	movs	r0, r3
 8000858:	f004 f91e 	bl	8004a98 <HAL_UARTEx_ReceiveToIdle_IT>
  HAL_UART_Transmit(&huart2,(uint8_t*)"Bootloader\r\n", strlen("Bootloader\r\n"), 1000);
 800085c:	23fa      	movs	r3, #250	; 0xfa
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	4912      	ldr	r1, [pc, #72]	; (80008ac <main+0x70>)
 8000862:	4811      	ldr	r0, [pc, #68]	; (80008a8 <main+0x6c>)
 8000864:	220c      	movs	r2, #12
 8000866:	f002 f8f7 	bl	8002a58 <HAL_UART_Transmit>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	 // HAL_UART_Transmit(&huart2,(uint8_t*)"Bootloader\r\n", strlen("Bootloader\r\n"), 1000);
	    if (jump_to_app)
 800086a:	4b11      	ldr	r3, [pc, #68]	; (80008b0 <main+0x74>)
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	b2db      	uxtb	r3, r3
 8000870:	2b00      	cmp	r3, #0
 8000872:	d00e      	beq.n	8000892 <main+0x56>
	    {
	        HAL_UART_Transmit(&huart2, (uint8_t*)"Jumping To App\r\n", strlen("Jumping To App\r\n"), 1000);
 8000874:	23fa      	movs	r3, #250	; 0xfa
 8000876:	009b      	lsls	r3, r3, #2
 8000878:	490e      	ldr	r1, [pc, #56]	; (80008b4 <main+0x78>)
 800087a:	480b      	ldr	r0, [pc, #44]	; (80008a8 <main+0x6c>)
 800087c:	2210      	movs	r2, #16
 800087e:	f002 f8eb 	bl	8002a58 <HAL_UART_Transmit>
	        HAL_Delay(100);
 8000882:	2064      	movs	r0, #100	; 0x64
 8000884:	f000 fae2 	bl	8000e4c <HAL_Delay>
	        jump_to_app = 0;
 8000888:	4b09      	ldr	r3, [pc, #36]	; (80008b0 <main+0x74>)
 800088a:	2200      	movs	r2, #0
 800088c:	701a      	strb	r2, [r3, #0]

	        jump_to_application();
 800088e:	f7ff ff1d 	bl	80006cc <jump_to_application>
	    }

	  HAL_Delay(1000);
 8000892:	23fa      	movs	r3, #250	; 0xfa
 8000894:	009b      	lsls	r3, r3, #2
 8000896:	0018      	movs	r0, r3
 8000898:	f000 fad8 	bl	8000e4c <HAL_Delay>
	    if (jump_to_app)
 800089c:	e7e5      	b.n	800086a <main+0x2e>
 800089e:	46c0      	nop			; (mov r8, r8)
 80008a0:	000005dc 	.word	0x000005dc
 80008a4:	20000148 	.word	0x20000148
 80008a8:	200000b4 	.word	0x200000b4
 80008ac:	08004ce0 	.word	0x08004ce0
 80008b0:	20000724 	.word	0x20000724
 80008b4:	08004cf0 	.word	0x08004cf0

080008b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008b8:	b590      	push	{r4, r7, lr}
 80008ba:	b093      	sub	sp, #76	; 0x4c
 80008bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008be:	2410      	movs	r4, #16
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	0018      	movs	r0, r3
 80008c4:	2338      	movs	r3, #56	; 0x38
 80008c6:	001a      	movs	r2, r3
 80008c8:	2100      	movs	r1, #0
 80008ca:	f004 f9a7 	bl	8004c1c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008ce:	003b      	movs	r3, r7
 80008d0:	0018      	movs	r0, r3
 80008d2:	2310      	movs	r3, #16
 80008d4:	001a      	movs	r2, r3
 80008d6:	2100      	movs	r1, #0
 80008d8:	f004 f9a0 	bl	8004c1c <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80008dc:	2380      	movs	r3, #128	; 0x80
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	0018      	movs	r0, r3
 80008e2:	f001 f8df 	bl	8001aa4 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008e6:	193b      	adds	r3, r7, r4
 80008e8:	2202      	movs	r2, #2
 80008ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008ec:	193b      	adds	r3, r7, r4
 80008ee:	2280      	movs	r2, #128	; 0x80
 80008f0:	0052      	lsls	r2, r2, #1
 80008f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80008f4:	0021      	movs	r1, r4
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2240      	movs	r2, #64	; 0x40
 8000900:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2202      	movs	r2, #2
 8000906:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2202      	movs	r2, #2
 800090c:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800090e:	187b      	adds	r3, r7, r1
 8000910:	2200      	movs	r2, #0
 8000912:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000914:	187b      	adds	r3, r7, r1
 8000916:	2208      	movs	r2, #8
 8000918:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800091a:	187b      	adds	r3, r7, r1
 800091c:	2280      	movs	r2, #128	; 0x80
 800091e:	0292      	lsls	r2, r2, #10
 8000920:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000922:	187b      	adds	r3, r7, r1
 8000924:	2280      	movs	r2, #128	; 0x80
 8000926:	0492      	lsls	r2, r2, #18
 8000928:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800092a:	187b      	adds	r3, r7, r1
 800092c:	2280      	movs	r2, #128	; 0x80
 800092e:	0592      	lsls	r2, r2, #22
 8000930:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000932:	187b      	adds	r3, r7, r1
 8000934:	0018      	movs	r0, r3
 8000936:	f001 f97d 	bl	8001c34 <HAL_RCC_OscConfig>
 800093a:	1e03      	subs	r3, r0, #0
 800093c:	d001      	beq.n	8000942 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800093e:	f000 f8b7 	bl	8000ab0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000942:	003b      	movs	r3, r7
 8000944:	2207      	movs	r2, #7
 8000946:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000948:	003b      	movs	r3, r7
 800094a:	2202      	movs	r2, #2
 800094c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800094e:	003b      	movs	r3, r7
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000954:	003b      	movs	r3, r7
 8000956:	2200      	movs	r2, #0
 8000958:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800095a:	003b      	movs	r3, r7
 800095c:	2102      	movs	r1, #2
 800095e:	0018      	movs	r0, r3
 8000960:	f001 fc82 	bl	8002268 <HAL_RCC_ClockConfig>
 8000964:	1e03      	subs	r3, r0, #0
 8000966:	d001      	beq.n	800096c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000968:	f000 f8a2 	bl	8000ab0 <Error_Handler>
  }
}
 800096c:	46c0      	nop			; (mov r8, r8)
 800096e:	46bd      	mov	sp, r7
 8000970:	b013      	add	sp, #76	; 0x4c
 8000972:	bd90      	pop	{r4, r7, pc}

08000974 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000978:	4b23      	ldr	r3, [pc, #140]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 800097a:	4a24      	ldr	r2, [pc, #144]	; (8000a0c <MX_USART2_UART_Init+0x98>)
 800097c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800097e:	4b22      	ldr	r3, [pc, #136]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 8000980:	22e1      	movs	r2, #225	; 0xe1
 8000982:	0252      	lsls	r2, r2, #9
 8000984:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000986:	4b20      	ldr	r3, [pc, #128]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 8000988:	2200      	movs	r2, #0
 800098a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800098c:	4b1e      	ldr	r3, [pc, #120]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 800098e:	2200      	movs	r2, #0
 8000990:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000992:	4b1d      	ldr	r3, [pc, #116]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 8000994:	2200      	movs	r2, #0
 8000996:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000998:	4b1b      	ldr	r3, [pc, #108]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 800099a:	220c      	movs	r2, #12
 800099c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800099e:	4b1a      	ldr	r3, [pc, #104]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80009a4:	4b18      	ldr	r3, [pc, #96]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80009aa:	4b17      	ldr	r3, [pc, #92]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80009b0:	4b15      	ldr	r3, [pc, #84]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80009b6:	4b14      	ldr	r3, [pc, #80]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80009bc:	4b12      	ldr	r3, [pc, #72]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 80009be:	0018      	movs	r0, r3
 80009c0:	f001 ffb4 	bl	800292c <HAL_UART_Init>
 80009c4:	1e03      	subs	r3, r0, #0
 80009c6:	d001      	beq.n	80009cc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80009c8:	f000 f872 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009cc:	4b0e      	ldr	r3, [pc, #56]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 80009ce:	2100      	movs	r1, #0
 80009d0:	0018      	movs	r0, r3
 80009d2:	f003 ffdf 	bl	8004994 <HAL_UARTEx_SetTxFifoThreshold>
 80009d6:	1e03      	subs	r3, r0, #0
 80009d8:	d001      	beq.n	80009de <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80009da:	f000 f869 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80009de:	4b0a      	ldr	r3, [pc, #40]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 80009e0:	2100      	movs	r1, #0
 80009e2:	0018      	movs	r0, r3
 80009e4:	f004 f816 	bl	8004a14 <HAL_UARTEx_SetRxFifoThreshold>
 80009e8:	1e03      	subs	r3, r0, #0
 80009ea:	d001      	beq.n	80009f0 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80009ec:	f000 f860 	bl	8000ab0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80009f0:	4b05      	ldr	r3, [pc, #20]	; (8000a08 <MX_USART2_UART_Init+0x94>)
 80009f2:	0018      	movs	r0, r3
 80009f4:	f003 ff94 	bl	8004920 <HAL_UARTEx_DisableFifoMode>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 80009fc:	f000 f858 	bl	8000ab0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a00:	46c0      	nop			; (mov r8, r8)
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	200000b4 	.word	0x200000b4
 8000a0c:	40004400 	.word	0x40004400

08000a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a10:	b590      	push	{r4, r7, lr}
 8000a12:	b089      	sub	sp, #36	; 0x24
 8000a14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a16:	240c      	movs	r4, #12
 8000a18:	193b      	adds	r3, r7, r4
 8000a1a:	0018      	movs	r0, r3
 8000a1c:	2314      	movs	r3, #20
 8000a1e:	001a      	movs	r2, r3
 8000a20:	2100      	movs	r1, #0
 8000a22:	f004 f8fb 	bl	8004c1c <memset>
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a26:	4b20      	ldr	r3, [pc, #128]	; (8000aa8 <MX_GPIO_Init+0x98>)
 8000a28:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a2a:	4b1f      	ldr	r3, [pc, #124]	; (8000aa8 <MX_GPIO_Init+0x98>)
 8000a2c:	2104      	movs	r1, #4
 8000a2e:	430a      	orrs	r2, r1
 8000a30:	635a      	str	r2, [r3, #52]	; 0x34
 8000a32:	4b1d      	ldr	r3, [pc, #116]	; (8000aa8 <MX_GPIO_Init+0x98>)
 8000a34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a36:	2204      	movs	r2, #4
 8000a38:	4013      	ands	r3, r2
 8000a3a:	60bb      	str	r3, [r7, #8]
 8000a3c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a3e:	4b1a      	ldr	r3, [pc, #104]	; (8000aa8 <MX_GPIO_Init+0x98>)
 8000a40:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a42:	4b19      	ldr	r3, [pc, #100]	; (8000aa8 <MX_GPIO_Init+0x98>)
 8000a44:	2120      	movs	r1, #32
 8000a46:	430a      	orrs	r2, r1
 8000a48:	635a      	str	r2, [r3, #52]	; 0x34
 8000a4a:	4b17      	ldr	r3, [pc, #92]	; (8000aa8 <MX_GPIO_Init+0x98>)
 8000a4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a4e:	2220      	movs	r2, #32
 8000a50:	4013      	ands	r3, r2
 8000a52:	607b      	str	r3, [r7, #4]
 8000a54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a56:	4b14      	ldr	r3, [pc, #80]	; (8000aa8 <MX_GPIO_Init+0x98>)
 8000a58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a5a:	4b13      	ldr	r3, [pc, #76]	; (8000aa8 <MX_GPIO_Init+0x98>)
 8000a5c:	2101      	movs	r1, #1
 8000a5e:	430a      	orrs	r2, r1
 8000a60:	635a      	str	r2, [r3, #52]	; 0x34
 8000a62:	4b11      	ldr	r3, [pc, #68]	; (8000aa8 <MX_GPIO_Init+0x98>)
 8000a64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a66:	2201      	movs	r2, #1
 8000a68:	4013      	ands	r3, r2
 8000a6a:	603b      	str	r3, [r7, #0]
 8000a6c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a6e:	193b      	adds	r3, r7, r4
 8000a70:	2280      	movs	r2, #128	; 0x80
 8000a72:	0192      	lsls	r2, r2, #6
 8000a74:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a76:	193b      	adds	r3, r7, r4
 8000a78:	2288      	movs	r2, #136	; 0x88
 8000a7a:	0352      	lsls	r2, r2, #13
 8000a7c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	193b      	adds	r3, r7, r4
 8000a80:	2200      	movs	r2, #0
 8000a82:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a84:	193b      	adds	r3, r7, r4
 8000a86:	4a09      	ldr	r2, [pc, #36]	; (8000aac <MX_GPIO_Init+0x9c>)
 8000a88:	0019      	movs	r1, r3
 8000a8a:	0010      	movs	r0, r2
 8000a8c:	f000 fd84 	bl	8001598 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 0, 0);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2100      	movs	r1, #0
 8000a94:	2007      	movs	r0, #7
 8000a96:	f000 facb 	bl	8001030 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 8000a9a:	2007      	movs	r0, #7
 8000a9c:	f000 fadd 	bl	800105a <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000aa0:	46c0      	nop			; (mov r8, r8)
 8000aa2:	46bd      	mov	sp, r7
 8000aa4:	b009      	add	sp, #36	; 0x24
 8000aa6:	bd90      	pop	{r4, r7, pc}
 8000aa8:	40021000 	.word	0x40021000
 8000aac:	50000800 	.word	0x50000800

08000ab0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000ab4:	b672      	cpsid	i
}
 8000ab6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <Error_Handler+0x8>
	...

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b0f      	ldr	r3, [pc, #60]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000ac6:	4b0e      	ldr	r3, [pc, #56]	; (8000b00 <HAL_MspInit+0x44>)
 8000ac8:	2101      	movs	r1, #1
 8000aca:	430a      	orrs	r2, r1
 8000acc:	641a      	str	r2, [r3, #64]	; 0x40
 8000ace:	4b0c      	ldr	r3, [pc, #48]	; (8000b00 <HAL_MspInit+0x44>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	4013      	ands	r3, r2
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b09      	ldr	r3, [pc, #36]	; (8000b00 <HAL_MspInit+0x44>)
 8000adc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000ade:	4b08      	ldr	r3, [pc, #32]	; (8000b00 <HAL_MspInit+0x44>)
 8000ae0:	2180      	movs	r1, #128	; 0x80
 8000ae2:	0549      	lsls	r1, r1, #21
 8000ae4:	430a      	orrs	r2, r1
 8000ae6:	63da      	str	r2, [r3, #60]	; 0x3c
 8000ae8:	4b05      	ldr	r3, [pc, #20]	; (8000b00 <HAL_MspInit+0x44>)
 8000aea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000aec:	2380      	movs	r3, #128	; 0x80
 8000aee:	055b      	lsls	r3, r3, #21
 8000af0:	4013      	ands	r3, r2
 8000af2:	603b      	str	r3, [r7, #0]
 8000af4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	46bd      	mov	sp, r7
 8000afa:	b002      	add	sp, #8
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	46c0      	nop			; (mov r8, r8)
 8000b00:	40021000 	.word	0x40021000

08000b04 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b04:	b590      	push	{r4, r7, lr}
 8000b06:	b097      	sub	sp, #92	; 0x5c
 8000b08:	af00      	add	r7, sp, #0
 8000b0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b0c:	2344      	movs	r3, #68	; 0x44
 8000b0e:	18fb      	adds	r3, r7, r3
 8000b10:	0018      	movs	r0, r3
 8000b12:	2314      	movs	r3, #20
 8000b14:	001a      	movs	r2, r3
 8000b16:	2100      	movs	r1, #0
 8000b18:	f004 f880 	bl	8004c1c <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b1c:	2410      	movs	r4, #16
 8000b1e:	193b      	adds	r3, r7, r4
 8000b20:	0018      	movs	r0, r3
 8000b22:	2334      	movs	r3, #52	; 0x34
 8000b24:	001a      	movs	r2, r3
 8000b26:	2100      	movs	r1, #0
 8000b28:	f004 f878 	bl	8004c1c <memset>
  if(huart->Instance==USART2)
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	681b      	ldr	r3, [r3, #0]
 8000b30:	4a26      	ldr	r2, [pc, #152]	; (8000bcc <HAL_UART_MspInit+0xc8>)
 8000b32:	4293      	cmp	r3, r2
 8000b34:	d146      	bne.n	8000bc4 <HAL_UART_MspInit+0xc0>

    /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b36:	193b      	adds	r3, r7, r4
 8000b38:	2202      	movs	r2, #2
 8000b3a:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b3c:	193b      	adds	r3, r7, r4
 8000b3e:	2200      	movs	r2, #0
 8000b40:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b42:	193b      	adds	r3, r7, r4
 8000b44:	0018      	movs	r0, r3
 8000b46:	f001 fd39 	bl	80025bc <HAL_RCCEx_PeriphCLKConfig>
 8000b4a:	1e03      	subs	r3, r0, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000b4e:	f7ff ffaf 	bl	8000ab0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b52:	4b1f      	ldr	r3, [pc, #124]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b54:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b56:	4b1e      	ldr	r3, [pc, #120]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b58:	2180      	movs	r1, #128	; 0x80
 8000b5a:	0289      	lsls	r1, r1, #10
 8000b5c:	430a      	orrs	r2, r1
 8000b5e:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b60:	4b1b      	ldr	r3, [pc, #108]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b64:	2380      	movs	r3, #128	; 0x80
 8000b66:	029b      	lsls	r3, r3, #10
 8000b68:	4013      	ands	r3, r2
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b6e:	4b18      	ldr	r3, [pc, #96]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000b72:	4b17      	ldr	r3, [pc, #92]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b74:	2101      	movs	r1, #1
 8000b76:	430a      	orrs	r2, r1
 8000b78:	635a      	str	r2, [r3, #52]	; 0x34
 8000b7a:	4b15      	ldr	r3, [pc, #84]	; (8000bd0 <HAL_UART_MspInit+0xcc>)
 8000b7c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000b7e:	2201      	movs	r2, #1
 8000b80:	4013      	ands	r3, r2
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000b86:	2144      	movs	r1, #68	; 0x44
 8000b88:	187b      	adds	r3, r7, r1
 8000b8a:	220c      	movs	r2, #12
 8000b8c:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b8e:	187b      	adds	r3, r7, r1
 8000b90:	2202      	movs	r2, #2
 8000b92:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	187b      	adds	r3, r7, r1
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b9a:	187b      	adds	r3, r7, r1
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000ba0:	187b      	adds	r3, r7, r1
 8000ba2:	2201      	movs	r2, #1
 8000ba4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ba6:	187a      	adds	r2, r7, r1
 8000ba8:	23a0      	movs	r3, #160	; 0xa0
 8000baa:	05db      	lsls	r3, r3, #23
 8000bac:	0011      	movs	r1, r2
 8000bae:	0018      	movs	r0, r3
 8000bb0:	f000 fcf2 	bl	8001598 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000bb4:	2200      	movs	r2, #0
 8000bb6:	2100      	movs	r1, #0
 8000bb8:	201c      	movs	r0, #28
 8000bba:	f000 fa39 	bl	8001030 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000bbe:	201c      	movs	r0, #28
 8000bc0:	f000 fa4b 	bl	800105a <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8000bc4:	46c0      	nop			; (mov r8, r8)
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	b017      	add	sp, #92	; 0x5c
 8000bca:	bd90      	pop	{r4, r7, pc}
 8000bcc:	40004400 	.word	0x40004400
 8000bd0:	40021000 	.word	0x40021000

08000bd4 <HAL_UART_MspDeInit>:
  * This function freeze the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	4a0a      	ldr	r2, [pc, #40]	; (8000c0c <HAL_UART_MspDeInit+0x38>)
 8000be2:	4293      	cmp	r3, r2
 8000be4:	d10e      	bne.n	8000c04 <HAL_UART_MspDeInit+0x30>
  {
    /* USER CODE BEGIN USART2_MspDeInit 0 */

    /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 8000be6:	4b0a      	ldr	r3, [pc, #40]	; (8000c10 <HAL_UART_MspDeInit+0x3c>)
 8000be8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000bea:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <HAL_UART_MspDeInit+0x3c>)
 8000bec:	4909      	ldr	r1, [pc, #36]	; (8000c14 <HAL_UART_MspDeInit+0x40>)
 8000bee:	400a      	ands	r2, r1
 8000bf0:	63da      	str	r2, [r3, #60]	; 0x3c

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 8000bf2:	23a0      	movs	r3, #160	; 0xa0
 8000bf4:	05db      	lsls	r3, r3, #23
 8000bf6:	210c      	movs	r1, #12
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 fe31 	bl	8001860 <HAL_GPIO_DeInit>

    /* USART2 interrupt DeInit */
    HAL_NVIC_DisableIRQ(USART2_IRQn);
 8000bfe:	201c      	movs	r0, #28
 8000c00:	f000 fa3b 	bl	800107a <HAL_NVIC_DisableIRQ>
    /* USER CODE BEGIN USART2_MspDeInit 1 */

    /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	b002      	add	sp, #8
 8000c0a:	bd80      	pop	{r7, pc}
 8000c0c:	40004400 	.word	0x40004400
 8000c10:	40021000 	.word	0x40021000
 8000c14:	fffdffff 	.word	0xfffdffff

08000c18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c1c:	e7fe      	b.n	8000c1c <NMI_Handler+0x4>

08000c1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c1e:	b580      	push	{r7, lr}
 8000c20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c22:	e7fe      	b.n	8000c22 <HardFault_Handler+0x4>

08000c24 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c28:	46c0      	nop			; (mov r8, r8)
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c32:	46c0      	nop			; (mov r8, r8)
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}

08000c38 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c3c:	f000 f8ea 	bl	8000e14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c40:	46c0      	nop			; (mov r8, r8)
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8000c4a:	2380      	movs	r3, #128	; 0x80
 8000c4c:	019b      	lsls	r3, r3, #6
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f000 fef4 	bl	8001a3c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8000c54:	46c0      	nop			; (mov r8, r8)
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
	...

08000c5c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000c60:	4b06      	ldr	r3, [pc, #24]	; (8000c7c <USART2_IRQHandler+0x20>)
 8000c62:	0018      	movs	r0, r3
 8000c64:	f001 ff9c 	bl	8002ba0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */
  HAL_UARTEx_ReceiveToIdle_IT(&huart2,(uint8_t*)Ota_Buffer,sizeof(Ota_Buffer));
 8000c68:	4a05      	ldr	r2, [pc, #20]	; (8000c80 <USART2_IRQHandler+0x24>)
 8000c6a:	4906      	ldr	r1, [pc, #24]	; (8000c84 <USART2_IRQHandler+0x28>)
 8000c6c:	4b03      	ldr	r3, [pc, #12]	; (8000c7c <USART2_IRQHandler+0x20>)
 8000c6e:	0018      	movs	r0, r3
 8000c70:	f003 ff12 	bl	8004a98 <HAL_UARTEx_ReceiveToIdle_IT>
  /* USER CODE END USART2_IRQn 1 */
}
 8000c74:	46c0      	nop			; (mov r8, r8)
 8000c76:	46bd      	mov	sp, r7
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	46c0      	nop			; (mov r8, r8)
 8000c7c:	200000b4 	.word	0x200000b4
 8000c80:	000005dc 	.word	0x000005dc
 8000c84:	20000148 	.word	0x20000148

08000c88 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c8c:	46c0      	nop			; (mov r8, r8)
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
	...

08000c94 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c96:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c98:	f7ff fff6 	bl	8000c88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c9c:	480c      	ldr	r0, [pc, #48]	; (8000cd0 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c9e:	490d      	ldr	r1, [pc, #52]	; (8000cd4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000ca0:	4a0d      	ldr	r2, [pc, #52]	; (8000cd8 <LoopForever+0xe>)
  movs r3, #0
 8000ca2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ca4:	e002      	b.n	8000cac <LoopCopyDataInit>

08000ca6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ca6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ca8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000caa:	3304      	adds	r3, #4

08000cac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cb0:	d3f9      	bcc.n	8000ca6 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cb2:	4a0a      	ldr	r2, [pc, #40]	; (8000cdc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cb4:	4c0a      	ldr	r4, [pc, #40]	; (8000ce0 <LoopForever+0x16>)
  movs r3, #0
 8000cb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cb8:	e001      	b.n	8000cbe <LoopFillZerobss>

08000cba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cbc:	3204      	adds	r2, #4

08000cbe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cbe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000cc0:	d3fb      	bcc.n	8000cba <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000cc2:	f003 ffb3 	bl	8004c2c <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000cc6:	f7ff fdb9 	bl	800083c <main>

08000cca <LoopForever>:

LoopForever:
  b LoopForever
 8000cca:	e7fe      	b.n	8000cca <LoopForever>
  ldr   r0, =_estack
 8000ccc:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8000cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000cd4:	20000094 	.word	0x20000094
  ldr r2, =_sidata
 8000cd8:	08004d9c 	.word	0x08004d9c
  ldr r2, =_sbss
 8000cdc:	20000094 	.word	0x20000094
  ldr r4, =_ebss
 8000ce0:	20000748 	.word	0x20000748

08000ce4 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000ce4:	e7fe      	b.n	8000ce4 <ADC1_COMP_IRQHandler>
	...

08000ce8 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b082      	sub	sp, #8
 8000cec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cee:	1dfb      	adds	r3, r7, #7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x3c>)
 8000cf6:	681a      	ldr	r2, [r3, #0]
 8000cf8:	4b0a      	ldr	r3, [pc, #40]	; (8000d24 <HAL_Init+0x3c>)
 8000cfa:	2180      	movs	r1, #128	; 0x80
 8000cfc:	0049      	lsls	r1, r1, #1
 8000cfe:	430a      	orrs	r2, r1
 8000d00:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	2003      	movs	r0, #3
 8000d04:	f000 f83c 	bl	8000d80 <HAL_InitTick>
 8000d08:	1e03      	subs	r3, r0, #0
 8000d0a:	d003      	beq.n	8000d14 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000d0c:	1dfb      	adds	r3, r7, #7
 8000d0e:	2201      	movs	r2, #1
 8000d10:	701a      	strb	r2, [r3, #0]
 8000d12:	e001      	b.n	8000d18 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000d14:	f7ff fed2 	bl	8000abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d18:	1dfb      	adds	r3, r7, #7
 8000d1a:	781b      	ldrb	r3, [r3, #0]
}
 8000d1c:	0018      	movs	r0, r3
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b002      	add	sp, #8
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40022000 	.word	0x40022000

08000d28 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the source of time base.
  * @note   This function is optional.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000d2c:	4b10      	ldr	r3, [pc, #64]	; (8000d70 <HAL_DeInit+0x48>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	4252      	negs	r2, r2
 8000d32:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_RCC_APB1_RELEASE_RESET();
 8000d34:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_DeInit+0x48>)
 8000d36:	2200      	movs	r2, #0
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c

  __HAL_RCC_APB2_FORCE_RESET();
 8000d3a:	4b0d      	ldr	r3, [pc, #52]	; (8000d70 <HAL_DeInit+0x48>)
 8000d3c:	2201      	movs	r2, #1
 8000d3e:	4252      	negs	r2, r2
 8000d40:	631a      	str	r2, [r3, #48]	; 0x30
  __HAL_RCC_APB2_RELEASE_RESET();
 8000d42:	4b0b      	ldr	r3, [pc, #44]	; (8000d70 <HAL_DeInit+0x48>)
 8000d44:	2200      	movs	r2, #0
 8000d46:	631a      	str	r2, [r3, #48]	; 0x30

  __HAL_RCC_AHB_FORCE_RESET();
 8000d48:	4b09      	ldr	r3, [pc, #36]	; (8000d70 <HAL_DeInit+0x48>)
 8000d4a:	2201      	movs	r2, #1
 8000d4c:	4252      	negs	r2, r2
 8000d4e:	629a      	str	r2, [r3, #40]	; 0x28
  __HAL_RCC_AHB_RELEASE_RESET();
 8000d50:	4b07      	ldr	r3, [pc, #28]	; (8000d70 <HAL_DeInit+0x48>)
 8000d52:	2200      	movs	r2, #0
 8000d54:	629a      	str	r2, [r3, #40]	; 0x28

  __HAL_RCC_IOP_FORCE_RESET();
 8000d56:	4b06      	ldr	r3, [pc, #24]	; (8000d70 <HAL_DeInit+0x48>)
 8000d58:	2201      	movs	r2, #1
 8000d5a:	4252      	negs	r2, r2
 8000d5c:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_IOP_RELEASE_RESET();
 8000d5e:	4b04      	ldr	r3, [pc, #16]	; (8000d70 <HAL_DeInit+0x48>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	625a      	str	r2, [r3, #36]	; 0x24

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000d64:	f000 f806 	bl	8000d74 <HAL_MspDeInit>

  /* Return function status */
  return HAL_OK;
 8000d68:	2300      	movs	r3, #0
}
 8000d6a:	0018      	movs	r0, r3
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40021000 	.word	0x40021000

08000d74 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */
}
 8000d78:	46c0      	nop			; (mov r8, r8)
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bd80      	pop	{r7, pc}
	...

08000d80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d80:	b590      	push	{r4, r7, lr}
 8000d82:	b085      	sub	sp, #20
 8000d84:	af00      	add	r7, sp, #0
 8000d86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000d88:	230f      	movs	r3, #15
 8000d8a:	18fb      	adds	r3, r7, r3
 8000d8c:	2200      	movs	r2, #0
 8000d8e:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000d90:	4b1d      	ldr	r3, [pc, #116]	; (8000e08 <HAL_InitTick+0x88>)
 8000d92:	781b      	ldrb	r3, [r3, #0]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	d02b      	beq.n	8000df0 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000d98:	4b1c      	ldr	r3, [pc, #112]	; (8000e0c <HAL_InitTick+0x8c>)
 8000d9a:	681c      	ldr	r4, [r3, #0]
 8000d9c:	4b1a      	ldr	r3, [pc, #104]	; (8000e08 <HAL_InitTick+0x88>)
 8000d9e:	781b      	ldrb	r3, [r3, #0]
 8000da0:	0019      	movs	r1, r3
 8000da2:	23fa      	movs	r3, #250	; 0xfa
 8000da4:	0098      	lsls	r0, r3, #2
 8000da6:	f7ff f9af 	bl	8000108 <__udivsi3>
 8000daa:	0003      	movs	r3, r0
 8000dac:	0019      	movs	r1, r3
 8000dae:	0020      	movs	r0, r4
 8000db0:	f7ff f9aa 	bl	8000108 <__udivsi3>
 8000db4:	0003      	movs	r3, r0
 8000db6:	0018      	movs	r0, r3
 8000db8:	f000 f96f 	bl	800109a <HAL_SYSTICK_Config>
 8000dbc:	1e03      	subs	r3, r0, #0
 8000dbe:	d112      	bne.n	8000de6 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000dc0:	687b      	ldr	r3, [r7, #4]
 8000dc2:	2b03      	cmp	r3, #3
 8000dc4:	d80a      	bhi.n	8000ddc <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dc6:	6879      	ldr	r1, [r7, #4]
 8000dc8:	2301      	movs	r3, #1
 8000dca:	425b      	negs	r3, r3
 8000dcc:	2200      	movs	r2, #0
 8000dce:	0018      	movs	r0, r3
 8000dd0:	f000 f92e 	bl	8001030 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dd4:	4b0e      	ldr	r3, [pc, #56]	; (8000e10 <HAL_InitTick+0x90>)
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	601a      	str	r2, [r3, #0]
 8000dda:	e00d      	b.n	8000df8 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000ddc:	230f      	movs	r3, #15
 8000dde:	18fb      	adds	r3, r7, r3
 8000de0:	2201      	movs	r2, #1
 8000de2:	701a      	strb	r2, [r3, #0]
 8000de4:	e008      	b.n	8000df8 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000de6:	230f      	movs	r3, #15
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
 8000dee:	e003      	b.n	8000df8 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000df0:	230f      	movs	r3, #15
 8000df2:	18fb      	adds	r3, r7, r3
 8000df4:	2201      	movs	r2, #1
 8000df6:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000df8:	230f      	movs	r3, #15
 8000dfa:	18fb      	adds	r3, r7, r3
 8000dfc:	781b      	ldrb	r3, [r3, #0]
}
 8000dfe:	0018      	movs	r0, r3
 8000e00:	46bd      	mov	sp, r7
 8000e02:	b005      	add	sp, #20
 8000e04:	bd90      	pop	{r4, r7, pc}
 8000e06:	46c0      	nop			; (mov r8, r8)
 8000e08:	20000008 	.word	0x20000008
 8000e0c:	20000000 	.word	0x20000000
 8000e10:	20000004 	.word	0x20000004

08000e14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <HAL_IncTick+0x1c>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	001a      	movs	r2, r3
 8000e1e:	4b05      	ldr	r3, [pc, #20]	; (8000e34 <HAL_IncTick+0x20>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	18d2      	adds	r2, r2, r3
 8000e24:	4b03      	ldr	r3, [pc, #12]	; (8000e34 <HAL_IncTick+0x20>)
 8000e26:	601a      	str	r2, [r3, #0]
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	46c0      	nop			; (mov r8, r8)
 8000e30:	20000008 	.word	0x20000008
 8000e34:	20000728 	.word	0x20000728

08000e38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e3c:	4b02      	ldr	r3, [pc, #8]	; (8000e48 <HAL_GetTick+0x10>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
}
 8000e40:	0018      	movs	r0, r3
 8000e42:	46bd      	mov	sp, r7
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	46c0      	nop			; (mov r8, r8)
 8000e48:	20000728 	.word	0x20000728

08000e4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b084      	sub	sp, #16
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e54:	f7ff fff0 	bl	8000e38 <HAL_GetTick>
 8000e58:	0003      	movs	r3, r0
 8000e5a:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	3301      	adds	r3, #1
 8000e64:	d005      	beq.n	8000e72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e66:	4b0a      	ldr	r3, [pc, #40]	; (8000e90 <HAL_Delay+0x44>)
 8000e68:	781b      	ldrb	r3, [r3, #0]
 8000e6a:	001a      	movs	r2, r3
 8000e6c:	68fb      	ldr	r3, [r7, #12]
 8000e6e:	189b      	adds	r3, r3, r2
 8000e70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e72:	46c0      	nop			; (mov r8, r8)
 8000e74:	f7ff ffe0 	bl	8000e38 <HAL_GetTick>
 8000e78:	0002      	movs	r2, r0
 8000e7a:	68bb      	ldr	r3, [r7, #8]
 8000e7c:	1ad3      	subs	r3, r2, r3
 8000e7e:	68fa      	ldr	r2, [r7, #12]
 8000e80:	429a      	cmp	r2, r3
 8000e82:	d8f7      	bhi.n	8000e74 <HAL_Delay+0x28>
  {
  }
}
 8000e84:	46c0      	nop			; (mov r8, r8)
 8000e86:	46c0      	nop			; (mov r8, r8)
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	b004      	add	sp, #16
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	46c0      	nop			; (mov r8, r8)
 8000e90:	20000008 	.word	0x20000008

08000e94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	0002      	movs	r2, r0
 8000e9c:	1dfb      	adds	r3, r7, #7
 8000e9e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ea0:	1dfb      	adds	r3, r7, #7
 8000ea2:	781b      	ldrb	r3, [r3, #0]
 8000ea4:	2b7f      	cmp	r3, #127	; 0x7f
 8000ea6:	d809      	bhi.n	8000ebc <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ea8:	1dfb      	adds	r3, r7, #7
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	001a      	movs	r2, r3
 8000eae:	231f      	movs	r3, #31
 8000eb0:	401a      	ands	r2, r3
 8000eb2:	4b04      	ldr	r3, [pc, #16]	; (8000ec4 <__NVIC_EnableIRQ+0x30>)
 8000eb4:	2101      	movs	r1, #1
 8000eb6:	4091      	lsls	r1, r2
 8000eb8:	000a      	movs	r2, r1
 8000eba:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8000ebc:	46c0      	nop			; (mov r8, r8)
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	b002      	add	sp, #8
 8000ec2:	bd80      	pop	{r7, pc}
 8000ec4:	e000e100 	.word	0xe000e100

08000ec8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	0002      	movs	r2, r0
 8000ed0:	1dfb      	adds	r3, r7, #7
 8000ed2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000ed4:	1dfb      	adds	r3, r7, #7
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b7f      	cmp	r3, #127	; 0x7f
 8000eda:	d810      	bhi.n	8000efe <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000edc:	1dfb      	adds	r3, r7, #7
 8000ede:	781b      	ldrb	r3, [r3, #0]
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	231f      	movs	r3, #31
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	4908      	ldr	r1, [pc, #32]	; (8000f08 <__NVIC_DisableIRQ+0x40>)
 8000ee8:	2201      	movs	r2, #1
 8000eea:	409a      	lsls	r2, r3
 8000eec:	0013      	movs	r3, r2
 8000eee:	2280      	movs	r2, #128	; 0x80
 8000ef0:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000ef2:	f3bf 8f4f 	dsb	sy
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8000ef8:	f3bf 8f6f 	isb	sy
}
 8000efc:	46c0      	nop			; (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 8000efe:	46c0      	nop			; (mov r8, r8)
 8000f00:	46bd      	mov	sp, r7
 8000f02:	b002      	add	sp, #8
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	46c0      	nop			; (mov r8, r8)
 8000f08:	e000e100 	.word	0xe000e100

08000f0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f0c:	b590      	push	{r4, r7, lr}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	0002      	movs	r2, r0
 8000f14:	6039      	str	r1, [r7, #0]
 8000f16:	1dfb      	adds	r3, r7, #7
 8000f18:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8000f1a:	1dfb      	adds	r3, r7, #7
 8000f1c:	781b      	ldrb	r3, [r3, #0]
 8000f1e:	2b7f      	cmp	r3, #127	; 0x7f
 8000f20:	d828      	bhi.n	8000f74 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f22:	4a2f      	ldr	r2, [pc, #188]	; (8000fe0 <__NVIC_SetPriority+0xd4>)
 8000f24:	1dfb      	adds	r3, r7, #7
 8000f26:	781b      	ldrb	r3, [r3, #0]
 8000f28:	b25b      	sxtb	r3, r3
 8000f2a:	089b      	lsrs	r3, r3, #2
 8000f2c:	33c0      	adds	r3, #192	; 0xc0
 8000f2e:	009b      	lsls	r3, r3, #2
 8000f30:	589b      	ldr	r3, [r3, r2]
 8000f32:	1dfa      	adds	r2, r7, #7
 8000f34:	7812      	ldrb	r2, [r2, #0]
 8000f36:	0011      	movs	r1, r2
 8000f38:	2203      	movs	r2, #3
 8000f3a:	400a      	ands	r2, r1
 8000f3c:	00d2      	lsls	r2, r2, #3
 8000f3e:	21ff      	movs	r1, #255	; 0xff
 8000f40:	4091      	lsls	r1, r2
 8000f42:	000a      	movs	r2, r1
 8000f44:	43d2      	mvns	r2, r2
 8000f46:	401a      	ands	r2, r3
 8000f48:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	019b      	lsls	r3, r3, #6
 8000f4e:	22ff      	movs	r2, #255	; 0xff
 8000f50:	401a      	ands	r2, r3
 8000f52:	1dfb      	adds	r3, r7, #7
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	0018      	movs	r0, r3
 8000f58:	2303      	movs	r3, #3
 8000f5a:	4003      	ands	r3, r0
 8000f5c:	00db      	lsls	r3, r3, #3
 8000f5e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f60:	481f      	ldr	r0, [pc, #124]	; (8000fe0 <__NVIC_SetPriority+0xd4>)
 8000f62:	1dfb      	adds	r3, r7, #7
 8000f64:	781b      	ldrb	r3, [r3, #0]
 8000f66:	b25b      	sxtb	r3, r3
 8000f68:	089b      	lsrs	r3, r3, #2
 8000f6a:	430a      	orrs	r2, r1
 8000f6c:	33c0      	adds	r3, #192	; 0xc0
 8000f6e:	009b      	lsls	r3, r3, #2
 8000f70:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8000f72:	e031      	b.n	8000fd8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000f74:	4a1b      	ldr	r2, [pc, #108]	; (8000fe4 <__NVIC_SetPriority+0xd8>)
 8000f76:	1dfb      	adds	r3, r7, #7
 8000f78:	781b      	ldrb	r3, [r3, #0]
 8000f7a:	0019      	movs	r1, r3
 8000f7c:	230f      	movs	r3, #15
 8000f7e:	400b      	ands	r3, r1
 8000f80:	3b08      	subs	r3, #8
 8000f82:	089b      	lsrs	r3, r3, #2
 8000f84:	3306      	adds	r3, #6
 8000f86:	009b      	lsls	r3, r3, #2
 8000f88:	18d3      	adds	r3, r2, r3
 8000f8a:	3304      	adds	r3, #4
 8000f8c:	681b      	ldr	r3, [r3, #0]
 8000f8e:	1dfa      	adds	r2, r7, #7
 8000f90:	7812      	ldrb	r2, [r2, #0]
 8000f92:	0011      	movs	r1, r2
 8000f94:	2203      	movs	r2, #3
 8000f96:	400a      	ands	r2, r1
 8000f98:	00d2      	lsls	r2, r2, #3
 8000f9a:	21ff      	movs	r1, #255	; 0xff
 8000f9c:	4091      	lsls	r1, r2
 8000f9e:	000a      	movs	r2, r1
 8000fa0:	43d2      	mvns	r2, r2
 8000fa2:	401a      	ands	r2, r3
 8000fa4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8000fa6:	683b      	ldr	r3, [r7, #0]
 8000fa8:	019b      	lsls	r3, r3, #6
 8000faa:	22ff      	movs	r2, #255	; 0xff
 8000fac:	401a      	ands	r2, r3
 8000fae:	1dfb      	adds	r3, r7, #7
 8000fb0:	781b      	ldrb	r3, [r3, #0]
 8000fb2:	0018      	movs	r0, r3
 8000fb4:	2303      	movs	r3, #3
 8000fb6:	4003      	ands	r3, r0
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8000fbc:	4809      	ldr	r0, [pc, #36]	; (8000fe4 <__NVIC_SetPriority+0xd8>)
 8000fbe:	1dfb      	adds	r3, r7, #7
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	001c      	movs	r4, r3
 8000fc4:	230f      	movs	r3, #15
 8000fc6:	4023      	ands	r3, r4
 8000fc8:	3b08      	subs	r3, #8
 8000fca:	089b      	lsrs	r3, r3, #2
 8000fcc:	430a      	orrs	r2, r1
 8000fce:	3306      	adds	r3, #6
 8000fd0:	009b      	lsls	r3, r3, #2
 8000fd2:	18c3      	adds	r3, r0, r3
 8000fd4:	3304      	adds	r3, #4
 8000fd6:	601a      	str	r2, [r3, #0]
}
 8000fd8:	46c0      	nop			; (mov r8, r8)
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	b003      	add	sp, #12
 8000fde:	bd90      	pop	{r4, r7, pc}
 8000fe0:	e000e100 	.word	0xe000e100
 8000fe4:	e000ed00 	.word	0xe000ed00

08000fe8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	2380      	movs	r3, #128	; 0x80
 8000ff6:	045b      	lsls	r3, r3, #17
 8000ff8:	429a      	cmp	r2, r3
 8000ffa:	d301      	bcc.n	8001000 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ffc:	2301      	movs	r3, #1
 8000ffe:	e010      	b.n	8001022 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001000:	4b0a      	ldr	r3, [pc, #40]	; (800102c <SysTick_Config+0x44>)
 8001002:	687a      	ldr	r2, [r7, #4]
 8001004:	3a01      	subs	r2, #1
 8001006:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001008:	2301      	movs	r3, #1
 800100a:	425b      	negs	r3, r3
 800100c:	2103      	movs	r1, #3
 800100e:	0018      	movs	r0, r3
 8001010:	f7ff ff7c 	bl	8000f0c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001014:	4b05      	ldr	r3, [pc, #20]	; (800102c <SysTick_Config+0x44>)
 8001016:	2200      	movs	r2, #0
 8001018:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800101a:	4b04      	ldr	r3, [pc, #16]	; (800102c <SysTick_Config+0x44>)
 800101c:	2207      	movs	r2, #7
 800101e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001020:	2300      	movs	r3, #0
}
 8001022:	0018      	movs	r0, r3
 8001024:	46bd      	mov	sp, r7
 8001026:	b002      	add	sp, #8
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	e000e010 	.word	0xe000e010

08001030 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001030:	b580      	push	{r7, lr}
 8001032:	b084      	sub	sp, #16
 8001034:	af00      	add	r7, sp, #0
 8001036:	60b9      	str	r1, [r7, #8]
 8001038:	607a      	str	r2, [r7, #4]
 800103a:	210f      	movs	r1, #15
 800103c:	187b      	adds	r3, r7, r1
 800103e:	1c02      	adds	r2, r0, #0
 8001040:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001042:	68ba      	ldr	r2, [r7, #8]
 8001044:	187b      	adds	r3, r7, r1
 8001046:	781b      	ldrb	r3, [r3, #0]
 8001048:	b25b      	sxtb	r3, r3
 800104a:	0011      	movs	r1, r2
 800104c:	0018      	movs	r0, r3
 800104e:	f7ff ff5d 	bl	8000f0c <__NVIC_SetPriority>
}
 8001052:	46c0      	nop			; (mov r8, r8)
 8001054:	46bd      	mov	sp, r7
 8001056:	b004      	add	sp, #16
 8001058:	bd80      	pop	{r7, pc}

0800105a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800105a:	b580      	push	{r7, lr}
 800105c:	b082      	sub	sp, #8
 800105e:	af00      	add	r7, sp, #0
 8001060:	0002      	movs	r2, r0
 8001062:	1dfb      	adds	r3, r7, #7
 8001064:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001066:	1dfb      	adds	r3, r7, #7
 8001068:	781b      	ldrb	r3, [r3, #0]
 800106a:	b25b      	sxtb	r3, r3
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff ff11 	bl	8000e94 <__NVIC_EnableIRQ>
}
 8001072:	46c0      	nop			; (mov r8, r8)
 8001074:	46bd      	mov	sp, r7
 8001076:	b002      	add	sp, #8
 8001078:	bd80      	pop	{r7, pc}

0800107a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800107a:	b580      	push	{r7, lr}
 800107c:	b082      	sub	sp, #8
 800107e:	af00      	add	r7, sp, #0
 8001080:	0002      	movs	r2, r0
 8001082:	1dfb      	adds	r3, r7, #7
 8001084:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8001086:	1dfb      	adds	r3, r7, #7
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	b25b      	sxtb	r3, r3
 800108c:	0018      	movs	r0, r3
 800108e:	f7ff ff1b 	bl	8000ec8 <__NVIC_DisableIRQ>
}
 8001092:	46c0      	nop			; (mov r8, r8)
 8001094:	46bd      	mov	sp, r7
 8001096:	b002      	add	sp, #8
 8001098:	bd80      	pop	{r7, pc}

0800109a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800109a:	b580      	push	{r7, lr}
 800109c:	b082      	sub	sp, #8
 800109e:	af00      	add	r7, sp, #0
 80010a0:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	0018      	movs	r0, r3
 80010a6:	f7ff ff9f 	bl	8000fe8 <SysTick_Config>
 80010aa:	0003      	movs	r3, r0
}
 80010ac:	0018      	movs	r0, r3
 80010ae:	46bd      	mov	sp, r7
 80010b0:	b002      	add	sp, #8
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	b082      	sub	sp, #8
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d101      	bne.n	80010c6 <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 80010c2:	2301      	movs	r3, #1
 80010c4:	e050      	b.n	8001168 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	2225      	movs	r2, #37	; 0x25
 80010ca:	5c9b      	ldrb	r3, [r3, r2]
 80010cc:	b2db      	uxtb	r3, r3
 80010ce:	2b02      	cmp	r3, #2
 80010d0:	d008      	beq.n	80010e4 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	2204      	movs	r2, #4
 80010d6:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	2224      	movs	r2, #36	; 0x24
 80010dc:	2100      	movs	r1, #0
 80010de:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 80010e0:	2301      	movs	r3, #1
 80010e2:	e041      	b.n	8001168 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	681a      	ldr	r2, [r3, #0]
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	210e      	movs	r1, #14
 80010f0:	438a      	bics	r2, r1
 80010f2:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f8:	681a      	ldr	r2, [r3, #0]
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	491c      	ldr	r1, [pc, #112]	; (8001170 <HAL_DMA_Abort+0xbc>)
 8001100:	400a      	ands	r2, r1
 8001102:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	681a      	ldr	r2, [r3, #0]
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	2101      	movs	r1, #1
 8001110:	438a      	bics	r2, r1
 8001112:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 8001114:	4b17      	ldr	r3, [pc, #92]	; (8001174 <HAL_DMA_Abort+0xc0>)
 8001116:	6859      	ldr	r1, [r3, #4]
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111c:	221c      	movs	r2, #28
 800111e:	4013      	ands	r3, r2
 8001120:	2201      	movs	r2, #1
 8001122:	409a      	lsls	r2, r3
 8001124:	4b13      	ldr	r3, [pc, #76]	; (8001174 <HAL_DMA_Abort+0xc0>)
 8001126:	430a      	orrs	r2, r1
 8001128:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001132:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001138:	2b00      	cmp	r3, #0
 800113a:	d00c      	beq.n	8001156 <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001140:	681a      	ldr	r2, [r3, #0]
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001146:	490a      	ldr	r1, [pc, #40]	; (8001170 <HAL_DMA_Abort+0xbc>)
 8001148:	400a      	ands	r2, r1
 800114a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001150:	687a      	ldr	r2, [r7, #4]
 8001152:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001154:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	2225      	movs	r2, #37	; 0x25
 800115a:	2101      	movs	r1, #1
 800115c:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	2224      	movs	r2, #36	; 0x24
 8001162:	2100      	movs	r1, #0
 8001164:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 8001166:	2300      	movs	r3, #0
}
 8001168:	0018      	movs	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	b002      	add	sp, #8
 800116e:	bd80      	pop	{r7, pc}
 8001170:	fffffeff 	.word	0xfffffeff
 8001174:	40020000 	.word	0x40020000

08001178 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001180:	210f      	movs	r1, #15
 8001182:	187b      	adds	r3, r7, r1
 8001184:	2200      	movs	r2, #0
 8001186:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	2225      	movs	r2, #37	; 0x25
 800118c:	5c9b      	ldrb	r3, [r3, r2]
 800118e:	b2db      	uxtb	r3, r3
 8001190:	2b02      	cmp	r3, #2
 8001192:	d006      	beq.n	80011a2 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	2204      	movs	r2, #4
 8001198:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800119a:	187b      	adds	r3, r7, r1
 800119c:	2201      	movs	r2, #1
 800119e:	701a      	strb	r2, [r3, #0]
 80011a0:	e049      	b.n	8001236 <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	681a      	ldr	r2, [r3, #0]
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	681b      	ldr	r3, [r3, #0]
 80011ac:	210e      	movs	r1, #14
 80011ae:	438a      	bics	r2, r1
 80011b0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	681a      	ldr	r2, [r3, #0]
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	2101      	movs	r1, #1
 80011be:	438a      	bics	r2, r1
 80011c0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c6:	681a      	ldr	r2, [r3, #0]
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011cc:	491d      	ldr	r1, [pc, #116]	; (8001244 <HAL_DMA_Abort_IT+0xcc>)
 80011ce:	400a      	ands	r2, r1
 80011d0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <HAL_DMA_Abort_IT+0xd0>)
 80011d4:	6859      	ldr	r1, [r3, #4]
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011da:	221c      	movs	r2, #28
 80011dc:	4013      	ands	r3, r2
 80011de:	2201      	movs	r2, #1
 80011e0:	409a      	lsls	r2, r3
 80011e2:	4b19      	ldr	r3, [pc, #100]	; (8001248 <HAL_DMA_Abort_IT+0xd0>)
 80011e4:	430a      	orrs	r2, r1
 80011e6:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80011ec:	687a      	ldr	r2, [r7, #4]
 80011ee:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80011f0:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d00c      	beq.n	8001214 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80011fe:	681a      	ldr	r2, [r3, #0]
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001204:	490f      	ldr	r1, [pc, #60]	; (8001244 <HAL_DMA_Abort_IT+0xcc>)
 8001206:	400a      	ands	r2, r1
 8001208:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800120e:	687a      	ldr	r2, [r7, #4]
 8001210:	6d92      	ldr	r2, [r2, #88]	; 0x58
 8001212:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	2225      	movs	r2, #37	; 0x25
 8001218:	2101      	movs	r1, #1
 800121a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2224      	movs	r2, #36	; 0x24
 8001220:	2100      	movs	r1, #0
 8001222:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001228:	2b00      	cmp	r3, #0
 800122a:	d004      	beq.n	8001236 <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	0010      	movs	r0, r2
 8001234:	4798      	blx	r3
    }
  }
  return status;
 8001236:	230f      	movs	r3, #15
 8001238:	18fb      	adds	r3, r7, r3
 800123a:	781b      	ldrb	r3, [r3, #0]
}
 800123c:	0018      	movs	r0, r3
 800123e:	46bd      	mov	sp, r7
 8001240:	b004      	add	sp, #16
 8001242:	bd80      	pop	{r7, pc}
 8001244:	fffffeff 	.word	0xfffffeff
 8001248:	40020000 	.word	0x40020000

0800124c <HAL_FLASH_Program>:
  *               TypeProgram = FLASH_TYPEPROGRAM_FAST (32-bit).
  *
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 800124c:	b5b0      	push	{r4, r5, r7, lr}
 800124e:	b086      	sub	sp, #24
 8001250:	af00      	add	r7, sp, #0
 8001252:	60f8      	str	r0, [r7, #12]
 8001254:	60b9      	str	r1, [r7, #8]
 8001256:	603a      	str	r2, [r7, #0]
 8001258:	607b      	str	r3, [r7, #4]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <HAL_FLASH_Program+0x94>)
 800125c:	781b      	ldrb	r3, [r3, #0]
 800125e:	2b01      	cmp	r3, #1
 8001260:	d101      	bne.n	8001266 <HAL_FLASH_Program+0x1a>
 8001262:	2302      	movs	r3, #2
 8001264:	e038      	b.n	80012d8 <HAL_FLASH_Program+0x8c>
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <HAL_FLASH_Program+0x94>)
 8001268:	2201      	movs	r2, #1
 800126a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <HAL_FLASH_Program+0x94>)
 800126e:	2200      	movs	r2, #0
 8001270:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001272:	2517      	movs	r5, #23
 8001274:	197c      	adds	r4, r7, r5
 8001276:	23fa      	movs	r3, #250	; 0xfa
 8001278:	009b      	lsls	r3, r3, #2
 800127a:	0018      	movs	r0, r3
 800127c:	f000 f87a 	bl	8001374 <FLASH_WaitForLastOperation>
 8001280:	0003      	movs	r3, r0
 8001282:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001284:	197b      	adds	r3, r7, r5
 8001286:	781b      	ldrb	r3, [r3, #0]
 8001288:	2b00      	cmp	r3, #0
 800128a:	d11f      	bne.n	80012cc <HAL_FLASH_Program+0x80>
  {
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	2b01      	cmp	r3, #1
 8001290:	d106      	bne.n	80012a0 <HAL_FLASH_Program+0x54>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));

      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	68b9      	ldr	r1, [r7, #8]
 8001298:	0008      	movs	r0, r1
 800129a:	f000 f8b9 	bl	8001410 <FLASH_Program_DoubleWord>
 800129e:	e005      	b.n	80012ac <HAL_FLASH_Program+0x60>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_FAST_PROGRAM_ADDRESS(Address));

      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 80012a0:	683a      	ldr	r2, [r7, #0]
 80012a2:	68bb      	ldr	r3, [r7, #8]
 80012a4:	0011      	movs	r1, r2
 80012a6:	0018      	movs	r0, r3
 80012a8:	f003 fcfa 	bl	8004ca0 <__FLASH_Program_Fast_veneer>
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80012ac:	2317      	movs	r3, #23
 80012ae:	18fc      	adds	r4, r7, r3
 80012b0:	23fa      	movs	r3, #250	; 0xfa
 80012b2:	009b      	lsls	r3, r3, #2
 80012b4:	0018      	movs	r0, r3
 80012b6:	f000 f85d 	bl	8001374 <FLASH_WaitForLastOperation>
 80012ba:	0003      	movs	r3, r0
 80012bc:	7023      	strb	r3, [r4, #0]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    CLEAR_BIT(FLASH->CR, TypeProgram);
 80012be:	4b09      	ldr	r3, [pc, #36]	; (80012e4 <HAL_FLASH_Program+0x98>)
 80012c0:	695a      	ldr	r2, [r3, #20]
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	43d9      	mvns	r1, r3
 80012c6:	4b07      	ldr	r3, [pc, #28]	; (80012e4 <HAL_FLASH_Program+0x98>)
 80012c8:	400a      	ands	r2, r1
 80012ca:	615a      	str	r2, [r3, #20]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80012cc:	4b04      	ldr	r3, [pc, #16]	; (80012e0 <HAL_FLASH_Program+0x94>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80012d2:	2317      	movs	r3, #23
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	781b      	ldrb	r3, [r3, #0]
}
 80012d8:	0018      	movs	r0, r3
 80012da:	46bd      	mov	sp, r7
 80012dc:	b006      	add	sp, #24
 80012de:	bdb0      	pop	{r4, r5, r7, pc}
 80012e0:	2000072c 	.word	0x2000072c
 80012e4:	40022000 	.word	0x40022000

080012e8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80012e8:	b580      	push	{r7, lr}
 80012ea:	b082      	sub	sp, #8
 80012ec:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80012ee:	1dfb      	adds	r3, r7, #7
 80012f0:	2200      	movs	r2, #0
 80012f2:	701a      	strb	r2, [r3, #0]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 80012f4:	4b0b      	ldr	r3, [pc, #44]	; (8001324 <HAL_FLASH_Unlock+0x3c>)
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	da0c      	bge.n	8001316 <HAL_FLASH_Unlock+0x2e>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80012fc:	4b09      	ldr	r3, [pc, #36]	; (8001324 <HAL_FLASH_Unlock+0x3c>)
 80012fe:	4a0a      	ldr	r2, [pc, #40]	; (8001328 <HAL_FLASH_Unlock+0x40>)
 8001300:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8001302:	4b08      	ldr	r3, [pc, #32]	; (8001324 <HAL_FLASH_Unlock+0x3c>)
 8001304:	4a09      	ldr	r2, [pc, #36]	; (800132c <HAL_FLASH_Unlock+0x44>)
 8001306:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlock */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00U)
 8001308:	4b06      	ldr	r3, [pc, #24]	; (8001324 <HAL_FLASH_Unlock+0x3c>)
 800130a:	695b      	ldr	r3, [r3, #20]
 800130c:	2b00      	cmp	r3, #0
 800130e:	da02      	bge.n	8001316 <HAL_FLASH_Unlock+0x2e>
    {
      status = HAL_ERROR;
 8001310:	1dfb      	adds	r3, r7, #7
 8001312:	2201      	movs	r2, #1
 8001314:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8001316:	1dfb      	adds	r3, r7, #7
 8001318:	781b      	ldrb	r3, [r3, #0]
}
 800131a:	0018      	movs	r0, r3
 800131c:	46bd      	mov	sp, r7
 800131e:	b002      	add	sp, #8
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	40022000 	.word	0x40022000
 8001328:	45670123 	.word	0x45670123
 800132c:	cdef89ab 	.word	0xcdef89ab

08001330 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8001336:	1dfb      	adds	r3, r7, #7
 8001338:	2201      	movs	r2, #1
 800133a:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  (void)FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800133c:	23fa      	movs	r3, #250	; 0xfa
 800133e:	009b      	lsls	r3, r3, #2
 8001340:	0018      	movs	r0, r3
 8001342:	f000 f817 	bl	8001374 <FLASH_WaitForLastOperation>

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8001346:	4b0a      	ldr	r3, [pc, #40]	; (8001370 <HAL_FLASH_Lock+0x40>)
 8001348:	695a      	ldr	r2, [r3, #20]
 800134a:	4b09      	ldr	r3, [pc, #36]	; (8001370 <HAL_FLASH_Lock+0x40>)
 800134c:	2180      	movs	r1, #128	; 0x80
 800134e:	0609      	lsls	r1, r1, #24
 8001350:	430a      	orrs	r2, r1
 8001352:	615a      	str	r2, [r3, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0x00u)
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_FLASH_Lock+0x40>)
 8001356:	695b      	ldr	r3, [r3, #20]
 8001358:	2b00      	cmp	r3, #0
 800135a:	da02      	bge.n	8001362 <HAL_FLASH_Lock+0x32>
  {
    status = HAL_OK;
 800135c:	1dfb      	adds	r3, r7, #7
 800135e:	2200      	movs	r2, #0
 8001360:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8001362:	1dfb      	adds	r3, r7, #7
 8001364:	781b      	ldrb	r3, [r3, #0]
}
 8001366:	0018      	movs	r0, r3
 8001368:	46bd      	mov	sp, r7
 800136a:	b002      	add	sp, #8
 800136c:	bd80      	pop	{r7, pc}
 800136e:	46c0      	nop			; (mov r8, r8)
 8001370:	40022000 	.word	0x40022000

08001374 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b084      	sub	sp, #16
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
  uint32_t error;
  uint32_t tickstart = HAL_GetTick();
 800137c:	f7ff fd5c 	bl	8000e38 <HAL_GetTick>
 8001380:	0003      	movs	r3, r0
 8001382:	60fb      	str	r3, [r7, #12]
     flag will be set */

#if defined(FLASH_DBANK_SUPPORT)
  error = (FLASH_SR_BSY1 | FLASH_SR_BSY2);
#else
  error = FLASH_SR_BSY1;
 8001384:	2380      	movs	r3, #128	; 0x80
 8001386:	025b      	lsls	r3, r3, #9
 8001388:	60bb      	str	r3, [r7, #8]
#endif /* FLASH_DBANK_SUPPORT */

  while ((FLASH->SR & error) != 0x00U)
 800138a:	e00c      	b.n	80013a6 <FLASH_WaitForLastOperation+0x32>
  {
    if(Timeout != HAL_MAX_DELAY)
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	3301      	adds	r3, #1
 8001390:	d009      	beq.n	80013a6 <FLASH_WaitForLastOperation+0x32>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 8001392:	f7ff fd51 	bl	8000e38 <HAL_GetTick>
 8001396:	0002      	movs	r2, r0
 8001398:	68fb      	ldr	r3, [r7, #12]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	687a      	ldr	r2, [r7, #4]
 800139e:	429a      	cmp	r2, r3
 80013a0:	d801      	bhi.n	80013a6 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 80013a2:	2303      	movs	r3, #3
 80013a4:	e028      	b.n	80013f8 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & error) != 0x00U)
 80013a6:	4b16      	ldr	r3, [pc, #88]	; (8001400 <FLASH_WaitForLastOperation+0x8c>)
 80013a8:	691b      	ldr	r3, [r3, #16]
 80013aa:	68ba      	ldr	r2, [r7, #8]
 80013ac:	4013      	ands	r3, r2
 80013ae:	d1ed      	bne.n	800138c <FLASH_WaitForLastOperation+0x18>
      }
    }
  }

  /* check flash errors */
  error = (FLASH->SR & FLASH_SR_ERRORS);
 80013b0:	4b13      	ldr	r3, [pc, #76]	; (8001400 <FLASH_WaitForLastOperation+0x8c>)
 80013b2:	691b      	ldr	r3, [r3, #16]
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <FLASH_WaitForLastOperation+0x90>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	60bb      	str	r3, [r7, #8]

  /* Clear SR register */
  FLASH->SR = FLASH_SR_CLEAR;
 80013ba:	4b11      	ldr	r3, [pc, #68]	; (8001400 <FLASH_WaitForLastOperation+0x8c>)
 80013bc:	4a12      	ldr	r2, [pc, #72]	; (8001408 <FLASH_WaitForLastOperation+0x94>)
 80013be:	611a      	str	r2, [r3, #16]

  if (error != 0x00U)
 80013c0:	68bb      	ldr	r3, [r7, #8]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d011      	beq.n	80013ea <FLASH_WaitForLastOperation+0x76>
  {
    /*Save the error code*/
    pFlash.ErrorCode = error;
 80013c6:	4b11      	ldr	r3, [pc, #68]	; (800140c <FLASH_WaitForLastOperation+0x98>)
 80013c8:	68ba      	ldr	r2, [r7, #8]
 80013ca:	605a      	str	r2, [r3, #4]
    return HAL_ERROR;
 80013cc:	2301      	movs	r3, #1
 80013ce:	e013      	b.n	80013f8 <FLASH_WaitForLastOperation+0x84>
  }

  /* Wait for control register to be written */
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
  {
    if(Timeout != HAL_MAX_DELAY)
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	3301      	adds	r3, #1
 80013d4:	d009      	beq.n	80013ea <FLASH_WaitForLastOperation+0x76>
    {
      if ((HAL_GetTick() - tickstart) >= Timeout)
 80013d6:	f7ff fd2f 	bl	8000e38 <HAL_GetTick>
 80013da:	0002      	movs	r2, r0
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	1ad3      	subs	r3, r2, r3
 80013e0:	687a      	ldr	r2, [r7, #4]
 80013e2:	429a      	cmp	r2, r3
 80013e4:	d801      	bhi.n	80013ea <FLASH_WaitForLastOperation+0x76>
      {
        return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e006      	b.n	80013f8 <FLASH_WaitForLastOperation+0x84>
  while ((FLASH->SR & FLASH_SR_CFGBSY) != 0x00U)
 80013ea:	4b05      	ldr	r3, [pc, #20]	; (8001400 <FLASH_WaitForLastOperation+0x8c>)
 80013ec:	691a      	ldr	r2, [r3, #16]
 80013ee:	2380      	movs	r3, #128	; 0x80
 80013f0:	02db      	lsls	r3, r3, #11
 80013f2:	4013      	ands	r3, r2
 80013f4:	d1ec      	bne.n	80013d0 <FLASH_WaitForLastOperation+0x5c>
      }
    }
  }

  return HAL_OK;
 80013f6:	2300      	movs	r3, #0
}
 80013f8:	0018      	movs	r0, r3
 80013fa:	46bd      	mov	sp, r7
 80013fc:	b004      	add	sp, #16
 80013fe:	bd80      	pop	{r7, pc}
 8001400:	40022000 	.word	0x40022000
 8001404:	0000c3fa 	.word	0x0000c3fa
 8001408:	0000c3fb 	.word	0x0000c3fb
 800140c:	2000072c 	.word	0x2000072c

08001410 <FLASH_Program_DoubleWord>:
  * @param  Address Specifies the address to be programmed.
  * @param  Data Specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8001410:	b5b0      	push	{r4, r5, r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	60f8      	str	r0, [r7, #12]
 8001418:	603a      	str	r2, [r7, #0]
 800141a:	607b      	str	r3, [r7, #4]
  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800141c:	4b0b      	ldr	r3, [pc, #44]	; (800144c <FLASH_Program_DoubleWord+0x3c>)
 800141e:	695a      	ldr	r2, [r3, #20]
 8001420:	4b0a      	ldr	r3, [pc, #40]	; (800144c <FLASH_Program_DoubleWord+0x3c>)
 8001422:	2101      	movs	r1, #1
 8001424:	430a      	orrs	r2, r1
 8001426:	615a      	str	r2, [r3, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8001428:	68fb      	ldr	r3, [r7, #12]
 800142a:	683a      	ldr	r2, [r7, #0]
 800142c:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800142e:	f3bf 8f6f 	isb	sy
}
 8001432:	46c0      	nop			; (mov r8, r8)
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	001c      	movs	r4, r3
 8001438:	2300      	movs	r3, #0
 800143a:	001d      	movs	r5, r3
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	3304      	adds	r3, #4
 8001440:	0022      	movs	r2, r4
 8001442:	601a      	str	r2, [r3, #0]
}
 8001444:	46c0      	nop			; (mov r8, r8)
 8001446:	46bd      	mov	sp, r7
 8001448:	b004      	add	sp, #16
 800144a:	bdb0      	pop	{r4, r5, r7, pc}
 800144c:	40022000 	.word	0x40022000

08001450 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased)
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8001450:	b5b0      	push	{r4, r5, r7, lr}
 8001452:	b084      	sub	sp, #16
 8001454:	af00      	add	r7, sp, #0
 8001456:	6078      	str	r0, [r7, #4]
 8001458:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800145a:	4b35      	ldr	r3, [pc, #212]	; (8001530 <HAL_FLASHEx_Erase+0xe0>)
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	2b01      	cmp	r3, #1
 8001460:	d101      	bne.n	8001466 <HAL_FLASHEx_Erase+0x16>
 8001462:	2302      	movs	r3, #2
 8001464:	e05f      	b.n	8001526 <HAL_FLASHEx_Erase+0xd6>
 8001466:	4b32      	ldr	r3, [pc, #200]	; (8001530 <HAL_FLASHEx_Erase+0xe0>)
 8001468:	2201      	movs	r2, #1
 800146a:	701a      	strb	r2, [r3, #0]

  /* Reset error code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800146c:	4b30      	ldr	r3, [pc, #192]	; (8001530 <HAL_FLASHEx_Erase+0xe0>)
 800146e:	2200      	movs	r2, #0
 8001470:	605a      	str	r2, [r3, #4]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001472:	250f      	movs	r5, #15
 8001474:	197c      	adds	r4, r7, r5
 8001476:	23fa      	movs	r3, #250	; 0xfa
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	0018      	movs	r0, r3
 800147c:	f7ff ff7a 	bl	8001374 <FLASH_WaitForLastOperation>
 8001480:	0003      	movs	r3, r0
 8001482:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8001484:	002c      	movs	r4, r5
 8001486:	193b      	adds	r3, r7, r4
 8001488:	781b      	ldrb	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d145      	bne.n	800151a <HAL_FLASHEx_Erase+0xca>
  {
#if !defined(FLASH_DBANK_SUPPORT)
    /* For single bank product force Banks to Bank 1 */
    pEraseInit->Banks = FLASH_BANK_1;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2204      	movs	r2, #4
 8001492:	605a      	str	r2, [r3, #4]
#endif /* FLASH_DBANK_SUPPORT */

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASS)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	2b04      	cmp	r3, #4
 800149a:	d10d      	bne.n	80014b8 <HAL_FLASHEx_Erase+0x68>
    {
      /* Proceed to Mass Erase */
      FLASH_MassErase(pEraseInit->Banks);
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	0018      	movs	r0, r3
 80014a2:	f000 f849 	bl	8001538 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80014a6:	193c      	adds	r4, r7, r4
 80014a8:	23fa      	movs	r3, #250	; 0xfa
 80014aa:	009b      	lsls	r3, r3, #2
 80014ac:	0018      	movs	r0, r3
 80014ae:	f7ff ff61 	bl	8001374 <FLASH_WaitForLastOperation>
 80014b2:	0003      	movs	r3, r0
 80014b4:	7023      	strb	r3, [r4, #0]
 80014b6:	e030      	b.n	800151a <HAL_FLASHEx_Erase+0xca>
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	2201      	movs	r2, #1
 80014bc:	4252      	negs	r2, r2
 80014be:	601a      	str	r2, [r3, #0]

      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	60bb      	str	r3, [r7, #8]
 80014c6:	e01a      	b.n	80014fe <HAL_FLASHEx_Erase+0xae>
      {
        /* Start erase page */
        FLASH_PageErase(pEraseInit->Banks, index);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	68ba      	ldr	r2, [r7, #8]
 80014ce:	0011      	movs	r1, r2
 80014d0:	0018      	movs	r0, r3
 80014d2:	f000 f845 	bl	8001560 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 80014d6:	250f      	movs	r5, #15
 80014d8:	197c      	adds	r4, r7, r5
 80014da:	23fa      	movs	r3, #250	; 0xfa
 80014dc:	009b      	lsls	r3, r3, #2
 80014de:	0018      	movs	r0, r3
 80014e0:	f7ff ff48 	bl	8001374 <FLASH_WaitForLastOperation>
 80014e4:	0003      	movs	r3, r0
 80014e6:	7023      	strb	r3, [r4, #0]

        if (status != HAL_OK)
 80014e8:	197b      	adds	r3, r7, r5
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d003      	beq.n	80014f8 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty address */
          *PageError = index;
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	68ba      	ldr	r2, [r7, #8]
 80014f4:	601a      	str	r2, [r3, #0]
          break;
 80014f6:	e00a      	b.n	800150e <HAL_FLASHEx_Erase+0xbe>
      for (index = pEraseInit->Page; index < (pEraseInit->Page + pEraseInit->NbPages); index++)
 80014f8:	68bb      	ldr	r3, [r7, #8]
 80014fa:	3301      	adds	r3, #1
 80014fc:	60bb      	str	r3, [r7, #8]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689a      	ldr	r2, [r3, #8]
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	68db      	ldr	r3, [r3, #12]
 8001506:	18d3      	adds	r3, r2, r3
 8001508:	68ba      	ldr	r2, [r7, #8]
 800150a:	429a      	cmp	r2, r3
 800150c:	d3dc      	bcc.n	80014c8 <HAL_FLASHEx_Erase+0x78>
        }
      }

      /* If operation is completed or interrupted, disable the Page Erase Bit */
      CLEAR_BIT(FLASH->CR, FLASH_CR_PER);
 800150e:	4b09      	ldr	r3, [pc, #36]	; (8001534 <HAL_FLASHEx_Erase+0xe4>)
 8001510:	695a      	ldr	r2, [r3, #20]
 8001512:	4b08      	ldr	r3, [pc, #32]	; (8001534 <HAL_FLASHEx_Erase+0xe4>)
 8001514:	2102      	movs	r1, #2
 8001516:	438a      	bics	r2, r1
 8001518:	615a      	str	r2, [r3, #20]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800151a:	4b05      	ldr	r3, [pc, #20]	; (8001530 <HAL_FLASHEx_Erase+0xe0>)
 800151c:	2200      	movs	r2, #0
 800151e:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8001520:	230f      	movs	r3, #15
 8001522:	18fb      	adds	r3, r7, r3
 8001524:	781b      	ldrb	r3, [r3, #0]
}
 8001526:	0018      	movs	r0, r3
 8001528:	46bd      	mov	sp, r7
 800152a:	b004      	add	sp, #16
 800152c:	bdb0      	pop	{r4, r5, r7, pc}
 800152e:	46c0      	nop			; (mov r8, r8)
 8001530:	2000072c 	.word	0x2000072c
 8001534:	40022000 	.word	0x40022000

08001538 <FLASH_MassErase>:
  *            @arg FLASH_BANK_2: Bank2 to be erased*
  * @note (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0
 800153e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));

  /* Set the Mass Erase Bit and start bit */
  FLASH->CR |= (FLASH_CR_STRT | Banks);
 8001540:	4b06      	ldr	r3, [pc, #24]	; (800155c <FLASH_MassErase+0x24>)
 8001542:	695a      	ldr	r2, [r3, #20]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	431a      	orrs	r2, r3
 8001548:	4b04      	ldr	r3, [pc, #16]	; (800155c <FLASH_MassErase+0x24>)
 800154a:	2180      	movs	r1, #128	; 0x80
 800154c:	0249      	lsls	r1, r1, #9
 800154e:	430a      	orrs	r2, r1
 8001550:	615a      	str	r2, [r3, #20]
}
 8001552:	46c0      	nop			; (mov r8, r8)
 8001554:	46bd      	mov	sp, r7
 8001556:	b002      	add	sp, #8
 8001558:	bd80      	pop	{r7, pc}
 800155a:	46c0      	nop			; (mov r8, r8)
 800155c:	40022000 	.word	0x40022000

08001560 <FLASH_PageErase>:
  *         This parameter must be a value between 0 and (max number of pages in Flash - 1)
  * @note (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Banks, uint32_t Page)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_BANK(Banks));
  assert_param(IS_FLASH_PAGE(Page));

  /* Get configuration register, then clear page number */
  tmp = (FLASH->CR & ~FLASH_CR_PNB);
 800156a:	4b08      	ldr	r3, [pc, #32]	; (800158c <FLASH_PageErase+0x2c>)
 800156c:	695b      	ldr	r3, [r3, #20]
 800156e:	4a08      	ldr	r2, [pc, #32]	; (8001590 <FLASH_PageErase+0x30>)
 8001570:	4013      	ands	r3, r2
 8001572:	60fb      	str	r3, [r7, #12]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_DBANK_SUPPORT */

  /* Set page number, Page Erase bit & Start bit */
  FLASH->CR = (tmp | (FLASH_CR_STRT | (Page <<  FLASH_CR_PNB_Pos) | FLASH_CR_PER));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	00da      	lsls	r2, r3, #3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	431a      	orrs	r2, r3
 800157c:	4b03      	ldr	r3, [pc, #12]	; (800158c <FLASH_PageErase+0x2c>)
 800157e:	4905      	ldr	r1, [pc, #20]	; (8001594 <FLASH_PageErase+0x34>)
 8001580:	430a      	orrs	r2, r1
 8001582:	615a      	str	r2, [r3, #20]
}
 8001584:	46c0      	nop			; (mov r8, r8)
 8001586:	46bd      	mov	sp, r7
 8001588:	b004      	add	sp, #16
 800158a:	bd80      	pop	{r7, pc}
 800158c:	40022000 	.word	0x40022000
 8001590:	ffffe007 	.word	0xffffe007
 8001594:	00010002 	.word	0x00010002

08001598 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b086      	sub	sp, #24
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
 80015a0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80015a2:	2300      	movs	r3, #0
 80015a4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80015a6:	e147      	b.n	8001838 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	2101      	movs	r1, #1
 80015ae:	697a      	ldr	r2, [r7, #20]
 80015b0:	4091      	lsls	r1, r2
 80015b2:	000a      	movs	r2, r1
 80015b4:	4013      	ands	r3, r2
 80015b6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d100      	bne.n	80015c0 <HAL_GPIO_Init+0x28>
 80015be:	e138      	b.n	8001832 <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80015c0:	683b      	ldr	r3, [r7, #0]
 80015c2:	685b      	ldr	r3, [r3, #4]
 80015c4:	2203      	movs	r2, #3
 80015c6:	4013      	ands	r3, r2
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d005      	beq.n	80015d8 <HAL_GPIO_Init+0x40>
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	2203      	movs	r2, #3
 80015d2:	4013      	ands	r3, r2
 80015d4:	2b02      	cmp	r3, #2
 80015d6:	d130      	bne.n	800163a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	689b      	ldr	r3, [r3, #8]
 80015dc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80015de:	697b      	ldr	r3, [r7, #20]
 80015e0:	005b      	lsls	r3, r3, #1
 80015e2:	2203      	movs	r2, #3
 80015e4:	409a      	lsls	r2, r3
 80015e6:	0013      	movs	r3, r2
 80015e8:	43da      	mvns	r2, r3
 80015ea:	693b      	ldr	r3, [r7, #16]
 80015ec:	4013      	ands	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	68da      	ldr	r2, [r3, #12]
 80015f4:	697b      	ldr	r3, [r7, #20]
 80015f6:	005b      	lsls	r3, r3, #1
 80015f8:	409a      	lsls	r2, r3
 80015fa:	0013      	movs	r3, r2
 80015fc:	693a      	ldr	r2, [r7, #16]
 80015fe:	4313      	orrs	r3, r2
 8001600:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	693a      	ldr	r2, [r7, #16]
 8001606:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800160e:	2201      	movs	r2, #1
 8001610:	697b      	ldr	r3, [r7, #20]
 8001612:	409a      	lsls	r2, r3
 8001614:	0013      	movs	r3, r2
 8001616:	43da      	mvns	r2, r3
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4013      	ands	r3, r2
 800161c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	685b      	ldr	r3, [r3, #4]
 8001622:	091b      	lsrs	r3, r3, #4
 8001624:	2201      	movs	r2, #1
 8001626:	401a      	ands	r2, r3
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	409a      	lsls	r2, r3
 800162c:	0013      	movs	r3, r2
 800162e:	693a      	ldr	r2, [r7, #16]
 8001630:	4313      	orrs	r3, r2
 8001632:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	693a      	ldr	r2, [r7, #16]
 8001638:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800163a:	683b      	ldr	r3, [r7, #0]
 800163c:	685b      	ldr	r3, [r3, #4]
 800163e:	2203      	movs	r2, #3
 8001640:	4013      	ands	r3, r2
 8001642:	2b03      	cmp	r3, #3
 8001644:	d017      	beq.n	8001676 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	68db      	ldr	r3, [r3, #12]
 800164a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	005b      	lsls	r3, r3, #1
 8001650:	2203      	movs	r2, #3
 8001652:	409a      	lsls	r2, r3
 8001654:	0013      	movs	r3, r2
 8001656:	43da      	mvns	r2, r3
 8001658:	693b      	ldr	r3, [r7, #16]
 800165a:	4013      	ands	r3, r2
 800165c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 800165e:	683b      	ldr	r3, [r7, #0]
 8001660:	689a      	ldr	r2, [r3, #8]
 8001662:	697b      	ldr	r3, [r7, #20]
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	409a      	lsls	r2, r3
 8001668:	0013      	movs	r3, r2
 800166a:	693a      	ldr	r2, [r7, #16]
 800166c:	4313      	orrs	r3, r2
 800166e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	693a      	ldr	r2, [r7, #16]
 8001674:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	2203      	movs	r2, #3
 800167c:	4013      	ands	r3, r2
 800167e:	2b02      	cmp	r3, #2
 8001680:	d123      	bne.n	80016ca <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001682:	697b      	ldr	r3, [r7, #20]
 8001684:	08da      	lsrs	r2, r3, #3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	3208      	adds	r2, #8
 800168a:	0092      	lsls	r2, r2, #2
 800168c:	58d3      	ldr	r3, [r2, r3]
 800168e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001690:	697b      	ldr	r3, [r7, #20]
 8001692:	2207      	movs	r2, #7
 8001694:	4013      	ands	r3, r2
 8001696:	009b      	lsls	r3, r3, #2
 8001698:	220f      	movs	r2, #15
 800169a:	409a      	lsls	r2, r3
 800169c:	0013      	movs	r3, r2
 800169e:	43da      	mvns	r2, r3
 80016a0:	693b      	ldr	r3, [r7, #16]
 80016a2:	4013      	ands	r3, r2
 80016a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80016a6:	683b      	ldr	r3, [r7, #0]
 80016a8:	691a      	ldr	r2, [r3, #16]
 80016aa:	697b      	ldr	r3, [r7, #20]
 80016ac:	2107      	movs	r1, #7
 80016ae:	400b      	ands	r3, r1
 80016b0:	009b      	lsls	r3, r3, #2
 80016b2:	409a      	lsls	r2, r3
 80016b4:	0013      	movs	r3, r2
 80016b6:	693a      	ldr	r2, [r7, #16]
 80016b8:	4313      	orrs	r3, r2
 80016ba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	08da      	lsrs	r2, r3, #3
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	3208      	adds	r2, #8
 80016c4:	0092      	lsls	r2, r2, #2
 80016c6:	6939      	ldr	r1, [r7, #16]
 80016c8:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	005b      	lsls	r3, r3, #1
 80016d4:	2203      	movs	r2, #3
 80016d6:	409a      	lsls	r2, r3
 80016d8:	0013      	movs	r3, r2
 80016da:	43da      	mvns	r2, r3
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	4013      	ands	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80016e2:	683b      	ldr	r3, [r7, #0]
 80016e4:	685b      	ldr	r3, [r3, #4]
 80016e6:	2203      	movs	r2, #3
 80016e8:	401a      	ands	r2, r3
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	409a      	lsls	r2, r3
 80016f0:	0013      	movs	r3, r2
 80016f2:	693a      	ldr	r2, [r7, #16]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	693a      	ldr	r2, [r7, #16]
 80016fc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	23c0      	movs	r3, #192	; 0xc0
 8001704:	029b      	lsls	r3, r3, #10
 8001706:	4013      	ands	r3, r2
 8001708:	d100      	bne.n	800170c <HAL_GPIO_Init+0x174>
 800170a:	e092      	b.n	8001832 <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 800170c:	4a50      	ldr	r2, [pc, #320]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	089b      	lsrs	r3, r3, #2
 8001712:	3318      	adds	r3, #24
 8001714:	009b      	lsls	r3, r3, #2
 8001716:	589b      	ldr	r3, [r3, r2]
 8001718:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	2203      	movs	r2, #3
 800171e:	4013      	ands	r3, r2
 8001720:	00db      	lsls	r3, r3, #3
 8001722:	220f      	movs	r2, #15
 8001724:	409a      	lsls	r2, r3
 8001726:	0013      	movs	r3, r2
 8001728:	43da      	mvns	r2, r3
 800172a:	693b      	ldr	r3, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001730:	687a      	ldr	r2, [r7, #4]
 8001732:	23a0      	movs	r3, #160	; 0xa0
 8001734:	05db      	lsls	r3, r3, #23
 8001736:	429a      	cmp	r2, r3
 8001738:	d013      	beq.n	8001762 <HAL_GPIO_Init+0x1ca>
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	4a45      	ldr	r2, [pc, #276]	; (8001854 <HAL_GPIO_Init+0x2bc>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d00d      	beq.n	800175e <HAL_GPIO_Init+0x1c6>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	4a44      	ldr	r2, [pc, #272]	; (8001858 <HAL_GPIO_Init+0x2c0>)
 8001746:	4293      	cmp	r3, r2
 8001748:	d007      	beq.n	800175a <HAL_GPIO_Init+0x1c2>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	4a43      	ldr	r2, [pc, #268]	; (800185c <HAL_GPIO_Init+0x2c4>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_GPIO_Init+0x1be>
 8001752:	2303      	movs	r3, #3
 8001754:	e006      	b.n	8001764 <HAL_GPIO_Init+0x1cc>
 8001756:	2305      	movs	r3, #5
 8001758:	e004      	b.n	8001764 <HAL_GPIO_Init+0x1cc>
 800175a:	2302      	movs	r3, #2
 800175c:	e002      	b.n	8001764 <HAL_GPIO_Init+0x1cc>
 800175e:	2301      	movs	r3, #1
 8001760:	e000      	b.n	8001764 <HAL_GPIO_Init+0x1cc>
 8001762:	2300      	movs	r3, #0
 8001764:	697a      	ldr	r2, [r7, #20]
 8001766:	2103      	movs	r1, #3
 8001768:	400a      	ands	r2, r1
 800176a:	00d2      	lsls	r2, r2, #3
 800176c:	4093      	lsls	r3, r2
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	4313      	orrs	r3, r2
 8001772:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001774:	4936      	ldr	r1, [pc, #216]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 8001776:	697b      	ldr	r3, [r7, #20]
 8001778:	089b      	lsrs	r3, r3, #2
 800177a:	3318      	adds	r3, #24
 800177c:	009b      	lsls	r3, r3, #2
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001782:	4b33      	ldr	r3, [pc, #204]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	43da      	mvns	r2, r3
 800178c:	693b      	ldr	r3, [r7, #16]
 800178e:	4013      	ands	r3, r2
 8001790:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685a      	ldr	r2, [r3, #4]
 8001796:	2380      	movs	r3, #128	; 0x80
 8001798:	035b      	lsls	r3, r3, #13
 800179a:	4013      	ands	r3, r2
 800179c:	d003      	beq.n	80017a6 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 800179e:	693a      	ldr	r2, [r7, #16]
 80017a0:	68fb      	ldr	r3, [r7, #12]
 80017a2:	4313      	orrs	r3, r2
 80017a4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80017a6:	4b2a      	ldr	r3, [pc, #168]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 80017a8:	693a      	ldr	r2, [r7, #16]
 80017aa:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80017ac:	4b28      	ldr	r3, [pc, #160]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 80017ae:	685b      	ldr	r3, [r3, #4]
 80017b0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	43da      	mvns	r2, r3
 80017b6:	693b      	ldr	r3, [r7, #16]
 80017b8:	4013      	ands	r3, r2
 80017ba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685a      	ldr	r2, [r3, #4]
 80017c0:	2380      	movs	r3, #128	; 0x80
 80017c2:	039b      	lsls	r3, r3, #14
 80017c4:	4013      	ands	r3, r2
 80017c6:	d003      	beq.n	80017d0 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 80017c8:	693a      	ldr	r2, [r7, #16]
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	4313      	orrs	r3, r2
 80017ce:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80017d0:	4b1f      	ldr	r3, [pc, #124]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 80017d2:	693a      	ldr	r2, [r7, #16]
 80017d4:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80017d6:	4a1e      	ldr	r2, [pc, #120]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 80017d8:	2384      	movs	r3, #132	; 0x84
 80017da:	58d3      	ldr	r3, [r2, r3]
 80017dc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	43da      	mvns	r2, r3
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	4013      	ands	r3, r2
 80017e6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80017e8:	683b      	ldr	r3, [r7, #0]
 80017ea:	685a      	ldr	r2, [r3, #4]
 80017ec:	2380      	movs	r3, #128	; 0x80
 80017ee:	029b      	lsls	r3, r3, #10
 80017f0:	4013      	ands	r3, r2
 80017f2:	d003      	beq.n	80017fc <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 80017f4:	693a      	ldr	r2, [r7, #16]
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	4313      	orrs	r3, r2
 80017fa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80017fc:	4914      	ldr	r1, [pc, #80]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 80017fe:	2284      	movs	r2, #132	; 0x84
 8001800:	693b      	ldr	r3, [r7, #16]
 8001802:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001804:	4a12      	ldr	r2, [pc, #72]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 8001806:	2380      	movs	r3, #128	; 0x80
 8001808:	58d3      	ldr	r3, [r2, r3]
 800180a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	43da      	mvns	r2, r3
 8001810:	693b      	ldr	r3, [r7, #16]
 8001812:	4013      	ands	r3, r2
 8001814:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	685a      	ldr	r2, [r3, #4]
 800181a:	2380      	movs	r3, #128	; 0x80
 800181c:	025b      	lsls	r3, r3, #9
 800181e:	4013      	ands	r3, r2
 8001820:	d003      	beq.n	800182a <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 8001822:	693a      	ldr	r2, [r7, #16]
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	4313      	orrs	r3, r2
 8001828:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800182a:	4909      	ldr	r1, [pc, #36]	; (8001850 <HAL_GPIO_Init+0x2b8>)
 800182c:	2280      	movs	r2, #128	; 0x80
 800182e:	693b      	ldr	r3, [r7, #16]
 8001830:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001832:	697b      	ldr	r3, [r7, #20]
 8001834:	3301      	adds	r3, #1
 8001836:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001838:	683b      	ldr	r3, [r7, #0]
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	40da      	lsrs	r2, r3
 8001840:	1e13      	subs	r3, r2, #0
 8001842:	d000      	beq.n	8001846 <HAL_GPIO_Init+0x2ae>
 8001844:	e6b0      	b.n	80015a8 <HAL_GPIO_Init+0x10>
  }
}
 8001846:	46c0      	nop			; (mov r8, r8)
 8001848:	46c0      	nop			; (mov r8, r8)
 800184a:	46bd      	mov	sp, r7
 800184c:	b006      	add	sp, #24
 800184e:	bd80      	pop	{r7, pc}
 8001850:	40021800 	.word	0x40021800
 8001854:	50000400 	.word	0x50000400
 8001858:	50000800 	.word	0x50000800
 800185c:	50000c00 	.word	0x50000c00

08001860 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
 8001868:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800186a:	2300      	movs	r3, #0
 800186c:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00u)
 800186e:	e0b4      	b.n	80019da <HAL_GPIO_DeInit+0x17a>
  {
    /* Get current io position */
    iocurrent = (GPIO_Pin) & (1uL << position);
 8001870:	2201      	movs	r2, #1
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	409a      	lsls	r2, r3
 8001876:	683b      	ldr	r3, [r7, #0]
 8001878:	4013      	ands	r3, r2
 800187a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00u)
 800187c:	693b      	ldr	r3, [r7, #16]
 800187e:	2b00      	cmp	r3, #0
 8001880:	d100      	bne.n	8001884 <HAL_GPIO_DeInit+0x24>
 8001882:	e0a7      	b.n	80019d4 <HAL_GPIO_DeInit+0x174>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */

      tmp = EXTI->EXTICR[position >> 2u];
 8001884:	4a5a      	ldr	r2, [pc, #360]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 8001886:	697b      	ldr	r3, [r7, #20]
 8001888:	089b      	lsrs	r3, r3, #2
 800188a:	3318      	adds	r3, #24
 800188c:	009b      	lsls	r3, r3, #2
 800188e:	589b      	ldr	r3, [r3, r2]
 8001890:	60fb      	str	r3, [r7, #12]
      tmp &= (0x0FuL << (8u * (position & 0x03u)));
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	2203      	movs	r2, #3
 8001896:	4013      	ands	r3, r2
 8001898:	00db      	lsls	r3, r3, #3
 800189a:	220f      	movs	r2, #15
 800189c:	409a      	lsls	r2, r3
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	4013      	ands	r3, r2
 80018a2:	60fb      	str	r3, [r7, #12]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u))))
 80018a4:	687a      	ldr	r2, [r7, #4]
 80018a6:	23a0      	movs	r3, #160	; 0xa0
 80018a8:	05db      	lsls	r3, r3, #23
 80018aa:	429a      	cmp	r2, r3
 80018ac:	d013      	beq.n	80018d6 <HAL_GPIO_DeInit+0x76>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	4a50      	ldr	r2, [pc, #320]	; (80019f4 <HAL_GPIO_DeInit+0x194>)
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d00d      	beq.n	80018d2 <HAL_GPIO_DeInit+0x72>
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	4a4f      	ldr	r2, [pc, #316]	; (80019f8 <HAL_GPIO_DeInit+0x198>)
 80018ba:	4293      	cmp	r3, r2
 80018bc:	d007      	beq.n	80018ce <HAL_GPIO_DeInit+0x6e>
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	4a4e      	ldr	r2, [pc, #312]	; (80019fc <HAL_GPIO_DeInit+0x19c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d101      	bne.n	80018ca <HAL_GPIO_DeInit+0x6a>
 80018c6:	2303      	movs	r3, #3
 80018c8:	e006      	b.n	80018d8 <HAL_GPIO_DeInit+0x78>
 80018ca:	2305      	movs	r3, #5
 80018cc:	e004      	b.n	80018d8 <HAL_GPIO_DeInit+0x78>
 80018ce:	2302      	movs	r3, #2
 80018d0:	e002      	b.n	80018d8 <HAL_GPIO_DeInit+0x78>
 80018d2:	2301      	movs	r3, #1
 80018d4:	e000      	b.n	80018d8 <HAL_GPIO_DeInit+0x78>
 80018d6:	2300      	movs	r3, #0
 80018d8:	697a      	ldr	r2, [r7, #20]
 80018da:	2103      	movs	r1, #3
 80018dc:	400a      	ands	r2, r1
 80018de:	00d2      	lsls	r2, r2, #3
 80018e0:	4093      	lsls	r3, r2
 80018e2:	68fa      	ldr	r2, [r7, #12]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d136      	bne.n	8001956 <HAL_GPIO_DeInit+0xf6>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR1 &= ~(iocurrent);
 80018e8:	4a41      	ldr	r2, [pc, #260]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 80018ea:	2380      	movs	r3, #128	; 0x80
 80018ec:	58d3      	ldr	r3, [r2, r3]
 80018ee:	693a      	ldr	r2, [r7, #16]
 80018f0:	43d2      	mvns	r2, r2
 80018f2:	493f      	ldr	r1, [pc, #252]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 80018f4:	4013      	ands	r3, r2
 80018f6:	2280      	movs	r2, #128	; 0x80
 80018f8:	508b      	str	r3, [r1, r2]
        EXTI->EMR1 &= ~(iocurrent);
 80018fa:	4a3d      	ldr	r2, [pc, #244]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 80018fc:	2384      	movs	r3, #132	; 0x84
 80018fe:	58d3      	ldr	r3, [r2, r3]
 8001900:	693a      	ldr	r2, [r7, #16]
 8001902:	43d2      	mvns	r2, r2
 8001904:	493a      	ldr	r1, [pc, #232]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 8001906:	4013      	ands	r3, r2
 8001908:	2284      	movs	r2, #132	; 0x84
 800190a:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800190c:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	43d9      	mvns	r1, r3
 8001914:	4b36      	ldr	r3, [pc, #216]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 8001916:	400a      	ands	r2, r1
 8001918:	605a      	str	r2, [r3, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800191a:	4b35      	ldr	r3, [pc, #212]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 800191c:	681a      	ldr	r2, [r3, #0]
 800191e:	693b      	ldr	r3, [r7, #16]
 8001920:	43d9      	mvns	r1, r3
 8001922:	4b33      	ldr	r3, [pc, #204]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 8001924:	400a      	ands	r2, r1
 8001926:	601a      	str	r2, [r3, #0]

        tmp = 0x0FuL << (8u * (position & 0x03u));
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	2203      	movs	r2, #3
 800192c:	4013      	ands	r3, r2
 800192e:	00db      	lsls	r3, r3, #3
 8001930:	220f      	movs	r2, #15
 8001932:	409a      	lsls	r2, r3
 8001934:	0013      	movs	r3, r2
 8001936:	60fb      	str	r3, [r7, #12]
        EXTI->EXTICR[position >> 2u] &= ~tmp;
 8001938:	4a2d      	ldr	r2, [pc, #180]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3318      	adds	r3, #24
 8001940:	009b      	lsls	r3, r3, #2
 8001942:	589a      	ldr	r2, [r3, r2]
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	43d9      	mvns	r1, r3
 8001948:	4829      	ldr	r0, [pc, #164]	; (80019f0 <HAL_GPIO_DeInit+0x190>)
 800194a:	697b      	ldr	r3, [r7, #20]
 800194c:	089b      	lsrs	r3, r3, #2
 800194e:	400a      	ands	r2, r1
 8001950:	3318      	adds	r3, #24
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	501a      	str	r2, [r3, r0]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2u));
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	005b      	lsls	r3, r3, #1
 800195e:	2103      	movs	r1, #3
 8001960:	4099      	lsls	r1, r3
 8001962:	000b      	movs	r3, r1
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3u] &= ~(0xFu << ((position & 0x07u) * 4u)) ;
 800196a:	697b      	ldr	r3, [r7, #20]
 800196c:	08da      	lsrs	r2, r3, #3
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	3208      	adds	r2, #8
 8001972:	0092      	lsls	r2, r2, #2
 8001974:	58d3      	ldr	r3, [r2, r3]
 8001976:	697a      	ldr	r2, [r7, #20]
 8001978:	2107      	movs	r1, #7
 800197a:	400a      	ands	r2, r1
 800197c:	0092      	lsls	r2, r2, #2
 800197e:	210f      	movs	r1, #15
 8001980:	4091      	lsls	r1, r2
 8001982:	000a      	movs	r2, r1
 8001984:	43d1      	mvns	r1, r2
 8001986:	697a      	ldr	r2, [r7, #20]
 8001988:	08d2      	lsrs	r2, r2, #3
 800198a:	4019      	ands	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3208      	adds	r2, #8
 8001990:	0092      	lsls	r2, r2, #2
 8001992:	50d1      	str	r1, [r2, r3]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	689b      	ldr	r3, [r3, #8]
 8001998:	697a      	ldr	r2, [r7, #20]
 800199a:	0052      	lsls	r2, r2, #1
 800199c:	2103      	movs	r1, #3
 800199e:	4091      	lsls	r1, r2
 80019a0:	000a      	movs	r2, r1
 80019a2:	43d2      	mvns	r2, r2
 80019a4:	401a      	ands	r2, r3
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	609a      	str	r2, [r3, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	2101      	movs	r1, #1
 80019b0:	697a      	ldr	r2, [r7, #20]
 80019b2:	4091      	lsls	r1, r2
 80019b4:	000a      	movs	r2, r1
 80019b6:	43d2      	mvns	r2, r2
 80019b8:	401a      	ands	r2, r3
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	605a      	str	r2, [r3, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	68db      	ldr	r3, [r3, #12]
 80019c2:	697a      	ldr	r2, [r7, #20]
 80019c4:	0052      	lsls	r2, r2, #1
 80019c6:	2103      	movs	r1, #3
 80019c8:	4091      	lsls	r1, r2
 80019ca:	000a      	movs	r2, r1
 80019cc:	43d2      	mvns	r2, r2
 80019ce:	401a      	ands	r2, r3
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	60da      	str	r2, [r3, #12]
    }

    position++;
 80019d4:	697b      	ldr	r3, [r7, #20]
 80019d6:	3301      	adds	r3, #1
 80019d8:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00u)
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	40da      	lsrs	r2, r3
 80019e0:	1e13      	subs	r3, r2, #0
 80019e2:	d000      	beq.n	80019e6 <HAL_GPIO_DeInit+0x186>
 80019e4:	e744      	b.n	8001870 <HAL_GPIO_DeInit+0x10>
  }
}
 80019e6:	46c0      	nop			; (mov r8, r8)
 80019e8:	46c0      	nop			; (mov r8, r8)
 80019ea:	46bd      	mov	sp, r7
 80019ec:	b006      	add	sp, #24
 80019ee:	bd80      	pop	{r7, pc}
 80019f0:	40021800 	.word	0x40021800
 80019f4:	50000400 	.word	0x50000400
 80019f8:	50000800 	.word	0x50000800
 80019fc:	50000c00 	.word	0x50000c00

08001a00 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
 8001a08:	000a      	movs	r2, r1
 8001a0a:	1cbb      	adds	r3, r7, #2
 8001a0c:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
 8001a12:	1cba      	adds	r2, r7, #2
 8001a14:	8812      	ldrh	r2, [r2, #0]
 8001a16:	4013      	ands	r3, r2
 8001a18:	d004      	beq.n	8001a24 <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 8001a1a:	230f      	movs	r3, #15
 8001a1c:	18fb      	adds	r3, r7, r3
 8001a1e:	2201      	movs	r2, #1
 8001a20:	701a      	strb	r2, [r3, #0]
 8001a22:	e003      	b.n	8001a2c <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001a24:	230f      	movs	r3, #15
 8001a26:	18fb      	adds	r3, r7, r3
 8001a28:	2200      	movs	r2, #0
 8001a2a:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 8001a2c:	230f      	movs	r3, #15
 8001a2e:	18fb      	adds	r3, r7, r3
 8001a30:	781b      	ldrb	r3, [r3, #0]
}
 8001a32:	0018      	movs	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	b004      	add	sp, #16
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	0002      	movs	r2, r0
 8001a44:	1dbb      	adds	r3, r7, #6
 8001a46:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 8001a48:	4b10      	ldr	r3, [pc, #64]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001a4a:	68db      	ldr	r3, [r3, #12]
 8001a4c:	1dba      	adds	r2, r7, #6
 8001a4e:	8812      	ldrh	r2, [r2, #0]
 8001a50:	4013      	ands	r3, r2
 8001a52:	d008      	beq.n	8001a66 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001a56:	1dba      	adds	r2, r7, #6
 8001a58:	8812      	ldrh	r2, [r2, #0]
 8001a5a:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 8001a5c:	1dbb      	adds	r3, r7, #6
 8001a5e:	881b      	ldrh	r3, [r3, #0]
 8001a60:	0018      	movs	r0, r3
 8001a62:	f7fe fed1 	bl	8000808 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 8001a66:	4b09      	ldr	r3, [pc, #36]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001a68:	691b      	ldr	r3, [r3, #16]
 8001a6a:	1dba      	adds	r2, r7, #6
 8001a6c:	8812      	ldrh	r2, [r2, #0]
 8001a6e:	4013      	ands	r3, r2
 8001a70:	d008      	beq.n	8001a84 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 8001a72:	4b06      	ldr	r3, [pc, #24]	; (8001a8c <HAL_GPIO_EXTI_IRQHandler+0x50>)
 8001a74:	1dba      	adds	r2, r7, #6
 8001a76:	8812      	ldrh	r2, [r2, #0]
 8001a78:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 8001a7a:	1dbb      	adds	r3, r7, #6
 8001a7c:	881b      	ldrh	r3, [r3, #0]
 8001a7e:	0018      	movs	r0, r3
 8001a80:	f000 f806 	bl	8001a90 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 8001a84:	46c0      	nop			; (mov r8, r8)
 8001a86:	46bd      	mov	sp, r7
 8001a88:	b002      	add	sp, #8
 8001a8a:	bd80      	pop	{r7, pc}
 8001a8c:	40021800 	.word	0x40021800

08001a90 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b082      	sub	sp, #8
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	0002      	movs	r2, r0
 8001a98:	1dbb      	adds	r3, r7, #6
 8001a9a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8001a9c:	46c0      	nop			; (mov r8, r8)
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	b002      	add	sp, #8
 8001aa2:	bd80      	pop	{r7, pc}

08001aa4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001aac:	4b19      	ldr	r3, [pc, #100]	; (8001b14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	4a19      	ldr	r2, [pc, #100]	; (8001b18 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	0019      	movs	r1, r3
 8001ab6:	4b17      	ldr	r3, [pc, #92]	; (8001b14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ab8:	687a      	ldr	r2, [r7, #4]
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001abe:	687a      	ldr	r2, [r7, #4]
 8001ac0:	2380      	movs	r3, #128	; 0x80
 8001ac2:	009b      	lsls	r3, r3, #2
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d11f      	bne.n	8001b08 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001ac8:	4b14      	ldr	r3, [pc, #80]	; (8001b1c <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001aca:	681a      	ldr	r2, [r3, #0]
 8001acc:	0013      	movs	r3, r2
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	189b      	adds	r3, r3, r2
 8001ad2:	005b      	lsls	r3, r3, #1
 8001ad4:	4912      	ldr	r1, [pc, #72]	; (8001b20 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001ad6:	0018      	movs	r0, r3
 8001ad8:	f7fe fb16 	bl	8000108 <__udivsi3>
 8001adc:	0003      	movs	r3, r0
 8001ade:	3301      	adds	r3, #1
 8001ae0:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ae2:	e008      	b.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d003      	beq.n	8001af2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	3b01      	subs	r3, #1
 8001aee:	60fb      	str	r3, [r7, #12]
 8001af0:	e001      	b.n	8001af6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e009      	b.n	8001b0a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001af6:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001af8:	695a      	ldr	r2, [r3, #20]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	00db      	lsls	r3, r3, #3
 8001afe:	401a      	ands	r2, r3
 8001b00:	2380      	movs	r3, #128	; 0x80
 8001b02:	00db      	lsls	r3, r3, #3
 8001b04:	429a      	cmp	r2, r3
 8001b06:	d0ed      	beq.n	8001ae4 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001b08:	2300      	movs	r3, #0
}
 8001b0a:	0018      	movs	r0, r3
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	b004      	add	sp, #16
 8001b10:	bd80      	pop	{r7, pc}
 8001b12:	46c0      	nop			; (mov r8, r8)
 8001b14:	40007000 	.word	0x40007000
 8001b18:	fffff9ff 	.word	0xfffff9ff
 8001b1c:	20000000 	.word	0x20000000
 8001b20:	000f4240 	.word	0x000f4240

08001b24 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 8001b28:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <LL_RCC_GetAPB1Prescaler+0x14>)
 8001b2a:	689a      	ldr	r2, [r3, #8]
 8001b2c:	23e0      	movs	r3, #224	; 0xe0
 8001b2e:	01db      	lsls	r3, r3, #7
 8001b30:	4013      	ands	r3, r2
}
 8001b32:	0018      	movs	r0, r3
 8001b34:	46bd      	mov	sp, r7
 8001b36:	bd80      	pop	{r7, pc}
 8001b38:	40021000 	.word	0x40021000

08001b3c <HAL_RCC_DeInit>:
  *            - Peripheral clocks
  *            - LSI, LSE and RTC clocks
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_DeInit(void)
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	b082      	sub	sp, #8
 8001b40:	af00      	add	r7, sp, #0
  uint32_t tickstart;

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001b42:	f7ff f979 	bl	8000e38 <HAL_GetTick>
 8001b46:	0003      	movs	r3, r0
 8001b48:	607b      	str	r3, [r7, #4]

  /* Set HSION bit to the reset value */
  SET_BIT(RCC->CR, RCC_CR_HSION);
 8001b4a:	4b35      	ldr	r3, [pc, #212]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001b4c:	681a      	ldr	r2, [r3, #0]
 8001b4e:	4b34      	ldr	r3, [pc, #208]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001b50:	2180      	movs	r1, #128	; 0x80
 8001b52:	0049      	lsls	r1, r1, #1
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b58:	e008      	b.n	8001b6c <HAL_RCC_DeInit+0x30>
  {
    if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b5a:	f7ff f96d 	bl	8000e38 <HAL_GetTick>
 8001b5e:	0002      	movs	r2, r0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	1ad3      	subs	r3, r2, r3
 8001b64:	2b02      	cmp	r3, #2
 8001b66:	d901      	bls.n	8001b6c <HAL_RCC_DeInit+0x30>
    {
      return HAL_TIMEOUT;
 8001b68:	2303      	movs	r3, #3
 8001b6a:	e054      	b.n	8001c16 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b6c:	4b2c      	ldr	r3, [pc, #176]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001b6e:	681a      	ldr	r2, [r3, #0]
 8001b70:	2380      	movs	r3, #128	; 0x80
 8001b72:	00db      	lsls	r3, r3, #3
 8001b74:	4013      	ands	r3, r2
 8001b76:	d0f0      	beq.n	8001b5a <HAL_RCC_DeInit+0x1e>
    }
  }

  /* Set HSITRIM[6:0] bits to the reset value */
  RCC->ICSCR = RCC_ICSCR_HSITRIM_6;
 8001b78:	4b29      	ldr	r3, [pc, #164]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001b7a:	2280      	movs	r2, #128	; 0x80
 8001b7c:	01d2      	lsls	r2, r2, #7
 8001b7e:	605a      	str	r2, [r3, #4]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001b80:	f7ff f95a 	bl	8000e38 <HAL_GetTick>
 8001b84:	0003      	movs	r3, r0
 8001b86:	607b      	str	r3, [r7, #4]

  /* Reset CFGR register (HSI is selected as system clock source) */
  RCC->CFGR = 0x00000000u;
 8001b88:	4b25      	ldr	r3, [pc, #148]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	609a      	str	r2, [r3, #8]

  /* Wait till HSI is ready */
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001b8e:	e009      	b.n	8001ba4 <HAL_RCC_DeInit+0x68>
  {
    if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b90:	f7ff f952 	bl	8000e38 <HAL_GetTick>
 8001b94:	0002      	movs	r2, r0
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	1ad3      	subs	r3, r2, r3
 8001b9a:	4a22      	ldr	r2, [pc, #136]	; (8001c24 <HAL_RCC_DeInit+0xe8>)
 8001b9c:	4293      	cmp	r3, r2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_DeInit+0x68>
    {
      return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e038      	b.n	8001c16 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CFGR, RCC_CFGR_SWS) != 0U)
 8001ba4:	4b1e      	ldr	r3, [pc, #120]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001ba6:	689b      	ldr	r3, [r3, #8]
 8001ba8:	2238      	movs	r2, #56	; 0x38
 8001baa:	4013      	ands	r3, r2
 8001bac:	d1f0      	bne.n	8001b90 <HAL_RCC_DeInit+0x54>
    }
  }

  /* Clear CR register in 2 steps: first to clear HSEON in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8001bae:	4b1c      	ldr	r3, [pc, #112]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001bb0:	2280      	movs	r2, #128	; 0x80
 8001bb2:	0052      	lsls	r2, r2, #1
 8001bb4:	601a      	str	r2, [r3, #0]

  /* Then again to HSEBYP in case bypass was enabled */
  RCC->CR = RCC_CR_HSION;
 8001bb6:	4b1a      	ldr	r3, [pc, #104]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001bb8:	2280      	movs	r2, #128	; 0x80
 8001bba:	0052      	lsls	r2, r2, #1
 8001bbc:	601a      	str	r2, [r3, #0]

  /* Get Start Tick*/
  tickstart = HAL_GetTick();
 8001bbe:	f7ff f93b 	bl	8000e38 <HAL_GetTick>
 8001bc2:	0003      	movs	r3, r0
 8001bc4:	607b      	str	r3, [r7, #4]

  /* Wait till PLL is ready */
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bc6:	e008      	b.n	8001bda <HAL_RCC_DeInit+0x9e>
  {
    if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bc8:	f7ff f936 	bl	8000e38 <HAL_GetTick>
 8001bcc:	0002      	movs	r2, r0
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	1ad3      	subs	r3, r2, r3
 8001bd2:	2b02      	cmp	r3, #2
 8001bd4:	d901      	bls.n	8001bda <HAL_RCC_DeInit+0x9e>
    {
      return HAL_TIMEOUT;
 8001bd6:	2303      	movs	r3, #3
 8001bd8:	e01d      	b.n	8001c16 <HAL_RCC_DeInit+0xda>
  while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001bda:	4b11      	ldr	r3, [pc, #68]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001bdc:	681a      	ldr	r2, [r3, #0]
 8001bde:	2380      	movs	r3, #128	; 0x80
 8001be0:	049b      	lsls	r3, r3, #18
 8001be2:	4013      	ands	r3, r2
 8001be4:	d1f0      	bne.n	8001bc8 <HAL_RCC_DeInit+0x8c>
    }
  }

  /* once PLL is OFF, reset PLLCFGR register to default value */
  RCC->PLLCFGR = RCC_PLLCFGR_PLLN_4;
 8001be6:	4b0e      	ldr	r3, [pc, #56]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001be8:	2280      	movs	r2, #128	; 0x80
 8001bea:	0152      	lsls	r2, r2, #5
 8001bec:	60da      	str	r2, [r3, #12]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000u;
 8001bee:	4b0c      	ldr	r3, [pc, #48]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	619a      	str	r2, [r3, #24]

  /* Clear all flags */
  RCC->CICR = 0xFFFFFFFFu;
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_DeInit+0xe4>)
 8001bf6:	2201      	movs	r2, #1
 8001bf8:	4252      	negs	r2, r2
 8001bfa:	621a      	str	r2, [r3, #32]

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HSI_VALUE;
 8001bfc:	4b0a      	ldr	r3, [pc, #40]	; (8001c28 <HAL_RCC_DeInit+0xec>)
 8001bfe:	4a0b      	ldr	r2, [pc, #44]	; (8001c2c <HAL_RCC_DeInit+0xf0>)
 8001c00:	601a      	str	r2, [r3, #0]

  /* Adapt Systick interrupt period */
  if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001c02:	4b0b      	ldr	r3, [pc, #44]	; (8001c30 <HAL_RCC_DeInit+0xf4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	0018      	movs	r0, r3
 8001c08:	f7ff f8ba 	bl	8000d80 <HAL_InitTick>
 8001c0c:	1e03      	subs	r3, r0, #0
 8001c0e:	d001      	beq.n	8001c14 <HAL_RCC_DeInit+0xd8>
  {
    return HAL_ERROR;
 8001c10:	2301      	movs	r3, #1
 8001c12:	e000      	b.n	8001c16 <HAL_RCC_DeInit+0xda>
  }
  else
  {
    return HAL_OK;
 8001c14:	2300      	movs	r3, #0
  }
}
 8001c16:	0018      	movs	r0, r3
 8001c18:	46bd      	mov	sp, r7
 8001c1a:	b002      	add	sp, #8
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	46c0      	nop			; (mov r8, r8)
 8001c20:	40021000 	.word	0x40021000
 8001c24:	00001388 	.word	0x00001388
 8001c28:	20000000 	.word	0x20000000
 8001c2c:	00f42400 	.word	0x00f42400
 8001c30:	20000004 	.word	0x20000004

08001c34 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	b088      	sub	sp, #32
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e2fe      	b.n	8002244 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	2201      	movs	r2, #1
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	d100      	bne.n	8001c52 <HAL_RCC_OscConfig+0x1e>
 8001c50:	e07c      	b.n	8001d4c <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c52:	4bc3      	ldr	r3, [pc, #780]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001c54:	689b      	ldr	r3, [r3, #8]
 8001c56:	2238      	movs	r2, #56	; 0x38
 8001c58:	4013      	ands	r3, r2
 8001c5a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c5c:	4bc0      	ldr	r3, [pc, #768]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	2203      	movs	r2, #3
 8001c62:	4013      	ands	r3, r2
 8001c64:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001c66:	69bb      	ldr	r3, [r7, #24]
 8001c68:	2b10      	cmp	r3, #16
 8001c6a:	d102      	bne.n	8001c72 <HAL_RCC_OscConfig+0x3e>
 8001c6c:	697b      	ldr	r3, [r7, #20]
 8001c6e:	2b03      	cmp	r3, #3
 8001c70:	d002      	beq.n	8001c78 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001c72:	69bb      	ldr	r3, [r7, #24]
 8001c74:	2b08      	cmp	r3, #8
 8001c76:	d10b      	bne.n	8001c90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001c78:	4bb9      	ldr	r3, [pc, #740]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	2380      	movs	r3, #128	; 0x80
 8001c7e:	029b      	lsls	r3, r3, #10
 8001c80:	4013      	ands	r3, r2
 8001c82:	d062      	beq.n	8001d4a <HAL_RCC_OscConfig+0x116>
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	685b      	ldr	r3, [r3, #4]
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d15e      	bne.n	8001d4a <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	e2d9      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	685a      	ldr	r2, [r3, #4]
 8001c94:	2380      	movs	r3, #128	; 0x80
 8001c96:	025b      	lsls	r3, r3, #9
 8001c98:	429a      	cmp	r2, r3
 8001c9a:	d107      	bne.n	8001cac <HAL_RCC_OscConfig+0x78>
 8001c9c:	4bb0      	ldr	r3, [pc, #704]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	4baf      	ldr	r3, [pc, #700]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ca2:	2180      	movs	r1, #128	; 0x80
 8001ca4:	0249      	lsls	r1, r1, #9
 8001ca6:	430a      	orrs	r2, r1
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	e020      	b.n	8001cee <HAL_RCC_OscConfig+0xba>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	685a      	ldr	r2, [r3, #4]
 8001cb0:	23a0      	movs	r3, #160	; 0xa0
 8001cb2:	02db      	lsls	r3, r3, #11
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d10e      	bne.n	8001cd6 <HAL_RCC_OscConfig+0xa2>
 8001cb8:	4ba9      	ldr	r3, [pc, #676]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	4ba8      	ldr	r3, [pc, #672]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cbe:	2180      	movs	r1, #128	; 0x80
 8001cc0:	02c9      	lsls	r1, r1, #11
 8001cc2:	430a      	orrs	r2, r1
 8001cc4:	601a      	str	r2, [r3, #0]
 8001cc6:	4ba6      	ldr	r3, [pc, #664]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	4ba5      	ldr	r3, [pc, #660]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ccc:	2180      	movs	r1, #128	; 0x80
 8001cce:	0249      	lsls	r1, r1, #9
 8001cd0:	430a      	orrs	r2, r1
 8001cd2:	601a      	str	r2, [r3, #0]
 8001cd4:	e00b      	b.n	8001cee <HAL_RCC_OscConfig+0xba>
 8001cd6:	4ba2      	ldr	r3, [pc, #648]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	4ba1      	ldr	r3, [pc, #644]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001cdc:	49a1      	ldr	r1, [pc, #644]	; (8001f64 <HAL_RCC_OscConfig+0x330>)
 8001cde:	400a      	ands	r2, r1
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	4b9f      	ldr	r3, [pc, #636]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	4b9e      	ldr	r3, [pc, #632]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ce8:	499f      	ldr	r1, [pc, #636]	; (8001f68 <HAL_RCC_OscConfig+0x334>)
 8001cea:	400a      	ands	r2, r1
 8001cec:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d014      	beq.n	8001d20 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cf6:	f7ff f89f 	bl	8000e38 <HAL_GetTick>
 8001cfa:	0003      	movs	r3, r0
 8001cfc:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001cfe:	e008      	b.n	8001d12 <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d00:	f7ff f89a 	bl	8000e38 <HAL_GetTick>
 8001d04:	0002      	movs	r2, r0
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	1ad3      	subs	r3, r2, r3
 8001d0a:	2b64      	cmp	r3, #100	; 0x64
 8001d0c:	d901      	bls.n	8001d12 <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e298      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d12:	4b93      	ldr	r3, [pc, #588]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	2380      	movs	r3, #128	; 0x80
 8001d18:	029b      	lsls	r3, r3, #10
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	d0f0      	beq.n	8001d00 <HAL_RCC_OscConfig+0xcc>
 8001d1e:	e015      	b.n	8001d4c <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d20:	f7ff f88a 	bl	8000e38 <HAL_GetTick>
 8001d24:	0003      	movs	r3, r0
 8001d26:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d28:	e008      	b.n	8001d3c <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d2a:	f7ff f885 	bl	8000e38 <HAL_GetTick>
 8001d2e:	0002      	movs	r2, r0
 8001d30:	693b      	ldr	r3, [r7, #16]
 8001d32:	1ad3      	subs	r3, r2, r3
 8001d34:	2b64      	cmp	r3, #100	; 0x64
 8001d36:	d901      	bls.n	8001d3c <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 8001d38:	2303      	movs	r3, #3
 8001d3a:	e283      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d3c:	4b88      	ldr	r3, [pc, #544]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	2380      	movs	r3, #128	; 0x80
 8001d42:	029b      	lsls	r3, r3, #10
 8001d44:	4013      	ands	r3, r2
 8001d46:	d1f0      	bne.n	8001d2a <HAL_RCC_OscConfig+0xf6>
 8001d48:	e000      	b.n	8001d4c <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d4a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	2202      	movs	r2, #2
 8001d52:	4013      	ands	r3, r2
 8001d54:	d100      	bne.n	8001d58 <HAL_RCC_OscConfig+0x124>
 8001d56:	e099      	b.n	8001e8c <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d58:	4b81      	ldr	r3, [pc, #516]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d5a:	689b      	ldr	r3, [r3, #8]
 8001d5c:	2238      	movs	r2, #56	; 0x38
 8001d5e:	4013      	ands	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d62:	4b7f      	ldr	r3, [pc, #508]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	2203      	movs	r2, #3
 8001d68:	4013      	ands	r3, r2
 8001d6a:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001d6c:	69bb      	ldr	r3, [r7, #24]
 8001d6e:	2b10      	cmp	r3, #16
 8001d70:	d102      	bne.n	8001d78 <HAL_RCC_OscConfig+0x144>
 8001d72:	697b      	ldr	r3, [r7, #20]
 8001d74:	2b02      	cmp	r3, #2
 8001d76:	d002      	beq.n	8001d7e <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001d78:	69bb      	ldr	r3, [r7, #24]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d135      	bne.n	8001dea <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001d7e:	4b78      	ldr	r3, [pc, #480]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	2380      	movs	r3, #128	; 0x80
 8001d84:	00db      	lsls	r3, r3, #3
 8001d86:	4013      	ands	r3, r2
 8001d88:	d005      	beq.n	8001d96 <HAL_RCC_OscConfig+0x162>
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e256      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001d96:	4b72      	ldr	r3, [pc, #456]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	4a74      	ldr	r2, [pc, #464]	; (8001f6c <HAL_RCC_OscConfig+0x338>)
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	0019      	movs	r1, r3
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	695b      	ldr	r3, [r3, #20]
 8001da4:	021a      	lsls	r2, r3, #8
 8001da6:	4b6e      	ldr	r3, [pc, #440]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001da8:	430a      	orrs	r2, r1
 8001daa:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d112      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001db2:	4b6b      	ldr	r3, [pc, #428]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a6e      	ldr	r2, [pc, #440]	; (8001f70 <HAL_RCC_OscConfig+0x33c>)
 8001db8:	4013      	ands	r3, r2
 8001dba:	0019      	movs	r1, r3
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	4b67      	ldr	r3, [pc, #412]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001dc2:	430a      	orrs	r2, r1
 8001dc4:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001dc6:	4b66      	ldr	r3, [pc, #408]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	0adb      	lsrs	r3, r3, #11
 8001dcc:	2207      	movs	r2, #7
 8001dce:	4013      	ands	r3, r2
 8001dd0:	4a68      	ldr	r2, [pc, #416]	; (8001f74 <HAL_RCC_OscConfig+0x340>)
 8001dd2:	40da      	lsrs	r2, r3
 8001dd4:	4b68      	ldr	r3, [pc, #416]	; (8001f78 <HAL_RCC_OscConfig+0x344>)
 8001dd6:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001dd8:	4b68      	ldr	r3, [pc, #416]	; (8001f7c <HAL_RCC_OscConfig+0x348>)
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0018      	movs	r0, r3
 8001dde:	f7fe ffcf 	bl	8000d80 <HAL_InitTick>
 8001de2:	1e03      	subs	r3, r0, #0
 8001de4:	d051      	beq.n	8001e8a <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8001de6:	2301      	movs	r3, #1
 8001de8:	e22c      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	68db      	ldr	r3, [r3, #12]
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d030      	beq.n	8001e54 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001df2:	4b5b      	ldr	r3, [pc, #364]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a5e      	ldr	r2, [pc, #376]	; (8001f70 <HAL_RCC_OscConfig+0x33c>)
 8001df8:	4013      	ands	r3, r2
 8001dfa:	0019      	movs	r1, r3
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	691a      	ldr	r2, [r3, #16]
 8001e00:	4b57      	ldr	r3, [pc, #348]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e02:	430a      	orrs	r2, r1
 8001e04:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001e06:	4b56      	ldr	r3, [pc, #344]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e08:	681a      	ldr	r2, [r3, #0]
 8001e0a:	4b55      	ldr	r3, [pc, #340]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e0c:	2180      	movs	r1, #128	; 0x80
 8001e0e:	0049      	lsls	r1, r1, #1
 8001e10:	430a      	orrs	r2, r1
 8001e12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e14:	f7ff f810 	bl	8000e38 <HAL_GetTick>
 8001e18:	0003      	movs	r3, r0
 8001e1a:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e1c:	e008      	b.n	8001e30 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e1e:	f7ff f80b 	bl	8000e38 <HAL_GetTick>
 8001e22:	0002      	movs	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b02      	cmp	r3, #2
 8001e2a:	d901      	bls.n	8001e30 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 8001e2c:	2303      	movs	r3, #3
 8001e2e:	e209      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e30:	4b4b      	ldr	r3, [pc, #300]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	2380      	movs	r3, #128	; 0x80
 8001e36:	00db      	lsls	r3, r3, #3
 8001e38:	4013      	ands	r3, r2
 8001e3a:	d0f0      	beq.n	8001e1e <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e3c:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e3e:	685b      	ldr	r3, [r3, #4]
 8001e40:	4a4a      	ldr	r2, [pc, #296]	; (8001f6c <HAL_RCC_OscConfig+0x338>)
 8001e42:	4013      	ands	r3, r2
 8001e44:	0019      	movs	r1, r3
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	695b      	ldr	r3, [r3, #20]
 8001e4a:	021a      	lsls	r2, r3, #8
 8001e4c:	4b44      	ldr	r3, [pc, #272]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e4e:	430a      	orrs	r2, r1
 8001e50:	605a      	str	r2, [r3, #4]
 8001e52:	e01b      	b.n	8001e8c <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001e54:	4b42      	ldr	r3, [pc, #264]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b41      	ldr	r3, [pc, #260]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e5a:	4949      	ldr	r1, [pc, #292]	; (8001f80 <HAL_RCC_OscConfig+0x34c>)
 8001e5c:	400a      	ands	r2, r1
 8001e5e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e60:	f7fe ffea 	bl	8000e38 <HAL_GetTick>
 8001e64:	0003      	movs	r3, r0
 8001e66:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e68:	e008      	b.n	8001e7c <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e6a:	f7fe ffe5 	bl	8000e38 <HAL_GetTick>
 8001e6e:	0002      	movs	r2, r0
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	1ad3      	subs	r3, r2, r3
 8001e74:	2b02      	cmp	r3, #2
 8001e76:	d901      	bls.n	8001e7c <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8001e78:	2303      	movs	r3, #3
 8001e7a:	e1e3      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e7c:	4b38      	ldr	r3, [pc, #224]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e7e:	681a      	ldr	r2, [r3, #0]
 8001e80:	2380      	movs	r3, #128	; 0x80
 8001e82:	00db      	lsls	r3, r3, #3
 8001e84:	4013      	ands	r3, r2
 8001e86:	d1f0      	bne.n	8001e6a <HAL_RCC_OscConfig+0x236>
 8001e88:	e000      	b.n	8001e8c <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e8a:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	2208      	movs	r2, #8
 8001e92:	4013      	ands	r3, r2
 8001e94:	d047      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001e96:	4b32      	ldr	r3, [pc, #200]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2238      	movs	r2, #56	; 0x38
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	2b18      	cmp	r3, #24
 8001ea0:	d10a      	bne.n	8001eb8 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001ea2:	4b2f      	ldr	r3, [pc, #188]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ea6:	2202      	movs	r2, #2
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	d03c      	beq.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	699b      	ldr	r3, [r3, #24]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d138      	bne.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8001eb4:	2301      	movs	r3, #1
 8001eb6:	e1c5      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	699b      	ldr	r3, [r3, #24]
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d019      	beq.n	8001ef4 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001ec0:	4b27      	ldr	r3, [pc, #156]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ec2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ec4:	4b26      	ldr	r3, [pc, #152]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ec6:	2101      	movs	r1, #1
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ecc:	f7fe ffb4 	bl	8000e38 <HAL_GetTick>
 8001ed0:	0003      	movs	r3, r0
 8001ed2:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ed4:	e008      	b.n	8001ee8 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ed6:	f7fe ffaf 	bl	8000e38 <HAL_GetTick>
 8001eda:	0002      	movs	r2, r0
 8001edc:	693b      	ldr	r3, [r7, #16]
 8001ede:	1ad3      	subs	r3, r2, r3
 8001ee0:	2b02      	cmp	r3, #2
 8001ee2:	d901      	bls.n	8001ee8 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8001ee4:	2303      	movs	r3, #3
 8001ee6:	e1ad      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ee8:	4b1d      	ldr	r3, [pc, #116]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001eea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eec:	2202      	movs	r2, #2
 8001eee:	4013      	ands	r3, r2
 8001ef0:	d0f1      	beq.n	8001ed6 <HAL_RCC_OscConfig+0x2a2>
 8001ef2:	e018      	b.n	8001f26 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001ef4:	4b1a      	ldr	r3, [pc, #104]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001ef6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ef8:	4b19      	ldr	r3, [pc, #100]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001efa:	2101      	movs	r1, #1
 8001efc:	438a      	bics	r2, r1
 8001efe:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f00:	f7fe ff9a 	bl	8000e38 <HAL_GetTick>
 8001f04:	0003      	movs	r3, r0
 8001f06:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f0a:	f7fe ff95 	bl	8000e38 <HAL_GetTick>
 8001f0e:	0002      	movs	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e193      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001f1c:	4b10      	ldr	r3, [pc, #64]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001f1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f20:	2202      	movs	r2, #2
 8001f22:	4013      	ands	r3, r2
 8001f24:	d1f1      	bne.n	8001f0a <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	4013      	ands	r3, r2
 8001f2e:	d100      	bne.n	8001f32 <HAL_RCC_OscConfig+0x2fe>
 8001f30:	e0c6      	b.n	80020c0 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f32:	231f      	movs	r3, #31
 8001f34:	18fb      	adds	r3, r7, r3
 8001f36:	2200      	movs	r2, #0
 8001f38:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001f3a:	4b09      	ldr	r3, [pc, #36]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001f3c:	689b      	ldr	r3, [r3, #8]
 8001f3e:	2238      	movs	r2, #56	; 0x38
 8001f40:	4013      	ands	r3, r2
 8001f42:	2b20      	cmp	r3, #32
 8001f44:	d11e      	bne.n	8001f84 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001f46:	4b06      	ldr	r3, [pc, #24]	; (8001f60 <HAL_RCC_OscConfig+0x32c>)
 8001f48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4a:	2202      	movs	r2, #2
 8001f4c:	4013      	ands	r3, r2
 8001f4e:	d100      	bne.n	8001f52 <HAL_RCC_OscConfig+0x31e>
 8001f50:	e0b6      	b.n	80020c0 <HAL_RCC_OscConfig+0x48c>
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d000      	beq.n	8001f5c <HAL_RCC_OscConfig+0x328>
 8001f5a:	e0b1      	b.n	80020c0 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 8001f5c:	2301      	movs	r3, #1
 8001f5e:	e171      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
 8001f60:	40021000 	.word	0x40021000
 8001f64:	fffeffff 	.word	0xfffeffff
 8001f68:	fffbffff 	.word	0xfffbffff
 8001f6c:	ffff80ff 	.word	0xffff80ff
 8001f70:	ffffc7ff 	.word	0xffffc7ff
 8001f74:	00f42400 	.word	0x00f42400
 8001f78:	20000000 	.word	0x20000000
 8001f7c:	20000004 	.word	0x20000004
 8001f80:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f84:	4bb1      	ldr	r3, [pc, #708]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8001f86:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f88:	2380      	movs	r3, #128	; 0x80
 8001f8a:	055b      	lsls	r3, r3, #21
 8001f8c:	4013      	ands	r3, r2
 8001f8e:	d101      	bne.n	8001f94 <HAL_RCC_OscConfig+0x360>
 8001f90:	2301      	movs	r3, #1
 8001f92:	e000      	b.n	8001f96 <HAL_RCC_OscConfig+0x362>
 8001f94:	2300      	movs	r3, #0
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d011      	beq.n	8001fbe <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8001f9a:	4bac      	ldr	r3, [pc, #688]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8001f9c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001f9e:	4bab      	ldr	r3, [pc, #684]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8001fa0:	2180      	movs	r1, #128	; 0x80
 8001fa2:	0549      	lsls	r1, r1, #21
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fa8:	4ba8      	ldr	r3, [pc, #672]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8001faa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fac:	2380      	movs	r3, #128	; 0x80
 8001fae:	055b      	lsls	r3, r3, #21
 8001fb0:	4013      	ands	r3, r2
 8001fb2:	60fb      	str	r3, [r7, #12]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8001fb6:	231f      	movs	r3, #31
 8001fb8:	18fb      	adds	r3, r7, r3
 8001fba:	2201      	movs	r2, #1
 8001fbc:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fbe:	4ba4      	ldr	r3, [pc, #656]	; (8002250 <HAL_RCC_OscConfig+0x61c>)
 8001fc0:	681a      	ldr	r2, [r3, #0]
 8001fc2:	2380      	movs	r3, #128	; 0x80
 8001fc4:	005b      	lsls	r3, r3, #1
 8001fc6:	4013      	ands	r3, r2
 8001fc8:	d11a      	bne.n	8002000 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fca:	4ba1      	ldr	r3, [pc, #644]	; (8002250 <HAL_RCC_OscConfig+0x61c>)
 8001fcc:	681a      	ldr	r2, [r3, #0]
 8001fce:	4ba0      	ldr	r3, [pc, #640]	; (8002250 <HAL_RCC_OscConfig+0x61c>)
 8001fd0:	2180      	movs	r1, #128	; 0x80
 8001fd2:	0049      	lsls	r1, r1, #1
 8001fd4:	430a      	orrs	r2, r1
 8001fd6:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8001fd8:	f7fe ff2e 	bl	8000e38 <HAL_GetTick>
 8001fdc:	0003      	movs	r3, r0
 8001fde:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001fe0:	e008      	b.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fe2:	f7fe ff29 	bl	8000e38 <HAL_GetTick>
 8001fe6:	0002      	movs	r2, r0
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	1ad3      	subs	r3, r2, r3
 8001fec:	2b02      	cmp	r3, #2
 8001fee:	d901      	bls.n	8001ff4 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8001ff0:	2303      	movs	r3, #3
 8001ff2:	e127      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ff4:	4b96      	ldr	r3, [pc, #600]	; (8002250 <HAL_RCC_OscConfig+0x61c>)
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	d0f0      	beq.n	8001fe2 <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	689b      	ldr	r3, [r3, #8]
 8002004:	2b01      	cmp	r3, #1
 8002006:	d106      	bne.n	8002016 <HAL_RCC_OscConfig+0x3e2>
 8002008:	4b90      	ldr	r3, [pc, #576]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800200a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800200c:	4b8f      	ldr	r3, [pc, #572]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800200e:	2101      	movs	r1, #1
 8002010:	430a      	orrs	r2, r1
 8002012:	65da      	str	r2, [r3, #92]	; 0x5c
 8002014:	e01c      	b.n	8002050 <HAL_RCC_OscConfig+0x41c>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	689b      	ldr	r3, [r3, #8]
 800201a:	2b05      	cmp	r3, #5
 800201c:	d10c      	bne.n	8002038 <HAL_RCC_OscConfig+0x404>
 800201e:	4b8b      	ldr	r3, [pc, #556]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002020:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002022:	4b8a      	ldr	r3, [pc, #552]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002024:	2104      	movs	r1, #4
 8002026:	430a      	orrs	r2, r1
 8002028:	65da      	str	r2, [r3, #92]	; 0x5c
 800202a:	4b88      	ldr	r3, [pc, #544]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800202c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800202e:	4b87      	ldr	r3, [pc, #540]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002030:	2101      	movs	r1, #1
 8002032:	430a      	orrs	r2, r1
 8002034:	65da      	str	r2, [r3, #92]	; 0x5c
 8002036:	e00b      	b.n	8002050 <HAL_RCC_OscConfig+0x41c>
 8002038:	4b84      	ldr	r3, [pc, #528]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800203a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800203c:	4b83      	ldr	r3, [pc, #524]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800203e:	2101      	movs	r1, #1
 8002040:	438a      	bics	r2, r1
 8002042:	65da      	str	r2, [r3, #92]	; 0x5c
 8002044:	4b81      	ldr	r3, [pc, #516]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002046:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002048:	4b80      	ldr	r3, [pc, #512]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800204a:	2104      	movs	r1, #4
 800204c:	438a      	bics	r2, r1
 800204e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	689b      	ldr	r3, [r3, #8]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d014      	beq.n	8002082 <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002058:	f7fe feee 	bl	8000e38 <HAL_GetTick>
 800205c:	0003      	movs	r3, r0
 800205e:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002060:	e009      	b.n	8002076 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002062:	f7fe fee9 	bl	8000e38 <HAL_GetTick>
 8002066:	0002      	movs	r2, r0
 8002068:	693b      	ldr	r3, [r7, #16]
 800206a:	1ad3      	subs	r3, r2, r3
 800206c:	4a79      	ldr	r2, [pc, #484]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d901      	bls.n	8002076 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8002072:	2303      	movs	r3, #3
 8002074:	e0e6      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002076:	4b75      	ldr	r3, [pc, #468]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2202      	movs	r2, #2
 800207c:	4013      	ands	r3, r2
 800207e:	d0f0      	beq.n	8002062 <HAL_RCC_OscConfig+0x42e>
 8002080:	e013      	b.n	80020aa <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002082:	f7fe fed9 	bl	8000e38 <HAL_GetTick>
 8002086:	0003      	movs	r3, r0
 8002088:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800208a:	e009      	b.n	80020a0 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800208c:	f7fe fed4 	bl	8000e38 <HAL_GetTick>
 8002090:	0002      	movs	r2, r0
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	1ad3      	subs	r3, r2, r3
 8002096:	4a6f      	ldr	r2, [pc, #444]	; (8002254 <HAL_RCC_OscConfig+0x620>)
 8002098:	4293      	cmp	r3, r2
 800209a:	d901      	bls.n	80020a0 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 800209c:	2303      	movs	r3, #3
 800209e:	e0d1      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80020a0:	4b6a      	ldr	r3, [pc, #424]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80020a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020a4:	2202      	movs	r2, #2
 80020a6:	4013      	ands	r3, r2
 80020a8:	d1f0      	bne.n	800208c <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80020aa:	231f      	movs	r3, #31
 80020ac:	18fb      	adds	r3, r7, r3
 80020ae:	781b      	ldrb	r3, [r3, #0]
 80020b0:	2b01      	cmp	r3, #1
 80020b2:	d105      	bne.n	80020c0 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80020b4:	4b65      	ldr	r3, [pc, #404]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80020b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020b8:	4b64      	ldr	r3, [pc, #400]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80020ba:	4967      	ldr	r1, [pc, #412]	; (8002258 <HAL_RCC_OscConfig+0x624>)
 80020bc:	400a      	ands	r2, r1
 80020be:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	69db      	ldr	r3, [r3, #28]
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d100      	bne.n	80020ca <HAL_RCC_OscConfig+0x496>
 80020c8:	e0bb      	b.n	8002242 <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80020ca:	4b60      	ldr	r3, [pc, #384]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	2238      	movs	r2, #56	; 0x38
 80020d0:	4013      	ands	r3, r2
 80020d2:	2b10      	cmp	r3, #16
 80020d4:	d100      	bne.n	80020d8 <HAL_RCC_OscConfig+0x4a4>
 80020d6:	e07b      	b.n	80021d0 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	69db      	ldr	r3, [r3, #28]
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d156      	bne.n	800218e <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020e0:	4b5a      	ldr	r3, [pc, #360]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	4b59      	ldr	r3, [pc, #356]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80020e6:	495d      	ldr	r1, [pc, #372]	; (800225c <HAL_RCC_OscConfig+0x628>)
 80020e8:	400a      	ands	r2, r1
 80020ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ec:	f7fe fea4 	bl	8000e38 <HAL_GetTick>
 80020f0:	0003      	movs	r3, r0
 80020f2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80020f4:	e008      	b.n	8002108 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80020f6:	f7fe fe9f 	bl	8000e38 <HAL_GetTick>
 80020fa:	0002      	movs	r2, r0
 80020fc:	693b      	ldr	r3, [r7, #16]
 80020fe:	1ad3      	subs	r3, r2, r3
 8002100:	2b02      	cmp	r3, #2
 8002102:	d901      	bls.n	8002108 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8002104:	2303      	movs	r3, #3
 8002106:	e09d      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002108:	4b50      	ldr	r3, [pc, #320]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	049b      	lsls	r3, r3, #18
 8002110:	4013      	ands	r3, r2
 8002112:	d1f0      	bne.n	80020f6 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002114:	4b4d      	ldr	r3, [pc, #308]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	4a51      	ldr	r2, [pc, #324]	; (8002260 <HAL_RCC_OscConfig+0x62c>)
 800211a:	4013      	ands	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6a1a      	ldr	r2, [r3, #32]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800212c:	021b      	lsls	r3, r3, #8
 800212e:	431a      	orrs	r2, r3
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	431a      	orrs	r2, r3
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002140:	431a      	orrs	r2, r3
 8002142:	4b42      	ldr	r3, [pc, #264]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002144:	430a      	orrs	r2, r1
 8002146:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002148:	4b40      	ldr	r3, [pc, #256]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800214a:	681a      	ldr	r2, [r3, #0]
 800214c:	4b3f      	ldr	r3, [pc, #252]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800214e:	2180      	movs	r1, #128	; 0x80
 8002150:	0449      	lsls	r1, r1, #17
 8002152:	430a      	orrs	r2, r1
 8002154:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002156:	4b3d      	ldr	r3, [pc, #244]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	4b3c      	ldr	r3, [pc, #240]	; (800224c <HAL_RCC_OscConfig+0x618>)
 800215c:	2180      	movs	r1, #128	; 0x80
 800215e:	0549      	lsls	r1, r1, #21
 8002160:	430a      	orrs	r2, r1
 8002162:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002164:	f7fe fe68 	bl	8000e38 <HAL_GetTick>
 8002168:	0003      	movs	r3, r0
 800216a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800216e:	f7fe fe63 	bl	8000e38 <HAL_GetTick>
 8002172:	0002      	movs	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e061      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002180:	4b32      	ldr	r3, [pc, #200]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002182:	681a      	ldr	r2, [r3, #0]
 8002184:	2380      	movs	r3, #128	; 0x80
 8002186:	049b      	lsls	r3, r3, #18
 8002188:	4013      	ands	r3, r2
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x53a>
 800218c:	e059      	b.n	8002242 <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800218e:	4b2f      	ldr	r3, [pc, #188]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002190:	681a      	ldr	r2, [r3, #0]
 8002192:	4b2e      	ldr	r3, [pc, #184]	; (800224c <HAL_RCC_OscConfig+0x618>)
 8002194:	4931      	ldr	r1, [pc, #196]	; (800225c <HAL_RCC_OscConfig+0x628>)
 8002196:	400a      	ands	r2, r1
 8002198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe fe4d 	bl	8000e38 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a2:	e008      	b.n	80021b6 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021a4:	f7fe fe48 	bl	8000e38 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	2b02      	cmp	r3, #2
 80021b0:	d901      	bls.n	80021b6 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 80021b2:	2303      	movs	r3, #3
 80021b4:	e046      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021b6:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80021b8:	681a      	ldr	r2, [r3, #0]
 80021ba:	2380      	movs	r3, #128	; 0x80
 80021bc:	049b      	lsls	r3, r3, #18
 80021be:	4013      	ands	r3, r2
 80021c0:	d1f0      	bne.n	80021a4 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80021c2:	4b22      	ldr	r3, [pc, #136]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80021c8:	4926      	ldr	r1, [pc, #152]	; (8002264 <HAL_RCC_OscConfig+0x630>)
 80021ca:	400a      	ands	r2, r1
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	e038      	b.n	8002242 <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	69db      	ldr	r3, [r3, #28]
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d101      	bne.n	80021dc <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 80021d8:	2301      	movs	r3, #1
 80021da:	e033      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80021dc:	4b1b      	ldr	r3, [pc, #108]	; (800224c <HAL_RCC_OscConfig+0x618>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021e2:	697b      	ldr	r3, [r7, #20]
 80021e4:	2203      	movs	r2, #3
 80021e6:	401a      	ands	r2, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	6a1b      	ldr	r3, [r3, #32]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d126      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	2270      	movs	r2, #112	; 0x70
 80021f4:	401a      	ands	r2, r3
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	429a      	cmp	r2, r3
 80021fc:	d11f      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80021fe:	697a      	ldr	r2, [r7, #20]
 8002200:	23fe      	movs	r3, #254	; 0xfe
 8002202:	01db      	lsls	r3, r3, #7
 8002204:	401a      	ands	r2, r3
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800220a:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d116      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	23f8      	movs	r3, #248	; 0xf8
 8002214:	039b      	lsls	r3, r3, #14
 8002216:	401a      	ands	r2, r3
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800221c:	429a      	cmp	r2, r3
 800221e:	d10e      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002220:	697a      	ldr	r2, [r7, #20]
 8002222:	23e0      	movs	r3, #224	; 0xe0
 8002224:	051b      	lsls	r3, r3, #20
 8002226:	401a      	ands	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800222c:	429a      	cmp	r2, r3
 800222e:	d106      	bne.n	800223e <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002230:	697b      	ldr	r3, [r7, #20]
 8002232:	0f5b      	lsrs	r3, r3, #29
 8002234:	075a      	lsls	r2, r3, #29
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800223a:	429a      	cmp	r2, r3
 800223c:	d001      	beq.n	8002242 <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 800223e:	2301      	movs	r3, #1
 8002240:	e000      	b.n	8002244 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8002242:	2300      	movs	r3, #0
}
 8002244:	0018      	movs	r0, r3
 8002246:	46bd      	mov	sp, r7
 8002248:	b008      	add	sp, #32
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40021000 	.word	0x40021000
 8002250:	40007000 	.word	0x40007000
 8002254:	00001388 	.word	0x00001388
 8002258:	efffffff 	.word	0xefffffff
 800225c:	feffffff 	.word	0xfeffffff
 8002260:	11c1808c 	.word	0x11c1808c
 8002264:	eefefffc 	.word	0xeefefffc

08002268 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b084      	sub	sp, #16
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
 8002270:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	2b00      	cmp	r3, #0
 8002276:	d101      	bne.n	800227c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e0e9      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800227c:	4b76      	ldr	r3, [pc, #472]	; (8002458 <HAL_RCC_ClockConfig+0x1f0>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2207      	movs	r2, #7
 8002282:	4013      	ands	r3, r2
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	429a      	cmp	r2, r3
 8002288:	d91e      	bls.n	80022c8 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800228a:	4b73      	ldr	r3, [pc, #460]	; (8002458 <HAL_RCC_ClockConfig+0x1f0>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	2207      	movs	r2, #7
 8002290:	4393      	bics	r3, r2
 8002292:	0019      	movs	r1, r3
 8002294:	4b70      	ldr	r3, [pc, #448]	; (8002458 <HAL_RCC_ClockConfig+0x1f0>)
 8002296:	683a      	ldr	r2, [r7, #0]
 8002298:	430a      	orrs	r2, r1
 800229a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800229c:	f7fe fdcc 	bl	8000e38 <HAL_GetTick>
 80022a0:	0003      	movs	r3, r0
 80022a2:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022a4:	e009      	b.n	80022ba <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022a6:	f7fe fdc7 	bl	8000e38 <HAL_GetTick>
 80022aa:	0002      	movs	r2, r0
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	1ad3      	subs	r3, r2, r3
 80022b0:	4a6a      	ldr	r2, [pc, #424]	; (800245c <HAL_RCC_ClockConfig+0x1f4>)
 80022b2:	4293      	cmp	r3, r2
 80022b4:	d901      	bls.n	80022ba <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80022b6:	2303      	movs	r3, #3
 80022b8:	e0ca      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80022ba:	4b67      	ldr	r3, [pc, #412]	; (8002458 <HAL_RCC_ClockConfig+0x1f0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2207      	movs	r2, #7
 80022c0:	4013      	ands	r3, r2
 80022c2:	683a      	ldr	r2, [r7, #0]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d1ee      	bne.n	80022a6 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	2202      	movs	r2, #2
 80022ce:	4013      	ands	r3, r2
 80022d0:	d015      	beq.n	80022fe <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	2204      	movs	r2, #4
 80022d8:	4013      	ands	r3, r2
 80022da:	d006      	beq.n	80022ea <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022dc:	4b60      	ldr	r3, [pc, #384]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 80022de:	689a      	ldr	r2, [r3, #8]
 80022e0:	4b5f      	ldr	r3, [pc, #380]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 80022e2:	21e0      	movs	r1, #224	; 0xe0
 80022e4:	01c9      	lsls	r1, r1, #7
 80022e6:	430a      	orrs	r2, r1
 80022e8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022ea:	4b5d      	ldr	r3, [pc, #372]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4a5d      	ldr	r2, [pc, #372]	; (8002464 <HAL_RCC_ClockConfig+0x1fc>)
 80022f0:	4013      	ands	r3, r2
 80022f2:	0019      	movs	r1, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	689a      	ldr	r2, [r3, #8]
 80022f8:	4b59      	ldr	r3, [pc, #356]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 80022fa:	430a      	orrs	r2, r1
 80022fc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	2201      	movs	r2, #1
 8002304:	4013      	ands	r3, r2
 8002306:	d057      	beq.n	80023b8 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	685b      	ldr	r3, [r3, #4]
 800230c:	2b01      	cmp	r3, #1
 800230e:	d107      	bne.n	8002320 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002310:	4b53      	ldr	r3, [pc, #332]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	2380      	movs	r3, #128	; 0x80
 8002316:	029b      	lsls	r3, r3, #10
 8002318:	4013      	ands	r3, r2
 800231a:	d12b      	bne.n	8002374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800231c:	2301      	movs	r3, #1
 800231e:	e097      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	685b      	ldr	r3, [r3, #4]
 8002324:	2b02      	cmp	r3, #2
 8002326:	d107      	bne.n	8002338 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002328:	4b4d      	ldr	r3, [pc, #308]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 800232a:	681a      	ldr	r2, [r3, #0]
 800232c:	2380      	movs	r3, #128	; 0x80
 800232e:	049b      	lsls	r3, r3, #18
 8002330:	4013      	ands	r3, r2
 8002332:	d11f      	bne.n	8002374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e08b      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d107      	bne.n	8002350 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002340:	4b47      	ldr	r3, [pc, #284]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 8002342:	681a      	ldr	r2, [r3, #0]
 8002344:	2380      	movs	r3, #128	; 0x80
 8002346:	00db      	lsls	r3, r3, #3
 8002348:	4013      	ands	r3, r2
 800234a:	d113      	bne.n	8002374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800234c:	2301      	movs	r3, #1
 800234e:	e07f      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	685b      	ldr	r3, [r3, #4]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d106      	bne.n	8002366 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002358:	4b41      	ldr	r3, [pc, #260]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 800235a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800235c:	2202      	movs	r2, #2
 800235e:	4013      	ands	r3, r2
 8002360:	d108      	bne.n	8002374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e074      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002366:	4b3e      	ldr	r3, [pc, #248]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 8002368:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800236a:	2202      	movs	r2, #2
 800236c:	4013      	ands	r3, r2
 800236e:	d101      	bne.n	8002374 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e06d      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002374:	4b3a      	ldr	r3, [pc, #232]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 8002376:	689b      	ldr	r3, [r3, #8]
 8002378:	2207      	movs	r2, #7
 800237a:	4393      	bics	r3, r2
 800237c:	0019      	movs	r1, r3
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	685a      	ldr	r2, [r3, #4]
 8002382:	4b37      	ldr	r3, [pc, #220]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 8002384:	430a      	orrs	r2, r1
 8002386:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002388:	f7fe fd56 	bl	8000e38 <HAL_GetTick>
 800238c:	0003      	movs	r3, r0
 800238e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002390:	e009      	b.n	80023a6 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002392:	f7fe fd51 	bl	8000e38 <HAL_GetTick>
 8002396:	0002      	movs	r2, r0
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	1ad3      	subs	r3, r2, r3
 800239c:	4a2f      	ldr	r2, [pc, #188]	; (800245c <HAL_RCC_ClockConfig+0x1f4>)
 800239e:	4293      	cmp	r3, r2
 80023a0:	d901      	bls.n	80023a6 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80023a2:	2303      	movs	r3, #3
 80023a4:	e054      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023a6:	4b2e      	ldr	r3, [pc, #184]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	2238      	movs	r2, #56	; 0x38
 80023ac:	401a      	ands	r2, r3
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	685b      	ldr	r3, [r3, #4]
 80023b2:	00db      	lsls	r3, r3, #3
 80023b4:	429a      	cmp	r2, r3
 80023b6:	d1ec      	bne.n	8002392 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023b8:	4b27      	ldr	r3, [pc, #156]	; (8002458 <HAL_RCC_ClockConfig+0x1f0>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	2207      	movs	r2, #7
 80023be:	4013      	ands	r3, r2
 80023c0:	683a      	ldr	r2, [r7, #0]
 80023c2:	429a      	cmp	r2, r3
 80023c4:	d21e      	bcs.n	8002404 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023c6:	4b24      	ldr	r3, [pc, #144]	; (8002458 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	2207      	movs	r2, #7
 80023cc:	4393      	bics	r3, r2
 80023ce:	0019      	movs	r1, r3
 80023d0:	4b21      	ldr	r3, [pc, #132]	; (8002458 <HAL_RCC_ClockConfig+0x1f0>)
 80023d2:	683a      	ldr	r2, [r7, #0]
 80023d4:	430a      	orrs	r2, r1
 80023d6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023d8:	f7fe fd2e 	bl	8000e38 <HAL_GetTick>
 80023dc:	0003      	movs	r3, r0
 80023de:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023e0:	e009      	b.n	80023f6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023e2:	f7fe fd29 	bl	8000e38 <HAL_GetTick>
 80023e6:	0002      	movs	r2, r0
 80023e8:	68fb      	ldr	r3, [r7, #12]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	4a1b      	ldr	r2, [pc, #108]	; (800245c <HAL_RCC_ClockConfig+0x1f4>)
 80023ee:	4293      	cmp	r3, r2
 80023f0:	d901      	bls.n	80023f6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80023f2:	2303      	movs	r3, #3
 80023f4:	e02c      	b.n	8002450 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023f6:	4b18      	ldr	r3, [pc, #96]	; (8002458 <HAL_RCC_ClockConfig+0x1f0>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	2207      	movs	r2, #7
 80023fc:	4013      	ands	r3, r2
 80023fe:	683a      	ldr	r2, [r7, #0]
 8002400:	429a      	cmp	r2, r3
 8002402:	d1ee      	bne.n	80023e2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	2204      	movs	r2, #4
 800240a:	4013      	ands	r3, r2
 800240c:	d009      	beq.n	8002422 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800240e:	4b14      	ldr	r3, [pc, #80]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	4a15      	ldr	r2, [pc, #84]	; (8002468 <HAL_RCC_ClockConfig+0x200>)
 8002414:	4013      	ands	r3, r2
 8002416:	0019      	movs	r1, r3
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	4b10      	ldr	r3, [pc, #64]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 800241e:	430a      	orrs	r2, r1
 8002420:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002422:	f000 f829 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8002426:	0001      	movs	r1, r0
 8002428:	4b0d      	ldr	r3, [pc, #52]	; (8002460 <HAL_RCC_ClockConfig+0x1f8>)
 800242a:	689b      	ldr	r3, [r3, #8]
 800242c:	0a1b      	lsrs	r3, r3, #8
 800242e:	220f      	movs	r2, #15
 8002430:	401a      	ands	r2, r3
 8002432:	4b0e      	ldr	r3, [pc, #56]	; (800246c <HAL_RCC_ClockConfig+0x204>)
 8002434:	0092      	lsls	r2, r2, #2
 8002436:	58d3      	ldr	r3, [r2, r3]
 8002438:	221f      	movs	r2, #31
 800243a:	4013      	ands	r3, r2
 800243c:	000a      	movs	r2, r1
 800243e:	40da      	lsrs	r2, r3
 8002440:	4b0b      	ldr	r3, [pc, #44]	; (8002470 <HAL_RCC_ClockConfig+0x208>)
 8002442:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002444:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <HAL_RCC_ClockConfig+0x20c>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	0018      	movs	r0, r3
 800244a:	f7fe fc99 	bl	8000d80 <HAL_InitTick>
 800244e:	0003      	movs	r3, r0
}
 8002450:	0018      	movs	r0, r3
 8002452:	46bd      	mov	sp, r7
 8002454:	b004      	add	sp, #16
 8002456:	bd80      	pop	{r7, pc}
 8002458:	40022000 	.word	0x40022000
 800245c:	00001388 	.word	0x00001388
 8002460:	40021000 	.word	0x40021000
 8002464:	fffff0ff 	.word	0xfffff0ff
 8002468:	ffff8fff 	.word	0xffff8fff
 800246c:	08004d04 	.word	0x08004d04
 8002470:	20000000 	.word	0x20000000
 8002474:	20000004 	.word	0x20000004

08002478 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b086      	sub	sp, #24
 800247c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800247e:	4b3c      	ldr	r3, [pc, #240]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2238      	movs	r2, #56	; 0x38
 8002484:	4013      	ands	r3, r2
 8002486:	d10f      	bne.n	80024a8 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002488:	4b39      	ldr	r3, [pc, #228]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	0adb      	lsrs	r3, r3, #11
 800248e:	2207      	movs	r2, #7
 8002490:	4013      	ands	r3, r2
 8002492:	2201      	movs	r2, #1
 8002494:	409a      	lsls	r2, r3
 8002496:	0013      	movs	r3, r2
 8002498:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800249a:	6839      	ldr	r1, [r7, #0]
 800249c:	4835      	ldr	r0, [pc, #212]	; (8002574 <HAL_RCC_GetSysClockFreq+0xfc>)
 800249e:	f7fd fe33 	bl	8000108 <__udivsi3>
 80024a2:	0003      	movs	r3, r0
 80024a4:	613b      	str	r3, [r7, #16]
 80024a6:	e05d      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80024a8:	4b31      	ldr	r3, [pc, #196]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	2238      	movs	r2, #56	; 0x38
 80024ae:	4013      	ands	r3, r2
 80024b0:	2b08      	cmp	r3, #8
 80024b2:	d102      	bne.n	80024ba <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80024b4:	4b30      	ldr	r3, [pc, #192]	; (8002578 <HAL_RCC_GetSysClockFreq+0x100>)
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	e054      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80024ba:	4b2d      	ldr	r3, [pc, #180]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024bc:	689b      	ldr	r3, [r3, #8]
 80024be:	2238      	movs	r2, #56	; 0x38
 80024c0:	4013      	ands	r3, r2
 80024c2:	2b10      	cmp	r3, #16
 80024c4:	d138      	bne.n	8002538 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80024c6:	4b2a      	ldr	r3, [pc, #168]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024c8:	68db      	ldr	r3, [r3, #12]
 80024ca:	2203      	movs	r2, #3
 80024cc:	4013      	ands	r3, r2
 80024ce:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80024d0:	4b27      	ldr	r3, [pc, #156]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024d2:	68db      	ldr	r3, [r3, #12]
 80024d4:	091b      	lsrs	r3, r3, #4
 80024d6:	2207      	movs	r2, #7
 80024d8:	4013      	ands	r3, r2
 80024da:	3301      	adds	r3, #1
 80024dc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	2b03      	cmp	r3, #3
 80024e2:	d10d      	bne.n	8002500 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80024e4:	68b9      	ldr	r1, [r7, #8]
 80024e6:	4824      	ldr	r0, [pc, #144]	; (8002578 <HAL_RCC_GetSysClockFreq+0x100>)
 80024e8:	f7fd fe0e 	bl	8000108 <__udivsi3>
 80024ec:	0003      	movs	r3, r0
 80024ee:	0019      	movs	r1, r3
 80024f0:	4b1f      	ldr	r3, [pc, #124]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	0a1b      	lsrs	r3, r3, #8
 80024f6:	227f      	movs	r2, #127	; 0x7f
 80024f8:	4013      	ands	r3, r2
 80024fa:	434b      	muls	r3, r1
 80024fc:	617b      	str	r3, [r7, #20]
        break;
 80024fe:	e00d      	b.n	800251c <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002500:	68b9      	ldr	r1, [r7, #8]
 8002502:	481c      	ldr	r0, [pc, #112]	; (8002574 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002504:	f7fd fe00 	bl	8000108 <__udivsi3>
 8002508:	0003      	movs	r3, r0
 800250a:	0019      	movs	r1, r3
 800250c:	4b18      	ldr	r3, [pc, #96]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	0a1b      	lsrs	r3, r3, #8
 8002512:	227f      	movs	r2, #127	; 0x7f
 8002514:	4013      	ands	r3, r2
 8002516:	434b      	muls	r3, r1
 8002518:	617b      	str	r3, [r7, #20]
        break;
 800251a:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 800251c:	4b14      	ldr	r3, [pc, #80]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800251e:	68db      	ldr	r3, [r3, #12]
 8002520:	0f5b      	lsrs	r3, r3, #29
 8002522:	2207      	movs	r2, #7
 8002524:	4013      	ands	r3, r2
 8002526:	3301      	adds	r3, #1
 8002528:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 800252a:	6879      	ldr	r1, [r7, #4]
 800252c:	6978      	ldr	r0, [r7, #20]
 800252e:	f7fd fdeb 	bl	8000108 <__udivsi3>
 8002532:	0003      	movs	r3, r0
 8002534:	613b      	str	r3, [r7, #16]
 8002536:	e015      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002538:	4b0d      	ldr	r3, [pc, #52]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800253a:	689b      	ldr	r3, [r3, #8]
 800253c:	2238      	movs	r2, #56	; 0x38
 800253e:	4013      	ands	r3, r2
 8002540:	2b20      	cmp	r3, #32
 8002542:	d103      	bne.n	800254c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002544:	2380      	movs	r3, #128	; 0x80
 8002546:	021b      	lsls	r3, r3, #8
 8002548:	613b      	str	r3, [r7, #16]
 800254a:	e00b      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800254c:	4b08      	ldr	r3, [pc, #32]	; (8002570 <HAL_RCC_GetSysClockFreq+0xf8>)
 800254e:	689b      	ldr	r3, [r3, #8]
 8002550:	2238      	movs	r2, #56	; 0x38
 8002552:	4013      	ands	r3, r2
 8002554:	2b18      	cmp	r3, #24
 8002556:	d103      	bne.n	8002560 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002558:	23fa      	movs	r3, #250	; 0xfa
 800255a:	01db      	lsls	r3, r3, #7
 800255c:	613b      	str	r3, [r7, #16]
 800255e:	e001      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002560:	2300      	movs	r3, #0
 8002562:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002564:	693b      	ldr	r3, [r7, #16]
}
 8002566:	0018      	movs	r0, r3
 8002568:	46bd      	mov	sp, r7
 800256a:	b006      	add	sp, #24
 800256c:	bd80      	pop	{r7, pc}
 800256e:	46c0      	nop			; (mov r8, r8)
 8002570:	40021000 	.word	0x40021000
 8002574:	00f42400 	.word	0x00f42400
 8002578:	007a1200 	.word	0x007a1200

0800257c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002580:	4b02      	ldr	r3, [pc, #8]	; (800258c <HAL_RCC_GetHCLKFreq+0x10>)
 8002582:	681b      	ldr	r3, [r3, #0]
}
 8002584:	0018      	movs	r0, r3
 8002586:	46bd      	mov	sp, r7
 8002588:	bd80      	pop	{r7, pc}
 800258a:	46c0      	nop			; (mov r8, r8)
 800258c:	20000000 	.word	0x20000000

08002590 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002590:	b5b0      	push	{r4, r5, r7, lr}
 8002592:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002594:	f7ff fff2 	bl	800257c <HAL_RCC_GetHCLKFreq>
 8002598:	0004      	movs	r4, r0
 800259a:	f7ff fac3 	bl	8001b24 <LL_RCC_GetAPB1Prescaler>
 800259e:	0003      	movs	r3, r0
 80025a0:	0b1a      	lsrs	r2, r3, #12
 80025a2:	4b05      	ldr	r3, [pc, #20]	; (80025b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80025a4:	0092      	lsls	r2, r2, #2
 80025a6:	58d3      	ldr	r3, [r2, r3]
 80025a8:	221f      	movs	r2, #31
 80025aa:	4013      	ands	r3, r2
 80025ac:	40dc      	lsrs	r4, r3
 80025ae:	0023      	movs	r3, r4
}
 80025b0:	0018      	movs	r0, r3
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bdb0      	pop	{r4, r5, r7, pc}
 80025b6:	46c0      	nop			; (mov r8, r8)
 80025b8:	08004d44 	.word	0x08004d44

080025bc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025bc:	b580      	push	{r7, lr}
 80025be:	b086      	sub	sp, #24
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80025c4:	2313      	movs	r3, #19
 80025c6:	18fb      	adds	r3, r7, r3
 80025c8:	2200      	movs	r2, #0
 80025ca:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025cc:	2312      	movs	r3, #18
 80025ce:	18fb      	adds	r3, r7, r3
 80025d0:	2200      	movs	r2, #0
 80025d2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681a      	ldr	r2, [r3, #0]
 80025d8:	2380      	movs	r3, #128	; 0x80
 80025da:	029b      	lsls	r3, r3, #10
 80025dc:	4013      	ands	r3, r2
 80025de:	d100      	bne.n	80025e2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80025e0:	e0a3      	b.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80025e2:	2011      	movs	r0, #17
 80025e4:	183b      	adds	r3, r7, r0
 80025e6:	2200      	movs	r2, #0
 80025e8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025ea:	4bc3      	ldr	r3, [pc, #780]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025ec:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ee:	2380      	movs	r3, #128	; 0x80
 80025f0:	055b      	lsls	r3, r3, #21
 80025f2:	4013      	ands	r3, r2
 80025f4:	d110      	bne.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025f6:	4bc0      	ldr	r3, [pc, #768]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025f8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025fa:	4bbf      	ldr	r3, [pc, #764]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80025fc:	2180      	movs	r1, #128	; 0x80
 80025fe:	0549      	lsls	r1, r1, #21
 8002600:	430a      	orrs	r2, r1
 8002602:	63da      	str	r2, [r3, #60]	; 0x3c
 8002604:	4bbc      	ldr	r3, [pc, #752]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002606:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002608:	2380      	movs	r3, #128	; 0x80
 800260a:	055b      	lsls	r3, r3, #21
 800260c:	4013      	ands	r3, r2
 800260e:	60bb      	str	r3, [r7, #8]
 8002610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002612:	183b      	adds	r3, r7, r0
 8002614:	2201      	movs	r2, #1
 8002616:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002618:	4bb8      	ldr	r3, [pc, #736]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	4bb7      	ldr	r3, [pc, #732]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800261e:	2180      	movs	r1, #128	; 0x80
 8002620:	0049      	lsls	r1, r1, #1
 8002622:	430a      	orrs	r2, r1
 8002624:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002626:	f7fe fc07 	bl	8000e38 <HAL_GetTick>
 800262a:	0003      	movs	r3, r0
 800262c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800262e:	e00b      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002630:	f7fe fc02 	bl	8000e38 <HAL_GetTick>
 8002634:	0002      	movs	r2, r0
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d904      	bls.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800263e:	2313      	movs	r3, #19
 8002640:	18fb      	adds	r3, r7, r3
 8002642:	2203      	movs	r2, #3
 8002644:	701a      	strb	r2, [r3, #0]
        break;
 8002646:	e005      	b.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002648:	4bac      	ldr	r3, [pc, #688]	; (80028fc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800264a:	681a      	ldr	r2, [r3, #0]
 800264c:	2380      	movs	r3, #128	; 0x80
 800264e:	005b      	lsls	r3, r3, #1
 8002650:	4013      	ands	r3, r2
 8002652:	d0ed      	beq.n	8002630 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002654:	2313      	movs	r3, #19
 8002656:	18fb      	adds	r3, r7, r3
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	2b00      	cmp	r3, #0
 800265c:	d154      	bne.n	8002708 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800265e:	4ba6      	ldr	r3, [pc, #664]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002660:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002662:	23c0      	movs	r3, #192	; 0xc0
 8002664:	009b      	lsls	r3, r3, #2
 8002666:	4013      	ands	r3, r2
 8002668:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d019      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	429a      	cmp	r2, r3
 8002678:	d014      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800267a:	4b9f      	ldr	r3, [pc, #636]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800267c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800267e:	4aa0      	ldr	r2, [pc, #640]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8002680:	4013      	ands	r3, r2
 8002682:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002684:	4b9c      	ldr	r3, [pc, #624]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002686:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002688:	4b9b      	ldr	r3, [pc, #620]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800268a:	2180      	movs	r1, #128	; 0x80
 800268c:	0249      	lsls	r1, r1, #9
 800268e:	430a      	orrs	r2, r1
 8002690:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002692:	4b99      	ldr	r3, [pc, #612]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002694:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002696:	4b98      	ldr	r3, [pc, #608]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002698:	499a      	ldr	r1, [pc, #616]	; (8002904 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800269a:	400a      	ands	r2, r1
 800269c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800269e:	4b96      	ldr	r3, [pc, #600]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026a0:	697a      	ldr	r2, [r7, #20]
 80026a2:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	2201      	movs	r2, #1
 80026a8:	4013      	ands	r3, r2
 80026aa:	d016      	beq.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ac:	f7fe fbc4 	bl	8000e38 <HAL_GetTick>
 80026b0:	0003      	movs	r3, r0
 80026b2:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026b4:	e00c      	b.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026b6:	f7fe fbbf 	bl	8000e38 <HAL_GetTick>
 80026ba:	0002      	movs	r2, r0
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	1ad3      	subs	r3, r2, r3
 80026c0:	4a91      	ldr	r2, [pc, #580]	; (8002908 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d904      	bls.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80026c6:	2313      	movs	r3, #19
 80026c8:	18fb      	adds	r3, r7, r3
 80026ca:	2203      	movs	r2, #3
 80026cc:	701a      	strb	r2, [r3, #0]
            break;
 80026ce:	e004      	b.n	80026da <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80026d0:	4b89      	ldr	r3, [pc, #548]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026d4:	2202      	movs	r2, #2
 80026d6:	4013      	ands	r3, r2
 80026d8:	d0ed      	beq.n	80026b6 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80026da:	2313      	movs	r3, #19
 80026dc:	18fb      	adds	r3, r7, r3
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	2b00      	cmp	r3, #0
 80026e2:	d10a      	bne.n	80026fa <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026e4:	4b84      	ldr	r3, [pc, #528]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80026e8:	4a85      	ldr	r2, [pc, #532]	; (8002900 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80026ea:	4013      	ands	r3, r2
 80026ec:	0019      	movs	r1, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80026f2:	4b81      	ldr	r3, [pc, #516]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80026f4:	430a      	orrs	r2, r1
 80026f6:	65da      	str	r2, [r3, #92]	; 0x5c
 80026f8:	e00c      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026fa:	2312      	movs	r3, #18
 80026fc:	18fb      	adds	r3, r7, r3
 80026fe:	2213      	movs	r2, #19
 8002700:	18ba      	adds	r2, r7, r2
 8002702:	7812      	ldrb	r2, [r2, #0]
 8002704:	701a      	strb	r2, [r3, #0]
 8002706:	e005      	b.n	8002714 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002708:	2312      	movs	r3, #18
 800270a:	18fb      	adds	r3, r7, r3
 800270c:	2213      	movs	r2, #19
 800270e:	18ba      	adds	r2, r7, r2
 8002710:	7812      	ldrb	r2, [r2, #0]
 8002712:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002714:	2311      	movs	r3, #17
 8002716:	18fb      	adds	r3, r7, r3
 8002718:	781b      	ldrb	r3, [r3, #0]
 800271a:	2b01      	cmp	r3, #1
 800271c:	d105      	bne.n	800272a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800271e:	4b76      	ldr	r3, [pc, #472]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002720:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002722:	4b75      	ldr	r3, [pc, #468]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002724:	4979      	ldr	r1, [pc, #484]	; (800290c <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8002726:	400a      	ands	r2, r1
 8002728:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2201      	movs	r2, #1
 8002730:	4013      	ands	r3, r2
 8002732:	d009      	beq.n	8002748 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002734:	4b70      	ldr	r3, [pc, #448]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002736:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002738:	2203      	movs	r2, #3
 800273a:	4393      	bics	r3, r2
 800273c:	0019      	movs	r1, r3
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	4b6d      	ldr	r3, [pc, #436]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002744:	430a      	orrs	r2, r1
 8002746:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	2202      	movs	r2, #2
 800274e:	4013      	ands	r3, r2
 8002750:	d009      	beq.n	8002766 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002752:	4b69      	ldr	r3, [pc, #420]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002754:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002756:	220c      	movs	r2, #12
 8002758:	4393      	bics	r3, r2
 800275a:	0019      	movs	r1, r3
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	689a      	ldr	r2, [r3, #8]
 8002760:	4b65      	ldr	r3, [pc, #404]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002762:	430a      	orrs	r2, r1
 8002764:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	2210      	movs	r2, #16
 800276c:	4013      	ands	r3, r2
 800276e:	d009      	beq.n	8002784 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002770:	4b61      	ldr	r3, [pc, #388]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002772:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002774:	4a66      	ldr	r2, [pc, #408]	; (8002910 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8002776:	4013      	ands	r3, r2
 8002778:	0019      	movs	r1, r3
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	68da      	ldr	r2, [r3, #12]
 800277e:	4b5e      	ldr	r3, [pc, #376]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002780:	430a      	orrs	r2, r1
 8002782:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681a      	ldr	r2, [r3, #0]
 8002788:	2380      	movs	r3, #128	; 0x80
 800278a:	009b      	lsls	r3, r3, #2
 800278c:	4013      	ands	r3, r2
 800278e:	d009      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002790:	4b59      	ldr	r3, [pc, #356]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002792:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002794:	4a5f      	ldr	r2, [pc, #380]	; (8002914 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8002796:	4013      	ands	r3, r2
 8002798:	0019      	movs	r1, r3
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	699a      	ldr	r2, [r3, #24]
 800279e:	4b56      	ldr	r3, [pc, #344]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027a0:	430a      	orrs	r2, r1
 80027a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	2380      	movs	r3, #128	; 0x80
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	4013      	ands	r3, r2
 80027ae:	d009      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80027b0:	4b51      	ldr	r3, [pc, #324]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027b4:	4a58      	ldr	r2, [pc, #352]	; (8002918 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 80027b6:	4013      	ands	r3, r2
 80027b8:	0019      	movs	r1, r3
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	69da      	ldr	r2, [r3, #28]
 80027be:	4b4e      	ldr	r3, [pc, #312]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027c0:	430a      	orrs	r2, r1
 80027c2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	2220      	movs	r2, #32
 80027ca:	4013      	ands	r3, r2
 80027cc:	d009      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80027ce:	4b4a      	ldr	r3, [pc, #296]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027d2:	4a52      	ldr	r2, [pc, #328]	; (800291c <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80027d4:	4013      	ands	r3, r2
 80027d6:	0019      	movs	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	691a      	ldr	r2, [r3, #16]
 80027dc:	4b46      	ldr	r3, [pc, #280]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027de:	430a      	orrs	r2, r1
 80027e0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681a      	ldr	r2, [r3, #0]
 80027e6:	2380      	movs	r3, #128	; 0x80
 80027e8:	01db      	lsls	r3, r3, #7
 80027ea:	4013      	ands	r3, r2
 80027ec:	d015      	beq.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027ee:	4b42      	ldr	r3, [pc, #264]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80027f2:	009b      	lsls	r3, r3, #2
 80027f4:	0899      	lsrs	r1, r3, #2
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1a      	ldr	r2, [r3, #32]
 80027fa:	4b3f      	ldr	r3, [pc, #252]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80027fc:	430a      	orrs	r2, r1
 80027fe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6a1a      	ldr	r2, [r3, #32]
 8002804:	2380      	movs	r3, #128	; 0x80
 8002806:	05db      	lsls	r3, r3, #23
 8002808:	429a      	cmp	r2, r3
 800280a:	d106      	bne.n	800281a <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800280c:	4b3a      	ldr	r3, [pc, #232]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800280e:	68da      	ldr	r2, [r3, #12]
 8002810:	4b39      	ldr	r3, [pc, #228]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002812:	2180      	movs	r1, #128	; 0x80
 8002814:	0249      	lsls	r1, r1, #9
 8002816:	430a      	orrs	r2, r1
 8002818:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	2380      	movs	r3, #128	; 0x80
 8002820:	031b      	lsls	r3, r3, #12
 8002822:	4013      	ands	r3, r2
 8002824:	d009      	beq.n	800283a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002826:	4b34      	ldr	r3, [pc, #208]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002828:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800282a:	2240      	movs	r2, #64	; 0x40
 800282c:	4393      	bics	r3, r2
 800282e:	0019      	movs	r1, r3
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002834:	4b30      	ldr	r3, [pc, #192]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002836:	430a      	orrs	r2, r1
 8002838:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	2380      	movs	r3, #128	; 0x80
 8002840:	039b      	lsls	r3, r3, #14
 8002842:	4013      	ands	r3, r2
 8002844:	d016      	beq.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002846:	4b2c      	ldr	r3, [pc, #176]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002848:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800284a:	4a35      	ldr	r2, [pc, #212]	; (8002920 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800284c:	4013      	ands	r3, r2
 800284e:	0019      	movs	r1, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002854:	4b28      	ldr	r3, [pc, #160]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002856:	430a      	orrs	r2, r1
 8002858:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	03db      	lsls	r3, r3, #15
 8002862:	429a      	cmp	r2, r3
 8002864:	d106      	bne.n	8002874 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002866:	4b24      	ldr	r3, [pc, #144]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002868:	68da      	ldr	r2, [r3, #12]
 800286a:	4b23      	ldr	r3, [pc, #140]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	0449      	lsls	r1, r1, #17
 8002870:	430a      	orrs	r2, r1
 8002872:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	2380      	movs	r3, #128	; 0x80
 800287a:	03db      	lsls	r3, r3, #15
 800287c:	4013      	ands	r3, r2
 800287e:	d016      	beq.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002880:	4b1d      	ldr	r3, [pc, #116]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002882:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002884:	4a27      	ldr	r2, [pc, #156]	; (8002924 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8002886:	4013      	ands	r3, r2
 8002888:	0019      	movs	r1, r3
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800288e:	4b1a      	ldr	r3, [pc, #104]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8002890:	430a      	orrs	r2, r1
 8002892:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002898:	2380      	movs	r3, #128	; 0x80
 800289a:	045b      	lsls	r3, r3, #17
 800289c:	429a      	cmp	r2, r3
 800289e:	d106      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80028a0:	4b15      	ldr	r3, [pc, #84]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a2:	68da      	ldr	r2, [r3, #12]
 80028a4:	4b14      	ldr	r3, [pc, #80]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028a6:	2180      	movs	r1, #128	; 0x80
 80028a8:	0449      	lsls	r1, r1, #17
 80028aa:	430a      	orrs	r2, r1
 80028ac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681a      	ldr	r2, [r3, #0]
 80028b2:	2380      	movs	r3, #128	; 0x80
 80028b4:	011b      	lsls	r3, r3, #4
 80028b6:	4013      	ands	r3, r2
 80028b8:	d016      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80028ba:	4b0f      	ldr	r3, [pc, #60]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028be:	4a1a      	ldr	r2, [pc, #104]	; (8002928 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80028c0:	4013      	ands	r3, r2
 80028c2:	0019      	movs	r1, r3
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	695a      	ldr	r2, [r3, #20]
 80028c8:	4b0b      	ldr	r3, [pc, #44]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028ca:	430a      	orrs	r2, r1
 80028cc:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	695a      	ldr	r2, [r3, #20]
 80028d2:	2380      	movs	r3, #128	; 0x80
 80028d4:	01db      	lsls	r3, r3, #7
 80028d6:	429a      	cmp	r2, r3
 80028d8:	d106      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80028da:	4b07      	ldr	r3, [pc, #28]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028dc:	68da      	ldr	r2, [r3, #12]
 80028de:	4b06      	ldr	r3, [pc, #24]	; (80028f8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80028e0:	2180      	movs	r1, #128	; 0x80
 80028e2:	0249      	lsls	r1, r1, #9
 80028e4:	430a      	orrs	r2, r1
 80028e6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80028e8:	2312      	movs	r3, #18
 80028ea:	18fb      	adds	r3, r7, r3
 80028ec:	781b      	ldrb	r3, [r3, #0]
}
 80028ee:	0018      	movs	r0, r3
 80028f0:	46bd      	mov	sp, r7
 80028f2:	b006      	add	sp, #24
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	40021000 	.word	0x40021000
 80028fc:	40007000 	.word	0x40007000
 8002900:	fffffcff 	.word	0xfffffcff
 8002904:	fffeffff 	.word	0xfffeffff
 8002908:	00001388 	.word	0x00001388
 800290c:	efffffff 	.word	0xefffffff
 8002910:	fffff3ff 	.word	0xfffff3ff
 8002914:	fff3ffff 	.word	0xfff3ffff
 8002918:	ffcfffff 	.word	0xffcfffff
 800291c:	ffffcfff 	.word	0xffffcfff
 8002920:	ffbfffff 	.word	0xffbfffff
 8002924:	feffffff 	.word	0xfeffffff
 8002928:	ffff3fff 	.word	0xffff3fff

0800292c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2b00      	cmp	r3, #0
 8002938:	d101      	bne.n	800293e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800293a:	2301      	movs	r3, #1
 800293c:	e046      	b.n	80029cc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	2288      	movs	r2, #136	; 0x88
 8002942:	589b      	ldr	r3, [r3, r2]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d107      	bne.n	8002958 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2284      	movs	r2, #132	; 0x84
 800294c:	2100      	movs	r1, #0
 800294e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	0018      	movs	r0, r3
 8002954:	f7fe f8d6 	bl	8000b04 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2288      	movs	r2, #136	; 0x88
 800295c:	2124      	movs	r1, #36	; 0x24
 800295e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	681a      	ldr	r2, [r3, #0]
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2101      	movs	r1, #1
 800296c:	438a      	bics	r2, r1
 800296e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002974:	2b00      	cmp	r3, #0
 8002976:	d003      	beq.n	8002980 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	0018      	movs	r0, r3
 800297c:	f000 ff0c 	bl	8003798 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	0018      	movs	r0, r3
 8002984:	f000 fc4a 	bl	800321c <UART_SetConfig>
 8002988:	0003      	movs	r3, r0
 800298a:	2b01      	cmp	r3, #1
 800298c:	d101      	bne.n	8002992 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800298e:	2301      	movs	r3, #1
 8002990:	e01c      	b.n	80029cc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	490d      	ldr	r1, [pc, #52]	; (80029d4 <HAL_UART_Init+0xa8>)
 800299e:	400a      	ands	r2, r1
 80029a0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	689a      	ldr	r2, [r3, #8]
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	212a      	movs	r1, #42	; 0x2a
 80029ae:	438a      	bics	r2, r1
 80029b0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	681a      	ldr	r2, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	2101      	movs	r1, #1
 80029be:	430a      	orrs	r2, r1
 80029c0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	0018      	movs	r0, r3
 80029c6:	f000 ff9b 	bl	8003900 <UART_CheckIdleState>
 80029ca:	0003      	movs	r3, r0
}
 80029cc:	0018      	movs	r0, r3
 80029ce:	46bd      	mov	sp, r7
 80029d0:	b002      	add	sp, #8
 80029d2:	bd80      	pop	{r7, pc}
 80029d4:	ffffb7ff 	.word	0xffffb7ff

080029d8 <HAL_UART_DeInit>:
  * @brief DeInitialize the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b082      	sub	sp, #8
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e032      	b.n	8002a50 <HAL_UART_DeInit+0x78>
  }

  /* Check the parameters */
  assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));

  huart->gState = HAL_UART_STATE_BUSY;
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	2288      	movs	r2, #136	; 0x88
 80029ee:	2124      	movs	r1, #36	; 0x24
 80029f0:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681a      	ldr	r2, [r3, #0]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2101      	movs	r1, #1
 80029fe:	438a      	bics	r2, r1
 8002a00:	601a      	str	r2, [r3, #0]

  huart->Instance->CR1 = 0x0U;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	2200      	movs	r2, #0
 8002a08:	601a      	str	r2, [r3, #0]
  huart->Instance->CR2 = 0x0U;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	2200      	movs	r2, #0
 8002a10:	605a      	str	r2, [r3, #4]
  huart->Instance->CR3 = 0x0U;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2200      	movs	r2, #0
 8002a18:	609a      	str	r2, [r3, #8]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	0018      	movs	r0, r3
 8002a1e:	f7fe f8d9 	bl	8000bd4 <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2290      	movs	r2, #144	; 0x90
 8002a26:	2100      	movs	r1, #0
 8002a28:	5099      	str	r1, [r3, r2]
  huart->gState = HAL_UART_STATE_RESET;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2288      	movs	r2, #136	; 0x88
 8002a2e:	2100      	movs	r1, #0
 8002a30:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_RESET;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	228c      	movs	r2, #140	; 0x8c
 8002a36:	2100      	movs	r1, #0
 8002a38:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2200      	movs	r2, #0
 8002a44:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2284      	movs	r2, #132	; 0x84
 8002a4a:	2100      	movs	r1, #0
 8002a4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002a4e:	2300      	movs	r3, #0
}
 8002a50:	0018      	movs	r0, r3
 8002a52:	46bd      	mov	sp, r7
 8002a54:	b002      	add	sp, #8
 8002a56:	bd80      	pop	{r7, pc}

08002a58 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b08a      	sub	sp, #40	; 0x28
 8002a5c:	af02      	add	r7, sp, #8
 8002a5e:	60f8      	str	r0, [r7, #12]
 8002a60:	60b9      	str	r1, [r7, #8]
 8002a62:	603b      	str	r3, [r7, #0]
 8002a64:	1dbb      	adds	r3, r7, #6
 8002a66:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2288      	movs	r2, #136	; 0x88
 8002a6c:	589b      	ldr	r3, [r3, r2]
 8002a6e:	2b20      	cmp	r3, #32
 8002a70:	d000      	beq.n	8002a74 <HAL_UART_Transmit+0x1c>
 8002a72:	e090      	b.n	8002b96 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a74:	68bb      	ldr	r3, [r7, #8]
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d003      	beq.n	8002a82 <HAL_UART_Transmit+0x2a>
 8002a7a:	1dbb      	adds	r3, r7, #6
 8002a7c:	881b      	ldrh	r3, [r3, #0]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d101      	bne.n	8002a86 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 8002a82:	2301      	movs	r3, #1
 8002a84:	e088      	b.n	8002b98 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	689a      	ldr	r2, [r3, #8]
 8002a8a:	2380      	movs	r3, #128	; 0x80
 8002a8c:	015b      	lsls	r3, r3, #5
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d109      	bne.n	8002aa6 <HAL_UART_Transmit+0x4e>
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d105      	bne.n	8002aa6 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	4013      	ands	r3, r2
 8002aa0:	d001      	beq.n	8002aa6 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e078      	b.n	8002b98 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2290      	movs	r2, #144	; 0x90
 8002aaa:	2100      	movs	r1, #0
 8002aac:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	2288      	movs	r2, #136	; 0x88
 8002ab2:	2121      	movs	r1, #33	; 0x21
 8002ab4:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ab6:	f7fe f9bf 	bl	8000e38 <HAL_GetTick>
 8002aba:	0003      	movs	r3, r0
 8002abc:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	1dba      	adds	r2, r7, #6
 8002ac2:	2154      	movs	r1, #84	; 0x54
 8002ac4:	8812      	ldrh	r2, [r2, #0]
 8002ac6:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1dba      	adds	r2, r7, #6
 8002acc:	2156      	movs	r1, #86	; 0x56
 8002ace:	8812      	ldrh	r2, [r2, #0]
 8002ad0:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	2380      	movs	r3, #128	; 0x80
 8002ad8:	015b      	lsls	r3, r3, #5
 8002ada:	429a      	cmp	r2, r3
 8002adc:	d108      	bne.n	8002af0 <HAL_UART_Transmit+0x98>
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d104      	bne.n	8002af0 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	61bb      	str	r3, [r7, #24]
 8002aee:	e003      	b.n	8002af8 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002af4:	2300      	movs	r3, #0
 8002af6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002af8:	e030      	b.n	8002b5c <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002afa:	697a      	ldr	r2, [r7, #20]
 8002afc:	68f8      	ldr	r0, [r7, #12]
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	9300      	str	r3, [sp, #0]
 8002b02:	0013      	movs	r3, r2
 8002b04:	2200      	movs	r2, #0
 8002b06:	2180      	movs	r1, #128	; 0x80
 8002b08:	f000 ffa4 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d005      	beq.n	8002b1c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	2288      	movs	r2, #136	; 0x88
 8002b14:	2120      	movs	r1, #32
 8002b16:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002b18:	2303      	movs	r3, #3
 8002b1a:	e03d      	b.n	8002b98 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d10b      	bne.n	8002b3a <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	881b      	ldrh	r3, [r3, #0]
 8002b26:	001a      	movs	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	05d2      	lsls	r2, r2, #23
 8002b2e:	0dd2      	lsrs	r2, r2, #23
 8002b30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b32:	69bb      	ldr	r3, [r7, #24]
 8002b34:	3302      	adds	r3, #2
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	e007      	b.n	8002b4a <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	781a      	ldrb	r2, [r3, #0]
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b44:	69fb      	ldr	r3, [r7, #28]
 8002b46:	3301      	adds	r3, #1
 8002b48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2256      	movs	r2, #86	; 0x56
 8002b4e:	5a9b      	ldrh	r3, [r3, r2]
 8002b50:	b29b      	uxth	r3, r3
 8002b52:	3b01      	subs	r3, #1
 8002b54:	b299      	uxth	r1, r3
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2256      	movs	r2, #86	; 0x56
 8002b5a:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	2256      	movs	r2, #86	; 0x56
 8002b60:	5a9b      	ldrh	r3, [r3, r2]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1c8      	bne.n	8002afa <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b68:	697a      	ldr	r2, [r7, #20]
 8002b6a:	68f8      	ldr	r0, [r7, #12]
 8002b6c:	683b      	ldr	r3, [r7, #0]
 8002b6e:	9300      	str	r3, [sp, #0]
 8002b70:	0013      	movs	r3, r2
 8002b72:	2200      	movs	r2, #0
 8002b74:	2140      	movs	r1, #64	; 0x40
 8002b76:	f000 ff6d 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 8002b7a:	1e03      	subs	r3, r0, #0
 8002b7c:	d005      	beq.n	8002b8a <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2288      	movs	r2, #136	; 0x88
 8002b82:	2120      	movs	r1, #32
 8002b84:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8002b86:	2303      	movs	r3, #3
 8002b88:	e006      	b.n	8002b98 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	2288      	movs	r2, #136	; 0x88
 8002b8e:	2120      	movs	r1, #32
 8002b90:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	e000      	b.n	8002b98 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8002b96:	2302      	movs	r3, #2
  }
}
 8002b98:	0018      	movs	r0, r3
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	b008      	add	sp, #32
 8002b9e:	bd80      	pop	{r7, pc}

08002ba0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ba0:	b5b0      	push	{r4, r5, r7, lr}
 8002ba2:	b0aa      	sub	sp, #168	; 0xa8
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	22a4      	movs	r2, #164	; 0xa4
 8002bb0:	18b9      	adds	r1, r7, r2
 8002bb2:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	20a0      	movs	r0, #160	; 0xa0
 8002bbc:	1839      	adds	r1, r7, r0
 8002bbe:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	249c      	movs	r4, #156	; 0x9c
 8002bc8:	1939      	adds	r1, r7, r4
 8002bca:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002bcc:	0011      	movs	r1, r2
 8002bce:	18bb      	adds	r3, r7, r2
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4aa2      	ldr	r2, [pc, #648]	; (8002e5c <HAL_UART_IRQHandler+0x2bc>)
 8002bd4:	4013      	ands	r3, r2
 8002bd6:	2298      	movs	r2, #152	; 0x98
 8002bd8:	18bd      	adds	r5, r7, r2
 8002bda:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8002bdc:	18bb      	adds	r3, r7, r2
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d11a      	bne.n	8002c1a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002be4:	187b      	adds	r3, r7, r1
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	2220      	movs	r2, #32
 8002bea:	4013      	ands	r3, r2
 8002bec:	d015      	beq.n	8002c1a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002bee:	183b      	adds	r3, r7, r0
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d105      	bne.n	8002c04 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002bf8:	193b      	adds	r3, r7, r4
 8002bfa:	681a      	ldr	r2, [r3, #0]
 8002bfc:	2380      	movs	r3, #128	; 0x80
 8002bfe:	055b      	lsls	r3, r3, #21
 8002c00:	4013      	ands	r3, r2
 8002c02:	d00a      	beq.n	8002c1a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d100      	bne.n	8002c0e <HAL_UART_IRQHandler+0x6e>
 8002c0c:	e2dc      	b.n	80031c8 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c12:	687a      	ldr	r2, [r7, #4]
 8002c14:	0010      	movs	r0, r2
 8002c16:	4798      	blx	r3
      }
      return;
 8002c18:	e2d6      	b.n	80031c8 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002c1a:	2398      	movs	r3, #152	; 0x98
 8002c1c:	18fb      	adds	r3, r7, r3
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d100      	bne.n	8002c26 <HAL_UART_IRQHandler+0x86>
 8002c24:	e122      	b.n	8002e6c <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8002c26:	239c      	movs	r3, #156	; 0x9c
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	4a8c      	ldr	r2, [pc, #560]	; (8002e60 <HAL_UART_IRQHandler+0x2c0>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	d106      	bne.n	8002c40 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8002c32:	23a0      	movs	r3, #160	; 0xa0
 8002c34:	18fb      	adds	r3, r7, r3
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a8a      	ldr	r2, [pc, #552]	; (8002e64 <HAL_UART_IRQHandler+0x2c4>)
 8002c3a:	4013      	ands	r3, r2
 8002c3c:	d100      	bne.n	8002c40 <HAL_UART_IRQHandler+0xa0>
 8002c3e:	e115      	b.n	8002e6c <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002c40:	23a4      	movs	r3, #164	; 0xa4
 8002c42:	18fb      	adds	r3, r7, r3
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	2201      	movs	r2, #1
 8002c48:	4013      	ands	r3, r2
 8002c4a:	d012      	beq.n	8002c72 <HAL_UART_IRQHandler+0xd2>
 8002c4c:	23a0      	movs	r3, #160	; 0xa0
 8002c4e:	18fb      	adds	r3, r7, r3
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	2380      	movs	r3, #128	; 0x80
 8002c54:	005b      	lsls	r3, r3, #1
 8002c56:	4013      	ands	r3, r2
 8002c58:	d00b      	beq.n	8002c72 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	2201      	movs	r2, #1
 8002c60:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2290      	movs	r2, #144	; 0x90
 8002c66:	589b      	ldr	r3, [r3, r2]
 8002c68:	2201      	movs	r2, #1
 8002c6a:	431a      	orrs	r2, r3
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2190      	movs	r1, #144	; 0x90
 8002c70:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002c72:	23a4      	movs	r3, #164	; 0xa4
 8002c74:	18fb      	adds	r3, r7, r3
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	2202      	movs	r2, #2
 8002c7a:	4013      	ands	r3, r2
 8002c7c:	d011      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x102>
 8002c7e:	239c      	movs	r3, #156	; 0x9c
 8002c80:	18fb      	adds	r3, r7, r3
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	2201      	movs	r2, #1
 8002c86:	4013      	ands	r3, r2
 8002c88:	d00b      	beq.n	8002ca2 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	2290      	movs	r2, #144	; 0x90
 8002c96:	589b      	ldr	r3, [r3, r2]
 8002c98:	2204      	movs	r2, #4
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2190      	movs	r1, #144	; 0x90
 8002ca0:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002ca2:	23a4      	movs	r3, #164	; 0xa4
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	2204      	movs	r2, #4
 8002caa:	4013      	ands	r3, r2
 8002cac:	d011      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x132>
 8002cae:	239c      	movs	r3, #156	; 0x9c
 8002cb0:	18fb      	adds	r3, r7, r3
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	2201      	movs	r2, #1
 8002cb6:	4013      	ands	r3, r2
 8002cb8:	d00b      	beq.n	8002cd2 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2290      	movs	r2, #144	; 0x90
 8002cc6:	589b      	ldr	r3, [r3, r2]
 8002cc8:	2202      	movs	r2, #2
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2190      	movs	r1, #144	; 0x90
 8002cd0:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002cd2:	23a4      	movs	r3, #164	; 0xa4
 8002cd4:	18fb      	adds	r3, r7, r3
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2208      	movs	r2, #8
 8002cda:	4013      	ands	r3, r2
 8002cdc:	d017      	beq.n	8002d0e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002cde:	23a0      	movs	r3, #160	; 0xa0
 8002ce0:	18fb      	adds	r3, r7, r3
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	2220      	movs	r2, #32
 8002ce6:	4013      	ands	r3, r2
 8002ce8:	d105      	bne.n	8002cf6 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8002cea:	239c      	movs	r3, #156	; 0x9c
 8002cec:	18fb      	adds	r3, r7, r3
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a5b      	ldr	r2, [pc, #364]	; (8002e60 <HAL_UART_IRQHandler+0x2c0>)
 8002cf2:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8002cf4:	d00b      	beq.n	8002d0e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	2208      	movs	r2, #8
 8002cfc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	2290      	movs	r2, #144	; 0x90
 8002d02:	589b      	ldr	r3, [r3, r2]
 8002d04:	2208      	movs	r2, #8
 8002d06:	431a      	orrs	r2, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	2190      	movs	r1, #144	; 0x90
 8002d0c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002d0e:	23a4      	movs	r3, #164	; 0xa4
 8002d10:	18fb      	adds	r3, r7, r3
 8002d12:	681a      	ldr	r2, [r3, #0]
 8002d14:	2380      	movs	r3, #128	; 0x80
 8002d16:	011b      	lsls	r3, r3, #4
 8002d18:	4013      	ands	r3, r2
 8002d1a:	d013      	beq.n	8002d44 <HAL_UART_IRQHandler+0x1a4>
 8002d1c:	23a0      	movs	r3, #160	; 0xa0
 8002d1e:	18fb      	adds	r3, r7, r3
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	2380      	movs	r3, #128	; 0x80
 8002d24:	04db      	lsls	r3, r3, #19
 8002d26:	4013      	ands	r3, r2
 8002d28:	d00c      	beq.n	8002d44 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	2280      	movs	r2, #128	; 0x80
 8002d30:	0112      	lsls	r2, r2, #4
 8002d32:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2290      	movs	r2, #144	; 0x90
 8002d38:	589b      	ldr	r3, [r3, r2]
 8002d3a:	2220      	movs	r2, #32
 8002d3c:	431a      	orrs	r2, r3
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2190      	movs	r1, #144	; 0x90
 8002d42:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2290      	movs	r2, #144	; 0x90
 8002d48:	589b      	ldr	r3, [r3, r2]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d100      	bne.n	8002d50 <HAL_UART_IRQHandler+0x1b0>
 8002d4e:	e23d      	b.n	80031cc <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8002d50:	23a4      	movs	r3, #164	; 0xa4
 8002d52:	18fb      	adds	r3, r7, r3
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	2220      	movs	r2, #32
 8002d58:	4013      	ands	r3, r2
 8002d5a:	d015      	beq.n	8002d88 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8002d5c:	23a0      	movs	r3, #160	; 0xa0
 8002d5e:	18fb      	adds	r3, r7, r3
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	2220      	movs	r2, #32
 8002d64:	4013      	ands	r3, r2
 8002d66:	d106      	bne.n	8002d76 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8002d68:	239c      	movs	r3, #156	; 0x9c
 8002d6a:	18fb      	adds	r3, r7, r3
 8002d6c:	681a      	ldr	r2, [r3, #0]
 8002d6e:	2380      	movs	r3, #128	; 0x80
 8002d70:	055b      	lsls	r3, r3, #21
 8002d72:	4013      	ands	r3, r2
 8002d74:	d008      	beq.n	8002d88 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d7a:	2b00      	cmp	r3, #0
 8002d7c:	d004      	beq.n	8002d88 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002d82:	687a      	ldr	r2, [r7, #4]
 8002d84:	0010      	movs	r0, r2
 8002d86:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2290      	movs	r2, #144	; 0x90
 8002d8c:	589b      	ldr	r3, [r3, r2]
 8002d8e:	2194      	movs	r1, #148	; 0x94
 8002d90:	187a      	adds	r2, r7, r1
 8002d92:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	2240      	movs	r2, #64	; 0x40
 8002d9c:	4013      	ands	r3, r2
 8002d9e:	2b40      	cmp	r3, #64	; 0x40
 8002da0:	d004      	beq.n	8002dac <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002da2:	187b      	adds	r3, r7, r1
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	2228      	movs	r2, #40	; 0x28
 8002da8:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002daa:	d04c      	beq.n	8002e46 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	0018      	movs	r0, r3
 8002db0:	f000 ffe4 	bl	8003d7c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	689b      	ldr	r3, [r3, #8]
 8002dba:	2240      	movs	r2, #64	; 0x40
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	2b40      	cmp	r3, #64	; 0x40
 8002dc0:	d13c      	bne.n	8002e3c <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002dc2:	f3ef 8310 	mrs	r3, PRIMASK
 8002dc6:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8002dc8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002dca:	2090      	movs	r0, #144	; 0x90
 8002dcc:	183a      	adds	r2, r7, r0
 8002dce:	6013      	str	r3, [r2, #0]
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002dd4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002dd6:	f383 8810 	msr	PRIMASK, r3
}
 8002dda:	46c0      	nop			; (mov r8, r8)
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	689a      	ldr	r2, [r3, #8]
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	2140      	movs	r1, #64	; 0x40
 8002de8:	438a      	bics	r2, r1
 8002dea:	609a      	str	r2, [r3, #8]
 8002dec:	183b      	adds	r3, r7, r0
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002df2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8002df4:	f383 8810 	msr	PRIMASK, r3
}
 8002df8:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2280      	movs	r2, #128	; 0x80
 8002dfe:	589b      	ldr	r3, [r3, r2]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d016      	beq.n	8002e32 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2280      	movs	r2, #128	; 0x80
 8002e08:	589b      	ldr	r3, [r3, r2]
 8002e0a:	4a17      	ldr	r2, [pc, #92]	; (8002e68 <HAL_UART_IRQHandler+0x2c8>)
 8002e0c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	2280      	movs	r2, #128	; 0x80
 8002e12:	589b      	ldr	r3, [r3, r2]
 8002e14:	0018      	movs	r0, r3
 8002e16:	f7fe f9af 	bl	8001178 <HAL_DMA_Abort_IT>
 8002e1a:	1e03      	subs	r3, r0, #0
 8002e1c:	d01c      	beq.n	8002e58 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2280      	movs	r2, #128	; 0x80
 8002e22:	589b      	ldr	r3, [r3, r2]
 8002e24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e26:	687a      	ldr	r2, [r7, #4]
 8002e28:	2180      	movs	r1, #128	; 0x80
 8002e2a:	5852      	ldr	r2, [r2, r1]
 8002e2c:	0010      	movs	r0, r2
 8002e2e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e30:	e012      	b.n	8002e58 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	0018      	movs	r0, r3
 8002e36:	f000 f9e9 	bl	800320c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e3a:	e00d      	b.n	8002e58 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f000 f9e4 	bl	800320c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e44:	e008      	b.n	8002e58 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	0018      	movs	r0, r3
 8002e4a:	f000 f9df 	bl	800320c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2290      	movs	r2, #144	; 0x90
 8002e52:	2100      	movs	r1, #0
 8002e54:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8002e56:	e1b9      	b.n	80031cc <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e58:	46c0      	nop			; (mov r8, r8)
    return;
 8002e5a:	e1b7      	b.n	80031cc <HAL_UART_IRQHandler+0x62c>
 8002e5c:	0000080f 	.word	0x0000080f
 8002e60:	10000001 	.word	0x10000001
 8002e64:	04000120 	.word	0x04000120
 8002e68:	08003e49 	.word	0x08003e49

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d000      	beq.n	8002e76 <HAL_UART_IRQHandler+0x2d6>
 8002e74:	e13e      	b.n	80030f4 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002e76:	23a4      	movs	r3, #164	; 0xa4
 8002e78:	18fb      	adds	r3, r7, r3
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2210      	movs	r2, #16
 8002e7e:	4013      	ands	r3, r2
 8002e80:	d100      	bne.n	8002e84 <HAL_UART_IRQHandler+0x2e4>
 8002e82:	e137      	b.n	80030f4 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002e84:	23a0      	movs	r3, #160	; 0xa0
 8002e86:	18fb      	adds	r3, r7, r3
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	2210      	movs	r2, #16
 8002e8c:	4013      	ands	r3, r2
 8002e8e:	d100      	bne.n	8002e92 <HAL_UART_IRQHandler+0x2f2>
 8002e90:	e130      	b.n	80030f4 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	2210      	movs	r2, #16
 8002e98:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	689b      	ldr	r3, [r3, #8]
 8002ea0:	2240      	movs	r2, #64	; 0x40
 8002ea2:	4013      	ands	r3, r2
 8002ea4:	2b40      	cmp	r3, #64	; 0x40
 8002ea6:	d000      	beq.n	8002eaa <HAL_UART_IRQHandler+0x30a>
 8002ea8:	e0a4      	b.n	8002ff4 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2280      	movs	r2, #128	; 0x80
 8002eae:	589b      	ldr	r3, [r3, r2]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	685a      	ldr	r2, [r3, #4]
 8002eb4:	217e      	movs	r1, #126	; 0x7e
 8002eb6:	187b      	adds	r3, r7, r1
 8002eb8:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8002eba:	187b      	adds	r3, r7, r1
 8002ebc:	881b      	ldrh	r3, [r3, #0]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d100      	bne.n	8002ec4 <HAL_UART_IRQHandler+0x324>
 8002ec2:	e185      	b.n	80031d0 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	225c      	movs	r2, #92	; 0x5c
 8002ec8:	5a9b      	ldrh	r3, [r3, r2]
 8002eca:	187a      	adds	r2, r7, r1
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	429a      	cmp	r2, r3
 8002ed0:	d300      	bcc.n	8002ed4 <HAL_UART_IRQHandler+0x334>
 8002ed2:	e17d      	b.n	80031d0 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	187a      	adds	r2, r7, r1
 8002ed8:	215e      	movs	r1, #94	; 0x5e
 8002eda:	8812      	ldrh	r2, [r2, #0]
 8002edc:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	589b      	ldr	r3, [r3, r2]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	2220      	movs	r2, #32
 8002eea:	4013      	ands	r3, r2
 8002eec:	d170      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002eee:	f3ef 8310 	mrs	r3, PRIMASK
 8002ef2:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8002ef4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002ef6:	67bb      	str	r3, [r7, #120]	; 0x78
 8002ef8:	2301      	movs	r3, #1
 8002efa:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002efc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002efe:	f383 8810 	msr	PRIMASK, r3
}
 8002f02:	46c0      	nop			; (mov r8, r8)
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	49b4      	ldr	r1, [pc, #720]	; (80031e0 <HAL_UART_IRQHandler+0x640>)
 8002f10:	400a      	ands	r2, r1
 8002f12:	601a      	str	r2, [r3, #0]
 8002f14:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f16:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f1a:	f383 8810 	msr	PRIMASK, r3
}
 8002f1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f20:	f3ef 8310 	mrs	r3, PRIMASK
 8002f24:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8002f26:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f28:	677b      	str	r3, [r7, #116]	; 0x74
 8002f2a:	2301      	movs	r3, #1
 8002f2c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f2e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f30:	f383 8810 	msr	PRIMASK, r3
}
 8002f34:	46c0      	nop			; (mov r8, r8)
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	689a      	ldr	r2, [r3, #8]
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	2101      	movs	r1, #1
 8002f42:	438a      	bics	r2, r1
 8002f44:	609a      	str	r2, [r3, #8]
 8002f46:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f48:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f4a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f4c:	f383 8810 	msr	PRIMASK, r3
}
 8002f50:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f52:	f3ef 8310 	mrs	r3, PRIMASK
 8002f56:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8002f58:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002f5a:	673b      	str	r3, [r7, #112]	; 0x70
 8002f5c:	2301      	movs	r3, #1
 8002f5e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f60:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002f62:	f383 8810 	msr	PRIMASK, r3
}
 8002f66:	46c0      	nop			; (mov r8, r8)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	689a      	ldr	r2, [r3, #8]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	2140      	movs	r1, #64	; 0x40
 8002f74:	438a      	bics	r2, r1
 8002f76:	609a      	str	r2, [r3, #8]
 8002f78:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002f7a:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002f7c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002f7e:	f383 8810 	msr	PRIMASK, r3
}
 8002f82:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	228c      	movs	r2, #140	; 0x8c
 8002f88:	2120      	movs	r1, #32
 8002f8a:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8002f92:	f3ef 8310 	mrs	r3, PRIMASK
 8002f96:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8002f98:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002f9a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fa0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002fa2:	f383 8810 	msr	PRIMASK, r3
}
 8002fa6:	46c0      	nop			; (mov r8, r8)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	681a      	ldr	r2, [r3, #0]
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	2110      	movs	r1, #16
 8002fb4:	438a      	bics	r2, r1
 8002fb6:	601a      	str	r2, [r3, #0]
 8002fb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002fba:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8002fbc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002fbe:	f383 8810 	msr	PRIMASK, r3
}
 8002fc2:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2280      	movs	r2, #128	; 0x80
 8002fc8:	589b      	ldr	r3, [r3, r2]
 8002fca:	0018      	movs	r0, r3
 8002fcc:	f7fe f872 	bl	80010b4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	225c      	movs	r2, #92	; 0x5c
 8002fda:	5a9a      	ldrh	r2, [r3, r2]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	215e      	movs	r1, #94	; 0x5e
 8002fe0:	5a5b      	ldrh	r3, [r3, r1]
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	b29a      	uxth	r2, r3
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	0011      	movs	r1, r2
 8002fec:	0018      	movs	r0, r3
 8002fee:	f7fd fb9f 	bl	8000730 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ff2:	e0ed      	b.n	80031d0 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	225c      	movs	r2, #92	; 0x5c
 8002ff8:	5a99      	ldrh	r1, [r3, r2]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	225e      	movs	r2, #94	; 0x5e
 8002ffe:	5a9b      	ldrh	r3, [r3, r2]
 8003000:	b29a      	uxth	r2, r3
 8003002:	208e      	movs	r0, #142	; 0x8e
 8003004:	183b      	adds	r3, r7, r0
 8003006:	1a8a      	subs	r2, r1, r2
 8003008:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	225e      	movs	r2, #94	; 0x5e
 800300e:	5a9b      	ldrh	r3, [r3, r2]
 8003010:	b29b      	uxth	r3, r3
 8003012:	2b00      	cmp	r3, #0
 8003014:	d100      	bne.n	8003018 <HAL_UART_IRQHandler+0x478>
 8003016:	e0dd      	b.n	80031d4 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8003018:	183b      	adds	r3, r7, r0
 800301a:	881b      	ldrh	r3, [r3, #0]
 800301c:	2b00      	cmp	r3, #0
 800301e:	d100      	bne.n	8003022 <HAL_UART_IRQHandler+0x482>
 8003020:	e0d8      	b.n	80031d4 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003022:	f3ef 8310 	mrs	r3, PRIMASK
 8003026:	60fb      	str	r3, [r7, #12]
  return(result);
 8003028:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800302a:	2488      	movs	r4, #136	; 0x88
 800302c:	193a      	adds	r2, r7, r4
 800302e:	6013      	str	r3, [r2, #0]
 8003030:	2301      	movs	r3, #1
 8003032:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	f383 8810 	msr	PRIMASK, r3
}
 800303a:	46c0      	nop			; (mov r8, r8)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	681a      	ldr	r2, [r3, #0]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4967      	ldr	r1, [pc, #412]	; (80031e4 <HAL_UART_IRQHandler+0x644>)
 8003048:	400a      	ands	r2, r1
 800304a:	601a      	str	r2, [r3, #0]
 800304c:	193b      	adds	r3, r7, r4
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003052:	697b      	ldr	r3, [r7, #20]
 8003054:	f383 8810 	msr	PRIMASK, r3
}
 8003058:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800305a:	f3ef 8310 	mrs	r3, PRIMASK
 800305e:	61bb      	str	r3, [r7, #24]
  return(result);
 8003060:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003062:	2484      	movs	r4, #132	; 0x84
 8003064:	193a      	adds	r2, r7, r4
 8003066:	6013      	str	r3, [r2, #0]
 8003068:	2301      	movs	r3, #1
 800306a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800306c:	69fb      	ldr	r3, [r7, #28]
 800306e:	f383 8810 	msr	PRIMASK, r3
}
 8003072:	46c0      	nop			; (mov r8, r8)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	689a      	ldr	r2, [r3, #8]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	495a      	ldr	r1, [pc, #360]	; (80031e8 <HAL_UART_IRQHandler+0x648>)
 8003080:	400a      	ands	r2, r1
 8003082:	609a      	str	r2, [r3, #8]
 8003084:	193b      	adds	r3, r7, r4
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800308a:	6a3b      	ldr	r3, [r7, #32]
 800308c:	f383 8810 	msr	PRIMASK, r3
}
 8003090:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	228c      	movs	r2, #140	; 0x8c
 8003096:	2120      	movs	r1, #32
 8003098:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2200      	movs	r2, #0
 80030a4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80030a6:	f3ef 8310 	mrs	r3, PRIMASK
 80030aa:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80030ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ae:	2480      	movs	r4, #128	; 0x80
 80030b0:	193a      	adds	r2, r7, r4
 80030b2:	6013      	str	r3, [r2, #0]
 80030b4:	2301      	movs	r3, #1
 80030b6:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030ba:	f383 8810 	msr	PRIMASK, r3
}
 80030be:	46c0      	nop			; (mov r8, r8)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	681a      	ldr	r2, [r3, #0]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	2110      	movs	r1, #16
 80030cc:	438a      	bics	r2, r1
 80030ce:	601a      	str	r2, [r3, #0]
 80030d0:	193b      	adds	r3, r7, r4
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80030d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030d8:	f383 8810 	msr	PRIMASK, r3
}
 80030dc:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2202      	movs	r2, #2
 80030e2:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80030e4:	183b      	adds	r3, r7, r0
 80030e6:	881a      	ldrh	r2, [r3, #0]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	0011      	movs	r1, r2
 80030ec:	0018      	movs	r0, r3
 80030ee:	f7fd fb1f 	bl	8000730 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80030f2:	e06f      	b.n	80031d4 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80030f4:	23a4      	movs	r3, #164	; 0xa4
 80030f6:	18fb      	adds	r3, r7, r3
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	2380      	movs	r3, #128	; 0x80
 80030fc:	035b      	lsls	r3, r3, #13
 80030fe:	4013      	ands	r3, r2
 8003100:	d010      	beq.n	8003124 <HAL_UART_IRQHandler+0x584>
 8003102:	239c      	movs	r3, #156	; 0x9c
 8003104:	18fb      	adds	r3, r7, r3
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	2380      	movs	r3, #128	; 0x80
 800310a:	03db      	lsls	r3, r3, #15
 800310c:	4013      	ands	r3, r2
 800310e:	d009      	beq.n	8003124 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	2280      	movs	r2, #128	; 0x80
 8003116:	0352      	lsls	r2, r2, #13
 8003118:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	0018      	movs	r0, r3
 800311e:	f001 fbe7 	bl	80048f0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003122:	e05a      	b.n	80031da <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8003124:	23a4      	movs	r3, #164	; 0xa4
 8003126:	18fb      	adds	r3, r7, r3
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	2280      	movs	r2, #128	; 0x80
 800312c:	4013      	ands	r3, r2
 800312e:	d016      	beq.n	800315e <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8003130:	23a0      	movs	r3, #160	; 0xa0
 8003132:	18fb      	adds	r3, r7, r3
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	2280      	movs	r2, #128	; 0x80
 8003138:	4013      	ands	r3, r2
 800313a:	d106      	bne.n	800314a <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800313c:	239c      	movs	r3, #156	; 0x9c
 800313e:	18fb      	adds	r3, r7, r3
 8003140:	681a      	ldr	r2, [r3, #0]
 8003142:	2380      	movs	r3, #128	; 0x80
 8003144:	041b      	lsls	r3, r3, #16
 8003146:	4013      	ands	r3, r2
 8003148:	d009      	beq.n	800315e <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800314e:	2b00      	cmp	r3, #0
 8003150:	d042      	beq.n	80031d8 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003156:	687a      	ldr	r2, [r7, #4]
 8003158:	0010      	movs	r0, r2
 800315a:	4798      	blx	r3
    }
    return;
 800315c:	e03c      	b.n	80031d8 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800315e:	23a4      	movs	r3, #164	; 0xa4
 8003160:	18fb      	adds	r3, r7, r3
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	2240      	movs	r2, #64	; 0x40
 8003166:	4013      	ands	r3, r2
 8003168:	d00a      	beq.n	8003180 <HAL_UART_IRQHandler+0x5e0>
 800316a:	23a0      	movs	r3, #160	; 0xa0
 800316c:	18fb      	adds	r3, r7, r3
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	2240      	movs	r2, #64	; 0x40
 8003172:	4013      	ands	r3, r2
 8003174:	d004      	beq.n	8003180 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	0018      	movs	r0, r3
 800317a:	f000 fe7c 	bl	8003e76 <UART_EndTransmit_IT>
    return;
 800317e:	e02c      	b.n	80031da <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8003180:	23a4      	movs	r3, #164	; 0xa4
 8003182:	18fb      	adds	r3, r7, r3
 8003184:	681a      	ldr	r2, [r3, #0]
 8003186:	2380      	movs	r3, #128	; 0x80
 8003188:	041b      	lsls	r3, r3, #16
 800318a:	4013      	ands	r3, r2
 800318c:	d00b      	beq.n	80031a6 <HAL_UART_IRQHandler+0x606>
 800318e:	23a0      	movs	r3, #160	; 0xa0
 8003190:	18fb      	adds	r3, r7, r3
 8003192:	681a      	ldr	r2, [r3, #0]
 8003194:	2380      	movs	r3, #128	; 0x80
 8003196:	05db      	lsls	r3, r3, #23
 8003198:	4013      	ands	r3, r2
 800319a:	d004      	beq.n	80031a6 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	0018      	movs	r0, r3
 80031a0:	f001 fbb6 	bl	8004910 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031a4:	e019      	b.n	80031da <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 80031a6:	23a4      	movs	r3, #164	; 0xa4
 80031a8:	18fb      	adds	r3, r7, r3
 80031aa:	681a      	ldr	r2, [r3, #0]
 80031ac:	2380      	movs	r3, #128	; 0x80
 80031ae:	045b      	lsls	r3, r3, #17
 80031b0:	4013      	ands	r3, r2
 80031b2:	d012      	beq.n	80031da <HAL_UART_IRQHandler+0x63a>
 80031b4:	23a0      	movs	r3, #160	; 0xa0
 80031b6:	18fb      	adds	r3, r7, r3
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	da0d      	bge.n	80031da <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	0018      	movs	r0, r3
 80031c2:	f001 fb9d 	bl	8004900 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80031c6:	e008      	b.n	80031da <HAL_UART_IRQHandler+0x63a>
      return;
 80031c8:	46c0      	nop			; (mov r8, r8)
 80031ca:	e006      	b.n	80031da <HAL_UART_IRQHandler+0x63a>
    return;
 80031cc:	46c0      	nop			; (mov r8, r8)
 80031ce:	e004      	b.n	80031da <HAL_UART_IRQHandler+0x63a>
      return;
 80031d0:	46c0      	nop			; (mov r8, r8)
 80031d2:	e002      	b.n	80031da <HAL_UART_IRQHandler+0x63a>
      return;
 80031d4:	46c0      	nop			; (mov r8, r8)
 80031d6:	e000      	b.n	80031da <HAL_UART_IRQHandler+0x63a>
    return;
 80031d8:	46c0      	nop			; (mov r8, r8)
  }
}
 80031da:	46bd      	mov	sp, r7
 80031dc:	b02a      	add	sp, #168	; 0xa8
 80031de:	bdb0      	pop	{r4, r5, r7, pc}
 80031e0:	fffffeff 	.word	0xfffffeff
 80031e4:	fffffedf 	.word	0xfffffedf
 80031e8:	effffffe 	.word	0xeffffffe

080031ec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80031f4:	46c0      	nop			; (mov r8, r8)
 80031f6:	46bd      	mov	sp, r7
 80031f8:	b002      	add	sp, #8
 80031fa:	bd80      	pop	{r7, pc}

080031fc <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80031fc:	b580      	push	{r7, lr}
 80031fe:	b082      	sub	sp, #8
 8003200:	af00      	add	r7, sp, #0
 8003202:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8003204:	46c0      	nop			; (mov r8, r8)
 8003206:	46bd      	mov	sp, r7
 8003208:	b002      	add	sp, #8
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b082      	sub	sp, #8
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003214:	46c0      	nop			; (mov r8, r8)
 8003216:	46bd      	mov	sp, r7
 8003218:	b002      	add	sp, #8
 800321a:	bd80      	pop	{r7, pc}

0800321c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800321c:	b5b0      	push	{r4, r5, r7, lr}
 800321e:	b090      	sub	sp, #64	; 0x40
 8003220:	af00      	add	r7, sp, #0
 8003222:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003224:	231a      	movs	r3, #26
 8003226:	2220      	movs	r2, #32
 8003228:	189b      	adds	r3, r3, r2
 800322a:	19db      	adds	r3, r3, r7
 800322c:	2200      	movs	r2, #0
 800322e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	689a      	ldr	r2, [r3, #8]
 8003234:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003236:	691b      	ldr	r3, [r3, #16]
 8003238:	431a      	orrs	r2, r3
 800323a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800323c:	695b      	ldr	r3, [r3, #20]
 800323e:	431a      	orrs	r2, r3
 8003240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003242:	69db      	ldr	r3, [r3, #28]
 8003244:	4313      	orrs	r3, r2
 8003246:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	4aaf      	ldr	r2, [pc, #700]	; (800350c <UART_SetConfig+0x2f0>)
 8003250:	4013      	ands	r3, r2
 8003252:	0019      	movs	r1, r3
 8003254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003256:	681a      	ldr	r2, [r3, #0]
 8003258:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800325a:	430b      	orrs	r3, r1
 800325c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800325e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	685b      	ldr	r3, [r3, #4]
 8003264:	4aaa      	ldr	r2, [pc, #680]	; (8003510 <UART_SetConfig+0x2f4>)
 8003266:	4013      	ands	r3, r2
 8003268:	0018      	movs	r0, r3
 800326a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800326c:	68d9      	ldr	r1, [r3, #12]
 800326e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003270:	681a      	ldr	r2, [r3, #0]
 8003272:	0003      	movs	r3, r0
 8003274:	430b      	orrs	r3, r1
 8003276:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800327a:	699b      	ldr	r3, [r3, #24]
 800327c:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800327e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	4aa4      	ldr	r2, [pc, #656]	; (8003514 <UART_SetConfig+0x2f8>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d004      	beq.n	8003292 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	6a1b      	ldr	r3, [r3, #32]
 800328c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800328e:	4313      	orrs	r3, r2
 8003290:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	689b      	ldr	r3, [r3, #8]
 8003298:	4a9f      	ldr	r2, [pc, #636]	; (8003518 <UART_SetConfig+0x2fc>)
 800329a:	4013      	ands	r3, r2
 800329c:	0019      	movs	r1, r3
 800329e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032a4:	430b      	orrs	r3, r1
 80032a6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80032a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032ae:	220f      	movs	r2, #15
 80032b0:	4393      	bics	r3, r2
 80032b2:	0018      	movs	r0, r3
 80032b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032b6:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80032b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ba:	681a      	ldr	r2, [r3, #0]
 80032bc:	0003      	movs	r3, r0
 80032be:	430b      	orrs	r3, r1
 80032c0:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80032c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a95      	ldr	r2, [pc, #596]	; (800351c <UART_SetConfig+0x300>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d131      	bne.n	8003330 <UART_SetConfig+0x114>
 80032cc:	4b94      	ldr	r3, [pc, #592]	; (8003520 <UART_SetConfig+0x304>)
 80032ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80032d0:	2203      	movs	r2, #3
 80032d2:	4013      	ands	r3, r2
 80032d4:	2b03      	cmp	r3, #3
 80032d6:	d01d      	beq.n	8003314 <UART_SetConfig+0xf8>
 80032d8:	d823      	bhi.n	8003322 <UART_SetConfig+0x106>
 80032da:	2b02      	cmp	r3, #2
 80032dc:	d00c      	beq.n	80032f8 <UART_SetConfig+0xdc>
 80032de:	d820      	bhi.n	8003322 <UART_SetConfig+0x106>
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d002      	beq.n	80032ea <UART_SetConfig+0xce>
 80032e4:	2b01      	cmp	r3, #1
 80032e6:	d00e      	beq.n	8003306 <UART_SetConfig+0xea>
 80032e8:	e01b      	b.n	8003322 <UART_SetConfig+0x106>
 80032ea:	231b      	movs	r3, #27
 80032ec:	2220      	movs	r2, #32
 80032ee:	189b      	adds	r3, r3, r2
 80032f0:	19db      	adds	r3, r3, r7
 80032f2:	2200      	movs	r2, #0
 80032f4:	701a      	strb	r2, [r3, #0]
 80032f6:	e0b4      	b.n	8003462 <UART_SetConfig+0x246>
 80032f8:	231b      	movs	r3, #27
 80032fa:	2220      	movs	r2, #32
 80032fc:	189b      	adds	r3, r3, r2
 80032fe:	19db      	adds	r3, r3, r7
 8003300:	2202      	movs	r2, #2
 8003302:	701a      	strb	r2, [r3, #0]
 8003304:	e0ad      	b.n	8003462 <UART_SetConfig+0x246>
 8003306:	231b      	movs	r3, #27
 8003308:	2220      	movs	r2, #32
 800330a:	189b      	adds	r3, r3, r2
 800330c:	19db      	adds	r3, r3, r7
 800330e:	2204      	movs	r2, #4
 8003310:	701a      	strb	r2, [r3, #0]
 8003312:	e0a6      	b.n	8003462 <UART_SetConfig+0x246>
 8003314:	231b      	movs	r3, #27
 8003316:	2220      	movs	r2, #32
 8003318:	189b      	adds	r3, r3, r2
 800331a:	19db      	adds	r3, r3, r7
 800331c:	2208      	movs	r2, #8
 800331e:	701a      	strb	r2, [r3, #0]
 8003320:	e09f      	b.n	8003462 <UART_SetConfig+0x246>
 8003322:	231b      	movs	r3, #27
 8003324:	2220      	movs	r2, #32
 8003326:	189b      	adds	r3, r3, r2
 8003328:	19db      	adds	r3, r3, r7
 800332a:	2210      	movs	r2, #16
 800332c:	701a      	strb	r2, [r3, #0]
 800332e:	e098      	b.n	8003462 <UART_SetConfig+0x246>
 8003330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	4a7b      	ldr	r2, [pc, #492]	; (8003524 <UART_SetConfig+0x308>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d131      	bne.n	800339e <UART_SetConfig+0x182>
 800333a:	4b79      	ldr	r3, [pc, #484]	; (8003520 <UART_SetConfig+0x304>)
 800333c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800333e:	220c      	movs	r2, #12
 8003340:	4013      	ands	r3, r2
 8003342:	2b0c      	cmp	r3, #12
 8003344:	d01d      	beq.n	8003382 <UART_SetConfig+0x166>
 8003346:	d823      	bhi.n	8003390 <UART_SetConfig+0x174>
 8003348:	2b08      	cmp	r3, #8
 800334a:	d00c      	beq.n	8003366 <UART_SetConfig+0x14a>
 800334c:	d820      	bhi.n	8003390 <UART_SetConfig+0x174>
 800334e:	2b00      	cmp	r3, #0
 8003350:	d002      	beq.n	8003358 <UART_SetConfig+0x13c>
 8003352:	2b04      	cmp	r3, #4
 8003354:	d00e      	beq.n	8003374 <UART_SetConfig+0x158>
 8003356:	e01b      	b.n	8003390 <UART_SetConfig+0x174>
 8003358:	231b      	movs	r3, #27
 800335a:	2220      	movs	r2, #32
 800335c:	189b      	adds	r3, r3, r2
 800335e:	19db      	adds	r3, r3, r7
 8003360:	2200      	movs	r2, #0
 8003362:	701a      	strb	r2, [r3, #0]
 8003364:	e07d      	b.n	8003462 <UART_SetConfig+0x246>
 8003366:	231b      	movs	r3, #27
 8003368:	2220      	movs	r2, #32
 800336a:	189b      	adds	r3, r3, r2
 800336c:	19db      	adds	r3, r3, r7
 800336e:	2202      	movs	r2, #2
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e076      	b.n	8003462 <UART_SetConfig+0x246>
 8003374:	231b      	movs	r3, #27
 8003376:	2220      	movs	r2, #32
 8003378:	189b      	adds	r3, r3, r2
 800337a:	19db      	adds	r3, r3, r7
 800337c:	2204      	movs	r2, #4
 800337e:	701a      	strb	r2, [r3, #0]
 8003380:	e06f      	b.n	8003462 <UART_SetConfig+0x246>
 8003382:	231b      	movs	r3, #27
 8003384:	2220      	movs	r2, #32
 8003386:	189b      	adds	r3, r3, r2
 8003388:	19db      	adds	r3, r3, r7
 800338a:	2208      	movs	r2, #8
 800338c:	701a      	strb	r2, [r3, #0]
 800338e:	e068      	b.n	8003462 <UART_SetConfig+0x246>
 8003390:	231b      	movs	r3, #27
 8003392:	2220      	movs	r2, #32
 8003394:	189b      	adds	r3, r3, r2
 8003396:	19db      	adds	r3, r3, r7
 8003398:	2210      	movs	r2, #16
 800339a:	701a      	strb	r2, [r3, #0]
 800339c:	e061      	b.n	8003462 <UART_SetConfig+0x246>
 800339e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	4a61      	ldr	r2, [pc, #388]	; (8003528 <UART_SetConfig+0x30c>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d106      	bne.n	80033b6 <UART_SetConfig+0x19a>
 80033a8:	231b      	movs	r3, #27
 80033aa:	2220      	movs	r2, #32
 80033ac:	189b      	adds	r3, r3, r2
 80033ae:	19db      	adds	r3, r3, r7
 80033b0:	2200      	movs	r2, #0
 80033b2:	701a      	strb	r2, [r3, #0]
 80033b4:	e055      	b.n	8003462 <UART_SetConfig+0x246>
 80033b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	4a5c      	ldr	r2, [pc, #368]	; (800352c <UART_SetConfig+0x310>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d106      	bne.n	80033ce <UART_SetConfig+0x1b2>
 80033c0:	231b      	movs	r3, #27
 80033c2:	2220      	movs	r2, #32
 80033c4:	189b      	adds	r3, r3, r2
 80033c6:	19db      	adds	r3, r3, r7
 80033c8:	2200      	movs	r2, #0
 80033ca:	701a      	strb	r2, [r3, #0]
 80033cc:	e049      	b.n	8003462 <UART_SetConfig+0x246>
 80033ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a50      	ldr	r2, [pc, #320]	; (8003514 <UART_SetConfig+0x2f8>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d13e      	bne.n	8003456 <UART_SetConfig+0x23a>
 80033d8:	4b51      	ldr	r3, [pc, #324]	; (8003520 <UART_SetConfig+0x304>)
 80033da:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80033dc:	23c0      	movs	r3, #192	; 0xc0
 80033de:	011b      	lsls	r3, r3, #4
 80033e0:	4013      	ands	r3, r2
 80033e2:	22c0      	movs	r2, #192	; 0xc0
 80033e4:	0112      	lsls	r2, r2, #4
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d027      	beq.n	800343a <UART_SetConfig+0x21e>
 80033ea:	22c0      	movs	r2, #192	; 0xc0
 80033ec:	0112      	lsls	r2, r2, #4
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d82a      	bhi.n	8003448 <UART_SetConfig+0x22c>
 80033f2:	2280      	movs	r2, #128	; 0x80
 80033f4:	0112      	lsls	r2, r2, #4
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d011      	beq.n	800341e <UART_SetConfig+0x202>
 80033fa:	2280      	movs	r2, #128	; 0x80
 80033fc:	0112      	lsls	r2, r2, #4
 80033fe:	4293      	cmp	r3, r2
 8003400:	d822      	bhi.n	8003448 <UART_SetConfig+0x22c>
 8003402:	2b00      	cmp	r3, #0
 8003404:	d004      	beq.n	8003410 <UART_SetConfig+0x1f4>
 8003406:	2280      	movs	r2, #128	; 0x80
 8003408:	00d2      	lsls	r2, r2, #3
 800340a:	4293      	cmp	r3, r2
 800340c:	d00e      	beq.n	800342c <UART_SetConfig+0x210>
 800340e:	e01b      	b.n	8003448 <UART_SetConfig+0x22c>
 8003410:	231b      	movs	r3, #27
 8003412:	2220      	movs	r2, #32
 8003414:	189b      	adds	r3, r3, r2
 8003416:	19db      	adds	r3, r3, r7
 8003418:	2200      	movs	r2, #0
 800341a:	701a      	strb	r2, [r3, #0]
 800341c:	e021      	b.n	8003462 <UART_SetConfig+0x246>
 800341e:	231b      	movs	r3, #27
 8003420:	2220      	movs	r2, #32
 8003422:	189b      	adds	r3, r3, r2
 8003424:	19db      	adds	r3, r3, r7
 8003426:	2202      	movs	r2, #2
 8003428:	701a      	strb	r2, [r3, #0]
 800342a:	e01a      	b.n	8003462 <UART_SetConfig+0x246>
 800342c:	231b      	movs	r3, #27
 800342e:	2220      	movs	r2, #32
 8003430:	189b      	adds	r3, r3, r2
 8003432:	19db      	adds	r3, r3, r7
 8003434:	2204      	movs	r2, #4
 8003436:	701a      	strb	r2, [r3, #0]
 8003438:	e013      	b.n	8003462 <UART_SetConfig+0x246>
 800343a:	231b      	movs	r3, #27
 800343c:	2220      	movs	r2, #32
 800343e:	189b      	adds	r3, r3, r2
 8003440:	19db      	adds	r3, r3, r7
 8003442:	2208      	movs	r2, #8
 8003444:	701a      	strb	r2, [r3, #0]
 8003446:	e00c      	b.n	8003462 <UART_SetConfig+0x246>
 8003448:	231b      	movs	r3, #27
 800344a:	2220      	movs	r2, #32
 800344c:	189b      	adds	r3, r3, r2
 800344e:	19db      	adds	r3, r3, r7
 8003450:	2210      	movs	r2, #16
 8003452:	701a      	strb	r2, [r3, #0]
 8003454:	e005      	b.n	8003462 <UART_SetConfig+0x246>
 8003456:	231b      	movs	r3, #27
 8003458:	2220      	movs	r2, #32
 800345a:	189b      	adds	r3, r3, r2
 800345c:	19db      	adds	r3, r3, r7
 800345e:	2210      	movs	r2, #16
 8003460:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <UART_SetConfig+0x2f8>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d000      	beq.n	800346e <UART_SetConfig+0x252>
 800346c:	e0a9      	b.n	80035c2 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800346e:	231b      	movs	r3, #27
 8003470:	2220      	movs	r2, #32
 8003472:	189b      	adds	r3, r3, r2
 8003474:	19db      	adds	r3, r3, r7
 8003476:	781b      	ldrb	r3, [r3, #0]
 8003478:	2b08      	cmp	r3, #8
 800347a:	d015      	beq.n	80034a8 <UART_SetConfig+0x28c>
 800347c:	dc18      	bgt.n	80034b0 <UART_SetConfig+0x294>
 800347e:	2b04      	cmp	r3, #4
 8003480:	d00d      	beq.n	800349e <UART_SetConfig+0x282>
 8003482:	dc15      	bgt.n	80034b0 <UART_SetConfig+0x294>
 8003484:	2b00      	cmp	r3, #0
 8003486:	d002      	beq.n	800348e <UART_SetConfig+0x272>
 8003488:	2b02      	cmp	r3, #2
 800348a:	d005      	beq.n	8003498 <UART_SetConfig+0x27c>
 800348c:	e010      	b.n	80034b0 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800348e:	f7ff f87f 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 8003492:	0003      	movs	r3, r0
 8003494:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003496:	e014      	b.n	80034c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003498:	4b25      	ldr	r3, [pc, #148]	; (8003530 <UART_SetConfig+0x314>)
 800349a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800349c:	e011      	b.n	80034c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800349e:	f7fe ffeb 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 80034a2:	0003      	movs	r3, r0
 80034a4:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034a6:	e00c      	b.n	80034c2 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80034a8:	2380      	movs	r3, #128	; 0x80
 80034aa:	021b      	lsls	r3, r3, #8
 80034ac:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80034ae:	e008      	b.n	80034c2 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 80034b0:	2300      	movs	r3, #0
 80034b2:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80034b4:	231a      	movs	r3, #26
 80034b6:	2220      	movs	r2, #32
 80034b8:	189b      	adds	r3, r3, r2
 80034ba:	19db      	adds	r3, r3, r7
 80034bc:	2201      	movs	r2, #1
 80034be:	701a      	strb	r2, [r3, #0]
        break;
 80034c0:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80034c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d100      	bne.n	80034ca <UART_SetConfig+0x2ae>
 80034c8:	e14b      	b.n	8003762 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80034ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034ce:	4b19      	ldr	r3, [pc, #100]	; (8003534 <UART_SetConfig+0x318>)
 80034d0:	0052      	lsls	r2, r2, #1
 80034d2:	5ad3      	ldrh	r3, [r2, r3]
 80034d4:	0019      	movs	r1, r3
 80034d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80034d8:	f7fc fe16 	bl	8000108 <__udivsi3>
 80034dc:	0003      	movs	r3, r0
 80034de:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034e2:	685a      	ldr	r2, [r3, #4]
 80034e4:	0013      	movs	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	189b      	adds	r3, r3, r2
 80034ea:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d305      	bcc.n	80034fc <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80034f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80034f6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80034f8:	429a      	cmp	r2, r3
 80034fa:	d91d      	bls.n	8003538 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 80034fc:	231a      	movs	r3, #26
 80034fe:	2220      	movs	r2, #32
 8003500:	189b      	adds	r3, r3, r2
 8003502:	19db      	adds	r3, r3, r7
 8003504:	2201      	movs	r2, #1
 8003506:	701a      	strb	r2, [r3, #0]
 8003508:	e12b      	b.n	8003762 <UART_SetConfig+0x546>
 800350a:	46c0      	nop			; (mov r8, r8)
 800350c:	cfff69f3 	.word	0xcfff69f3
 8003510:	ffffcfff 	.word	0xffffcfff
 8003514:	40008000 	.word	0x40008000
 8003518:	11fff4ff 	.word	0x11fff4ff
 800351c:	40013800 	.word	0x40013800
 8003520:	40021000 	.word	0x40021000
 8003524:	40004400 	.word	0x40004400
 8003528:	40004800 	.word	0x40004800
 800352c:	40004c00 	.word	0x40004c00
 8003530:	00f42400 	.word	0x00f42400
 8003534:	08004d64 	.word	0x08004d64
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353a:	61bb      	str	r3, [r7, #24]
 800353c:	2300      	movs	r3, #0
 800353e:	61fb      	str	r3, [r7, #28]
 8003540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003542:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003544:	4b92      	ldr	r3, [pc, #584]	; (8003790 <UART_SetConfig+0x574>)
 8003546:	0052      	lsls	r2, r2, #1
 8003548:	5ad3      	ldrh	r3, [r2, r3]
 800354a:	613b      	str	r3, [r7, #16]
 800354c:	2300      	movs	r3, #0
 800354e:	617b      	str	r3, [r7, #20]
 8003550:	693a      	ldr	r2, [r7, #16]
 8003552:	697b      	ldr	r3, [r7, #20]
 8003554:	69b8      	ldr	r0, [r7, #24]
 8003556:	69f9      	ldr	r1, [r7, #28]
 8003558:	f7fc ff4c 	bl	80003f4 <__aeabi_uldivmod>
 800355c:	0002      	movs	r2, r0
 800355e:	000b      	movs	r3, r1
 8003560:	0e11      	lsrs	r1, r2, #24
 8003562:	021d      	lsls	r5, r3, #8
 8003564:	430d      	orrs	r5, r1
 8003566:	0214      	lsls	r4, r2, #8
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	085b      	lsrs	r3, r3, #1
 800356e:	60bb      	str	r3, [r7, #8]
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]
 8003574:	68b8      	ldr	r0, [r7, #8]
 8003576:	68f9      	ldr	r1, [r7, #12]
 8003578:	1900      	adds	r0, r0, r4
 800357a:	4169      	adcs	r1, r5
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	603b      	str	r3, [r7, #0]
 8003582:	2300      	movs	r3, #0
 8003584:	607b      	str	r3, [r7, #4]
 8003586:	683a      	ldr	r2, [r7, #0]
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	f7fc ff33 	bl	80003f4 <__aeabi_uldivmod>
 800358e:	0002      	movs	r2, r0
 8003590:	000b      	movs	r3, r1
 8003592:	0013      	movs	r3, r2
 8003594:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003596:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003598:	23c0      	movs	r3, #192	; 0xc0
 800359a:	009b      	lsls	r3, r3, #2
 800359c:	429a      	cmp	r2, r3
 800359e:	d309      	bcc.n	80035b4 <UART_SetConfig+0x398>
 80035a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035a2:	2380      	movs	r3, #128	; 0x80
 80035a4:	035b      	lsls	r3, r3, #13
 80035a6:	429a      	cmp	r2, r3
 80035a8:	d204      	bcs.n	80035b4 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 80035aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035b0:	60da      	str	r2, [r3, #12]
 80035b2:	e0d6      	b.n	8003762 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 80035b4:	231a      	movs	r3, #26
 80035b6:	2220      	movs	r2, #32
 80035b8:	189b      	adds	r3, r3, r2
 80035ba:	19db      	adds	r3, r3, r7
 80035bc:	2201      	movs	r2, #1
 80035be:	701a      	strb	r2, [r3, #0]
 80035c0:	e0cf      	b.n	8003762 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80035c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035c4:	69da      	ldr	r2, [r3, #28]
 80035c6:	2380      	movs	r3, #128	; 0x80
 80035c8:	021b      	lsls	r3, r3, #8
 80035ca:	429a      	cmp	r2, r3
 80035cc:	d000      	beq.n	80035d0 <UART_SetConfig+0x3b4>
 80035ce:	e070      	b.n	80036b2 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 80035d0:	231b      	movs	r3, #27
 80035d2:	2220      	movs	r2, #32
 80035d4:	189b      	adds	r3, r3, r2
 80035d6:	19db      	adds	r3, r3, r7
 80035d8:	781b      	ldrb	r3, [r3, #0]
 80035da:	2b08      	cmp	r3, #8
 80035dc:	d015      	beq.n	800360a <UART_SetConfig+0x3ee>
 80035de:	dc18      	bgt.n	8003612 <UART_SetConfig+0x3f6>
 80035e0:	2b04      	cmp	r3, #4
 80035e2:	d00d      	beq.n	8003600 <UART_SetConfig+0x3e4>
 80035e4:	dc15      	bgt.n	8003612 <UART_SetConfig+0x3f6>
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d002      	beq.n	80035f0 <UART_SetConfig+0x3d4>
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d005      	beq.n	80035fa <UART_SetConfig+0x3de>
 80035ee:	e010      	b.n	8003612 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80035f0:	f7fe ffce 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 80035f4:	0003      	movs	r3, r0
 80035f6:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035f8:	e014      	b.n	8003624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80035fa:	4b66      	ldr	r3, [pc, #408]	; (8003794 <UART_SetConfig+0x578>)
 80035fc:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80035fe:	e011      	b.n	8003624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003600:	f7fe ff3a 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 8003604:	0003      	movs	r3, r0
 8003606:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003608:	e00c      	b.n	8003624 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800360a:	2380      	movs	r3, #128	; 0x80
 800360c:	021b      	lsls	r3, r3, #8
 800360e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8003610:	e008      	b.n	8003624 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8003612:	2300      	movs	r3, #0
 8003614:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8003616:	231a      	movs	r3, #26
 8003618:	2220      	movs	r2, #32
 800361a:	189b      	adds	r3, r3, r2
 800361c:	19db      	adds	r3, r3, r7
 800361e:	2201      	movs	r2, #1
 8003620:	701a      	strb	r2, [r3, #0]
        break;
 8003622:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003624:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003626:	2b00      	cmp	r3, #0
 8003628:	d100      	bne.n	800362c <UART_SetConfig+0x410>
 800362a:	e09a      	b.n	8003762 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800362c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003630:	4b57      	ldr	r3, [pc, #348]	; (8003790 <UART_SetConfig+0x574>)
 8003632:	0052      	lsls	r2, r2, #1
 8003634:	5ad3      	ldrh	r3, [r2, r3]
 8003636:	0019      	movs	r1, r3
 8003638:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800363a:	f7fc fd65 	bl	8000108 <__udivsi3>
 800363e:	0003      	movs	r3, r0
 8003640:	005a      	lsls	r2, r3, #1
 8003642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	085b      	lsrs	r3, r3, #1
 8003648:	18d2      	adds	r2, r2, r3
 800364a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800364c:	685b      	ldr	r3, [r3, #4]
 800364e:	0019      	movs	r1, r3
 8003650:	0010      	movs	r0, r2
 8003652:	f7fc fd59 	bl	8000108 <__udivsi3>
 8003656:	0003      	movs	r3, r0
 8003658:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800365a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800365c:	2b0f      	cmp	r3, #15
 800365e:	d921      	bls.n	80036a4 <UART_SetConfig+0x488>
 8003660:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003662:	2380      	movs	r3, #128	; 0x80
 8003664:	025b      	lsls	r3, r3, #9
 8003666:	429a      	cmp	r2, r3
 8003668:	d21c      	bcs.n	80036a4 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800366a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800366c:	b29a      	uxth	r2, r3
 800366e:	200e      	movs	r0, #14
 8003670:	2420      	movs	r4, #32
 8003672:	1903      	adds	r3, r0, r4
 8003674:	19db      	adds	r3, r3, r7
 8003676:	210f      	movs	r1, #15
 8003678:	438a      	bics	r2, r1
 800367a:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800367c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	b29b      	uxth	r3, r3
 8003682:	2207      	movs	r2, #7
 8003684:	4013      	ands	r3, r2
 8003686:	b299      	uxth	r1, r3
 8003688:	1903      	adds	r3, r0, r4
 800368a:	19db      	adds	r3, r3, r7
 800368c:	1902      	adds	r2, r0, r4
 800368e:	19d2      	adds	r2, r2, r7
 8003690:	8812      	ldrh	r2, [r2, #0]
 8003692:	430a      	orrs	r2, r1
 8003694:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8003696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	1902      	adds	r2, r0, r4
 800369c:	19d2      	adds	r2, r2, r7
 800369e:	8812      	ldrh	r2, [r2, #0]
 80036a0:	60da      	str	r2, [r3, #12]
 80036a2:	e05e      	b.n	8003762 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80036a4:	231a      	movs	r3, #26
 80036a6:	2220      	movs	r2, #32
 80036a8:	189b      	adds	r3, r3, r2
 80036aa:	19db      	adds	r3, r3, r7
 80036ac:	2201      	movs	r2, #1
 80036ae:	701a      	strb	r2, [r3, #0]
 80036b0:	e057      	b.n	8003762 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 80036b2:	231b      	movs	r3, #27
 80036b4:	2220      	movs	r2, #32
 80036b6:	189b      	adds	r3, r3, r2
 80036b8:	19db      	adds	r3, r3, r7
 80036ba:	781b      	ldrb	r3, [r3, #0]
 80036bc:	2b08      	cmp	r3, #8
 80036be:	d015      	beq.n	80036ec <UART_SetConfig+0x4d0>
 80036c0:	dc18      	bgt.n	80036f4 <UART_SetConfig+0x4d8>
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d00d      	beq.n	80036e2 <UART_SetConfig+0x4c6>
 80036c6:	dc15      	bgt.n	80036f4 <UART_SetConfig+0x4d8>
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d002      	beq.n	80036d2 <UART_SetConfig+0x4b6>
 80036cc:	2b02      	cmp	r3, #2
 80036ce:	d005      	beq.n	80036dc <UART_SetConfig+0x4c0>
 80036d0:	e010      	b.n	80036f4 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80036d2:	f7fe ff5d 	bl	8002590 <HAL_RCC_GetPCLK1Freq>
 80036d6:	0003      	movs	r3, r0
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036da:	e014      	b.n	8003706 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80036dc:	4b2d      	ldr	r3, [pc, #180]	; (8003794 <UART_SetConfig+0x578>)
 80036de:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036e0:	e011      	b.n	8003706 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80036e2:	f7fe fec9 	bl	8002478 <HAL_RCC_GetSysClockFreq>
 80036e6:	0003      	movs	r3, r0
 80036e8:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036ea:	e00c      	b.n	8003706 <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80036ec:	2380      	movs	r3, #128	; 0x80
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 80036f2:	e008      	b.n	8003706 <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 80036f4:	2300      	movs	r3, #0
 80036f6:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 80036f8:	231a      	movs	r3, #26
 80036fa:	2220      	movs	r2, #32
 80036fc:	189b      	adds	r3, r3, r2
 80036fe:	19db      	adds	r3, r3, r7
 8003700:	2201      	movs	r2, #1
 8003702:	701a      	strb	r2, [r3, #0]
        break;
 8003704:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8003706:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003708:	2b00      	cmp	r3, #0
 800370a:	d02a      	beq.n	8003762 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800370c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800370e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003710:	4b1f      	ldr	r3, [pc, #124]	; (8003790 <UART_SetConfig+0x574>)
 8003712:	0052      	lsls	r2, r2, #1
 8003714:	5ad3      	ldrh	r3, [r2, r3]
 8003716:	0019      	movs	r1, r3
 8003718:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800371a:	f7fc fcf5 	bl	8000108 <__udivsi3>
 800371e:	0003      	movs	r3, r0
 8003720:	001a      	movs	r2, r3
 8003722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003724:	685b      	ldr	r3, [r3, #4]
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	18d2      	adds	r2, r2, r3
 800372a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	0019      	movs	r1, r3
 8003730:	0010      	movs	r0, r2
 8003732:	f7fc fce9 	bl	8000108 <__udivsi3>
 8003736:	0003      	movs	r3, r0
 8003738:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800373a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373c:	2b0f      	cmp	r3, #15
 800373e:	d90a      	bls.n	8003756 <UART_SetConfig+0x53a>
 8003740:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003742:	2380      	movs	r3, #128	; 0x80
 8003744:	025b      	lsls	r3, r3, #9
 8003746:	429a      	cmp	r2, r3
 8003748:	d205      	bcs.n	8003756 <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800374a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374c:	b29a      	uxth	r2, r3
 800374e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	60da      	str	r2, [r3, #12]
 8003754:	e005      	b.n	8003762 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8003756:	231a      	movs	r3, #26
 8003758:	2220      	movs	r2, #32
 800375a:	189b      	adds	r3, r3, r2
 800375c:	19db      	adds	r3, r3, r7
 800375e:	2201      	movs	r2, #1
 8003760:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8003762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003764:	226a      	movs	r2, #106	; 0x6a
 8003766:	2101      	movs	r1, #1
 8003768:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 800376a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800376c:	2268      	movs	r2, #104	; 0x68
 800376e:	2101      	movs	r1, #1
 8003770:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003772:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003774:	2200      	movs	r2, #0
 8003776:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8003778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800377a:	2200      	movs	r2, #0
 800377c:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 800377e:	231a      	movs	r3, #26
 8003780:	2220      	movs	r2, #32
 8003782:	189b      	adds	r3, r3, r2
 8003784:	19db      	adds	r3, r3, r7
 8003786:	781b      	ldrb	r3, [r3, #0]
}
 8003788:	0018      	movs	r0, r3
 800378a:	46bd      	mov	sp, r7
 800378c:	b010      	add	sp, #64	; 0x40
 800378e:	bdb0      	pop	{r4, r5, r7, pc}
 8003790:	08004d64 	.word	0x08004d64
 8003794:	00f42400 	.word	0x00f42400

08003798 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003798:	b580      	push	{r7, lr}
 800379a:	b082      	sub	sp, #8
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037a4:	2208      	movs	r2, #8
 80037a6:	4013      	ands	r3, r2
 80037a8:	d00b      	beq.n	80037c2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a4a      	ldr	r2, [pc, #296]	; (80038dc <UART_AdvFeatureConfig+0x144>)
 80037b2:	4013      	ands	r3, r2
 80037b4:	0019      	movs	r1, r3
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	430a      	orrs	r2, r1
 80037c0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037c6:	2201      	movs	r2, #1
 80037c8:	4013      	ands	r3, r2
 80037ca:	d00b      	beq.n	80037e4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	4a43      	ldr	r2, [pc, #268]	; (80038e0 <UART_AdvFeatureConfig+0x148>)
 80037d4:	4013      	ands	r3, r2
 80037d6:	0019      	movs	r1, r3
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	430a      	orrs	r2, r1
 80037e2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037e8:	2202      	movs	r2, #2
 80037ea:	4013      	ands	r3, r2
 80037ec:	d00b      	beq.n	8003806 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	4a3b      	ldr	r2, [pc, #236]	; (80038e4 <UART_AdvFeatureConfig+0x14c>)
 80037f6:	4013      	ands	r3, r2
 80037f8:	0019      	movs	r1, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	430a      	orrs	r2, r1
 8003804:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800380a:	2204      	movs	r2, #4
 800380c:	4013      	ands	r3, r2
 800380e:	d00b      	beq.n	8003828 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	4a34      	ldr	r2, [pc, #208]	; (80038e8 <UART_AdvFeatureConfig+0x150>)
 8003818:	4013      	ands	r3, r2
 800381a:	0019      	movs	r1, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	430a      	orrs	r2, r1
 8003826:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800382c:	2210      	movs	r2, #16
 800382e:	4013      	ands	r3, r2
 8003830:	d00b      	beq.n	800384a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	4a2c      	ldr	r2, [pc, #176]	; (80038ec <UART_AdvFeatureConfig+0x154>)
 800383a:	4013      	ands	r3, r2
 800383c:	0019      	movs	r1, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	430a      	orrs	r2, r1
 8003848:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800384e:	2220      	movs	r2, #32
 8003850:	4013      	ands	r3, r2
 8003852:	d00b      	beq.n	800386c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	4a25      	ldr	r2, [pc, #148]	; (80038f0 <UART_AdvFeatureConfig+0x158>)
 800385c:	4013      	ands	r3, r2
 800385e:	0019      	movs	r1, r3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003870:	2240      	movs	r2, #64	; 0x40
 8003872:	4013      	ands	r3, r2
 8003874:	d01d      	beq.n	80038b2 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <UART_AdvFeatureConfig+0x15c>)
 800387e:	4013      	ands	r3, r2
 8003880:	0019      	movs	r1, r3
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	430a      	orrs	r2, r1
 800388c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003892:	2380      	movs	r3, #128	; 0x80
 8003894:	035b      	lsls	r3, r3, #13
 8003896:	429a      	cmp	r2, r3
 8003898:	d10b      	bne.n	80038b2 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	4a15      	ldr	r2, [pc, #84]	; (80038f8 <UART_AdvFeatureConfig+0x160>)
 80038a2:	4013      	ands	r3, r2
 80038a4:	0019      	movs	r1, r3
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	430a      	orrs	r2, r1
 80038b0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038b6:	2280      	movs	r2, #128	; 0x80
 80038b8:	4013      	ands	r3, r2
 80038ba:	d00b      	beq.n	80038d4 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	4a0e      	ldr	r2, [pc, #56]	; (80038fc <UART_AdvFeatureConfig+0x164>)
 80038c4:	4013      	ands	r3, r2
 80038c6:	0019      	movs	r1, r3
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	430a      	orrs	r2, r1
 80038d2:	605a      	str	r2, [r3, #4]
  }
}
 80038d4:	46c0      	nop			; (mov r8, r8)
 80038d6:	46bd      	mov	sp, r7
 80038d8:	b002      	add	sp, #8
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	ffff7fff 	.word	0xffff7fff
 80038e0:	fffdffff 	.word	0xfffdffff
 80038e4:	fffeffff 	.word	0xfffeffff
 80038e8:	fffbffff 	.word	0xfffbffff
 80038ec:	ffffefff 	.word	0xffffefff
 80038f0:	ffffdfff 	.word	0xffffdfff
 80038f4:	ffefffff 	.word	0xffefffff
 80038f8:	ff9fffff 	.word	0xff9fffff
 80038fc:	fff7ffff 	.word	0xfff7ffff

08003900 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b092      	sub	sp, #72	; 0x48
 8003904:	af02      	add	r7, sp, #8
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2290      	movs	r2, #144	; 0x90
 800390c:	2100      	movs	r1, #0
 800390e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003910:	f7fd fa92 	bl	8000e38 <HAL_GetTick>
 8003914:	0003      	movs	r3, r0
 8003916:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	2208      	movs	r2, #8
 8003920:	4013      	ands	r3, r2
 8003922:	2b08      	cmp	r3, #8
 8003924:	d12d      	bne.n	8003982 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003926:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003928:	2280      	movs	r2, #128	; 0x80
 800392a:	0391      	lsls	r1, r2, #14
 800392c:	6878      	ldr	r0, [r7, #4]
 800392e:	4a47      	ldr	r2, [pc, #284]	; (8003a4c <UART_CheckIdleState+0x14c>)
 8003930:	9200      	str	r2, [sp, #0]
 8003932:	2200      	movs	r2, #0
 8003934:	f000 f88e 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 8003938:	1e03      	subs	r3, r0, #0
 800393a:	d022      	beq.n	8003982 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800393c:	f3ef 8310 	mrs	r3, PRIMASK
 8003940:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003942:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8003944:	63bb      	str	r3, [r7, #56]	; 0x38
 8003946:	2301      	movs	r3, #1
 8003948:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800394a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800394c:	f383 8810 	msr	PRIMASK, r3
}
 8003950:	46c0      	nop			; (mov r8, r8)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2180      	movs	r1, #128	; 0x80
 800395e:	438a      	bics	r2, r1
 8003960:	601a      	str	r2, [r3, #0]
 8003962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003964:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003968:	f383 8810 	msr	PRIMASK, r3
}
 800396c:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2288      	movs	r2, #136	; 0x88
 8003972:	2120      	movs	r1, #32
 8003974:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2284      	movs	r2, #132	; 0x84
 800397a:	2100      	movs	r1, #0
 800397c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800397e:	2303      	movs	r3, #3
 8003980:	e060      	b.n	8003a44 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	2204      	movs	r2, #4
 800398a:	4013      	ands	r3, r2
 800398c:	2b04      	cmp	r3, #4
 800398e:	d146      	bne.n	8003a1e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003990:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003992:	2280      	movs	r2, #128	; 0x80
 8003994:	03d1      	lsls	r1, r2, #15
 8003996:	6878      	ldr	r0, [r7, #4]
 8003998:	4a2c      	ldr	r2, [pc, #176]	; (8003a4c <UART_CheckIdleState+0x14c>)
 800399a:	9200      	str	r2, [sp, #0]
 800399c:	2200      	movs	r2, #0
 800399e:	f000 f859 	bl	8003a54 <UART_WaitOnFlagUntilTimeout>
 80039a2:	1e03      	subs	r3, r0, #0
 80039a4:	d03b      	beq.n	8003a1e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039a6:	f3ef 8310 	mrs	r3, PRIMASK
 80039aa:	60fb      	str	r3, [r7, #12]
  return(result);
 80039ac:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80039ae:	637b      	str	r3, [r7, #52]	; 0x34
 80039b0:	2301      	movs	r3, #1
 80039b2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039b4:	693b      	ldr	r3, [r7, #16]
 80039b6:	f383 8810 	msr	PRIMASK, r3
}
 80039ba:	46c0      	nop			; (mov r8, r8)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	681a      	ldr	r2, [r3, #0]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	4922      	ldr	r1, [pc, #136]	; (8003a50 <UART_CheckIdleState+0x150>)
 80039c8:	400a      	ands	r2, r1
 80039ca:	601a      	str	r2, [r3, #0]
 80039cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039ce:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039d0:	697b      	ldr	r3, [r7, #20]
 80039d2:	f383 8810 	msr	PRIMASK, r3
}
 80039d6:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80039d8:	f3ef 8310 	mrs	r3, PRIMASK
 80039dc:	61bb      	str	r3, [r7, #24]
  return(result);
 80039de:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039e0:	633b      	str	r3, [r7, #48]	; 0x30
 80039e2:	2301      	movs	r3, #1
 80039e4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80039e6:	69fb      	ldr	r3, [r7, #28]
 80039e8:	f383 8810 	msr	PRIMASK, r3
}
 80039ec:	46c0      	nop			; (mov r8, r8)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689a      	ldr	r2, [r3, #8]
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2101      	movs	r1, #1
 80039fa:	438a      	bics	r2, r1
 80039fc:	609a      	str	r2, [r3, #8]
 80039fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003a02:	6a3b      	ldr	r3, [r7, #32]
 8003a04:	f383 8810 	msr	PRIMASK, r3
}
 8003a08:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	228c      	movs	r2, #140	; 0x8c
 8003a0e:	2120      	movs	r1, #32
 8003a10:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	2284      	movs	r2, #132	; 0x84
 8003a16:	2100      	movs	r1, #0
 8003a18:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	e012      	b.n	8003a44 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2288      	movs	r2, #136	; 0x88
 8003a22:	2120      	movs	r1, #32
 8003a24:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	228c      	movs	r2, #140	; 0x8c
 8003a2a:	2120      	movs	r1, #32
 8003a2c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	2200      	movs	r2, #0
 8003a32:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2284      	movs	r2, #132	; 0x84
 8003a3e:	2100      	movs	r1, #0
 8003a40:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003a42:	2300      	movs	r3, #0
}
 8003a44:	0018      	movs	r0, r3
 8003a46:	46bd      	mov	sp, r7
 8003a48:	b010      	add	sp, #64	; 0x40
 8003a4a:	bd80      	pop	{r7, pc}
 8003a4c:	01ffffff 	.word	0x01ffffff
 8003a50:	fffffedf 	.word	0xfffffedf

08003a54 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	60b9      	str	r1, [r7, #8]
 8003a5e:	603b      	str	r3, [r7, #0]
 8003a60:	1dfb      	adds	r3, r7, #7
 8003a62:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003a64:	e051      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a66:	69bb      	ldr	r3, [r7, #24]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	d04e      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a6c:	f7fd f9e4 	bl	8000e38 <HAL_GetTick>
 8003a70:	0002      	movs	r2, r0
 8003a72:	683b      	ldr	r3, [r7, #0]
 8003a74:	1ad3      	subs	r3, r2, r3
 8003a76:	69ba      	ldr	r2, [r7, #24]
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d302      	bcc.n	8003a82 <UART_WaitOnFlagUntilTimeout+0x2e>
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d101      	bne.n	8003a86 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8003a82:	2303      	movs	r3, #3
 8003a84:	e051      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	2204      	movs	r2, #4
 8003a8e:	4013      	ands	r3, r2
 8003a90:	d03b      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a92:	68bb      	ldr	r3, [r7, #8]
 8003a94:	2b80      	cmp	r3, #128	; 0x80
 8003a96:	d038      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb6>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b40      	cmp	r3, #64	; 0x40
 8003a9c:	d035      	beq.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	69db      	ldr	r3, [r3, #28]
 8003aa4:	2208      	movs	r2, #8
 8003aa6:	4013      	ands	r3, r2
 8003aa8:	2b08      	cmp	r3, #8
 8003aaa:	d111      	bne.n	8003ad0 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	2208      	movs	r2, #8
 8003ab2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	0018      	movs	r0, r3
 8003ab8:	f000 f960 	bl	8003d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	2290      	movs	r2, #144	; 0x90
 8003ac0:	2108      	movs	r1, #8
 8003ac2:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	2284      	movs	r2, #132	; 0x84
 8003ac8:	2100      	movs	r1, #0
 8003aca:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8003acc:	2301      	movs	r3, #1
 8003ace:	e02c      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69da      	ldr	r2, [r3, #28]
 8003ad6:	2380      	movs	r3, #128	; 0x80
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	401a      	ands	r2, r3
 8003adc:	2380      	movs	r3, #128	; 0x80
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	429a      	cmp	r2, r3
 8003ae2:	d112      	bne.n	8003b0a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	2280      	movs	r2, #128	; 0x80
 8003aea:	0112      	lsls	r2, r2, #4
 8003aec:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	0018      	movs	r0, r3
 8003af2:	f000 f943 	bl	8003d7c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2290      	movs	r2, #144	; 0x90
 8003afa:	2120      	movs	r1, #32
 8003afc:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2284      	movs	r2, #132	; 0x84
 8003b02:	2100      	movs	r1, #0
 8003b04:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8003b06:	2303      	movs	r3, #3
 8003b08:	e00f      	b.n	8003b2a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	69db      	ldr	r3, [r3, #28]
 8003b10:	68ba      	ldr	r2, [r7, #8]
 8003b12:	4013      	ands	r3, r2
 8003b14:	68ba      	ldr	r2, [r7, #8]
 8003b16:	1ad3      	subs	r3, r2, r3
 8003b18:	425a      	negs	r2, r3
 8003b1a:	4153      	adcs	r3, r2
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	001a      	movs	r2, r3
 8003b20:	1dfb      	adds	r3, r7, #7
 8003b22:	781b      	ldrb	r3, [r3, #0]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d09e      	beq.n	8003a66 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003b28:	2300      	movs	r3, #0
}
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	b004      	add	sp, #16
 8003b30:	bd80      	pop	{r7, pc}
	...

08003b34 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	b098      	sub	sp, #96	; 0x60
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	60f8      	str	r0, [r7, #12]
 8003b3c:	60b9      	str	r1, [r7, #8]
 8003b3e:	1dbb      	adds	r3, r7, #6
 8003b40:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	68ba      	ldr	r2, [r7, #8]
 8003b46:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	1dba      	adds	r2, r7, #6
 8003b4c:	215c      	movs	r1, #92	; 0x5c
 8003b4e:	8812      	ldrh	r2, [r2, #0]
 8003b50:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	1dba      	adds	r2, r7, #6
 8003b56:	215e      	movs	r1, #94	; 0x5e
 8003b58:	8812      	ldrh	r2, [r2, #0]
 8003b5a:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	689a      	ldr	r2, [r3, #8]
 8003b66:	2380      	movs	r3, #128	; 0x80
 8003b68:	015b      	lsls	r3, r3, #5
 8003b6a:	429a      	cmp	r2, r3
 8003b6c:	d10d      	bne.n	8003b8a <UART_Start_Receive_IT+0x56>
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	691b      	ldr	r3, [r3, #16]
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d104      	bne.n	8003b80 <UART_Start_Receive_IT+0x4c>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	2260      	movs	r2, #96	; 0x60
 8003b7a:	497b      	ldr	r1, [pc, #492]	; (8003d68 <UART_Start_Receive_IT+0x234>)
 8003b7c:	5299      	strh	r1, [r3, r2]
 8003b7e:	e02e      	b.n	8003bde <UART_Start_Receive_IT+0xaa>
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	2260      	movs	r2, #96	; 0x60
 8003b84:	21ff      	movs	r1, #255	; 0xff
 8003b86:	5299      	strh	r1, [r3, r2]
 8003b88:	e029      	b.n	8003bde <UART_Start_Receive_IT+0xaa>
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	689b      	ldr	r3, [r3, #8]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10d      	bne.n	8003bae <UART_Start_Receive_IT+0x7a>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	691b      	ldr	r3, [r3, #16]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d104      	bne.n	8003ba4 <UART_Start_Receive_IT+0x70>
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2260      	movs	r2, #96	; 0x60
 8003b9e:	21ff      	movs	r1, #255	; 0xff
 8003ba0:	5299      	strh	r1, [r3, r2]
 8003ba2:	e01c      	b.n	8003bde <UART_Start_Receive_IT+0xaa>
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2260      	movs	r2, #96	; 0x60
 8003ba8:	217f      	movs	r1, #127	; 0x7f
 8003baa:	5299      	strh	r1, [r3, r2]
 8003bac:	e017      	b.n	8003bde <UART_Start_Receive_IT+0xaa>
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	689a      	ldr	r2, [r3, #8]
 8003bb2:	2380      	movs	r3, #128	; 0x80
 8003bb4:	055b      	lsls	r3, r3, #21
 8003bb6:	429a      	cmp	r2, r3
 8003bb8:	d10d      	bne.n	8003bd6 <UART_Start_Receive_IT+0xa2>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	691b      	ldr	r3, [r3, #16]
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d104      	bne.n	8003bcc <UART_Start_Receive_IT+0x98>
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2260      	movs	r2, #96	; 0x60
 8003bc6:	217f      	movs	r1, #127	; 0x7f
 8003bc8:	5299      	strh	r1, [r3, r2]
 8003bca:	e008      	b.n	8003bde <UART_Start_Receive_IT+0xaa>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2260      	movs	r2, #96	; 0x60
 8003bd0:	213f      	movs	r1, #63	; 0x3f
 8003bd2:	5299      	strh	r1, [r3, r2]
 8003bd4:	e003      	b.n	8003bde <UART_Start_Receive_IT+0xaa>
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2260      	movs	r2, #96	; 0x60
 8003bda:	2100      	movs	r1, #0
 8003bdc:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	2290      	movs	r2, #144	; 0x90
 8003be2:	2100      	movs	r1, #0
 8003be4:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	228c      	movs	r2, #140	; 0x8c
 8003bea:	2122      	movs	r1, #34	; 0x22
 8003bec:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003bee:	f3ef 8310 	mrs	r3, PRIMASK
 8003bf2:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8003bf4:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bf6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bf8:	2301      	movs	r3, #1
 8003bfa:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003bfc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bfe:	f383 8810 	msr	PRIMASK, r3
}
 8003c02:	46c0      	nop			; (mov r8, r8)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	689a      	ldr	r2, [r3, #8]
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	2101      	movs	r1, #1
 8003c10:	430a      	orrs	r2, r1
 8003c12:	609a      	str	r2, [r3, #8]
 8003c14:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003c16:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c18:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003c1a:	f383 8810 	msr	PRIMASK, r3
}
 8003c1e:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8003c24:	2380      	movs	r3, #128	; 0x80
 8003c26:	059b      	lsls	r3, r3, #22
 8003c28:	429a      	cmp	r2, r3
 8003c2a:	d150      	bne.n	8003cce <UART_Start_Receive_IT+0x19a>
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	2268      	movs	r2, #104	; 0x68
 8003c30:	5a9b      	ldrh	r3, [r3, r2]
 8003c32:	1dba      	adds	r2, r7, #6
 8003c34:	8812      	ldrh	r2, [r2, #0]
 8003c36:	429a      	cmp	r2, r3
 8003c38:	d349      	bcc.n	8003cce <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	2380      	movs	r3, #128	; 0x80
 8003c40:	015b      	lsls	r3, r3, #5
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d107      	bne.n	8003c56 <UART_Start_Receive_IT+0x122>
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	691b      	ldr	r3, [r3, #16]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d103      	bne.n	8003c56 <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	4a46      	ldr	r2, [pc, #280]	; (8003d6c <UART_Start_Receive_IT+0x238>)
 8003c52:	675a      	str	r2, [r3, #116]	; 0x74
 8003c54:	e002      	b.n	8003c5c <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	4a45      	ldr	r2, [pc, #276]	; (8003d70 <UART_Start_Receive_IT+0x23c>)
 8003c5a:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	691b      	ldr	r3, [r3, #16]
 8003c60:	2b00      	cmp	r3, #0
 8003c62:	d019      	beq.n	8003c98 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c64:	f3ef 8310 	mrs	r3, PRIMASK
 8003c68:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8003c6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c6c:	65bb      	str	r3, [r7, #88]	; 0x58
 8003c6e:	2301      	movs	r3, #1
 8003c70:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c74:	f383 8810 	msr	PRIMASK, r3
}
 8003c78:	46c0      	nop			; (mov r8, r8)
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	2180      	movs	r1, #128	; 0x80
 8003c86:	0049      	lsls	r1, r1, #1
 8003c88:	430a      	orrs	r2, r1
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c92:	f383 8810 	msr	PRIMASK, r3
}
 8003c96:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003c98:	f3ef 8310 	mrs	r3, PRIMASK
 8003c9c:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8003c9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8003ca0:	657b      	str	r3, [r7, #84]	; 0x54
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	f383 8810 	msr	PRIMASK, r3
}
 8003cac:	46c0      	nop			; (mov r8, r8)
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	2180      	movs	r1, #128	; 0x80
 8003cba:	0549      	lsls	r1, r1, #21
 8003cbc:	430a      	orrs	r2, r1
 8003cbe:	609a      	str	r2, [r3, #8]
 8003cc0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003cc2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	f383 8810 	msr	PRIMASK, r3
}
 8003cca:	46c0      	nop			; (mov r8, r8)
 8003ccc:	e047      	b.n	8003d5e <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	689a      	ldr	r2, [r3, #8]
 8003cd2:	2380      	movs	r3, #128	; 0x80
 8003cd4:	015b      	lsls	r3, r3, #5
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d107      	bne.n	8003cea <UART_Start_Receive_IT+0x1b6>
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	691b      	ldr	r3, [r3, #16]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d103      	bne.n	8003cea <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	; (8003d74 <UART_Start_Receive_IT+0x240>)
 8003ce6:	675a      	str	r2, [r3, #116]	; 0x74
 8003ce8:	e002      	b.n	8003cf0 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	4a22      	ldr	r2, [pc, #136]	; (8003d78 <UART_Start_Receive_IT+0x244>)
 8003cee:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	691b      	ldr	r3, [r3, #16]
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d019      	beq.n	8003d2c <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8003cfc:	61fb      	str	r3, [r7, #28]
  return(result);
 8003cfe:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8003d00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d02:	2301      	movs	r3, #1
 8003d04:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d06:	6a3b      	ldr	r3, [r7, #32]
 8003d08:	f383 8810 	msr	PRIMASK, r3
}
 8003d0c:	46c0      	nop			; (mov r8, r8)
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2190      	movs	r1, #144	; 0x90
 8003d1a:	0049      	lsls	r1, r1, #1
 8003d1c:	430a      	orrs	r2, r1
 8003d1e:	601a      	str	r2, [r3, #0]
 8003d20:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d22:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d26:	f383 8810 	msr	PRIMASK, r3
}
 8003d2a:	e018      	b.n	8003d5e <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d2c:	f3ef 8310 	mrs	r3, PRIMASK
 8003d30:	613b      	str	r3, [r7, #16]
  return(result);
 8003d32:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8003d34:	653b      	str	r3, [r7, #80]	; 0x50
 8003d36:	2301      	movs	r3, #1
 8003d38:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d3a:	697b      	ldr	r3, [r7, #20]
 8003d3c:	f383 8810 	msr	PRIMASK, r3
}
 8003d40:	46c0      	nop			; (mov r8, r8)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	2120      	movs	r1, #32
 8003d4e:	430a      	orrs	r2, r1
 8003d50:	601a      	str	r2, [r3, #0]
 8003d52:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d54:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d56:	69bb      	ldr	r3, [r7, #24]
 8003d58:	f383 8810 	msr	PRIMASK, r3
}
 8003d5c:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8003d5e:	2300      	movs	r3, #0
}
 8003d60:	0018      	movs	r0, r3
 8003d62:	46bd      	mov	sp, r7
 8003d64:	b018      	add	sp, #96	; 0x60
 8003d66:	bd80      	pop	{r7, pc}
 8003d68:	000001ff 	.word	0x000001ff
 8003d6c:	08004599 	.word	0x08004599
 8003d70:	08004259 	.word	0x08004259
 8003d74:	08004095 	.word	0x08004095
 8003d78:	08003ed1 	.word	0x08003ed1

08003d7c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b08e      	sub	sp, #56	; 0x38
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003d84:	f3ef 8310 	mrs	r3, PRIMASK
 8003d88:	617b      	str	r3, [r7, #20]
  return(result);
 8003d8a:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003d8c:	637b      	str	r3, [r7, #52]	; 0x34
 8003d8e:	2301      	movs	r3, #1
 8003d90:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003d92:	69bb      	ldr	r3, [r7, #24]
 8003d94:	f383 8810 	msr	PRIMASK, r3
}
 8003d98:	46c0      	nop			; (mov r8, r8)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681a      	ldr	r2, [r3, #0]
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4926      	ldr	r1, [pc, #152]	; (8003e40 <UART_EndRxTransfer+0xc4>)
 8003da6:	400a      	ands	r2, r1
 8003da8:	601a      	str	r2, [r3, #0]
 8003daa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dac:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	f383 8810 	msr	PRIMASK, r3
}
 8003db4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003db6:	f3ef 8310 	mrs	r3, PRIMASK
 8003dba:	623b      	str	r3, [r7, #32]
  return(result);
 8003dbc:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003dbe:	633b      	str	r3, [r7, #48]	; 0x30
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dc6:	f383 8810 	msr	PRIMASK, r3
}
 8003dca:	46c0      	nop			; (mov r8, r8)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	689a      	ldr	r2, [r3, #8]
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	491b      	ldr	r1, [pc, #108]	; (8003e44 <UART_EndRxTransfer+0xc8>)
 8003dd8:	400a      	ands	r2, r1
 8003dda:	609a      	str	r2, [r3, #8]
 8003ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dde:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003de0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de2:	f383 8810 	msr	PRIMASK, r3
}
 8003de6:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8003dec:	2b01      	cmp	r3, #1
 8003dee:	d118      	bne.n	8003e22 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003df0:	f3ef 8310 	mrs	r3, PRIMASK
 8003df4:	60bb      	str	r3, [r7, #8]
  return(result);
 8003df6:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003dfa:	2301      	movs	r3, #1
 8003dfc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f383 8810 	msr	PRIMASK, r3
}
 8003e04:	46c0      	nop			; (mov r8, r8)
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	681a      	ldr	r2, [r3, #0]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2110      	movs	r1, #16
 8003e12:	438a      	bics	r2, r1
 8003e14:	601a      	str	r2, [r3, #0]
 8003e16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e18:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e1a:	693b      	ldr	r3, [r7, #16]
 8003e1c:	f383 8810 	msr	PRIMASK, r3
}
 8003e20:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	228c      	movs	r2, #140	; 0x8c
 8003e26:	2120      	movs	r1, #32
 8003e28:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2200      	movs	r2, #0
 8003e2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	2200      	movs	r2, #0
 8003e34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8003e36:	46c0      	nop			; (mov r8, r8)
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b00e      	add	sp, #56	; 0x38
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	fffffedf 	.word	0xfffffedf
 8003e44:	effffffe 	.word	0xeffffffe

08003e48 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003e48:	b580      	push	{r7, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e54:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	225e      	movs	r2, #94	; 0x5e
 8003e5a:	2100      	movs	r1, #0
 8003e5c:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2256      	movs	r2, #86	; 0x56
 8003e62:	2100      	movs	r1, #0
 8003e64:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	0018      	movs	r0, r3
 8003e6a:	f7ff f9cf 	bl	800320c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e6e:	46c0      	nop			; (mov r8, r8)
 8003e70:	46bd      	mov	sp, r7
 8003e72:	b004      	add	sp, #16
 8003e74:	bd80      	pop	{r7, pc}

08003e76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e76:	b580      	push	{r7, lr}
 8003e78:	b086      	sub	sp, #24
 8003e7a:	af00      	add	r7, sp, #0
 8003e7c:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003e7e:	f3ef 8310 	mrs	r3, PRIMASK
 8003e82:	60bb      	str	r3, [r7, #8]
  return(result);
 8003e84:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e86:	617b      	str	r3, [r7, #20]
 8003e88:	2301      	movs	r3, #1
 8003e8a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f383 8810 	msr	PRIMASK, r3
}
 8003e92:	46c0      	nop			; (mov r8, r8)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2140      	movs	r1, #64	; 0x40
 8003ea0:	438a      	bics	r2, r1
 8003ea2:	601a      	str	r2, [r3, #0]
 8003ea4:	697b      	ldr	r3, [r7, #20]
 8003ea6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	f383 8810 	msr	PRIMASK, r3
}
 8003eae:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2288      	movs	r2, #136	; 0x88
 8003eb4:	2120      	movs	r1, #32
 8003eb6:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	0018      	movs	r0, r3
 8003ec2:	f7ff f993 	bl	80031ec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003ec6:	46c0      	nop			; (mov r8, r8)
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	b006      	add	sp, #24
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b094      	sub	sp, #80	; 0x50
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003ed8:	204e      	movs	r0, #78	; 0x4e
 8003eda:	183b      	adds	r3, r7, r0
 8003edc:	687a      	ldr	r2, [r7, #4]
 8003ede:	2160      	movs	r1, #96	; 0x60
 8003ee0:	5a52      	ldrh	r2, [r2, r1]
 8003ee2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	228c      	movs	r2, #140	; 0x8c
 8003ee8:	589b      	ldr	r3, [r3, r2]
 8003eea:	2b22      	cmp	r3, #34	; 0x22
 8003eec:	d000      	beq.n	8003ef0 <UART_RxISR_8BIT+0x20>
 8003eee:	e0bf      	b.n	8004070 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ef6:	214c      	movs	r1, #76	; 0x4c
 8003ef8:	187b      	adds	r3, r7, r1
 8003efa:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8003efc:	187b      	adds	r3, r7, r1
 8003efe:	881b      	ldrh	r3, [r3, #0]
 8003f00:	b2da      	uxtb	r2, r3
 8003f02:	183b      	adds	r3, r7, r0
 8003f04:	881b      	ldrh	r3, [r3, #0]
 8003f06:	b2d9      	uxtb	r1, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f0c:	400a      	ands	r2, r1
 8003f0e:	b2d2      	uxtb	r2, r2
 8003f10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f16:	1c5a      	adds	r2, r3, #1
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	225e      	movs	r2, #94	; 0x5e
 8003f20:	5a9b      	ldrh	r3, [r3, r2]
 8003f22:	b29b      	uxth	r3, r3
 8003f24:	3b01      	subs	r3, #1
 8003f26:	b299      	uxth	r1, r3
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	225e      	movs	r2, #94	; 0x5e
 8003f2c:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	225e      	movs	r2, #94	; 0x5e
 8003f32:	5a9b      	ldrh	r3, [r3, r2]
 8003f34:	b29b      	uxth	r3, r3
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d000      	beq.n	8003f3c <UART_RxISR_8BIT+0x6c>
 8003f3a:	e0a1      	b.n	8004080 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f3c:	f3ef 8310 	mrs	r3, PRIMASK
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8003f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003f44:	64bb      	str	r3, [r7, #72]	; 0x48
 8003f46:	2301      	movs	r3, #1
 8003f48:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	f383 8810 	msr	PRIMASK, r3
}
 8003f50:	46c0      	nop			; (mov r8, r8)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	494a      	ldr	r1, [pc, #296]	; (8004088 <UART_RxISR_8BIT+0x1b8>)
 8003f5e:	400a      	ands	r2, r1
 8003f60:	601a      	str	r2, [r3, #0]
 8003f62:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003f64:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f68:	f383 8810 	msr	PRIMASK, r3
}
 8003f6c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003f6e:	f3ef 8310 	mrs	r3, PRIMASK
 8003f72:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8003f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f76:	647b      	str	r3, [r7, #68]	; 0x44
 8003f78:	2301      	movs	r3, #1
 8003f7a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003f7e:	f383 8810 	msr	PRIMASK, r3
}
 8003f82:	46c0      	nop			; (mov r8, r8)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	689a      	ldr	r2, [r3, #8]
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	2101      	movs	r1, #1
 8003f90:	438a      	bics	r2, r1
 8003f92:	609a      	str	r2, [r3, #8]
 8003f94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f96:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003f98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f9a:	f383 8810 	msr	PRIMASK, r3
}
 8003f9e:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	228c      	movs	r2, #140	; 0x8c
 8003fa4:	2120      	movs	r1, #32
 8003fa6:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2200      	movs	r2, #0
 8003fac:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2200      	movs	r2, #0
 8003fb2:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	4a34      	ldr	r2, [pc, #208]	; (800408c <UART_RxISR_8BIT+0x1bc>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d01f      	beq.n	8003ffe <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	685a      	ldr	r2, [r3, #4]
 8003fc4:	2380      	movs	r3, #128	; 0x80
 8003fc6:	041b      	lsls	r3, r3, #16
 8003fc8:	4013      	ands	r3, r2
 8003fca:	d018      	beq.n	8003ffe <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8003fcc:	f3ef 8310 	mrs	r3, PRIMASK
 8003fd0:	61bb      	str	r3, [r7, #24]
  return(result);
 8003fd2:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003fd4:	643b      	str	r3, [r7, #64]	; 0x40
 8003fd6:	2301      	movs	r3, #1
 8003fd8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	f383 8810 	msr	PRIMASK, r3
}
 8003fe0:	46c0      	nop			; (mov r8, r8)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4928      	ldr	r1, [pc, #160]	; (8004090 <UART_RxISR_8BIT+0x1c0>)
 8003fee:	400a      	ands	r2, r1
 8003ff0:	601a      	str	r2, [r3, #0]
 8003ff2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ff4:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8003ff6:	6a3b      	ldr	r3, [r7, #32]
 8003ff8:	f383 8810 	msr	PRIMASK, r3
}
 8003ffc:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004002:	2b01      	cmp	r3, #1
 8004004:	d12f      	bne.n	8004066 <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800400c:	f3ef 8310 	mrs	r3, PRIMASK
 8004010:	60fb      	str	r3, [r7, #12]
  return(result);
 8004012:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004014:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004016:	2301      	movs	r3, #1
 8004018:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800401a:	693b      	ldr	r3, [r7, #16]
 800401c:	f383 8810 	msr	PRIMASK, r3
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	681a      	ldr	r2, [r3, #0]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2110      	movs	r1, #16
 800402e:	438a      	bics	r2, r1
 8004030:	601a      	str	r2, [r3, #0]
 8004032:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004034:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004036:	697b      	ldr	r3, [r7, #20]
 8004038:	f383 8810 	msr	PRIMASK, r3
}
 800403c:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	69db      	ldr	r3, [r3, #28]
 8004044:	2210      	movs	r2, #16
 8004046:	4013      	ands	r3, r2
 8004048:	2b10      	cmp	r3, #16
 800404a:	d103      	bne.n	8004054 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2210      	movs	r2, #16
 8004052:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	225c      	movs	r2, #92	; 0x5c
 8004058:	5a9a      	ldrh	r2, [r3, r2]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0011      	movs	r1, r2
 800405e:	0018      	movs	r0, r3
 8004060:	f7fc fb66 	bl	8000730 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004064:	e00c      	b.n	8004080 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	0018      	movs	r0, r3
 800406a:	f7ff f8c7 	bl	80031fc <HAL_UART_RxCpltCallback>
}
 800406e:	e007      	b.n	8004080 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	699a      	ldr	r2, [r3, #24]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	2108      	movs	r1, #8
 800407c:	430a      	orrs	r2, r1
 800407e:	619a      	str	r2, [r3, #24]
}
 8004080:	46c0      	nop			; (mov r8, r8)
 8004082:	46bd      	mov	sp, r7
 8004084:	b014      	add	sp, #80	; 0x50
 8004086:	bd80      	pop	{r7, pc}
 8004088:	fffffedf 	.word	0xfffffedf
 800408c:	40008000 	.word	0x40008000
 8004090:	fbffffff 	.word	0xfbffffff

08004094 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b094      	sub	sp, #80	; 0x50
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800409c:	204e      	movs	r0, #78	; 0x4e
 800409e:	183b      	adds	r3, r7, r0
 80040a0:	687a      	ldr	r2, [r7, #4]
 80040a2:	2160      	movs	r1, #96	; 0x60
 80040a4:	5a52      	ldrh	r2, [r2, r1]
 80040a6:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	228c      	movs	r2, #140	; 0x8c
 80040ac:	589b      	ldr	r3, [r3, r2]
 80040ae:	2b22      	cmp	r3, #34	; 0x22
 80040b0:	d000      	beq.n	80040b4 <UART_RxISR_16BIT+0x20>
 80040b2:	e0bf      	b.n	8004234 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ba:	214c      	movs	r1, #76	; 0x4c
 80040bc:	187b      	adds	r3, r7, r1
 80040be:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c4:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 80040c6:	187b      	adds	r3, r7, r1
 80040c8:	183a      	adds	r2, r7, r0
 80040ca:	881b      	ldrh	r3, [r3, #0]
 80040cc:	8812      	ldrh	r2, [r2, #0]
 80040ce:	4013      	ands	r3, r2
 80040d0:	b29a      	uxth	r2, r3
 80040d2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80040d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040da:	1c9a      	adds	r2, r3, #2
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	225e      	movs	r2, #94	; 0x5e
 80040e4:	5a9b      	ldrh	r3, [r3, r2]
 80040e6:	b29b      	uxth	r3, r3
 80040e8:	3b01      	subs	r3, #1
 80040ea:	b299      	uxth	r1, r3
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	225e      	movs	r2, #94	; 0x5e
 80040f0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	225e      	movs	r2, #94	; 0x5e
 80040f6:	5a9b      	ldrh	r3, [r3, r2]
 80040f8:	b29b      	uxth	r3, r3
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d000      	beq.n	8004100 <UART_RxISR_16BIT+0x6c>
 80040fe:	e0a1      	b.n	8004244 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004100:	f3ef 8310 	mrs	r3, PRIMASK
 8004104:	623b      	str	r3, [r7, #32]
  return(result);
 8004106:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004108:	647b      	str	r3, [r7, #68]	; 0x44
 800410a:	2301      	movs	r3, #1
 800410c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800410e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004110:	f383 8810 	msr	PRIMASK, r3
}
 8004114:	46c0      	nop			; (mov r8, r8)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	494a      	ldr	r1, [pc, #296]	; (800424c <UART_RxISR_16BIT+0x1b8>)
 8004122:	400a      	ands	r2, r1
 8004124:	601a      	str	r2, [r3, #0]
 8004126:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004128:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800412a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800412c:	f383 8810 	msr	PRIMASK, r3
}
 8004130:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004132:	f3ef 8310 	mrs	r3, PRIMASK
 8004136:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004138:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800413a:	643b      	str	r3, [r7, #64]	; 0x40
 800413c:	2301      	movs	r3, #1
 800413e:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004142:	f383 8810 	msr	PRIMASK, r3
}
 8004146:	46c0      	nop			; (mov r8, r8)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	689a      	ldr	r2, [r3, #8]
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	2101      	movs	r1, #1
 8004154:	438a      	bics	r2, r1
 8004156:	609a      	str	r2, [r3, #8]
 8004158:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800415a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800415c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800415e:	f383 8810 	msr	PRIMASK, r3
}
 8004162:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	228c      	movs	r2, #140	; 0x8c
 8004168:	2120      	movs	r1, #32
 800416a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2200      	movs	r2, #0
 8004176:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a34      	ldr	r2, [pc, #208]	; (8004250 <UART_RxISR_16BIT+0x1bc>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d01f      	beq.n	80041c2 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	685a      	ldr	r2, [r3, #4]
 8004188:	2380      	movs	r3, #128	; 0x80
 800418a:	041b      	lsls	r3, r3, #16
 800418c:	4013      	ands	r3, r2
 800418e:	d018      	beq.n	80041c2 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004190:	f3ef 8310 	mrs	r3, PRIMASK
 8004194:	617b      	str	r3, [r7, #20]
  return(result);
 8004196:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800419a:	2301      	movs	r3, #1
 800419c:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	f383 8810 	msr	PRIMASK, r3
}
 80041a4:	46c0      	nop			; (mov r8, r8)
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681a      	ldr	r2, [r3, #0]
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	4928      	ldr	r1, [pc, #160]	; (8004254 <UART_RxISR_16BIT+0x1c0>)
 80041b2:	400a      	ands	r2, r1
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041ba:	69fb      	ldr	r3, [r7, #28]
 80041bc:	f383 8810 	msr	PRIMASK, r3
}
 80041c0:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d12f      	bne.n	800422a <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041d0:	f3ef 8310 	mrs	r3, PRIMASK
 80041d4:	60bb      	str	r3, [r7, #8]
  return(result);
 80041d6:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80041d8:	63bb      	str	r3, [r7, #56]	; 0x38
 80041da:	2301      	movs	r3, #1
 80041dc:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	f383 8810 	msr	PRIMASK, r3
}
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	681a      	ldr	r2, [r3, #0]
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	2110      	movs	r1, #16
 80041f2:	438a      	bics	r2, r1
 80041f4:	601a      	str	r2, [r3, #0]
 80041f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80041fa:	693b      	ldr	r3, [r7, #16]
 80041fc:	f383 8810 	msr	PRIMASK, r3
}
 8004200:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69db      	ldr	r3, [r3, #28]
 8004208:	2210      	movs	r2, #16
 800420a:	4013      	ands	r3, r2
 800420c:	2b10      	cmp	r3, #16
 800420e:	d103      	bne.n	8004218 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	2210      	movs	r2, #16
 8004216:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	225c      	movs	r2, #92	; 0x5c
 800421c:	5a9a      	ldrh	r2, [r3, r2]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	0011      	movs	r1, r2
 8004222:	0018      	movs	r0, r3
 8004224:	f7fc fa84 	bl	8000730 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004228:	e00c      	b.n	8004244 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	0018      	movs	r0, r3
 800422e:	f7fe ffe5 	bl	80031fc <HAL_UART_RxCpltCallback>
}
 8004232:	e007      	b.n	8004244 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	699a      	ldr	r2, [r3, #24]
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2108      	movs	r1, #8
 8004240:	430a      	orrs	r2, r1
 8004242:	619a      	str	r2, [r3, #24]
}
 8004244:	46c0      	nop			; (mov r8, r8)
 8004246:	46bd      	mov	sp, r7
 8004248:	b014      	add	sp, #80	; 0x50
 800424a:	bd80      	pop	{r7, pc}
 800424c:	fffffedf 	.word	0xfffffedf
 8004250:	40008000 	.word	0x40008000
 8004254:	fbffffff 	.word	0xfbffffff

08004258 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b0a0      	sub	sp, #128	; 0x80
 800425c:	af00      	add	r7, sp, #0
 800425e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8004260:	237a      	movs	r3, #122	; 0x7a
 8004262:	18fb      	adds	r3, r7, r3
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	2160      	movs	r1, #96	; 0x60
 8004268:	5a52      	ldrh	r2, [r2, r1]
 800426a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	69db      	ldr	r3, [r3, #28]
 8004272:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	228c      	movs	r2, #140	; 0x8c
 8004288:	589b      	ldr	r3, [r3, r2]
 800428a:	2b22      	cmp	r3, #34	; 0x22
 800428c:	d000      	beq.n	8004290 <UART_RxISR_8BIT_FIFOEN+0x38>
 800428e:	e16a      	b.n	8004566 <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8004290:	236e      	movs	r3, #110	; 0x6e
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	2168      	movs	r1, #104	; 0x68
 8004298:	5a52      	ldrh	r2, [r2, r1]
 800429a:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800429c:	e111      	b.n	80044c2 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80042a4:	216c      	movs	r1, #108	; 0x6c
 80042a6:	187b      	adds	r3, r7, r1
 80042a8:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80042aa:	187b      	adds	r3, r7, r1
 80042ac:	881b      	ldrh	r3, [r3, #0]
 80042ae:	b2da      	uxtb	r2, r3
 80042b0:	237a      	movs	r3, #122	; 0x7a
 80042b2:	18fb      	adds	r3, r7, r3
 80042b4:	881b      	ldrh	r3, [r3, #0]
 80042b6:	b2d9      	uxtb	r1, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042bc:	400a      	ands	r2, r1
 80042be:	b2d2      	uxtb	r2, r2
 80042c0:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042c6:	1c5a      	adds	r2, r3, #1
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	225e      	movs	r2, #94	; 0x5e
 80042d0:	5a9b      	ldrh	r3, [r3, r2]
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	3b01      	subs	r3, #1
 80042d6:	b299      	uxth	r1, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	225e      	movs	r2, #94	; 0x5e
 80042dc:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	69db      	ldr	r3, [r3, #28]
 80042e4:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80042e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042e8:	2207      	movs	r2, #7
 80042ea:	4013      	ands	r3, r2
 80042ec:	d049      	beq.n	8004382 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80042ee:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80042f0:	2201      	movs	r2, #1
 80042f2:	4013      	ands	r3, r2
 80042f4:	d010      	beq.n	8004318 <UART_RxISR_8BIT_FIFOEN+0xc0>
 80042f6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80042f8:	2380      	movs	r3, #128	; 0x80
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4013      	ands	r3, r2
 80042fe:	d00b      	beq.n	8004318 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	2201      	movs	r2, #1
 8004306:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2290      	movs	r2, #144	; 0x90
 800430c:	589b      	ldr	r3, [r3, r2]
 800430e:	2201      	movs	r2, #1
 8004310:	431a      	orrs	r2, r3
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2190      	movs	r1, #144	; 0x90
 8004316:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004318:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800431a:	2202      	movs	r2, #2
 800431c:	4013      	ands	r3, r2
 800431e:	d00f      	beq.n	8004340 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8004320:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004322:	2201      	movs	r2, #1
 8004324:	4013      	ands	r3, r2
 8004326:	d00b      	beq.n	8004340 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	681b      	ldr	r3, [r3, #0]
 800432c:	2202      	movs	r2, #2
 800432e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2290      	movs	r2, #144	; 0x90
 8004334:	589b      	ldr	r3, [r3, r2]
 8004336:	2204      	movs	r2, #4
 8004338:	431a      	orrs	r2, r3
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	2190      	movs	r1, #144	; 0x90
 800433e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004340:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004342:	2204      	movs	r2, #4
 8004344:	4013      	ands	r3, r2
 8004346:	d00f      	beq.n	8004368 <UART_RxISR_8BIT_FIFOEN+0x110>
 8004348:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800434a:	2201      	movs	r2, #1
 800434c:	4013      	ands	r3, r2
 800434e:	d00b      	beq.n	8004368 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	2204      	movs	r2, #4
 8004356:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2290      	movs	r2, #144	; 0x90
 800435c:	589b      	ldr	r3, [r3, r2]
 800435e:	2202      	movs	r2, #2
 8004360:	431a      	orrs	r2, r3
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2190      	movs	r1, #144	; 0x90
 8004366:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2290      	movs	r2, #144	; 0x90
 800436c:	589b      	ldr	r3, [r3, r2]
 800436e:	2b00      	cmp	r3, #0
 8004370:	d007      	beq.n	8004382 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	0018      	movs	r0, r3
 8004376:	f7fe ff49 	bl	800320c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2290      	movs	r2, #144	; 0x90
 800437e:	2100      	movs	r1, #0
 8004380:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	225e      	movs	r2, #94	; 0x5e
 8004386:	5a9b      	ldrh	r3, [r3, r2]
 8004388:	b29b      	uxth	r3, r3
 800438a:	2b00      	cmp	r3, #0
 800438c:	d000      	beq.n	8004390 <UART_RxISR_8BIT_FIFOEN+0x138>
 800438e:	e098      	b.n	80044c2 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004390:	f3ef 8310 	mrs	r3, PRIMASK
 8004394:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 8004396:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004398:	66bb      	str	r3, [r7, #104]	; 0x68
 800439a:	2301      	movs	r3, #1
 800439c:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800439e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80043a0:	f383 8810 	msr	PRIMASK, r3
}
 80043a4:	46c0      	nop			; (mov r8, r8)
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	681a      	ldr	r2, [r3, #0]
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	4973      	ldr	r1, [pc, #460]	; (8004580 <UART_RxISR_8BIT_FIFOEN+0x328>)
 80043b2:	400a      	ands	r2, r1
 80043b4:	601a      	str	r2, [r3, #0]
 80043b6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80043b8:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043bc:	f383 8810 	msr	PRIMASK, r3
}
 80043c0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80043c2:	f3ef 8310 	mrs	r3, PRIMASK
 80043c6:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 80043c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80043ca:	667b      	str	r3, [r7, #100]	; 0x64
 80043cc:	2301      	movs	r3, #1
 80043ce:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80043d2:	f383 8810 	msr	PRIMASK, r3
}
 80043d6:	46c0      	nop			; (mov r8, r8)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	689a      	ldr	r2, [r3, #8]
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	4968      	ldr	r1, [pc, #416]	; (8004584 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 80043e4:	400a      	ands	r2, r1
 80043e6:	609a      	str	r2, [r3, #8]
 80043e8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80043ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80043ec:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043ee:	f383 8810 	msr	PRIMASK, r3
}
 80043f2:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	228c      	movs	r2, #140	; 0x8c
 80043f8:	2120      	movs	r1, #32
 80043fa:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	2200      	movs	r2, #0
 8004400:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4a5e      	ldr	r2, [pc, #376]	; (8004588 <UART_RxISR_8BIT_FIFOEN+0x330>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d01f      	beq.n	8004452 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	685a      	ldr	r2, [r3, #4]
 8004418:	2380      	movs	r3, #128	; 0x80
 800441a:	041b      	lsls	r3, r3, #16
 800441c:	4013      	ands	r3, r2
 800441e:	d018      	beq.n	8004452 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004420:	f3ef 8310 	mrs	r3, PRIMASK
 8004424:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004428:	663b      	str	r3, [r7, #96]	; 0x60
 800442a:	2301      	movs	r3, #1
 800442c:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800442e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004430:	f383 8810 	msr	PRIMASK, r3
}
 8004434:	46c0      	nop			; (mov r8, r8)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	681a      	ldr	r2, [r3, #0]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	4952      	ldr	r1, [pc, #328]	; (800458c <UART_RxISR_8BIT_FIFOEN+0x334>)
 8004442:	400a      	ands	r2, r1
 8004444:	601a      	str	r2, [r3, #0]
 8004446:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004448:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800444a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800444c:	f383 8810 	msr	PRIMASK, r3
}
 8004450:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004456:	2b01      	cmp	r3, #1
 8004458:	d12f      	bne.n	80044ba <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2200      	movs	r2, #0
 800445e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004460:	f3ef 8310 	mrs	r3, PRIMASK
 8004464:	623b      	str	r3, [r7, #32]
  return(result);
 8004466:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004468:	65fb      	str	r3, [r7, #92]	; 0x5c
 800446a:	2301      	movs	r3, #1
 800446c:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800446e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004470:	f383 8810 	msr	PRIMASK, r3
}
 8004474:	46c0      	nop			; (mov r8, r8)
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	2110      	movs	r1, #16
 8004482:	438a      	bics	r2, r1
 8004484:	601a      	str	r2, [r3, #0]
 8004486:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004488:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	f383 8810 	msr	PRIMASK, r3
}
 8004490:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	69db      	ldr	r3, [r3, #28]
 8004498:	2210      	movs	r2, #16
 800449a:	4013      	ands	r3, r2
 800449c:	2b10      	cmp	r3, #16
 800449e:	d103      	bne.n	80044a8 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	2210      	movs	r2, #16
 80044a6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	225c      	movs	r2, #92	; 0x5c
 80044ac:	5a9a      	ldrh	r2, [r3, r2]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	0011      	movs	r1, r2
 80044b2:	0018      	movs	r0, r3
 80044b4:	f7fc f93c 	bl	8000730 <HAL_UARTEx_RxEventCallback>
 80044b8:	e003      	b.n	80044c2 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	0018      	movs	r0, r3
 80044be:	f7fe fe9d 	bl	80031fc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80044c2:	236e      	movs	r3, #110	; 0x6e
 80044c4:	18fb      	adds	r3, r7, r3
 80044c6:	881b      	ldrh	r3, [r3, #0]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d004      	beq.n	80044d6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80044cc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80044ce:	2220      	movs	r2, #32
 80044d0:	4013      	ands	r3, r2
 80044d2:	d000      	beq.n	80044d6 <UART_RxISR_8BIT_FIFOEN+0x27e>
 80044d4:	e6e3      	b.n	800429e <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80044d6:	205a      	movs	r0, #90	; 0x5a
 80044d8:	183b      	adds	r3, r7, r0
 80044da:	687a      	ldr	r2, [r7, #4]
 80044dc:	215e      	movs	r1, #94	; 0x5e
 80044de:	5a52      	ldrh	r2, [r2, r1]
 80044e0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80044e2:	0001      	movs	r1, r0
 80044e4:	187b      	adds	r3, r7, r1
 80044e6:	881b      	ldrh	r3, [r3, #0]
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d044      	beq.n	8004576 <UART_RxISR_8BIT_FIFOEN+0x31e>
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	2268      	movs	r2, #104	; 0x68
 80044f0:	5a9b      	ldrh	r3, [r3, r2]
 80044f2:	187a      	adds	r2, r7, r1
 80044f4:	8812      	ldrh	r2, [r2, #0]
 80044f6:	429a      	cmp	r2, r3
 80044f8:	d23d      	bcs.n	8004576 <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80044fa:	f3ef 8310 	mrs	r3, PRIMASK
 80044fe:	60bb      	str	r3, [r7, #8]
  return(result);
 8004500:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8004502:	657b      	str	r3, [r7, #84]	; 0x54
 8004504:	2301      	movs	r3, #1
 8004506:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f383 8810 	msr	PRIMASK, r3
}
 800450e:	46c0      	nop			; (mov r8, r8)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	689a      	ldr	r2, [r3, #8]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	491d      	ldr	r1, [pc, #116]	; (8004590 <UART_RxISR_8BIT_FIFOEN+0x338>)
 800451c:	400a      	ands	r2, r1
 800451e:	609a      	str	r2, [r3, #8]
 8004520:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004522:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f383 8810 	msr	PRIMASK, r3
}
 800452a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a19      	ldr	r2, [pc, #100]	; (8004594 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 8004530:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004532:	f3ef 8310 	mrs	r3, PRIMASK
 8004536:	617b      	str	r3, [r7, #20]
  return(result);
 8004538:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800453a:	653b      	str	r3, [r7, #80]	; 0x50
 800453c:	2301      	movs	r3, #1
 800453e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004540:	69bb      	ldr	r3, [r7, #24]
 8004542:	f383 8810 	msr	PRIMASK, r3
}
 8004546:	46c0      	nop			; (mov r8, r8)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	681a      	ldr	r2, [r3, #0]
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	2120      	movs	r1, #32
 8004554:	430a      	orrs	r2, r1
 8004556:	601a      	str	r2, [r3, #0]
 8004558:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800455a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800455c:	69fb      	ldr	r3, [r7, #28]
 800455e:	f383 8810 	msr	PRIMASK, r3
}
 8004562:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004564:	e007      	b.n	8004576 <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699a      	ldr	r2, [r3, #24]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2108      	movs	r1, #8
 8004572:	430a      	orrs	r2, r1
 8004574:	619a      	str	r2, [r3, #24]
}
 8004576:	46c0      	nop			; (mov r8, r8)
 8004578:	46bd      	mov	sp, r7
 800457a:	b020      	add	sp, #128	; 0x80
 800457c:	bd80      	pop	{r7, pc}
 800457e:	46c0      	nop			; (mov r8, r8)
 8004580:	fffffeff 	.word	0xfffffeff
 8004584:	effffffe 	.word	0xeffffffe
 8004588:	40008000 	.word	0x40008000
 800458c:	fbffffff 	.word	0xfbffffff
 8004590:	efffffff 	.word	0xefffffff
 8004594:	08003ed1 	.word	0x08003ed1

08004598 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b0a2      	sub	sp, #136	; 0x88
 800459c:	af00      	add	r7, sp, #0
 800459e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80045a0:	2382      	movs	r3, #130	; 0x82
 80045a2:	18fb      	adds	r3, r7, r3
 80045a4:	687a      	ldr	r2, [r7, #4]
 80045a6:	2160      	movs	r1, #96	; 0x60
 80045a8:	5a52      	ldrh	r2, [r2, r1]
 80045aa:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	69db      	ldr	r3, [r3, #28]
 80045b2:	2284      	movs	r2, #132	; 0x84
 80045b4:	18ba      	adds	r2, r7, r2
 80045b6:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	228c      	movs	r2, #140	; 0x8c
 80045cc:	589b      	ldr	r3, [r3, r2]
 80045ce:	2b22      	cmp	r3, #34	; 0x22
 80045d0:	d000      	beq.n	80045d4 <UART_RxISR_16BIT_FIFOEN+0x3c>
 80045d2:	e174      	b.n	80048be <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80045d4:	2376      	movs	r3, #118	; 0x76
 80045d6:	18fb      	adds	r3, r7, r3
 80045d8:	687a      	ldr	r2, [r7, #4]
 80045da:	2168      	movs	r1, #104	; 0x68
 80045dc:	5a52      	ldrh	r2, [r2, r1]
 80045de:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80045e0:	e119      	b.n	8004816 <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80045e8:	2174      	movs	r1, #116	; 0x74
 80045ea:	187b      	adds	r3, r7, r1
 80045ec:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80045f2:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 80045f4:	187b      	adds	r3, r7, r1
 80045f6:	2282      	movs	r2, #130	; 0x82
 80045f8:	18ba      	adds	r2, r7, r2
 80045fa:	881b      	ldrh	r3, [r3, #0]
 80045fc:	8812      	ldrh	r2, [r2, #0]
 80045fe:	4013      	ands	r3, r2
 8004600:	b29a      	uxth	r2, r3
 8004602:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004604:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800460a:	1c9a      	adds	r2, r3, #2
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	225e      	movs	r2, #94	; 0x5e
 8004614:	5a9b      	ldrh	r3, [r3, r2]
 8004616:	b29b      	uxth	r3, r3
 8004618:	3b01      	subs	r3, #1
 800461a:	b299      	uxth	r1, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	225e      	movs	r2, #94	; 0x5e
 8004620:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	69db      	ldr	r3, [r3, #28]
 8004628:	2184      	movs	r1, #132	; 0x84
 800462a:	187a      	adds	r2, r7, r1
 800462c:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800462e:	187b      	adds	r3, r7, r1
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	2207      	movs	r2, #7
 8004634:	4013      	ands	r3, r2
 8004636:	d04e      	beq.n	80046d6 <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8004638:	187b      	adds	r3, r7, r1
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	2201      	movs	r2, #1
 800463e:	4013      	ands	r3, r2
 8004640:	d010      	beq.n	8004664 <UART_RxISR_16BIT_FIFOEN+0xcc>
 8004642:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8004644:	2380      	movs	r3, #128	; 0x80
 8004646:	005b      	lsls	r3, r3, #1
 8004648:	4013      	ands	r3, r2
 800464a:	d00b      	beq.n	8004664 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2201      	movs	r2, #1
 8004652:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2290      	movs	r2, #144	; 0x90
 8004658:	589b      	ldr	r3, [r3, r2]
 800465a:	2201      	movs	r2, #1
 800465c:	431a      	orrs	r2, r3
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2190      	movs	r1, #144	; 0x90
 8004662:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004664:	2384      	movs	r3, #132	; 0x84
 8004666:	18fb      	adds	r3, r7, r3
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	2202      	movs	r2, #2
 800466c:	4013      	ands	r3, r2
 800466e:	d00f      	beq.n	8004690 <UART_RxISR_16BIT_FIFOEN+0xf8>
 8004670:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004672:	2201      	movs	r2, #1
 8004674:	4013      	ands	r3, r2
 8004676:	d00b      	beq.n	8004690 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	2202      	movs	r2, #2
 800467e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	2290      	movs	r2, #144	; 0x90
 8004684:	589b      	ldr	r3, [r3, r2]
 8004686:	2204      	movs	r2, #4
 8004688:	431a      	orrs	r2, r3
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2190      	movs	r1, #144	; 0x90
 800468e:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8004690:	2384      	movs	r3, #132	; 0x84
 8004692:	18fb      	adds	r3, r7, r3
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2204      	movs	r2, #4
 8004698:	4013      	ands	r3, r2
 800469a:	d00f      	beq.n	80046bc <UART_RxISR_16BIT_FIFOEN+0x124>
 800469c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800469e:	2201      	movs	r2, #1
 80046a0:	4013      	ands	r3, r2
 80046a2:	d00b      	beq.n	80046bc <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2204      	movs	r2, #4
 80046aa:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	2290      	movs	r2, #144	; 0x90
 80046b0:	589b      	ldr	r3, [r3, r2]
 80046b2:	2202      	movs	r2, #2
 80046b4:	431a      	orrs	r2, r3
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	2190      	movs	r1, #144	; 0x90
 80046ba:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	2290      	movs	r2, #144	; 0x90
 80046c0:	589b      	ldr	r3, [r3, r2]
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d007      	beq.n	80046d6 <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	0018      	movs	r0, r3
 80046ca:	f7fe fd9f 	bl	800320c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2290      	movs	r2, #144	; 0x90
 80046d2:	2100      	movs	r1, #0
 80046d4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	225e      	movs	r2, #94	; 0x5e
 80046da:	5a9b      	ldrh	r3, [r3, r2]
 80046dc:	b29b      	uxth	r3, r3
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d000      	beq.n	80046e4 <UART_RxISR_16BIT_FIFOEN+0x14c>
 80046e2:	e098      	b.n	8004816 <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80046e4:	f3ef 8310 	mrs	r3, PRIMASK
 80046e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 80046ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80046ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80046ee:	2301      	movs	r3, #1
 80046f0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80046f2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80046f4:	f383 8810 	msr	PRIMASK, r3
}
 80046f8:	46c0      	nop			; (mov r8, r8)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	681a      	ldr	r2, [r3, #0]
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	4974      	ldr	r1, [pc, #464]	; (80048d8 <UART_RxISR_16BIT_FIFOEN+0x340>)
 8004706:	400a      	ands	r2, r1
 8004708:	601a      	str	r2, [r3, #0]
 800470a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800470c:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800470e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004710:	f383 8810 	msr	PRIMASK, r3
}
 8004714:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004716:	f3ef 8310 	mrs	r3, PRIMASK
 800471a:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 800471c:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800471e:	66bb      	str	r3, [r7, #104]	; 0x68
 8004720:	2301      	movs	r3, #1
 8004722:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004724:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004726:	f383 8810 	msr	PRIMASK, r3
}
 800472a:	46c0      	nop			; (mov r8, r8)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	689a      	ldr	r2, [r3, #8]
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	4969      	ldr	r1, [pc, #420]	; (80048dc <UART_RxISR_16BIT_FIFOEN+0x344>)
 8004738:	400a      	ands	r2, r1
 800473a:	609a      	str	r2, [r3, #8]
 800473c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800473e:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004740:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004742:	f383 8810 	msr	PRIMASK, r3
}
 8004746:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	228c      	movs	r2, #140	; 0x8c
 800474c:	2120      	movs	r1, #32
 800474e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	2200      	movs	r2, #0
 8004754:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	4a5f      	ldr	r2, [pc, #380]	; (80048e0 <UART_RxISR_16BIT_FIFOEN+0x348>)
 8004762:	4293      	cmp	r3, r2
 8004764:	d01f      	beq.n	80047a6 <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685a      	ldr	r2, [r3, #4]
 800476c:	2380      	movs	r3, #128	; 0x80
 800476e:	041b      	lsls	r3, r3, #16
 8004770:	4013      	ands	r3, r2
 8004772:	d018      	beq.n	80047a6 <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004774:	f3ef 8310 	mrs	r3, PRIMASK
 8004778:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800477c:	667b      	str	r3, [r7, #100]	; 0x64
 800477e:	2301      	movs	r3, #1
 8004780:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004784:	f383 8810 	msr	PRIMASK, r3
}
 8004788:	46c0      	nop			; (mov r8, r8)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	681a      	ldr	r2, [r3, #0]
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	4953      	ldr	r1, [pc, #332]	; (80048e4 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 8004796:	400a      	ands	r2, r1
 8004798:	601a      	str	r2, [r3, #0]
 800479a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800479c:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800479e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047a0:	f383 8810 	msr	PRIMASK, r3
}
 80047a4:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d12f      	bne.n	800480e <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80047b4:	f3ef 8310 	mrs	r3, PRIMASK
 80047b8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047bc:	663b      	str	r3, [r7, #96]	; 0x60
 80047be:	2301      	movs	r3, #1
 80047c0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	f383 8810 	msr	PRIMASK, r3
}
 80047c8:	46c0      	nop			; (mov r8, r8)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	681a      	ldr	r2, [r3, #0]
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2110      	movs	r1, #16
 80047d6:	438a      	bics	r2, r1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047dc:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80047de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047e0:	f383 8810 	msr	PRIMASK, r3
}
 80047e4:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	681b      	ldr	r3, [r3, #0]
 80047ea:	69db      	ldr	r3, [r3, #28]
 80047ec:	2210      	movs	r2, #16
 80047ee:	4013      	ands	r3, r2
 80047f0:	2b10      	cmp	r3, #16
 80047f2:	d103      	bne.n	80047fc <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2210      	movs	r2, #16
 80047fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	225c      	movs	r2, #92	; 0x5c
 8004800:	5a9a      	ldrh	r2, [r3, r2]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	0011      	movs	r1, r2
 8004806:	0018      	movs	r0, r3
 8004808:	f7fb ff92 	bl	8000730 <HAL_UARTEx_RxEventCallback>
 800480c:	e003      	b.n	8004816 <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	0018      	movs	r0, r3
 8004812:	f7fe fcf3 	bl	80031fc <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8004816:	2376      	movs	r3, #118	; 0x76
 8004818:	18fb      	adds	r3, r7, r3
 800481a:	881b      	ldrh	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d006      	beq.n	800482e <UART_RxISR_16BIT_FIFOEN+0x296>
 8004820:	2384      	movs	r3, #132	; 0x84
 8004822:	18fb      	adds	r3, r7, r3
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	2220      	movs	r2, #32
 8004828:	4013      	ands	r3, r2
 800482a:	d000      	beq.n	800482e <UART_RxISR_16BIT_FIFOEN+0x296>
 800482c:	e6d9      	b.n	80045e2 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800482e:	205e      	movs	r0, #94	; 0x5e
 8004830:	183b      	adds	r3, r7, r0
 8004832:	687a      	ldr	r2, [r7, #4]
 8004834:	215e      	movs	r1, #94	; 0x5e
 8004836:	5a52      	ldrh	r2, [r2, r1]
 8004838:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800483a:	0001      	movs	r1, r0
 800483c:	187b      	adds	r3, r7, r1
 800483e:	881b      	ldrh	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d044      	beq.n	80048ce <UART_RxISR_16BIT_FIFOEN+0x336>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2268      	movs	r2, #104	; 0x68
 8004848:	5a9b      	ldrh	r3, [r3, r2]
 800484a:	187a      	adds	r2, r7, r1
 800484c:	8812      	ldrh	r2, [r2, #0]
 800484e:	429a      	cmp	r2, r3
 8004850:	d23d      	bcs.n	80048ce <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004852:	f3ef 8310 	mrs	r3, PRIMASK
 8004856:	60fb      	str	r3, [r7, #12]
  return(result);
 8004858:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800485a:	65bb      	str	r3, [r7, #88]	; 0x58
 800485c:	2301      	movs	r3, #1
 800485e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	f383 8810 	msr	PRIMASK, r3
}
 8004866:	46c0      	nop			; (mov r8, r8)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	689a      	ldr	r2, [r3, #8]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	491d      	ldr	r1, [pc, #116]	; (80048e8 <UART_RxISR_16BIT_FIFOEN+0x350>)
 8004874:	400a      	ands	r2, r1
 8004876:	609a      	str	r2, [r3, #8]
 8004878:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800487a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	f383 8810 	msr	PRIMASK, r3
}
 8004882:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	4a19      	ldr	r2, [pc, #100]	; (80048ec <UART_RxISR_16BIT_FIFOEN+0x354>)
 8004888:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800488a:	f3ef 8310 	mrs	r3, PRIMASK
 800488e:	61bb      	str	r3, [r7, #24]
  return(result);
 8004890:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8004892:	657b      	str	r3, [r7, #84]	; 0x54
 8004894:	2301      	movs	r3, #1
 8004896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004898:	69fb      	ldr	r3, [r7, #28]
 800489a:	f383 8810 	msr	PRIMASK, r3
}
 800489e:	46c0      	nop			; (mov r8, r8)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	681a      	ldr	r2, [r3, #0]
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2120      	movs	r1, #32
 80048ac:	430a      	orrs	r2, r1
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80048b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80048b4:	6a3b      	ldr	r3, [r7, #32]
 80048b6:	f383 8810 	msr	PRIMASK, r3
}
 80048ba:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80048bc:	e007      	b.n	80048ce <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699a      	ldr	r2, [r3, #24]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	2108      	movs	r1, #8
 80048ca:	430a      	orrs	r2, r1
 80048cc:	619a      	str	r2, [r3, #24]
}
 80048ce:	46c0      	nop			; (mov r8, r8)
 80048d0:	46bd      	mov	sp, r7
 80048d2:	b022      	add	sp, #136	; 0x88
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	46c0      	nop			; (mov r8, r8)
 80048d8:	fffffeff 	.word	0xfffffeff
 80048dc:	effffffe 	.word	0xeffffffe
 80048e0:	40008000 	.word	0x40008000
 80048e4:	fbffffff 	.word	0xfbffffff
 80048e8:	efffffff 	.word	0xefffffff
 80048ec:	08004095 	.word	0x08004095

080048f0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b082      	sub	sp, #8
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80048f8:	46c0      	nop			; (mov r8, r8)
 80048fa:	46bd      	mov	sp, r7
 80048fc:	b002      	add	sp, #8
 80048fe:	bd80      	pop	{r7, pc}

08004900 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8004908:	46c0      	nop			; (mov r8, r8)
 800490a:	46bd      	mov	sp, r7
 800490c:	b002      	add	sp, #8
 800490e:	bd80      	pop	{r7, pc}

08004910 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8004910:	b580      	push	{r7, lr}
 8004912:	b082      	sub	sp, #8
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8004918:	46c0      	nop			; (mov r8, r8)
 800491a:	46bd      	mov	sp, r7
 800491c:	b002      	add	sp, #8
 800491e:	bd80      	pop	{r7, pc}

08004920 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b084      	sub	sp, #16
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2284      	movs	r2, #132	; 0x84
 800492c:	5c9b      	ldrb	r3, [r3, r2]
 800492e:	2b01      	cmp	r3, #1
 8004930:	d101      	bne.n	8004936 <HAL_UARTEx_DisableFifoMode+0x16>
 8004932:	2302      	movs	r3, #2
 8004934:	e027      	b.n	8004986 <HAL_UARTEx_DisableFifoMode+0x66>
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	2284      	movs	r2, #132	; 0x84
 800493a:	2101      	movs	r1, #1
 800493c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	2288      	movs	r2, #136	; 0x88
 8004942:	2124      	movs	r1, #36	; 0x24
 8004944:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	2101      	movs	r1, #1
 800495a:	438a      	bics	r2, r1
 800495c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	4a0b      	ldr	r2, [pc, #44]	; (8004990 <HAL_UARTEx_DisableFifoMode+0x70>)
 8004962:	4013      	ands	r3, r2
 8004964:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	2200      	movs	r2, #0
 800496a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	68fa      	ldr	r2, [r7, #12]
 8004972:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	2288      	movs	r2, #136	; 0x88
 8004978:	2120      	movs	r1, #32
 800497a:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2284      	movs	r2, #132	; 0x84
 8004980:	2100      	movs	r1, #0
 8004982:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004984:	2300      	movs	r3, #0
}
 8004986:	0018      	movs	r0, r3
 8004988:	46bd      	mov	sp, r7
 800498a:	b004      	add	sp, #16
 800498c:	bd80      	pop	{r7, pc}
 800498e:	46c0      	nop			; (mov r8, r8)
 8004990:	dfffffff 	.word	0xdfffffff

08004994 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b084      	sub	sp, #16
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
 800499c:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2284      	movs	r2, #132	; 0x84
 80049a2:	5c9b      	ldrb	r3, [r3, r2]
 80049a4:	2b01      	cmp	r3, #1
 80049a6:	d101      	bne.n	80049ac <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80049a8:	2302      	movs	r3, #2
 80049aa:	e02e      	b.n	8004a0a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2284      	movs	r2, #132	; 0x84
 80049b0:	2101      	movs	r1, #1
 80049b2:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2288      	movs	r2, #136	; 0x88
 80049b8:	2124      	movs	r1, #36	; 0x24
 80049ba:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	2101      	movs	r1, #1
 80049d0:	438a      	bics	r2, r1
 80049d2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	00db      	lsls	r3, r3, #3
 80049dc:	08d9      	lsrs	r1, r3, #3
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	683a      	ldr	r2, [r7, #0]
 80049e4:	430a      	orrs	r2, r1
 80049e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	0018      	movs	r0, r3
 80049ec:	f000 f8b8 	bl	8004b60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	68fa      	ldr	r2, [r7, #12]
 80049f6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2288      	movs	r2, #136	; 0x88
 80049fc:	2120      	movs	r1, #32
 80049fe:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	2284      	movs	r2, #132	; 0x84
 8004a04:	2100      	movs	r1, #0
 8004a06:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a08:	2300      	movs	r3, #0
}
 8004a0a:	0018      	movs	r0, r3
 8004a0c:	46bd      	mov	sp, r7
 8004a0e:	b004      	add	sp, #16
 8004a10:	bd80      	pop	{r7, pc}
	...

08004a14 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8004a14:	b580      	push	{r7, lr}
 8004a16:	b084      	sub	sp, #16
 8004a18:	af00      	add	r7, sp, #0
 8004a1a:	6078      	str	r0, [r7, #4]
 8004a1c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	2284      	movs	r2, #132	; 0x84
 8004a22:	5c9b      	ldrb	r3, [r3, r2]
 8004a24:	2b01      	cmp	r3, #1
 8004a26:	d101      	bne.n	8004a2c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8004a28:	2302      	movs	r3, #2
 8004a2a:	e02f      	b.n	8004a8c <HAL_UARTEx_SetRxFifoThreshold+0x78>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2284      	movs	r2, #132	; 0x84
 8004a30:	2101      	movs	r1, #1
 8004a32:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	2288      	movs	r2, #136	; 0x88
 8004a38:	2124      	movs	r1, #36	; 0x24
 8004a3a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	681a      	ldr	r2, [r3, #0]
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2101      	movs	r1, #1
 8004a50:	438a      	bics	r2, r1
 8004a52:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	689b      	ldr	r3, [r3, #8]
 8004a5a:	4a0e      	ldr	r2, [pc, #56]	; (8004a94 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	0019      	movs	r1, r3
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	683a      	ldr	r2, [r7, #0]
 8004a66:	430a      	orrs	r2, r1
 8004a68:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	0018      	movs	r0, r3
 8004a6e:	f000 f877 	bl	8004b60 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68fa      	ldr	r2, [r7, #12]
 8004a78:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	2288      	movs	r2, #136	; 0x88
 8004a7e:	2120      	movs	r1, #32
 8004a80:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	2284      	movs	r2, #132	; 0x84
 8004a86:	2100      	movs	r1, #0
 8004a88:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004a8a:	2300      	movs	r3, #0
}
 8004a8c:	0018      	movs	r0, r3
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	b004      	add	sp, #16
 8004a92:	bd80      	pop	{r7, pc}
 8004a94:	f1ffffff 	.word	0xf1ffffff

08004a98 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b08a      	sub	sp, #40	; 0x28
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	60f8      	str	r0, [r7, #12]
 8004aa0:	60b9      	str	r1, [r7, #8]
 8004aa2:	1dbb      	adds	r3, r7, #6
 8004aa4:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004aa6:	2327      	movs	r3, #39	; 0x27
 8004aa8:	18fb      	adds	r3, r7, r3
 8004aaa:	2200      	movs	r2, #0
 8004aac:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	228c      	movs	r2, #140	; 0x8c
 8004ab2:	589b      	ldr	r3, [r3, r2]
 8004ab4:	2b20      	cmp	r3, #32
 8004ab6:	d14e      	bne.n	8004b56 <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8004ab8:	68bb      	ldr	r3, [r7, #8]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d003      	beq.n	8004ac6 <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 8004abe:	1dbb      	adds	r3, r7, #6
 8004ac0:	881b      	ldrh	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d101      	bne.n	8004aca <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	e046      	b.n	8004b58 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	689a      	ldr	r2, [r3, #8]
 8004ace:	2380      	movs	r3, #128	; 0x80
 8004ad0:	015b      	lsls	r3, r3, #5
 8004ad2:	429a      	cmp	r2, r3
 8004ad4:	d109      	bne.n	8004aea <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d105      	bne.n	8004aea <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8004ade:	68bb      	ldr	r3, [r7, #8]
 8004ae0:	2201      	movs	r2, #1
 8004ae2:	4013      	ands	r3, r2
 8004ae4:	d001      	beq.n	8004aea <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	e036      	b.n	8004b58 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	2201      	movs	r2, #1
 8004aee:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	2200      	movs	r2, #0
 8004af4:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8004af6:	1dbb      	adds	r3, r7, #6
 8004af8:	881a      	ldrh	r2, [r3, #0]
 8004afa:	68b9      	ldr	r1, [r7, #8]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	0018      	movs	r0, r3
 8004b00:	f7ff f818 	bl	8003b34 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b08:	2b01      	cmp	r3, #1
 8004b0a:	d11c      	bne.n	8004b46 <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	2210      	movs	r2, #16
 8004b12:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004b14:	f3ef 8310 	mrs	r3, PRIMASK
 8004b18:	617b      	str	r3, [r7, #20]
  return(result);
 8004b1a:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b1c:	623b      	str	r3, [r7, #32]
 8004b1e:	2301      	movs	r3, #1
 8004b20:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b22:	69bb      	ldr	r3, [r7, #24]
 8004b24:	f383 8810 	msr	PRIMASK, r3
}
 8004b28:	46c0      	nop			; (mov r8, r8)
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	681a      	ldr	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	2110      	movs	r1, #16
 8004b36:	430a      	orrs	r2, r1
 8004b38:	601a      	str	r2, [r3, #0]
 8004b3a:	6a3b      	ldr	r3, [r7, #32]
 8004b3c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004b3e:	69fb      	ldr	r3, [r7, #28]
 8004b40:	f383 8810 	msr	PRIMASK, r3
}
 8004b44:	e003      	b.n	8004b4e <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8004b46:	2327      	movs	r3, #39	; 0x27
 8004b48:	18fb      	adds	r3, r7, r3
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8004b4e:	2327      	movs	r3, #39	; 0x27
 8004b50:	18fb      	adds	r3, r7, r3
 8004b52:	781b      	ldrb	r3, [r3, #0]
 8004b54:	e000      	b.n	8004b58 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8004b56:	2302      	movs	r3, #2
  }
}
 8004b58:	0018      	movs	r0, r3
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	b00a      	add	sp, #40	; 0x28
 8004b5e:	bd80      	pop	{r7, pc}

08004b60 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8004b60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d108      	bne.n	8004b82 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	226a      	movs	r2, #106	; 0x6a
 8004b74:	2101      	movs	r1, #1
 8004b76:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2268      	movs	r2, #104	; 0x68
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8004b80:	e043      	b.n	8004c0a <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8004b82:	260f      	movs	r6, #15
 8004b84:	19bb      	adds	r3, r7, r6
 8004b86:	2208      	movs	r2, #8
 8004b88:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8004b8a:	200e      	movs	r0, #14
 8004b8c:	183b      	adds	r3, r7, r0
 8004b8e:	2208      	movs	r2, #8
 8004b90:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	0e5b      	lsrs	r3, r3, #25
 8004b9a:	b2da      	uxtb	r2, r3
 8004b9c:	240d      	movs	r4, #13
 8004b9e:	193b      	adds	r3, r7, r4
 8004ba0:	2107      	movs	r1, #7
 8004ba2:	400a      	ands	r2, r1
 8004ba4:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	689b      	ldr	r3, [r3, #8]
 8004bac:	0f5b      	lsrs	r3, r3, #29
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	250c      	movs	r5, #12
 8004bb2:	197b      	adds	r3, r7, r5
 8004bb4:	2107      	movs	r1, #7
 8004bb6:	400a      	ands	r2, r1
 8004bb8:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bba:	183b      	adds	r3, r7, r0
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	197a      	adds	r2, r7, r5
 8004bc0:	7812      	ldrb	r2, [r2, #0]
 8004bc2:	4914      	ldr	r1, [pc, #80]	; (8004c14 <UARTEx_SetNbDataToProcess+0xb4>)
 8004bc4:	5c8a      	ldrb	r2, [r1, r2]
 8004bc6:	435a      	muls	r2, r3
 8004bc8:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8004bca:	197b      	adds	r3, r7, r5
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	4a12      	ldr	r2, [pc, #72]	; (8004c18 <UARTEx_SetNbDataToProcess+0xb8>)
 8004bd0:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8004bd2:	0019      	movs	r1, r3
 8004bd4:	f7fb fb22 	bl	800021c <__divsi3>
 8004bd8:	0003      	movs	r3, r0
 8004bda:	b299      	uxth	r1, r3
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	226a      	movs	r2, #106	; 0x6a
 8004be0:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004be2:	19bb      	adds	r3, r7, r6
 8004be4:	781b      	ldrb	r3, [r3, #0]
 8004be6:	193a      	adds	r2, r7, r4
 8004be8:	7812      	ldrb	r2, [r2, #0]
 8004bea:	490a      	ldr	r1, [pc, #40]	; (8004c14 <UARTEx_SetNbDataToProcess+0xb4>)
 8004bec:	5c8a      	ldrb	r2, [r1, r2]
 8004bee:	435a      	muls	r2, r3
 8004bf0:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8004bf2:	193b      	adds	r3, r7, r4
 8004bf4:	781b      	ldrb	r3, [r3, #0]
 8004bf6:	4a08      	ldr	r2, [pc, #32]	; (8004c18 <UARTEx_SetNbDataToProcess+0xb8>)
 8004bf8:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8004bfa:	0019      	movs	r1, r3
 8004bfc:	f7fb fb0e 	bl	800021c <__divsi3>
 8004c00:	0003      	movs	r3, r0
 8004c02:	b299      	uxth	r1, r3
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	2268      	movs	r2, #104	; 0x68
 8004c08:	5299      	strh	r1, [r3, r2]
}
 8004c0a:	46c0      	nop			; (mov r8, r8)
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	b005      	add	sp, #20
 8004c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c12:	46c0      	nop			; (mov r8, r8)
 8004c14:	08004d7c 	.word	0x08004d7c
 8004c18:	08004d84 	.word	0x08004d84

08004c1c <memset>:
 8004c1c:	0003      	movs	r3, r0
 8004c1e:	1882      	adds	r2, r0, r2
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d100      	bne.n	8004c26 <memset+0xa>
 8004c24:	4770      	bx	lr
 8004c26:	7019      	strb	r1, [r3, #0]
 8004c28:	3301      	adds	r3, #1
 8004c2a:	e7f9      	b.n	8004c20 <memset+0x4>

08004c2c <__libc_init_array>:
 8004c2c:	b570      	push	{r4, r5, r6, lr}
 8004c2e:	2600      	movs	r6, #0
 8004c30:	4c0c      	ldr	r4, [pc, #48]	; (8004c64 <__libc_init_array+0x38>)
 8004c32:	4d0d      	ldr	r5, [pc, #52]	; (8004c68 <__libc_init_array+0x3c>)
 8004c34:	1b64      	subs	r4, r4, r5
 8004c36:	10a4      	asrs	r4, r4, #2
 8004c38:	42a6      	cmp	r6, r4
 8004c3a:	d109      	bne.n	8004c50 <__libc_init_array+0x24>
 8004c3c:	2600      	movs	r6, #0
 8004c3e:	f000 f823 	bl	8004c88 <_init>
 8004c42:	4c0a      	ldr	r4, [pc, #40]	; (8004c6c <__libc_init_array+0x40>)
 8004c44:	4d0a      	ldr	r5, [pc, #40]	; (8004c70 <__libc_init_array+0x44>)
 8004c46:	1b64      	subs	r4, r4, r5
 8004c48:	10a4      	asrs	r4, r4, #2
 8004c4a:	42a6      	cmp	r6, r4
 8004c4c:	d105      	bne.n	8004c5a <__libc_init_array+0x2e>
 8004c4e:	bd70      	pop	{r4, r5, r6, pc}
 8004c50:	00b3      	lsls	r3, r6, #2
 8004c52:	58eb      	ldr	r3, [r5, r3]
 8004c54:	4798      	blx	r3
 8004c56:	3601      	adds	r6, #1
 8004c58:	e7ee      	b.n	8004c38 <__libc_init_array+0xc>
 8004c5a:	00b3      	lsls	r3, r6, #2
 8004c5c:	58eb      	ldr	r3, [r5, r3]
 8004c5e:	4798      	blx	r3
 8004c60:	3601      	adds	r6, #1
 8004c62:	e7f2      	b.n	8004c4a <__libc_init_array+0x1e>
 8004c64:	08004d94 	.word	0x08004d94
 8004c68:	08004d94 	.word	0x08004d94
 8004c6c:	08004d98 	.word	0x08004d98
 8004c70:	08004d94 	.word	0x08004d94

08004c74 <memcpy>:
 8004c74:	2300      	movs	r3, #0
 8004c76:	b510      	push	{r4, lr}
 8004c78:	429a      	cmp	r2, r3
 8004c7a:	d100      	bne.n	8004c7e <memcpy+0xa>
 8004c7c:	bd10      	pop	{r4, pc}
 8004c7e:	5ccc      	ldrb	r4, [r1, r3]
 8004c80:	54c4      	strb	r4, [r0, r3]
 8004c82:	3301      	adds	r3, #1
 8004c84:	e7f8      	b.n	8004c78 <memcpy+0x4>
	...

08004c88 <_init>:
 8004c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c8a:	46c0      	nop			; (mov r8, r8)
 8004c8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c8e:	bc08      	pop	{r3}
 8004c90:	469e      	mov	lr, r3
 8004c92:	4770      	bx	lr

08004c94 <_fini>:
 8004c94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c96:	46c0      	nop			; (mov r8, r8)
 8004c98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004c9a:	bc08      	pop	{r3}
 8004c9c:	469e      	mov	lr, r3
 8004c9e:	4770      	bx	lr

08004ca0 <__FLASH_Program_Fast_veneer>:
 8004ca0:	b401      	push	{r0}
 8004ca2:	4802      	ldr	r0, [pc, #8]	; (8004cac <__FLASH_Program_Fast_veneer+0xc>)
 8004ca4:	4684      	mov	ip, r0
 8004ca6:	bc01      	pop	{r0}
 8004ca8:	4760      	bx	ip
 8004caa:	bf00      	nop
 8004cac:	2000000d 	.word	0x2000000d

Disassembly of section .data:

20000000 <SystemCoreClock>:
20000000:	00f42400                                .$..

20000004 <uwTickPrio>:
20000004:	00000004                                ....

20000008 <uwTickFreq>:
20000008:	00000001                                ....

2000000c <FLASH_Program_Fast>:
  * @param  Address Specifies the address to be programmed.
  * @param  DataAddress Specifies the address where the data are stored.
  * @retval None
  */
static __RAM_FUNC void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
2000000c:	b580      	push	{r7, lr}
2000000e:	b088      	sub	sp, #32
20000010:	af00      	add	r7, sp, #0
20000012:	6078      	str	r0, [r7, #4]
20000014:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
20000016:	231f      	movs	r3, #31
20000018:	18fb      	adds	r3, r7, r3
2000001a:	2200      	movs	r2, #0
2000001c:	701a      	strb	r2, [r3, #0]
  uint32_t dest = Address;
2000001e:	687b      	ldr	r3, [r7, #4]
20000020:	61bb      	str	r3, [r7, #24]
  uint32_t src = DataAddress;
20000022:	683b      	ldr	r3, [r7, #0]
20000024:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
20000026:	4b1a      	ldr	r3, [pc, #104]	; (20000090 <FLASH_Program_Fast+0x84>)
20000028:	695a      	ldr	r2, [r3, #20]
2000002a:	4b19      	ldr	r3, [pc, #100]	; (20000090 <FLASH_Program_Fast+0x84>)
2000002c:	2180      	movs	r1, #128	; 0x80
2000002e:	02c9      	lsls	r1, r1, #11
20000030:	430a      	orrs	r2, r1
20000032:	615a      	str	r2, [r3, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
20000034:	f3ef 8310 	mrs	r3, PRIMASK
20000038:	60fb      	str	r3, [r7, #12]
  return(result);
2000003a:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: row programming should not be longer than 7 ms */
  primask_bit = __get_PRIMASK();
2000003c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
2000003e:	b672      	cpsid	i
}
20000040:	46c0      	nop			; (mov r8, r8)
  __disable_irq();

  /* Fast Program : 64 words */
  while (index < 64U)
20000042:	e00f      	b.n	20000064 <FLASH_Program_Fast+0x58>
  {
    *(uint32_t *)dest = *(uint32_t *)src;
20000044:	697a      	ldr	r2, [r7, #20]
20000046:	69bb      	ldr	r3, [r7, #24]
20000048:	6812      	ldr	r2, [r2, #0]
2000004a:	601a      	str	r2, [r3, #0]
    src += 4U;
2000004c:	697b      	ldr	r3, [r7, #20]
2000004e:	3304      	adds	r3, #4
20000050:	617b      	str	r3, [r7, #20]
    dest += 4U;
20000052:	69bb      	ldr	r3, [r7, #24]
20000054:	3304      	adds	r3, #4
20000056:	61bb      	str	r3, [r7, #24]
    index++;
20000058:	211f      	movs	r1, #31
2000005a:	187b      	adds	r3, r7, r1
2000005c:	781a      	ldrb	r2, [r3, #0]
2000005e:	187b      	adds	r3, r7, r1
20000060:	3201      	adds	r2, #1
20000062:	701a      	strb	r2, [r3, #0]
  while (index < 64U)
20000064:	231f      	movs	r3, #31
20000066:	18fb      	adds	r3, r7, r3
20000068:	781b      	ldrb	r3, [r3, #0]
2000006a:	2b3f      	cmp	r3, #63	; 0x3f
2000006c:	d9ea      	bls.n	20000044 <FLASH_Program_Fast+0x38>
     be anyway done later */

#if defined(FLASH_DBANK_SUPPORT)
  while ((FLASH->SR & (FLASH_SR_BSY1 | FLASH_SR_BSY2)) != 0x00U)
#else
  while ((FLASH->SR & FLASH_SR_BSY1) != 0x00U)
2000006e:	46c0      	nop			; (mov r8, r8)
20000070:	4b07      	ldr	r3, [pc, #28]	; (20000090 <FLASH_Program_Fast+0x84>)
20000072:	691a      	ldr	r2, [r3, #16]
20000074:	2380      	movs	r3, #128	; 0x80
20000076:	025b      	lsls	r3, r3, #9
20000078:	4013      	ands	r3, r2
2000007a:	d1f9      	bne.n	20000070 <FLASH_Program_Fast+0x64>
2000007c:	693b      	ldr	r3, [r7, #16]
2000007e:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
20000080:	68bb      	ldr	r3, [r7, #8]
20000082:	f383 8810 	msr	PRIMASK, r3
}
20000086:	46c0      	nop			; (mov r8, r8)
  {
  }

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
20000088:	46c0      	nop			; (mov r8, r8)
2000008a:	46bd      	mov	sp, r7
2000008c:	b008      	add	sp, #32
2000008e:	bd80      	pop	{r7, pc}
20000090:	40022000 	.word	0x40022000
