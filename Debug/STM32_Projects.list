
STM32_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000108c0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f08  08010980  08010980  00020980  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011888  08011888  000301e4  2**0
                  CONTENTS
  4 .ARM          00000008  08011888  08011888  00021888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011890  08011890  000301e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011890  08011890  00021890  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011894  08011894  00021894  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08011898  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003afc  200001e8  08011a7c  000301e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000754  20003ce4  08011a7c  00033ce4  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000301e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0003020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001d1f5  00000000  00000000  0003024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000045aa  00000000  00000000  0004d444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001ac0  00000000  00000000  000519f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000150e  00000000  00000000  000534b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001cf69  00000000  00000000  000549be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f0d5  00000000  00000000  00071927  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000af235  00000000  00000000  000909fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00007720  00000000  00000000  0013fc34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  00147354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08010968 	.word	0x08010968

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	08010968 	.word	0x08010968

08000108 <strcmp>:
 8000108:	7802      	ldrb	r2, [r0, #0]
 800010a:	780b      	ldrb	r3, [r1, #0]
 800010c:	2a00      	cmp	r2, #0
 800010e:	d003      	beq.n	8000118 <strcmp+0x10>
 8000110:	3001      	adds	r0, #1
 8000112:	3101      	adds	r1, #1
 8000114:	429a      	cmp	r2, r3
 8000116:	d0f7      	beq.n	8000108 <strcmp>
 8000118:	1ad0      	subs	r0, r2, r3
 800011a:	4770      	bx	lr

0800011c <strlen>:
 800011c:	2300      	movs	r3, #0
 800011e:	5cc2      	ldrb	r2, [r0, r3]
 8000120:	3301      	adds	r3, #1
 8000122:	2a00      	cmp	r2, #0
 8000124:	d1fb      	bne.n	800011e <strlen+0x2>
 8000126:	1e58      	subs	r0, r3, #1
 8000128:	4770      	bx	lr
	...

0800012c <__gnu_thumb1_case_uqi>:
 800012c:	b402      	push	{r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0049      	lsls	r1, r1, #1
 8000134:	5c09      	ldrb	r1, [r1, r0]
 8000136:	0049      	lsls	r1, r1, #1
 8000138:	448e      	add	lr, r1
 800013a:	bc02      	pop	{r1}
 800013c:	4770      	bx	lr
 800013e:	46c0      	nop			; (mov r8, r8)

08000140 <__gnu_thumb1_case_shi>:
 8000140:	b403      	push	{r0, r1}
 8000142:	4671      	mov	r1, lr
 8000144:	0849      	lsrs	r1, r1, #1
 8000146:	0040      	lsls	r0, r0, #1
 8000148:	0049      	lsls	r1, r1, #1
 800014a:	5e09      	ldrsh	r1, [r1, r0]
 800014c:	0049      	lsls	r1, r1, #1
 800014e:	448e      	add	lr, r1
 8000150:	bc03      	pop	{r0, r1}
 8000152:	4770      	bx	lr

08000154 <__udivsi3>:
 8000154:	2200      	movs	r2, #0
 8000156:	0843      	lsrs	r3, r0, #1
 8000158:	428b      	cmp	r3, r1
 800015a:	d374      	bcc.n	8000246 <__udivsi3+0xf2>
 800015c:	0903      	lsrs	r3, r0, #4
 800015e:	428b      	cmp	r3, r1
 8000160:	d35f      	bcc.n	8000222 <__udivsi3+0xce>
 8000162:	0a03      	lsrs	r3, r0, #8
 8000164:	428b      	cmp	r3, r1
 8000166:	d344      	bcc.n	80001f2 <__udivsi3+0x9e>
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d328      	bcc.n	80001c0 <__udivsi3+0x6c>
 800016e:	0c03      	lsrs	r3, r0, #16
 8000170:	428b      	cmp	r3, r1
 8000172:	d30d      	bcc.n	8000190 <__udivsi3+0x3c>
 8000174:	22ff      	movs	r2, #255	; 0xff
 8000176:	0209      	lsls	r1, r1, #8
 8000178:	ba12      	rev	r2, r2
 800017a:	0c03      	lsrs	r3, r0, #16
 800017c:	428b      	cmp	r3, r1
 800017e:	d302      	bcc.n	8000186 <__udivsi3+0x32>
 8000180:	1212      	asrs	r2, r2, #8
 8000182:	0209      	lsls	r1, r1, #8
 8000184:	d065      	beq.n	8000252 <__udivsi3+0xfe>
 8000186:	0b03      	lsrs	r3, r0, #12
 8000188:	428b      	cmp	r3, r1
 800018a:	d319      	bcc.n	80001c0 <__udivsi3+0x6c>
 800018c:	e000      	b.n	8000190 <__udivsi3+0x3c>
 800018e:	0a09      	lsrs	r1, r1, #8
 8000190:	0bc3      	lsrs	r3, r0, #15
 8000192:	428b      	cmp	r3, r1
 8000194:	d301      	bcc.n	800019a <__udivsi3+0x46>
 8000196:	03cb      	lsls	r3, r1, #15
 8000198:	1ac0      	subs	r0, r0, r3
 800019a:	4152      	adcs	r2, r2
 800019c:	0b83      	lsrs	r3, r0, #14
 800019e:	428b      	cmp	r3, r1
 80001a0:	d301      	bcc.n	80001a6 <__udivsi3+0x52>
 80001a2:	038b      	lsls	r3, r1, #14
 80001a4:	1ac0      	subs	r0, r0, r3
 80001a6:	4152      	adcs	r2, r2
 80001a8:	0b43      	lsrs	r3, r0, #13
 80001aa:	428b      	cmp	r3, r1
 80001ac:	d301      	bcc.n	80001b2 <__udivsi3+0x5e>
 80001ae:	034b      	lsls	r3, r1, #13
 80001b0:	1ac0      	subs	r0, r0, r3
 80001b2:	4152      	adcs	r2, r2
 80001b4:	0b03      	lsrs	r3, r0, #12
 80001b6:	428b      	cmp	r3, r1
 80001b8:	d301      	bcc.n	80001be <__udivsi3+0x6a>
 80001ba:	030b      	lsls	r3, r1, #12
 80001bc:	1ac0      	subs	r0, r0, r3
 80001be:	4152      	adcs	r2, r2
 80001c0:	0ac3      	lsrs	r3, r0, #11
 80001c2:	428b      	cmp	r3, r1
 80001c4:	d301      	bcc.n	80001ca <__udivsi3+0x76>
 80001c6:	02cb      	lsls	r3, r1, #11
 80001c8:	1ac0      	subs	r0, r0, r3
 80001ca:	4152      	adcs	r2, r2
 80001cc:	0a83      	lsrs	r3, r0, #10
 80001ce:	428b      	cmp	r3, r1
 80001d0:	d301      	bcc.n	80001d6 <__udivsi3+0x82>
 80001d2:	028b      	lsls	r3, r1, #10
 80001d4:	1ac0      	subs	r0, r0, r3
 80001d6:	4152      	adcs	r2, r2
 80001d8:	0a43      	lsrs	r3, r0, #9
 80001da:	428b      	cmp	r3, r1
 80001dc:	d301      	bcc.n	80001e2 <__udivsi3+0x8e>
 80001de:	024b      	lsls	r3, r1, #9
 80001e0:	1ac0      	subs	r0, r0, r3
 80001e2:	4152      	adcs	r2, r2
 80001e4:	0a03      	lsrs	r3, r0, #8
 80001e6:	428b      	cmp	r3, r1
 80001e8:	d301      	bcc.n	80001ee <__udivsi3+0x9a>
 80001ea:	020b      	lsls	r3, r1, #8
 80001ec:	1ac0      	subs	r0, r0, r3
 80001ee:	4152      	adcs	r2, r2
 80001f0:	d2cd      	bcs.n	800018e <__udivsi3+0x3a>
 80001f2:	09c3      	lsrs	r3, r0, #7
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d301      	bcc.n	80001fc <__udivsi3+0xa8>
 80001f8:	01cb      	lsls	r3, r1, #7
 80001fa:	1ac0      	subs	r0, r0, r3
 80001fc:	4152      	adcs	r2, r2
 80001fe:	0983      	lsrs	r3, r0, #6
 8000200:	428b      	cmp	r3, r1
 8000202:	d301      	bcc.n	8000208 <__udivsi3+0xb4>
 8000204:	018b      	lsls	r3, r1, #6
 8000206:	1ac0      	subs	r0, r0, r3
 8000208:	4152      	adcs	r2, r2
 800020a:	0943      	lsrs	r3, r0, #5
 800020c:	428b      	cmp	r3, r1
 800020e:	d301      	bcc.n	8000214 <__udivsi3+0xc0>
 8000210:	014b      	lsls	r3, r1, #5
 8000212:	1ac0      	subs	r0, r0, r3
 8000214:	4152      	adcs	r2, r2
 8000216:	0903      	lsrs	r3, r0, #4
 8000218:	428b      	cmp	r3, r1
 800021a:	d301      	bcc.n	8000220 <__udivsi3+0xcc>
 800021c:	010b      	lsls	r3, r1, #4
 800021e:	1ac0      	subs	r0, r0, r3
 8000220:	4152      	adcs	r2, r2
 8000222:	08c3      	lsrs	r3, r0, #3
 8000224:	428b      	cmp	r3, r1
 8000226:	d301      	bcc.n	800022c <__udivsi3+0xd8>
 8000228:	00cb      	lsls	r3, r1, #3
 800022a:	1ac0      	subs	r0, r0, r3
 800022c:	4152      	adcs	r2, r2
 800022e:	0883      	lsrs	r3, r0, #2
 8000230:	428b      	cmp	r3, r1
 8000232:	d301      	bcc.n	8000238 <__udivsi3+0xe4>
 8000234:	008b      	lsls	r3, r1, #2
 8000236:	1ac0      	subs	r0, r0, r3
 8000238:	4152      	adcs	r2, r2
 800023a:	0843      	lsrs	r3, r0, #1
 800023c:	428b      	cmp	r3, r1
 800023e:	d301      	bcc.n	8000244 <__udivsi3+0xf0>
 8000240:	004b      	lsls	r3, r1, #1
 8000242:	1ac0      	subs	r0, r0, r3
 8000244:	4152      	adcs	r2, r2
 8000246:	1a41      	subs	r1, r0, r1
 8000248:	d200      	bcs.n	800024c <__udivsi3+0xf8>
 800024a:	4601      	mov	r1, r0
 800024c:	4152      	adcs	r2, r2
 800024e:	4610      	mov	r0, r2
 8000250:	4770      	bx	lr
 8000252:	e7ff      	b.n	8000254 <__udivsi3+0x100>
 8000254:	b501      	push	{r0, lr}
 8000256:	2000      	movs	r0, #0
 8000258:	f000 f8f0 	bl	800043c <__aeabi_idiv0>
 800025c:	bd02      	pop	{r1, pc}
 800025e:	46c0      	nop			; (mov r8, r8)

08000260 <__aeabi_uidivmod>:
 8000260:	2900      	cmp	r1, #0
 8000262:	d0f7      	beq.n	8000254 <__udivsi3+0x100>
 8000264:	e776      	b.n	8000154 <__udivsi3>
 8000266:	4770      	bx	lr

08000268 <__divsi3>:
 8000268:	4603      	mov	r3, r0
 800026a:	430b      	orrs	r3, r1
 800026c:	d47f      	bmi.n	800036e <__divsi3+0x106>
 800026e:	2200      	movs	r2, #0
 8000270:	0843      	lsrs	r3, r0, #1
 8000272:	428b      	cmp	r3, r1
 8000274:	d374      	bcc.n	8000360 <__divsi3+0xf8>
 8000276:	0903      	lsrs	r3, r0, #4
 8000278:	428b      	cmp	r3, r1
 800027a:	d35f      	bcc.n	800033c <__divsi3+0xd4>
 800027c:	0a03      	lsrs	r3, r0, #8
 800027e:	428b      	cmp	r3, r1
 8000280:	d344      	bcc.n	800030c <__divsi3+0xa4>
 8000282:	0b03      	lsrs	r3, r0, #12
 8000284:	428b      	cmp	r3, r1
 8000286:	d328      	bcc.n	80002da <__divsi3+0x72>
 8000288:	0c03      	lsrs	r3, r0, #16
 800028a:	428b      	cmp	r3, r1
 800028c:	d30d      	bcc.n	80002aa <__divsi3+0x42>
 800028e:	22ff      	movs	r2, #255	; 0xff
 8000290:	0209      	lsls	r1, r1, #8
 8000292:	ba12      	rev	r2, r2
 8000294:	0c03      	lsrs	r3, r0, #16
 8000296:	428b      	cmp	r3, r1
 8000298:	d302      	bcc.n	80002a0 <__divsi3+0x38>
 800029a:	1212      	asrs	r2, r2, #8
 800029c:	0209      	lsls	r1, r1, #8
 800029e:	d065      	beq.n	800036c <__divsi3+0x104>
 80002a0:	0b03      	lsrs	r3, r0, #12
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d319      	bcc.n	80002da <__divsi3+0x72>
 80002a6:	e000      	b.n	80002aa <__divsi3+0x42>
 80002a8:	0a09      	lsrs	r1, r1, #8
 80002aa:	0bc3      	lsrs	r3, r0, #15
 80002ac:	428b      	cmp	r3, r1
 80002ae:	d301      	bcc.n	80002b4 <__divsi3+0x4c>
 80002b0:	03cb      	lsls	r3, r1, #15
 80002b2:	1ac0      	subs	r0, r0, r3
 80002b4:	4152      	adcs	r2, r2
 80002b6:	0b83      	lsrs	r3, r0, #14
 80002b8:	428b      	cmp	r3, r1
 80002ba:	d301      	bcc.n	80002c0 <__divsi3+0x58>
 80002bc:	038b      	lsls	r3, r1, #14
 80002be:	1ac0      	subs	r0, r0, r3
 80002c0:	4152      	adcs	r2, r2
 80002c2:	0b43      	lsrs	r3, r0, #13
 80002c4:	428b      	cmp	r3, r1
 80002c6:	d301      	bcc.n	80002cc <__divsi3+0x64>
 80002c8:	034b      	lsls	r3, r1, #13
 80002ca:	1ac0      	subs	r0, r0, r3
 80002cc:	4152      	adcs	r2, r2
 80002ce:	0b03      	lsrs	r3, r0, #12
 80002d0:	428b      	cmp	r3, r1
 80002d2:	d301      	bcc.n	80002d8 <__divsi3+0x70>
 80002d4:	030b      	lsls	r3, r1, #12
 80002d6:	1ac0      	subs	r0, r0, r3
 80002d8:	4152      	adcs	r2, r2
 80002da:	0ac3      	lsrs	r3, r0, #11
 80002dc:	428b      	cmp	r3, r1
 80002de:	d301      	bcc.n	80002e4 <__divsi3+0x7c>
 80002e0:	02cb      	lsls	r3, r1, #11
 80002e2:	1ac0      	subs	r0, r0, r3
 80002e4:	4152      	adcs	r2, r2
 80002e6:	0a83      	lsrs	r3, r0, #10
 80002e8:	428b      	cmp	r3, r1
 80002ea:	d301      	bcc.n	80002f0 <__divsi3+0x88>
 80002ec:	028b      	lsls	r3, r1, #10
 80002ee:	1ac0      	subs	r0, r0, r3
 80002f0:	4152      	adcs	r2, r2
 80002f2:	0a43      	lsrs	r3, r0, #9
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d301      	bcc.n	80002fc <__divsi3+0x94>
 80002f8:	024b      	lsls	r3, r1, #9
 80002fa:	1ac0      	subs	r0, r0, r3
 80002fc:	4152      	adcs	r2, r2
 80002fe:	0a03      	lsrs	r3, r0, #8
 8000300:	428b      	cmp	r3, r1
 8000302:	d301      	bcc.n	8000308 <__divsi3+0xa0>
 8000304:	020b      	lsls	r3, r1, #8
 8000306:	1ac0      	subs	r0, r0, r3
 8000308:	4152      	adcs	r2, r2
 800030a:	d2cd      	bcs.n	80002a8 <__divsi3+0x40>
 800030c:	09c3      	lsrs	r3, r0, #7
 800030e:	428b      	cmp	r3, r1
 8000310:	d301      	bcc.n	8000316 <__divsi3+0xae>
 8000312:	01cb      	lsls	r3, r1, #7
 8000314:	1ac0      	subs	r0, r0, r3
 8000316:	4152      	adcs	r2, r2
 8000318:	0983      	lsrs	r3, r0, #6
 800031a:	428b      	cmp	r3, r1
 800031c:	d301      	bcc.n	8000322 <__divsi3+0xba>
 800031e:	018b      	lsls	r3, r1, #6
 8000320:	1ac0      	subs	r0, r0, r3
 8000322:	4152      	adcs	r2, r2
 8000324:	0943      	lsrs	r3, r0, #5
 8000326:	428b      	cmp	r3, r1
 8000328:	d301      	bcc.n	800032e <__divsi3+0xc6>
 800032a:	014b      	lsls	r3, r1, #5
 800032c:	1ac0      	subs	r0, r0, r3
 800032e:	4152      	adcs	r2, r2
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d301      	bcc.n	800033a <__divsi3+0xd2>
 8000336:	010b      	lsls	r3, r1, #4
 8000338:	1ac0      	subs	r0, r0, r3
 800033a:	4152      	adcs	r2, r2
 800033c:	08c3      	lsrs	r3, r0, #3
 800033e:	428b      	cmp	r3, r1
 8000340:	d301      	bcc.n	8000346 <__divsi3+0xde>
 8000342:	00cb      	lsls	r3, r1, #3
 8000344:	1ac0      	subs	r0, r0, r3
 8000346:	4152      	adcs	r2, r2
 8000348:	0883      	lsrs	r3, r0, #2
 800034a:	428b      	cmp	r3, r1
 800034c:	d301      	bcc.n	8000352 <__divsi3+0xea>
 800034e:	008b      	lsls	r3, r1, #2
 8000350:	1ac0      	subs	r0, r0, r3
 8000352:	4152      	adcs	r2, r2
 8000354:	0843      	lsrs	r3, r0, #1
 8000356:	428b      	cmp	r3, r1
 8000358:	d301      	bcc.n	800035e <__divsi3+0xf6>
 800035a:	004b      	lsls	r3, r1, #1
 800035c:	1ac0      	subs	r0, r0, r3
 800035e:	4152      	adcs	r2, r2
 8000360:	1a41      	subs	r1, r0, r1
 8000362:	d200      	bcs.n	8000366 <__divsi3+0xfe>
 8000364:	4601      	mov	r1, r0
 8000366:	4152      	adcs	r2, r2
 8000368:	4610      	mov	r0, r2
 800036a:	4770      	bx	lr
 800036c:	e05d      	b.n	800042a <__divsi3+0x1c2>
 800036e:	0fca      	lsrs	r2, r1, #31
 8000370:	d000      	beq.n	8000374 <__divsi3+0x10c>
 8000372:	4249      	negs	r1, r1
 8000374:	1003      	asrs	r3, r0, #32
 8000376:	d300      	bcc.n	800037a <__divsi3+0x112>
 8000378:	4240      	negs	r0, r0
 800037a:	4053      	eors	r3, r2
 800037c:	2200      	movs	r2, #0
 800037e:	469c      	mov	ip, r3
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d32d      	bcc.n	80003e2 <__divsi3+0x17a>
 8000386:	0a03      	lsrs	r3, r0, #8
 8000388:	428b      	cmp	r3, r1
 800038a:	d312      	bcc.n	80003b2 <__divsi3+0x14a>
 800038c:	22fc      	movs	r2, #252	; 0xfc
 800038e:	0189      	lsls	r1, r1, #6
 8000390:	ba12      	rev	r2, r2
 8000392:	0a03      	lsrs	r3, r0, #8
 8000394:	428b      	cmp	r3, r1
 8000396:	d30c      	bcc.n	80003b2 <__divsi3+0x14a>
 8000398:	0189      	lsls	r1, r1, #6
 800039a:	1192      	asrs	r2, r2, #6
 800039c:	428b      	cmp	r3, r1
 800039e:	d308      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a0:	0189      	lsls	r1, r1, #6
 80003a2:	1192      	asrs	r2, r2, #6
 80003a4:	428b      	cmp	r3, r1
 80003a6:	d304      	bcc.n	80003b2 <__divsi3+0x14a>
 80003a8:	0189      	lsls	r1, r1, #6
 80003aa:	d03a      	beq.n	8000422 <__divsi3+0x1ba>
 80003ac:	1192      	asrs	r2, r2, #6
 80003ae:	e000      	b.n	80003b2 <__divsi3+0x14a>
 80003b0:	0989      	lsrs	r1, r1, #6
 80003b2:	09c3      	lsrs	r3, r0, #7
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d301      	bcc.n	80003bc <__divsi3+0x154>
 80003b8:	01cb      	lsls	r3, r1, #7
 80003ba:	1ac0      	subs	r0, r0, r3
 80003bc:	4152      	adcs	r2, r2
 80003be:	0983      	lsrs	r3, r0, #6
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d301      	bcc.n	80003c8 <__divsi3+0x160>
 80003c4:	018b      	lsls	r3, r1, #6
 80003c6:	1ac0      	subs	r0, r0, r3
 80003c8:	4152      	adcs	r2, r2
 80003ca:	0943      	lsrs	r3, r0, #5
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d301      	bcc.n	80003d4 <__divsi3+0x16c>
 80003d0:	014b      	lsls	r3, r1, #5
 80003d2:	1ac0      	subs	r0, r0, r3
 80003d4:	4152      	adcs	r2, r2
 80003d6:	0903      	lsrs	r3, r0, #4
 80003d8:	428b      	cmp	r3, r1
 80003da:	d301      	bcc.n	80003e0 <__divsi3+0x178>
 80003dc:	010b      	lsls	r3, r1, #4
 80003de:	1ac0      	subs	r0, r0, r3
 80003e0:	4152      	adcs	r2, r2
 80003e2:	08c3      	lsrs	r3, r0, #3
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d301      	bcc.n	80003ec <__divsi3+0x184>
 80003e8:	00cb      	lsls	r3, r1, #3
 80003ea:	1ac0      	subs	r0, r0, r3
 80003ec:	4152      	adcs	r2, r2
 80003ee:	0883      	lsrs	r3, r0, #2
 80003f0:	428b      	cmp	r3, r1
 80003f2:	d301      	bcc.n	80003f8 <__divsi3+0x190>
 80003f4:	008b      	lsls	r3, r1, #2
 80003f6:	1ac0      	subs	r0, r0, r3
 80003f8:	4152      	adcs	r2, r2
 80003fa:	d2d9      	bcs.n	80003b0 <__divsi3+0x148>
 80003fc:	0843      	lsrs	r3, r0, #1
 80003fe:	428b      	cmp	r3, r1
 8000400:	d301      	bcc.n	8000406 <__divsi3+0x19e>
 8000402:	004b      	lsls	r3, r1, #1
 8000404:	1ac0      	subs	r0, r0, r3
 8000406:	4152      	adcs	r2, r2
 8000408:	1a41      	subs	r1, r0, r1
 800040a:	d200      	bcs.n	800040e <__divsi3+0x1a6>
 800040c:	4601      	mov	r1, r0
 800040e:	4663      	mov	r3, ip
 8000410:	4152      	adcs	r2, r2
 8000412:	105b      	asrs	r3, r3, #1
 8000414:	4610      	mov	r0, r2
 8000416:	d301      	bcc.n	800041c <__divsi3+0x1b4>
 8000418:	4240      	negs	r0, r0
 800041a:	2b00      	cmp	r3, #0
 800041c:	d500      	bpl.n	8000420 <__divsi3+0x1b8>
 800041e:	4249      	negs	r1, r1
 8000420:	4770      	bx	lr
 8000422:	4663      	mov	r3, ip
 8000424:	105b      	asrs	r3, r3, #1
 8000426:	d300      	bcc.n	800042a <__divsi3+0x1c2>
 8000428:	4240      	negs	r0, r0
 800042a:	b501      	push	{r0, lr}
 800042c:	2000      	movs	r0, #0
 800042e:	f000 f805 	bl	800043c <__aeabi_idiv0>
 8000432:	bd02      	pop	{r1, pc}

08000434 <__aeabi_idivmod>:
 8000434:	2900      	cmp	r1, #0
 8000436:	d0f8      	beq.n	800042a <__divsi3+0x1c2>
 8000438:	e716      	b.n	8000268 <__divsi3>
 800043a:	4770      	bx	lr

0800043c <__aeabi_idiv0>:
 800043c:	4770      	bx	lr
 800043e:	46c0      	nop			; (mov r8, r8)

08000440 <__aeabi_cdrcmple>:
 8000440:	4684      	mov	ip, r0
 8000442:	0010      	movs	r0, r2
 8000444:	4662      	mov	r2, ip
 8000446:	468c      	mov	ip, r1
 8000448:	0019      	movs	r1, r3
 800044a:	4663      	mov	r3, ip
 800044c:	e000      	b.n	8000450 <__aeabi_cdcmpeq>
 800044e:	46c0      	nop			; (mov r8, r8)

08000450 <__aeabi_cdcmpeq>:
 8000450:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000452:	f001 f89b 	bl	800158c <__ledf2>
 8000456:	2800      	cmp	r0, #0
 8000458:	d401      	bmi.n	800045e <__aeabi_cdcmpeq+0xe>
 800045a:	2100      	movs	r1, #0
 800045c:	42c8      	cmn	r0, r1
 800045e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000460 <__aeabi_dcmpeq>:
 8000460:	b510      	push	{r4, lr}
 8000462:	f000 ffeb 	bl	800143c <__eqdf2>
 8000466:	4240      	negs	r0, r0
 8000468:	3001      	adds	r0, #1
 800046a:	bd10      	pop	{r4, pc}

0800046c <__aeabi_dcmplt>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f88d 	bl	800158c <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	db01      	blt.n	800047a <__aeabi_dcmplt+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmple>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f883 	bl	800158c <__ledf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dd01      	ble.n	800048e <__aeabi_dcmple+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpgt>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f813 	bl	80014c0 <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	dc01      	bgt.n	80004a2 <__aeabi_dcmpgt+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_dcmpge>:
 80004a8:	b510      	push	{r4, lr}
 80004aa:	f001 f809 	bl	80014c0 <__gedf2>
 80004ae:	2800      	cmp	r0, #0
 80004b0:	da01      	bge.n	80004b6 <__aeabi_dcmpge+0xe>
 80004b2:	2000      	movs	r0, #0
 80004b4:	bd10      	pop	{r4, pc}
 80004b6:	2001      	movs	r0, #1
 80004b8:	bd10      	pop	{r4, pc}
 80004ba:	46c0      	nop			; (mov r8, r8)

080004bc <__aeabi_uldivmod>:
 80004bc:	2b00      	cmp	r3, #0
 80004be:	d111      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c0:	2a00      	cmp	r2, #0
 80004c2:	d10f      	bne.n	80004e4 <__aeabi_uldivmod+0x28>
 80004c4:	2900      	cmp	r1, #0
 80004c6:	d100      	bne.n	80004ca <__aeabi_uldivmod+0xe>
 80004c8:	2800      	cmp	r0, #0
 80004ca:	d002      	beq.n	80004d2 <__aeabi_uldivmod+0x16>
 80004cc:	2100      	movs	r1, #0
 80004ce:	43c9      	mvns	r1, r1
 80004d0:	0008      	movs	r0, r1
 80004d2:	b407      	push	{r0, r1, r2}
 80004d4:	4802      	ldr	r0, [pc, #8]	; (80004e0 <__aeabi_uldivmod+0x24>)
 80004d6:	a102      	add	r1, pc, #8	; (adr r1, 80004e0 <__aeabi_uldivmod+0x24>)
 80004d8:	1840      	adds	r0, r0, r1
 80004da:	9002      	str	r0, [sp, #8]
 80004dc:	bd03      	pop	{r0, r1, pc}
 80004de:	46c0      	nop			; (mov r8, r8)
 80004e0:	ffffff5d 	.word	0xffffff5d
 80004e4:	b403      	push	{r0, r1}
 80004e6:	4668      	mov	r0, sp
 80004e8:	b501      	push	{r0, lr}
 80004ea:	9802      	ldr	r0, [sp, #8]
 80004ec:	f000 f88c 	bl	8000608 <__udivmoddi4>
 80004f0:	9b01      	ldr	r3, [sp, #4]
 80004f2:	469e      	mov	lr, r3
 80004f4:	b002      	add	sp, #8
 80004f6:	bc0c      	pop	{r2, r3}
 80004f8:	4770      	bx	lr
 80004fa:	46c0      	nop			; (mov r8, r8)

080004fc <__aeabi_d2uiz>:
 80004fc:	b570      	push	{r4, r5, r6, lr}
 80004fe:	2200      	movs	r2, #0
 8000500:	4b0c      	ldr	r3, [pc, #48]	; (8000534 <__aeabi_d2uiz+0x38>)
 8000502:	0004      	movs	r4, r0
 8000504:	000d      	movs	r5, r1
 8000506:	f7ff ffcf 	bl	80004a8 <__aeabi_dcmpge>
 800050a:	2800      	cmp	r0, #0
 800050c:	d104      	bne.n	8000518 <__aeabi_d2uiz+0x1c>
 800050e:	0020      	movs	r0, r4
 8000510:	0029      	movs	r1, r5
 8000512:	f001 ff01 	bl	8002318 <__aeabi_d2iz>
 8000516:	bd70      	pop	{r4, r5, r6, pc}
 8000518:	4b06      	ldr	r3, [pc, #24]	; (8000534 <__aeabi_d2uiz+0x38>)
 800051a:	2200      	movs	r2, #0
 800051c:	0020      	movs	r0, r4
 800051e:	0029      	movs	r1, r5
 8000520:	f001 fb5a 	bl	8001bd8 <__aeabi_dsub>
 8000524:	f001 fef8 	bl	8002318 <__aeabi_d2iz>
 8000528:	2380      	movs	r3, #128	; 0x80
 800052a:	061b      	lsls	r3, r3, #24
 800052c:	469c      	mov	ip, r3
 800052e:	4460      	add	r0, ip
 8000530:	e7f1      	b.n	8000516 <__aeabi_d2uiz+0x1a>
 8000532:	46c0      	nop			; (mov r8, r8)
 8000534:	41e00000 	.word	0x41e00000

08000538 <__aeabi_d2lz>:
 8000538:	b570      	push	{r4, r5, r6, lr}
 800053a:	0005      	movs	r5, r0
 800053c:	000c      	movs	r4, r1
 800053e:	2200      	movs	r2, #0
 8000540:	2300      	movs	r3, #0
 8000542:	0028      	movs	r0, r5
 8000544:	0021      	movs	r1, r4
 8000546:	f7ff ff91 	bl	800046c <__aeabi_dcmplt>
 800054a:	2800      	cmp	r0, #0
 800054c:	d108      	bne.n	8000560 <__aeabi_d2lz+0x28>
 800054e:	0028      	movs	r0, r5
 8000550:	0021      	movs	r1, r4
 8000552:	f000 f80f 	bl	8000574 <__aeabi_d2ulz>
 8000556:	0002      	movs	r2, r0
 8000558:	000b      	movs	r3, r1
 800055a:	0010      	movs	r0, r2
 800055c:	0019      	movs	r1, r3
 800055e:	bd70      	pop	{r4, r5, r6, pc}
 8000560:	2380      	movs	r3, #128	; 0x80
 8000562:	061b      	lsls	r3, r3, #24
 8000564:	18e1      	adds	r1, r4, r3
 8000566:	0028      	movs	r0, r5
 8000568:	f000 f804 	bl	8000574 <__aeabi_d2ulz>
 800056c:	2300      	movs	r3, #0
 800056e:	4242      	negs	r2, r0
 8000570:	418b      	sbcs	r3, r1
 8000572:	e7f2      	b.n	800055a <__aeabi_d2lz+0x22>

08000574 <__aeabi_d2ulz>:
 8000574:	b570      	push	{r4, r5, r6, lr}
 8000576:	2200      	movs	r2, #0
 8000578:	4b0b      	ldr	r3, [pc, #44]	; (80005a8 <__aeabi_d2ulz+0x34>)
 800057a:	000d      	movs	r5, r1
 800057c:	0004      	movs	r4, r0
 800057e:	f001 f869 	bl	8001654 <__aeabi_dmul>
 8000582:	f7ff ffbb 	bl	80004fc <__aeabi_d2uiz>
 8000586:	0006      	movs	r6, r0
 8000588:	f001 ff2c 	bl	80023e4 <__aeabi_ui2d>
 800058c:	2200      	movs	r2, #0
 800058e:	4b07      	ldr	r3, [pc, #28]	; (80005ac <__aeabi_d2ulz+0x38>)
 8000590:	f001 f860 	bl	8001654 <__aeabi_dmul>
 8000594:	0002      	movs	r2, r0
 8000596:	000b      	movs	r3, r1
 8000598:	0020      	movs	r0, r4
 800059a:	0029      	movs	r1, r5
 800059c:	f001 fb1c 	bl	8001bd8 <__aeabi_dsub>
 80005a0:	f7ff ffac 	bl	80004fc <__aeabi_d2uiz>
 80005a4:	0031      	movs	r1, r6
 80005a6:	bd70      	pop	{r4, r5, r6, pc}
 80005a8:	3df00000 	.word	0x3df00000
 80005ac:	41f00000 	.word	0x41f00000

080005b0 <__aeabi_l2d>:
 80005b0:	b570      	push	{r4, r5, r6, lr}
 80005b2:	0006      	movs	r6, r0
 80005b4:	0008      	movs	r0, r1
 80005b6:	f001 fee5 	bl	8002384 <__aeabi_i2d>
 80005ba:	2200      	movs	r2, #0
 80005bc:	4b06      	ldr	r3, [pc, #24]	; (80005d8 <__aeabi_l2d+0x28>)
 80005be:	f001 f849 	bl	8001654 <__aeabi_dmul>
 80005c2:	000d      	movs	r5, r1
 80005c4:	0004      	movs	r4, r0
 80005c6:	0030      	movs	r0, r6
 80005c8:	f001 ff0c 	bl	80023e4 <__aeabi_ui2d>
 80005cc:	002b      	movs	r3, r5
 80005ce:	0022      	movs	r2, r4
 80005d0:	f000 f8e6 	bl	80007a0 <__aeabi_dadd>
 80005d4:	bd70      	pop	{r4, r5, r6, pc}
 80005d6:	46c0      	nop			; (mov r8, r8)
 80005d8:	41f00000 	.word	0x41f00000

080005dc <__aeabi_ul2d>:
 80005dc:	b570      	push	{r4, r5, r6, lr}
 80005de:	0006      	movs	r6, r0
 80005e0:	0008      	movs	r0, r1
 80005e2:	f001 feff 	bl	80023e4 <__aeabi_ui2d>
 80005e6:	2200      	movs	r2, #0
 80005e8:	4b06      	ldr	r3, [pc, #24]	; (8000604 <__aeabi_ul2d+0x28>)
 80005ea:	f001 f833 	bl	8001654 <__aeabi_dmul>
 80005ee:	000d      	movs	r5, r1
 80005f0:	0004      	movs	r4, r0
 80005f2:	0030      	movs	r0, r6
 80005f4:	f001 fef6 	bl	80023e4 <__aeabi_ui2d>
 80005f8:	002b      	movs	r3, r5
 80005fa:	0022      	movs	r2, r4
 80005fc:	f000 f8d0 	bl	80007a0 <__aeabi_dadd>
 8000600:	bd70      	pop	{r4, r5, r6, pc}
 8000602:	46c0      	nop			; (mov r8, r8)
 8000604:	41f00000 	.word	0x41f00000

08000608 <__udivmoddi4>:
 8000608:	b5f0      	push	{r4, r5, r6, r7, lr}
 800060a:	4657      	mov	r7, sl
 800060c:	464e      	mov	r6, r9
 800060e:	4645      	mov	r5, r8
 8000610:	46de      	mov	lr, fp
 8000612:	b5e0      	push	{r5, r6, r7, lr}
 8000614:	0004      	movs	r4, r0
 8000616:	000d      	movs	r5, r1
 8000618:	4692      	mov	sl, r2
 800061a:	4699      	mov	r9, r3
 800061c:	b083      	sub	sp, #12
 800061e:	428b      	cmp	r3, r1
 8000620:	d830      	bhi.n	8000684 <__udivmoddi4+0x7c>
 8000622:	d02d      	beq.n	8000680 <__udivmoddi4+0x78>
 8000624:	4649      	mov	r1, r9
 8000626:	4650      	mov	r0, sl
 8000628:	f001 ff20 	bl	800246c <__clzdi2>
 800062c:	0029      	movs	r1, r5
 800062e:	0006      	movs	r6, r0
 8000630:	0020      	movs	r0, r4
 8000632:	f001 ff1b 	bl	800246c <__clzdi2>
 8000636:	1a33      	subs	r3, r6, r0
 8000638:	4698      	mov	r8, r3
 800063a:	3b20      	subs	r3, #32
 800063c:	d434      	bmi.n	80006a8 <__udivmoddi4+0xa0>
 800063e:	469b      	mov	fp, r3
 8000640:	4653      	mov	r3, sl
 8000642:	465a      	mov	r2, fp
 8000644:	4093      	lsls	r3, r2
 8000646:	4642      	mov	r2, r8
 8000648:	001f      	movs	r7, r3
 800064a:	4653      	mov	r3, sl
 800064c:	4093      	lsls	r3, r2
 800064e:	001e      	movs	r6, r3
 8000650:	42af      	cmp	r7, r5
 8000652:	d83b      	bhi.n	80006cc <__udivmoddi4+0xc4>
 8000654:	42af      	cmp	r7, r5
 8000656:	d100      	bne.n	800065a <__udivmoddi4+0x52>
 8000658:	e079      	b.n	800074e <__udivmoddi4+0x146>
 800065a:	465b      	mov	r3, fp
 800065c:	1ba4      	subs	r4, r4, r6
 800065e:	41bd      	sbcs	r5, r7
 8000660:	2b00      	cmp	r3, #0
 8000662:	da00      	bge.n	8000666 <__udivmoddi4+0x5e>
 8000664:	e076      	b.n	8000754 <__udivmoddi4+0x14c>
 8000666:	2200      	movs	r2, #0
 8000668:	2300      	movs	r3, #0
 800066a:	9200      	str	r2, [sp, #0]
 800066c:	9301      	str	r3, [sp, #4]
 800066e:	2301      	movs	r3, #1
 8000670:	465a      	mov	r2, fp
 8000672:	4093      	lsls	r3, r2
 8000674:	9301      	str	r3, [sp, #4]
 8000676:	2301      	movs	r3, #1
 8000678:	4642      	mov	r2, r8
 800067a:	4093      	lsls	r3, r2
 800067c:	9300      	str	r3, [sp, #0]
 800067e:	e029      	b.n	80006d4 <__udivmoddi4+0xcc>
 8000680:	4282      	cmp	r2, r0
 8000682:	d9cf      	bls.n	8000624 <__udivmoddi4+0x1c>
 8000684:	2200      	movs	r2, #0
 8000686:	2300      	movs	r3, #0
 8000688:	9200      	str	r2, [sp, #0]
 800068a:	9301      	str	r3, [sp, #4]
 800068c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800068e:	2b00      	cmp	r3, #0
 8000690:	d001      	beq.n	8000696 <__udivmoddi4+0x8e>
 8000692:	601c      	str	r4, [r3, #0]
 8000694:	605d      	str	r5, [r3, #4]
 8000696:	9800      	ldr	r0, [sp, #0]
 8000698:	9901      	ldr	r1, [sp, #4]
 800069a:	b003      	add	sp, #12
 800069c:	bcf0      	pop	{r4, r5, r6, r7}
 800069e:	46bb      	mov	fp, r7
 80006a0:	46b2      	mov	sl, r6
 80006a2:	46a9      	mov	r9, r5
 80006a4:	46a0      	mov	r8, r4
 80006a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80006a8:	4642      	mov	r2, r8
 80006aa:	469b      	mov	fp, r3
 80006ac:	2320      	movs	r3, #32
 80006ae:	1a9b      	subs	r3, r3, r2
 80006b0:	4652      	mov	r2, sl
 80006b2:	40da      	lsrs	r2, r3
 80006b4:	4641      	mov	r1, r8
 80006b6:	0013      	movs	r3, r2
 80006b8:	464a      	mov	r2, r9
 80006ba:	408a      	lsls	r2, r1
 80006bc:	0017      	movs	r7, r2
 80006be:	4642      	mov	r2, r8
 80006c0:	431f      	orrs	r7, r3
 80006c2:	4653      	mov	r3, sl
 80006c4:	4093      	lsls	r3, r2
 80006c6:	001e      	movs	r6, r3
 80006c8:	42af      	cmp	r7, r5
 80006ca:	d9c3      	bls.n	8000654 <__udivmoddi4+0x4c>
 80006cc:	2200      	movs	r2, #0
 80006ce:	2300      	movs	r3, #0
 80006d0:	9200      	str	r2, [sp, #0]
 80006d2:	9301      	str	r3, [sp, #4]
 80006d4:	4643      	mov	r3, r8
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d0d8      	beq.n	800068c <__udivmoddi4+0x84>
 80006da:	07fb      	lsls	r3, r7, #31
 80006dc:	0872      	lsrs	r2, r6, #1
 80006de:	431a      	orrs	r2, r3
 80006e0:	4646      	mov	r6, r8
 80006e2:	087b      	lsrs	r3, r7, #1
 80006e4:	e00e      	b.n	8000704 <__udivmoddi4+0xfc>
 80006e6:	42ab      	cmp	r3, r5
 80006e8:	d101      	bne.n	80006ee <__udivmoddi4+0xe6>
 80006ea:	42a2      	cmp	r2, r4
 80006ec:	d80c      	bhi.n	8000708 <__udivmoddi4+0x100>
 80006ee:	1aa4      	subs	r4, r4, r2
 80006f0:	419d      	sbcs	r5, r3
 80006f2:	2001      	movs	r0, #1
 80006f4:	1924      	adds	r4, r4, r4
 80006f6:	416d      	adcs	r5, r5
 80006f8:	2100      	movs	r1, #0
 80006fa:	3e01      	subs	r6, #1
 80006fc:	1824      	adds	r4, r4, r0
 80006fe:	414d      	adcs	r5, r1
 8000700:	2e00      	cmp	r6, #0
 8000702:	d006      	beq.n	8000712 <__udivmoddi4+0x10a>
 8000704:	42ab      	cmp	r3, r5
 8000706:	d9ee      	bls.n	80006e6 <__udivmoddi4+0xde>
 8000708:	3e01      	subs	r6, #1
 800070a:	1924      	adds	r4, r4, r4
 800070c:	416d      	adcs	r5, r5
 800070e:	2e00      	cmp	r6, #0
 8000710:	d1f8      	bne.n	8000704 <__udivmoddi4+0xfc>
 8000712:	9800      	ldr	r0, [sp, #0]
 8000714:	9901      	ldr	r1, [sp, #4]
 8000716:	465b      	mov	r3, fp
 8000718:	1900      	adds	r0, r0, r4
 800071a:	4169      	adcs	r1, r5
 800071c:	2b00      	cmp	r3, #0
 800071e:	db24      	blt.n	800076a <__udivmoddi4+0x162>
 8000720:	002b      	movs	r3, r5
 8000722:	465a      	mov	r2, fp
 8000724:	4644      	mov	r4, r8
 8000726:	40d3      	lsrs	r3, r2
 8000728:	002a      	movs	r2, r5
 800072a:	40e2      	lsrs	r2, r4
 800072c:	001c      	movs	r4, r3
 800072e:	465b      	mov	r3, fp
 8000730:	0015      	movs	r5, r2
 8000732:	2b00      	cmp	r3, #0
 8000734:	db2a      	blt.n	800078c <__udivmoddi4+0x184>
 8000736:	0026      	movs	r6, r4
 8000738:	409e      	lsls	r6, r3
 800073a:	0033      	movs	r3, r6
 800073c:	0026      	movs	r6, r4
 800073e:	4647      	mov	r7, r8
 8000740:	40be      	lsls	r6, r7
 8000742:	0032      	movs	r2, r6
 8000744:	1a80      	subs	r0, r0, r2
 8000746:	4199      	sbcs	r1, r3
 8000748:	9000      	str	r0, [sp, #0]
 800074a:	9101      	str	r1, [sp, #4]
 800074c:	e79e      	b.n	800068c <__udivmoddi4+0x84>
 800074e:	42a3      	cmp	r3, r4
 8000750:	d8bc      	bhi.n	80006cc <__udivmoddi4+0xc4>
 8000752:	e782      	b.n	800065a <__udivmoddi4+0x52>
 8000754:	4642      	mov	r2, r8
 8000756:	2320      	movs	r3, #32
 8000758:	2100      	movs	r1, #0
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	2200      	movs	r2, #0
 800075e:	9100      	str	r1, [sp, #0]
 8000760:	9201      	str	r2, [sp, #4]
 8000762:	2201      	movs	r2, #1
 8000764:	40da      	lsrs	r2, r3
 8000766:	9201      	str	r2, [sp, #4]
 8000768:	e785      	b.n	8000676 <__udivmoddi4+0x6e>
 800076a:	4642      	mov	r2, r8
 800076c:	2320      	movs	r3, #32
 800076e:	1a9b      	subs	r3, r3, r2
 8000770:	002a      	movs	r2, r5
 8000772:	4646      	mov	r6, r8
 8000774:	409a      	lsls	r2, r3
 8000776:	0023      	movs	r3, r4
 8000778:	40f3      	lsrs	r3, r6
 800077a:	4644      	mov	r4, r8
 800077c:	4313      	orrs	r3, r2
 800077e:	002a      	movs	r2, r5
 8000780:	40e2      	lsrs	r2, r4
 8000782:	001c      	movs	r4, r3
 8000784:	465b      	mov	r3, fp
 8000786:	0015      	movs	r5, r2
 8000788:	2b00      	cmp	r3, #0
 800078a:	dad4      	bge.n	8000736 <__udivmoddi4+0x12e>
 800078c:	4642      	mov	r2, r8
 800078e:	002f      	movs	r7, r5
 8000790:	2320      	movs	r3, #32
 8000792:	0026      	movs	r6, r4
 8000794:	4097      	lsls	r7, r2
 8000796:	1a9b      	subs	r3, r3, r2
 8000798:	40de      	lsrs	r6, r3
 800079a:	003b      	movs	r3, r7
 800079c:	4333      	orrs	r3, r6
 800079e:	e7cd      	b.n	800073c <__udivmoddi4+0x134>

080007a0 <__aeabi_dadd>:
 80007a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80007a2:	464f      	mov	r7, r9
 80007a4:	4646      	mov	r6, r8
 80007a6:	46d6      	mov	lr, sl
 80007a8:	0004      	movs	r4, r0
 80007aa:	b5c0      	push	{r6, r7, lr}
 80007ac:	001f      	movs	r7, r3
 80007ae:	030b      	lsls	r3, r1, #12
 80007b0:	0010      	movs	r0, r2
 80007b2:	004e      	lsls	r6, r1, #1
 80007b4:	0a5b      	lsrs	r3, r3, #9
 80007b6:	0fcd      	lsrs	r5, r1, #31
 80007b8:	0f61      	lsrs	r1, r4, #29
 80007ba:	007a      	lsls	r2, r7, #1
 80007bc:	4319      	orrs	r1, r3
 80007be:	00e3      	lsls	r3, r4, #3
 80007c0:	033c      	lsls	r4, r7, #12
 80007c2:	0fff      	lsrs	r7, r7, #31
 80007c4:	46bc      	mov	ip, r7
 80007c6:	0a64      	lsrs	r4, r4, #9
 80007c8:	0f47      	lsrs	r7, r0, #29
 80007ca:	4327      	orrs	r7, r4
 80007cc:	0d76      	lsrs	r6, r6, #21
 80007ce:	0d52      	lsrs	r2, r2, #21
 80007d0:	00c0      	lsls	r0, r0, #3
 80007d2:	46b9      	mov	r9, r7
 80007d4:	4680      	mov	r8, r0
 80007d6:	1ab7      	subs	r7, r6, r2
 80007d8:	4565      	cmp	r5, ip
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x3e>
 80007dc:	e09b      	b.n	8000916 <__aeabi_dadd+0x176>
 80007de:	2f00      	cmp	r7, #0
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_dadd+0x44>
 80007e2:	e084      	b.n	80008ee <__aeabi_dadd+0x14e>
 80007e4:	2a00      	cmp	r2, #0
 80007e6:	d100      	bne.n	80007ea <__aeabi_dadd+0x4a>
 80007e8:	e0be      	b.n	8000968 <__aeabi_dadd+0x1c8>
 80007ea:	4ac8      	ldr	r2, [pc, #800]	; (8000b0c <__aeabi_dadd+0x36c>)
 80007ec:	4296      	cmp	r6, r2
 80007ee:	d100      	bne.n	80007f2 <__aeabi_dadd+0x52>
 80007f0:	e124      	b.n	8000a3c <__aeabi_dadd+0x29c>
 80007f2:	2280      	movs	r2, #128	; 0x80
 80007f4:	464c      	mov	r4, r9
 80007f6:	0412      	lsls	r2, r2, #16
 80007f8:	4314      	orrs	r4, r2
 80007fa:	46a1      	mov	r9, r4
 80007fc:	2f38      	cmp	r7, #56	; 0x38
 80007fe:	dd00      	ble.n	8000802 <__aeabi_dadd+0x62>
 8000800:	e167      	b.n	8000ad2 <__aeabi_dadd+0x332>
 8000802:	2f1f      	cmp	r7, #31
 8000804:	dd00      	ble.n	8000808 <__aeabi_dadd+0x68>
 8000806:	e1d6      	b.n	8000bb6 <__aeabi_dadd+0x416>
 8000808:	2220      	movs	r2, #32
 800080a:	464c      	mov	r4, r9
 800080c:	1bd2      	subs	r2, r2, r7
 800080e:	4094      	lsls	r4, r2
 8000810:	46a2      	mov	sl, r4
 8000812:	4644      	mov	r4, r8
 8000814:	40fc      	lsrs	r4, r7
 8000816:	0020      	movs	r0, r4
 8000818:	4654      	mov	r4, sl
 800081a:	4304      	orrs	r4, r0
 800081c:	4640      	mov	r0, r8
 800081e:	4090      	lsls	r0, r2
 8000820:	1e42      	subs	r2, r0, #1
 8000822:	4190      	sbcs	r0, r2
 8000824:	464a      	mov	r2, r9
 8000826:	40fa      	lsrs	r2, r7
 8000828:	4304      	orrs	r4, r0
 800082a:	1a89      	subs	r1, r1, r2
 800082c:	1b1c      	subs	r4, r3, r4
 800082e:	42a3      	cmp	r3, r4
 8000830:	4192      	sbcs	r2, r2
 8000832:	4252      	negs	r2, r2
 8000834:	1a8b      	subs	r3, r1, r2
 8000836:	469a      	mov	sl, r3
 8000838:	4653      	mov	r3, sl
 800083a:	021b      	lsls	r3, r3, #8
 800083c:	d400      	bmi.n	8000840 <__aeabi_dadd+0xa0>
 800083e:	e0d4      	b.n	80009ea <__aeabi_dadd+0x24a>
 8000840:	4653      	mov	r3, sl
 8000842:	025a      	lsls	r2, r3, #9
 8000844:	0a53      	lsrs	r3, r2, #9
 8000846:	469a      	mov	sl, r3
 8000848:	4653      	mov	r3, sl
 800084a:	2b00      	cmp	r3, #0
 800084c:	d100      	bne.n	8000850 <__aeabi_dadd+0xb0>
 800084e:	e104      	b.n	8000a5a <__aeabi_dadd+0x2ba>
 8000850:	4650      	mov	r0, sl
 8000852:	f001 fded 	bl	8002430 <__clzsi2>
 8000856:	0003      	movs	r3, r0
 8000858:	3b08      	subs	r3, #8
 800085a:	2220      	movs	r2, #32
 800085c:	0020      	movs	r0, r4
 800085e:	1ad2      	subs	r2, r2, r3
 8000860:	4651      	mov	r1, sl
 8000862:	40d0      	lsrs	r0, r2
 8000864:	4099      	lsls	r1, r3
 8000866:	0002      	movs	r2, r0
 8000868:	409c      	lsls	r4, r3
 800086a:	430a      	orrs	r2, r1
 800086c:	42b3      	cmp	r3, r6
 800086e:	da00      	bge.n	8000872 <__aeabi_dadd+0xd2>
 8000870:	e102      	b.n	8000a78 <__aeabi_dadd+0x2d8>
 8000872:	1b9b      	subs	r3, r3, r6
 8000874:	1c59      	adds	r1, r3, #1
 8000876:	291f      	cmp	r1, #31
 8000878:	dd00      	ble.n	800087c <__aeabi_dadd+0xdc>
 800087a:	e0a7      	b.n	80009cc <__aeabi_dadd+0x22c>
 800087c:	2320      	movs	r3, #32
 800087e:	0010      	movs	r0, r2
 8000880:	0026      	movs	r6, r4
 8000882:	1a5b      	subs	r3, r3, r1
 8000884:	409c      	lsls	r4, r3
 8000886:	4098      	lsls	r0, r3
 8000888:	40ce      	lsrs	r6, r1
 800088a:	40ca      	lsrs	r2, r1
 800088c:	1e63      	subs	r3, r4, #1
 800088e:	419c      	sbcs	r4, r3
 8000890:	4330      	orrs	r0, r6
 8000892:	4692      	mov	sl, r2
 8000894:	2600      	movs	r6, #0
 8000896:	4304      	orrs	r4, r0
 8000898:	0763      	lsls	r3, r4, #29
 800089a:	d009      	beq.n	80008b0 <__aeabi_dadd+0x110>
 800089c:	230f      	movs	r3, #15
 800089e:	4023      	ands	r3, r4
 80008a0:	2b04      	cmp	r3, #4
 80008a2:	d005      	beq.n	80008b0 <__aeabi_dadd+0x110>
 80008a4:	1d23      	adds	r3, r4, #4
 80008a6:	42a3      	cmp	r3, r4
 80008a8:	41a4      	sbcs	r4, r4
 80008aa:	4264      	negs	r4, r4
 80008ac:	44a2      	add	sl, r4
 80008ae:	001c      	movs	r4, r3
 80008b0:	4653      	mov	r3, sl
 80008b2:	021b      	lsls	r3, r3, #8
 80008b4:	d400      	bmi.n	80008b8 <__aeabi_dadd+0x118>
 80008b6:	e09b      	b.n	80009f0 <__aeabi_dadd+0x250>
 80008b8:	4b94      	ldr	r3, [pc, #592]	; (8000b0c <__aeabi_dadd+0x36c>)
 80008ba:	3601      	adds	r6, #1
 80008bc:	429e      	cmp	r6, r3
 80008be:	d100      	bne.n	80008c2 <__aeabi_dadd+0x122>
 80008c0:	e0b8      	b.n	8000a34 <__aeabi_dadd+0x294>
 80008c2:	4653      	mov	r3, sl
 80008c4:	4992      	ldr	r1, [pc, #584]	; (8000b10 <__aeabi_dadd+0x370>)
 80008c6:	08e4      	lsrs	r4, r4, #3
 80008c8:	400b      	ands	r3, r1
 80008ca:	0019      	movs	r1, r3
 80008cc:	075b      	lsls	r3, r3, #29
 80008ce:	4323      	orrs	r3, r4
 80008d0:	0572      	lsls	r2, r6, #21
 80008d2:	024c      	lsls	r4, r1, #9
 80008d4:	0b24      	lsrs	r4, r4, #12
 80008d6:	0d52      	lsrs	r2, r2, #21
 80008d8:	0512      	lsls	r2, r2, #20
 80008da:	07ed      	lsls	r5, r5, #31
 80008dc:	4322      	orrs	r2, r4
 80008de:	432a      	orrs	r2, r5
 80008e0:	0018      	movs	r0, r3
 80008e2:	0011      	movs	r1, r2
 80008e4:	bce0      	pop	{r5, r6, r7}
 80008e6:	46ba      	mov	sl, r7
 80008e8:	46b1      	mov	r9, r6
 80008ea:	46a8      	mov	r8, r5
 80008ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ee:	2f00      	cmp	r7, #0
 80008f0:	d048      	beq.n	8000984 <__aeabi_dadd+0x1e4>
 80008f2:	1b97      	subs	r7, r2, r6
 80008f4:	2e00      	cmp	r6, #0
 80008f6:	d000      	beq.n	80008fa <__aeabi_dadd+0x15a>
 80008f8:	e10e      	b.n	8000b18 <__aeabi_dadd+0x378>
 80008fa:	000c      	movs	r4, r1
 80008fc:	431c      	orrs	r4, r3
 80008fe:	d100      	bne.n	8000902 <__aeabi_dadd+0x162>
 8000900:	e1b7      	b.n	8000c72 <__aeabi_dadd+0x4d2>
 8000902:	1e7c      	subs	r4, r7, #1
 8000904:	2f01      	cmp	r7, #1
 8000906:	d100      	bne.n	800090a <__aeabi_dadd+0x16a>
 8000908:	e226      	b.n	8000d58 <__aeabi_dadd+0x5b8>
 800090a:	4d80      	ldr	r5, [pc, #512]	; (8000b0c <__aeabi_dadd+0x36c>)
 800090c:	42af      	cmp	r7, r5
 800090e:	d100      	bne.n	8000912 <__aeabi_dadd+0x172>
 8000910:	e1d5      	b.n	8000cbe <__aeabi_dadd+0x51e>
 8000912:	0027      	movs	r7, r4
 8000914:	e107      	b.n	8000b26 <__aeabi_dadd+0x386>
 8000916:	2f00      	cmp	r7, #0
 8000918:	dc00      	bgt.n	800091c <__aeabi_dadd+0x17c>
 800091a:	e0b2      	b.n	8000a82 <__aeabi_dadd+0x2e2>
 800091c:	2a00      	cmp	r2, #0
 800091e:	d047      	beq.n	80009b0 <__aeabi_dadd+0x210>
 8000920:	4a7a      	ldr	r2, [pc, #488]	; (8000b0c <__aeabi_dadd+0x36c>)
 8000922:	4296      	cmp	r6, r2
 8000924:	d100      	bne.n	8000928 <__aeabi_dadd+0x188>
 8000926:	e089      	b.n	8000a3c <__aeabi_dadd+0x29c>
 8000928:	2280      	movs	r2, #128	; 0x80
 800092a:	464c      	mov	r4, r9
 800092c:	0412      	lsls	r2, r2, #16
 800092e:	4314      	orrs	r4, r2
 8000930:	46a1      	mov	r9, r4
 8000932:	2f38      	cmp	r7, #56	; 0x38
 8000934:	dc6b      	bgt.n	8000a0e <__aeabi_dadd+0x26e>
 8000936:	2f1f      	cmp	r7, #31
 8000938:	dc00      	bgt.n	800093c <__aeabi_dadd+0x19c>
 800093a:	e16e      	b.n	8000c1a <__aeabi_dadd+0x47a>
 800093c:	003a      	movs	r2, r7
 800093e:	4648      	mov	r0, r9
 8000940:	3a20      	subs	r2, #32
 8000942:	40d0      	lsrs	r0, r2
 8000944:	4684      	mov	ip, r0
 8000946:	2f20      	cmp	r7, #32
 8000948:	d007      	beq.n	800095a <__aeabi_dadd+0x1ba>
 800094a:	2240      	movs	r2, #64	; 0x40
 800094c:	4648      	mov	r0, r9
 800094e:	1bd2      	subs	r2, r2, r7
 8000950:	4090      	lsls	r0, r2
 8000952:	0002      	movs	r2, r0
 8000954:	4640      	mov	r0, r8
 8000956:	4310      	orrs	r0, r2
 8000958:	4680      	mov	r8, r0
 800095a:	4640      	mov	r0, r8
 800095c:	1e42      	subs	r2, r0, #1
 800095e:	4190      	sbcs	r0, r2
 8000960:	4662      	mov	r2, ip
 8000962:	0004      	movs	r4, r0
 8000964:	4314      	orrs	r4, r2
 8000966:	e057      	b.n	8000a18 <__aeabi_dadd+0x278>
 8000968:	464a      	mov	r2, r9
 800096a:	4302      	orrs	r2, r0
 800096c:	d100      	bne.n	8000970 <__aeabi_dadd+0x1d0>
 800096e:	e103      	b.n	8000b78 <__aeabi_dadd+0x3d8>
 8000970:	1e7a      	subs	r2, r7, #1
 8000972:	2f01      	cmp	r7, #1
 8000974:	d100      	bne.n	8000978 <__aeabi_dadd+0x1d8>
 8000976:	e193      	b.n	8000ca0 <__aeabi_dadd+0x500>
 8000978:	4c64      	ldr	r4, [pc, #400]	; (8000b0c <__aeabi_dadd+0x36c>)
 800097a:	42a7      	cmp	r7, r4
 800097c:	d100      	bne.n	8000980 <__aeabi_dadd+0x1e0>
 800097e:	e18a      	b.n	8000c96 <__aeabi_dadd+0x4f6>
 8000980:	0017      	movs	r7, r2
 8000982:	e73b      	b.n	80007fc <__aeabi_dadd+0x5c>
 8000984:	4c63      	ldr	r4, [pc, #396]	; (8000b14 <__aeabi_dadd+0x374>)
 8000986:	1c72      	adds	r2, r6, #1
 8000988:	4222      	tst	r2, r4
 800098a:	d000      	beq.n	800098e <__aeabi_dadd+0x1ee>
 800098c:	e0e0      	b.n	8000b50 <__aeabi_dadd+0x3b0>
 800098e:	000a      	movs	r2, r1
 8000990:	431a      	orrs	r2, r3
 8000992:	2e00      	cmp	r6, #0
 8000994:	d000      	beq.n	8000998 <__aeabi_dadd+0x1f8>
 8000996:	e174      	b.n	8000c82 <__aeabi_dadd+0x4e2>
 8000998:	2a00      	cmp	r2, #0
 800099a:	d100      	bne.n	800099e <__aeabi_dadd+0x1fe>
 800099c:	e1d0      	b.n	8000d40 <__aeabi_dadd+0x5a0>
 800099e:	464a      	mov	r2, r9
 80009a0:	4302      	orrs	r2, r0
 80009a2:	d000      	beq.n	80009a6 <__aeabi_dadd+0x206>
 80009a4:	e1e3      	b.n	8000d6e <__aeabi_dadd+0x5ce>
 80009a6:	074a      	lsls	r2, r1, #29
 80009a8:	08db      	lsrs	r3, r3, #3
 80009aa:	4313      	orrs	r3, r2
 80009ac:	08c9      	lsrs	r1, r1, #3
 80009ae:	e029      	b.n	8000a04 <__aeabi_dadd+0x264>
 80009b0:	464a      	mov	r2, r9
 80009b2:	4302      	orrs	r2, r0
 80009b4:	d100      	bne.n	80009b8 <__aeabi_dadd+0x218>
 80009b6:	e17d      	b.n	8000cb4 <__aeabi_dadd+0x514>
 80009b8:	1e7a      	subs	r2, r7, #1
 80009ba:	2f01      	cmp	r7, #1
 80009bc:	d100      	bne.n	80009c0 <__aeabi_dadd+0x220>
 80009be:	e0e0      	b.n	8000b82 <__aeabi_dadd+0x3e2>
 80009c0:	4c52      	ldr	r4, [pc, #328]	; (8000b0c <__aeabi_dadd+0x36c>)
 80009c2:	42a7      	cmp	r7, r4
 80009c4:	d100      	bne.n	80009c8 <__aeabi_dadd+0x228>
 80009c6:	e166      	b.n	8000c96 <__aeabi_dadd+0x4f6>
 80009c8:	0017      	movs	r7, r2
 80009ca:	e7b2      	b.n	8000932 <__aeabi_dadd+0x192>
 80009cc:	0010      	movs	r0, r2
 80009ce:	3b1f      	subs	r3, #31
 80009d0:	40d8      	lsrs	r0, r3
 80009d2:	2920      	cmp	r1, #32
 80009d4:	d003      	beq.n	80009de <__aeabi_dadd+0x23e>
 80009d6:	2340      	movs	r3, #64	; 0x40
 80009d8:	1a5b      	subs	r3, r3, r1
 80009da:	409a      	lsls	r2, r3
 80009dc:	4314      	orrs	r4, r2
 80009de:	1e63      	subs	r3, r4, #1
 80009e0:	419c      	sbcs	r4, r3
 80009e2:	2300      	movs	r3, #0
 80009e4:	2600      	movs	r6, #0
 80009e6:	469a      	mov	sl, r3
 80009e8:	4304      	orrs	r4, r0
 80009ea:	0763      	lsls	r3, r4, #29
 80009ec:	d000      	beq.n	80009f0 <__aeabi_dadd+0x250>
 80009ee:	e755      	b.n	800089c <__aeabi_dadd+0xfc>
 80009f0:	4652      	mov	r2, sl
 80009f2:	08e3      	lsrs	r3, r4, #3
 80009f4:	0752      	lsls	r2, r2, #29
 80009f6:	4313      	orrs	r3, r2
 80009f8:	4652      	mov	r2, sl
 80009fa:	0037      	movs	r7, r6
 80009fc:	08d1      	lsrs	r1, r2, #3
 80009fe:	4a43      	ldr	r2, [pc, #268]	; (8000b0c <__aeabi_dadd+0x36c>)
 8000a00:	4297      	cmp	r7, r2
 8000a02:	d01f      	beq.n	8000a44 <__aeabi_dadd+0x2a4>
 8000a04:	0309      	lsls	r1, r1, #12
 8000a06:	057a      	lsls	r2, r7, #21
 8000a08:	0b0c      	lsrs	r4, r1, #12
 8000a0a:	0d52      	lsrs	r2, r2, #21
 8000a0c:	e764      	b.n	80008d8 <__aeabi_dadd+0x138>
 8000a0e:	4642      	mov	r2, r8
 8000a10:	464c      	mov	r4, r9
 8000a12:	4314      	orrs	r4, r2
 8000a14:	1e62      	subs	r2, r4, #1
 8000a16:	4194      	sbcs	r4, r2
 8000a18:	18e4      	adds	r4, r4, r3
 8000a1a:	429c      	cmp	r4, r3
 8000a1c:	4192      	sbcs	r2, r2
 8000a1e:	4252      	negs	r2, r2
 8000a20:	4692      	mov	sl, r2
 8000a22:	448a      	add	sl, r1
 8000a24:	4653      	mov	r3, sl
 8000a26:	021b      	lsls	r3, r3, #8
 8000a28:	d5df      	bpl.n	80009ea <__aeabi_dadd+0x24a>
 8000a2a:	4b38      	ldr	r3, [pc, #224]	; (8000b0c <__aeabi_dadd+0x36c>)
 8000a2c:	3601      	adds	r6, #1
 8000a2e:	429e      	cmp	r6, r3
 8000a30:	d000      	beq.n	8000a34 <__aeabi_dadd+0x294>
 8000a32:	e0b3      	b.n	8000b9c <__aeabi_dadd+0x3fc>
 8000a34:	0032      	movs	r2, r6
 8000a36:	2400      	movs	r4, #0
 8000a38:	2300      	movs	r3, #0
 8000a3a:	e74d      	b.n	80008d8 <__aeabi_dadd+0x138>
 8000a3c:	074a      	lsls	r2, r1, #29
 8000a3e:	08db      	lsrs	r3, r3, #3
 8000a40:	4313      	orrs	r3, r2
 8000a42:	08c9      	lsrs	r1, r1, #3
 8000a44:	001a      	movs	r2, r3
 8000a46:	430a      	orrs	r2, r1
 8000a48:	d100      	bne.n	8000a4c <__aeabi_dadd+0x2ac>
 8000a4a:	e200      	b.n	8000e4e <__aeabi_dadd+0x6ae>
 8000a4c:	2480      	movs	r4, #128	; 0x80
 8000a4e:	0324      	lsls	r4, r4, #12
 8000a50:	430c      	orrs	r4, r1
 8000a52:	0324      	lsls	r4, r4, #12
 8000a54:	4a2d      	ldr	r2, [pc, #180]	; (8000b0c <__aeabi_dadd+0x36c>)
 8000a56:	0b24      	lsrs	r4, r4, #12
 8000a58:	e73e      	b.n	80008d8 <__aeabi_dadd+0x138>
 8000a5a:	0020      	movs	r0, r4
 8000a5c:	f001 fce8 	bl	8002430 <__clzsi2>
 8000a60:	0003      	movs	r3, r0
 8000a62:	3318      	adds	r3, #24
 8000a64:	2b1f      	cmp	r3, #31
 8000a66:	dc00      	bgt.n	8000a6a <__aeabi_dadd+0x2ca>
 8000a68:	e6f7      	b.n	800085a <__aeabi_dadd+0xba>
 8000a6a:	0022      	movs	r2, r4
 8000a6c:	3808      	subs	r0, #8
 8000a6e:	4082      	lsls	r2, r0
 8000a70:	2400      	movs	r4, #0
 8000a72:	42b3      	cmp	r3, r6
 8000a74:	db00      	blt.n	8000a78 <__aeabi_dadd+0x2d8>
 8000a76:	e6fc      	b.n	8000872 <__aeabi_dadd+0xd2>
 8000a78:	1af6      	subs	r6, r6, r3
 8000a7a:	4b25      	ldr	r3, [pc, #148]	; (8000b10 <__aeabi_dadd+0x370>)
 8000a7c:	401a      	ands	r2, r3
 8000a7e:	4692      	mov	sl, r2
 8000a80:	e70a      	b.n	8000898 <__aeabi_dadd+0xf8>
 8000a82:	2f00      	cmp	r7, #0
 8000a84:	d02b      	beq.n	8000ade <__aeabi_dadd+0x33e>
 8000a86:	1b97      	subs	r7, r2, r6
 8000a88:	2e00      	cmp	r6, #0
 8000a8a:	d100      	bne.n	8000a8e <__aeabi_dadd+0x2ee>
 8000a8c:	e0b8      	b.n	8000c00 <__aeabi_dadd+0x460>
 8000a8e:	4c1f      	ldr	r4, [pc, #124]	; (8000b0c <__aeabi_dadd+0x36c>)
 8000a90:	42a2      	cmp	r2, r4
 8000a92:	d100      	bne.n	8000a96 <__aeabi_dadd+0x2f6>
 8000a94:	e11c      	b.n	8000cd0 <__aeabi_dadd+0x530>
 8000a96:	2480      	movs	r4, #128	; 0x80
 8000a98:	0424      	lsls	r4, r4, #16
 8000a9a:	4321      	orrs	r1, r4
 8000a9c:	2f38      	cmp	r7, #56	; 0x38
 8000a9e:	dd00      	ble.n	8000aa2 <__aeabi_dadd+0x302>
 8000aa0:	e11e      	b.n	8000ce0 <__aeabi_dadd+0x540>
 8000aa2:	2f1f      	cmp	r7, #31
 8000aa4:	dd00      	ble.n	8000aa8 <__aeabi_dadd+0x308>
 8000aa6:	e19e      	b.n	8000de6 <__aeabi_dadd+0x646>
 8000aa8:	2620      	movs	r6, #32
 8000aaa:	000c      	movs	r4, r1
 8000aac:	1bf6      	subs	r6, r6, r7
 8000aae:	0018      	movs	r0, r3
 8000ab0:	40b3      	lsls	r3, r6
 8000ab2:	40b4      	lsls	r4, r6
 8000ab4:	40f8      	lsrs	r0, r7
 8000ab6:	1e5e      	subs	r6, r3, #1
 8000ab8:	41b3      	sbcs	r3, r6
 8000aba:	40f9      	lsrs	r1, r7
 8000abc:	4304      	orrs	r4, r0
 8000abe:	431c      	orrs	r4, r3
 8000ac0:	4489      	add	r9, r1
 8000ac2:	4444      	add	r4, r8
 8000ac4:	4544      	cmp	r4, r8
 8000ac6:	419b      	sbcs	r3, r3
 8000ac8:	425b      	negs	r3, r3
 8000aca:	444b      	add	r3, r9
 8000acc:	469a      	mov	sl, r3
 8000ace:	0016      	movs	r6, r2
 8000ad0:	e7a8      	b.n	8000a24 <__aeabi_dadd+0x284>
 8000ad2:	4642      	mov	r2, r8
 8000ad4:	464c      	mov	r4, r9
 8000ad6:	4314      	orrs	r4, r2
 8000ad8:	1e62      	subs	r2, r4, #1
 8000ada:	4194      	sbcs	r4, r2
 8000adc:	e6a6      	b.n	800082c <__aeabi_dadd+0x8c>
 8000ade:	4c0d      	ldr	r4, [pc, #52]	; (8000b14 <__aeabi_dadd+0x374>)
 8000ae0:	1c72      	adds	r2, r6, #1
 8000ae2:	4222      	tst	r2, r4
 8000ae4:	d000      	beq.n	8000ae8 <__aeabi_dadd+0x348>
 8000ae6:	e0a8      	b.n	8000c3a <__aeabi_dadd+0x49a>
 8000ae8:	000a      	movs	r2, r1
 8000aea:	431a      	orrs	r2, r3
 8000aec:	2e00      	cmp	r6, #0
 8000aee:	d000      	beq.n	8000af2 <__aeabi_dadd+0x352>
 8000af0:	e10a      	b.n	8000d08 <__aeabi_dadd+0x568>
 8000af2:	2a00      	cmp	r2, #0
 8000af4:	d100      	bne.n	8000af8 <__aeabi_dadd+0x358>
 8000af6:	e15e      	b.n	8000db6 <__aeabi_dadd+0x616>
 8000af8:	464a      	mov	r2, r9
 8000afa:	4302      	orrs	r2, r0
 8000afc:	d000      	beq.n	8000b00 <__aeabi_dadd+0x360>
 8000afe:	e161      	b.n	8000dc4 <__aeabi_dadd+0x624>
 8000b00:	074a      	lsls	r2, r1, #29
 8000b02:	08db      	lsrs	r3, r3, #3
 8000b04:	4313      	orrs	r3, r2
 8000b06:	08c9      	lsrs	r1, r1, #3
 8000b08:	e77c      	b.n	8000a04 <__aeabi_dadd+0x264>
 8000b0a:	46c0      	nop			; (mov r8, r8)
 8000b0c:	000007ff 	.word	0x000007ff
 8000b10:	ff7fffff 	.word	0xff7fffff
 8000b14:	000007fe 	.word	0x000007fe
 8000b18:	4ccf      	ldr	r4, [pc, #828]	; (8000e58 <__aeabi_dadd+0x6b8>)
 8000b1a:	42a2      	cmp	r2, r4
 8000b1c:	d100      	bne.n	8000b20 <__aeabi_dadd+0x380>
 8000b1e:	e0ce      	b.n	8000cbe <__aeabi_dadd+0x51e>
 8000b20:	2480      	movs	r4, #128	; 0x80
 8000b22:	0424      	lsls	r4, r4, #16
 8000b24:	4321      	orrs	r1, r4
 8000b26:	2f38      	cmp	r7, #56	; 0x38
 8000b28:	dc5b      	bgt.n	8000be2 <__aeabi_dadd+0x442>
 8000b2a:	2f1f      	cmp	r7, #31
 8000b2c:	dd00      	ble.n	8000b30 <__aeabi_dadd+0x390>
 8000b2e:	e0dc      	b.n	8000cea <__aeabi_dadd+0x54a>
 8000b30:	2520      	movs	r5, #32
 8000b32:	000c      	movs	r4, r1
 8000b34:	1bed      	subs	r5, r5, r7
 8000b36:	001e      	movs	r6, r3
 8000b38:	40ab      	lsls	r3, r5
 8000b3a:	40ac      	lsls	r4, r5
 8000b3c:	40fe      	lsrs	r6, r7
 8000b3e:	1e5d      	subs	r5, r3, #1
 8000b40:	41ab      	sbcs	r3, r5
 8000b42:	4334      	orrs	r4, r6
 8000b44:	40f9      	lsrs	r1, r7
 8000b46:	431c      	orrs	r4, r3
 8000b48:	464b      	mov	r3, r9
 8000b4a:	1a5b      	subs	r3, r3, r1
 8000b4c:	4699      	mov	r9, r3
 8000b4e:	e04c      	b.n	8000bea <__aeabi_dadd+0x44a>
 8000b50:	464a      	mov	r2, r9
 8000b52:	1a1c      	subs	r4, r3, r0
 8000b54:	1a88      	subs	r0, r1, r2
 8000b56:	42a3      	cmp	r3, r4
 8000b58:	4192      	sbcs	r2, r2
 8000b5a:	4252      	negs	r2, r2
 8000b5c:	4692      	mov	sl, r2
 8000b5e:	0002      	movs	r2, r0
 8000b60:	4650      	mov	r0, sl
 8000b62:	1a12      	subs	r2, r2, r0
 8000b64:	4692      	mov	sl, r2
 8000b66:	0212      	lsls	r2, r2, #8
 8000b68:	d478      	bmi.n	8000c5c <__aeabi_dadd+0x4bc>
 8000b6a:	4653      	mov	r3, sl
 8000b6c:	4323      	orrs	r3, r4
 8000b6e:	d000      	beq.n	8000b72 <__aeabi_dadd+0x3d2>
 8000b70:	e66a      	b.n	8000848 <__aeabi_dadd+0xa8>
 8000b72:	2100      	movs	r1, #0
 8000b74:	2500      	movs	r5, #0
 8000b76:	e745      	b.n	8000a04 <__aeabi_dadd+0x264>
 8000b78:	074a      	lsls	r2, r1, #29
 8000b7a:	08db      	lsrs	r3, r3, #3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	08c9      	lsrs	r1, r1, #3
 8000b80:	e73d      	b.n	80009fe <__aeabi_dadd+0x25e>
 8000b82:	181c      	adds	r4, r3, r0
 8000b84:	429c      	cmp	r4, r3
 8000b86:	419b      	sbcs	r3, r3
 8000b88:	4449      	add	r1, r9
 8000b8a:	468a      	mov	sl, r1
 8000b8c:	425b      	negs	r3, r3
 8000b8e:	449a      	add	sl, r3
 8000b90:	4653      	mov	r3, sl
 8000b92:	2601      	movs	r6, #1
 8000b94:	021b      	lsls	r3, r3, #8
 8000b96:	d400      	bmi.n	8000b9a <__aeabi_dadd+0x3fa>
 8000b98:	e727      	b.n	80009ea <__aeabi_dadd+0x24a>
 8000b9a:	2602      	movs	r6, #2
 8000b9c:	4652      	mov	r2, sl
 8000b9e:	4baf      	ldr	r3, [pc, #700]	; (8000e5c <__aeabi_dadd+0x6bc>)
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	401a      	ands	r2, r3
 8000ba4:	0013      	movs	r3, r2
 8000ba6:	4021      	ands	r1, r4
 8000ba8:	0862      	lsrs	r2, r4, #1
 8000baa:	430a      	orrs	r2, r1
 8000bac:	07dc      	lsls	r4, r3, #31
 8000bae:	085b      	lsrs	r3, r3, #1
 8000bb0:	469a      	mov	sl, r3
 8000bb2:	4314      	orrs	r4, r2
 8000bb4:	e670      	b.n	8000898 <__aeabi_dadd+0xf8>
 8000bb6:	003a      	movs	r2, r7
 8000bb8:	464c      	mov	r4, r9
 8000bba:	3a20      	subs	r2, #32
 8000bbc:	40d4      	lsrs	r4, r2
 8000bbe:	46a4      	mov	ip, r4
 8000bc0:	2f20      	cmp	r7, #32
 8000bc2:	d007      	beq.n	8000bd4 <__aeabi_dadd+0x434>
 8000bc4:	2240      	movs	r2, #64	; 0x40
 8000bc6:	4648      	mov	r0, r9
 8000bc8:	1bd2      	subs	r2, r2, r7
 8000bca:	4090      	lsls	r0, r2
 8000bcc:	0002      	movs	r2, r0
 8000bce:	4640      	mov	r0, r8
 8000bd0:	4310      	orrs	r0, r2
 8000bd2:	4680      	mov	r8, r0
 8000bd4:	4640      	mov	r0, r8
 8000bd6:	1e42      	subs	r2, r0, #1
 8000bd8:	4190      	sbcs	r0, r2
 8000bda:	4662      	mov	r2, ip
 8000bdc:	0004      	movs	r4, r0
 8000bde:	4314      	orrs	r4, r2
 8000be0:	e624      	b.n	800082c <__aeabi_dadd+0x8c>
 8000be2:	4319      	orrs	r1, r3
 8000be4:	000c      	movs	r4, r1
 8000be6:	1e63      	subs	r3, r4, #1
 8000be8:	419c      	sbcs	r4, r3
 8000bea:	4643      	mov	r3, r8
 8000bec:	1b1c      	subs	r4, r3, r4
 8000bee:	45a0      	cmp	r8, r4
 8000bf0:	419b      	sbcs	r3, r3
 8000bf2:	4649      	mov	r1, r9
 8000bf4:	425b      	negs	r3, r3
 8000bf6:	1acb      	subs	r3, r1, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	4665      	mov	r5, ip
 8000bfc:	0016      	movs	r6, r2
 8000bfe:	e61b      	b.n	8000838 <__aeabi_dadd+0x98>
 8000c00:	000c      	movs	r4, r1
 8000c02:	431c      	orrs	r4, r3
 8000c04:	d100      	bne.n	8000c08 <__aeabi_dadd+0x468>
 8000c06:	e0c7      	b.n	8000d98 <__aeabi_dadd+0x5f8>
 8000c08:	1e7c      	subs	r4, r7, #1
 8000c0a:	2f01      	cmp	r7, #1
 8000c0c:	d100      	bne.n	8000c10 <__aeabi_dadd+0x470>
 8000c0e:	e0f9      	b.n	8000e04 <__aeabi_dadd+0x664>
 8000c10:	4e91      	ldr	r6, [pc, #580]	; (8000e58 <__aeabi_dadd+0x6b8>)
 8000c12:	42b7      	cmp	r7, r6
 8000c14:	d05c      	beq.n	8000cd0 <__aeabi_dadd+0x530>
 8000c16:	0027      	movs	r7, r4
 8000c18:	e740      	b.n	8000a9c <__aeabi_dadd+0x2fc>
 8000c1a:	2220      	movs	r2, #32
 8000c1c:	464c      	mov	r4, r9
 8000c1e:	4640      	mov	r0, r8
 8000c20:	1bd2      	subs	r2, r2, r7
 8000c22:	4094      	lsls	r4, r2
 8000c24:	40f8      	lsrs	r0, r7
 8000c26:	4304      	orrs	r4, r0
 8000c28:	4640      	mov	r0, r8
 8000c2a:	4090      	lsls	r0, r2
 8000c2c:	1e42      	subs	r2, r0, #1
 8000c2e:	4190      	sbcs	r0, r2
 8000c30:	464a      	mov	r2, r9
 8000c32:	40fa      	lsrs	r2, r7
 8000c34:	4304      	orrs	r4, r0
 8000c36:	1889      	adds	r1, r1, r2
 8000c38:	e6ee      	b.n	8000a18 <__aeabi_dadd+0x278>
 8000c3a:	4c87      	ldr	r4, [pc, #540]	; (8000e58 <__aeabi_dadd+0x6b8>)
 8000c3c:	42a2      	cmp	r2, r4
 8000c3e:	d100      	bne.n	8000c42 <__aeabi_dadd+0x4a2>
 8000c40:	e6f9      	b.n	8000a36 <__aeabi_dadd+0x296>
 8000c42:	1818      	adds	r0, r3, r0
 8000c44:	4298      	cmp	r0, r3
 8000c46:	419b      	sbcs	r3, r3
 8000c48:	4449      	add	r1, r9
 8000c4a:	425b      	negs	r3, r3
 8000c4c:	18cb      	adds	r3, r1, r3
 8000c4e:	07dc      	lsls	r4, r3, #31
 8000c50:	0840      	lsrs	r0, r0, #1
 8000c52:	085b      	lsrs	r3, r3, #1
 8000c54:	469a      	mov	sl, r3
 8000c56:	0016      	movs	r6, r2
 8000c58:	4304      	orrs	r4, r0
 8000c5a:	e6c6      	b.n	80009ea <__aeabi_dadd+0x24a>
 8000c5c:	4642      	mov	r2, r8
 8000c5e:	1ad4      	subs	r4, r2, r3
 8000c60:	45a0      	cmp	r8, r4
 8000c62:	4180      	sbcs	r0, r0
 8000c64:	464b      	mov	r3, r9
 8000c66:	4240      	negs	r0, r0
 8000c68:	1a59      	subs	r1, r3, r1
 8000c6a:	1a0b      	subs	r3, r1, r0
 8000c6c:	469a      	mov	sl, r3
 8000c6e:	4665      	mov	r5, ip
 8000c70:	e5ea      	b.n	8000848 <__aeabi_dadd+0xa8>
 8000c72:	464b      	mov	r3, r9
 8000c74:	464a      	mov	r2, r9
 8000c76:	08c0      	lsrs	r0, r0, #3
 8000c78:	075b      	lsls	r3, r3, #29
 8000c7a:	4665      	mov	r5, ip
 8000c7c:	4303      	orrs	r3, r0
 8000c7e:	08d1      	lsrs	r1, r2, #3
 8000c80:	e6bd      	b.n	80009fe <__aeabi_dadd+0x25e>
 8000c82:	2a00      	cmp	r2, #0
 8000c84:	d000      	beq.n	8000c88 <__aeabi_dadd+0x4e8>
 8000c86:	e08e      	b.n	8000da6 <__aeabi_dadd+0x606>
 8000c88:	464b      	mov	r3, r9
 8000c8a:	4303      	orrs	r3, r0
 8000c8c:	d117      	bne.n	8000cbe <__aeabi_dadd+0x51e>
 8000c8e:	2180      	movs	r1, #128	; 0x80
 8000c90:	2500      	movs	r5, #0
 8000c92:	0309      	lsls	r1, r1, #12
 8000c94:	e6da      	b.n	8000a4c <__aeabi_dadd+0x2ac>
 8000c96:	074a      	lsls	r2, r1, #29
 8000c98:	08db      	lsrs	r3, r3, #3
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	08c9      	lsrs	r1, r1, #3
 8000c9e:	e6d1      	b.n	8000a44 <__aeabi_dadd+0x2a4>
 8000ca0:	1a1c      	subs	r4, r3, r0
 8000ca2:	464a      	mov	r2, r9
 8000ca4:	42a3      	cmp	r3, r4
 8000ca6:	419b      	sbcs	r3, r3
 8000ca8:	1a89      	subs	r1, r1, r2
 8000caa:	425b      	negs	r3, r3
 8000cac:	1acb      	subs	r3, r1, r3
 8000cae:	469a      	mov	sl, r3
 8000cb0:	2601      	movs	r6, #1
 8000cb2:	e5c1      	b.n	8000838 <__aeabi_dadd+0x98>
 8000cb4:	074a      	lsls	r2, r1, #29
 8000cb6:	08db      	lsrs	r3, r3, #3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	08c9      	lsrs	r1, r1, #3
 8000cbc:	e69f      	b.n	80009fe <__aeabi_dadd+0x25e>
 8000cbe:	4643      	mov	r3, r8
 8000cc0:	08d8      	lsrs	r0, r3, #3
 8000cc2:	464b      	mov	r3, r9
 8000cc4:	464a      	mov	r2, r9
 8000cc6:	075b      	lsls	r3, r3, #29
 8000cc8:	4665      	mov	r5, ip
 8000cca:	4303      	orrs	r3, r0
 8000ccc:	08d1      	lsrs	r1, r2, #3
 8000cce:	e6b9      	b.n	8000a44 <__aeabi_dadd+0x2a4>
 8000cd0:	4643      	mov	r3, r8
 8000cd2:	08d8      	lsrs	r0, r3, #3
 8000cd4:	464b      	mov	r3, r9
 8000cd6:	464a      	mov	r2, r9
 8000cd8:	075b      	lsls	r3, r3, #29
 8000cda:	4303      	orrs	r3, r0
 8000cdc:	08d1      	lsrs	r1, r2, #3
 8000cde:	e6b1      	b.n	8000a44 <__aeabi_dadd+0x2a4>
 8000ce0:	4319      	orrs	r1, r3
 8000ce2:	000c      	movs	r4, r1
 8000ce4:	1e63      	subs	r3, r4, #1
 8000ce6:	419c      	sbcs	r4, r3
 8000ce8:	e6eb      	b.n	8000ac2 <__aeabi_dadd+0x322>
 8000cea:	003c      	movs	r4, r7
 8000cec:	000d      	movs	r5, r1
 8000cee:	3c20      	subs	r4, #32
 8000cf0:	40e5      	lsrs	r5, r4
 8000cf2:	2f20      	cmp	r7, #32
 8000cf4:	d003      	beq.n	8000cfe <__aeabi_dadd+0x55e>
 8000cf6:	2440      	movs	r4, #64	; 0x40
 8000cf8:	1be4      	subs	r4, r4, r7
 8000cfa:	40a1      	lsls	r1, r4
 8000cfc:	430b      	orrs	r3, r1
 8000cfe:	001c      	movs	r4, r3
 8000d00:	1e63      	subs	r3, r4, #1
 8000d02:	419c      	sbcs	r4, r3
 8000d04:	432c      	orrs	r4, r5
 8000d06:	e770      	b.n	8000bea <__aeabi_dadd+0x44a>
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	d0e1      	beq.n	8000cd0 <__aeabi_dadd+0x530>
 8000d0c:	464a      	mov	r2, r9
 8000d0e:	4302      	orrs	r2, r0
 8000d10:	d0c1      	beq.n	8000c96 <__aeabi_dadd+0x4f6>
 8000d12:	074a      	lsls	r2, r1, #29
 8000d14:	08db      	lsrs	r3, r3, #3
 8000d16:	4313      	orrs	r3, r2
 8000d18:	2280      	movs	r2, #128	; 0x80
 8000d1a:	08c9      	lsrs	r1, r1, #3
 8000d1c:	0312      	lsls	r2, r2, #12
 8000d1e:	4211      	tst	r1, r2
 8000d20:	d008      	beq.n	8000d34 <__aeabi_dadd+0x594>
 8000d22:	4648      	mov	r0, r9
 8000d24:	08c4      	lsrs	r4, r0, #3
 8000d26:	4214      	tst	r4, r2
 8000d28:	d104      	bne.n	8000d34 <__aeabi_dadd+0x594>
 8000d2a:	4643      	mov	r3, r8
 8000d2c:	0021      	movs	r1, r4
 8000d2e:	08db      	lsrs	r3, r3, #3
 8000d30:	0742      	lsls	r2, r0, #29
 8000d32:	4313      	orrs	r3, r2
 8000d34:	0f5a      	lsrs	r2, r3, #29
 8000d36:	00db      	lsls	r3, r3, #3
 8000d38:	0752      	lsls	r2, r2, #29
 8000d3a:	08db      	lsrs	r3, r3, #3
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	e681      	b.n	8000a44 <__aeabi_dadd+0x2a4>
 8000d40:	464b      	mov	r3, r9
 8000d42:	4303      	orrs	r3, r0
 8000d44:	d100      	bne.n	8000d48 <__aeabi_dadd+0x5a8>
 8000d46:	e714      	b.n	8000b72 <__aeabi_dadd+0x3d2>
 8000d48:	464b      	mov	r3, r9
 8000d4a:	464a      	mov	r2, r9
 8000d4c:	08c0      	lsrs	r0, r0, #3
 8000d4e:	075b      	lsls	r3, r3, #29
 8000d50:	4665      	mov	r5, ip
 8000d52:	4303      	orrs	r3, r0
 8000d54:	08d1      	lsrs	r1, r2, #3
 8000d56:	e655      	b.n	8000a04 <__aeabi_dadd+0x264>
 8000d58:	1ac4      	subs	r4, r0, r3
 8000d5a:	45a0      	cmp	r8, r4
 8000d5c:	4180      	sbcs	r0, r0
 8000d5e:	464b      	mov	r3, r9
 8000d60:	4240      	negs	r0, r0
 8000d62:	1a59      	subs	r1, r3, r1
 8000d64:	1a0b      	subs	r3, r1, r0
 8000d66:	469a      	mov	sl, r3
 8000d68:	4665      	mov	r5, ip
 8000d6a:	2601      	movs	r6, #1
 8000d6c:	e564      	b.n	8000838 <__aeabi_dadd+0x98>
 8000d6e:	1a1c      	subs	r4, r3, r0
 8000d70:	464a      	mov	r2, r9
 8000d72:	42a3      	cmp	r3, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	1a8a      	subs	r2, r1, r2
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a12      	subs	r2, r2, r0
 8000d7c:	4692      	mov	sl, r2
 8000d7e:	0212      	lsls	r2, r2, #8
 8000d80:	d549      	bpl.n	8000e16 <__aeabi_dadd+0x676>
 8000d82:	4642      	mov	r2, r8
 8000d84:	1ad4      	subs	r4, r2, r3
 8000d86:	45a0      	cmp	r8, r4
 8000d88:	4180      	sbcs	r0, r0
 8000d8a:	464b      	mov	r3, r9
 8000d8c:	4240      	negs	r0, r0
 8000d8e:	1a59      	subs	r1, r3, r1
 8000d90:	1a0b      	subs	r3, r1, r0
 8000d92:	469a      	mov	sl, r3
 8000d94:	4665      	mov	r5, ip
 8000d96:	e57f      	b.n	8000898 <__aeabi_dadd+0xf8>
 8000d98:	464b      	mov	r3, r9
 8000d9a:	464a      	mov	r2, r9
 8000d9c:	08c0      	lsrs	r0, r0, #3
 8000d9e:	075b      	lsls	r3, r3, #29
 8000da0:	4303      	orrs	r3, r0
 8000da2:	08d1      	lsrs	r1, r2, #3
 8000da4:	e62b      	b.n	80009fe <__aeabi_dadd+0x25e>
 8000da6:	464a      	mov	r2, r9
 8000da8:	08db      	lsrs	r3, r3, #3
 8000daa:	4302      	orrs	r2, r0
 8000dac:	d138      	bne.n	8000e20 <__aeabi_dadd+0x680>
 8000dae:	074a      	lsls	r2, r1, #29
 8000db0:	4313      	orrs	r3, r2
 8000db2:	08c9      	lsrs	r1, r1, #3
 8000db4:	e646      	b.n	8000a44 <__aeabi_dadd+0x2a4>
 8000db6:	464b      	mov	r3, r9
 8000db8:	464a      	mov	r2, r9
 8000dba:	08c0      	lsrs	r0, r0, #3
 8000dbc:	075b      	lsls	r3, r3, #29
 8000dbe:	4303      	orrs	r3, r0
 8000dc0:	08d1      	lsrs	r1, r2, #3
 8000dc2:	e61f      	b.n	8000a04 <__aeabi_dadd+0x264>
 8000dc4:	181c      	adds	r4, r3, r0
 8000dc6:	429c      	cmp	r4, r3
 8000dc8:	419b      	sbcs	r3, r3
 8000dca:	4449      	add	r1, r9
 8000dcc:	468a      	mov	sl, r1
 8000dce:	425b      	negs	r3, r3
 8000dd0:	449a      	add	sl, r3
 8000dd2:	4653      	mov	r3, sl
 8000dd4:	021b      	lsls	r3, r3, #8
 8000dd6:	d400      	bmi.n	8000dda <__aeabi_dadd+0x63a>
 8000dd8:	e607      	b.n	80009ea <__aeabi_dadd+0x24a>
 8000dda:	4652      	mov	r2, sl
 8000ddc:	4b1f      	ldr	r3, [pc, #124]	; (8000e5c <__aeabi_dadd+0x6bc>)
 8000dde:	2601      	movs	r6, #1
 8000de0:	401a      	ands	r2, r3
 8000de2:	4692      	mov	sl, r2
 8000de4:	e601      	b.n	80009ea <__aeabi_dadd+0x24a>
 8000de6:	003c      	movs	r4, r7
 8000de8:	000e      	movs	r6, r1
 8000dea:	3c20      	subs	r4, #32
 8000dec:	40e6      	lsrs	r6, r4
 8000dee:	2f20      	cmp	r7, #32
 8000df0:	d003      	beq.n	8000dfa <__aeabi_dadd+0x65a>
 8000df2:	2440      	movs	r4, #64	; 0x40
 8000df4:	1be4      	subs	r4, r4, r7
 8000df6:	40a1      	lsls	r1, r4
 8000df8:	430b      	orrs	r3, r1
 8000dfa:	001c      	movs	r4, r3
 8000dfc:	1e63      	subs	r3, r4, #1
 8000dfe:	419c      	sbcs	r4, r3
 8000e00:	4334      	orrs	r4, r6
 8000e02:	e65e      	b.n	8000ac2 <__aeabi_dadd+0x322>
 8000e04:	4443      	add	r3, r8
 8000e06:	4283      	cmp	r3, r0
 8000e08:	4180      	sbcs	r0, r0
 8000e0a:	4449      	add	r1, r9
 8000e0c:	468a      	mov	sl, r1
 8000e0e:	4240      	negs	r0, r0
 8000e10:	001c      	movs	r4, r3
 8000e12:	4482      	add	sl, r0
 8000e14:	e6bc      	b.n	8000b90 <__aeabi_dadd+0x3f0>
 8000e16:	4653      	mov	r3, sl
 8000e18:	4323      	orrs	r3, r4
 8000e1a:	d100      	bne.n	8000e1e <__aeabi_dadd+0x67e>
 8000e1c:	e6a9      	b.n	8000b72 <__aeabi_dadd+0x3d2>
 8000e1e:	e5e4      	b.n	80009ea <__aeabi_dadd+0x24a>
 8000e20:	074a      	lsls	r2, r1, #29
 8000e22:	4313      	orrs	r3, r2
 8000e24:	2280      	movs	r2, #128	; 0x80
 8000e26:	08c9      	lsrs	r1, r1, #3
 8000e28:	0312      	lsls	r2, r2, #12
 8000e2a:	4211      	tst	r1, r2
 8000e2c:	d009      	beq.n	8000e42 <__aeabi_dadd+0x6a2>
 8000e2e:	4648      	mov	r0, r9
 8000e30:	08c4      	lsrs	r4, r0, #3
 8000e32:	4214      	tst	r4, r2
 8000e34:	d105      	bne.n	8000e42 <__aeabi_dadd+0x6a2>
 8000e36:	4643      	mov	r3, r8
 8000e38:	4665      	mov	r5, ip
 8000e3a:	0021      	movs	r1, r4
 8000e3c:	08db      	lsrs	r3, r3, #3
 8000e3e:	0742      	lsls	r2, r0, #29
 8000e40:	4313      	orrs	r3, r2
 8000e42:	0f5a      	lsrs	r2, r3, #29
 8000e44:	00db      	lsls	r3, r3, #3
 8000e46:	08db      	lsrs	r3, r3, #3
 8000e48:	0752      	lsls	r2, r2, #29
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	e5fa      	b.n	8000a44 <__aeabi_dadd+0x2a4>
 8000e4e:	2300      	movs	r3, #0
 8000e50:	4a01      	ldr	r2, [pc, #4]	; (8000e58 <__aeabi_dadd+0x6b8>)
 8000e52:	001c      	movs	r4, r3
 8000e54:	e540      	b.n	80008d8 <__aeabi_dadd+0x138>
 8000e56:	46c0      	nop			; (mov r8, r8)
 8000e58:	000007ff 	.word	0x000007ff
 8000e5c:	ff7fffff 	.word	0xff7fffff

08000e60 <__aeabi_ddiv>:
 8000e60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e62:	4657      	mov	r7, sl
 8000e64:	464e      	mov	r6, r9
 8000e66:	4645      	mov	r5, r8
 8000e68:	46de      	mov	lr, fp
 8000e6a:	b5e0      	push	{r5, r6, r7, lr}
 8000e6c:	030c      	lsls	r4, r1, #12
 8000e6e:	001f      	movs	r7, r3
 8000e70:	004b      	lsls	r3, r1, #1
 8000e72:	4681      	mov	r9, r0
 8000e74:	4692      	mov	sl, r2
 8000e76:	0005      	movs	r5, r0
 8000e78:	b085      	sub	sp, #20
 8000e7a:	0b24      	lsrs	r4, r4, #12
 8000e7c:	0d5b      	lsrs	r3, r3, #21
 8000e7e:	0fce      	lsrs	r6, r1, #31
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d100      	bne.n	8000e86 <__aeabi_ddiv+0x26>
 8000e84:	e152      	b.n	800112c <__aeabi_ddiv+0x2cc>
 8000e86:	4ad2      	ldr	r2, [pc, #840]	; (80011d0 <__aeabi_ddiv+0x370>)
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d100      	bne.n	8000e8e <__aeabi_ddiv+0x2e>
 8000e8c:	e16e      	b.n	800116c <__aeabi_ddiv+0x30c>
 8000e8e:	0f42      	lsrs	r2, r0, #29
 8000e90:	00e4      	lsls	r4, r4, #3
 8000e92:	4314      	orrs	r4, r2
 8000e94:	2280      	movs	r2, #128	; 0x80
 8000e96:	0412      	lsls	r2, r2, #16
 8000e98:	4322      	orrs	r2, r4
 8000e9a:	4690      	mov	r8, r2
 8000e9c:	4acd      	ldr	r2, [pc, #820]	; (80011d4 <__aeabi_ddiv+0x374>)
 8000e9e:	00c5      	lsls	r5, r0, #3
 8000ea0:	4693      	mov	fp, r2
 8000ea2:	449b      	add	fp, r3
 8000ea4:	2300      	movs	r3, #0
 8000ea6:	4699      	mov	r9, r3
 8000ea8:	9300      	str	r3, [sp, #0]
 8000eaa:	033c      	lsls	r4, r7, #12
 8000eac:	007b      	lsls	r3, r7, #1
 8000eae:	4650      	mov	r0, sl
 8000eb0:	0b24      	lsrs	r4, r4, #12
 8000eb2:	0d5b      	lsrs	r3, r3, #21
 8000eb4:	0fff      	lsrs	r7, r7, #31
 8000eb6:	2b00      	cmp	r3, #0
 8000eb8:	d100      	bne.n	8000ebc <__aeabi_ddiv+0x5c>
 8000eba:	e11a      	b.n	80010f2 <__aeabi_ddiv+0x292>
 8000ebc:	4ac4      	ldr	r2, [pc, #784]	; (80011d0 <__aeabi_ddiv+0x370>)
 8000ebe:	4293      	cmp	r3, r2
 8000ec0:	d100      	bne.n	8000ec4 <__aeabi_ddiv+0x64>
 8000ec2:	e15e      	b.n	8001182 <__aeabi_ddiv+0x322>
 8000ec4:	0f42      	lsrs	r2, r0, #29
 8000ec6:	00e4      	lsls	r4, r4, #3
 8000ec8:	4322      	orrs	r2, r4
 8000eca:	2480      	movs	r4, #128	; 0x80
 8000ecc:	0424      	lsls	r4, r4, #16
 8000ece:	4314      	orrs	r4, r2
 8000ed0:	4ac0      	ldr	r2, [pc, #768]	; (80011d4 <__aeabi_ddiv+0x374>)
 8000ed2:	00c1      	lsls	r1, r0, #3
 8000ed4:	4694      	mov	ip, r2
 8000ed6:	465a      	mov	r2, fp
 8000ed8:	4463      	add	r3, ip
 8000eda:	1ad3      	subs	r3, r2, r3
 8000edc:	469b      	mov	fp, r3
 8000ede:	2000      	movs	r0, #0
 8000ee0:	0033      	movs	r3, r6
 8000ee2:	407b      	eors	r3, r7
 8000ee4:	469a      	mov	sl, r3
 8000ee6:	464b      	mov	r3, r9
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	d827      	bhi.n	8000f3c <__aeabi_ddiv+0xdc>
 8000eec:	4aba      	ldr	r2, [pc, #744]	; (80011d8 <__aeabi_ddiv+0x378>)
 8000eee:	009b      	lsls	r3, r3, #2
 8000ef0:	58d3      	ldr	r3, [r2, r3]
 8000ef2:	469f      	mov	pc, r3
 8000ef4:	46b2      	mov	sl, r6
 8000ef6:	9b00      	ldr	r3, [sp, #0]
 8000ef8:	2b02      	cmp	r3, #2
 8000efa:	d016      	beq.n	8000f2a <__aeabi_ddiv+0xca>
 8000efc:	2b03      	cmp	r3, #3
 8000efe:	d100      	bne.n	8000f02 <__aeabi_ddiv+0xa2>
 8000f00:	e287      	b.n	8001412 <__aeabi_ddiv+0x5b2>
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d000      	beq.n	8000f08 <__aeabi_ddiv+0xa8>
 8000f06:	e0d5      	b.n	80010b4 <__aeabi_ddiv+0x254>
 8000f08:	2300      	movs	r3, #0
 8000f0a:	2200      	movs	r2, #0
 8000f0c:	2500      	movs	r5, #0
 8000f0e:	051b      	lsls	r3, r3, #20
 8000f10:	4313      	orrs	r3, r2
 8000f12:	4652      	mov	r2, sl
 8000f14:	07d2      	lsls	r2, r2, #31
 8000f16:	4313      	orrs	r3, r2
 8000f18:	0028      	movs	r0, r5
 8000f1a:	0019      	movs	r1, r3
 8000f1c:	b005      	add	sp, #20
 8000f1e:	bcf0      	pop	{r4, r5, r6, r7}
 8000f20:	46bb      	mov	fp, r7
 8000f22:	46b2      	mov	sl, r6
 8000f24:	46a9      	mov	r9, r5
 8000f26:	46a0      	mov	r8, r4
 8000f28:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	2500      	movs	r5, #0
 8000f2e:	4ba8      	ldr	r3, [pc, #672]	; (80011d0 <__aeabi_ddiv+0x370>)
 8000f30:	e7ed      	b.n	8000f0e <__aeabi_ddiv+0xae>
 8000f32:	46ba      	mov	sl, r7
 8000f34:	46a0      	mov	r8, r4
 8000f36:	000d      	movs	r5, r1
 8000f38:	9000      	str	r0, [sp, #0]
 8000f3a:	e7dc      	b.n	8000ef6 <__aeabi_ddiv+0x96>
 8000f3c:	4544      	cmp	r4, r8
 8000f3e:	d200      	bcs.n	8000f42 <__aeabi_ddiv+0xe2>
 8000f40:	e1c4      	b.n	80012cc <__aeabi_ddiv+0x46c>
 8000f42:	d100      	bne.n	8000f46 <__aeabi_ddiv+0xe6>
 8000f44:	e1bf      	b.n	80012c6 <__aeabi_ddiv+0x466>
 8000f46:	2301      	movs	r3, #1
 8000f48:	425b      	negs	r3, r3
 8000f4a:	469c      	mov	ip, r3
 8000f4c:	002e      	movs	r6, r5
 8000f4e:	4640      	mov	r0, r8
 8000f50:	2500      	movs	r5, #0
 8000f52:	44e3      	add	fp, ip
 8000f54:	0223      	lsls	r3, r4, #8
 8000f56:	0e0c      	lsrs	r4, r1, #24
 8000f58:	431c      	orrs	r4, r3
 8000f5a:	0c1b      	lsrs	r3, r3, #16
 8000f5c:	4699      	mov	r9, r3
 8000f5e:	0423      	lsls	r3, r4, #16
 8000f60:	020a      	lsls	r2, r1, #8
 8000f62:	0c1f      	lsrs	r7, r3, #16
 8000f64:	4649      	mov	r1, r9
 8000f66:	9200      	str	r2, [sp, #0]
 8000f68:	9701      	str	r7, [sp, #4]
 8000f6a:	f7ff f979 	bl	8000260 <__aeabi_uidivmod>
 8000f6e:	0002      	movs	r2, r0
 8000f70:	437a      	muls	r2, r7
 8000f72:	040b      	lsls	r3, r1, #16
 8000f74:	0c31      	lsrs	r1, r6, #16
 8000f76:	4680      	mov	r8, r0
 8000f78:	4319      	orrs	r1, r3
 8000f7a:	428a      	cmp	r2, r1
 8000f7c:	d907      	bls.n	8000f8e <__aeabi_ddiv+0x12e>
 8000f7e:	2301      	movs	r3, #1
 8000f80:	425b      	negs	r3, r3
 8000f82:	469c      	mov	ip, r3
 8000f84:	1909      	adds	r1, r1, r4
 8000f86:	44e0      	add	r8, ip
 8000f88:	428c      	cmp	r4, r1
 8000f8a:	d800      	bhi.n	8000f8e <__aeabi_ddiv+0x12e>
 8000f8c:	e201      	b.n	8001392 <__aeabi_ddiv+0x532>
 8000f8e:	1a88      	subs	r0, r1, r2
 8000f90:	4649      	mov	r1, r9
 8000f92:	f7ff f965 	bl	8000260 <__aeabi_uidivmod>
 8000f96:	9a01      	ldr	r2, [sp, #4]
 8000f98:	0436      	lsls	r6, r6, #16
 8000f9a:	4342      	muls	r2, r0
 8000f9c:	0409      	lsls	r1, r1, #16
 8000f9e:	0c36      	lsrs	r6, r6, #16
 8000fa0:	0003      	movs	r3, r0
 8000fa2:	430e      	orrs	r6, r1
 8000fa4:	42b2      	cmp	r2, r6
 8000fa6:	d904      	bls.n	8000fb2 <__aeabi_ddiv+0x152>
 8000fa8:	1936      	adds	r6, r6, r4
 8000faa:	3b01      	subs	r3, #1
 8000fac:	42b4      	cmp	r4, r6
 8000fae:	d800      	bhi.n	8000fb2 <__aeabi_ddiv+0x152>
 8000fb0:	e1e9      	b.n	8001386 <__aeabi_ddiv+0x526>
 8000fb2:	1ab0      	subs	r0, r6, r2
 8000fb4:	4642      	mov	r2, r8
 8000fb6:	9e00      	ldr	r6, [sp, #0]
 8000fb8:	0412      	lsls	r2, r2, #16
 8000fba:	431a      	orrs	r2, r3
 8000fbc:	0c33      	lsrs	r3, r6, #16
 8000fbe:	001f      	movs	r7, r3
 8000fc0:	0c11      	lsrs	r1, r2, #16
 8000fc2:	4690      	mov	r8, r2
 8000fc4:	9302      	str	r3, [sp, #8]
 8000fc6:	0413      	lsls	r3, r2, #16
 8000fc8:	0432      	lsls	r2, r6, #16
 8000fca:	0c16      	lsrs	r6, r2, #16
 8000fcc:	0032      	movs	r2, r6
 8000fce:	0c1b      	lsrs	r3, r3, #16
 8000fd0:	435a      	muls	r2, r3
 8000fd2:	9603      	str	r6, [sp, #12]
 8000fd4:	437b      	muls	r3, r7
 8000fd6:	434e      	muls	r6, r1
 8000fd8:	4379      	muls	r1, r7
 8000fda:	0c17      	lsrs	r7, r2, #16
 8000fdc:	46bc      	mov	ip, r7
 8000fde:	199b      	adds	r3, r3, r6
 8000fe0:	4463      	add	r3, ip
 8000fe2:	429e      	cmp	r6, r3
 8000fe4:	d903      	bls.n	8000fee <__aeabi_ddiv+0x18e>
 8000fe6:	2680      	movs	r6, #128	; 0x80
 8000fe8:	0276      	lsls	r6, r6, #9
 8000fea:	46b4      	mov	ip, r6
 8000fec:	4461      	add	r1, ip
 8000fee:	0c1e      	lsrs	r6, r3, #16
 8000ff0:	1871      	adds	r1, r6, r1
 8000ff2:	0416      	lsls	r6, r2, #16
 8000ff4:	041b      	lsls	r3, r3, #16
 8000ff6:	0c36      	lsrs	r6, r6, #16
 8000ff8:	199e      	adds	r6, r3, r6
 8000ffa:	4288      	cmp	r0, r1
 8000ffc:	d302      	bcc.n	8001004 <__aeabi_ddiv+0x1a4>
 8000ffe:	d112      	bne.n	8001026 <__aeabi_ddiv+0x1c6>
 8001000:	42b5      	cmp	r5, r6
 8001002:	d210      	bcs.n	8001026 <__aeabi_ddiv+0x1c6>
 8001004:	4643      	mov	r3, r8
 8001006:	1e5a      	subs	r2, r3, #1
 8001008:	9b00      	ldr	r3, [sp, #0]
 800100a:	469c      	mov	ip, r3
 800100c:	4465      	add	r5, ip
 800100e:	001f      	movs	r7, r3
 8001010:	429d      	cmp	r5, r3
 8001012:	419b      	sbcs	r3, r3
 8001014:	425b      	negs	r3, r3
 8001016:	191b      	adds	r3, r3, r4
 8001018:	18c0      	adds	r0, r0, r3
 800101a:	4284      	cmp	r4, r0
 800101c:	d200      	bcs.n	8001020 <__aeabi_ddiv+0x1c0>
 800101e:	e19e      	b.n	800135e <__aeabi_ddiv+0x4fe>
 8001020:	d100      	bne.n	8001024 <__aeabi_ddiv+0x1c4>
 8001022:	e199      	b.n	8001358 <__aeabi_ddiv+0x4f8>
 8001024:	4690      	mov	r8, r2
 8001026:	1bae      	subs	r6, r5, r6
 8001028:	42b5      	cmp	r5, r6
 800102a:	41ad      	sbcs	r5, r5
 800102c:	1a40      	subs	r0, r0, r1
 800102e:	426d      	negs	r5, r5
 8001030:	1b40      	subs	r0, r0, r5
 8001032:	4284      	cmp	r4, r0
 8001034:	d100      	bne.n	8001038 <__aeabi_ddiv+0x1d8>
 8001036:	e1d2      	b.n	80013de <__aeabi_ddiv+0x57e>
 8001038:	4649      	mov	r1, r9
 800103a:	f7ff f911 	bl	8000260 <__aeabi_uidivmod>
 800103e:	9a01      	ldr	r2, [sp, #4]
 8001040:	040b      	lsls	r3, r1, #16
 8001042:	4342      	muls	r2, r0
 8001044:	0c31      	lsrs	r1, r6, #16
 8001046:	0005      	movs	r5, r0
 8001048:	4319      	orrs	r1, r3
 800104a:	428a      	cmp	r2, r1
 800104c:	d900      	bls.n	8001050 <__aeabi_ddiv+0x1f0>
 800104e:	e16c      	b.n	800132a <__aeabi_ddiv+0x4ca>
 8001050:	1a88      	subs	r0, r1, r2
 8001052:	4649      	mov	r1, r9
 8001054:	f7ff f904 	bl	8000260 <__aeabi_uidivmod>
 8001058:	9a01      	ldr	r2, [sp, #4]
 800105a:	0436      	lsls	r6, r6, #16
 800105c:	4342      	muls	r2, r0
 800105e:	0409      	lsls	r1, r1, #16
 8001060:	0c36      	lsrs	r6, r6, #16
 8001062:	0003      	movs	r3, r0
 8001064:	430e      	orrs	r6, r1
 8001066:	42b2      	cmp	r2, r6
 8001068:	d900      	bls.n	800106c <__aeabi_ddiv+0x20c>
 800106a:	e153      	b.n	8001314 <__aeabi_ddiv+0x4b4>
 800106c:	9803      	ldr	r0, [sp, #12]
 800106e:	1ab6      	subs	r6, r6, r2
 8001070:	0002      	movs	r2, r0
 8001072:	042d      	lsls	r5, r5, #16
 8001074:	431d      	orrs	r5, r3
 8001076:	9f02      	ldr	r7, [sp, #8]
 8001078:	042b      	lsls	r3, r5, #16
 800107a:	0c1b      	lsrs	r3, r3, #16
 800107c:	435a      	muls	r2, r3
 800107e:	437b      	muls	r3, r7
 8001080:	469c      	mov	ip, r3
 8001082:	0c29      	lsrs	r1, r5, #16
 8001084:	4348      	muls	r0, r1
 8001086:	0c13      	lsrs	r3, r2, #16
 8001088:	4484      	add	ip, r0
 800108a:	4463      	add	r3, ip
 800108c:	4379      	muls	r1, r7
 800108e:	4298      	cmp	r0, r3
 8001090:	d903      	bls.n	800109a <__aeabi_ddiv+0x23a>
 8001092:	2080      	movs	r0, #128	; 0x80
 8001094:	0240      	lsls	r0, r0, #9
 8001096:	4684      	mov	ip, r0
 8001098:	4461      	add	r1, ip
 800109a:	0c18      	lsrs	r0, r3, #16
 800109c:	0412      	lsls	r2, r2, #16
 800109e:	041b      	lsls	r3, r3, #16
 80010a0:	0c12      	lsrs	r2, r2, #16
 80010a2:	1840      	adds	r0, r0, r1
 80010a4:	189b      	adds	r3, r3, r2
 80010a6:	4286      	cmp	r6, r0
 80010a8:	d200      	bcs.n	80010ac <__aeabi_ddiv+0x24c>
 80010aa:	e100      	b.n	80012ae <__aeabi_ddiv+0x44e>
 80010ac:	d100      	bne.n	80010b0 <__aeabi_ddiv+0x250>
 80010ae:	e0fb      	b.n	80012a8 <__aeabi_ddiv+0x448>
 80010b0:	2301      	movs	r3, #1
 80010b2:	431d      	orrs	r5, r3
 80010b4:	4b49      	ldr	r3, [pc, #292]	; (80011dc <__aeabi_ddiv+0x37c>)
 80010b6:	445b      	add	r3, fp
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	dc00      	bgt.n	80010be <__aeabi_ddiv+0x25e>
 80010bc:	e0aa      	b.n	8001214 <__aeabi_ddiv+0x3b4>
 80010be:	076a      	lsls	r2, r5, #29
 80010c0:	d000      	beq.n	80010c4 <__aeabi_ddiv+0x264>
 80010c2:	e13d      	b.n	8001340 <__aeabi_ddiv+0x4e0>
 80010c4:	08e9      	lsrs	r1, r5, #3
 80010c6:	4642      	mov	r2, r8
 80010c8:	01d2      	lsls	r2, r2, #7
 80010ca:	d506      	bpl.n	80010da <__aeabi_ddiv+0x27a>
 80010cc:	4642      	mov	r2, r8
 80010ce:	4b44      	ldr	r3, [pc, #272]	; (80011e0 <__aeabi_ddiv+0x380>)
 80010d0:	401a      	ands	r2, r3
 80010d2:	2380      	movs	r3, #128	; 0x80
 80010d4:	4690      	mov	r8, r2
 80010d6:	00db      	lsls	r3, r3, #3
 80010d8:	445b      	add	r3, fp
 80010da:	4a42      	ldr	r2, [pc, #264]	; (80011e4 <__aeabi_ddiv+0x384>)
 80010dc:	4293      	cmp	r3, r2
 80010de:	dd00      	ble.n	80010e2 <__aeabi_ddiv+0x282>
 80010e0:	e723      	b.n	8000f2a <__aeabi_ddiv+0xca>
 80010e2:	4642      	mov	r2, r8
 80010e4:	055b      	lsls	r3, r3, #21
 80010e6:	0755      	lsls	r5, r2, #29
 80010e8:	0252      	lsls	r2, r2, #9
 80010ea:	430d      	orrs	r5, r1
 80010ec:	0b12      	lsrs	r2, r2, #12
 80010ee:	0d5b      	lsrs	r3, r3, #21
 80010f0:	e70d      	b.n	8000f0e <__aeabi_ddiv+0xae>
 80010f2:	4651      	mov	r1, sl
 80010f4:	4321      	orrs	r1, r4
 80010f6:	d100      	bne.n	80010fa <__aeabi_ddiv+0x29a>
 80010f8:	e07c      	b.n	80011f4 <__aeabi_ddiv+0x394>
 80010fa:	2c00      	cmp	r4, #0
 80010fc:	d100      	bne.n	8001100 <__aeabi_ddiv+0x2a0>
 80010fe:	e0fb      	b.n	80012f8 <__aeabi_ddiv+0x498>
 8001100:	0020      	movs	r0, r4
 8001102:	f001 f995 	bl	8002430 <__clzsi2>
 8001106:	0002      	movs	r2, r0
 8001108:	3a0b      	subs	r2, #11
 800110a:	231d      	movs	r3, #29
 800110c:	1a9b      	subs	r3, r3, r2
 800110e:	4652      	mov	r2, sl
 8001110:	0001      	movs	r1, r0
 8001112:	40da      	lsrs	r2, r3
 8001114:	4653      	mov	r3, sl
 8001116:	3908      	subs	r1, #8
 8001118:	408b      	lsls	r3, r1
 800111a:	408c      	lsls	r4, r1
 800111c:	0019      	movs	r1, r3
 800111e:	4314      	orrs	r4, r2
 8001120:	4b31      	ldr	r3, [pc, #196]	; (80011e8 <__aeabi_ddiv+0x388>)
 8001122:	4458      	add	r0, fp
 8001124:	469b      	mov	fp, r3
 8001126:	4483      	add	fp, r0
 8001128:	2000      	movs	r0, #0
 800112a:	e6d9      	b.n	8000ee0 <__aeabi_ddiv+0x80>
 800112c:	0003      	movs	r3, r0
 800112e:	4323      	orrs	r3, r4
 8001130:	4698      	mov	r8, r3
 8001132:	d044      	beq.n	80011be <__aeabi_ddiv+0x35e>
 8001134:	2c00      	cmp	r4, #0
 8001136:	d100      	bne.n	800113a <__aeabi_ddiv+0x2da>
 8001138:	e0cf      	b.n	80012da <__aeabi_ddiv+0x47a>
 800113a:	0020      	movs	r0, r4
 800113c:	f001 f978 	bl	8002430 <__clzsi2>
 8001140:	0001      	movs	r1, r0
 8001142:	0002      	movs	r2, r0
 8001144:	390b      	subs	r1, #11
 8001146:	231d      	movs	r3, #29
 8001148:	1a5b      	subs	r3, r3, r1
 800114a:	4649      	mov	r1, r9
 800114c:	0010      	movs	r0, r2
 800114e:	40d9      	lsrs	r1, r3
 8001150:	3808      	subs	r0, #8
 8001152:	4084      	lsls	r4, r0
 8001154:	000b      	movs	r3, r1
 8001156:	464d      	mov	r5, r9
 8001158:	4323      	orrs	r3, r4
 800115a:	4698      	mov	r8, r3
 800115c:	4085      	lsls	r5, r0
 800115e:	4b23      	ldr	r3, [pc, #140]	; (80011ec <__aeabi_ddiv+0x38c>)
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	469b      	mov	fp, r3
 8001164:	2300      	movs	r3, #0
 8001166:	4699      	mov	r9, r3
 8001168:	9300      	str	r3, [sp, #0]
 800116a:	e69e      	b.n	8000eaa <__aeabi_ddiv+0x4a>
 800116c:	0002      	movs	r2, r0
 800116e:	4322      	orrs	r2, r4
 8001170:	4690      	mov	r8, r2
 8001172:	d11d      	bne.n	80011b0 <__aeabi_ddiv+0x350>
 8001174:	2208      	movs	r2, #8
 8001176:	469b      	mov	fp, r3
 8001178:	2302      	movs	r3, #2
 800117a:	2500      	movs	r5, #0
 800117c:	4691      	mov	r9, r2
 800117e:	9300      	str	r3, [sp, #0]
 8001180:	e693      	b.n	8000eaa <__aeabi_ddiv+0x4a>
 8001182:	4651      	mov	r1, sl
 8001184:	4321      	orrs	r1, r4
 8001186:	d109      	bne.n	800119c <__aeabi_ddiv+0x33c>
 8001188:	2302      	movs	r3, #2
 800118a:	464a      	mov	r2, r9
 800118c:	431a      	orrs	r2, r3
 800118e:	4b18      	ldr	r3, [pc, #96]	; (80011f0 <__aeabi_ddiv+0x390>)
 8001190:	4691      	mov	r9, r2
 8001192:	469c      	mov	ip, r3
 8001194:	2400      	movs	r4, #0
 8001196:	2002      	movs	r0, #2
 8001198:	44e3      	add	fp, ip
 800119a:	e6a1      	b.n	8000ee0 <__aeabi_ddiv+0x80>
 800119c:	2303      	movs	r3, #3
 800119e:	464a      	mov	r2, r9
 80011a0:	431a      	orrs	r2, r3
 80011a2:	4b13      	ldr	r3, [pc, #76]	; (80011f0 <__aeabi_ddiv+0x390>)
 80011a4:	4691      	mov	r9, r2
 80011a6:	469c      	mov	ip, r3
 80011a8:	4651      	mov	r1, sl
 80011aa:	2003      	movs	r0, #3
 80011ac:	44e3      	add	fp, ip
 80011ae:	e697      	b.n	8000ee0 <__aeabi_ddiv+0x80>
 80011b0:	220c      	movs	r2, #12
 80011b2:	469b      	mov	fp, r3
 80011b4:	2303      	movs	r3, #3
 80011b6:	46a0      	mov	r8, r4
 80011b8:	4691      	mov	r9, r2
 80011ba:	9300      	str	r3, [sp, #0]
 80011bc:	e675      	b.n	8000eaa <__aeabi_ddiv+0x4a>
 80011be:	2304      	movs	r3, #4
 80011c0:	4699      	mov	r9, r3
 80011c2:	2300      	movs	r3, #0
 80011c4:	469b      	mov	fp, r3
 80011c6:	3301      	adds	r3, #1
 80011c8:	2500      	movs	r5, #0
 80011ca:	9300      	str	r3, [sp, #0]
 80011cc:	e66d      	b.n	8000eaa <__aeabi_ddiv+0x4a>
 80011ce:	46c0      	nop			; (mov r8, r8)
 80011d0:	000007ff 	.word	0x000007ff
 80011d4:	fffffc01 	.word	0xfffffc01
 80011d8:	08011084 	.word	0x08011084
 80011dc:	000003ff 	.word	0x000003ff
 80011e0:	feffffff 	.word	0xfeffffff
 80011e4:	000007fe 	.word	0x000007fe
 80011e8:	000003f3 	.word	0x000003f3
 80011ec:	fffffc0d 	.word	0xfffffc0d
 80011f0:	fffff801 	.word	0xfffff801
 80011f4:	464a      	mov	r2, r9
 80011f6:	2301      	movs	r3, #1
 80011f8:	431a      	orrs	r2, r3
 80011fa:	4691      	mov	r9, r2
 80011fc:	2400      	movs	r4, #0
 80011fe:	2001      	movs	r0, #1
 8001200:	e66e      	b.n	8000ee0 <__aeabi_ddiv+0x80>
 8001202:	2300      	movs	r3, #0
 8001204:	2280      	movs	r2, #128	; 0x80
 8001206:	469a      	mov	sl, r3
 8001208:	2500      	movs	r5, #0
 800120a:	4b88      	ldr	r3, [pc, #544]	; (800142c <__aeabi_ddiv+0x5cc>)
 800120c:	0312      	lsls	r2, r2, #12
 800120e:	e67e      	b.n	8000f0e <__aeabi_ddiv+0xae>
 8001210:	2501      	movs	r5, #1
 8001212:	426d      	negs	r5, r5
 8001214:	2201      	movs	r2, #1
 8001216:	1ad2      	subs	r2, r2, r3
 8001218:	2a38      	cmp	r2, #56	; 0x38
 800121a:	dd00      	ble.n	800121e <__aeabi_ddiv+0x3be>
 800121c:	e674      	b.n	8000f08 <__aeabi_ddiv+0xa8>
 800121e:	2a1f      	cmp	r2, #31
 8001220:	dc00      	bgt.n	8001224 <__aeabi_ddiv+0x3c4>
 8001222:	e0bd      	b.n	80013a0 <__aeabi_ddiv+0x540>
 8001224:	211f      	movs	r1, #31
 8001226:	4249      	negs	r1, r1
 8001228:	1acb      	subs	r3, r1, r3
 800122a:	4641      	mov	r1, r8
 800122c:	40d9      	lsrs	r1, r3
 800122e:	000b      	movs	r3, r1
 8001230:	2a20      	cmp	r2, #32
 8001232:	d004      	beq.n	800123e <__aeabi_ddiv+0x3de>
 8001234:	4641      	mov	r1, r8
 8001236:	4a7e      	ldr	r2, [pc, #504]	; (8001430 <__aeabi_ddiv+0x5d0>)
 8001238:	445a      	add	r2, fp
 800123a:	4091      	lsls	r1, r2
 800123c:	430d      	orrs	r5, r1
 800123e:	0029      	movs	r1, r5
 8001240:	1e4a      	subs	r2, r1, #1
 8001242:	4191      	sbcs	r1, r2
 8001244:	4319      	orrs	r1, r3
 8001246:	2307      	movs	r3, #7
 8001248:	001d      	movs	r5, r3
 800124a:	2200      	movs	r2, #0
 800124c:	400d      	ands	r5, r1
 800124e:	420b      	tst	r3, r1
 8001250:	d100      	bne.n	8001254 <__aeabi_ddiv+0x3f4>
 8001252:	e0d0      	b.n	80013f6 <__aeabi_ddiv+0x596>
 8001254:	220f      	movs	r2, #15
 8001256:	2300      	movs	r3, #0
 8001258:	400a      	ands	r2, r1
 800125a:	2a04      	cmp	r2, #4
 800125c:	d100      	bne.n	8001260 <__aeabi_ddiv+0x400>
 800125e:	e0c7      	b.n	80013f0 <__aeabi_ddiv+0x590>
 8001260:	1d0a      	adds	r2, r1, #4
 8001262:	428a      	cmp	r2, r1
 8001264:	4189      	sbcs	r1, r1
 8001266:	4249      	negs	r1, r1
 8001268:	185b      	adds	r3, r3, r1
 800126a:	0011      	movs	r1, r2
 800126c:	021a      	lsls	r2, r3, #8
 800126e:	d400      	bmi.n	8001272 <__aeabi_ddiv+0x412>
 8001270:	e0be      	b.n	80013f0 <__aeabi_ddiv+0x590>
 8001272:	2301      	movs	r3, #1
 8001274:	2200      	movs	r2, #0
 8001276:	2500      	movs	r5, #0
 8001278:	e649      	b.n	8000f0e <__aeabi_ddiv+0xae>
 800127a:	2280      	movs	r2, #128	; 0x80
 800127c:	4643      	mov	r3, r8
 800127e:	0312      	lsls	r2, r2, #12
 8001280:	4213      	tst	r3, r2
 8001282:	d008      	beq.n	8001296 <__aeabi_ddiv+0x436>
 8001284:	4214      	tst	r4, r2
 8001286:	d106      	bne.n	8001296 <__aeabi_ddiv+0x436>
 8001288:	4322      	orrs	r2, r4
 800128a:	0312      	lsls	r2, r2, #12
 800128c:	46ba      	mov	sl, r7
 800128e:	000d      	movs	r5, r1
 8001290:	4b66      	ldr	r3, [pc, #408]	; (800142c <__aeabi_ddiv+0x5cc>)
 8001292:	0b12      	lsrs	r2, r2, #12
 8001294:	e63b      	b.n	8000f0e <__aeabi_ddiv+0xae>
 8001296:	2280      	movs	r2, #128	; 0x80
 8001298:	4643      	mov	r3, r8
 800129a:	0312      	lsls	r2, r2, #12
 800129c:	431a      	orrs	r2, r3
 800129e:	0312      	lsls	r2, r2, #12
 80012a0:	46b2      	mov	sl, r6
 80012a2:	4b62      	ldr	r3, [pc, #392]	; (800142c <__aeabi_ddiv+0x5cc>)
 80012a4:	0b12      	lsrs	r2, r2, #12
 80012a6:	e632      	b.n	8000f0e <__aeabi_ddiv+0xae>
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d100      	bne.n	80012ae <__aeabi_ddiv+0x44e>
 80012ac:	e702      	b.n	80010b4 <__aeabi_ddiv+0x254>
 80012ae:	19a6      	adds	r6, r4, r6
 80012b0:	1e6a      	subs	r2, r5, #1
 80012b2:	42a6      	cmp	r6, r4
 80012b4:	d200      	bcs.n	80012b8 <__aeabi_ddiv+0x458>
 80012b6:	e089      	b.n	80013cc <__aeabi_ddiv+0x56c>
 80012b8:	4286      	cmp	r6, r0
 80012ba:	d200      	bcs.n	80012be <__aeabi_ddiv+0x45e>
 80012bc:	e09f      	b.n	80013fe <__aeabi_ddiv+0x59e>
 80012be:	d100      	bne.n	80012c2 <__aeabi_ddiv+0x462>
 80012c0:	e0af      	b.n	8001422 <__aeabi_ddiv+0x5c2>
 80012c2:	0015      	movs	r5, r2
 80012c4:	e6f4      	b.n	80010b0 <__aeabi_ddiv+0x250>
 80012c6:	42a9      	cmp	r1, r5
 80012c8:	d900      	bls.n	80012cc <__aeabi_ddiv+0x46c>
 80012ca:	e63c      	b.n	8000f46 <__aeabi_ddiv+0xe6>
 80012cc:	4643      	mov	r3, r8
 80012ce:	07de      	lsls	r6, r3, #31
 80012d0:	0858      	lsrs	r0, r3, #1
 80012d2:	086b      	lsrs	r3, r5, #1
 80012d4:	431e      	orrs	r6, r3
 80012d6:	07ed      	lsls	r5, r5, #31
 80012d8:	e63c      	b.n	8000f54 <__aeabi_ddiv+0xf4>
 80012da:	f001 f8a9 	bl	8002430 <__clzsi2>
 80012de:	0001      	movs	r1, r0
 80012e0:	0002      	movs	r2, r0
 80012e2:	3115      	adds	r1, #21
 80012e4:	3220      	adds	r2, #32
 80012e6:	291c      	cmp	r1, #28
 80012e8:	dc00      	bgt.n	80012ec <__aeabi_ddiv+0x48c>
 80012ea:	e72c      	b.n	8001146 <__aeabi_ddiv+0x2e6>
 80012ec:	464b      	mov	r3, r9
 80012ee:	3808      	subs	r0, #8
 80012f0:	4083      	lsls	r3, r0
 80012f2:	2500      	movs	r5, #0
 80012f4:	4698      	mov	r8, r3
 80012f6:	e732      	b.n	800115e <__aeabi_ddiv+0x2fe>
 80012f8:	f001 f89a 	bl	8002430 <__clzsi2>
 80012fc:	0003      	movs	r3, r0
 80012fe:	001a      	movs	r2, r3
 8001300:	3215      	adds	r2, #21
 8001302:	3020      	adds	r0, #32
 8001304:	2a1c      	cmp	r2, #28
 8001306:	dc00      	bgt.n	800130a <__aeabi_ddiv+0x4aa>
 8001308:	e6ff      	b.n	800110a <__aeabi_ddiv+0x2aa>
 800130a:	4654      	mov	r4, sl
 800130c:	3b08      	subs	r3, #8
 800130e:	2100      	movs	r1, #0
 8001310:	409c      	lsls	r4, r3
 8001312:	e705      	b.n	8001120 <__aeabi_ddiv+0x2c0>
 8001314:	1936      	adds	r6, r6, r4
 8001316:	3b01      	subs	r3, #1
 8001318:	42b4      	cmp	r4, r6
 800131a:	d900      	bls.n	800131e <__aeabi_ddiv+0x4be>
 800131c:	e6a6      	b.n	800106c <__aeabi_ddiv+0x20c>
 800131e:	42b2      	cmp	r2, r6
 8001320:	d800      	bhi.n	8001324 <__aeabi_ddiv+0x4c4>
 8001322:	e6a3      	b.n	800106c <__aeabi_ddiv+0x20c>
 8001324:	1e83      	subs	r3, r0, #2
 8001326:	1936      	adds	r6, r6, r4
 8001328:	e6a0      	b.n	800106c <__aeabi_ddiv+0x20c>
 800132a:	1909      	adds	r1, r1, r4
 800132c:	3d01      	subs	r5, #1
 800132e:	428c      	cmp	r4, r1
 8001330:	d900      	bls.n	8001334 <__aeabi_ddiv+0x4d4>
 8001332:	e68d      	b.n	8001050 <__aeabi_ddiv+0x1f0>
 8001334:	428a      	cmp	r2, r1
 8001336:	d800      	bhi.n	800133a <__aeabi_ddiv+0x4da>
 8001338:	e68a      	b.n	8001050 <__aeabi_ddiv+0x1f0>
 800133a:	1e85      	subs	r5, r0, #2
 800133c:	1909      	adds	r1, r1, r4
 800133e:	e687      	b.n	8001050 <__aeabi_ddiv+0x1f0>
 8001340:	220f      	movs	r2, #15
 8001342:	402a      	ands	r2, r5
 8001344:	2a04      	cmp	r2, #4
 8001346:	d100      	bne.n	800134a <__aeabi_ddiv+0x4ea>
 8001348:	e6bc      	b.n	80010c4 <__aeabi_ddiv+0x264>
 800134a:	1d29      	adds	r1, r5, #4
 800134c:	42a9      	cmp	r1, r5
 800134e:	41ad      	sbcs	r5, r5
 8001350:	426d      	negs	r5, r5
 8001352:	08c9      	lsrs	r1, r1, #3
 8001354:	44a8      	add	r8, r5
 8001356:	e6b6      	b.n	80010c6 <__aeabi_ddiv+0x266>
 8001358:	42af      	cmp	r7, r5
 800135a:	d900      	bls.n	800135e <__aeabi_ddiv+0x4fe>
 800135c:	e662      	b.n	8001024 <__aeabi_ddiv+0x1c4>
 800135e:	4281      	cmp	r1, r0
 8001360:	d804      	bhi.n	800136c <__aeabi_ddiv+0x50c>
 8001362:	d000      	beq.n	8001366 <__aeabi_ddiv+0x506>
 8001364:	e65e      	b.n	8001024 <__aeabi_ddiv+0x1c4>
 8001366:	42ae      	cmp	r6, r5
 8001368:	d800      	bhi.n	800136c <__aeabi_ddiv+0x50c>
 800136a:	e65b      	b.n	8001024 <__aeabi_ddiv+0x1c4>
 800136c:	2302      	movs	r3, #2
 800136e:	425b      	negs	r3, r3
 8001370:	469c      	mov	ip, r3
 8001372:	9b00      	ldr	r3, [sp, #0]
 8001374:	44e0      	add	r8, ip
 8001376:	469c      	mov	ip, r3
 8001378:	4465      	add	r5, ip
 800137a:	429d      	cmp	r5, r3
 800137c:	419b      	sbcs	r3, r3
 800137e:	425b      	negs	r3, r3
 8001380:	191b      	adds	r3, r3, r4
 8001382:	18c0      	adds	r0, r0, r3
 8001384:	e64f      	b.n	8001026 <__aeabi_ddiv+0x1c6>
 8001386:	42b2      	cmp	r2, r6
 8001388:	d800      	bhi.n	800138c <__aeabi_ddiv+0x52c>
 800138a:	e612      	b.n	8000fb2 <__aeabi_ddiv+0x152>
 800138c:	1e83      	subs	r3, r0, #2
 800138e:	1936      	adds	r6, r6, r4
 8001390:	e60f      	b.n	8000fb2 <__aeabi_ddiv+0x152>
 8001392:	428a      	cmp	r2, r1
 8001394:	d800      	bhi.n	8001398 <__aeabi_ddiv+0x538>
 8001396:	e5fa      	b.n	8000f8e <__aeabi_ddiv+0x12e>
 8001398:	1e83      	subs	r3, r0, #2
 800139a:	4698      	mov	r8, r3
 800139c:	1909      	adds	r1, r1, r4
 800139e:	e5f6      	b.n	8000f8e <__aeabi_ddiv+0x12e>
 80013a0:	4b24      	ldr	r3, [pc, #144]	; (8001434 <__aeabi_ddiv+0x5d4>)
 80013a2:	0028      	movs	r0, r5
 80013a4:	445b      	add	r3, fp
 80013a6:	4641      	mov	r1, r8
 80013a8:	409d      	lsls	r5, r3
 80013aa:	4099      	lsls	r1, r3
 80013ac:	40d0      	lsrs	r0, r2
 80013ae:	1e6b      	subs	r3, r5, #1
 80013b0:	419d      	sbcs	r5, r3
 80013b2:	4643      	mov	r3, r8
 80013b4:	4301      	orrs	r1, r0
 80013b6:	4329      	orrs	r1, r5
 80013b8:	40d3      	lsrs	r3, r2
 80013ba:	074a      	lsls	r2, r1, #29
 80013bc:	d100      	bne.n	80013c0 <__aeabi_ddiv+0x560>
 80013be:	e755      	b.n	800126c <__aeabi_ddiv+0x40c>
 80013c0:	220f      	movs	r2, #15
 80013c2:	400a      	ands	r2, r1
 80013c4:	2a04      	cmp	r2, #4
 80013c6:	d000      	beq.n	80013ca <__aeabi_ddiv+0x56a>
 80013c8:	e74a      	b.n	8001260 <__aeabi_ddiv+0x400>
 80013ca:	e74f      	b.n	800126c <__aeabi_ddiv+0x40c>
 80013cc:	0015      	movs	r5, r2
 80013ce:	4286      	cmp	r6, r0
 80013d0:	d000      	beq.n	80013d4 <__aeabi_ddiv+0x574>
 80013d2:	e66d      	b.n	80010b0 <__aeabi_ddiv+0x250>
 80013d4:	9a00      	ldr	r2, [sp, #0]
 80013d6:	429a      	cmp	r2, r3
 80013d8:	d000      	beq.n	80013dc <__aeabi_ddiv+0x57c>
 80013da:	e669      	b.n	80010b0 <__aeabi_ddiv+0x250>
 80013dc:	e66a      	b.n	80010b4 <__aeabi_ddiv+0x254>
 80013de:	4b16      	ldr	r3, [pc, #88]	; (8001438 <__aeabi_ddiv+0x5d8>)
 80013e0:	445b      	add	r3, fp
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	dc00      	bgt.n	80013e8 <__aeabi_ddiv+0x588>
 80013e6:	e713      	b.n	8001210 <__aeabi_ddiv+0x3b0>
 80013e8:	2501      	movs	r5, #1
 80013ea:	2100      	movs	r1, #0
 80013ec:	44a8      	add	r8, r5
 80013ee:	e66a      	b.n	80010c6 <__aeabi_ddiv+0x266>
 80013f0:	075d      	lsls	r5, r3, #29
 80013f2:	025b      	lsls	r3, r3, #9
 80013f4:	0b1a      	lsrs	r2, r3, #12
 80013f6:	08c9      	lsrs	r1, r1, #3
 80013f8:	2300      	movs	r3, #0
 80013fa:	430d      	orrs	r5, r1
 80013fc:	e587      	b.n	8000f0e <__aeabi_ddiv+0xae>
 80013fe:	9900      	ldr	r1, [sp, #0]
 8001400:	3d02      	subs	r5, #2
 8001402:	004a      	lsls	r2, r1, #1
 8001404:	428a      	cmp	r2, r1
 8001406:	41bf      	sbcs	r7, r7
 8001408:	427f      	negs	r7, r7
 800140a:	193f      	adds	r7, r7, r4
 800140c:	19f6      	adds	r6, r6, r7
 800140e:	9200      	str	r2, [sp, #0]
 8001410:	e7dd      	b.n	80013ce <__aeabi_ddiv+0x56e>
 8001412:	2280      	movs	r2, #128	; 0x80
 8001414:	4643      	mov	r3, r8
 8001416:	0312      	lsls	r2, r2, #12
 8001418:	431a      	orrs	r2, r3
 800141a:	0312      	lsls	r2, r2, #12
 800141c:	4b03      	ldr	r3, [pc, #12]	; (800142c <__aeabi_ddiv+0x5cc>)
 800141e:	0b12      	lsrs	r2, r2, #12
 8001420:	e575      	b.n	8000f0e <__aeabi_ddiv+0xae>
 8001422:	9900      	ldr	r1, [sp, #0]
 8001424:	4299      	cmp	r1, r3
 8001426:	d3ea      	bcc.n	80013fe <__aeabi_ddiv+0x59e>
 8001428:	0015      	movs	r5, r2
 800142a:	e7d3      	b.n	80013d4 <__aeabi_ddiv+0x574>
 800142c:	000007ff 	.word	0x000007ff
 8001430:	0000043e 	.word	0x0000043e
 8001434:	0000041e 	.word	0x0000041e
 8001438:	000003ff 	.word	0x000003ff

0800143c <__eqdf2>:
 800143c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800143e:	464e      	mov	r6, r9
 8001440:	4645      	mov	r5, r8
 8001442:	46de      	mov	lr, fp
 8001444:	4657      	mov	r7, sl
 8001446:	4690      	mov	r8, r2
 8001448:	b5e0      	push	{r5, r6, r7, lr}
 800144a:	0017      	movs	r7, r2
 800144c:	031a      	lsls	r2, r3, #12
 800144e:	0b12      	lsrs	r2, r2, #12
 8001450:	0005      	movs	r5, r0
 8001452:	4684      	mov	ip, r0
 8001454:	4819      	ldr	r0, [pc, #100]	; (80014bc <__eqdf2+0x80>)
 8001456:	030e      	lsls	r6, r1, #12
 8001458:	004c      	lsls	r4, r1, #1
 800145a:	4691      	mov	r9, r2
 800145c:	005a      	lsls	r2, r3, #1
 800145e:	0fdb      	lsrs	r3, r3, #31
 8001460:	469b      	mov	fp, r3
 8001462:	0b36      	lsrs	r6, r6, #12
 8001464:	0d64      	lsrs	r4, r4, #21
 8001466:	0fc9      	lsrs	r1, r1, #31
 8001468:	0d52      	lsrs	r2, r2, #21
 800146a:	4284      	cmp	r4, r0
 800146c:	d019      	beq.n	80014a2 <__eqdf2+0x66>
 800146e:	4282      	cmp	r2, r0
 8001470:	d010      	beq.n	8001494 <__eqdf2+0x58>
 8001472:	2001      	movs	r0, #1
 8001474:	4294      	cmp	r4, r2
 8001476:	d10e      	bne.n	8001496 <__eqdf2+0x5a>
 8001478:	454e      	cmp	r6, r9
 800147a:	d10c      	bne.n	8001496 <__eqdf2+0x5a>
 800147c:	2001      	movs	r0, #1
 800147e:	45c4      	cmp	ip, r8
 8001480:	d109      	bne.n	8001496 <__eqdf2+0x5a>
 8001482:	4559      	cmp	r1, fp
 8001484:	d017      	beq.n	80014b6 <__eqdf2+0x7a>
 8001486:	2c00      	cmp	r4, #0
 8001488:	d105      	bne.n	8001496 <__eqdf2+0x5a>
 800148a:	0030      	movs	r0, r6
 800148c:	4328      	orrs	r0, r5
 800148e:	1e43      	subs	r3, r0, #1
 8001490:	4198      	sbcs	r0, r3
 8001492:	e000      	b.n	8001496 <__eqdf2+0x5a>
 8001494:	2001      	movs	r0, #1
 8001496:	bcf0      	pop	{r4, r5, r6, r7}
 8001498:	46bb      	mov	fp, r7
 800149a:	46b2      	mov	sl, r6
 800149c:	46a9      	mov	r9, r5
 800149e:	46a0      	mov	r8, r4
 80014a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80014a2:	0033      	movs	r3, r6
 80014a4:	2001      	movs	r0, #1
 80014a6:	432b      	orrs	r3, r5
 80014a8:	d1f5      	bne.n	8001496 <__eqdf2+0x5a>
 80014aa:	42a2      	cmp	r2, r4
 80014ac:	d1f3      	bne.n	8001496 <__eqdf2+0x5a>
 80014ae:	464b      	mov	r3, r9
 80014b0:	433b      	orrs	r3, r7
 80014b2:	d1f0      	bne.n	8001496 <__eqdf2+0x5a>
 80014b4:	e7e2      	b.n	800147c <__eqdf2+0x40>
 80014b6:	2000      	movs	r0, #0
 80014b8:	e7ed      	b.n	8001496 <__eqdf2+0x5a>
 80014ba:	46c0      	nop			; (mov r8, r8)
 80014bc:	000007ff 	.word	0x000007ff

080014c0 <__gedf2>:
 80014c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014c2:	4647      	mov	r7, r8
 80014c4:	46ce      	mov	lr, r9
 80014c6:	0004      	movs	r4, r0
 80014c8:	0018      	movs	r0, r3
 80014ca:	0016      	movs	r6, r2
 80014cc:	031b      	lsls	r3, r3, #12
 80014ce:	0b1b      	lsrs	r3, r3, #12
 80014d0:	4d2d      	ldr	r5, [pc, #180]	; (8001588 <__gedf2+0xc8>)
 80014d2:	004a      	lsls	r2, r1, #1
 80014d4:	4699      	mov	r9, r3
 80014d6:	b580      	push	{r7, lr}
 80014d8:	0043      	lsls	r3, r0, #1
 80014da:	030f      	lsls	r7, r1, #12
 80014dc:	46a4      	mov	ip, r4
 80014de:	46b0      	mov	r8, r6
 80014e0:	0b3f      	lsrs	r7, r7, #12
 80014e2:	0d52      	lsrs	r2, r2, #21
 80014e4:	0fc9      	lsrs	r1, r1, #31
 80014e6:	0d5b      	lsrs	r3, r3, #21
 80014e8:	0fc0      	lsrs	r0, r0, #31
 80014ea:	42aa      	cmp	r2, r5
 80014ec:	d021      	beq.n	8001532 <__gedf2+0x72>
 80014ee:	42ab      	cmp	r3, r5
 80014f0:	d013      	beq.n	800151a <__gedf2+0x5a>
 80014f2:	2a00      	cmp	r2, #0
 80014f4:	d122      	bne.n	800153c <__gedf2+0x7c>
 80014f6:	433c      	orrs	r4, r7
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d102      	bne.n	8001502 <__gedf2+0x42>
 80014fc:	464d      	mov	r5, r9
 80014fe:	432e      	orrs	r6, r5
 8001500:	d022      	beq.n	8001548 <__gedf2+0x88>
 8001502:	2c00      	cmp	r4, #0
 8001504:	d010      	beq.n	8001528 <__gedf2+0x68>
 8001506:	4281      	cmp	r1, r0
 8001508:	d022      	beq.n	8001550 <__gedf2+0x90>
 800150a:	2002      	movs	r0, #2
 800150c:	3901      	subs	r1, #1
 800150e:	4008      	ands	r0, r1
 8001510:	3801      	subs	r0, #1
 8001512:	bcc0      	pop	{r6, r7}
 8001514:	46b9      	mov	r9, r7
 8001516:	46b0      	mov	r8, r6
 8001518:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800151a:	464d      	mov	r5, r9
 800151c:	432e      	orrs	r6, r5
 800151e:	d129      	bne.n	8001574 <__gedf2+0xb4>
 8001520:	2a00      	cmp	r2, #0
 8001522:	d1f0      	bne.n	8001506 <__gedf2+0x46>
 8001524:	433c      	orrs	r4, r7
 8001526:	d1ee      	bne.n	8001506 <__gedf2+0x46>
 8001528:	2800      	cmp	r0, #0
 800152a:	d1f2      	bne.n	8001512 <__gedf2+0x52>
 800152c:	2001      	movs	r0, #1
 800152e:	4240      	negs	r0, r0
 8001530:	e7ef      	b.n	8001512 <__gedf2+0x52>
 8001532:	003d      	movs	r5, r7
 8001534:	4325      	orrs	r5, r4
 8001536:	d11d      	bne.n	8001574 <__gedf2+0xb4>
 8001538:	4293      	cmp	r3, r2
 800153a:	d0ee      	beq.n	800151a <__gedf2+0x5a>
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1e2      	bne.n	8001506 <__gedf2+0x46>
 8001540:	464c      	mov	r4, r9
 8001542:	4326      	orrs	r6, r4
 8001544:	d1df      	bne.n	8001506 <__gedf2+0x46>
 8001546:	e7e0      	b.n	800150a <__gedf2+0x4a>
 8001548:	2000      	movs	r0, #0
 800154a:	2c00      	cmp	r4, #0
 800154c:	d0e1      	beq.n	8001512 <__gedf2+0x52>
 800154e:	e7dc      	b.n	800150a <__gedf2+0x4a>
 8001550:	429a      	cmp	r2, r3
 8001552:	dc0a      	bgt.n	800156a <__gedf2+0xaa>
 8001554:	dbe8      	blt.n	8001528 <__gedf2+0x68>
 8001556:	454f      	cmp	r7, r9
 8001558:	d8d7      	bhi.n	800150a <__gedf2+0x4a>
 800155a:	d00e      	beq.n	800157a <__gedf2+0xba>
 800155c:	2000      	movs	r0, #0
 800155e:	454f      	cmp	r7, r9
 8001560:	d2d7      	bcs.n	8001512 <__gedf2+0x52>
 8001562:	2900      	cmp	r1, #0
 8001564:	d0e2      	beq.n	800152c <__gedf2+0x6c>
 8001566:	0008      	movs	r0, r1
 8001568:	e7d3      	b.n	8001512 <__gedf2+0x52>
 800156a:	4243      	negs	r3, r0
 800156c:	4158      	adcs	r0, r3
 800156e:	0040      	lsls	r0, r0, #1
 8001570:	3801      	subs	r0, #1
 8001572:	e7ce      	b.n	8001512 <__gedf2+0x52>
 8001574:	2002      	movs	r0, #2
 8001576:	4240      	negs	r0, r0
 8001578:	e7cb      	b.n	8001512 <__gedf2+0x52>
 800157a:	45c4      	cmp	ip, r8
 800157c:	d8c5      	bhi.n	800150a <__gedf2+0x4a>
 800157e:	2000      	movs	r0, #0
 8001580:	45c4      	cmp	ip, r8
 8001582:	d2c6      	bcs.n	8001512 <__gedf2+0x52>
 8001584:	e7ed      	b.n	8001562 <__gedf2+0xa2>
 8001586:	46c0      	nop			; (mov r8, r8)
 8001588:	000007ff 	.word	0x000007ff

0800158c <__ledf2>:
 800158c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800158e:	4647      	mov	r7, r8
 8001590:	46ce      	mov	lr, r9
 8001592:	0004      	movs	r4, r0
 8001594:	0018      	movs	r0, r3
 8001596:	0016      	movs	r6, r2
 8001598:	031b      	lsls	r3, r3, #12
 800159a:	0b1b      	lsrs	r3, r3, #12
 800159c:	4d2c      	ldr	r5, [pc, #176]	; (8001650 <__ledf2+0xc4>)
 800159e:	004a      	lsls	r2, r1, #1
 80015a0:	4699      	mov	r9, r3
 80015a2:	b580      	push	{r7, lr}
 80015a4:	0043      	lsls	r3, r0, #1
 80015a6:	030f      	lsls	r7, r1, #12
 80015a8:	46a4      	mov	ip, r4
 80015aa:	46b0      	mov	r8, r6
 80015ac:	0b3f      	lsrs	r7, r7, #12
 80015ae:	0d52      	lsrs	r2, r2, #21
 80015b0:	0fc9      	lsrs	r1, r1, #31
 80015b2:	0d5b      	lsrs	r3, r3, #21
 80015b4:	0fc0      	lsrs	r0, r0, #31
 80015b6:	42aa      	cmp	r2, r5
 80015b8:	d00d      	beq.n	80015d6 <__ledf2+0x4a>
 80015ba:	42ab      	cmp	r3, r5
 80015bc:	d010      	beq.n	80015e0 <__ledf2+0x54>
 80015be:	2a00      	cmp	r2, #0
 80015c0:	d127      	bne.n	8001612 <__ledf2+0x86>
 80015c2:	433c      	orrs	r4, r7
 80015c4:	2b00      	cmp	r3, #0
 80015c6:	d111      	bne.n	80015ec <__ledf2+0x60>
 80015c8:	464d      	mov	r5, r9
 80015ca:	432e      	orrs	r6, r5
 80015cc:	d10e      	bne.n	80015ec <__ledf2+0x60>
 80015ce:	2000      	movs	r0, #0
 80015d0:	2c00      	cmp	r4, #0
 80015d2:	d015      	beq.n	8001600 <__ledf2+0x74>
 80015d4:	e00e      	b.n	80015f4 <__ledf2+0x68>
 80015d6:	003d      	movs	r5, r7
 80015d8:	4325      	orrs	r5, r4
 80015da:	d110      	bne.n	80015fe <__ledf2+0x72>
 80015dc:	4293      	cmp	r3, r2
 80015de:	d118      	bne.n	8001612 <__ledf2+0x86>
 80015e0:	464d      	mov	r5, r9
 80015e2:	432e      	orrs	r6, r5
 80015e4:	d10b      	bne.n	80015fe <__ledf2+0x72>
 80015e6:	2a00      	cmp	r2, #0
 80015e8:	d102      	bne.n	80015f0 <__ledf2+0x64>
 80015ea:	433c      	orrs	r4, r7
 80015ec:	2c00      	cmp	r4, #0
 80015ee:	d00b      	beq.n	8001608 <__ledf2+0x7c>
 80015f0:	4281      	cmp	r1, r0
 80015f2:	d014      	beq.n	800161e <__ledf2+0x92>
 80015f4:	2002      	movs	r0, #2
 80015f6:	3901      	subs	r1, #1
 80015f8:	4008      	ands	r0, r1
 80015fa:	3801      	subs	r0, #1
 80015fc:	e000      	b.n	8001600 <__ledf2+0x74>
 80015fe:	2002      	movs	r0, #2
 8001600:	bcc0      	pop	{r6, r7}
 8001602:	46b9      	mov	r9, r7
 8001604:	46b0      	mov	r8, r6
 8001606:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001608:	2800      	cmp	r0, #0
 800160a:	d1f9      	bne.n	8001600 <__ledf2+0x74>
 800160c:	2001      	movs	r0, #1
 800160e:	4240      	negs	r0, r0
 8001610:	e7f6      	b.n	8001600 <__ledf2+0x74>
 8001612:	2b00      	cmp	r3, #0
 8001614:	d1ec      	bne.n	80015f0 <__ledf2+0x64>
 8001616:	464c      	mov	r4, r9
 8001618:	4326      	orrs	r6, r4
 800161a:	d1e9      	bne.n	80015f0 <__ledf2+0x64>
 800161c:	e7ea      	b.n	80015f4 <__ledf2+0x68>
 800161e:	429a      	cmp	r2, r3
 8001620:	dd04      	ble.n	800162c <__ledf2+0xa0>
 8001622:	4243      	negs	r3, r0
 8001624:	4158      	adcs	r0, r3
 8001626:	0040      	lsls	r0, r0, #1
 8001628:	3801      	subs	r0, #1
 800162a:	e7e9      	b.n	8001600 <__ledf2+0x74>
 800162c:	429a      	cmp	r2, r3
 800162e:	dbeb      	blt.n	8001608 <__ledf2+0x7c>
 8001630:	454f      	cmp	r7, r9
 8001632:	d8df      	bhi.n	80015f4 <__ledf2+0x68>
 8001634:	d006      	beq.n	8001644 <__ledf2+0xb8>
 8001636:	2000      	movs	r0, #0
 8001638:	454f      	cmp	r7, r9
 800163a:	d2e1      	bcs.n	8001600 <__ledf2+0x74>
 800163c:	2900      	cmp	r1, #0
 800163e:	d0e5      	beq.n	800160c <__ledf2+0x80>
 8001640:	0008      	movs	r0, r1
 8001642:	e7dd      	b.n	8001600 <__ledf2+0x74>
 8001644:	45c4      	cmp	ip, r8
 8001646:	d8d5      	bhi.n	80015f4 <__ledf2+0x68>
 8001648:	2000      	movs	r0, #0
 800164a:	45c4      	cmp	ip, r8
 800164c:	d2d8      	bcs.n	8001600 <__ledf2+0x74>
 800164e:	e7f5      	b.n	800163c <__ledf2+0xb0>
 8001650:	000007ff 	.word	0x000007ff

08001654 <__aeabi_dmul>:
 8001654:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001656:	4645      	mov	r5, r8
 8001658:	46de      	mov	lr, fp
 800165a:	4657      	mov	r7, sl
 800165c:	464e      	mov	r6, r9
 800165e:	b5e0      	push	{r5, r6, r7, lr}
 8001660:	001f      	movs	r7, r3
 8001662:	030b      	lsls	r3, r1, #12
 8001664:	0b1b      	lsrs	r3, r3, #12
 8001666:	469b      	mov	fp, r3
 8001668:	004d      	lsls	r5, r1, #1
 800166a:	0fcb      	lsrs	r3, r1, #31
 800166c:	0004      	movs	r4, r0
 800166e:	4691      	mov	r9, r2
 8001670:	4698      	mov	r8, r3
 8001672:	b087      	sub	sp, #28
 8001674:	0d6d      	lsrs	r5, r5, #21
 8001676:	d100      	bne.n	800167a <__aeabi_dmul+0x26>
 8001678:	e1cd      	b.n	8001a16 <__aeabi_dmul+0x3c2>
 800167a:	4bce      	ldr	r3, [pc, #824]	; (80019b4 <__aeabi_dmul+0x360>)
 800167c:	429d      	cmp	r5, r3
 800167e:	d100      	bne.n	8001682 <__aeabi_dmul+0x2e>
 8001680:	e1e9      	b.n	8001a56 <__aeabi_dmul+0x402>
 8001682:	465a      	mov	r2, fp
 8001684:	0f43      	lsrs	r3, r0, #29
 8001686:	00d2      	lsls	r2, r2, #3
 8001688:	4313      	orrs	r3, r2
 800168a:	2280      	movs	r2, #128	; 0x80
 800168c:	0412      	lsls	r2, r2, #16
 800168e:	431a      	orrs	r2, r3
 8001690:	00c3      	lsls	r3, r0, #3
 8001692:	469a      	mov	sl, r3
 8001694:	4bc8      	ldr	r3, [pc, #800]	; (80019b8 <__aeabi_dmul+0x364>)
 8001696:	4693      	mov	fp, r2
 8001698:	469c      	mov	ip, r3
 800169a:	2300      	movs	r3, #0
 800169c:	2600      	movs	r6, #0
 800169e:	4465      	add	r5, ip
 80016a0:	9300      	str	r3, [sp, #0]
 80016a2:	033c      	lsls	r4, r7, #12
 80016a4:	007b      	lsls	r3, r7, #1
 80016a6:	4648      	mov	r0, r9
 80016a8:	0b24      	lsrs	r4, r4, #12
 80016aa:	0d5b      	lsrs	r3, r3, #21
 80016ac:	0fff      	lsrs	r7, r7, #31
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d100      	bne.n	80016b4 <__aeabi_dmul+0x60>
 80016b2:	e189      	b.n	80019c8 <__aeabi_dmul+0x374>
 80016b4:	4abf      	ldr	r2, [pc, #764]	; (80019b4 <__aeabi_dmul+0x360>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	d019      	beq.n	80016ee <__aeabi_dmul+0x9a>
 80016ba:	0f42      	lsrs	r2, r0, #29
 80016bc:	00e4      	lsls	r4, r4, #3
 80016be:	4322      	orrs	r2, r4
 80016c0:	2480      	movs	r4, #128	; 0x80
 80016c2:	0424      	lsls	r4, r4, #16
 80016c4:	4314      	orrs	r4, r2
 80016c6:	4abc      	ldr	r2, [pc, #752]	; (80019b8 <__aeabi_dmul+0x364>)
 80016c8:	2100      	movs	r1, #0
 80016ca:	4694      	mov	ip, r2
 80016cc:	4642      	mov	r2, r8
 80016ce:	4463      	add	r3, ip
 80016d0:	195b      	adds	r3, r3, r5
 80016d2:	9301      	str	r3, [sp, #4]
 80016d4:	9b01      	ldr	r3, [sp, #4]
 80016d6:	407a      	eors	r2, r7
 80016d8:	3301      	adds	r3, #1
 80016da:	00c0      	lsls	r0, r0, #3
 80016dc:	b2d2      	uxtb	r2, r2
 80016de:	9302      	str	r3, [sp, #8]
 80016e0:	2e0a      	cmp	r6, #10
 80016e2:	dd1c      	ble.n	800171e <__aeabi_dmul+0xca>
 80016e4:	003a      	movs	r2, r7
 80016e6:	2e0b      	cmp	r6, #11
 80016e8:	d05e      	beq.n	80017a8 <__aeabi_dmul+0x154>
 80016ea:	4647      	mov	r7, r8
 80016ec:	e056      	b.n	800179c <__aeabi_dmul+0x148>
 80016ee:	4649      	mov	r1, r9
 80016f0:	4bb0      	ldr	r3, [pc, #704]	; (80019b4 <__aeabi_dmul+0x360>)
 80016f2:	4321      	orrs	r1, r4
 80016f4:	18eb      	adds	r3, r5, r3
 80016f6:	9301      	str	r3, [sp, #4]
 80016f8:	2900      	cmp	r1, #0
 80016fa:	d12a      	bne.n	8001752 <__aeabi_dmul+0xfe>
 80016fc:	2080      	movs	r0, #128	; 0x80
 80016fe:	2202      	movs	r2, #2
 8001700:	0100      	lsls	r0, r0, #4
 8001702:	002b      	movs	r3, r5
 8001704:	4684      	mov	ip, r0
 8001706:	4316      	orrs	r6, r2
 8001708:	4642      	mov	r2, r8
 800170a:	4463      	add	r3, ip
 800170c:	407a      	eors	r2, r7
 800170e:	b2d2      	uxtb	r2, r2
 8001710:	9302      	str	r3, [sp, #8]
 8001712:	2e0a      	cmp	r6, #10
 8001714:	dd00      	ble.n	8001718 <__aeabi_dmul+0xc4>
 8001716:	e231      	b.n	8001b7c <__aeabi_dmul+0x528>
 8001718:	2000      	movs	r0, #0
 800171a:	2400      	movs	r4, #0
 800171c:	2102      	movs	r1, #2
 800171e:	2e02      	cmp	r6, #2
 8001720:	dc26      	bgt.n	8001770 <__aeabi_dmul+0x11c>
 8001722:	3e01      	subs	r6, #1
 8001724:	2e01      	cmp	r6, #1
 8001726:	d852      	bhi.n	80017ce <__aeabi_dmul+0x17a>
 8001728:	2902      	cmp	r1, #2
 800172a:	d04c      	beq.n	80017c6 <__aeabi_dmul+0x172>
 800172c:	2901      	cmp	r1, #1
 800172e:	d000      	beq.n	8001732 <__aeabi_dmul+0xde>
 8001730:	e118      	b.n	8001964 <__aeabi_dmul+0x310>
 8001732:	2300      	movs	r3, #0
 8001734:	2400      	movs	r4, #0
 8001736:	2500      	movs	r5, #0
 8001738:	051b      	lsls	r3, r3, #20
 800173a:	4323      	orrs	r3, r4
 800173c:	07d2      	lsls	r2, r2, #31
 800173e:	4313      	orrs	r3, r2
 8001740:	0028      	movs	r0, r5
 8001742:	0019      	movs	r1, r3
 8001744:	b007      	add	sp, #28
 8001746:	bcf0      	pop	{r4, r5, r6, r7}
 8001748:	46bb      	mov	fp, r7
 800174a:	46b2      	mov	sl, r6
 800174c:	46a9      	mov	r9, r5
 800174e:	46a0      	mov	r8, r4
 8001750:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001752:	2180      	movs	r1, #128	; 0x80
 8001754:	2203      	movs	r2, #3
 8001756:	0109      	lsls	r1, r1, #4
 8001758:	002b      	movs	r3, r5
 800175a:	468c      	mov	ip, r1
 800175c:	4316      	orrs	r6, r2
 800175e:	4642      	mov	r2, r8
 8001760:	4463      	add	r3, ip
 8001762:	407a      	eors	r2, r7
 8001764:	b2d2      	uxtb	r2, r2
 8001766:	9302      	str	r3, [sp, #8]
 8001768:	2e0a      	cmp	r6, #10
 800176a:	dd00      	ble.n	800176e <__aeabi_dmul+0x11a>
 800176c:	e228      	b.n	8001bc0 <__aeabi_dmul+0x56c>
 800176e:	2103      	movs	r1, #3
 8001770:	2501      	movs	r5, #1
 8001772:	40b5      	lsls	r5, r6
 8001774:	46ac      	mov	ip, r5
 8001776:	26a6      	movs	r6, #166	; 0xa6
 8001778:	4663      	mov	r3, ip
 800177a:	00f6      	lsls	r6, r6, #3
 800177c:	4035      	ands	r5, r6
 800177e:	4233      	tst	r3, r6
 8001780:	d10b      	bne.n	800179a <__aeabi_dmul+0x146>
 8001782:	2690      	movs	r6, #144	; 0x90
 8001784:	00b6      	lsls	r6, r6, #2
 8001786:	4233      	tst	r3, r6
 8001788:	d118      	bne.n	80017bc <__aeabi_dmul+0x168>
 800178a:	3eb9      	subs	r6, #185	; 0xb9
 800178c:	3eff      	subs	r6, #255	; 0xff
 800178e:	421e      	tst	r6, r3
 8001790:	d01d      	beq.n	80017ce <__aeabi_dmul+0x17a>
 8001792:	46a3      	mov	fp, r4
 8001794:	4682      	mov	sl, r0
 8001796:	9100      	str	r1, [sp, #0]
 8001798:	e000      	b.n	800179c <__aeabi_dmul+0x148>
 800179a:	0017      	movs	r7, r2
 800179c:	9900      	ldr	r1, [sp, #0]
 800179e:	003a      	movs	r2, r7
 80017a0:	2902      	cmp	r1, #2
 80017a2:	d010      	beq.n	80017c6 <__aeabi_dmul+0x172>
 80017a4:	465c      	mov	r4, fp
 80017a6:	4650      	mov	r0, sl
 80017a8:	2903      	cmp	r1, #3
 80017aa:	d1bf      	bne.n	800172c <__aeabi_dmul+0xd8>
 80017ac:	2380      	movs	r3, #128	; 0x80
 80017ae:	031b      	lsls	r3, r3, #12
 80017b0:	431c      	orrs	r4, r3
 80017b2:	0324      	lsls	r4, r4, #12
 80017b4:	0005      	movs	r5, r0
 80017b6:	4b7f      	ldr	r3, [pc, #508]	; (80019b4 <__aeabi_dmul+0x360>)
 80017b8:	0b24      	lsrs	r4, r4, #12
 80017ba:	e7bd      	b.n	8001738 <__aeabi_dmul+0xe4>
 80017bc:	2480      	movs	r4, #128	; 0x80
 80017be:	2200      	movs	r2, #0
 80017c0:	4b7c      	ldr	r3, [pc, #496]	; (80019b4 <__aeabi_dmul+0x360>)
 80017c2:	0324      	lsls	r4, r4, #12
 80017c4:	e7b8      	b.n	8001738 <__aeabi_dmul+0xe4>
 80017c6:	2400      	movs	r4, #0
 80017c8:	2500      	movs	r5, #0
 80017ca:	4b7a      	ldr	r3, [pc, #488]	; (80019b4 <__aeabi_dmul+0x360>)
 80017cc:	e7b4      	b.n	8001738 <__aeabi_dmul+0xe4>
 80017ce:	4653      	mov	r3, sl
 80017d0:	041e      	lsls	r6, r3, #16
 80017d2:	0c36      	lsrs	r6, r6, #16
 80017d4:	0c1f      	lsrs	r7, r3, #16
 80017d6:	0033      	movs	r3, r6
 80017d8:	0c01      	lsrs	r1, r0, #16
 80017da:	0400      	lsls	r0, r0, #16
 80017dc:	0c00      	lsrs	r0, r0, #16
 80017de:	4343      	muls	r3, r0
 80017e0:	4698      	mov	r8, r3
 80017e2:	0003      	movs	r3, r0
 80017e4:	437b      	muls	r3, r7
 80017e6:	4699      	mov	r9, r3
 80017e8:	0033      	movs	r3, r6
 80017ea:	434b      	muls	r3, r1
 80017ec:	469c      	mov	ip, r3
 80017ee:	4643      	mov	r3, r8
 80017f0:	000d      	movs	r5, r1
 80017f2:	0c1b      	lsrs	r3, r3, #16
 80017f4:	469a      	mov	sl, r3
 80017f6:	437d      	muls	r5, r7
 80017f8:	44cc      	add	ip, r9
 80017fa:	44d4      	add	ip, sl
 80017fc:	9500      	str	r5, [sp, #0]
 80017fe:	45e1      	cmp	r9, ip
 8001800:	d904      	bls.n	800180c <__aeabi_dmul+0x1b8>
 8001802:	2380      	movs	r3, #128	; 0x80
 8001804:	025b      	lsls	r3, r3, #9
 8001806:	4699      	mov	r9, r3
 8001808:	444d      	add	r5, r9
 800180a:	9500      	str	r5, [sp, #0]
 800180c:	4663      	mov	r3, ip
 800180e:	0c1b      	lsrs	r3, r3, #16
 8001810:	001d      	movs	r5, r3
 8001812:	4663      	mov	r3, ip
 8001814:	041b      	lsls	r3, r3, #16
 8001816:	469c      	mov	ip, r3
 8001818:	4643      	mov	r3, r8
 800181a:	041b      	lsls	r3, r3, #16
 800181c:	0c1b      	lsrs	r3, r3, #16
 800181e:	4698      	mov	r8, r3
 8001820:	4663      	mov	r3, ip
 8001822:	4443      	add	r3, r8
 8001824:	9303      	str	r3, [sp, #12]
 8001826:	0c23      	lsrs	r3, r4, #16
 8001828:	4698      	mov	r8, r3
 800182a:	0033      	movs	r3, r6
 800182c:	0424      	lsls	r4, r4, #16
 800182e:	0c24      	lsrs	r4, r4, #16
 8001830:	4363      	muls	r3, r4
 8001832:	469c      	mov	ip, r3
 8001834:	0023      	movs	r3, r4
 8001836:	437b      	muls	r3, r7
 8001838:	4699      	mov	r9, r3
 800183a:	4643      	mov	r3, r8
 800183c:	435e      	muls	r6, r3
 800183e:	435f      	muls	r7, r3
 8001840:	444e      	add	r6, r9
 8001842:	4663      	mov	r3, ip
 8001844:	46b2      	mov	sl, r6
 8001846:	0c1e      	lsrs	r6, r3, #16
 8001848:	4456      	add	r6, sl
 800184a:	45b1      	cmp	r9, r6
 800184c:	d903      	bls.n	8001856 <__aeabi_dmul+0x202>
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	025b      	lsls	r3, r3, #9
 8001852:	4699      	mov	r9, r3
 8001854:	444f      	add	r7, r9
 8001856:	0c33      	lsrs	r3, r6, #16
 8001858:	4699      	mov	r9, r3
 800185a:	003b      	movs	r3, r7
 800185c:	444b      	add	r3, r9
 800185e:	9305      	str	r3, [sp, #20]
 8001860:	4663      	mov	r3, ip
 8001862:	46ac      	mov	ip, r5
 8001864:	041f      	lsls	r7, r3, #16
 8001866:	0c3f      	lsrs	r7, r7, #16
 8001868:	0436      	lsls	r6, r6, #16
 800186a:	19f6      	adds	r6, r6, r7
 800186c:	44b4      	add	ip, r6
 800186e:	4663      	mov	r3, ip
 8001870:	9304      	str	r3, [sp, #16]
 8001872:	465b      	mov	r3, fp
 8001874:	0c1b      	lsrs	r3, r3, #16
 8001876:	469c      	mov	ip, r3
 8001878:	465b      	mov	r3, fp
 800187a:	041f      	lsls	r7, r3, #16
 800187c:	0c3f      	lsrs	r7, r7, #16
 800187e:	003b      	movs	r3, r7
 8001880:	4343      	muls	r3, r0
 8001882:	4699      	mov	r9, r3
 8001884:	4663      	mov	r3, ip
 8001886:	4343      	muls	r3, r0
 8001888:	469a      	mov	sl, r3
 800188a:	464b      	mov	r3, r9
 800188c:	4660      	mov	r0, ip
 800188e:	0c1b      	lsrs	r3, r3, #16
 8001890:	469b      	mov	fp, r3
 8001892:	4348      	muls	r0, r1
 8001894:	4379      	muls	r1, r7
 8001896:	4451      	add	r1, sl
 8001898:	4459      	add	r1, fp
 800189a:	458a      	cmp	sl, r1
 800189c:	d903      	bls.n	80018a6 <__aeabi_dmul+0x252>
 800189e:	2380      	movs	r3, #128	; 0x80
 80018a0:	025b      	lsls	r3, r3, #9
 80018a2:	469a      	mov	sl, r3
 80018a4:	4450      	add	r0, sl
 80018a6:	0c0b      	lsrs	r3, r1, #16
 80018a8:	469a      	mov	sl, r3
 80018aa:	464b      	mov	r3, r9
 80018ac:	041b      	lsls	r3, r3, #16
 80018ae:	0c1b      	lsrs	r3, r3, #16
 80018b0:	4699      	mov	r9, r3
 80018b2:	003b      	movs	r3, r7
 80018b4:	4363      	muls	r3, r4
 80018b6:	0409      	lsls	r1, r1, #16
 80018b8:	4645      	mov	r5, r8
 80018ba:	4449      	add	r1, r9
 80018bc:	4699      	mov	r9, r3
 80018be:	4663      	mov	r3, ip
 80018c0:	435c      	muls	r4, r3
 80018c2:	436b      	muls	r3, r5
 80018c4:	469c      	mov	ip, r3
 80018c6:	464b      	mov	r3, r9
 80018c8:	0c1b      	lsrs	r3, r3, #16
 80018ca:	4698      	mov	r8, r3
 80018cc:	436f      	muls	r7, r5
 80018ce:	193f      	adds	r7, r7, r4
 80018d0:	4447      	add	r7, r8
 80018d2:	4450      	add	r0, sl
 80018d4:	42bc      	cmp	r4, r7
 80018d6:	d903      	bls.n	80018e0 <__aeabi_dmul+0x28c>
 80018d8:	2380      	movs	r3, #128	; 0x80
 80018da:	025b      	lsls	r3, r3, #9
 80018dc:	4698      	mov	r8, r3
 80018de:	44c4      	add	ip, r8
 80018e0:	9b04      	ldr	r3, [sp, #16]
 80018e2:	9d00      	ldr	r5, [sp, #0]
 80018e4:	4698      	mov	r8, r3
 80018e6:	4445      	add	r5, r8
 80018e8:	42b5      	cmp	r5, r6
 80018ea:	41b6      	sbcs	r6, r6
 80018ec:	4273      	negs	r3, r6
 80018ee:	4698      	mov	r8, r3
 80018f0:	464b      	mov	r3, r9
 80018f2:	041e      	lsls	r6, r3, #16
 80018f4:	9b05      	ldr	r3, [sp, #20]
 80018f6:	043c      	lsls	r4, r7, #16
 80018f8:	4699      	mov	r9, r3
 80018fa:	0c36      	lsrs	r6, r6, #16
 80018fc:	19a4      	adds	r4, r4, r6
 80018fe:	444c      	add	r4, r9
 8001900:	46a1      	mov	r9, r4
 8001902:	4683      	mov	fp, r0
 8001904:	186e      	adds	r6, r5, r1
 8001906:	44c1      	add	r9, r8
 8001908:	428e      	cmp	r6, r1
 800190a:	4189      	sbcs	r1, r1
 800190c:	44cb      	add	fp, r9
 800190e:	465d      	mov	r5, fp
 8001910:	4249      	negs	r1, r1
 8001912:	186d      	adds	r5, r5, r1
 8001914:	429c      	cmp	r4, r3
 8001916:	41a4      	sbcs	r4, r4
 8001918:	45c1      	cmp	r9, r8
 800191a:	419b      	sbcs	r3, r3
 800191c:	4583      	cmp	fp, r0
 800191e:	4180      	sbcs	r0, r0
 8001920:	428d      	cmp	r5, r1
 8001922:	4189      	sbcs	r1, r1
 8001924:	425b      	negs	r3, r3
 8001926:	4264      	negs	r4, r4
 8001928:	431c      	orrs	r4, r3
 800192a:	4240      	negs	r0, r0
 800192c:	9b03      	ldr	r3, [sp, #12]
 800192e:	4249      	negs	r1, r1
 8001930:	4301      	orrs	r1, r0
 8001932:	0270      	lsls	r0, r6, #9
 8001934:	0c3f      	lsrs	r7, r7, #16
 8001936:	4318      	orrs	r0, r3
 8001938:	19e4      	adds	r4, r4, r7
 800193a:	1e47      	subs	r7, r0, #1
 800193c:	41b8      	sbcs	r0, r7
 800193e:	1864      	adds	r4, r4, r1
 8001940:	4464      	add	r4, ip
 8001942:	0df6      	lsrs	r6, r6, #23
 8001944:	0261      	lsls	r1, r4, #9
 8001946:	4330      	orrs	r0, r6
 8001948:	0dec      	lsrs	r4, r5, #23
 800194a:	026e      	lsls	r6, r5, #9
 800194c:	430c      	orrs	r4, r1
 800194e:	4330      	orrs	r0, r6
 8001950:	01c9      	lsls	r1, r1, #7
 8001952:	d400      	bmi.n	8001956 <__aeabi_dmul+0x302>
 8001954:	e0f1      	b.n	8001b3a <__aeabi_dmul+0x4e6>
 8001956:	2101      	movs	r1, #1
 8001958:	0843      	lsrs	r3, r0, #1
 800195a:	4001      	ands	r1, r0
 800195c:	430b      	orrs	r3, r1
 800195e:	07e0      	lsls	r0, r4, #31
 8001960:	4318      	orrs	r0, r3
 8001962:	0864      	lsrs	r4, r4, #1
 8001964:	4915      	ldr	r1, [pc, #84]	; (80019bc <__aeabi_dmul+0x368>)
 8001966:	9b02      	ldr	r3, [sp, #8]
 8001968:	468c      	mov	ip, r1
 800196a:	4463      	add	r3, ip
 800196c:	2b00      	cmp	r3, #0
 800196e:	dc00      	bgt.n	8001972 <__aeabi_dmul+0x31e>
 8001970:	e097      	b.n	8001aa2 <__aeabi_dmul+0x44e>
 8001972:	0741      	lsls	r1, r0, #29
 8001974:	d009      	beq.n	800198a <__aeabi_dmul+0x336>
 8001976:	210f      	movs	r1, #15
 8001978:	4001      	ands	r1, r0
 800197a:	2904      	cmp	r1, #4
 800197c:	d005      	beq.n	800198a <__aeabi_dmul+0x336>
 800197e:	1d01      	adds	r1, r0, #4
 8001980:	4281      	cmp	r1, r0
 8001982:	4180      	sbcs	r0, r0
 8001984:	4240      	negs	r0, r0
 8001986:	1824      	adds	r4, r4, r0
 8001988:	0008      	movs	r0, r1
 800198a:	01e1      	lsls	r1, r4, #7
 800198c:	d506      	bpl.n	800199c <__aeabi_dmul+0x348>
 800198e:	2180      	movs	r1, #128	; 0x80
 8001990:	00c9      	lsls	r1, r1, #3
 8001992:	468c      	mov	ip, r1
 8001994:	4b0a      	ldr	r3, [pc, #40]	; (80019c0 <__aeabi_dmul+0x36c>)
 8001996:	401c      	ands	r4, r3
 8001998:	9b02      	ldr	r3, [sp, #8]
 800199a:	4463      	add	r3, ip
 800199c:	4909      	ldr	r1, [pc, #36]	; (80019c4 <__aeabi_dmul+0x370>)
 800199e:	428b      	cmp	r3, r1
 80019a0:	dd00      	ble.n	80019a4 <__aeabi_dmul+0x350>
 80019a2:	e710      	b.n	80017c6 <__aeabi_dmul+0x172>
 80019a4:	0761      	lsls	r1, r4, #29
 80019a6:	08c5      	lsrs	r5, r0, #3
 80019a8:	0264      	lsls	r4, r4, #9
 80019aa:	055b      	lsls	r3, r3, #21
 80019ac:	430d      	orrs	r5, r1
 80019ae:	0b24      	lsrs	r4, r4, #12
 80019b0:	0d5b      	lsrs	r3, r3, #21
 80019b2:	e6c1      	b.n	8001738 <__aeabi_dmul+0xe4>
 80019b4:	000007ff 	.word	0x000007ff
 80019b8:	fffffc01 	.word	0xfffffc01
 80019bc:	000003ff 	.word	0x000003ff
 80019c0:	feffffff 	.word	0xfeffffff
 80019c4:	000007fe 	.word	0x000007fe
 80019c8:	464b      	mov	r3, r9
 80019ca:	4323      	orrs	r3, r4
 80019cc:	d059      	beq.n	8001a82 <__aeabi_dmul+0x42e>
 80019ce:	2c00      	cmp	r4, #0
 80019d0:	d100      	bne.n	80019d4 <__aeabi_dmul+0x380>
 80019d2:	e0a3      	b.n	8001b1c <__aeabi_dmul+0x4c8>
 80019d4:	0020      	movs	r0, r4
 80019d6:	f000 fd2b 	bl	8002430 <__clzsi2>
 80019da:	0001      	movs	r1, r0
 80019dc:	0003      	movs	r3, r0
 80019de:	390b      	subs	r1, #11
 80019e0:	221d      	movs	r2, #29
 80019e2:	1a52      	subs	r2, r2, r1
 80019e4:	4649      	mov	r1, r9
 80019e6:	0018      	movs	r0, r3
 80019e8:	40d1      	lsrs	r1, r2
 80019ea:	464a      	mov	r2, r9
 80019ec:	3808      	subs	r0, #8
 80019ee:	4082      	lsls	r2, r0
 80019f0:	4084      	lsls	r4, r0
 80019f2:	0010      	movs	r0, r2
 80019f4:	430c      	orrs	r4, r1
 80019f6:	4a74      	ldr	r2, [pc, #464]	; (8001bc8 <__aeabi_dmul+0x574>)
 80019f8:	1aeb      	subs	r3, r5, r3
 80019fa:	4694      	mov	ip, r2
 80019fc:	4642      	mov	r2, r8
 80019fe:	4463      	add	r3, ip
 8001a00:	9301      	str	r3, [sp, #4]
 8001a02:	9b01      	ldr	r3, [sp, #4]
 8001a04:	407a      	eors	r2, r7
 8001a06:	3301      	adds	r3, #1
 8001a08:	2100      	movs	r1, #0
 8001a0a:	b2d2      	uxtb	r2, r2
 8001a0c:	9302      	str	r3, [sp, #8]
 8001a0e:	2e0a      	cmp	r6, #10
 8001a10:	dd00      	ble.n	8001a14 <__aeabi_dmul+0x3c0>
 8001a12:	e667      	b.n	80016e4 <__aeabi_dmul+0x90>
 8001a14:	e683      	b.n	800171e <__aeabi_dmul+0xca>
 8001a16:	465b      	mov	r3, fp
 8001a18:	4303      	orrs	r3, r0
 8001a1a:	469a      	mov	sl, r3
 8001a1c:	d02a      	beq.n	8001a74 <__aeabi_dmul+0x420>
 8001a1e:	465b      	mov	r3, fp
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d06d      	beq.n	8001b00 <__aeabi_dmul+0x4ac>
 8001a24:	4658      	mov	r0, fp
 8001a26:	f000 fd03 	bl	8002430 <__clzsi2>
 8001a2a:	0001      	movs	r1, r0
 8001a2c:	0003      	movs	r3, r0
 8001a2e:	390b      	subs	r1, #11
 8001a30:	221d      	movs	r2, #29
 8001a32:	1a52      	subs	r2, r2, r1
 8001a34:	0021      	movs	r1, r4
 8001a36:	0018      	movs	r0, r3
 8001a38:	465d      	mov	r5, fp
 8001a3a:	40d1      	lsrs	r1, r2
 8001a3c:	3808      	subs	r0, #8
 8001a3e:	4085      	lsls	r5, r0
 8001a40:	000a      	movs	r2, r1
 8001a42:	4084      	lsls	r4, r0
 8001a44:	432a      	orrs	r2, r5
 8001a46:	4693      	mov	fp, r2
 8001a48:	46a2      	mov	sl, r4
 8001a4a:	4d5f      	ldr	r5, [pc, #380]	; (8001bc8 <__aeabi_dmul+0x574>)
 8001a4c:	2600      	movs	r6, #0
 8001a4e:	1aed      	subs	r5, r5, r3
 8001a50:	2300      	movs	r3, #0
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	e625      	b.n	80016a2 <__aeabi_dmul+0x4e>
 8001a56:	465b      	mov	r3, fp
 8001a58:	4303      	orrs	r3, r0
 8001a5a:	469a      	mov	sl, r3
 8001a5c:	d105      	bne.n	8001a6a <__aeabi_dmul+0x416>
 8001a5e:	2300      	movs	r3, #0
 8001a60:	469b      	mov	fp, r3
 8001a62:	3302      	adds	r3, #2
 8001a64:	2608      	movs	r6, #8
 8001a66:	9300      	str	r3, [sp, #0]
 8001a68:	e61b      	b.n	80016a2 <__aeabi_dmul+0x4e>
 8001a6a:	2303      	movs	r3, #3
 8001a6c:	4682      	mov	sl, r0
 8001a6e:	260c      	movs	r6, #12
 8001a70:	9300      	str	r3, [sp, #0]
 8001a72:	e616      	b.n	80016a2 <__aeabi_dmul+0x4e>
 8001a74:	2300      	movs	r3, #0
 8001a76:	469b      	mov	fp, r3
 8001a78:	3301      	adds	r3, #1
 8001a7a:	2604      	movs	r6, #4
 8001a7c:	2500      	movs	r5, #0
 8001a7e:	9300      	str	r3, [sp, #0]
 8001a80:	e60f      	b.n	80016a2 <__aeabi_dmul+0x4e>
 8001a82:	4642      	mov	r2, r8
 8001a84:	3301      	adds	r3, #1
 8001a86:	9501      	str	r5, [sp, #4]
 8001a88:	431e      	orrs	r6, r3
 8001a8a:	9b01      	ldr	r3, [sp, #4]
 8001a8c:	407a      	eors	r2, r7
 8001a8e:	3301      	adds	r3, #1
 8001a90:	2400      	movs	r4, #0
 8001a92:	2000      	movs	r0, #0
 8001a94:	2101      	movs	r1, #1
 8001a96:	b2d2      	uxtb	r2, r2
 8001a98:	9302      	str	r3, [sp, #8]
 8001a9a:	2e0a      	cmp	r6, #10
 8001a9c:	dd00      	ble.n	8001aa0 <__aeabi_dmul+0x44c>
 8001a9e:	e621      	b.n	80016e4 <__aeabi_dmul+0x90>
 8001aa0:	e63d      	b.n	800171e <__aeabi_dmul+0xca>
 8001aa2:	2101      	movs	r1, #1
 8001aa4:	1ac9      	subs	r1, r1, r3
 8001aa6:	2938      	cmp	r1, #56	; 0x38
 8001aa8:	dd00      	ble.n	8001aac <__aeabi_dmul+0x458>
 8001aaa:	e642      	b.n	8001732 <__aeabi_dmul+0xde>
 8001aac:	291f      	cmp	r1, #31
 8001aae:	dd47      	ble.n	8001b40 <__aeabi_dmul+0x4ec>
 8001ab0:	261f      	movs	r6, #31
 8001ab2:	0025      	movs	r5, r4
 8001ab4:	4276      	negs	r6, r6
 8001ab6:	1af3      	subs	r3, r6, r3
 8001ab8:	40dd      	lsrs	r5, r3
 8001aba:	002b      	movs	r3, r5
 8001abc:	2920      	cmp	r1, #32
 8001abe:	d005      	beq.n	8001acc <__aeabi_dmul+0x478>
 8001ac0:	4942      	ldr	r1, [pc, #264]	; (8001bcc <__aeabi_dmul+0x578>)
 8001ac2:	9d02      	ldr	r5, [sp, #8]
 8001ac4:	468c      	mov	ip, r1
 8001ac6:	4465      	add	r5, ip
 8001ac8:	40ac      	lsls	r4, r5
 8001aca:	4320      	orrs	r0, r4
 8001acc:	1e41      	subs	r1, r0, #1
 8001ace:	4188      	sbcs	r0, r1
 8001ad0:	4318      	orrs	r0, r3
 8001ad2:	2307      	movs	r3, #7
 8001ad4:	001d      	movs	r5, r3
 8001ad6:	2400      	movs	r4, #0
 8001ad8:	4005      	ands	r5, r0
 8001ada:	4203      	tst	r3, r0
 8001adc:	d04a      	beq.n	8001b74 <__aeabi_dmul+0x520>
 8001ade:	230f      	movs	r3, #15
 8001ae0:	2400      	movs	r4, #0
 8001ae2:	4003      	ands	r3, r0
 8001ae4:	2b04      	cmp	r3, #4
 8001ae6:	d042      	beq.n	8001b6e <__aeabi_dmul+0x51a>
 8001ae8:	1d03      	adds	r3, r0, #4
 8001aea:	4283      	cmp	r3, r0
 8001aec:	4180      	sbcs	r0, r0
 8001aee:	4240      	negs	r0, r0
 8001af0:	1824      	adds	r4, r4, r0
 8001af2:	0018      	movs	r0, r3
 8001af4:	0223      	lsls	r3, r4, #8
 8001af6:	d53a      	bpl.n	8001b6e <__aeabi_dmul+0x51a>
 8001af8:	2301      	movs	r3, #1
 8001afa:	2400      	movs	r4, #0
 8001afc:	2500      	movs	r5, #0
 8001afe:	e61b      	b.n	8001738 <__aeabi_dmul+0xe4>
 8001b00:	f000 fc96 	bl	8002430 <__clzsi2>
 8001b04:	0001      	movs	r1, r0
 8001b06:	0003      	movs	r3, r0
 8001b08:	3115      	adds	r1, #21
 8001b0a:	3320      	adds	r3, #32
 8001b0c:	291c      	cmp	r1, #28
 8001b0e:	dd8f      	ble.n	8001a30 <__aeabi_dmul+0x3dc>
 8001b10:	3808      	subs	r0, #8
 8001b12:	2200      	movs	r2, #0
 8001b14:	4084      	lsls	r4, r0
 8001b16:	4692      	mov	sl, r2
 8001b18:	46a3      	mov	fp, r4
 8001b1a:	e796      	b.n	8001a4a <__aeabi_dmul+0x3f6>
 8001b1c:	f000 fc88 	bl	8002430 <__clzsi2>
 8001b20:	0001      	movs	r1, r0
 8001b22:	0003      	movs	r3, r0
 8001b24:	3115      	adds	r1, #21
 8001b26:	3320      	adds	r3, #32
 8001b28:	291c      	cmp	r1, #28
 8001b2a:	dc00      	bgt.n	8001b2e <__aeabi_dmul+0x4da>
 8001b2c:	e758      	b.n	80019e0 <__aeabi_dmul+0x38c>
 8001b2e:	0002      	movs	r2, r0
 8001b30:	464c      	mov	r4, r9
 8001b32:	3a08      	subs	r2, #8
 8001b34:	2000      	movs	r0, #0
 8001b36:	4094      	lsls	r4, r2
 8001b38:	e75d      	b.n	80019f6 <__aeabi_dmul+0x3a2>
 8001b3a:	9b01      	ldr	r3, [sp, #4]
 8001b3c:	9302      	str	r3, [sp, #8]
 8001b3e:	e711      	b.n	8001964 <__aeabi_dmul+0x310>
 8001b40:	4b23      	ldr	r3, [pc, #140]	; (8001bd0 <__aeabi_dmul+0x57c>)
 8001b42:	0026      	movs	r6, r4
 8001b44:	469c      	mov	ip, r3
 8001b46:	0003      	movs	r3, r0
 8001b48:	9d02      	ldr	r5, [sp, #8]
 8001b4a:	40cb      	lsrs	r3, r1
 8001b4c:	4465      	add	r5, ip
 8001b4e:	40ae      	lsls	r6, r5
 8001b50:	431e      	orrs	r6, r3
 8001b52:	0003      	movs	r3, r0
 8001b54:	40ab      	lsls	r3, r5
 8001b56:	1e58      	subs	r0, r3, #1
 8001b58:	4183      	sbcs	r3, r0
 8001b5a:	0030      	movs	r0, r6
 8001b5c:	4318      	orrs	r0, r3
 8001b5e:	40cc      	lsrs	r4, r1
 8001b60:	0743      	lsls	r3, r0, #29
 8001b62:	d0c7      	beq.n	8001af4 <__aeabi_dmul+0x4a0>
 8001b64:	230f      	movs	r3, #15
 8001b66:	4003      	ands	r3, r0
 8001b68:	2b04      	cmp	r3, #4
 8001b6a:	d1bd      	bne.n	8001ae8 <__aeabi_dmul+0x494>
 8001b6c:	e7c2      	b.n	8001af4 <__aeabi_dmul+0x4a0>
 8001b6e:	0765      	lsls	r5, r4, #29
 8001b70:	0264      	lsls	r4, r4, #9
 8001b72:	0b24      	lsrs	r4, r4, #12
 8001b74:	08c0      	lsrs	r0, r0, #3
 8001b76:	2300      	movs	r3, #0
 8001b78:	4305      	orrs	r5, r0
 8001b7a:	e5dd      	b.n	8001738 <__aeabi_dmul+0xe4>
 8001b7c:	2500      	movs	r5, #0
 8001b7e:	2302      	movs	r3, #2
 8001b80:	2e0f      	cmp	r6, #15
 8001b82:	d10c      	bne.n	8001b9e <__aeabi_dmul+0x54a>
 8001b84:	2480      	movs	r4, #128	; 0x80
 8001b86:	465b      	mov	r3, fp
 8001b88:	0324      	lsls	r4, r4, #12
 8001b8a:	4223      	tst	r3, r4
 8001b8c:	d00e      	beq.n	8001bac <__aeabi_dmul+0x558>
 8001b8e:	4221      	tst	r1, r4
 8001b90:	d10c      	bne.n	8001bac <__aeabi_dmul+0x558>
 8001b92:	430c      	orrs	r4, r1
 8001b94:	0324      	lsls	r4, r4, #12
 8001b96:	003a      	movs	r2, r7
 8001b98:	4b0e      	ldr	r3, [pc, #56]	; (8001bd4 <__aeabi_dmul+0x580>)
 8001b9a:	0b24      	lsrs	r4, r4, #12
 8001b9c:	e5cc      	b.n	8001738 <__aeabi_dmul+0xe4>
 8001b9e:	2e0b      	cmp	r6, #11
 8001ba0:	d000      	beq.n	8001ba4 <__aeabi_dmul+0x550>
 8001ba2:	e5a2      	b.n	80016ea <__aeabi_dmul+0x96>
 8001ba4:	468b      	mov	fp, r1
 8001ba6:	46aa      	mov	sl, r5
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	e5f7      	b.n	800179c <__aeabi_dmul+0x148>
 8001bac:	2480      	movs	r4, #128	; 0x80
 8001bae:	465b      	mov	r3, fp
 8001bb0:	0324      	lsls	r4, r4, #12
 8001bb2:	431c      	orrs	r4, r3
 8001bb4:	0324      	lsls	r4, r4, #12
 8001bb6:	4642      	mov	r2, r8
 8001bb8:	4655      	mov	r5, sl
 8001bba:	4b06      	ldr	r3, [pc, #24]	; (8001bd4 <__aeabi_dmul+0x580>)
 8001bbc:	0b24      	lsrs	r4, r4, #12
 8001bbe:	e5bb      	b.n	8001738 <__aeabi_dmul+0xe4>
 8001bc0:	464d      	mov	r5, r9
 8001bc2:	0021      	movs	r1, r4
 8001bc4:	2303      	movs	r3, #3
 8001bc6:	e7db      	b.n	8001b80 <__aeabi_dmul+0x52c>
 8001bc8:	fffffc0d 	.word	0xfffffc0d
 8001bcc:	0000043e 	.word	0x0000043e
 8001bd0:	0000041e 	.word	0x0000041e
 8001bd4:	000007ff 	.word	0x000007ff

08001bd8 <__aeabi_dsub>:
 8001bd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bda:	4657      	mov	r7, sl
 8001bdc:	464e      	mov	r6, r9
 8001bde:	4645      	mov	r5, r8
 8001be0:	46de      	mov	lr, fp
 8001be2:	b5e0      	push	{r5, r6, r7, lr}
 8001be4:	000d      	movs	r5, r1
 8001be6:	0004      	movs	r4, r0
 8001be8:	0019      	movs	r1, r3
 8001bea:	0010      	movs	r0, r2
 8001bec:	032b      	lsls	r3, r5, #12
 8001bee:	0a5b      	lsrs	r3, r3, #9
 8001bf0:	0f62      	lsrs	r2, r4, #29
 8001bf2:	431a      	orrs	r2, r3
 8001bf4:	00e3      	lsls	r3, r4, #3
 8001bf6:	030c      	lsls	r4, r1, #12
 8001bf8:	0a64      	lsrs	r4, r4, #9
 8001bfa:	0f47      	lsrs	r7, r0, #29
 8001bfc:	4327      	orrs	r7, r4
 8001bfe:	4cd0      	ldr	r4, [pc, #832]	; (8001f40 <__aeabi_dsub+0x368>)
 8001c00:	006e      	lsls	r6, r5, #1
 8001c02:	4691      	mov	r9, r2
 8001c04:	b083      	sub	sp, #12
 8001c06:	004a      	lsls	r2, r1, #1
 8001c08:	00c0      	lsls	r0, r0, #3
 8001c0a:	4698      	mov	r8, r3
 8001c0c:	46a2      	mov	sl, r4
 8001c0e:	0d76      	lsrs	r6, r6, #21
 8001c10:	0fed      	lsrs	r5, r5, #31
 8001c12:	0d52      	lsrs	r2, r2, #21
 8001c14:	0fc9      	lsrs	r1, r1, #31
 8001c16:	9001      	str	r0, [sp, #4]
 8001c18:	42a2      	cmp	r2, r4
 8001c1a:	d100      	bne.n	8001c1e <__aeabi_dsub+0x46>
 8001c1c:	e0b9      	b.n	8001d92 <__aeabi_dsub+0x1ba>
 8001c1e:	2401      	movs	r4, #1
 8001c20:	4061      	eors	r1, r4
 8001c22:	468b      	mov	fp, r1
 8001c24:	428d      	cmp	r5, r1
 8001c26:	d100      	bne.n	8001c2a <__aeabi_dsub+0x52>
 8001c28:	e08d      	b.n	8001d46 <__aeabi_dsub+0x16e>
 8001c2a:	1ab4      	subs	r4, r6, r2
 8001c2c:	46a4      	mov	ip, r4
 8001c2e:	2c00      	cmp	r4, #0
 8001c30:	dc00      	bgt.n	8001c34 <__aeabi_dsub+0x5c>
 8001c32:	e0b7      	b.n	8001da4 <__aeabi_dsub+0x1cc>
 8001c34:	2a00      	cmp	r2, #0
 8001c36:	d100      	bne.n	8001c3a <__aeabi_dsub+0x62>
 8001c38:	e0cb      	b.n	8001dd2 <__aeabi_dsub+0x1fa>
 8001c3a:	4ac1      	ldr	r2, [pc, #772]	; (8001f40 <__aeabi_dsub+0x368>)
 8001c3c:	4296      	cmp	r6, r2
 8001c3e:	d100      	bne.n	8001c42 <__aeabi_dsub+0x6a>
 8001c40:	e186      	b.n	8001f50 <__aeabi_dsub+0x378>
 8001c42:	2280      	movs	r2, #128	; 0x80
 8001c44:	0412      	lsls	r2, r2, #16
 8001c46:	4317      	orrs	r7, r2
 8001c48:	4662      	mov	r2, ip
 8001c4a:	2a38      	cmp	r2, #56	; 0x38
 8001c4c:	dd00      	ble.n	8001c50 <__aeabi_dsub+0x78>
 8001c4e:	e1a4      	b.n	8001f9a <__aeabi_dsub+0x3c2>
 8001c50:	2a1f      	cmp	r2, #31
 8001c52:	dd00      	ble.n	8001c56 <__aeabi_dsub+0x7e>
 8001c54:	e21d      	b.n	8002092 <__aeabi_dsub+0x4ba>
 8001c56:	4661      	mov	r1, ip
 8001c58:	2220      	movs	r2, #32
 8001c5a:	003c      	movs	r4, r7
 8001c5c:	1a52      	subs	r2, r2, r1
 8001c5e:	0001      	movs	r1, r0
 8001c60:	4090      	lsls	r0, r2
 8001c62:	4094      	lsls	r4, r2
 8001c64:	1e42      	subs	r2, r0, #1
 8001c66:	4190      	sbcs	r0, r2
 8001c68:	4662      	mov	r2, ip
 8001c6a:	46a0      	mov	r8, r4
 8001c6c:	4664      	mov	r4, ip
 8001c6e:	40d7      	lsrs	r7, r2
 8001c70:	464a      	mov	r2, r9
 8001c72:	40e1      	lsrs	r1, r4
 8001c74:	4644      	mov	r4, r8
 8001c76:	1bd2      	subs	r2, r2, r7
 8001c78:	4691      	mov	r9, r2
 8001c7a:	430c      	orrs	r4, r1
 8001c7c:	4304      	orrs	r4, r0
 8001c7e:	1b1c      	subs	r4, r3, r4
 8001c80:	42a3      	cmp	r3, r4
 8001c82:	4192      	sbcs	r2, r2
 8001c84:	464b      	mov	r3, r9
 8001c86:	4252      	negs	r2, r2
 8001c88:	1a9b      	subs	r3, r3, r2
 8001c8a:	469a      	mov	sl, r3
 8001c8c:	4653      	mov	r3, sl
 8001c8e:	021b      	lsls	r3, r3, #8
 8001c90:	d400      	bmi.n	8001c94 <__aeabi_dsub+0xbc>
 8001c92:	e12b      	b.n	8001eec <__aeabi_dsub+0x314>
 8001c94:	4653      	mov	r3, sl
 8001c96:	025a      	lsls	r2, r3, #9
 8001c98:	0a53      	lsrs	r3, r2, #9
 8001c9a:	469a      	mov	sl, r3
 8001c9c:	4653      	mov	r3, sl
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d100      	bne.n	8001ca4 <__aeabi_dsub+0xcc>
 8001ca2:	e166      	b.n	8001f72 <__aeabi_dsub+0x39a>
 8001ca4:	4650      	mov	r0, sl
 8001ca6:	f000 fbc3 	bl	8002430 <__clzsi2>
 8001caa:	0003      	movs	r3, r0
 8001cac:	3b08      	subs	r3, #8
 8001cae:	2220      	movs	r2, #32
 8001cb0:	0020      	movs	r0, r4
 8001cb2:	1ad2      	subs	r2, r2, r3
 8001cb4:	4651      	mov	r1, sl
 8001cb6:	40d0      	lsrs	r0, r2
 8001cb8:	4099      	lsls	r1, r3
 8001cba:	0002      	movs	r2, r0
 8001cbc:	409c      	lsls	r4, r3
 8001cbe:	430a      	orrs	r2, r1
 8001cc0:	429e      	cmp	r6, r3
 8001cc2:	dd00      	ble.n	8001cc6 <__aeabi_dsub+0xee>
 8001cc4:	e164      	b.n	8001f90 <__aeabi_dsub+0x3b8>
 8001cc6:	1b9b      	subs	r3, r3, r6
 8001cc8:	1c59      	adds	r1, r3, #1
 8001cca:	291f      	cmp	r1, #31
 8001ccc:	dd00      	ble.n	8001cd0 <__aeabi_dsub+0xf8>
 8001cce:	e0fe      	b.n	8001ece <__aeabi_dsub+0x2f6>
 8001cd0:	2320      	movs	r3, #32
 8001cd2:	0010      	movs	r0, r2
 8001cd4:	0026      	movs	r6, r4
 8001cd6:	1a5b      	subs	r3, r3, r1
 8001cd8:	409c      	lsls	r4, r3
 8001cda:	4098      	lsls	r0, r3
 8001cdc:	40ce      	lsrs	r6, r1
 8001cde:	40ca      	lsrs	r2, r1
 8001ce0:	1e63      	subs	r3, r4, #1
 8001ce2:	419c      	sbcs	r4, r3
 8001ce4:	4330      	orrs	r0, r6
 8001ce6:	4692      	mov	sl, r2
 8001ce8:	2600      	movs	r6, #0
 8001cea:	4304      	orrs	r4, r0
 8001cec:	0763      	lsls	r3, r4, #29
 8001cee:	d009      	beq.n	8001d04 <__aeabi_dsub+0x12c>
 8001cf0:	230f      	movs	r3, #15
 8001cf2:	4023      	ands	r3, r4
 8001cf4:	2b04      	cmp	r3, #4
 8001cf6:	d005      	beq.n	8001d04 <__aeabi_dsub+0x12c>
 8001cf8:	1d23      	adds	r3, r4, #4
 8001cfa:	42a3      	cmp	r3, r4
 8001cfc:	41a4      	sbcs	r4, r4
 8001cfe:	4264      	negs	r4, r4
 8001d00:	44a2      	add	sl, r4
 8001d02:	001c      	movs	r4, r3
 8001d04:	4653      	mov	r3, sl
 8001d06:	021b      	lsls	r3, r3, #8
 8001d08:	d400      	bmi.n	8001d0c <__aeabi_dsub+0x134>
 8001d0a:	e0f2      	b.n	8001ef2 <__aeabi_dsub+0x31a>
 8001d0c:	4b8c      	ldr	r3, [pc, #560]	; (8001f40 <__aeabi_dsub+0x368>)
 8001d0e:	3601      	adds	r6, #1
 8001d10:	429e      	cmp	r6, r3
 8001d12:	d100      	bne.n	8001d16 <__aeabi_dsub+0x13e>
 8001d14:	e10f      	b.n	8001f36 <__aeabi_dsub+0x35e>
 8001d16:	4653      	mov	r3, sl
 8001d18:	498a      	ldr	r1, [pc, #552]	; (8001f44 <__aeabi_dsub+0x36c>)
 8001d1a:	08e4      	lsrs	r4, r4, #3
 8001d1c:	400b      	ands	r3, r1
 8001d1e:	0019      	movs	r1, r3
 8001d20:	075b      	lsls	r3, r3, #29
 8001d22:	4323      	orrs	r3, r4
 8001d24:	0572      	lsls	r2, r6, #21
 8001d26:	024c      	lsls	r4, r1, #9
 8001d28:	0b24      	lsrs	r4, r4, #12
 8001d2a:	0d52      	lsrs	r2, r2, #21
 8001d2c:	0512      	lsls	r2, r2, #20
 8001d2e:	4322      	orrs	r2, r4
 8001d30:	07ed      	lsls	r5, r5, #31
 8001d32:	432a      	orrs	r2, r5
 8001d34:	0018      	movs	r0, r3
 8001d36:	0011      	movs	r1, r2
 8001d38:	b003      	add	sp, #12
 8001d3a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d3c:	46bb      	mov	fp, r7
 8001d3e:	46b2      	mov	sl, r6
 8001d40:	46a9      	mov	r9, r5
 8001d42:	46a0      	mov	r8, r4
 8001d44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d46:	1ab4      	subs	r4, r6, r2
 8001d48:	46a4      	mov	ip, r4
 8001d4a:	2c00      	cmp	r4, #0
 8001d4c:	dd59      	ble.n	8001e02 <__aeabi_dsub+0x22a>
 8001d4e:	2a00      	cmp	r2, #0
 8001d50:	d100      	bne.n	8001d54 <__aeabi_dsub+0x17c>
 8001d52:	e0b0      	b.n	8001eb6 <__aeabi_dsub+0x2de>
 8001d54:	4556      	cmp	r6, sl
 8001d56:	d100      	bne.n	8001d5a <__aeabi_dsub+0x182>
 8001d58:	e0fa      	b.n	8001f50 <__aeabi_dsub+0x378>
 8001d5a:	2280      	movs	r2, #128	; 0x80
 8001d5c:	0412      	lsls	r2, r2, #16
 8001d5e:	4317      	orrs	r7, r2
 8001d60:	4662      	mov	r2, ip
 8001d62:	2a38      	cmp	r2, #56	; 0x38
 8001d64:	dd00      	ble.n	8001d68 <__aeabi_dsub+0x190>
 8001d66:	e0d4      	b.n	8001f12 <__aeabi_dsub+0x33a>
 8001d68:	2a1f      	cmp	r2, #31
 8001d6a:	dc00      	bgt.n	8001d6e <__aeabi_dsub+0x196>
 8001d6c:	e1c0      	b.n	80020f0 <__aeabi_dsub+0x518>
 8001d6e:	0039      	movs	r1, r7
 8001d70:	3a20      	subs	r2, #32
 8001d72:	40d1      	lsrs	r1, r2
 8001d74:	4662      	mov	r2, ip
 8001d76:	2a20      	cmp	r2, #32
 8001d78:	d006      	beq.n	8001d88 <__aeabi_dsub+0x1b0>
 8001d7a:	4664      	mov	r4, ip
 8001d7c:	2240      	movs	r2, #64	; 0x40
 8001d7e:	1b12      	subs	r2, r2, r4
 8001d80:	003c      	movs	r4, r7
 8001d82:	4094      	lsls	r4, r2
 8001d84:	4304      	orrs	r4, r0
 8001d86:	9401      	str	r4, [sp, #4]
 8001d88:	9c01      	ldr	r4, [sp, #4]
 8001d8a:	1e62      	subs	r2, r4, #1
 8001d8c:	4194      	sbcs	r4, r2
 8001d8e:	430c      	orrs	r4, r1
 8001d90:	e0c3      	b.n	8001f1a <__aeabi_dsub+0x342>
 8001d92:	003c      	movs	r4, r7
 8001d94:	4304      	orrs	r4, r0
 8001d96:	d02b      	beq.n	8001df0 <__aeabi_dsub+0x218>
 8001d98:	468b      	mov	fp, r1
 8001d9a:	428d      	cmp	r5, r1
 8001d9c:	d02e      	beq.n	8001dfc <__aeabi_dsub+0x224>
 8001d9e:	4c6a      	ldr	r4, [pc, #424]	; (8001f48 <__aeabi_dsub+0x370>)
 8001da0:	46a4      	mov	ip, r4
 8001da2:	44b4      	add	ip, r6
 8001da4:	4664      	mov	r4, ip
 8001da6:	2c00      	cmp	r4, #0
 8001da8:	d05f      	beq.n	8001e6a <__aeabi_dsub+0x292>
 8001daa:	1b94      	subs	r4, r2, r6
 8001dac:	46a4      	mov	ip, r4
 8001dae:	2e00      	cmp	r6, #0
 8001db0:	d000      	beq.n	8001db4 <__aeabi_dsub+0x1dc>
 8001db2:	e120      	b.n	8001ff6 <__aeabi_dsub+0x41e>
 8001db4:	464c      	mov	r4, r9
 8001db6:	431c      	orrs	r4, r3
 8001db8:	d100      	bne.n	8001dbc <__aeabi_dsub+0x1e4>
 8001dba:	e1c7      	b.n	800214c <__aeabi_dsub+0x574>
 8001dbc:	4661      	mov	r1, ip
 8001dbe:	1e4c      	subs	r4, r1, #1
 8001dc0:	2901      	cmp	r1, #1
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x1ee>
 8001dc4:	e223      	b.n	800220e <__aeabi_dsub+0x636>
 8001dc6:	4d5e      	ldr	r5, [pc, #376]	; (8001f40 <__aeabi_dsub+0x368>)
 8001dc8:	45ac      	cmp	ip, r5
 8001dca:	d100      	bne.n	8001dce <__aeabi_dsub+0x1f6>
 8001dcc:	e1d8      	b.n	8002180 <__aeabi_dsub+0x5a8>
 8001dce:	46a4      	mov	ip, r4
 8001dd0:	e11a      	b.n	8002008 <__aeabi_dsub+0x430>
 8001dd2:	003a      	movs	r2, r7
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	d100      	bne.n	8001dda <__aeabi_dsub+0x202>
 8001dd8:	e0e4      	b.n	8001fa4 <__aeabi_dsub+0x3cc>
 8001dda:	0022      	movs	r2, r4
 8001ddc:	3a01      	subs	r2, #1
 8001dde:	2c01      	cmp	r4, #1
 8001de0:	d100      	bne.n	8001de4 <__aeabi_dsub+0x20c>
 8001de2:	e1c3      	b.n	800216c <__aeabi_dsub+0x594>
 8001de4:	4956      	ldr	r1, [pc, #344]	; (8001f40 <__aeabi_dsub+0x368>)
 8001de6:	428c      	cmp	r4, r1
 8001de8:	d100      	bne.n	8001dec <__aeabi_dsub+0x214>
 8001dea:	e0b1      	b.n	8001f50 <__aeabi_dsub+0x378>
 8001dec:	4694      	mov	ip, r2
 8001dee:	e72b      	b.n	8001c48 <__aeabi_dsub+0x70>
 8001df0:	2401      	movs	r4, #1
 8001df2:	4061      	eors	r1, r4
 8001df4:	468b      	mov	fp, r1
 8001df6:	428d      	cmp	r5, r1
 8001df8:	d000      	beq.n	8001dfc <__aeabi_dsub+0x224>
 8001dfa:	e716      	b.n	8001c2a <__aeabi_dsub+0x52>
 8001dfc:	4952      	ldr	r1, [pc, #328]	; (8001f48 <__aeabi_dsub+0x370>)
 8001dfe:	468c      	mov	ip, r1
 8001e00:	44b4      	add	ip, r6
 8001e02:	4664      	mov	r4, ip
 8001e04:	2c00      	cmp	r4, #0
 8001e06:	d100      	bne.n	8001e0a <__aeabi_dsub+0x232>
 8001e08:	e0d3      	b.n	8001fb2 <__aeabi_dsub+0x3da>
 8001e0a:	1b91      	subs	r1, r2, r6
 8001e0c:	468c      	mov	ip, r1
 8001e0e:	2e00      	cmp	r6, #0
 8001e10:	d100      	bne.n	8001e14 <__aeabi_dsub+0x23c>
 8001e12:	e15e      	b.n	80020d2 <__aeabi_dsub+0x4fa>
 8001e14:	494a      	ldr	r1, [pc, #296]	; (8001f40 <__aeabi_dsub+0x368>)
 8001e16:	428a      	cmp	r2, r1
 8001e18:	d100      	bne.n	8001e1c <__aeabi_dsub+0x244>
 8001e1a:	e1be      	b.n	800219a <__aeabi_dsub+0x5c2>
 8001e1c:	2180      	movs	r1, #128	; 0x80
 8001e1e:	464c      	mov	r4, r9
 8001e20:	0409      	lsls	r1, r1, #16
 8001e22:	430c      	orrs	r4, r1
 8001e24:	46a1      	mov	r9, r4
 8001e26:	4661      	mov	r1, ip
 8001e28:	2938      	cmp	r1, #56	; 0x38
 8001e2a:	dd00      	ble.n	8001e2e <__aeabi_dsub+0x256>
 8001e2c:	e1ba      	b.n	80021a4 <__aeabi_dsub+0x5cc>
 8001e2e:	291f      	cmp	r1, #31
 8001e30:	dd00      	ble.n	8001e34 <__aeabi_dsub+0x25c>
 8001e32:	e227      	b.n	8002284 <__aeabi_dsub+0x6ac>
 8001e34:	2420      	movs	r4, #32
 8001e36:	1a64      	subs	r4, r4, r1
 8001e38:	4649      	mov	r1, r9
 8001e3a:	40a1      	lsls	r1, r4
 8001e3c:	001e      	movs	r6, r3
 8001e3e:	4688      	mov	r8, r1
 8001e40:	4661      	mov	r1, ip
 8001e42:	40a3      	lsls	r3, r4
 8001e44:	40ce      	lsrs	r6, r1
 8001e46:	4641      	mov	r1, r8
 8001e48:	1e5c      	subs	r4, r3, #1
 8001e4a:	41a3      	sbcs	r3, r4
 8001e4c:	4331      	orrs	r1, r6
 8001e4e:	4319      	orrs	r1, r3
 8001e50:	000c      	movs	r4, r1
 8001e52:	4663      	mov	r3, ip
 8001e54:	4649      	mov	r1, r9
 8001e56:	40d9      	lsrs	r1, r3
 8001e58:	187f      	adds	r7, r7, r1
 8001e5a:	1824      	adds	r4, r4, r0
 8001e5c:	4284      	cmp	r4, r0
 8001e5e:	419b      	sbcs	r3, r3
 8001e60:	425b      	negs	r3, r3
 8001e62:	469a      	mov	sl, r3
 8001e64:	0016      	movs	r6, r2
 8001e66:	44ba      	add	sl, r7
 8001e68:	e05d      	b.n	8001f26 <__aeabi_dsub+0x34e>
 8001e6a:	4c38      	ldr	r4, [pc, #224]	; (8001f4c <__aeabi_dsub+0x374>)
 8001e6c:	1c72      	adds	r2, r6, #1
 8001e6e:	4222      	tst	r2, r4
 8001e70:	d000      	beq.n	8001e74 <__aeabi_dsub+0x29c>
 8001e72:	e0df      	b.n	8002034 <__aeabi_dsub+0x45c>
 8001e74:	464a      	mov	r2, r9
 8001e76:	431a      	orrs	r2, r3
 8001e78:	2e00      	cmp	r6, #0
 8001e7a:	d000      	beq.n	8001e7e <__aeabi_dsub+0x2a6>
 8001e7c:	e15c      	b.n	8002138 <__aeabi_dsub+0x560>
 8001e7e:	2a00      	cmp	r2, #0
 8001e80:	d100      	bne.n	8001e84 <__aeabi_dsub+0x2ac>
 8001e82:	e1cf      	b.n	8002224 <__aeabi_dsub+0x64c>
 8001e84:	003a      	movs	r2, r7
 8001e86:	4302      	orrs	r2, r0
 8001e88:	d100      	bne.n	8001e8c <__aeabi_dsub+0x2b4>
 8001e8a:	e17f      	b.n	800218c <__aeabi_dsub+0x5b4>
 8001e8c:	1a1c      	subs	r4, r3, r0
 8001e8e:	464a      	mov	r2, r9
 8001e90:	42a3      	cmp	r3, r4
 8001e92:	4189      	sbcs	r1, r1
 8001e94:	1bd2      	subs	r2, r2, r7
 8001e96:	4249      	negs	r1, r1
 8001e98:	1a52      	subs	r2, r2, r1
 8001e9a:	4692      	mov	sl, r2
 8001e9c:	0212      	lsls	r2, r2, #8
 8001e9e:	d400      	bmi.n	8001ea2 <__aeabi_dsub+0x2ca>
 8001ea0:	e20a      	b.n	80022b8 <__aeabi_dsub+0x6e0>
 8001ea2:	1ac4      	subs	r4, r0, r3
 8001ea4:	42a0      	cmp	r0, r4
 8001ea6:	4180      	sbcs	r0, r0
 8001ea8:	464b      	mov	r3, r9
 8001eaa:	4240      	negs	r0, r0
 8001eac:	1aff      	subs	r7, r7, r3
 8001eae:	1a3b      	subs	r3, r7, r0
 8001eb0:	469a      	mov	sl, r3
 8001eb2:	465d      	mov	r5, fp
 8001eb4:	e71a      	b.n	8001cec <__aeabi_dsub+0x114>
 8001eb6:	003a      	movs	r2, r7
 8001eb8:	4302      	orrs	r2, r0
 8001eba:	d073      	beq.n	8001fa4 <__aeabi_dsub+0x3cc>
 8001ebc:	0022      	movs	r2, r4
 8001ebe:	3a01      	subs	r2, #1
 8001ec0:	2c01      	cmp	r4, #1
 8001ec2:	d100      	bne.n	8001ec6 <__aeabi_dsub+0x2ee>
 8001ec4:	e0cb      	b.n	800205e <__aeabi_dsub+0x486>
 8001ec6:	4554      	cmp	r4, sl
 8001ec8:	d042      	beq.n	8001f50 <__aeabi_dsub+0x378>
 8001eca:	4694      	mov	ip, r2
 8001ecc:	e748      	b.n	8001d60 <__aeabi_dsub+0x188>
 8001ece:	0010      	movs	r0, r2
 8001ed0:	3b1f      	subs	r3, #31
 8001ed2:	40d8      	lsrs	r0, r3
 8001ed4:	2920      	cmp	r1, #32
 8001ed6:	d003      	beq.n	8001ee0 <__aeabi_dsub+0x308>
 8001ed8:	2340      	movs	r3, #64	; 0x40
 8001eda:	1a5b      	subs	r3, r3, r1
 8001edc:	409a      	lsls	r2, r3
 8001ede:	4314      	orrs	r4, r2
 8001ee0:	1e63      	subs	r3, r4, #1
 8001ee2:	419c      	sbcs	r4, r3
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	2600      	movs	r6, #0
 8001ee8:	469a      	mov	sl, r3
 8001eea:	4304      	orrs	r4, r0
 8001eec:	0763      	lsls	r3, r4, #29
 8001eee:	d000      	beq.n	8001ef2 <__aeabi_dsub+0x31a>
 8001ef0:	e6fe      	b.n	8001cf0 <__aeabi_dsub+0x118>
 8001ef2:	4652      	mov	r2, sl
 8001ef4:	08e3      	lsrs	r3, r4, #3
 8001ef6:	0752      	lsls	r2, r2, #29
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	4652      	mov	r2, sl
 8001efc:	46b4      	mov	ip, r6
 8001efe:	08d2      	lsrs	r2, r2, #3
 8001f00:	490f      	ldr	r1, [pc, #60]	; (8001f40 <__aeabi_dsub+0x368>)
 8001f02:	458c      	cmp	ip, r1
 8001f04:	d02a      	beq.n	8001f5c <__aeabi_dsub+0x384>
 8001f06:	0312      	lsls	r2, r2, #12
 8001f08:	0b14      	lsrs	r4, r2, #12
 8001f0a:	4662      	mov	r2, ip
 8001f0c:	0552      	lsls	r2, r2, #21
 8001f0e:	0d52      	lsrs	r2, r2, #21
 8001f10:	e70c      	b.n	8001d2c <__aeabi_dsub+0x154>
 8001f12:	003c      	movs	r4, r7
 8001f14:	4304      	orrs	r4, r0
 8001f16:	1e62      	subs	r2, r4, #1
 8001f18:	4194      	sbcs	r4, r2
 8001f1a:	18e4      	adds	r4, r4, r3
 8001f1c:	429c      	cmp	r4, r3
 8001f1e:	4192      	sbcs	r2, r2
 8001f20:	4252      	negs	r2, r2
 8001f22:	444a      	add	r2, r9
 8001f24:	4692      	mov	sl, r2
 8001f26:	4653      	mov	r3, sl
 8001f28:	021b      	lsls	r3, r3, #8
 8001f2a:	d5df      	bpl.n	8001eec <__aeabi_dsub+0x314>
 8001f2c:	4b04      	ldr	r3, [pc, #16]	; (8001f40 <__aeabi_dsub+0x368>)
 8001f2e:	3601      	adds	r6, #1
 8001f30:	429e      	cmp	r6, r3
 8001f32:	d000      	beq.n	8001f36 <__aeabi_dsub+0x35e>
 8001f34:	e0a0      	b.n	8002078 <__aeabi_dsub+0x4a0>
 8001f36:	0032      	movs	r2, r6
 8001f38:	2400      	movs	r4, #0
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	e6f6      	b.n	8001d2c <__aeabi_dsub+0x154>
 8001f3e:	46c0      	nop			; (mov r8, r8)
 8001f40:	000007ff 	.word	0x000007ff
 8001f44:	ff7fffff 	.word	0xff7fffff
 8001f48:	fffff801 	.word	0xfffff801
 8001f4c:	000007fe 	.word	0x000007fe
 8001f50:	08db      	lsrs	r3, r3, #3
 8001f52:	464a      	mov	r2, r9
 8001f54:	0752      	lsls	r2, r2, #29
 8001f56:	4313      	orrs	r3, r2
 8001f58:	464a      	mov	r2, r9
 8001f5a:	08d2      	lsrs	r2, r2, #3
 8001f5c:	0019      	movs	r1, r3
 8001f5e:	4311      	orrs	r1, r2
 8001f60:	d100      	bne.n	8001f64 <__aeabi_dsub+0x38c>
 8001f62:	e1b5      	b.n	80022d0 <__aeabi_dsub+0x6f8>
 8001f64:	2480      	movs	r4, #128	; 0x80
 8001f66:	0324      	lsls	r4, r4, #12
 8001f68:	4314      	orrs	r4, r2
 8001f6a:	0324      	lsls	r4, r4, #12
 8001f6c:	4ad5      	ldr	r2, [pc, #852]	; (80022c4 <__aeabi_dsub+0x6ec>)
 8001f6e:	0b24      	lsrs	r4, r4, #12
 8001f70:	e6dc      	b.n	8001d2c <__aeabi_dsub+0x154>
 8001f72:	0020      	movs	r0, r4
 8001f74:	f000 fa5c 	bl	8002430 <__clzsi2>
 8001f78:	0003      	movs	r3, r0
 8001f7a:	3318      	adds	r3, #24
 8001f7c:	2b1f      	cmp	r3, #31
 8001f7e:	dc00      	bgt.n	8001f82 <__aeabi_dsub+0x3aa>
 8001f80:	e695      	b.n	8001cae <__aeabi_dsub+0xd6>
 8001f82:	0022      	movs	r2, r4
 8001f84:	3808      	subs	r0, #8
 8001f86:	4082      	lsls	r2, r0
 8001f88:	2400      	movs	r4, #0
 8001f8a:	429e      	cmp	r6, r3
 8001f8c:	dc00      	bgt.n	8001f90 <__aeabi_dsub+0x3b8>
 8001f8e:	e69a      	b.n	8001cc6 <__aeabi_dsub+0xee>
 8001f90:	1af6      	subs	r6, r6, r3
 8001f92:	4bcd      	ldr	r3, [pc, #820]	; (80022c8 <__aeabi_dsub+0x6f0>)
 8001f94:	401a      	ands	r2, r3
 8001f96:	4692      	mov	sl, r2
 8001f98:	e6a8      	b.n	8001cec <__aeabi_dsub+0x114>
 8001f9a:	003c      	movs	r4, r7
 8001f9c:	4304      	orrs	r4, r0
 8001f9e:	1e62      	subs	r2, r4, #1
 8001fa0:	4194      	sbcs	r4, r2
 8001fa2:	e66c      	b.n	8001c7e <__aeabi_dsub+0xa6>
 8001fa4:	464a      	mov	r2, r9
 8001fa6:	08db      	lsrs	r3, r3, #3
 8001fa8:	0752      	lsls	r2, r2, #29
 8001faa:	4313      	orrs	r3, r2
 8001fac:	464a      	mov	r2, r9
 8001fae:	08d2      	lsrs	r2, r2, #3
 8001fb0:	e7a6      	b.n	8001f00 <__aeabi_dsub+0x328>
 8001fb2:	4cc6      	ldr	r4, [pc, #792]	; (80022cc <__aeabi_dsub+0x6f4>)
 8001fb4:	1c72      	adds	r2, r6, #1
 8001fb6:	4222      	tst	r2, r4
 8001fb8:	d000      	beq.n	8001fbc <__aeabi_dsub+0x3e4>
 8001fba:	e0ac      	b.n	8002116 <__aeabi_dsub+0x53e>
 8001fbc:	464a      	mov	r2, r9
 8001fbe:	431a      	orrs	r2, r3
 8001fc0:	2e00      	cmp	r6, #0
 8001fc2:	d000      	beq.n	8001fc6 <__aeabi_dsub+0x3ee>
 8001fc4:	e105      	b.n	80021d2 <__aeabi_dsub+0x5fa>
 8001fc6:	2a00      	cmp	r2, #0
 8001fc8:	d100      	bne.n	8001fcc <__aeabi_dsub+0x3f4>
 8001fca:	e156      	b.n	800227a <__aeabi_dsub+0x6a2>
 8001fcc:	003a      	movs	r2, r7
 8001fce:	4302      	orrs	r2, r0
 8001fd0:	d100      	bne.n	8001fd4 <__aeabi_dsub+0x3fc>
 8001fd2:	e0db      	b.n	800218c <__aeabi_dsub+0x5b4>
 8001fd4:	181c      	adds	r4, r3, r0
 8001fd6:	429c      	cmp	r4, r3
 8001fd8:	419b      	sbcs	r3, r3
 8001fda:	444f      	add	r7, r9
 8001fdc:	46ba      	mov	sl, r7
 8001fde:	425b      	negs	r3, r3
 8001fe0:	449a      	add	sl, r3
 8001fe2:	4653      	mov	r3, sl
 8001fe4:	021b      	lsls	r3, r3, #8
 8001fe6:	d400      	bmi.n	8001fea <__aeabi_dsub+0x412>
 8001fe8:	e780      	b.n	8001eec <__aeabi_dsub+0x314>
 8001fea:	4652      	mov	r2, sl
 8001fec:	4bb6      	ldr	r3, [pc, #728]	; (80022c8 <__aeabi_dsub+0x6f0>)
 8001fee:	2601      	movs	r6, #1
 8001ff0:	401a      	ands	r2, r3
 8001ff2:	4692      	mov	sl, r2
 8001ff4:	e77a      	b.n	8001eec <__aeabi_dsub+0x314>
 8001ff6:	4cb3      	ldr	r4, [pc, #716]	; (80022c4 <__aeabi_dsub+0x6ec>)
 8001ff8:	42a2      	cmp	r2, r4
 8001ffa:	d100      	bne.n	8001ffe <__aeabi_dsub+0x426>
 8001ffc:	e0c0      	b.n	8002180 <__aeabi_dsub+0x5a8>
 8001ffe:	2480      	movs	r4, #128	; 0x80
 8002000:	464d      	mov	r5, r9
 8002002:	0424      	lsls	r4, r4, #16
 8002004:	4325      	orrs	r5, r4
 8002006:	46a9      	mov	r9, r5
 8002008:	4664      	mov	r4, ip
 800200a:	2c38      	cmp	r4, #56	; 0x38
 800200c:	dc53      	bgt.n	80020b6 <__aeabi_dsub+0x4de>
 800200e:	4661      	mov	r1, ip
 8002010:	2c1f      	cmp	r4, #31
 8002012:	dd00      	ble.n	8002016 <__aeabi_dsub+0x43e>
 8002014:	e0cd      	b.n	80021b2 <__aeabi_dsub+0x5da>
 8002016:	2520      	movs	r5, #32
 8002018:	001e      	movs	r6, r3
 800201a:	1b2d      	subs	r5, r5, r4
 800201c:	464c      	mov	r4, r9
 800201e:	40ab      	lsls	r3, r5
 8002020:	40ac      	lsls	r4, r5
 8002022:	40ce      	lsrs	r6, r1
 8002024:	1e5d      	subs	r5, r3, #1
 8002026:	41ab      	sbcs	r3, r5
 8002028:	4334      	orrs	r4, r6
 800202a:	4323      	orrs	r3, r4
 800202c:	464c      	mov	r4, r9
 800202e:	40cc      	lsrs	r4, r1
 8002030:	1b3f      	subs	r7, r7, r4
 8002032:	e045      	b.n	80020c0 <__aeabi_dsub+0x4e8>
 8002034:	464a      	mov	r2, r9
 8002036:	1a1c      	subs	r4, r3, r0
 8002038:	1bd1      	subs	r1, r2, r7
 800203a:	42a3      	cmp	r3, r4
 800203c:	4192      	sbcs	r2, r2
 800203e:	4252      	negs	r2, r2
 8002040:	4692      	mov	sl, r2
 8002042:	000a      	movs	r2, r1
 8002044:	4651      	mov	r1, sl
 8002046:	1a52      	subs	r2, r2, r1
 8002048:	4692      	mov	sl, r2
 800204a:	0212      	lsls	r2, r2, #8
 800204c:	d500      	bpl.n	8002050 <__aeabi_dsub+0x478>
 800204e:	e083      	b.n	8002158 <__aeabi_dsub+0x580>
 8002050:	4653      	mov	r3, sl
 8002052:	4323      	orrs	r3, r4
 8002054:	d000      	beq.n	8002058 <__aeabi_dsub+0x480>
 8002056:	e621      	b.n	8001c9c <__aeabi_dsub+0xc4>
 8002058:	2200      	movs	r2, #0
 800205a:	2500      	movs	r5, #0
 800205c:	e753      	b.n	8001f06 <__aeabi_dsub+0x32e>
 800205e:	181c      	adds	r4, r3, r0
 8002060:	429c      	cmp	r4, r3
 8002062:	419b      	sbcs	r3, r3
 8002064:	444f      	add	r7, r9
 8002066:	46ba      	mov	sl, r7
 8002068:	425b      	negs	r3, r3
 800206a:	449a      	add	sl, r3
 800206c:	4653      	mov	r3, sl
 800206e:	2601      	movs	r6, #1
 8002070:	021b      	lsls	r3, r3, #8
 8002072:	d400      	bmi.n	8002076 <__aeabi_dsub+0x49e>
 8002074:	e73a      	b.n	8001eec <__aeabi_dsub+0x314>
 8002076:	2602      	movs	r6, #2
 8002078:	4652      	mov	r2, sl
 800207a:	4b93      	ldr	r3, [pc, #588]	; (80022c8 <__aeabi_dsub+0x6f0>)
 800207c:	2101      	movs	r1, #1
 800207e:	401a      	ands	r2, r3
 8002080:	0013      	movs	r3, r2
 8002082:	4021      	ands	r1, r4
 8002084:	0862      	lsrs	r2, r4, #1
 8002086:	430a      	orrs	r2, r1
 8002088:	07dc      	lsls	r4, r3, #31
 800208a:	085b      	lsrs	r3, r3, #1
 800208c:	469a      	mov	sl, r3
 800208e:	4314      	orrs	r4, r2
 8002090:	e62c      	b.n	8001cec <__aeabi_dsub+0x114>
 8002092:	0039      	movs	r1, r7
 8002094:	3a20      	subs	r2, #32
 8002096:	40d1      	lsrs	r1, r2
 8002098:	4662      	mov	r2, ip
 800209a:	2a20      	cmp	r2, #32
 800209c:	d006      	beq.n	80020ac <__aeabi_dsub+0x4d4>
 800209e:	4664      	mov	r4, ip
 80020a0:	2240      	movs	r2, #64	; 0x40
 80020a2:	1b12      	subs	r2, r2, r4
 80020a4:	003c      	movs	r4, r7
 80020a6:	4094      	lsls	r4, r2
 80020a8:	4304      	orrs	r4, r0
 80020aa:	9401      	str	r4, [sp, #4]
 80020ac:	9c01      	ldr	r4, [sp, #4]
 80020ae:	1e62      	subs	r2, r4, #1
 80020b0:	4194      	sbcs	r4, r2
 80020b2:	430c      	orrs	r4, r1
 80020b4:	e5e3      	b.n	8001c7e <__aeabi_dsub+0xa6>
 80020b6:	4649      	mov	r1, r9
 80020b8:	4319      	orrs	r1, r3
 80020ba:	000b      	movs	r3, r1
 80020bc:	1e5c      	subs	r4, r3, #1
 80020be:	41a3      	sbcs	r3, r4
 80020c0:	1ac4      	subs	r4, r0, r3
 80020c2:	42a0      	cmp	r0, r4
 80020c4:	419b      	sbcs	r3, r3
 80020c6:	425b      	negs	r3, r3
 80020c8:	1afb      	subs	r3, r7, r3
 80020ca:	469a      	mov	sl, r3
 80020cc:	465d      	mov	r5, fp
 80020ce:	0016      	movs	r6, r2
 80020d0:	e5dc      	b.n	8001c8c <__aeabi_dsub+0xb4>
 80020d2:	4649      	mov	r1, r9
 80020d4:	4319      	orrs	r1, r3
 80020d6:	d100      	bne.n	80020da <__aeabi_dsub+0x502>
 80020d8:	e0ae      	b.n	8002238 <__aeabi_dsub+0x660>
 80020da:	4661      	mov	r1, ip
 80020dc:	4664      	mov	r4, ip
 80020de:	3901      	subs	r1, #1
 80020e0:	2c01      	cmp	r4, #1
 80020e2:	d100      	bne.n	80020e6 <__aeabi_dsub+0x50e>
 80020e4:	e0e0      	b.n	80022a8 <__aeabi_dsub+0x6d0>
 80020e6:	4c77      	ldr	r4, [pc, #476]	; (80022c4 <__aeabi_dsub+0x6ec>)
 80020e8:	45a4      	cmp	ip, r4
 80020ea:	d056      	beq.n	800219a <__aeabi_dsub+0x5c2>
 80020ec:	468c      	mov	ip, r1
 80020ee:	e69a      	b.n	8001e26 <__aeabi_dsub+0x24e>
 80020f0:	4661      	mov	r1, ip
 80020f2:	2220      	movs	r2, #32
 80020f4:	003c      	movs	r4, r7
 80020f6:	1a52      	subs	r2, r2, r1
 80020f8:	4094      	lsls	r4, r2
 80020fa:	0001      	movs	r1, r0
 80020fc:	4090      	lsls	r0, r2
 80020fe:	46a0      	mov	r8, r4
 8002100:	4664      	mov	r4, ip
 8002102:	1e42      	subs	r2, r0, #1
 8002104:	4190      	sbcs	r0, r2
 8002106:	4662      	mov	r2, ip
 8002108:	40e1      	lsrs	r1, r4
 800210a:	4644      	mov	r4, r8
 800210c:	40d7      	lsrs	r7, r2
 800210e:	430c      	orrs	r4, r1
 8002110:	4304      	orrs	r4, r0
 8002112:	44b9      	add	r9, r7
 8002114:	e701      	b.n	8001f1a <__aeabi_dsub+0x342>
 8002116:	496b      	ldr	r1, [pc, #428]	; (80022c4 <__aeabi_dsub+0x6ec>)
 8002118:	428a      	cmp	r2, r1
 800211a:	d100      	bne.n	800211e <__aeabi_dsub+0x546>
 800211c:	e70c      	b.n	8001f38 <__aeabi_dsub+0x360>
 800211e:	1818      	adds	r0, r3, r0
 8002120:	4298      	cmp	r0, r3
 8002122:	419b      	sbcs	r3, r3
 8002124:	444f      	add	r7, r9
 8002126:	425b      	negs	r3, r3
 8002128:	18fb      	adds	r3, r7, r3
 800212a:	07dc      	lsls	r4, r3, #31
 800212c:	0840      	lsrs	r0, r0, #1
 800212e:	085b      	lsrs	r3, r3, #1
 8002130:	469a      	mov	sl, r3
 8002132:	0016      	movs	r6, r2
 8002134:	4304      	orrs	r4, r0
 8002136:	e6d9      	b.n	8001eec <__aeabi_dsub+0x314>
 8002138:	2a00      	cmp	r2, #0
 800213a:	d000      	beq.n	800213e <__aeabi_dsub+0x566>
 800213c:	e081      	b.n	8002242 <__aeabi_dsub+0x66a>
 800213e:	003b      	movs	r3, r7
 8002140:	4303      	orrs	r3, r0
 8002142:	d11d      	bne.n	8002180 <__aeabi_dsub+0x5a8>
 8002144:	2280      	movs	r2, #128	; 0x80
 8002146:	2500      	movs	r5, #0
 8002148:	0312      	lsls	r2, r2, #12
 800214a:	e70b      	b.n	8001f64 <__aeabi_dsub+0x38c>
 800214c:	08c0      	lsrs	r0, r0, #3
 800214e:	077b      	lsls	r3, r7, #29
 8002150:	465d      	mov	r5, fp
 8002152:	4303      	orrs	r3, r0
 8002154:	08fa      	lsrs	r2, r7, #3
 8002156:	e6d3      	b.n	8001f00 <__aeabi_dsub+0x328>
 8002158:	1ac4      	subs	r4, r0, r3
 800215a:	42a0      	cmp	r0, r4
 800215c:	4180      	sbcs	r0, r0
 800215e:	464b      	mov	r3, r9
 8002160:	4240      	negs	r0, r0
 8002162:	1aff      	subs	r7, r7, r3
 8002164:	1a3b      	subs	r3, r7, r0
 8002166:	469a      	mov	sl, r3
 8002168:	465d      	mov	r5, fp
 800216a:	e597      	b.n	8001c9c <__aeabi_dsub+0xc4>
 800216c:	1a1c      	subs	r4, r3, r0
 800216e:	464a      	mov	r2, r9
 8002170:	42a3      	cmp	r3, r4
 8002172:	419b      	sbcs	r3, r3
 8002174:	1bd7      	subs	r7, r2, r7
 8002176:	425b      	negs	r3, r3
 8002178:	1afb      	subs	r3, r7, r3
 800217a:	469a      	mov	sl, r3
 800217c:	2601      	movs	r6, #1
 800217e:	e585      	b.n	8001c8c <__aeabi_dsub+0xb4>
 8002180:	08c0      	lsrs	r0, r0, #3
 8002182:	077b      	lsls	r3, r7, #29
 8002184:	465d      	mov	r5, fp
 8002186:	4303      	orrs	r3, r0
 8002188:	08fa      	lsrs	r2, r7, #3
 800218a:	e6e7      	b.n	8001f5c <__aeabi_dsub+0x384>
 800218c:	464a      	mov	r2, r9
 800218e:	08db      	lsrs	r3, r3, #3
 8002190:	0752      	lsls	r2, r2, #29
 8002192:	4313      	orrs	r3, r2
 8002194:	464a      	mov	r2, r9
 8002196:	08d2      	lsrs	r2, r2, #3
 8002198:	e6b5      	b.n	8001f06 <__aeabi_dsub+0x32e>
 800219a:	08c0      	lsrs	r0, r0, #3
 800219c:	077b      	lsls	r3, r7, #29
 800219e:	4303      	orrs	r3, r0
 80021a0:	08fa      	lsrs	r2, r7, #3
 80021a2:	e6db      	b.n	8001f5c <__aeabi_dsub+0x384>
 80021a4:	4649      	mov	r1, r9
 80021a6:	4319      	orrs	r1, r3
 80021a8:	000b      	movs	r3, r1
 80021aa:	1e59      	subs	r1, r3, #1
 80021ac:	418b      	sbcs	r3, r1
 80021ae:	001c      	movs	r4, r3
 80021b0:	e653      	b.n	8001e5a <__aeabi_dsub+0x282>
 80021b2:	464d      	mov	r5, r9
 80021b4:	3c20      	subs	r4, #32
 80021b6:	40e5      	lsrs	r5, r4
 80021b8:	2920      	cmp	r1, #32
 80021ba:	d005      	beq.n	80021c8 <__aeabi_dsub+0x5f0>
 80021bc:	2440      	movs	r4, #64	; 0x40
 80021be:	1a64      	subs	r4, r4, r1
 80021c0:	4649      	mov	r1, r9
 80021c2:	40a1      	lsls	r1, r4
 80021c4:	430b      	orrs	r3, r1
 80021c6:	4698      	mov	r8, r3
 80021c8:	4643      	mov	r3, r8
 80021ca:	1e5c      	subs	r4, r3, #1
 80021cc:	41a3      	sbcs	r3, r4
 80021ce:	432b      	orrs	r3, r5
 80021d0:	e776      	b.n	80020c0 <__aeabi_dsub+0x4e8>
 80021d2:	2a00      	cmp	r2, #0
 80021d4:	d0e1      	beq.n	800219a <__aeabi_dsub+0x5c2>
 80021d6:	003a      	movs	r2, r7
 80021d8:	08db      	lsrs	r3, r3, #3
 80021da:	4302      	orrs	r2, r0
 80021dc:	d100      	bne.n	80021e0 <__aeabi_dsub+0x608>
 80021de:	e6b8      	b.n	8001f52 <__aeabi_dsub+0x37a>
 80021e0:	464a      	mov	r2, r9
 80021e2:	0752      	lsls	r2, r2, #29
 80021e4:	2480      	movs	r4, #128	; 0x80
 80021e6:	4313      	orrs	r3, r2
 80021e8:	464a      	mov	r2, r9
 80021ea:	0324      	lsls	r4, r4, #12
 80021ec:	08d2      	lsrs	r2, r2, #3
 80021ee:	4222      	tst	r2, r4
 80021f0:	d007      	beq.n	8002202 <__aeabi_dsub+0x62a>
 80021f2:	08fe      	lsrs	r6, r7, #3
 80021f4:	4226      	tst	r6, r4
 80021f6:	d104      	bne.n	8002202 <__aeabi_dsub+0x62a>
 80021f8:	465d      	mov	r5, fp
 80021fa:	0032      	movs	r2, r6
 80021fc:	08c3      	lsrs	r3, r0, #3
 80021fe:	077f      	lsls	r7, r7, #29
 8002200:	433b      	orrs	r3, r7
 8002202:	0f59      	lsrs	r1, r3, #29
 8002204:	00db      	lsls	r3, r3, #3
 8002206:	0749      	lsls	r1, r1, #29
 8002208:	08db      	lsrs	r3, r3, #3
 800220a:	430b      	orrs	r3, r1
 800220c:	e6a6      	b.n	8001f5c <__aeabi_dsub+0x384>
 800220e:	1ac4      	subs	r4, r0, r3
 8002210:	42a0      	cmp	r0, r4
 8002212:	4180      	sbcs	r0, r0
 8002214:	464b      	mov	r3, r9
 8002216:	4240      	negs	r0, r0
 8002218:	1aff      	subs	r7, r7, r3
 800221a:	1a3b      	subs	r3, r7, r0
 800221c:	469a      	mov	sl, r3
 800221e:	465d      	mov	r5, fp
 8002220:	2601      	movs	r6, #1
 8002222:	e533      	b.n	8001c8c <__aeabi_dsub+0xb4>
 8002224:	003b      	movs	r3, r7
 8002226:	4303      	orrs	r3, r0
 8002228:	d100      	bne.n	800222c <__aeabi_dsub+0x654>
 800222a:	e715      	b.n	8002058 <__aeabi_dsub+0x480>
 800222c:	08c0      	lsrs	r0, r0, #3
 800222e:	077b      	lsls	r3, r7, #29
 8002230:	465d      	mov	r5, fp
 8002232:	4303      	orrs	r3, r0
 8002234:	08fa      	lsrs	r2, r7, #3
 8002236:	e666      	b.n	8001f06 <__aeabi_dsub+0x32e>
 8002238:	08c0      	lsrs	r0, r0, #3
 800223a:	077b      	lsls	r3, r7, #29
 800223c:	4303      	orrs	r3, r0
 800223e:	08fa      	lsrs	r2, r7, #3
 8002240:	e65e      	b.n	8001f00 <__aeabi_dsub+0x328>
 8002242:	003a      	movs	r2, r7
 8002244:	08db      	lsrs	r3, r3, #3
 8002246:	4302      	orrs	r2, r0
 8002248:	d100      	bne.n	800224c <__aeabi_dsub+0x674>
 800224a:	e682      	b.n	8001f52 <__aeabi_dsub+0x37a>
 800224c:	464a      	mov	r2, r9
 800224e:	0752      	lsls	r2, r2, #29
 8002250:	2480      	movs	r4, #128	; 0x80
 8002252:	4313      	orrs	r3, r2
 8002254:	464a      	mov	r2, r9
 8002256:	0324      	lsls	r4, r4, #12
 8002258:	08d2      	lsrs	r2, r2, #3
 800225a:	4222      	tst	r2, r4
 800225c:	d007      	beq.n	800226e <__aeabi_dsub+0x696>
 800225e:	08fe      	lsrs	r6, r7, #3
 8002260:	4226      	tst	r6, r4
 8002262:	d104      	bne.n	800226e <__aeabi_dsub+0x696>
 8002264:	465d      	mov	r5, fp
 8002266:	0032      	movs	r2, r6
 8002268:	08c3      	lsrs	r3, r0, #3
 800226a:	077f      	lsls	r7, r7, #29
 800226c:	433b      	orrs	r3, r7
 800226e:	0f59      	lsrs	r1, r3, #29
 8002270:	00db      	lsls	r3, r3, #3
 8002272:	08db      	lsrs	r3, r3, #3
 8002274:	0749      	lsls	r1, r1, #29
 8002276:	430b      	orrs	r3, r1
 8002278:	e670      	b.n	8001f5c <__aeabi_dsub+0x384>
 800227a:	08c0      	lsrs	r0, r0, #3
 800227c:	077b      	lsls	r3, r7, #29
 800227e:	4303      	orrs	r3, r0
 8002280:	08fa      	lsrs	r2, r7, #3
 8002282:	e640      	b.n	8001f06 <__aeabi_dsub+0x32e>
 8002284:	464c      	mov	r4, r9
 8002286:	3920      	subs	r1, #32
 8002288:	40cc      	lsrs	r4, r1
 800228a:	4661      	mov	r1, ip
 800228c:	2920      	cmp	r1, #32
 800228e:	d006      	beq.n	800229e <__aeabi_dsub+0x6c6>
 8002290:	4666      	mov	r6, ip
 8002292:	2140      	movs	r1, #64	; 0x40
 8002294:	1b89      	subs	r1, r1, r6
 8002296:	464e      	mov	r6, r9
 8002298:	408e      	lsls	r6, r1
 800229a:	4333      	orrs	r3, r6
 800229c:	4698      	mov	r8, r3
 800229e:	4643      	mov	r3, r8
 80022a0:	1e59      	subs	r1, r3, #1
 80022a2:	418b      	sbcs	r3, r1
 80022a4:	431c      	orrs	r4, r3
 80022a6:	e5d8      	b.n	8001e5a <__aeabi_dsub+0x282>
 80022a8:	181c      	adds	r4, r3, r0
 80022aa:	4284      	cmp	r4, r0
 80022ac:	4180      	sbcs	r0, r0
 80022ae:	444f      	add	r7, r9
 80022b0:	46ba      	mov	sl, r7
 80022b2:	4240      	negs	r0, r0
 80022b4:	4482      	add	sl, r0
 80022b6:	e6d9      	b.n	800206c <__aeabi_dsub+0x494>
 80022b8:	4653      	mov	r3, sl
 80022ba:	4323      	orrs	r3, r4
 80022bc:	d100      	bne.n	80022c0 <__aeabi_dsub+0x6e8>
 80022be:	e6cb      	b.n	8002058 <__aeabi_dsub+0x480>
 80022c0:	e614      	b.n	8001eec <__aeabi_dsub+0x314>
 80022c2:	46c0      	nop			; (mov r8, r8)
 80022c4:	000007ff 	.word	0x000007ff
 80022c8:	ff7fffff 	.word	0xff7fffff
 80022cc:	000007fe 	.word	0x000007fe
 80022d0:	2300      	movs	r3, #0
 80022d2:	4a01      	ldr	r2, [pc, #4]	; (80022d8 <__aeabi_dsub+0x700>)
 80022d4:	001c      	movs	r4, r3
 80022d6:	e529      	b.n	8001d2c <__aeabi_dsub+0x154>
 80022d8:	000007ff 	.word	0x000007ff

080022dc <__aeabi_dcmpun>:
 80022dc:	b570      	push	{r4, r5, r6, lr}
 80022de:	0005      	movs	r5, r0
 80022e0:	480c      	ldr	r0, [pc, #48]	; (8002314 <__aeabi_dcmpun+0x38>)
 80022e2:	031c      	lsls	r4, r3, #12
 80022e4:	0016      	movs	r6, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	030a      	lsls	r2, r1, #12
 80022ea:	0049      	lsls	r1, r1, #1
 80022ec:	0b12      	lsrs	r2, r2, #12
 80022ee:	0d49      	lsrs	r1, r1, #21
 80022f0:	0b24      	lsrs	r4, r4, #12
 80022f2:	0d5b      	lsrs	r3, r3, #21
 80022f4:	4281      	cmp	r1, r0
 80022f6:	d008      	beq.n	800230a <__aeabi_dcmpun+0x2e>
 80022f8:	4a06      	ldr	r2, [pc, #24]	; (8002314 <__aeabi_dcmpun+0x38>)
 80022fa:	2000      	movs	r0, #0
 80022fc:	4293      	cmp	r3, r2
 80022fe:	d103      	bne.n	8002308 <__aeabi_dcmpun+0x2c>
 8002300:	0020      	movs	r0, r4
 8002302:	4330      	orrs	r0, r6
 8002304:	1e43      	subs	r3, r0, #1
 8002306:	4198      	sbcs	r0, r3
 8002308:	bd70      	pop	{r4, r5, r6, pc}
 800230a:	2001      	movs	r0, #1
 800230c:	432a      	orrs	r2, r5
 800230e:	d1fb      	bne.n	8002308 <__aeabi_dcmpun+0x2c>
 8002310:	e7f2      	b.n	80022f8 <__aeabi_dcmpun+0x1c>
 8002312:	46c0      	nop			; (mov r8, r8)
 8002314:	000007ff 	.word	0x000007ff

08002318 <__aeabi_d2iz>:
 8002318:	000a      	movs	r2, r1
 800231a:	b530      	push	{r4, r5, lr}
 800231c:	4c13      	ldr	r4, [pc, #76]	; (800236c <__aeabi_d2iz+0x54>)
 800231e:	0053      	lsls	r3, r2, #1
 8002320:	0309      	lsls	r1, r1, #12
 8002322:	0005      	movs	r5, r0
 8002324:	0b09      	lsrs	r1, r1, #12
 8002326:	2000      	movs	r0, #0
 8002328:	0d5b      	lsrs	r3, r3, #21
 800232a:	0fd2      	lsrs	r2, r2, #31
 800232c:	42a3      	cmp	r3, r4
 800232e:	dd04      	ble.n	800233a <__aeabi_d2iz+0x22>
 8002330:	480f      	ldr	r0, [pc, #60]	; (8002370 <__aeabi_d2iz+0x58>)
 8002332:	4283      	cmp	r3, r0
 8002334:	dd02      	ble.n	800233c <__aeabi_d2iz+0x24>
 8002336:	4b0f      	ldr	r3, [pc, #60]	; (8002374 <__aeabi_d2iz+0x5c>)
 8002338:	18d0      	adds	r0, r2, r3
 800233a:	bd30      	pop	{r4, r5, pc}
 800233c:	2080      	movs	r0, #128	; 0x80
 800233e:	0340      	lsls	r0, r0, #13
 8002340:	4301      	orrs	r1, r0
 8002342:	480d      	ldr	r0, [pc, #52]	; (8002378 <__aeabi_d2iz+0x60>)
 8002344:	1ac0      	subs	r0, r0, r3
 8002346:	281f      	cmp	r0, #31
 8002348:	dd08      	ble.n	800235c <__aeabi_d2iz+0x44>
 800234a:	480c      	ldr	r0, [pc, #48]	; (800237c <__aeabi_d2iz+0x64>)
 800234c:	1ac3      	subs	r3, r0, r3
 800234e:	40d9      	lsrs	r1, r3
 8002350:	000b      	movs	r3, r1
 8002352:	4258      	negs	r0, r3
 8002354:	2a00      	cmp	r2, #0
 8002356:	d1f0      	bne.n	800233a <__aeabi_d2iz+0x22>
 8002358:	0018      	movs	r0, r3
 800235a:	e7ee      	b.n	800233a <__aeabi_d2iz+0x22>
 800235c:	4c08      	ldr	r4, [pc, #32]	; (8002380 <__aeabi_d2iz+0x68>)
 800235e:	40c5      	lsrs	r5, r0
 8002360:	46a4      	mov	ip, r4
 8002362:	4463      	add	r3, ip
 8002364:	4099      	lsls	r1, r3
 8002366:	000b      	movs	r3, r1
 8002368:	432b      	orrs	r3, r5
 800236a:	e7f2      	b.n	8002352 <__aeabi_d2iz+0x3a>
 800236c:	000003fe 	.word	0x000003fe
 8002370:	0000041d 	.word	0x0000041d
 8002374:	7fffffff 	.word	0x7fffffff
 8002378:	00000433 	.word	0x00000433
 800237c:	00000413 	.word	0x00000413
 8002380:	fffffbed 	.word	0xfffffbed

08002384 <__aeabi_i2d>:
 8002384:	b570      	push	{r4, r5, r6, lr}
 8002386:	2800      	cmp	r0, #0
 8002388:	d016      	beq.n	80023b8 <__aeabi_i2d+0x34>
 800238a:	17c3      	asrs	r3, r0, #31
 800238c:	18c5      	adds	r5, r0, r3
 800238e:	405d      	eors	r5, r3
 8002390:	0fc4      	lsrs	r4, r0, #31
 8002392:	0028      	movs	r0, r5
 8002394:	f000 f84c 	bl	8002430 <__clzsi2>
 8002398:	4b11      	ldr	r3, [pc, #68]	; (80023e0 <__aeabi_i2d+0x5c>)
 800239a:	1a1b      	subs	r3, r3, r0
 800239c:	280a      	cmp	r0, #10
 800239e:	dc16      	bgt.n	80023ce <__aeabi_i2d+0x4a>
 80023a0:	0002      	movs	r2, r0
 80023a2:	002e      	movs	r6, r5
 80023a4:	3215      	adds	r2, #21
 80023a6:	4096      	lsls	r6, r2
 80023a8:	220b      	movs	r2, #11
 80023aa:	1a12      	subs	r2, r2, r0
 80023ac:	40d5      	lsrs	r5, r2
 80023ae:	055b      	lsls	r3, r3, #21
 80023b0:	032d      	lsls	r5, r5, #12
 80023b2:	0b2d      	lsrs	r5, r5, #12
 80023b4:	0d5b      	lsrs	r3, r3, #21
 80023b6:	e003      	b.n	80023c0 <__aeabi_i2d+0x3c>
 80023b8:	2400      	movs	r4, #0
 80023ba:	2300      	movs	r3, #0
 80023bc:	2500      	movs	r5, #0
 80023be:	2600      	movs	r6, #0
 80023c0:	051b      	lsls	r3, r3, #20
 80023c2:	432b      	orrs	r3, r5
 80023c4:	07e4      	lsls	r4, r4, #31
 80023c6:	4323      	orrs	r3, r4
 80023c8:	0030      	movs	r0, r6
 80023ca:	0019      	movs	r1, r3
 80023cc:	bd70      	pop	{r4, r5, r6, pc}
 80023ce:	380b      	subs	r0, #11
 80023d0:	4085      	lsls	r5, r0
 80023d2:	055b      	lsls	r3, r3, #21
 80023d4:	032d      	lsls	r5, r5, #12
 80023d6:	2600      	movs	r6, #0
 80023d8:	0b2d      	lsrs	r5, r5, #12
 80023da:	0d5b      	lsrs	r3, r3, #21
 80023dc:	e7f0      	b.n	80023c0 <__aeabi_i2d+0x3c>
 80023de:	46c0      	nop			; (mov r8, r8)
 80023e0:	0000041e 	.word	0x0000041e

080023e4 <__aeabi_ui2d>:
 80023e4:	b510      	push	{r4, lr}
 80023e6:	1e04      	subs	r4, r0, #0
 80023e8:	d010      	beq.n	800240c <__aeabi_ui2d+0x28>
 80023ea:	f000 f821 	bl	8002430 <__clzsi2>
 80023ee:	4b0f      	ldr	r3, [pc, #60]	; (800242c <__aeabi_ui2d+0x48>)
 80023f0:	1a1b      	subs	r3, r3, r0
 80023f2:	280a      	cmp	r0, #10
 80023f4:	dc11      	bgt.n	800241a <__aeabi_ui2d+0x36>
 80023f6:	220b      	movs	r2, #11
 80023f8:	0021      	movs	r1, r4
 80023fa:	1a12      	subs	r2, r2, r0
 80023fc:	40d1      	lsrs	r1, r2
 80023fe:	3015      	adds	r0, #21
 8002400:	030a      	lsls	r2, r1, #12
 8002402:	055b      	lsls	r3, r3, #21
 8002404:	4084      	lsls	r4, r0
 8002406:	0b12      	lsrs	r2, r2, #12
 8002408:	0d5b      	lsrs	r3, r3, #21
 800240a:	e001      	b.n	8002410 <__aeabi_ui2d+0x2c>
 800240c:	2300      	movs	r3, #0
 800240e:	2200      	movs	r2, #0
 8002410:	051b      	lsls	r3, r3, #20
 8002412:	4313      	orrs	r3, r2
 8002414:	0020      	movs	r0, r4
 8002416:	0019      	movs	r1, r3
 8002418:	bd10      	pop	{r4, pc}
 800241a:	0022      	movs	r2, r4
 800241c:	380b      	subs	r0, #11
 800241e:	4082      	lsls	r2, r0
 8002420:	055b      	lsls	r3, r3, #21
 8002422:	0312      	lsls	r2, r2, #12
 8002424:	2400      	movs	r4, #0
 8002426:	0b12      	lsrs	r2, r2, #12
 8002428:	0d5b      	lsrs	r3, r3, #21
 800242a:	e7f1      	b.n	8002410 <__aeabi_ui2d+0x2c>
 800242c:	0000041e 	.word	0x0000041e

08002430 <__clzsi2>:
 8002430:	211c      	movs	r1, #28
 8002432:	2301      	movs	r3, #1
 8002434:	041b      	lsls	r3, r3, #16
 8002436:	4298      	cmp	r0, r3
 8002438:	d301      	bcc.n	800243e <__clzsi2+0xe>
 800243a:	0c00      	lsrs	r0, r0, #16
 800243c:	3910      	subs	r1, #16
 800243e:	0a1b      	lsrs	r3, r3, #8
 8002440:	4298      	cmp	r0, r3
 8002442:	d301      	bcc.n	8002448 <__clzsi2+0x18>
 8002444:	0a00      	lsrs	r0, r0, #8
 8002446:	3908      	subs	r1, #8
 8002448:	091b      	lsrs	r3, r3, #4
 800244a:	4298      	cmp	r0, r3
 800244c:	d301      	bcc.n	8002452 <__clzsi2+0x22>
 800244e:	0900      	lsrs	r0, r0, #4
 8002450:	3904      	subs	r1, #4
 8002452:	a202      	add	r2, pc, #8	; (adr r2, 800245c <__clzsi2+0x2c>)
 8002454:	5c10      	ldrb	r0, [r2, r0]
 8002456:	1840      	adds	r0, r0, r1
 8002458:	4770      	bx	lr
 800245a:	46c0      	nop			; (mov r8, r8)
 800245c:	02020304 	.word	0x02020304
 8002460:	01010101 	.word	0x01010101
	...

0800246c <__clzdi2>:
 800246c:	b510      	push	{r4, lr}
 800246e:	2900      	cmp	r1, #0
 8002470:	d103      	bne.n	800247a <__clzdi2+0xe>
 8002472:	f7ff ffdd 	bl	8002430 <__clzsi2>
 8002476:	3020      	adds	r0, #32
 8002478:	e002      	b.n	8002480 <__clzdi2+0x14>
 800247a:	0008      	movs	r0, r1
 800247c:	f7ff ffd8 	bl	8002430 <__clzsi2>
 8002480:	bd10      	pop	{r4, pc}
 8002482:	46c0      	nop			; (mov r8, r8)

08002484 <modem_check_resp>:
extern mqtt_conf_t modem_mqtt_conf_t;

/****************************** Function Prototypes **************************************/

uint8_t modem_check_resp(const char *str,char *find_str)
{
 8002484:	b580      	push	{r7, lr}
 8002486:	b082      	sub	sp, #8
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
    if (strstr(str, find_str) != NULL)
 800248e:	683a      	ldr	r2, [r7, #0]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	0011      	movs	r1, r2
 8002494:	0018      	movs	r0, r3
 8002496:	f00b fd2a 	bl	800deee <strstr>
 800249a:	1e03      	subs	r3, r0, #0
 800249c:	d001      	beq.n	80024a2 <modem_check_resp+0x1e>
        return 1;
 800249e:	2301      	movs	r3, #1
 80024a0:	e000      	b.n	80024a4 <modem_check_resp+0x20>
    else
        return 0;
 80024a2:	2300      	movs	r3, #0
}
 80024a4:	0018      	movs	r0, r3
 80024a6:	46bd      	mov	sp, r7
 80024a8:	b002      	add	sp, #8
 80024aa:	bd80      	pop	{r7, pc}

080024ac <modem_send_msg>:
void modem_send_msg(const char* msg)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	b082      	sub	sp, #8
 80024b0:	af00      	add	r7, sp, #0
 80024b2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)msg,strlen(msg), 1000);
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	0018      	movs	r0, r3
 80024b8:	f7fd fe30 	bl	800011c <strlen>
 80024bc:	0003      	movs	r3, r0
 80024be:	b29a      	uxth	r2, r3
 80024c0:	23fa      	movs	r3, #250	; 0xfa
 80024c2:	009b      	lsls	r3, r3, #2
 80024c4:	6879      	ldr	r1, [r7, #4]
 80024c6:	4807      	ldr	r0, [pc, #28]	; (80024e4 <modem_send_msg+0x38>)
 80024c8:	f005 fa80 	bl	80079cc <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", strlen("\r\n"), 1000);
 80024cc:	23fa      	movs	r3, #250	; 0xfa
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	4905      	ldr	r1, [pc, #20]	; (80024e8 <modem_send_msg+0x3c>)
 80024d2:	4804      	ldr	r0, [pc, #16]	; (80024e4 <modem_send_msg+0x38>)
 80024d4:	2202      	movs	r2, #2
 80024d6:	f005 fa79 	bl	80079cc <HAL_UART_Transmit>
}
 80024da:	46c0      	nop			; (mov r8, r8)
 80024dc:	46bd      	mov	sp, r7
 80024de:	b002      	add	sp, #8
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	46c0      	nop			; (mov r8, r8)
 80024e4:	2000088c 	.word	0x2000088c
 80024e8:	08010980 	.word	0x08010980

080024ec <Modem_MQTT_start>:
void Modem_MQTT_start()
{
 80024ec:	b590      	push	{r4, r7, lr}
 80024ee:	b087      	sub	sp, #28
 80024f0:	af00      	add	r7, sp, #0
	osThreadDef(Mqtt_Task, Modem_MQTT_Task, osPriorityNormal, 0, 512);
 80024f2:	1d3b      	adds	r3, r7, #4
 80024f4:	4a08      	ldr	r2, [pc, #32]	; (8002518 <Modem_MQTT_start+0x2c>)
 80024f6:	ca13      	ldmia	r2!, {r0, r1, r4}
 80024f8:	c313      	stmia	r3!, {r0, r1, r4}
 80024fa:	ca03      	ldmia	r2!, {r0, r1}
 80024fc:	c303      	stmia	r3!, {r0, r1}
	Mqtt_TaskHadle = osThreadCreate(osThread(Mqtt_Task), NULL);
 80024fe:	1d3b      	adds	r3, r7, #4
 8002500:	2100      	movs	r1, #0
 8002502:	0018      	movs	r0, r3
 8002504:	f007 fb65 	bl	8009bd2 <osThreadCreate>
 8002508:	0002      	movs	r2, r0
 800250a:	4b04      	ldr	r3, [pc, #16]	; (800251c <Modem_MQTT_start+0x30>)
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	46c0      	nop			; (mov r8, r8)
 8002510:	46bd      	mov	sp, r7
 8002512:	b007      	add	sp, #28
 8002514:	bd90      	pop	{r4, r7, pc}
 8002516:	46c0      	nop			; (mov r8, r8)
 8002518:	08010990 	.word	0x08010990
 800251c:	200009b4 	.word	0x200009b4

08002520 <Modem_MQTT_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_Modem_MQTT_Task */
void Modem_MQTT_Task(void const * argument)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b085      	sub	sp, #20
 8002524:	af02      	add	r7, sp, #8
 8002526:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */

  HAL_UARTEx_ReceiveToIdle_IT(&huart1,(uint8_t*)EC200u_Rx_Buff, sizeof(EC200u_Rx_Buff));
 8002528:	4962      	ldr	r1, [pc, #392]	; (80026b4 <Modem_MQTT_Task+0x194>)
 800252a:	4b63      	ldr	r3, [pc, #396]	; (80026b8 <Modem_MQTT_Task+0x198>)
 800252c:	22c8      	movs	r2, #200	; 0xc8
 800252e:	0018      	movs	r0, r3
 8002530:	f007 fa6c 	bl	8009a0c <HAL_UARTEx_ReceiveToIdle_IT>

//  osDelay(1000);

  modem_initiate_cmd(MODEM_AT_CHECK);
 8002534:	2000      	movs	r0, #0
 8002536:	f000 f8db 	bl	80026f0 <modem_initiate_cmd>
  osDelay(300);
 800253a:	2396      	movs	r3, #150	; 0x96
 800253c:	005b      	lsls	r3, r3, #1
 800253e:	0018      	movs	r0, r3
 8002540:	f007 fb6f 	bl	8009c22 <osDelay>

  modem_initiate_cmd(MODEM_DISABLE_ECHO);
 8002544:	2003      	movs	r0, #3
 8002546:	f000 f8d3 	bl	80026f0 <modem_initiate_cmd>
  osDelay(300);
 800254a:	2396      	movs	r3, #150	; 0x96
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	0018      	movs	r0, r3
 8002550:	f007 fb67 	bl	8009c22 <osDelay>

  get_modem_info();
 8002554:	f000 fad0 	bl	8002af8 <get_modem_info>

  modem_set_sim_configurations();
 8002558:	f000 faeb 	bl	8002b32 <modem_set_sim_configurations>

  modem_mqtt_init();
 800255c:	f000 fb23 	bl	8002ba6 <modem_mqtt_init>

  #ifdef GPS_EN

	modem_initiate_cmd(MODEM_GPS_TURN_OFF);
 8002560:	2028      	movs	r0, #40	; 0x28
 8002562:	f000 f8c5 	bl	80026f0 <modem_initiate_cmd>
	osDelay(1000);
 8002566:	23fa      	movs	r3, #250	; 0xfa
 8002568:	009b      	lsls	r3, r3, #2
 800256a:	0018      	movs	r0, r3
 800256c:	f007 fb59 	bl	8009c22 <osDelay>

	modem_initiate_cmd(MODEM_GPS_TURN_ON);
 8002570:	2026      	movs	r0, #38	; 0x26
 8002572:	f000 f8bd 	bl	80026f0 <modem_initiate_cmd>
	osDelay(1000);
 8002576:	23fa      	movs	r3, #250	; 0xfa
 8002578:	009b      	lsls	r3, r3, #2
 800257a:	0018      	movs	r0, r3
 800257c:	f007 fb51 	bl	8009c22 <osDelay>

  #endif

  #ifdef TIMERS_EN

  xTimerStart(Telemetry_timer, 0);
 8002580:	4b4e      	ldr	r3, [pc, #312]	; (80026bc <Modem_MQTT_Task+0x19c>)
 8002582:	681c      	ldr	r4, [r3, #0]
 8002584:	f008 fb2c 	bl	800abe0 <xTaskGetTickCount>
 8002588:	0002      	movs	r2, r0
 800258a:	2300      	movs	r3, #0
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	2300      	movs	r3, #0
 8002590:	2101      	movs	r1, #1
 8002592:	0020      	movs	r0, r4
 8002594:	f009 f8e4 	bl	800b760 <xTimerGenericCommand>

  #endif
  xSemaphoreGive(Modem_port_block_semaphore);
 8002598:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <Modem_MQTT_Task+0x1a0>)
 800259a:	6818      	ldr	r0, [r3, #0]
 800259c:	2300      	movs	r3, #0
 800259e:	2200      	movs	r2, #0
 80025a0:	2100      	movs	r1, #0
 80025a2:	f007 fc9f 	bl	8009ee4 <xQueueGenericSend>
//		osDelay(500);
//		Gps_fetch=0;
//	}
//	#endif

    if(telemetry_send_time)
 80025a6:	4b47      	ldr	r3, [pc, #284]	; (80026c4 <Modem_MQTT_Task+0x1a4>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d036      	beq.n	800261c <Modem_MQTT_Task+0xfc>
    {
    	strcpy(temp_Lat_string,Lat_string);
 80025ae:	4a46      	ldr	r2, [pc, #280]	; (80026c8 <Modem_MQTT_Task+0x1a8>)
 80025b0:	4b46      	ldr	r3, [pc, #280]	; (80026cc <Modem_MQTT_Task+0x1ac>)
 80025b2:	0011      	movs	r1, r2
 80025b4:	0018      	movs	r0, r3
 80025b6:	f00b fd42 	bl	800e03e <strcpy>
    	strcpy(temp_Long_string,Long_string);
 80025ba:	4a45      	ldr	r2, [pc, #276]	; (80026d0 <Modem_MQTT_Task+0x1b0>)
 80025bc:	4b45      	ldr	r3, [pc, #276]	; (80026d4 <Modem_MQTT_Task+0x1b4>)
 80025be:	0011      	movs	r1, r2
 80025c0:	0018      	movs	r0, r3
 80025c2:	f00b fd3c 	bl	800e03e <strcpy>

    	modem_initiate_cmd(MODEM_GPS_GET_CURR_LOCATION);
 80025c6:	2027      	movs	r0, #39	; 0x27
 80025c8:	f000 f892 	bl	80026f0 <modem_initiate_cmd>
    	osDelay(500);
 80025cc:	23fa      	movs	r3, #250	; 0xfa
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	0018      	movs	r0, r3
 80025d2:	f007 fb26 	bl	8009c22 <osDelay>
    	Check_gps=1;
 80025d6:	4b40      	ldr	r3, [pc, #256]	; (80026d8 <Modem_MQTT_Task+0x1b8>)
 80025d8:	2201      	movs	r2, #1
 80025da:	701a      	strb	r2, [r3, #0]

    	Msg_cnt++;
 80025dc:	4b3f      	ldr	r3, [pc, #252]	; (80026dc <Modem_MQTT_Task+0x1bc>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	1c5a      	adds	r2, r3, #1
 80025e2:	4b3e      	ldr	r3, [pc, #248]	; (80026dc <Modem_MQTT_Task+0x1bc>)
 80025e4:	601a      	str	r2, [r3, #0]
    	format_json_message();
 80025e6:	f000 fb8f 	bl	8002d08 <format_json_message>
    	xSemaphoreTake(Modem_port_block_semaphore,4000);
 80025ea:	4b35      	ldr	r3, [pc, #212]	; (80026c0 <Modem_MQTT_Task+0x1a0>)
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	22fa      	movs	r2, #250	; 0xfa
 80025f0:	0112      	lsls	r2, r2, #4
 80025f2:	0011      	movs	r1, r2
 80025f4:	0018      	movs	r0, r3
 80025f6:	f007 fe62 	bl	800a2be <xQueueSemaphoreTake>
    	modem_mqtt_publish();
 80025fa:	f000 faf9 	bl	8002bf0 <modem_mqtt_publish>
    	xSemaphoreGive(Modem_port_block_semaphore);
 80025fe:	4b30      	ldr	r3, [pc, #192]	; (80026c0 <Modem_MQTT_Task+0x1a0>)
 8002600:	6818      	ldr	r0, [r3, #0]
 8002602:	2300      	movs	r3, #0
 8002604:	2200      	movs	r2, #0
 8002606:	2100      	movs	r1, #0
 8002608:	f007 fc6c 	bl	8009ee4 <xQueueGenericSend>

    	telemetry_send_time=0;
 800260c:	4b2d      	ldr	r3, [pc, #180]	; (80026c4 <Modem_MQTT_Task+0x1a4>)
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
    	osDelay(300);
 8002612:	2396      	movs	r3, #150	; 0x96
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	0018      	movs	r0, r3
 8002618:	f007 fb03 	bl	8009c22 <osDelay>
    }
    if( (GpsInfo_t.latitude!=0) && (Check_gps==1) )
 800261c:	4b30      	ldr	r3, [pc, #192]	; (80026e0 <Modem_MQTT_Task+0x1c0>)
 800261e:	6918      	ldr	r0, [r3, #16]
 8002620:	6959      	ldr	r1, [r3, #20]
 8002622:	2200      	movs	r2, #0
 8002624:	2300      	movs	r3, #0
 8002626:	f7fd ff1b 	bl	8000460 <__aeabi_dcmpeq>
 800262a:	1e03      	subs	r3, r0, #0
 800262c:	d11c      	bne.n	8002668 <Modem_MQTT_Task+0x148>
 800262e:	4b2a      	ldr	r3, [pc, #168]	; (80026d8 <Modem_MQTT_Task+0x1b8>)
 8002630:	781b      	ldrb	r3, [r3, #0]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d118      	bne.n	8002668 <Modem_MQTT_Task+0x148>
    {
    	if(!strcmp(temp_Lat_string,Lat_string))
 8002636:	4a24      	ldr	r2, [pc, #144]	; (80026c8 <Modem_MQTT_Task+0x1a8>)
 8002638:	4b24      	ldr	r3, [pc, #144]	; (80026cc <Modem_MQTT_Task+0x1ac>)
 800263a:	0011      	movs	r1, r2
 800263c:	0018      	movs	r0, r3
 800263e:	f7fd fd63 	bl	8000108 <strcmp>
 8002642:	1e03      	subs	r3, r0, #0
 8002644:	d102      	bne.n	800264c <Modem_MQTT_Task+0x12c>
    	{
    		mqtt_flag.change_on_lat=1;
 8002646:	4b27      	ldr	r3, [pc, #156]	; (80026e4 <Modem_MQTT_Task+0x1c4>)
 8002648:	2201      	movs	r2, #1
 800264a:	711a      	strb	r2, [r3, #4]
    	}
    	if(!strcmp(temp_Long_string,Long_string))
 800264c:	4a20      	ldr	r2, [pc, #128]	; (80026d0 <Modem_MQTT_Task+0x1b0>)
 800264e:	4b21      	ldr	r3, [pc, #132]	; (80026d4 <Modem_MQTT_Task+0x1b4>)
 8002650:	0011      	movs	r1, r2
 8002652:	0018      	movs	r0, r3
 8002654:	f7fd fd58 	bl	8000108 <strcmp>
 8002658:	1e03      	subs	r3, r0, #0
 800265a:	d102      	bne.n	8002662 <Modem_MQTT_Task+0x142>
    	{
    		mqtt_flag.change_on_long=1;
 800265c:	4b21      	ldr	r3, [pc, #132]	; (80026e4 <Modem_MQTT_Task+0x1c4>)
 800265e:	2201      	movs	r2, #1
 8002660:	715a      	strb	r2, [r3, #5]
    	}
    	Check_gps=0;
 8002662:	4b1d      	ldr	r3, [pc, #116]	; (80026d8 <Modem_MQTT_Task+0x1b8>)
 8002664:	2200      	movs	r2, #0
 8002666:	701a      	strb	r2, [r3, #0]
    }
    if(modem_info_t.mqtt_info_t.mqtt_urc_error)
 8002668:	4b1f      	ldr	r3, [pc, #124]	; (80026e8 <Modem_MQTT_Task+0x1c8>)
 800266a:	2250      	movs	r2, #80	; 0x50
 800266c:	5c9b      	ldrb	r3, [r3, r2]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d006      	beq.n	8002680 <Modem_MQTT_Task+0x160>
    {
    	modem_handle_mqtt_urc_codes();
 8002672:	f000 fb0b 	bl	8002c8c <modem_handle_mqtt_urc_codes>
    	osDelay(300);
 8002676:	2396      	movs	r3, #150	; 0x96
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	0018      	movs	r0, r3
 800267c:	f007 fad1 	bl	8009c22 <osDelay>
    }
//    if( (mqtt_flag.change_on_mqtt_username ==1) && (mqtt_flag.change_on_mqtt_password==1) && (mqtt_flag.change_on_mqtt_clientid==1) )
    if(mqtt_reinit)
 8002680:	4b1a      	ldr	r3, [pc, #104]	; (80026ec <Modem_MQTT_Task+0x1cc>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	2b00      	cmp	r3, #0
 8002686:	d011      	beq.n	80026ac <Modem_MQTT_Task+0x18c>
    {
    	modem_mqtt_disconnect();
 8002688:	f000 faf0 	bl	8002c6c <modem_mqtt_disconnect>
    	modem_mqtt_connect();
 800268c:	f000 fac0 	bl	8002c10 <modem_mqtt_connect>
    	osDelay(2000);
 8002690:	23fa      	movs	r3, #250	; 0xfa
 8002692:	00db      	lsls	r3, r3, #3
 8002694:	0018      	movs	r0, r3
 8002696:	f007 fac4 	bl	8009c22 <osDelay>
    	mqtt_reinit=0;
 800269a:	4b14      	ldr	r3, [pc, #80]	; (80026ec <Modem_MQTT_Task+0x1cc>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
    	memset(&mqtt_flag,0,sizeof(mqtt_flag));  //TODO: Need to exclude Lat and Long
 80026a0:	4b10      	ldr	r3, [pc, #64]	; (80026e4 <Modem_MQTT_Task+0x1c4>)
 80026a2:	2206      	movs	r2, #6
 80026a4:	2100      	movs	r1, #0
 80026a6:	0018      	movs	r0, r3
 80026a8:	f00b fb82 	bl	800ddb0 <memset>
    }
    osDelay(100);
 80026ac:	2064      	movs	r0, #100	; 0x64
 80026ae:	f007 fab8 	bl	8009c22 <osDelay>
    if(telemetry_send_time)
 80026b2:	e778      	b.n	80025a6 <Modem_MQTT_Task+0x86>
 80026b4:	200009cc 	.word	0x200009cc
 80026b8:	2000088c 	.word	0x2000088c
 80026bc:	200009c0 	.word	0x200009c0
 80026c0:	200009c4 	.word	0x200009c4
 80026c4:	20000a98 	.word	0x20000a98
 80026c8:	200004a8 	.word	0x200004a8
 80026cc:	200004c0 	.word	0x200004c0
 80026d0:	200004b4 	.word	0x200004b4
 80026d4:	200004cc 	.word	0x200004cc
 80026d8:	200004d6 	.word	0x200004d6
 80026dc:	20000a94 	.word	0x20000a94
 80026e0:	20000208 	.word	0x20000208
 80026e4:	20000500 	.word	0x20000500
 80026e8:	200007ec 	.word	0x200007ec
 80026ec:	200007e8 	.word	0x200007e8

080026f0 <modem_initiate_cmd>:
  }
  /* USER CODE END 5 */
}
void modem_initiate_cmd(uint8_t cmd)
{
 80026f0:	b590      	push	{r4, r7, lr}
 80026f2:	b0b9      	sub	sp, #228	; 0xe4
 80026f4:	af04      	add	r7, sp, #16
 80026f6:	0002      	movs	r2, r0
 80026f8:	1dfb      	adds	r3, r7, #7
 80026fa:	701a      	strb	r2, [r3, #0]
	switch(cmd)
 80026fc:	1dfb      	adds	r3, r7, #7
 80026fe:	781b      	ldrb	r3, [r3, #0]
 8002700:	2b28      	cmp	r3, #40	; 0x28
 8002702:	d900      	bls.n	8002706 <modem_initiate_cmd+0x16>
 8002704:	e18d      	b.n	8002a22 <modem_initiate_cmd+0x332>
 8002706:	009a      	lsls	r2, r3, #2
 8002708:	4bc8      	ldr	r3, [pc, #800]	; (8002a2c <modem_initiate_cmd+0x33c>)
 800270a:	18d3      	adds	r3, r2, r3
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	469f      	mov	pc, r3
	{
		case MODEM_AT_CHECK:
		{
			modem_send_msg("AT");
 8002710:	4bc7      	ldr	r3, [pc, #796]	; (8002a30 <modem_initiate_cmd+0x340>)
 8002712:	0018      	movs	r0, r3
 8002714:	f7ff feca 	bl	80024ac <modem_send_msg>
			cmd_val=MODEM_AT_CHECK;
 8002718:	4bc6      	ldr	r3, [pc, #792]	; (8002a34 <modem_initiate_cmd+0x344>)
 800271a:	2200      	movs	r2, #0
 800271c:	701a      	strb	r2, [r3, #0]
			break;
 800271e:	e181      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_GET_INF0:
		{
			cmd_val=MODEM_GET_INF0;
 8002720:	4bc4      	ldr	r3, [pc, #784]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002722:	2201      	movs	r2, #1
 8002724:	701a      	strb	r2, [r3, #0]
			modem_send_msg("ATI");
 8002726:	4bc4      	ldr	r3, [pc, #784]	; (8002a38 <modem_initiate_cmd+0x348>)
 8002728:	0018      	movs	r0, r3
 800272a:	f7ff febf 	bl	80024ac <modem_send_msg>
			break;
 800272e:	e179      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_GET_MANF_ID:
		{
			cmd_val=MODEM_GET_MANF_ID;
 8002730:	4bc0      	ldr	r3, [pc, #768]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002732:	2204      	movs	r2, #4
 8002734:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+GMI");
 8002736:	4bc1      	ldr	r3, [pc, #772]	; (8002a3c <modem_initiate_cmd+0x34c>)
 8002738:	0018      	movs	r0, r3
 800273a:	f7ff feb7 	bl	80024ac <modem_send_msg>
			break;
 800273e:	e171      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_DISABLE_ECHO:
		{
			modem_send_msg("ATE0");
 8002740:	4bbf      	ldr	r3, [pc, #764]	; (8002a40 <modem_initiate_cmd+0x350>)
 8002742:	0018      	movs	r0, r3
 8002744:	f7ff feb2 	bl	80024ac <modem_send_msg>
			break;
 8002748:	e16c      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_ENABLE_ECHO:
		{
			modem_send_msg("ATE1");
 800274a:	4bbe      	ldr	r3, [pc, #760]	; (8002a44 <modem_initiate_cmd+0x354>)
 800274c:	0018      	movs	r0, r3
 800274e:	f7ff fead 	bl	80024ac <modem_send_msg>
			break;
 8002752:	e167      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_GET_TA_MODEL_INFO:
		{
			cmd_val=MODEM_GET_TA_MODEL_INFO;
 8002754:	4bb7      	ldr	r3, [pc, #732]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002756:	2205      	movs	r2, #5
 8002758:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+GMM");
 800275a:	4bbb      	ldr	r3, [pc, #748]	; (8002a48 <modem_initiate_cmd+0x358>)
 800275c:	0018      	movs	r0, r3
 800275e:	f7ff fea5 	bl	80024ac <modem_send_msg>
			break;
 8002762:	e15f      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_CHECK_SIM_READY:
		{
			cmd_val=MODEM_CHECK_SIM_READY;
 8002764:	4bb3      	ldr	r3, [pc, #716]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002766:	2206      	movs	r2, #6
 8002768:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CPIN?");
 800276a:	4bb8      	ldr	r3, [pc, #736]	; (8002a4c <modem_initiate_cmd+0x35c>)
 800276c:	0018      	movs	r0, r3
 800276e:	f7ff fe9d 	bl	80024ac <modem_send_msg>
			break;
 8002772:	e157      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_SET_NETWORK_REG:
		{
			cmd_val=MODEM_SET_NETWORK_REG;
 8002774:	4baf      	ldr	r3, [pc, #700]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002776:	2209      	movs	r2, #9
 8002778:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CREG=1");
 800277a:	4bb5      	ldr	r3, [pc, #724]	; (8002a50 <modem_initiate_cmd+0x360>)
 800277c:	0018      	movs	r0, r3
 800277e:	f7ff fe95 	bl	80024ac <modem_send_msg>
			break;
 8002782:	e14f      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_CHECK_NETWORK_REG:
		{
			cmd_val=MODEM_CHECK_NETWORK_REG;
 8002784:	4bab      	ldr	r3, [pc, #684]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002786:	2208      	movs	r2, #8
 8002788:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CREG?");
 800278a:	4bb2      	ldr	r3, [pc, #712]	; (8002a54 <modem_initiate_cmd+0x364>)
 800278c:	0018      	movs	r0, r3
 800278e:	f7ff fe8d 	bl	80024ac <modem_send_msg>
			break;
 8002792:	e147      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_ATTACH_GPRS:
		{
			cmd_val=MODEM_ATTACH_GPRS;
 8002794:	4ba7      	ldr	r3, [pc, #668]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002796:	220a      	movs	r2, #10
 8002798:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CGATT=1");
 800279a:	4baf      	ldr	r3, [pc, #700]	; (8002a58 <modem_initiate_cmd+0x368>)
 800279c:	0018      	movs	r0, r3
 800279e:	f7ff fe85 	bl	80024ac <modem_send_msg>
			break;
 80027a2:	e13f      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_DETACH_GPRS:
		{
			cmd_val=9;
 80027a4:	4ba3      	ldr	r3, [pc, #652]	; (8002a34 <modem_initiate_cmd+0x344>)
 80027a6:	2209      	movs	r2, #9
 80027a8:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CGATT=0");
 80027aa:	4bac      	ldr	r3, [pc, #688]	; (8002a5c <modem_initiate_cmd+0x36c>)
 80027ac:	0018      	movs	r0, r3
 80027ae:	f7ff fe7d 	bl	80024ac <modem_send_msg>
			break;
 80027b2:	e137      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_CHECK_CGATT:
		{
			cmd_val=10;
 80027b4:	4b9f      	ldr	r3, [pc, #636]	; (8002a34 <modem_initiate_cmd+0x344>)
 80027b6:	220a      	movs	r2, #10
 80027b8:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CGATT=?");
 80027ba:	4ba9      	ldr	r3, [pc, #676]	; (8002a60 <modem_initiate_cmd+0x370>)
 80027bc:	0018      	movs	r0, r3
 80027be:	f7ff fe75 	bl	80024ac <modem_send_msg>
			break;
 80027c2:	e12f      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_SET_PDP:
		{
			cmd_val=MODEM_SET_PDP;
 80027c4:	4b9b      	ldr	r3, [pc, #620]	; (8002a34 <modem_initiate_cmd+0x344>)
 80027c6:	220d      	movs	r2, #13
 80027c8:	701a      	strb	r2, [r3, #0]
			char cmd[64];
			sprintf(cmd, "AT+CGDCONT=1,\"IP\",\"%s\"", AIRTEL_APN);
 80027ca:	4aa6      	ldr	r2, [pc, #664]	; (8002a64 <modem_initiate_cmd+0x374>)
 80027cc:	49a6      	ldr	r1, [pc, #664]	; (8002a68 <modem_initiate_cmd+0x378>)
 80027ce:	2408      	movs	r4, #8
 80027d0:	193b      	adds	r3, r7, r4
 80027d2:	0018      	movs	r0, r3
 80027d4:	f00b fa80 	bl	800dcd8 <siprintf>
			modem_send_msg(cmd);
 80027d8:	193b      	adds	r3, r7, r4
 80027da:	0018      	movs	r0, r3
 80027dc:	f7ff fe66 	bl	80024ac <modem_send_msg>
			break;
 80027e0:	e120      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_ACTIVATE_PDP:
		{
			cmd_val=MODEM_ACTIVATE_PDP;
 80027e2:	4b94      	ldr	r3, [pc, #592]	; (8002a34 <modem_initiate_cmd+0x344>)
 80027e4:	220e      	movs	r2, #14
 80027e6:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QIACT=1");
 80027e8:	4ba0      	ldr	r3, [pc, #640]	; (8002a6c <modem_initiate_cmd+0x37c>)
 80027ea:	0018      	movs	r0, r3
 80027ec:	f7ff fe5e 	bl	80024ac <modem_send_msg>
			break;
 80027f0:	e118      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_RESET:
		{
			modem_send_msg("ATZ");
 80027f2:	4b9f      	ldr	r3, [pc, #636]	; (8002a70 <modem_initiate_cmd+0x380>)
 80027f4:	0018      	movs	r0, r3
 80027f6:	f7ff fe59 	bl	80024ac <modem_send_msg>
			break;
 80027fa:	e113      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}

		/********************************** MQTT AT Commands *****************************/
		case MODEM_MQTT_VERSION_CFG:
		{
			memset(EC200u_Rx_Buff, 0, sizeof(EC200u_Rx_Buff));
 80027fc:	4b9d      	ldr	r3, [pc, #628]	; (8002a74 <modem_initiate_cmd+0x384>)
 80027fe:	22c8      	movs	r2, #200	; 0xc8
 8002800:	2100      	movs	r1, #0
 8002802:	0018      	movs	r0, r3
 8002804:	f00b fad4 	bl	800ddb0 <memset>
			cmd_val=MODEM_MQTT_VERSION_CFG;
 8002808:	4b8a      	ldr	r3, [pc, #552]	; (8002a34 <modem_initiate_cmd+0x344>)
 800280a:	2210      	movs	r2, #16
 800280c:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Configure MQTT Version ---
			sprintf(cmd, "AT+QMTCFG=\"version\",%d,4", MQTT_CLIENT_IDX);  //// MQTT v3.1.1
 800280e:	499a      	ldr	r1, [pc, #616]	; (8002a78 <modem_initiate_cmd+0x388>)
 8002810:	2408      	movs	r4, #8
 8002812:	193b      	adds	r3, r7, r4
 8002814:	2200      	movs	r2, #0
 8002816:	0018      	movs	r0, r3
 8002818:	f00b fa5e 	bl	800dcd8 <siprintf>
			modem_send_msg(cmd);
 800281c:	193b      	adds	r3, r7, r4
 800281e:	0018      	movs	r0, r3
 8002820:	f7ff fe44 	bl	80024ac <modem_send_msg>
			break;
 8002824:	e0fe      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_MQTT_OPEN:
		{
			memset(EC200u_Rx_Buff, 0, sizeof(EC200u_Rx_Buff));
 8002826:	4b93      	ldr	r3, [pc, #588]	; (8002a74 <modem_initiate_cmd+0x384>)
 8002828:	22c8      	movs	r2, #200	; 0xc8
 800282a:	2100      	movs	r1, #0
 800282c:	0018      	movs	r0, r3
 800282e:	f00b fabf 	bl	800ddb0 <memset>
			cmd_val=MODEM_MQTT_OPEN;
 8002832:	4b80      	ldr	r3, [pc, #512]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002834:	2211      	movs	r2, #17
 8002836:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Open MQTT Connection ---
			sprintf(cmd, "AT+QMTOPEN=%d,\"%s\",%d", MQTT_CLIENT_IDX, MQTT_HOSTNAME, MQTT_PORT);
 8002838:	4b90      	ldr	r3, [pc, #576]	; (8002a7c <modem_initiate_cmd+0x38c>)
 800283a:	4991      	ldr	r1, [pc, #580]	; (8002a80 <modem_initiate_cmd+0x390>)
 800283c:	2408      	movs	r4, #8
 800283e:	1938      	adds	r0, r7, r4
 8002840:	4a90      	ldr	r2, [pc, #576]	; (8002a84 <modem_initiate_cmd+0x394>)
 8002842:	9200      	str	r2, [sp, #0]
 8002844:	2200      	movs	r2, #0
 8002846:	f00b fa47 	bl	800dcd8 <siprintf>
			modem_send_msg(cmd);
 800284a:	193b      	adds	r3, r7, r4
 800284c:	0018      	movs	r0, r3
 800284e:	f7ff fe2d 	bl	80024ac <modem_send_msg>
			break;
 8002852:	e0e7      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_MQTT_CONN:
		{
			memset(EC200u_Rx_Buff, 0, sizeof(EC200u_Rx_Buff));
 8002854:	4b87      	ldr	r3, [pc, #540]	; (8002a74 <modem_initiate_cmd+0x384>)
 8002856:	22c8      	movs	r2, #200	; 0xc8
 8002858:	2100      	movs	r1, #0
 800285a:	0018      	movs	r0, r3
 800285c:	f00b faa8 	bl	800ddb0 <memset>
			cmd_val=MODEM_MQTT_CONN;
 8002860:	4b74      	ldr	r3, [pc, #464]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002862:	2213      	movs	r2, #19
 8002864:	701a      	strb	r2, [r3, #0]
			char cmd[200];
			// --- Connect MQTT Client ---
			strcpy(modem_mqtt_conf_t.mqtt_username,MQTT_USERNAME);
 8002866:	4b88      	ldr	r3, [pc, #544]	; (8002a88 <modem_initiate_cmd+0x398>)
 8002868:	4a88      	ldr	r2, [pc, #544]	; (8002a8c <modem_initiate_cmd+0x39c>)
 800286a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800286c:	c313      	stmia	r3!, {r0, r1, r4}
 800286e:	7812      	ldrb	r2, [r2, #0]
 8002870:	701a      	strb	r2, [r3, #0]
			strcpy(modem_mqtt_conf_t.mqtt_password,MQTT_PASSWORD);
 8002872:	4b87      	ldr	r3, [pc, #540]	; (8002a90 <modem_initiate_cmd+0x3a0>)
 8002874:	4a85      	ldr	r2, [pc, #532]	; (8002a8c <modem_initiate_cmd+0x39c>)
 8002876:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002878:	c313      	stmia	r3!, {r0, r1, r4}
 800287a:	7812      	ldrb	r2, [r2, #0]
 800287c:	701a      	strb	r2, [r3, #0]
			strcpy(modem_mqtt_conf_t.mqtt_client_id,MQTT_CLIENT_ID);
 800287e:	4b85      	ldr	r3, [pc, #532]	; (8002a94 <modem_initiate_cmd+0x3a4>)
 8002880:	4a85      	ldr	r2, [pc, #532]	; (8002a98 <modem_initiate_cmd+0x3a8>)
 8002882:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002884:	c313      	stmia	r3!, {r0, r1, r4}
			modem_mqtt_conf_t.mqtt_port= MQTT_PORT;
 8002886:	4b80      	ldr	r3, [pc, #512]	; (8002a88 <modem_initiate_cmd+0x398>)
 8002888:	4a7e      	ldr	r2, [pc, #504]	; (8002a84 <modem_initiate_cmd+0x394>)
 800288a:	879a      	strh	r2, [r3, #60]	; 0x3c
			sprintf(cmd, "AT+QMTCONN=%d,\"%s\",\"%s\",\"%s\"", MQTT_CLIENT_IDX, MQTT_CLIENT_ID,MQTT_USERNAME,MQTT_PASSWORD);
 800288c:	4a82      	ldr	r2, [pc, #520]	; (8002a98 <modem_initiate_cmd+0x3a8>)
 800288e:	4983      	ldr	r1, [pc, #524]	; (8002a9c <modem_initiate_cmd+0x3ac>)
 8002890:	2408      	movs	r4, #8
 8002892:	1938      	adds	r0, r7, r4
 8002894:	4b7d      	ldr	r3, [pc, #500]	; (8002a8c <modem_initiate_cmd+0x39c>)
 8002896:	9301      	str	r3, [sp, #4]
 8002898:	4b7c      	ldr	r3, [pc, #496]	; (8002a8c <modem_initiate_cmd+0x39c>)
 800289a:	9300      	str	r3, [sp, #0]
 800289c:	0013      	movs	r3, r2
 800289e:	2200      	movs	r2, #0
 80028a0:	f00b fa1a 	bl	800dcd8 <siprintf>
			modem_send_msg(cmd);
 80028a4:	193b      	adds	r3, r7, r4
 80028a6:	0018      	movs	r0, r3
 80028a8:	f7ff fe00 	bl	80024ac <modem_send_msg>
			break;
 80028ac:	e0ba      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_MQTT_SUBSCRIBE:
		{
			memset(EC200u_Rx_Buff, 0, sizeof(EC200u_Rx_Buff));
 80028ae:	4b71      	ldr	r3, [pc, #452]	; (8002a74 <modem_initiate_cmd+0x384>)
 80028b0:	22c8      	movs	r2, #200	; 0xc8
 80028b2:	2100      	movs	r1, #0
 80028b4:	0018      	movs	r0, r3
 80028b6:	f00b fa7b 	bl	800ddb0 <memset>
			cmd_val=MODEM_MQTT_SUBSCRIBE;
 80028ba:	4b5e      	ldr	r3, [pc, #376]	; (8002a34 <modem_initiate_cmd+0x344>)
 80028bc:	2215      	movs	r2, #21
 80028be:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Subscribe to Topic ---
			sprintf(cmd, "AT+QMTSUB=%d,1,\"%s\",%d", MQTT_CLIENT_IDX, MQTT_TOPIC_SUB, MQTT_QOS);
 80028c0:	4b77      	ldr	r3, [pc, #476]	; (8002aa0 <modem_initiate_cmd+0x3b0>)
 80028c2:	4978      	ldr	r1, [pc, #480]	; (8002aa4 <modem_initiate_cmd+0x3b4>)
 80028c4:	2408      	movs	r4, #8
 80028c6:	1938      	adds	r0, r7, r4
 80028c8:	2201      	movs	r2, #1
 80028ca:	9200      	str	r2, [sp, #0]
 80028cc:	2200      	movs	r2, #0
 80028ce:	f00b fa03 	bl	800dcd8 <siprintf>
			modem_send_msg(cmd);
 80028d2:	193b      	adds	r3, r7, r4
 80028d4:	0018      	movs	r0, r3
 80028d6:	f7ff fde9 	bl	80024ac <modem_send_msg>
			break;
 80028da:	e0a3      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_MQTT_PUBLISH:
		{
			cmd_val=MODEM_MQTT_PUBLISH;
 80028dc:	4b55      	ldr	r3, [pc, #340]	; (8002a34 <modem_initiate_cmd+0x344>)
 80028de:	2216      	movs	r2, #22
 80028e0:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			//sprintf(cmd, "AT+QMTPUB=%d,0,%d,\"%s\"", MQTT_CLIENT_IDX, MQTT_QOS, MQTT_TOPIC_PUB);
			sprintf(cmd, "AT+QMTPUBEX=%d,%d,%d,%d,\"%s\",%d",
 80028e2:	4b71      	ldr	r3, [pc, #452]	; (8002aa8 <modem_initiate_cmd+0x3b8>)
 80028e4:	0018      	movs	r0, r3
 80028e6:	f7fd fc19 	bl	800011c <strlen>
 80028ea:	0003      	movs	r3, r0
 80028ec:	496f      	ldr	r1, [pc, #444]	; (8002aac <modem_initiate_cmd+0x3bc>)
 80028ee:	2408      	movs	r4, #8
 80028f0:	1938      	adds	r0, r7, r4
 80028f2:	9303      	str	r3, [sp, #12]
 80028f4:	4b6e      	ldr	r3, [pc, #440]	; (8002ab0 <modem_initiate_cmd+0x3c0>)
 80028f6:	9302      	str	r3, [sp, #8]
 80028f8:	2300      	movs	r3, #0
 80028fa:	9301      	str	r3, [sp, #4]
 80028fc:	2301      	movs	r3, #1
 80028fe:	9300      	str	r3, [sp, #0]
 8002900:	2301      	movs	r3, #1
 8002902:	2200      	movs	r2, #0
 8002904:	f00b f9e8 	bl	800dcd8 <siprintf>
			        MQTT_MSG_ID,
			        MQTT_QOS,
			        MQTT_RETAIN_FLAG,
			        MQTT_TOPIC_PUB,
			        strlen(MQTT_PUB_Buff));
			modem_send_msg(cmd);
 8002908:	193b      	adds	r3, r7, r4
 800290a:	0018      	movs	r0, r3
 800290c:	f7ff fdce 	bl	80024ac <modem_send_msg>
			osDelay(100);
 8002910:	2064      	movs	r0, #100	; 0x64
 8002912:	f007 f986 	bl	8009c22 <osDelay>
			modem_send_msg(MQTT_PUB_Buff);
 8002916:	4b64      	ldr	r3, [pc, #400]	; (8002aa8 <modem_initiate_cmd+0x3b8>)
 8002918:	0018      	movs	r0, r3
 800291a:	f7ff fdc7 	bl	80024ac <modem_send_msg>
			break;
 800291e:	e081      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}

		/********************************** BLE AT Commands *****************************/
		case MODEM_TURN_ON_BLE:
		{
			cmd_val=MODEM_TURN_ON_BLE;
 8002920:	4b44      	ldr	r3, [pc, #272]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002922:	2218      	movs	r2, #24
 8002924:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTPWR=1");
 8002926:	4b63      	ldr	r3, [pc, #396]	; (8002ab4 <modem_initiate_cmd+0x3c4>)
 8002928:	0018      	movs	r0, r3
 800292a:	f7ff fdbf 	bl	80024ac <modem_send_msg>
			break;
 800292e:	e079      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_TURN_OFF_BLE:
		{
			cmd_val=MODEM_TURN_OFF_BLE;
 8002930:	4b40      	ldr	r3, [pc, #256]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002932:	2219      	movs	r2, #25
 8002934:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTPWR=0");
 8002936:	4b60      	ldr	r3, [pc, #384]	; (8002ab8 <modem_initiate_cmd+0x3c8>)
 8002938:	0018      	movs	r0, r3
 800293a:	f7ff fdb7 	bl	80024ac <modem_send_msg>
			break;
 800293e:	e071      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_BLE_SET_ADV_PARAM:
		{
			cmd_val=MODEM_BLE_SET_ADV_PARAM;
 8002940:	4b3c      	ldr	r3, [pc, #240]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002942:	221b      	movs	r2, #27
 8002944:	701a      	strb	r2, [r3, #0]
			//modem_send_msg("AT+QBTGATADV=1,60,120,0,0,7,0");
			char cmd[128];
			sprintf(cmd,"AT+QBTGATADV=1,%d,%d,0,0,7,0",MIN_INTERVAL,MAX_INTERVAL);
 8002946:	495d      	ldr	r1, [pc, #372]	; (8002abc <modem_initiate_cmd+0x3cc>)
 8002948:	2408      	movs	r4, #8
 800294a:	1938      	adds	r0, r7, r4
 800294c:	2378      	movs	r3, #120	; 0x78
 800294e:	223c      	movs	r2, #60	; 0x3c
 8002950:	f00b f9c2 	bl	800dcd8 <siprintf>
			modem_send_msg(cmd);
 8002954:	193b      	adds	r3, r7, r4
 8002956:	0018      	movs	r0, r3
 8002958:	f7ff fda8 	bl	80024ac <modem_send_msg>
			break;
 800295c:	e062      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_BLE_SET_ADV_NAME:
		{
			cmd_val=MODEM_BLE_SET_ADV_NAME;
 800295e:	4b35      	ldr	r3, [pc, #212]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002960:	221c      	movs	r2, #28
 8002962:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			sprintf(cmd,"AT+QBTADVSTR=1,2,\"%s\"",DEFAULT_BLE_DEVICENAME);
 8002964:	4a56      	ldr	r2, [pc, #344]	; (8002ac0 <modem_initiate_cmd+0x3d0>)
 8002966:	4957      	ldr	r1, [pc, #348]	; (8002ac4 <modem_initiate_cmd+0x3d4>)
 8002968:	2408      	movs	r4, #8
 800296a:	193b      	adds	r3, r7, r4
 800296c:	0018      	movs	r0, r3
 800296e:	f00b f9b3 	bl	800dcd8 <siprintf>
			modem_send_msg(cmd);
 8002972:	193b      	adds	r3, r7, r4
 8002974:	0018      	movs	r0, r3
 8002976:	f7ff fd99 	bl	80024ac <modem_send_msg>
			break;
 800297a:	e053      	b.n	8002a24 <modem_initiate_cmd+0x334>
			break;
		}
		*/
		case MODEM_BLE_SET_PRIMARY_SVC:
		{
			cmd_val=MODEM_BLE_SET_PRIMARY_SVC;
 800297c:	4b2d      	ldr	r3, [pc, #180]	; (8002a34 <modem_initiate_cmd+0x344>)
 800297e:	221d      	movs	r2, #29
 8002980:	701a      	strb	r2, [r3, #0]
			//send_at_command("AT+QBTGATSS=0,1,6144,1\r\n");
			//modem_send_msg("AT+QBTGATSS=0,1,44016,1");
			char cmd[128];
			sprintf(cmd,"AT+QBTGATSS=0,1,%d,1",GATTS_MQTT_SERVICE_UUID);
 8002982:	4a51      	ldr	r2, [pc, #324]	; (8002ac8 <modem_initiate_cmd+0x3d8>)
 8002984:	4951      	ldr	r1, [pc, #324]	; (8002acc <modem_initiate_cmd+0x3dc>)
 8002986:	2408      	movs	r4, #8
 8002988:	193b      	adds	r3, r7, r4
 800298a:	0018      	movs	r0, r3
 800298c:	f00b f9a4 	bl	800dcd8 <siprintf>
			modem_send_msg(cmd);
 8002990:	193b      	adds	r3, r7, r4
 8002992:	0018      	movs	r0, r3
 8002994:	f7ff fd8a 	bl	80024ac <modem_send_msg>
			break;
 8002998:	e044      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_BLE_ADD_SVC_CHAR:
		{
			cmd_val=MODEM_BLE_ADD_SVC_CHAR;
 800299a:	4b26      	ldr	r3, [pc, #152]	; (8002a34 <modem_initiate_cmd+0x344>)
 800299c:	221e      	movs	r2, #30
 800299e:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTGATSC=0,0,18,1,65268");  //18: Read and Notify
 80029a0:	4b4b      	ldr	r3, [pc, #300]	; (8002ad0 <modem_initiate_cmd+0x3e0>)
 80029a2:	0018      	movs	r0, r3
 80029a4:	f7ff fd82 	bl	80024ac <modem_send_msg>
			break;
 80029a8:	e03c      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_BLE_CFG_CHAR_VALUE:
		{
			cmd_val=MODEM_BLE_CFG_CHAR_VALUE;
 80029aa:	4b22      	ldr	r3, [pc, #136]	; (8002a34 <modem_initiate_cmd+0x344>)
 80029ac:	221f      	movs	r2, #31
 80029ae:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTGATSCV=0,0,3,1,65268,42,\"48656C6C6F\"");
 80029b0:	4b48      	ldr	r3, [pc, #288]	; (8002ad4 <modem_initiate_cmd+0x3e4>)
 80029b2:	0018      	movs	r0, r3
 80029b4:	f7ff fd7a 	bl	80024ac <modem_send_msg>
			//send_at_command("AT+QBTGATSCV=0,0,3,1,65268,42,\"BBFF\"\r\n");
			break;
 80029b8:	e034      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_BLE_FINSISH_ADDING_SVC:
		{
			cmd_val=MODEM_BLE_FINSISH_ADDING_SVC;
 80029ba:	4b1e      	ldr	r3, [pc, #120]	; (8002a34 <modem_initiate_cmd+0x344>)
 80029bc:	2220      	movs	r2, #32
 80029be:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTGATSSC=1,1");
 80029c0:	4b45      	ldr	r3, [pc, #276]	; (8002ad8 <modem_initiate_cmd+0x3e8>)
 80029c2:	0018      	movs	r0, r3
 80029c4:	f7ff fd72 	bl	80024ac <modem_send_msg>
			break;
 80029c8:	e02c      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_BLE_START_ADV:
		{
			cmd_val=MODEM_BLE_START_ADV;
 80029ca:	4b1a      	ldr	r3, [pc, #104]	; (8002a34 <modem_initiate_cmd+0x344>)
 80029cc:	2221      	movs	r2, #33	; 0x21
 80029ce:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTADV=1");
 80029d0:	4b42      	ldr	r3, [pc, #264]	; (8002adc <modem_initiate_cmd+0x3ec>)
 80029d2:	0018      	movs	r0, r3
 80029d4:	f7ff fd6a 	bl	80024ac <modem_send_msg>
			break;
 80029d8:	e024      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_BLE_STOP_ADV:
		{
			cmd_val=MODEM_BLE_STOP_ADV;
 80029da:	4b16      	ldr	r3, [pc, #88]	; (8002a34 <modem_initiate_cmd+0x344>)
 80029dc:	2222      	movs	r2, #34	; 0x22
 80029de:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTADV=0");
 80029e0:	4b3f      	ldr	r3, [pc, #252]	; (8002ae0 <modem_initiate_cmd+0x3f0>)
 80029e2:	0018      	movs	r0, r3
 80029e4:	f7ff fd62 	bl	80024ac <modem_send_msg>
			break;
 80029e8:	e01c      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_BLE_SET_NAME:
		{
			modem_send_msg("AT+QBTNAME=0,\"Chara_EC200U\"");
 80029ea:	4b3e      	ldr	r3, [pc, #248]	; (8002ae4 <modem_initiate_cmd+0x3f4>)
 80029ec:	0018      	movs	r0, r3
 80029ee:	f7ff fd5d 	bl	80024ac <modem_send_msg>
			break;
 80029f2:	e017      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_BLE_GET_NAME:
		{
			modem_send_msg("AT+QBTNAME?");
 80029f4:	4b3c      	ldr	r3, [pc, #240]	; (8002ae8 <modem_initiate_cmd+0x3f8>)
 80029f6:	0018      	movs	r0, r3
 80029f8:	f7ff fd58 	bl	80024ac <modem_send_msg>
			break;
 80029fc:	e012      	b.n	8002a24 <modem_initiate_cmd+0x334>

		/********************************** GPS/GNSS AT Commands *****************************/

		case MODEM_GPS_TURN_ON:
		{
			modem_send_msg("AT+QGPS=1");
 80029fe:	4b3b      	ldr	r3, [pc, #236]	; (8002aec <modem_initiate_cmd+0x3fc>)
 8002a00:	0018      	movs	r0, r3
 8002a02:	f7ff fd53 	bl	80024ac <modem_send_msg>
			break;
 8002a06:	e00d      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_GPS_GET_CURR_LOCATION:
		{
			cmd_val=MODEM_GPS_GET_CURR_LOCATION;
 8002a08:	4b0a      	ldr	r3, [pc, #40]	; (8002a34 <modem_initiate_cmd+0x344>)
 8002a0a:	2227      	movs	r2, #39	; 0x27
 8002a0c:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QGPSLOC=0");
 8002a0e:	4b38      	ldr	r3, [pc, #224]	; (8002af0 <modem_initiate_cmd+0x400>)
 8002a10:	0018      	movs	r0, r3
 8002a12:	f7ff fd4b 	bl	80024ac <modem_send_msg>
			break;
 8002a16:	e005      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		case MODEM_GPS_TURN_OFF:
		{

			modem_send_msg("AT+QGPSEND");
 8002a18:	4b36      	ldr	r3, [pc, #216]	; (8002af4 <modem_initiate_cmd+0x404>)
 8002a1a:	0018      	movs	r0, r3
 8002a1c:	f7ff fd46 	bl	80024ac <modem_send_msg>
			break;
 8002a20:	e000      	b.n	8002a24 <modem_initiate_cmd+0x334>
		}
		default:
		{
			break;
 8002a22:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 8002a24:	46c0      	nop			; (mov r8, r8)
 8002a26:	46bd      	mov	sp, r7
 8002a28:	b035      	add	sp, #212	; 0xd4
 8002a2a:	bd90      	pop	{r4, r7, pc}
 8002a2c:	080110c4 	.word	0x080110c4
 8002a30:	080109a4 	.word	0x080109a4
 8002a34:	200002a6 	.word	0x200002a6
 8002a38:	080109a8 	.word	0x080109a8
 8002a3c:	080109ac 	.word	0x080109ac
 8002a40:	080109b4 	.word	0x080109b4
 8002a44:	080109bc 	.word	0x080109bc
 8002a48:	080109c4 	.word	0x080109c4
 8002a4c:	080109cc 	.word	0x080109cc
 8002a50:	080109d8 	.word	0x080109d8
 8002a54:	080109e4 	.word	0x080109e4
 8002a58:	080109f0 	.word	0x080109f0
 8002a5c:	080109fc 	.word	0x080109fc
 8002a60:	08010a08 	.word	0x08010a08
 8002a64:	08010a14 	.word	0x08010a14
 8002a68:	08010a24 	.word	0x08010a24
 8002a6c:	08010a3c 	.word	0x08010a3c
 8002a70:	08010a48 	.word	0x08010a48
 8002a74:	200009cc 	.word	0x200009cc
 8002a78:	08010a4c 	.word	0x08010a4c
 8002a7c:	08010a68 	.word	0x08010a68
 8002a80:	08010a7c 	.word	0x08010a7c
 8002a84:	0000075b 	.word	0x0000075b
 8002a88:	20000268 	.word	0x20000268
 8002a8c:	08010a94 	.word	0x08010a94
 8002a90:	2000027c 	.word	0x2000027c
 8002a94:	20000290 	.word	0x20000290
 8002a98:	08010aa4 	.word	0x08010aa4
 8002a9c:	08010ab0 	.word	0x08010ab0
 8002aa0:	08010ad0 	.word	0x08010ad0
 8002aa4:	08010aec 	.word	0x08010aec
 8002aa8:	200002a8 	.word	0x200002a8
 8002aac:	08010b04 	.word	0x08010b04
 8002ab0:	08010b24 	.word	0x08010b24
 8002ab4:	08010b3c 	.word	0x08010b3c
 8002ab8:	08010b48 	.word	0x08010b48
 8002abc:	08010b54 	.word	0x08010b54
 8002ac0:	08010b74 	.word	0x08010b74
 8002ac4:	08010b7c 	.word	0x08010b7c
 8002ac8:	0000abf0 	.word	0x0000abf0
 8002acc:	08010b94 	.word	0x08010b94
 8002ad0:	08010bac 	.word	0x08010bac
 8002ad4:	08010bc8 	.word	0x08010bc8
 8002ad8:	08010bf4 	.word	0x08010bf4
 8002adc:	08010c08 	.word	0x08010c08
 8002ae0:	08010c14 	.word	0x08010c14
 8002ae4:	08010c20 	.word	0x08010c20
 8002ae8:	08010c3c 	.word	0x08010c3c
 8002aec:	08010c48 	.word	0x08010c48
 8002af0:	08010c54 	.word	0x08010c54
 8002af4:	08010c64 	.word	0x08010c64

08002af8 <get_modem_info>:
void get_modem_info()
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	af00      	add	r7, sp, #0
	  modem_initiate_cmd(MODEM_GET_INF0);
 8002afc:	2001      	movs	r0, #1
 8002afe:	f7ff fdf7 	bl	80026f0 <modem_initiate_cmd>
	  osDelay(300);
 8002b02:	2396      	movs	r3, #150	; 0x96
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	0018      	movs	r0, r3
 8002b08:	f007 f88b 	bl	8009c22 <osDelay>

	  modem_initiate_cmd(MODEM_GET_MANF_ID);
 8002b0c:	2004      	movs	r0, #4
 8002b0e:	f7ff fdef 	bl	80026f0 <modem_initiate_cmd>
	  osDelay(300);
 8002b12:	2396      	movs	r3, #150	; 0x96
 8002b14:	005b      	lsls	r3, r3, #1
 8002b16:	0018      	movs	r0, r3
 8002b18:	f007 f883 	bl	8009c22 <osDelay>

	  modem_initiate_cmd(MODEM_GET_TA_MODEL_INFO);
 8002b1c:	2005      	movs	r0, #5
 8002b1e:	f7ff fde7 	bl	80026f0 <modem_initiate_cmd>
	  osDelay(300);
 8002b22:	2396      	movs	r3, #150	; 0x96
 8002b24:	005b      	lsls	r3, r3, #1
 8002b26:	0018      	movs	r0, r3
 8002b28:	f007 f87b 	bl	8009c22 <osDelay>
}
 8002b2c:	46c0      	nop			; (mov r8, r8)
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}

08002b32 <modem_set_sim_configurations>:
void modem_set_sim_configurations()
{
 8002b32:	b580      	push	{r7, lr}
 8002b34:	af00      	add	r7, sp, #0
	  modem_initiate_cmd(MODEM_CHECK_SIM_READY);
 8002b36:	2006      	movs	r0, #6
 8002b38:	f7ff fdda 	bl	80026f0 <modem_initiate_cmd>
	  osDelay(300);
 8002b3c:	2396      	movs	r3, #150	; 0x96
 8002b3e:	005b      	lsls	r3, r3, #1
 8002b40:	0018      	movs	r0, r3
 8002b42:	f007 f86e 	bl	8009c22 <osDelay>

	  modem_initiate_cmd(MODEM_SET_NETWORK_REG);
 8002b46:	2009      	movs	r0, #9
 8002b48:	f7ff fdd2 	bl	80026f0 <modem_initiate_cmd>
	  osDelay(300);
 8002b4c:	2396      	movs	r3, #150	; 0x96
 8002b4e:	005b      	lsls	r3, r3, #1
 8002b50:	0018      	movs	r0, r3
 8002b52:	f007 f866 	bl	8009c22 <osDelay>

	  modem_initiate_cmd(MODEM_SET_PDP);
 8002b56:	200d      	movs	r0, #13
 8002b58:	f7ff fdca 	bl	80026f0 <modem_initiate_cmd>
	  osDelay(300);
 8002b5c:	2396      	movs	r3, #150	; 0x96
 8002b5e:	005b      	lsls	r3, r3, #1
 8002b60:	0018      	movs	r0, r3
 8002b62:	f007 f85e 	bl	8009c22 <osDelay>

	  modem_initiate_cmd(MODEM_ATTACH_GPRS);
 8002b66:	200a      	movs	r0, #10
 8002b68:	f7ff fdc2 	bl	80026f0 <modem_initiate_cmd>
	  osDelay(300);
 8002b6c:	2396      	movs	r3, #150	; 0x96
 8002b6e:	005b      	lsls	r3, r3, #1
 8002b70:	0018      	movs	r0, r3
 8002b72:	f007 f856 	bl	8009c22 <osDelay>

	  modem_initiate_cmd(MODEM_ACTIVATE_PDP);
 8002b76:	200e      	movs	r0, #14
 8002b78:	f7ff fdba 	bl	80026f0 <modem_initiate_cmd>
	  osDelay(300);
 8002b7c:	2396      	movs	r3, #150	; 0x96
 8002b7e:	005b      	lsls	r3, r3, #1
 8002b80:	0018      	movs	r0, r3
 8002b82:	f007 f84e 	bl	8009c22 <osDelay>

	  /*
	  modem_initiate_cmd(MODEM_CHECK_SIM_READY);
	  osDelay(300);
	  */
}
 8002b86:	46c0      	nop			; (mov r8, r8)
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <modem_reset>:
void modem_reset()
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	af00      	add	r7, sp, #0
	 modem_initiate_cmd(MODEM_RESET);
 8002b90:	200f      	movs	r0, #15
 8002b92:	f7ff fdad 	bl	80026f0 <modem_initiate_cmd>
	 osDelay(300);
 8002b96:	2396      	movs	r3, #150	; 0x96
 8002b98:	005b      	lsls	r3, r3, #1
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f007 f841 	bl	8009c22 <osDelay>
}
 8002ba0:	46c0      	nop			; (mov r8, r8)
 8002ba2:	46bd      	mov	sp, r7
 8002ba4:	bd80      	pop	{r7, pc}

08002ba6 <modem_mqtt_init>:
void modem_mqtt_init()
{
 8002ba6:	b580      	push	{r7, lr}
 8002ba8:	af00      	add	r7, sp, #0
	modem_initiate_cmd(MODEM_MQTT_VERSION_CFG);
 8002baa:	2010      	movs	r0, #16
 8002bac:	f7ff fda0 	bl	80026f0 <modem_initiate_cmd>
	osDelay(300);
 8002bb0:	2396      	movs	r3, #150	; 0x96
 8002bb2:	005b      	lsls	r3, r3, #1
 8002bb4:	0018      	movs	r0, r3
 8002bb6:	f007 f834 	bl	8009c22 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_OPEN);
 8002bba:	2011      	movs	r0, #17
 8002bbc:	f7ff fd98 	bl	80026f0 <modem_initiate_cmd>
	osDelay(2000);
 8002bc0:	23fa      	movs	r3, #250	; 0xfa
 8002bc2:	00db      	lsls	r3, r3, #3
 8002bc4:	0018      	movs	r0, r3
 8002bc6:	f007 f82c 	bl	8009c22 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_CONN);
 8002bca:	2013      	movs	r0, #19
 8002bcc:	f7ff fd90 	bl	80026f0 <modem_initiate_cmd>
	osDelay(2000);
 8002bd0:	23fa      	movs	r3, #250	; 0xfa
 8002bd2:	00db      	lsls	r3, r3, #3
 8002bd4:	0018      	movs	r0, r3
 8002bd6:	f007 f824 	bl	8009c22 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_SUBSCRIBE);
 8002bda:	2015      	movs	r0, #21
 8002bdc:	f7ff fd88 	bl	80026f0 <modem_initiate_cmd>
	osDelay(2000);
 8002be0:	23fa      	movs	r3, #250	; 0xfa
 8002be2:	00db      	lsls	r3, r3, #3
 8002be4:	0018      	movs	r0, r3
 8002be6:	f007 f81c 	bl	8009c22 <osDelay>

	/*
	modem_initiate_cmd(MODEM_MQTT_VERSION_CFG);
	osDelay(300);
	*/
}
 8002bea:	46c0      	nop			; (mov r8, r8)
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}

08002bf0 <modem_mqtt_publish>:
void modem_mqtt_publish()
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	af00      	add	r7, sp, #0
//	format_json_message();
//	osDelay(100);
	modem_initiate_cmd(MODEM_MQTT_PUBLISH);
 8002bf4:	2016      	movs	r0, #22
 8002bf6:	f7ff fd7b 	bl	80026f0 <modem_initiate_cmd>
//	osDelay(300);
	memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
 8002bfa:	4b04      	ldr	r3, [pc, #16]	; (8002c0c <modem_mqtt_publish+0x1c>)
 8002bfc:	22c8      	movs	r2, #200	; 0xc8
 8002bfe:	2100      	movs	r1, #0
 8002c00:	0018      	movs	r0, r3
 8002c02:	f00b f8d5 	bl	800ddb0 <memset>
}
 8002c06:	46c0      	nop			; (mov r8, r8)
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	200009cc 	.word	0x200009cc

08002c10 <modem_mqtt_connect>:
void modem_mqtt_connect()
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b0b4      	sub	sp, #208	; 0xd0
 8002c14:	af02      	add	r7, sp, #8
	modem_initiate_cmd(MODEM_MQTT_VERSION_CFG);
 8002c16:	2010      	movs	r0, #16
 8002c18:	f7ff fd6a 	bl	80026f0 <modem_initiate_cmd>
	osDelay(300);
 8002c1c:	2396      	movs	r3, #150	; 0x96
 8002c1e:	005b      	lsls	r3, r3, #1
 8002c20:	0018      	movs	r0, r3
 8002c22:	f006 fffe 	bl	8009c22 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_OPEN);
 8002c26:	2011      	movs	r0, #17
 8002c28:	f7ff fd62 	bl	80026f0 <modem_initiate_cmd>
	osDelay(2000);
 8002c2c:	23fa      	movs	r3, #250	; 0xfa
 8002c2e:	00db      	lsls	r3, r3, #3
 8002c30:	0018      	movs	r0, r3
 8002c32:	f006 fff6 	bl	8009c22 <osDelay>

	char cmd[200];
	// --- Connect MQTT Client ---
	sprintf(cmd, "AT+QMTCONN=%d,\"%s\",\"%s\",\"%s\"", MQTT_CLIENT_IDX, modem_mqtt_conf_t.mqtt_client_id,
 8002c36:	4a09      	ldr	r2, [pc, #36]	; (8002c5c <modem_mqtt_connect+0x4c>)
 8002c38:	4909      	ldr	r1, [pc, #36]	; (8002c60 <modem_mqtt_connect+0x50>)
 8002c3a:	0038      	movs	r0, r7
 8002c3c:	4b09      	ldr	r3, [pc, #36]	; (8002c64 <modem_mqtt_connect+0x54>)
 8002c3e:	9301      	str	r3, [sp, #4]
 8002c40:	4b09      	ldr	r3, [pc, #36]	; (8002c68 <modem_mqtt_connect+0x58>)
 8002c42:	9300      	str	r3, [sp, #0]
 8002c44:	0013      	movs	r3, r2
 8002c46:	2200      	movs	r2, #0
 8002c48:	f00b f846 	bl	800dcd8 <siprintf>
							modem_mqtt_conf_t.mqtt_username,modem_mqtt_conf_t.mqtt_password);
	modem_send_msg(cmd);
 8002c4c:	003b      	movs	r3, r7
 8002c4e:	0018      	movs	r0, r3
 8002c50:	f7ff fc2c 	bl	80024ac <modem_send_msg>
}
 8002c54:	46c0      	nop			; (mov r8, r8)
 8002c56:	46bd      	mov	sp, r7
 8002c58:	b032      	add	sp, #200	; 0xc8
 8002c5a:	bd80      	pop	{r7, pc}
 8002c5c:	20000290 	.word	0x20000290
 8002c60:	08010ab0 	.word	0x08010ab0
 8002c64:	2000027c 	.word	0x2000027c
 8002c68:	20000268 	.word	0x20000268

08002c6c <modem_mqtt_disconnect>:
void modem_mqtt_disconnect()
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
	modem_send_msg("AT+QMTDISC=0");
 8002c70:	4b05      	ldr	r3, [pc, #20]	; (8002c88 <modem_mqtt_disconnect+0x1c>)
 8002c72:	0018      	movs	r0, r3
 8002c74:	f7ff fc1a 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 8002c78:	23fa      	movs	r3, #250	; 0xfa
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	0018      	movs	r0, r3
 8002c7e:	f006 ffd0 	bl	8009c22 <osDelay>
}
 8002c82:	46c0      	nop			; (mov r8, r8)
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}
 8002c88:	08010c70 	.word	0x08010c70

08002c8c <modem_handle_mqtt_urc_codes>:
void modem_handle_mqtt_urc_codes()
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	af00      	add	r7, sp, #0
	switch(modem_info_t.mqtt_info_t.mqtt_urc_error)
 8002c90:	4b1b      	ldr	r3, [pc, #108]	; (8002d00 <modem_handle_mqtt_urc_codes+0x74>)
 8002c92:	2250      	movs	r2, #80	; 0x50
 8002c94:	5c9b      	ldrb	r3, [r3, r2]
 8002c96:	2b05      	cmp	r3, #5
 8002c98:	d82d      	bhi.n	8002cf6 <modem_handle_mqtt_urc_codes+0x6a>
 8002c9a:	009a      	lsls	r2, r3, #2
 8002c9c:	4b19      	ldr	r3, [pc, #100]	; (8002d04 <modem_handle_mqtt_urc_codes+0x78>)
 8002c9e:	18d3      	adds	r3, r2, r3
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	469f      	mov	pc, r3
	{
		case 1:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 8002ca4:	4b16      	ldr	r3, [pc, #88]	; (8002d00 <modem_handle_mqtt_urc_codes+0x74>)
 8002ca6:	2250      	movs	r2, #80	; 0x50
 8002ca8:	2100      	movs	r1, #0
 8002caa:	5499      	strb	r1, [r3, r2]
			modem_reset();
 8002cac:	f7ff ff6e 	bl	8002b8c <modem_reset>
			modem_mqtt_init();
 8002cb0:	f7ff ff79 	bl	8002ba6 <modem_mqtt_init>
			break;
 8002cb4:	e020      	b.n	8002cf8 <modem_handle_mqtt_urc_codes+0x6c>
		}
		case 2:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 8002cb6:	4b12      	ldr	r3, [pc, #72]	; (8002d00 <modem_handle_mqtt_urc_codes+0x74>)
 8002cb8:	2250      	movs	r2, #80	; 0x50
 8002cba:	2100      	movs	r1, #0
 8002cbc:	5499      	strb	r1, [r3, r2]
			modem_reset();
 8002cbe:	f7ff ff65 	bl	8002b8c <modem_reset>
			modem_mqtt_init();
 8002cc2:	f7ff ff70 	bl	8002ba6 <modem_mqtt_init>
			break;
 8002cc6:	e017      	b.n	8002cf8 <modem_handle_mqtt_urc_codes+0x6c>
		}
		case 3:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 8002cc8:	4b0d      	ldr	r3, [pc, #52]	; (8002d00 <modem_handle_mqtt_urc_codes+0x74>)
 8002cca:	2250      	movs	r2, #80	; 0x50
 8002ccc:	2100      	movs	r1, #0
 8002cce:	5499      	strb	r1, [r3, r2]
			modem_reset();
 8002cd0:	f7ff ff5c 	bl	8002b8c <modem_reset>
			modem_mqtt_init();
 8002cd4:	f7ff ff67 	bl	8002ba6 <modem_mqtt_init>
			break;
 8002cd8:	e00e      	b.n	8002cf8 <modem_handle_mqtt_urc_codes+0x6c>
		}
		case 4:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 8002cda:	4b09      	ldr	r3, [pc, #36]	; (8002d00 <modem_handle_mqtt_urc_codes+0x74>)
 8002cdc:	2250      	movs	r2, #80	; 0x50
 8002cde:	2100      	movs	r1, #0
 8002ce0:	5499      	strb	r1, [r3, r2]
			modem_reset();
 8002ce2:	f7ff ff53 	bl	8002b8c <modem_reset>
			modem_mqtt_init();
 8002ce6:	f7ff ff5e 	bl	8002ba6 <modem_mqtt_init>
			break;
 8002cea:	e005      	b.n	8002cf8 <modem_handle_mqtt_urc_codes+0x6c>
		}
		case 5:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 8002cec:	4b04      	ldr	r3, [pc, #16]	; (8002d00 <modem_handle_mqtt_urc_codes+0x74>)
 8002cee:	2250      	movs	r2, #80	; 0x50
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	5499      	strb	r1, [r3, r2]
			break;
 8002cf4:	e000      	b.n	8002cf8 <modem_handle_mqtt_urc_codes+0x6c>
		}
		default:
		{
			break;
 8002cf6:	46c0      	nop			; (mov r8, r8)
		}

	}
}
 8002cf8:	46c0      	nop			; (mov r8, r8)
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	46c0      	nop			; (mov r8, r8)
 8002d00:	200007ec 	.word	0x200007ec
 8002d04:	08011168 	.word	0x08011168

08002d08 <format_json_message>:
void format_json_message(void)
{
 8002d08:	b580      	push	{r7, lr}
 8002d0a:	b082      	sub	sp, #8
 8002d0c:	af00      	add	r7, sp, #0

    cJSON *root = cJSON_CreateObject();
 8002d0e:	f002 fc61 	bl	80055d4 <cJSON_CreateObject>
 8002d12:	0003      	movs	r3, r0
 8002d14:	607b      	str	r3, [r7, #4]
    if (root == NULL)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d104      	bne.n	8002d26 <format_json_message+0x1e>
    {
        Log_msg("JSON object creation failed\r\n");
 8002d1c:	4b2a      	ldr	r3, [pc, #168]	; (8002dc8 <format_json_message+0xc0>)
 8002d1e:	0018      	movs	r0, r3
 8002d20:	f000 ffda 	bl	8003cd8 <Log_msg>
        return;
 8002d24:	e04d      	b.n	8002dc2 <format_json_message+0xba>
    }

    cJSON_AddNumberToObject(root, "Msg_Count", Msg_cnt);
 8002d26:	4b29      	ldr	r3, [pc, #164]	; (8002dcc <format_json_message+0xc4>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	0018      	movs	r0, r3
 8002d2c:	f7ff fb2a 	bl	8002384 <__aeabi_i2d>
 8002d30:	0002      	movs	r2, r0
 8002d32:	000b      	movs	r3, r1
 8002d34:	4926      	ldr	r1, [pc, #152]	; (8002dd0 <format_json_message+0xc8>)
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f002 fb92 	bl	8005460 <cJSON_AddNumberToObject>
    if(GpsInfo_t.latitude)
 8002d3c:	4b25      	ldr	r3, [pc, #148]	; (8002dd4 <format_json_message+0xcc>)
 8002d3e:	6918      	ldr	r0, [r3, #16]
 8002d40:	6959      	ldr	r1, [r3, #20]
 8002d42:	2200      	movs	r2, #0
 8002d44:	2300      	movs	r3, #0
 8002d46:	f7fd fb8b 	bl	8000460 <__aeabi_dcmpeq>
 8002d4a:	1e03      	subs	r3, r0, #0
 8002d4c:	d119      	bne.n	8002d82 <format_json_message+0x7a>
    {
    	//cJSON_AddNumberToObject(root, "Lat",GpsInfo_t.latitude);
    	//cJSON_AddNumberToObject(root, "Long",GpsInfo_t.longitude);
    	sprintf(Lat_string,"%.4f",GpsInfo_t.latitude);
 8002d4e:	4b21      	ldr	r3, [pc, #132]	; (8002dd4 <format_json_message+0xcc>)
 8002d50:	691a      	ldr	r2, [r3, #16]
 8002d52:	695b      	ldr	r3, [r3, #20]
 8002d54:	4920      	ldr	r1, [pc, #128]	; (8002dd8 <format_json_message+0xd0>)
 8002d56:	4821      	ldr	r0, [pc, #132]	; (8002ddc <format_json_message+0xd4>)
 8002d58:	f00a ffbe 	bl	800dcd8 <siprintf>
    	sprintf(Long_string,"%.4f",GpsInfo_t.longitude);
 8002d5c:	4b1d      	ldr	r3, [pc, #116]	; (8002dd4 <format_json_message+0xcc>)
 8002d5e:	699a      	ldr	r2, [r3, #24]
 8002d60:	69db      	ldr	r3, [r3, #28]
 8002d62:	491d      	ldr	r1, [pc, #116]	; (8002dd8 <format_json_message+0xd0>)
 8002d64:	481e      	ldr	r0, [pc, #120]	; (8002de0 <format_json_message+0xd8>)
 8002d66:	f00a ffb7 	bl	800dcd8 <siprintf>
		cJSON_AddStringToObject(root,"Lat",Lat_string);
 8002d6a:	4a1c      	ldr	r2, [pc, #112]	; (8002ddc <format_json_message+0xd4>)
 8002d6c:	491d      	ldr	r1, [pc, #116]	; (8002de4 <format_json_message+0xdc>)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	0018      	movs	r0, r3
 8002d72:	f002 fb9b 	bl	80054ac <cJSON_AddStringToObject>
		cJSON_AddStringToObject(root,"Long",Long_string);
 8002d76:	4a1a      	ldr	r2, [pc, #104]	; (8002de0 <format_json_message+0xd8>)
 8002d78:	491b      	ldr	r1, [pc, #108]	; (8002de8 <format_json_message+0xe0>)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	0018      	movs	r0, r3
 8002d7e:	f002 fb95 	bl	80054ac <cJSON_AddStringToObject>
    }
    char *json_str = cJSON_Print(root);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	0018      	movs	r0, r3
 8002d86:	f002 f831 	bl	8004dec <cJSON_Print>
 8002d8a:	0003      	movs	r3, r0
 8002d8c:	603b      	str	r3, [r7, #0]
    if (json_str != NULL)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d00e      	beq.n	8002db2 <format_json_message+0xaa>
    {
        strncpy(MQTT_PUB_Buff, json_str, MQTT_PUB_BUFF_LEN - 1);
 8002d94:	4a15      	ldr	r2, [pc, #84]	; (8002dec <format_json_message+0xe4>)
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	4b15      	ldr	r3, [pc, #84]	; (8002df0 <format_json_message+0xe8>)
 8002d9a:	0018      	movs	r0, r3
 8002d9c:	f00b f82f 	bl	800ddfe <strncpy>
        MQTT_PUB_Buff[MQTT_PUB_BUFF_LEN - 1] = '\0';
 8002da0:	4b13      	ldr	r3, [pc, #76]	; (8002df0 <format_json_message+0xe8>)
 8002da2:	4a12      	ldr	r2, [pc, #72]	; (8002dec <format_json_message+0xe4>)
 8002da4:	2100      	movs	r1, #0
 8002da6:	5499      	strb	r1, [r3, r2]

        /*
        print_msg("Formatted JSON:\r\n");
        print_msg(MQTT_PUB_Buff);
		*/
        free(json_str);
 8002da8:	683b      	ldr	r3, [r7, #0]
 8002daa:	0018      	movs	r0, r3
 8002dac:	f009 fa88 	bl	800c2c0 <free>
 8002db0:	e003      	b.n	8002dba <format_json_message+0xb2>
    } else
    {
        Log_msg("JSON formatting failed\r\n");
 8002db2:	4b10      	ldr	r3, [pc, #64]	; (8002df4 <format_json_message+0xec>)
 8002db4:	0018      	movs	r0, r3
 8002db6:	f000 ff8f 	bl	8003cd8 <Log_msg>
    }

    cJSON_Delete(root);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	0018      	movs	r0, r3
 8002dbe:	f001 fb3f 	bl	8004440 <cJSON_Delete>
}
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	b002      	add	sp, #8
 8002dc6:	bd80      	pop	{r7, pc}
 8002dc8:	08010c80 	.word	0x08010c80
 8002dcc:	20000a94 	.word	0x20000a94
 8002dd0:	08010ca0 	.word	0x08010ca0
 8002dd4:	20000208 	.word	0x20000208
 8002dd8:	08010cac 	.word	0x08010cac
 8002ddc:	200004a8 	.word	0x200004a8
 8002de0:	200004b4 	.word	0x200004b4
 8002de4:	08010cb4 	.word	0x08010cb4
 8002de8:	08010cb8 	.word	0x08010cb8
 8002dec:	000001ff 	.word	0x000001ff
 8002df0:	200002a8 	.word	0x200002a8
 8002df4:	08010cc0 	.word	0x08010cc0

08002df8 <convertDMMtoDecimal>:
// Convert NMEA DMM (Degrees and Decimal Minutes) to Decimal Degrees
double convertDMMtoDecimal(const char *dmmStr, char direction)
{
 8002df8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002dfa:	b08d      	sub	sp, #52	; 0x34
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	000a      	movs	r2, r1
 8002e02:	260b      	movs	r6, #11
 8002e04:	19bb      	adds	r3, r7, r6
 8002e06:	701a      	strb	r2, [r3, #0]
    double dmm = atof(dmmStr);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	0018      	movs	r0, r3
 8002e0c:	f009 fa42 	bl	800c294 <atof>
 8002e10:	0002      	movs	r2, r0
 8002e12:	000b      	movs	r3, r1
 8002e14:	62ba      	str	r2, [r7, #40]	; 0x28
 8002e16:	62fb      	str	r3, [r7, #44]	; 0x2c
    int degrees = (int)(dmm / 100);
 8002e18:	2200      	movs	r2, #0
 8002e1a:	4b25      	ldr	r3, [pc, #148]	; (8002eb0 <convertDMMtoDecimal+0xb8>)
 8002e1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e1e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e20:	f7fe f81e 	bl	8000e60 <__aeabi_ddiv>
 8002e24:	0002      	movs	r2, r0
 8002e26:	000b      	movs	r3, r1
 8002e28:	0010      	movs	r0, r2
 8002e2a:	0019      	movs	r1, r3
 8002e2c:	f7ff fa74 	bl	8002318 <__aeabi_d2iz>
 8002e30:	0003      	movs	r3, r0
 8002e32:	627b      	str	r3, [r7, #36]	; 0x24
    double minutes = dmm - (degrees * 100);
 8002e34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e36:	2264      	movs	r2, #100	; 0x64
 8002e38:	4353      	muls	r3, r2
 8002e3a:	0018      	movs	r0, r3
 8002e3c:	f7ff faa2 	bl	8002384 <__aeabi_i2d>
 8002e40:	0002      	movs	r2, r0
 8002e42:	000b      	movs	r3, r1
 8002e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e46:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e48:	f7fe fec6 	bl	8001bd8 <__aeabi_dsub>
 8002e4c:	0002      	movs	r2, r0
 8002e4e:	000b      	movs	r3, r1
 8002e50:	61ba      	str	r2, [r7, #24]
 8002e52:	61fb      	str	r3, [r7, #28]
    double decimal = degrees + (minutes / 60.0);
 8002e54:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002e56:	f7ff fa95 	bl	8002384 <__aeabi_i2d>
 8002e5a:	6038      	str	r0, [r7, #0]
 8002e5c:	6079      	str	r1, [r7, #4]
 8002e5e:	2200      	movs	r2, #0
 8002e60:	4b14      	ldr	r3, [pc, #80]	; (8002eb4 <convertDMMtoDecimal+0xbc>)
 8002e62:	69b8      	ldr	r0, [r7, #24]
 8002e64:	69f9      	ldr	r1, [r7, #28]
 8002e66:	f7fd fffb 	bl	8000e60 <__aeabi_ddiv>
 8002e6a:	0002      	movs	r2, r0
 8002e6c:	000b      	movs	r3, r1
 8002e6e:	6838      	ldr	r0, [r7, #0]
 8002e70:	6879      	ldr	r1, [r7, #4]
 8002e72:	f7fd fc95 	bl	80007a0 <__aeabi_dadd>
 8002e76:	0002      	movs	r2, r0
 8002e78:	000b      	movs	r3, r1
 8002e7a:	613a      	str	r2, [r7, #16]
 8002e7c:	617b      	str	r3, [r7, #20]
    return (direction == 'S' || direction == 'W') ? -decimal : decimal;
 8002e7e:	19bb      	adds	r3, r7, r6
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	2b53      	cmp	r3, #83	; 0x53
 8002e84:	d003      	beq.n	8002e8e <convertDMMtoDecimal+0x96>
 8002e86:	19bb      	adds	r3, r7, r6
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	2b57      	cmp	r3, #87	; 0x57
 8002e8c:	d107      	bne.n	8002e9e <convertDMMtoDecimal+0xa6>
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	001c      	movs	r4, r3
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	2280      	movs	r2, #128	; 0x80
 8002e96:	0612      	lsls	r2, r2, #24
 8002e98:	405a      	eors	r2, r3
 8002e9a:	0015      	movs	r5, r2
 8002e9c:	e001      	b.n	8002ea2 <convertDMMtoDecimal+0xaa>
 8002e9e:	693c      	ldr	r4, [r7, #16]
 8002ea0:	697d      	ldr	r5, [r7, #20]
 8002ea2:	0022      	movs	r2, r4
 8002ea4:	002b      	movs	r3, r5
}
 8002ea6:	0010      	movs	r0, r2
 8002ea8:	0019      	movs	r1, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	b00d      	add	sp, #52	; 0x34
 8002eae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002eb0:	40590000 	.word	0x40590000
 8002eb4:	404e0000 	.word	0x404e0000

08002eb8 <modem_parse_gps_location>:
int modem_parse_gps_location(const char *response, GpsData *data)
{
 8002eb8:	b590      	push	{r4, r7, lr}
 8002eba:	b0af      	sub	sp, #188	; 0xbc
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
 8002ec0:	6039      	str	r1, [r7, #0]
    const char *start = strstr(response, "+QGPSLOC:");
 8002ec2:	4a99      	ldr	r2, [pc, #612]	; (8003128 <modem_parse_gps_location+0x270>)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	0011      	movs	r1, r2
 8002ec8:	0018      	movs	r0, r3
 8002eca:	f00b f810 	bl	800deee <strstr>
 8002ece:	0003      	movs	r3, r0
 8002ed0:	22a8      	movs	r2, #168	; 0xa8
 8002ed2:	18b9      	adds	r1, r7, r2
 8002ed4:	600b      	str	r3, [r1, #0]
    if (!start) return -1;
 8002ed6:	18bb      	adds	r3, r7, r2
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d102      	bne.n	8002ee4 <modem_parse_gps_location+0x2c>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	425b      	negs	r3, r3
 8002ee2:	e11c      	b.n	800311e <modem_parse_gps_location+0x266>
    start += strlen("+QGPSLOC: ");
 8002ee4:	22a8      	movs	r2, #168	; 0xa8
 8002ee6:	18bb      	adds	r3, r7, r2
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	330a      	adds	r3, #10
 8002eec:	18b9      	adds	r1, r7, r2
 8002eee:	600b      	str	r3, [r1, #0]

    char buffer[128];
    strncpy(buffer, start, sizeof(buffer) - 1);
 8002ef0:	18bb      	adds	r3, r7, r2
 8002ef2:	6819      	ldr	r1, [r3, #0]
 8002ef4:	2428      	movs	r4, #40	; 0x28
 8002ef6:	193b      	adds	r3, r7, r4
 8002ef8:	227f      	movs	r2, #127	; 0x7f
 8002efa:	0018      	movs	r0, r3
 8002efc:	f00a ff7f 	bl	800ddfe <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 8002f00:	0020      	movs	r0, r4
 8002f02:	183b      	adds	r3, r7, r0
 8002f04:	227f      	movs	r2, #127	; 0x7f
 8002f06:	2100      	movs	r1, #0
 8002f08:	5499      	strb	r1, [r3, r2]

    char *token = strtok(buffer, ",");
 8002f0a:	4a88      	ldr	r2, [pc, #544]	; (800312c <modem_parse_gps_location+0x274>)
 8002f0c:	183b      	adds	r3, r7, r0
 8002f0e:	0011      	movs	r1, r2
 8002f10:	0018      	movs	r0, r3
 8002f12:	f00a ff89 	bl	800de28 <strtok>
 8002f16:	0003      	movs	r3, r0
 8002f18:	22b4      	movs	r2, #180	; 0xb4
 8002f1a:	18ba      	adds	r2, r7, r2
 8002f1c:	6013      	str	r3, [r2, #0]
    int field = 0;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	22b0      	movs	r2, #176	; 0xb0
 8002f22:	18ba      	adds	r2, r7, r2
 8002f24:	6013      	str	r3, [r2, #0]
    char latStr[16], lonStr[16];
    char latDir = 'N', lonDir = 'E';
 8002f26:	23af      	movs	r3, #175	; 0xaf
 8002f28:	18fb      	adds	r3, r7, r3
 8002f2a:	224e      	movs	r2, #78	; 0x4e
 8002f2c:	701a      	strb	r2, [r3, #0]
 8002f2e:	23ae      	movs	r3, #174	; 0xae
 8002f30:	18fb      	adds	r3, r7, r3
 8002f32:	2245      	movs	r2, #69	; 0x45
 8002f34:	701a      	strb	r2, [r3, #0]

    while (token != NULL)
 8002f36:	e0c7      	b.n	80030c8 <modem_parse_gps_location+0x210>
    {
        switch (field)
 8002f38:	22b0      	movs	r2, #176	; 0xb0
 8002f3a:	18bb      	adds	r3, r7, r2
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b0a      	cmp	r3, #10
 8002f40:	d900      	bls.n	8002f44 <modem_parse_gps_location+0x8c>
 8002f42:	e0b2      	b.n	80030aa <modem_parse_gps_location+0x1f2>
 8002f44:	18bb      	adds	r3, r7, r2
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	009a      	lsls	r2, r3, #2
 8002f4a:	4b79      	ldr	r3, [pc, #484]	; (8003130 <modem_parse_gps_location+0x278>)
 8002f4c:	18d3      	adds	r3, r2, r3
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	469f      	mov	pc, r3
        {
            case 0:
                strncpy(data->utc_time, token, sizeof(data->utc_time) - 1);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	22b4      	movs	r2, #180	; 0xb4
 8002f56:	18ba      	adds	r2, r7, r2
 8002f58:	6811      	ldr	r1, [r2, #0]
 8002f5a:	220a      	movs	r2, #10
 8002f5c:	0018      	movs	r0, r3
 8002f5e:	f00a ff4e 	bl	800ddfe <strncpy>
                data->utc_time[sizeof(data->utc_time) - 1] = '\0';
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	2200      	movs	r2, #0
 8002f66:	729a      	strb	r2, [r3, #10]
                break;
 8002f68:	e09f      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 1:
                strncpy(latStr, token, sizeof(latStr) - 1);
 8002f6a:	23b4      	movs	r3, #180	; 0xb4
 8002f6c:	18fb      	adds	r3, r7, r3
 8002f6e:	6819      	ldr	r1, [r3, #0]
 8002f70:	2418      	movs	r4, #24
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	220f      	movs	r2, #15
 8002f76:	0018      	movs	r0, r3
 8002f78:	f00a ff41 	bl	800ddfe <strncpy>
                latStr[sizeof(latStr) - 1] = '\0';
 8002f7c:	193b      	adds	r3, r7, r4
 8002f7e:	2200      	movs	r2, #0
 8002f80:	73da      	strb	r2, [r3, #15]
                latDir = latStr[strlen(latStr) - 1];
 8002f82:	193b      	adds	r3, r7, r4
 8002f84:	0018      	movs	r0, r3
 8002f86:	f7fd f8c9 	bl	800011c <strlen>
 8002f8a:	0003      	movs	r3, r0
 8002f8c:	1e5a      	subs	r2, r3, #1
 8002f8e:	23af      	movs	r3, #175	; 0xaf
 8002f90:	18fb      	adds	r3, r7, r3
 8002f92:	1939      	adds	r1, r7, r4
 8002f94:	5c8a      	ldrb	r2, [r1, r2]
 8002f96:	701a      	strb	r2, [r3, #0]
                latStr[strlen(latStr) - 1] = '\0';
 8002f98:	193b      	adds	r3, r7, r4
 8002f9a:	0018      	movs	r0, r3
 8002f9c:	f7fd f8be 	bl	800011c <strlen>
 8002fa0:	0003      	movs	r3, r0
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	193a      	adds	r2, r7, r4
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	54d1      	strb	r1, [r2, r3]
                break;
 8002faa:	e07e      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 2:
                strncpy(lonStr, token, sizeof(lonStr) - 1);
 8002fac:	23b4      	movs	r3, #180	; 0xb4
 8002fae:	18fb      	adds	r3, r7, r3
 8002fb0:	6819      	ldr	r1, [r3, #0]
 8002fb2:	2408      	movs	r4, #8
 8002fb4:	193b      	adds	r3, r7, r4
 8002fb6:	220f      	movs	r2, #15
 8002fb8:	0018      	movs	r0, r3
 8002fba:	f00a ff20 	bl	800ddfe <strncpy>
                lonStr[sizeof(lonStr) - 1] = '\0';
 8002fbe:	193b      	adds	r3, r7, r4
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	73da      	strb	r2, [r3, #15]
                lonDir = lonStr[strlen(lonStr) - 1];
 8002fc4:	193b      	adds	r3, r7, r4
 8002fc6:	0018      	movs	r0, r3
 8002fc8:	f7fd f8a8 	bl	800011c <strlen>
 8002fcc:	0003      	movs	r3, r0
 8002fce:	1e5a      	subs	r2, r3, #1
 8002fd0:	23ae      	movs	r3, #174	; 0xae
 8002fd2:	18fb      	adds	r3, r7, r3
 8002fd4:	1939      	adds	r1, r7, r4
 8002fd6:	5c8a      	ldrb	r2, [r1, r2]
 8002fd8:	701a      	strb	r2, [r3, #0]
                lonStr[strlen(lonStr) - 1] = '\0';
 8002fda:	193b      	adds	r3, r7, r4
 8002fdc:	0018      	movs	r0, r3
 8002fde:	f7fd f89d 	bl	800011c <strlen>
 8002fe2:	0003      	movs	r3, r0
 8002fe4:	3b01      	subs	r3, #1
 8002fe6:	193a      	adds	r2, r7, r4
 8002fe8:	2100      	movs	r1, #0
 8002fea:	54d1      	strb	r1, [r2, r3]
                break;
 8002fec:	e05d      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 3:
                data->hdop = atof(token);
 8002fee:	23b4      	movs	r3, #180	; 0xb4
 8002ff0:	18fb      	adds	r3, r7, r3
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	0018      	movs	r0, r3
 8002ff6:	f009 f94d 	bl	800c294 <atof>
 8002ffa:	0002      	movs	r2, r0
 8002ffc:	000b      	movs	r3, r1
 8002ffe:	6839      	ldr	r1, [r7, #0]
 8003000:	620a      	str	r2, [r1, #32]
 8003002:	624b      	str	r3, [r1, #36]	; 0x24
                break;
 8003004:	e051      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 4:
                data->altitude = atof(token);
 8003006:	23b4      	movs	r3, #180	; 0xb4
 8003008:	18fb      	adds	r3, r7, r3
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	0018      	movs	r0, r3
 800300e:	f009 f941 	bl	800c294 <atof>
 8003012:	0002      	movs	r2, r0
 8003014:	000b      	movs	r3, r1
 8003016:	6839      	ldr	r1, [r7, #0]
 8003018:	628a      	str	r2, [r1, #40]	; 0x28
 800301a:	62cb      	str	r3, [r1, #44]	; 0x2c
                break;
 800301c:	e045      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 5:
                data->fix = atoi(token);
 800301e:	23b4      	movs	r3, #180	; 0xb4
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	0018      	movs	r0, r3
 8003026:	f009 f93a 	bl	800c29e <atoi>
 800302a:	0002      	movs	r2, r0
 800302c:	683b      	ldr	r3, [r7, #0]
 800302e:	631a      	str	r2, [r3, #48]	; 0x30
                break;
 8003030:	e03b      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 6:
                data->cog = atof(token);
 8003032:	23b4      	movs	r3, #180	; 0xb4
 8003034:	18fb      	adds	r3, r7, r3
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	0018      	movs	r0, r3
 800303a:	f009 f92b 	bl	800c294 <atof>
 800303e:	0002      	movs	r2, r0
 8003040:	000b      	movs	r3, r1
 8003042:	6839      	ldr	r1, [r7, #0]
 8003044:	638a      	str	r2, [r1, #56]	; 0x38
 8003046:	63cb      	str	r3, [r1, #60]	; 0x3c
                break;
 8003048:	e02f      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 7:
                data->spkm = atof(token);
 800304a:	23b4      	movs	r3, #180	; 0xb4
 800304c:	18fb      	adds	r3, r7, r3
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	0018      	movs	r0, r3
 8003052:	f009 f91f 	bl	800c294 <atof>
 8003056:	0002      	movs	r2, r0
 8003058:	000b      	movs	r3, r1
 800305a:	6839      	ldr	r1, [r7, #0]
 800305c:	640a      	str	r2, [r1, #64]	; 0x40
 800305e:	644b      	str	r3, [r1, #68]	; 0x44
                break;
 8003060:	e023      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 8:
                data->spkn = atof(token);
 8003062:	23b4      	movs	r3, #180	; 0xb4
 8003064:	18fb      	adds	r3, r7, r3
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	0018      	movs	r0, r3
 800306a:	f009 f913 	bl	800c294 <atof>
 800306e:	0002      	movs	r2, r0
 8003070:	000b      	movs	r3, r1
 8003072:	6839      	ldr	r1, [r7, #0]
 8003074:	648a      	str	r2, [r1, #72]	; 0x48
 8003076:	64cb      	str	r3, [r1, #76]	; 0x4c
                break;
 8003078:	e017      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 9:
                strncpy(data->date, token, sizeof(data->date) - 1);
 800307a:	683b      	ldr	r3, [r7, #0]
 800307c:	3350      	adds	r3, #80	; 0x50
 800307e:	22b4      	movs	r2, #180	; 0xb4
 8003080:	18ba      	adds	r2, r7, r2
 8003082:	6811      	ldr	r1, [r2, #0]
 8003084:	2206      	movs	r2, #6
 8003086:	0018      	movs	r0, r3
 8003088:	f00a feb9 	bl	800ddfe <strncpy>
                data->date[sizeof(data->date) - 1] = '\0';
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	2256      	movs	r2, #86	; 0x56
 8003090:	2100      	movs	r1, #0
 8003092:	5499      	strb	r1, [r3, r2]
                break;
 8003094:	e009      	b.n	80030aa <modem_parse_gps_location+0x1f2>
            case 10:
                data->nsat = atoi(token);
 8003096:	23b4      	movs	r3, #180	; 0xb4
 8003098:	18fb      	adds	r3, r7, r3
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	0018      	movs	r0, r3
 800309e:	f009 f8fe 	bl	800c29e <atoi>
 80030a2:	0002      	movs	r2, r0
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	659a      	str	r2, [r3, #88]	; 0x58
                break;
 80030a8:	46c0      	nop			; (mov r8, r8)
        }

        token = strtok(NULL, ",");
 80030aa:	4b20      	ldr	r3, [pc, #128]	; (800312c <modem_parse_gps_location+0x274>)
 80030ac:	0019      	movs	r1, r3
 80030ae:	2000      	movs	r0, #0
 80030b0:	f00a feba 	bl	800de28 <strtok>
 80030b4:	0003      	movs	r3, r0
 80030b6:	22b4      	movs	r2, #180	; 0xb4
 80030b8:	18ba      	adds	r2, r7, r2
 80030ba:	6013      	str	r3, [r2, #0]
        field++;
 80030bc:	22b0      	movs	r2, #176	; 0xb0
 80030be:	18bb      	adds	r3, r7, r2
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	18ba      	adds	r2, r7, r2
 80030c6:	6013      	str	r3, [r2, #0]
    while (token != NULL)
 80030c8:	23b4      	movs	r3, #180	; 0xb4
 80030ca:	18fb      	adds	r3, r7, r3
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d000      	beq.n	80030d4 <modem_parse_gps_location+0x21c>
 80030d2:	e731      	b.n	8002f38 <modem_parse_gps_location+0x80>
    }

    if (field < 11) return -2;
 80030d4:	23b0      	movs	r3, #176	; 0xb0
 80030d6:	18fb      	adds	r3, r7, r3
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	2b0a      	cmp	r3, #10
 80030dc:	dc02      	bgt.n	80030e4 <modem_parse_gps_location+0x22c>
 80030de:	2302      	movs	r3, #2
 80030e0:	425b      	negs	r3, r3
 80030e2:	e01c      	b.n	800311e <modem_parse_gps_location+0x266>

    data->latitude = convertDMMtoDecimal(latStr, latDir);
 80030e4:	23af      	movs	r3, #175	; 0xaf
 80030e6:	18fb      	adds	r3, r7, r3
 80030e8:	781a      	ldrb	r2, [r3, #0]
 80030ea:	2318      	movs	r3, #24
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	0011      	movs	r1, r2
 80030f0:	0018      	movs	r0, r3
 80030f2:	f7ff fe81 	bl	8002df8 <convertDMMtoDecimal>
 80030f6:	0002      	movs	r2, r0
 80030f8:	000b      	movs	r3, r1
 80030fa:	6839      	ldr	r1, [r7, #0]
 80030fc:	610a      	str	r2, [r1, #16]
 80030fe:	614b      	str	r3, [r1, #20]
    data->longitude = convertDMMtoDecimal(lonStr, lonDir);
 8003100:	23ae      	movs	r3, #174	; 0xae
 8003102:	18fb      	adds	r3, r7, r3
 8003104:	781a      	ldrb	r2, [r3, #0]
 8003106:	2308      	movs	r3, #8
 8003108:	18fb      	adds	r3, r7, r3
 800310a:	0011      	movs	r1, r2
 800310c:	0018      	movs	r0, r3
 800310e:	f7ff fe73 	bl	8002df8 <convertDMMtoDecimal>
 8003112:	0002      	movs	r2, r0
 8003114:	000b      	movs	r3, r1
 8003116:	6839      	ldr	r1, [r7, #0]
 8003118:	618a      	str	r2, [r1, #24]
 800311a:	61cb      	str	r3, [r1, #28]

    return 0;
 800311c:	2300      	movs	r3, #0
}
 800311e:	0018      	movs	r0, r3
 8003120:	46bd      	mov	sp, r7
 8003122:	b02f      	add	sp, #188	; 0xbc
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	46c0      	nop			; (mov r8, r8)
 8003128:	08010cdc 	.word	0x08010cdc
 800312c:	08010ce8 	.word	0x08010ce8
 8003130:	08011180 	.word	0x08011180

08003134 <Modem_BLE_Start>:
uint8_t client_write=0,clear_buff=0,mqtt_reinit=0,set_press=0;

/***************************************** Function Prototypes ******************************************/

void Modem_BLE_Start()
{
 8003134:	b590      	push	{r4, r7, lr}
 8003136:	b087      	sub	sp, #28
 8003138:	af00      	add	r7, sp, #0
	osThreadDef(ModemBLETask, Modem_BLE_Task, osPriorityNormal, 0, 256);
 800313a:	1d3b      	adds	r3, r7, #4
 800313c:	4a08      	ldr	r2, [pc, #32]	; (8003160 <Modem_BLE_Start+0x2c>)
 800313e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003140:	c313      	stmia	r3!, {r0, r1, r4}
 8003142:	ca03      	ldmia	r2!, {r0, r1}
 8003144:	c303      	stmia	r3!, {r0, r1}
	ModemBLE_TaskHandle = osThreadCreate(osThread(ModemBLETask), NULL);
 8003146:	1d3b      	adds	r3, r7, #4
 8003148:	2100      	movs	r1, #0
 800314a:	0018      	movs	r0, r3
 800314c:	f006 fd41 	bl	8009bd2 <osThreadCreate>
 8003150:	0002      	movs	r2, r0
 8003152:	4b04      	ldr	r3, [pc, #16]	; (8003164 <Modem_BLE_Start+0x30>)
 8003154:	601a      	str	r2, [r3, #0]
}
 8003156:	46c0      	nop			; (mov r8, r8)
 8003158:	46bd      	mov	sp, r7
 800315a:	b007      	add	sp, #28
 800315c:	bd90      	pop	{r4, r7, pc}
 800315e:	46c0      	nop			; (mov r8, r8)
 8003160:	08010cfc 	.word	0x08010cfc
 8003164:	200009bc 	.word	0x200009bc

08003168 <Modem_BLE_Task>:

void Modem_BLE_Task(void const * argument)
{
 8003168:	b580      	push	{r7, lr}
 800316a:	b082      	sub	sp, #8
 800316c:	af00      	add	r7, sp, #0
 800316e:	6078      	str	r0, [r7, #4]

	HAL_UARTEx_ReceiveToIdle_IT(&huart1,(uint8_t*)EC200u_Rx_Buff, sizeof(EC200u_Rx_Buff));
 8003170:	495f      	ldr	r1, [pc, #380]	; (80032f0 <Modem_BLE_Task+0x188>)
 8003172:	4b60      	ldr	r3, [pc, #384]	; (80032f4 <Modem_BLE_Task+0x18c>)
 8003174:	22c8      	movs	r2, #200	; 0xc8
 8003176:	0018      	movs	r0, r3
 8003178:	f006 fc48 	bl	8009a0c <HAL_UARTEx_ReceiveToIdle_IT>
	modem_ble_init();
 800317c:	f000 f8d6 	bl	800332c <modem_ble_init>

	while(1)
	{
//		if(Ble_info_t.conn_state==1)
		{
			if(client_write)
 8003180:	4b5d      	ldr	r3, [pc, #372]	; (80032f8 <Modem_BLE_Task+0x190>)
 8003182:	781b      	ldrb	r3, [r3, #0]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d100      	bne.n	800318a <Modem_BLE_Task+0x22>
 8003188:	e07e      	b.n	8003288 <Modem_BLE_Task+0x120>
			{

				switch(BLE_Write_data.cid)
 800318a:	4b5c      	ldr	r3, [pc, #368]	; (80032fc <Modem_BLE_Task+0x194>)
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	2b04      	cmp	r3, #4
 8003190:	d900      	bls.n	8003194 <Modem_BLE_Task+0x2c>
 8003192:	e075      	b.n	8003280 <Modem_BLE_Task+0x118>
 8003194:	009a      	lsls	r2, r3, #2
 8003196:	4b5a      	ldr	r3, [pc, #360]	; (8003300 <Modem_BLE_Task+0x198>)
 8003198:	18d3      	adds	r3, r2, r3
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	469f      	mov	pc, r3
				{
					case __MQTT_USERNAME_CHAR_ID:
					{
						memset(modem_mqtt_conf_t.mqtt_username,0,sizeof(modem_mqtt_conf_t.mqtt_username));
 800319e:	4b59      	ldr	r3, [pc, #356]	; (8003304 <Modem_BLE_Task+0x19c>)
 80031a0:	2214      	movs	r2, #20
 80031a2:	2100      	movs	r1, #0
 80031a4:	0018      	movs	r0, r3
 80031a6:	f00a fe03 	bl	800ddb0 <memset>
						strcpy(modem_mqtt_conf_t.mqtt_username,Ble_write_data_ascii);
 80031aa:	4a57      	ldr	r2, [pc, #348]	; (8003308 <Modem_BLE_Task+0x1a0>)
 80031ac:	4b55      	ldr	r3, [pc, #340]	; (8003304 <Modem_BLE_Task+0x19c>)
 80031ae:	0011      	movs	r1, r2
 80031b0:	0018      	movs	r0, r3
 80031b2:	f00a ff44 	bl	800e03e <strcpy>
						memset(Ble_write_data_ascii,0,sizeof(Ble_write_data_ascii));
 80031b6:	4b54      	ldr	r3, [pc, #336]	; (8003308 <Modem_BLE_Task+0x1a0>)
 80031b8:	2232      	movs	r2, #50	; 0x32
 80031ba:	2100      	movs	r1, #0
 80031bc:	0018      	movs	r0, r3
 80031be:	f00a fdf7 	bl	800ddb0 <memset>
						//memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
						mqtt_flag.change_on_mqtt_username=1;  //TODO :Need to compare previous data and set the flag
 80031c2:	4b52      	ldr	r3, [pc, #328]	; (800330c <Modem_BLE_Task+0x1a4>)
 80031c4:	2201      	movs	r2, #1
 80031c6:	701a      	strb	r2, [r3, #0]
						break;
 80031c8:	e05b      	b.n	8003282 <Modem_BLE_Task+0x11a>
					}
					case __MQTT_PASSWORD_CHAR_ID:
					{
						memset(modem_mqtt_conf_t.mqtt_password,0,sizeof(modem_mqtt_conf_t.mqtt_password));
 80031ca:	4b51      	ldr	r3, [pc, #324]	; (8003310 <Modem_BLE_Task+0x1a8>)
 80031cc:	2214      	movs	r2, #20
 80031ce:	2100      	movs	r1, #0
 80031d0:	0018      	movs	r0, r3
 80031d2:	f00a fded 	bl	800ddb0 <memset>
						strcpy(modem_mqtt_conf_t.mqtt_password,Ble_write_data_ascii);
 80031d6:	4a4c      	ldr	r2, [pc, #304]	; (8003308 <Modem_BLE_Task+0x1a0>)
 80031d8:	4b4d      	ldr	r3, [pc, #308]	; (8003310 <Modem_BLE_Task+0x1a8>)
 80031da:	0011      	movs	r1, r2
 80031dc:	0018      	movs	r0, r3
 80031de:	f00a ff2e 	bl	800e03e <strcpy>
						memset(Ble_write_data_ascii,0,sizeof(Ble_write_data_ascii));
 80031e2:	4b49      	ldr	r3, [pc, #292]	; (8003308 <Modem_BLE_Task+0x1a0>)
 80031e4:	2232      	movs	r2, #50	; 0x32
 80031e6:	2100      	movs	r1, #0
 80031e8:	0018      	movs	r0, r3
 80031ea:	f00a fde1 	bl	800ddb0 <memset>
						//memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
						mqtt_flag.change_on_mqtt_password=1;  //TODO :Need to compare previous data and set the flag
 80031ee:	4b47      	ldr	r3, [pc, #284]	; (800330c <Modem_BLE_Task+0x1a4>)
 80031f0:	2201      	movs	r2, #1
 80031f2:	705a      	strb	r2, [r3, #1]
						break;
 80031f4:	e045      	b.n	8003282 <Modem_BLE_Task+0x11a>
					}
					case __MQTT_CLIENT_CHAR_ID:
					{
						memset(modem_mqtt_conf_t.mqtt_client_id,0,sizeof(modem_mqtt_conf_t.mqtt_client_id));
 80031f6:	4b47      	ldr	r3, [pc, #284]	; (8003314 <Modem_BLE_Task+0x1ac>)
 80031f8:	2214      	movs	r2, #20
 80031fa:	2100      	movs	r1, #0
 80031fc:	0018      	movs	r0, r3
 80031fe:	f00a fdd7 	bl	800ddb0 <memset>
						strcpy(modem_mqtt_conf_t.mqtt_client_id,Ble_write_data_ascii);
 8003202:	4a41      	ldr	r2, [pc, #260]	; (8003308 <Modem_BLE_Task+0x1a0>)
 8003204:	4b43      	ldr	r3, [pc, #268]	; (8003314 <Modem_BLE_Task+0x1ac>)
 8003206:	0011      	movs	r1, r2
 8003208:	0018      	movs	r0, r3
 800320a:	f00a ff18 	bl	800e03e <strcpy>
						memset(Ble_write_data_ascii,0,sizeof(Ble_write_data_ascii));
 800320e:	4b3e      	ldr	r3, [pc, #248]	; (8003308 <Modem_BLE_Task+0x1a0>)
 8003210:	2232      	movs	r2, #50	; 0x32
 8003212:	2100      	movs	r1, #0
 8003214:	0018      	movs	r0, r3
 8003216:	f00a fdcb 	bl	800ddb0 <memset>
						//memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
						mqtt_flag.change_on_mqtt_clientid=1;   //TODO :Need to compare previous data and set the flag
 800321a:	4b3c      	ldr	r3, [pc, #240]	; (800330c <Modem_BLE_Task+0x1a4>)
 800321c:	2201      	movs	r2, #1
 800321e:	709a      	strb	r2, [r3, #2]
						break;
 8003220:	e02f      	b.n	8003282 <Modem_BLE_Task+0x11a>
					}
					case __MQTT_PORT_CHAR_ID:
					{

						modem_mqtt_conf_t.mqtt_port=atoi(Ble_write_data_ascii);
 8003222:	4b39      	ldr	r3, [pc, #228]	; (8003308 <Modem_BLE_Task+0x1a0>)
 8003224:	0018      	movs	r0, r3
 8003226:	f009 f83a 	bl	800c29e <atoi>
 800322a:	0003      	movs	r3, r0
 800322c:	b29a      	uxth	r2, r3
 800322e:	4b35      	ldr	r3, [pc, #212]	; (8003304 <Modem_BLE_Task+0x19c>)
 8003230:	879a      	strh	r2, [r3, #60]	; 0x3c
						memset(Ble_write_data_ascii,0,sizeof(Ble_write_data_ascii));
 8003232:	4b35      	ldr	r3, [pc, #212]	; (8003308 <Modem_BLE_Task+0x1a0>)
 8003234:	2232      	movs	r2, #50	; 0x32
 8003236:	2100      	movs	r1, #0
 8003238:	0018      	movs	r0, r3
 800323a:	f00a fdb9 	bl	800ddb0 <memset>
						//memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
						mqtt_flag.change_on_mqtt_port=1;   //TODO :Need to compare previous data and set the flag
 800323e:	4b33      	ldr	r3, [pc, #204]	; (800330c <Modem_BLE_Task+0x1a4>)
 8003240:	2201      	movs	r2, #1
 8003242:	70da      	strb	r2, [r3, #3]
						break;
 8003244:	e01d      	b.n	8003282 <Modem_BLE_Task+0x11a>
					}
					case __SET_PRESS_CHAR_ID:
					{
						set_press=atoi(Ble_write_data_ascii);
 8003246:	4b30      	ldr	r3, [pc, #192]	; (8003308 <Modem_BLE_Task+0x1a0>)
 8003248:	0018      	movs	r0, r3
 800324a:	f009 f828 	bl	800c29e <atoi>
 800324e:	0003      	movs	r3, r0
 8003250:	b2da      	uxtb	r2, r3
 8003252:	4b31      	ldr	r3, [pc, #196]	; (8003318 <Modem_BLE_Task+0x1b0>)
 8003254:	701a      	strb	r2, [r3, #0]
						switch(set_press)
 8003256:	4b30      	ldr	r3, [pc, #192]	; (8003318 <Modem_BLE_Task+0x1b0>)
 8003258:	781b      	ldrb	r3, [r3, #0]
 800325a:	2b01      	cmp	r3, #1
 800325c:	d002      	beq.n	8003264 <Modem_BLE_Task+0xfc>
 800325e:	2b02      	cmp	r3, #2
 8003260:	d004      	beq.n	800326c <Modem_BLE_Task+0x104>
								HAL_NVIC_SystemReset();
								break;
							}
							default:
							{
								break;
 8003262:	e006      	b.n	8003272 <Modem_BLE_Task+0x10a>
								mqtt_reinit=1;
 8003264:	4b2d      	ldr	r3, [pc, #180]	; (800331c <Modem_BLE_Task+0x1b4>)
 8003266:	2201      	movs	r2, #1
 8003268:	701a      	strb	r2, [r3, #0]
								break;
 800326a:	e002      	b.n	8003272 <Modem_BLE_Task+0x10a>
								HAL_NVIC_SystemReset();
 800326c:	f002 ff69 	bl	8006142 <HAL_NVIC_SystemReset>
								break;
 8003270:	46c0      	nop			; (mov r8, r8)
							}
						}

						memset(Ble_write_data_ascii,0,sizeof(Ble_write_data_ascii));
 8003272:	4b25      	ldr	r3, [pc, #148]	; (8003308 <Modem_BLE_Task+0x1a0>)
 8003274:	2232      	movs	r2, #50	; 0x32
 8003276:	2100      	movs	r1, #0
 8003278:	0018      	movs	r0, r3
 800327a:	f00a fd99 	bl	800ddb0 <memset>
//						memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
						break;
 800327e:	e000      	b.n	8003282 <Modem_BLE_Task+0x11a>
					}
					default:
					{
						break;
 8003280:	46c0      	nop			; (mov r8, r8)
					}
				}
				client_write=0;
 8003282:	4b1d      	ldr	r3, [pc, #116]	; (80032f8 <Modem_BLE_Task+0x190>)
 8003284:	2200      	movs	r2, #0
 8003286:	701a      	strb	r2, [r3, #0]
			}
		}

		if(mqtt_flag.change_on_lat | mqtt_flag.change_on_long)
 8003288:	4b20      	ldr	r3, [pc, #128]	; (800330c <Modem_BLE_Task+0x1a4>)
 800328a:	791a      	ldrb	r2, [r3, #4]
 800328c:	4b1f      	ldr	r3, [pc, #124]	; (800330c <Modem_BLE_Task+0x1a4>)
 800328e:	795b      	ldrb	r3, [r3, #5]
 8003290:	4313      	orrs	r3, r2
 8003292:	b2db      	uxtb	r3, r3
 8003294:	2b00      	cmp	r3, #0
 8003296:	d017      	beq.n	80032c8 <Modem_BLE_Task+0x160>
		{

			mqtt_flag.change_on_lat=0;
 8003298:	4b1c      	ldr	r3, [pc, #112]	; (800330c <Modem_BLE_Task+0x1a4>)
 800329a:	2200      	movs	r2, #0
 800329c:	711a      	strb	r2, [r3, #4]
			mqtt_flag.change_on_long=0;
 800329e:	4b1b      	ldr	r3, [pc, #108]	; (800330c <Modem_BLE_Task+0x1a4>)
 80032a0:	2200      	movs	r2, #0
 80032a2:	715a      	strb	r2, [r3, #5]
			if(xSemaphoreTake(Modem_port_block_semaphore,3000)!=pdFALSE)
 80032a4:	4b1e      	ldr	r3, [pc, #120]	; (8003320 <Modem_BLE_Task+0x1b8>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a1e      	ldr	r2, [pc, #120]	; (8003324 <Modem_BLE_Task+0x1bc>)
 80032aa:	0011      	movs	r1, r2
 80032ac:	0018      	movs	r0, r3
 80032ae:	f007 f806 	bl	800a2be <xQueueSemaphoreTake>
 80032b2:	1e03      	subs	r3, r0, #0
 80032b4:	d008      	beq.n	80032c8 <Modem_BLE_Task+0x160>
			{
				modem_ble_update_client_lat_long();
 80032b6:	f000 fcd9 	bl	8003c6c <modem_ble_update_client_lat_long>
				xSemaphoreGive(Modem_port_block_semaphore);
 80032ba:	4b19      	ldr	r3, [pc, #100]	; (8003320 <Modem_BLE_Task+0x1b8>)
 80032bc:	6818      	ldr	r0, [r3, #0]
 80032be:	2300      	movs	r3, #0
 80032c0:	2200      	movs	r2, #0
 80032c2:	2100      	movs	r1, #0
 80032c4:	f006 fe0e 	bl	8009ee4 <xQueueGenericSend>
			}
		}
		if(clear_buff)
 80032c8:	4b17      	ldr	r3, [pc, #92]	; (8003328 <Modem_BLE_Task+0x1c0>)
 80032ca:	781b      	ldrb	r3, [r3, #0]
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d00b      	beq.n	80032e8 <Modem_BLE_Task+0x180>
		{
			osDelay(100);
 80032d0:	2064      	movs	r0, #100	; 0x64
 80032d2:	f006 fca6 	bl	8009c22 <osDelay>
			memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
 80032d6:	4b06      	ldr	r3, [pc, #24]	; (80032f0 <Modem_BLE_Task+0x188>)
 80032d8:	22c8      	movs	r2, #200	; 0xc8
 80032da:	2100      	movs	r1, #0
 80032dc:	0018      	movs	r0, r3
 80032de:	f00a fd67 	bl	800ddb0 <memset>
			clear_buff=0;
 80032e2:	4b11      	ldr	r3, [pc, #68]	; (8003328 <Modem_BLE_Task+0x1c0>)
 80032e4:	2200      	movs	r2, #0
 80032e6:	701a      	strb	r2, [r3, #0]
		}
		osDelay(10);
 80032e8:	200a      	movs	r0, #10
 80032ea:	f006 fc9a 	bl	8009c22 <osDelay>
			if(client_write)
 80032ee:	e747      	b.n	8003180 <Modem_BLE_Task+0x18>
 80032f0:	200009cc 	.word	0x200009cc
 80032f4:	2000088c 	.word	0x2000088c
 80032f8:	200007e6 	.word	0x200007e6
 80032fc:	20000840 	.word	0x20000840
 8003300:	080111ac 	.word	0x080111ac
 8003304:	20000268 	.word	0x20000268
 8003308:	200007b4 	.word	0x200007b4
 800330c:	20000500 	.word	0x20000500
 8003310:	2000027c 	.word	0x2000027c
 8003314:	20000290 	.word	0x20000290
 8003318:	200007e9 	.word	0x200007e9
 800331c:	200007e8 	.word	0x200007e8
 8003320:	200009c4 	.word	0x200009c4
 8003324:	00000bb8 	.word	0x00000bb8
 8003328:	200007e7 	.word	0x200007e7

0800332c <modem_ble_init>:
	}
}
void modem_ble_init()
{
 800332c:	b580      	push	{r7, lr}
 800332e:	af00      	add	r7, sp, #0
	/*
	modem_initiate_cmd(MODEM_BLE_SET_NAME);
	vTaskDelay(2000 / portTICK_PERIOD_MS);
	*/

	modem_initiate_cmd(MODEM_TURN_ON_BLE);
 8003330:	2018      	movs	r0, #24
 8003332:	f7ff f9dd 	bl	80026f0 <modem_initiate_cmd>
	osDelay(2000);
 8003336:	23fa      	movs	r3, #250	; 0xfa
 8003338:	00db      	lsls	r3, r3, #3
 800333a:	0018      	movs	r0, r3
 800333c:	f006 fc71 	bl	8009c22 <osDelay>


	modem_initiate_cmd(MODEM_BLE_SET_ADV_PARAM);
 8003340:	201b      	movs	r0, #27
 8003342:	f7ff f9d5 	bl	80026f0 <modem_initiate_cmd>
	osDelay(1000);
 8003346:	23fa      	movs	r3, #250	; 0xfa
 8003348:	009b      	lsls	r3, r3, #2
 800334a:	0018      	movs	r0, r3
 800334c:	f006 fc69 	bl	8009c22 <osDelay>
	osDelay(2000);

	modem_initiate_cmd(MODEM_BLE_SET_SCAN_RESP_DATA);
	osDelay(2000);
	*/
	modem_initiate_cmd(MODEM_BLE_SET_ADV_NAME);
 8003350:	201c      	movs	r0, #28
 8003352:	f7ff f9cd 	bl	80026f0 <modem_initiate_cmd>
	osDelay(1000);
 8003356:	23fa      	movs	r3, #250	; 0xfa
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	0018      	movs	r0, r3
 800335c:	f006 fc61 	bl	8009c22 <osDelay>

	modem_initiate_cmd(MODEM_BLE_SET_PRIMARY_SVC);
 8003360:	201d      	movs	r0, #29
 8003362:	f7ff f9c5 	bl	80026f0 <modem_initiate_cmd>
	osDelay(2000);
 8003366:	23fa      	movs	r3, #250	; 0xfa
 8003368:	00db      	lsls	r3, r3, #3
 800336a:	0018      	movs	r0, r3
 800336c:	f006 fc59 	bl	8009c22 <osDelay>
	osDelay(2000);

	modem_initiate_cmd(MODEM_BLE_CFG_CHAR_VALUE);
	osDelay(2000);
	*/
	modem_create_ble_gatt_svc_characteristics();
 8003370:	f000 f814 	bl	800339c <modem_create_ble_gatt_svc_characteristics>

	modem_initiate_cmd(MODEM_BLE_FINSISH_ADDING_SVC);
 8003374:	2020      	movs	r0, #32
 8003376:	f7ff f9bb 	bl	80026f0 <modem_initiate_cmd>
	osDelay(2000);
 800337a:	23fa      	movs	r3, #250	; 0xfa
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	0018      	movs	r0, r3
 8003380:	f006 fc4f 	bl	8009c22 <osDelay>

	modem_initiate_cmd(MODEM_BLE_START_ADV);
 8003384:	2021      	movs	r0, #33	; 0x21
 8003386:	f7ff f9b3 	bl	80026f0 <modem_initiate_cmd>
	osDelay(2000);
 800338a:	23fa      	movs	r3, #250	; 0xfa
 800338c:	00db      	lsls	r3, r3, #3
 800338e:	0018      	movs	r0, r3
 8003390:	f006 fc47 	bl	8009c22 <osDelay>
	*/




}
 8003394:	46c0      	nop			; (mov r8, r8)
 8003396:	46bd      	mov	sp, r7
 8003398:	bd80      	pop	{r7, pc}
	...

0800339c <modem_create_ble_gatt_svc_characteristics>:
    }

    return 0; // Success
}
void modem_create_ble_gatt_svc_characteristics()
{
 800339c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800339e:	46c6      	mov	lr, r8
 80033a0:	b500      	push	{lr}
 80033a2:	b0b8      	sub	sp, #224	; 0xe0
 80033a4:	af06      	add	r7, sp, #24
	modem_send_msg(cmd);
	osDelay(1000);

	#endif
	/* GATT CHAR 0xB111 Configure MQTT Username */
	Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_uuid=SVC_UUID_ABF0;
 80033a6:	4bef      	ldr	r3, [pc, #956]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033a8:	2200      	movs	r2, #0
 80033aa:	801a      	strh	r2, [r3, #0]
	Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].charaId =__MQTT_USERNAME_CHAR_ID;
 80033ac:	4bed      	ldr	r3, [pc, #948]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033ae:	2200      	movs	r2, #0
 80033b0:	709a      	strb	r2, [r3, #2]
	Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_property= 4;  // 4 -> Write  // 26-> Read ,write, notify
 80033b2:	4bec      	ldr	r3, [pc, #944]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033b4:	2204      	movs	r2, #4
 80033b6:	809a      	strh	r2, [r3, #4]
	Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_type=1;     //16-bit UUID
 80033b8:	4bea      	ldr	r3, [pc, #936]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033ba:	2201      	movs	r2, #1
 80033bc:	719a      	strb	r2, [r3, #6]
	Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_16 =UU1D16_MQTT_USERNAME;
 80033be:	4be9      	ldr	r3, [pc, #932]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033c0:	4ae9      	ldr	r2, [pc, #932]	; (8003768 <modem_create_ble_gatt_svc_characteristics+0x3cc>)
 80033c2:	811a      	strh	r2, [r3, #8]
	Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].val_len=20;
 80033c4:	4be7      	ldr	r3, [pc, #924]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033c6:	2214      	movs	r2, #20
 80033c8:	819a      	strh	r2, [r3, #12]
//	asciiToHexStr(modem_mqtt_conf_t.mqtt_username, hexOutput);
	strcpy(Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_value,"48656C6C6F"); // Send NULL
 80033ca:	4ae8      	ldr	r2, [pc, #928]	; (800376c <modem_create_ble_gatt_svc_characteristics+0x3d0>)
 80033cc:	4be8      	ldr	r3, [pc, #928]	; (8003770 <modem_create_ble_gatt_svc_characteristics+0x3d4>)
 80033ce:	0010      	movs	r0, r2
 80033d0:	0019      	movs	r1, r3
 80033d2:	230b      	movs	r3, #11
 80033d4:	001a      	movs	r2, r3
 80033d6:	f00a fe45 	bl	800e064 <memcpy>
//	strcpy(Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_value,modem_mqtt_conf_t.mqtt_username); // Send Mqtt Username
	Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_permission=2;  // 2-> write Only // 3-> Read,write
 80033da:	4be2      	ldr	r3, [pc, #904]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033dc:	2202      	movs	r2, #2
 80033de:	815a      	strh	r2, [r3, #10]

	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].charaId,
 80033e0:	4be0      	ldr	r3, [pc, #896]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033e2:	881b      	ldrh	r3, [r3, #0]
 80033e4:	001d      	movs	r5, r3
 80033e6:	4bdf      	ldr	r3, [pc, #892]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033e8:	789b      	ldrb	r3, [r3, #2]
 80033ea:	001e      	movs	r6, r3
			Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_16);
 80033ec:	4bdd      	ldr	r3, [pc, #884]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033ee:	889b      	ldrh	r3, [r3, #4]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].charaId,
 80033f0:	001a      	movs	r2, r3
			Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_16);
 80033f2:	4bdc      	ldr	r3, [pc, #880]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033f4:	799b      	ldrb	r3, [r3, #6]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].charaId,
 80033f6:	001c      	movs	r4, r3
			Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_16);
 80033f8:	4bda      	ldr	r3, [pc, #872]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80033fa:	891b      	ldrh	r3, [r3, #8]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].charaId,
 80033fc:	49dd      	ldr	r1, [pc, #884]	; (8003774 <modem_create_ble_gatt_svc_characteristics+0x3d8>)
 80033fe:	0038      	movs	r0, r7
 8003400:	9302      	str	r3, [sp, #8]
 8003402:	9401      	str	r4, [sp, #4]
 8003404:	9200      	str	r2, [sp, #0]
 8003406:	0033      	movs	r3, r6
 8003408:	002a      	movs	r2, r5
 800340a:	f00a fc65 	bl	800dcd8 <siprintf>
	modem_send_msg(cmd);
 800340e:	003b      	movs	r3, r7
 8003410:	0018      	movs	r0, r3
 8003412:	f7ff f84b 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 8003416:	23fa      	movs	r3, #250	; 0xfa
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	0018      	movs	r0, r3
 800341c:	f006 fc01 	bl	8009c22 <osDelay>

	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_permission,
 8003420:	4bd0      	ldr	r3, [pc, #832]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003422:	881b      	ldrh	r3, [r3, #0]
 8003424:	469c      	mov	ip, r3
 8003426:	4bcf      	ldr	r3, [pc, #828]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003428:	789b      	ldrb	r3, [r3, #2]
 800342a:	4698      	mov	r8, r3
 800342c:	4bcd      	ldr	r3, [pc, #820]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800342e:	895b      	ldrh	r3, [r3, #10]
 8003430:	001a      	movs	r2, r3
			Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_value);
 8003432:	4bcc      	ldr	r3, [pc, #816]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003434:	799b      	ldrb	r3, [r3, #6]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_permission,
 8003436:	001c      	movs	r4, r3
			Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_value);
 8003438:	4bca      	ldr	r3, [pc, #808]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800343a:	891b      	ldrh	r3, [r3, #8]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_permission,
 800343c:	001d      	movs	r5, r3
			Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_value);
 800343e:	4bc9      	ldr	r3, [pc, #804]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003440:	899b      	ldrh	r3, [r3, #12]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_USERNAME_CHAR_ID].char_permission,
 8003442:	001e      	movs	r6, r3
 8003444:	49cc      	ldr	r1, [pc, #816]	; (8003778 <modem_create_ble_gatt_svc_characteristics+0x3dc>)
 8003446:	0038      	movs	r0, r7
 8003448:	4bc8      	ldr	r3, [pc, #800]	; (800376c <modem_create_ble_gatt_svc_characteristics+0x3d0>)
 800344a:	9304      	str	r3, [sp, #16]
 800344c:	9603      	str	r6, [sp, #12]
 800344e:	9502      	str	r5, [sp, #8]
 8003450:	9401      	str	r4, [sp, #4]
 8003452:	9200      	str	r2, [sp, #0]
 8003454:	4643      	mov	r3, r8
 8003456:	4662      	mov	r2, ip
 8003458:	f00a fc3e 	bl	800dcd8 <siprintf>

	modem_send_msg(cmd);
 800345c:	003b      	movs	r3, r7
 800345e:	0018      	movs	r0, r3
 8003460:	f7ff f824 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 8003464:	23fa      	movs	r3, #250	; 0xfa
 8003466:	009b      	lsls	r3, r3, #2
 8003468:	0018      	movs	r0, r3
 800346a:	f006 fbda 	bl	8009c22 <osDelay>

	/* GATT CHAR 0xB112--> Configure MQTT Password */
	Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_uuid=SVC_UUID_ABF0;
 800346e:	4bbd      	ldr	r3, [pc, #756]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003470:	2272      	movs	r2, #114	; 0x72
 8003472:	2100      	movs	r1, #0
 8003474:	5299      	strh	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].charaId =__MQTT_PASSWORD_CHAR_ID;
 8003476:	4bbb      	ldr	r3, [pc, #748]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003478:	2274      	movs	r2, #116	; 0x74
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_property= 4;  //Write
 800347e:	4bb9      	ldr	r3, [pc, #740]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003480:	2276      	movs	r2, #118	; 0x76
 8003482:	2104      	movs	r1, #4
 8003484:	5299      	strh	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_type=1;     //16-bit UUID
 8003486:	4bb7      	ldr	r3, [pc, #732]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003488:	2278      	movs	r2, #120	; 0x78
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_16 =UUID16_MQTT_PASSWORD;
 800348e:	4bb5      	ldr	r3, [pc, #724]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003490:	227a      	movs	r2, #122	; 0x7a
 8003492:	49ba      	ldr	r1, [pc, #744]	; (800377c <modem_create_ble_gatt_svc_characteristics+0x3e0>)
 8003494:	5299      	strh	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].val_len=20;
 8003496:	4bb3      	ldr	r3, [pc, #716]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003498:	227e      	movs	r2, #126	; 0x7e
 800349a:	2114      	movs	r1, #20
 800349c:	5299      	strh	r1, [r3, r2]
	strcpy(Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].char_value,"48656C6C6F"); // Send NULL
 800349e:	4bb8      	ldr	r3, [pc, #736]	; (8003780 <modem_create_ble_gatt_svc_characteristics+0x3e4>)
 80034a0:	4ab3      	ldr	r2, [pc, #716]	; (8003770 <modem_create_ble_gatt_svc_characteristics+0x3d4>)
 80034a2:	ca03      	ldmia	r2!, {r0, r1}
 80034a4:	c303      	stmia	r3!, {r0, r1}
 80034a6:	8811      	ldrh	r1, [r2, #0]
 80034a8:	8019      	strh	r1, [r3, #0]
 80034aa:	7892      	ldrb	r2, [r2, #2]
 80034ac:	709a      	strb	r2, [r3, #2]
	Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].char_permission=2;  // write Only
 80034ae:	4bad      	ldr	r3, [pc, #692]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80034b0:	227c      	movs	r2, #124	; 0x7c
 80034b2:	2102      	movs	r1, #2
 80034b4:	5299      	strh	r1, [r3, r2]

	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].charaId,
 80034b6:	4bab      	ldr	r3, [pc, #684]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80034b8:	2272      	movs	r2, #114	; 0x72
 80034ba:	5a9b      	ldrh	r3, [r3, r2]
 80034bc:	001e      	movs	r6, r3
 80034be:	4ba9      	ldr	r3, [pc, #676]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80034c0:	2274      	movs	r2, #116	; 0x74
 80034c2:	5c9b      	ldrb	r3, [r3, r2]
 80034c4:	469c      	mov	ip, r3
			Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_16);
 80034c6:	4ba7      	ldr	r3, [pc, #668]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80034c8:	2276      	movs	r2, #118	; 0x76
 80034ca:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].charaId,
 80034cc:	001c      	movs	r4, r3
			Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_16);
 80034ce:	4ba5      	ldr	r3, [pc, #660]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80034d0:	2278      	movs	r2, #120	; 0x78
 80034d2:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].charaId,
 80034d4:	001d      	movs	r5, r3
			Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_16);
 80034d6:	4ba3      	ldr	r3, [pc, #652]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80034d8:	227a      	movs	r2, #122	; 0x7a
 80034da:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].charaId,
 80034dc:	49a5      	ldr	r1, [pc, #660]	; (8003774 <modem_create_ble_gatt_svc_characteristics+0x3d8>)
 80034de:	0038      	movs	r0, r7
 80034e0:	9302      	str	r3, [sp, #8]
 80034e2:	9501      	str	r5, [sp, #4]
 80034e4:	9400      	str	r4, [sp, #0]
 80034e6:	4663      	mov	r3, ip
 80034e8:	0032      	movs	r2, r6
 80034ea:	f00a fbf5 	bl	800dcd8 <siprintf>
	modem_send_msg(cmd);
 80034ee:	003b      	movs	r3, r7
 80034f0:	0018      	movs	r0, r3
 80034f2:	f7fe ffdb 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 80034f6:	23fa      	movs	r3, #250	; 0xfa
 80034f8:	009b      	lsls	r3, r3, #2
 80034fa:	0018      	movs	r0, r3
 80034fc:	f006 fb91 	bl	8009c22 <osDelay>

	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].char_permission,
 8003500:	4b98      	ldr	r3, [pc, #608]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003502:	2272      	movs	r2, #114	; 0x72
 8003504:	5a9b      	ldrh	r3, [r3, r2]
 8003506:	469c      	mov	ip, r3
 8003508:	4b96      	ldr	r3, [pc, #600]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800350a:	2274      	movs	r2, #116	; 0x74
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	4698      	mov	r8, r3
 8003510:	4b94      	ldr	r3, [pc, #592]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003512:	227c      	movs	r2, #124	; 0x7c
 8003514:	5a9b      	ldrh	r3, [r3, r2]
 8003516:	001c      	movs	r4, r3
			Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].char_value);
 8003518:	4b92      	ldr	r3, [pc, #584]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800351a:	2278      	movs	r2, #120	; 0x78
 800351c:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].char_permission,
 800351e:	001d      	movs	r5, r3
			Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].char_value);
 8003520:	4b90      	ldr	r3, [pc, #576]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003522:	227a      	movs	r2, #122	; 0x7a
 8003524:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].char_permission,
 8003526:	001e      	movs	r6, r3
			Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].char_value);
 8003528:	4b8e      	ldr	r3, [pc, #568]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800352a:	227e      	movs	r2, #126	; 0x7e
 800352c:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_PASSWORD_CHAR_ID].char_permission,
 800352e:	001a      	movs	r2, r3
 8003530:	4991      	ldr	r1, [pc, #580]	; (8003778 <modem_create_ble_gatt_svc_characteristics+0x3dc>)
 8003532:	0038      	movs	r0, r7
 8003534:	4b92      	ldr	r3, [pc, #584]	; (8003780 <modem_create_ble_gatt_svc_characteristics+0x3e4>)
 8003536:	9304      	str	r3, [sp, #16]
 8003538:	9203      	str	r2, [sp, #12]
 800353a:	9602      	str	r6, [sp, #8]
 800353c:	9501      	str	r5, [sp, #4]
 800353e:	9400      	str	r4, [sp, #0]
 8003540:	4643      	mov	r3, r8
 8003542:	4662      	mov	r2, ip
 8003544:	f00a fbc8 	bl	800dcd8 <siprintf>

	modem_send_msg(cmd);
 8003548:	003b      	movs	r3, r7
 800354a:	0018      	movs	r0, r3
 800354c:	f7fe ffae 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 8003550:	23fa      	movs	r3, #250	; 0xfa
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	0018      	movs	r0, r3
 8003556:	f006 fb64 	bl	8009c22 <osDelay>

	/* GATT CHAR 0xB113--> Configure MQTT ClientID */
	Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_uuid=SVC_UUID_ABF0;
 800355a:	4b82      	ldr	r3, [pc, #520]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800355c:	22e4      	movs	r2, #228	; 0xe4
 800355e:	2100      	movs	r1, #0
 8003560:	5299      	strh	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].charaId =__MQTT_CLIENT_CHAR_ID;
 8003562:	4b80      	ldr	r3, [pc, #512]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003564:	22e6      	movs	r2, #230	; 0xe6
 8003566:	2102      	movs	r1, #2
 8003568:	5499      	strb	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_property= 4;  //Write
 800356a:	4b7e      	ldr	r3, [pc, #504]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800356c:	22e8      	movs	r2, #232	; 0xe8
 800356e:	2104      	movs	r1, #4
 8003570:	5299      	strh	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_type=1;     //16-bit UUID
 8003572:	4b7c      	ldr	r3, [pc, #496]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003574:	22ea      	movs	r2, #234	; 0xea
 8003576:	2101      	movs	r1, #1
 8003578:	5499      	strb	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_16 =UUID16_MQTT_CLIENT_ID;
 800357a:	4b7a      	ldr	r3, [pc, #488]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800357c:	22ec      	movs	r2, #236	; 0xec
 800357e:	4981      	ldr	r1, [pc, #516]	; (8003784 <modem_create_ble_gatt_svc_characteristics+0x3e8>)
 8003580:	5299      	strh	r1, [r3, r2]
	Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].val_len=20;
 8003582:	4b78      	ldr	r3, [pc, #480]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003584:	22f0      	movs	r2, #240	; 0xf0
 8003586:	2114      	movs	r1, #20
 8003588:	5299      	strh	r1, [r3, r2]
	strcpy(Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].char_value,"48656C6C6F"); // Send NULL
 800358a:	4a7f      	ldr	r2, [pc, #508]	; (8003788 <modem_create_ble_gatt_svc_characteristics+0x3ec>)
 800358c:	4b78      	ldr	r3, [pc, #480]	; (8003770 <modem_create_ble_gatt_svc_characteristics+0x3d4>)
 800358e:	0010      	movs	r0, r2
 8003590:	0019      	movs	r1, r3
 8003592:	230b      	movs	r3, #11
 8003594:	001a      	movs	r2, r3
 8003596:	f00a fd65 	bl	800e064 <memcpy>
	Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].char_permission=2;  // write Only
 800359a:	4b72      	ldr	r3, [pc, #456]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800359c:	22ee      	movs	r2, #238	; 0xee
 800359e:	2102      	movs	r1, #2
 80035a0:	5299      	strh	r1, [r3, r2]

	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].charaId,
 80035a2:	4b70      	ldr	r3, [pc, #448]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80035a4:	22e4      	movs	r2, #228	; 0xe4
 80035a6:	5a9b      	ldrh	r3, [r3, r2]
 80035a8:	001e      	movs	r6, r3
 80035aa:	4b6e      	ldr	r3, [pc, #440]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80035ac:	22e6      	movs	r2, #230	; 0xe6
 80035ae:	5c9b      	ldrb	r3, [r3, r2]
 80035b0:	469c      	mov	ip, r3
			Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_16);
 80035b2:	4b6c      	ldr	r3, [pc, #432]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80035b4:	22e8      	movs	r2, #232	; 0xe8
 80035b6:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].charaId,
 80035b8:	001c      	movs	r4, r3
			Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_16);
 80035ba:	4b6a      	ldr	r3, [pc, #424]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80035bc:	22ea      	movs	r2, #234	; 0xea
 80035be:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].charaId,
 80035c0:	001d      	movs	r5, r3
			Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_16);
 80035c2:	4b68      	ldr	r3, [pc, #416]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80035c4:	22ec      	movs	r2, #236	; 0xec
 80035c6:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].charaId,
 80035c8:	496a      	ldr	r1, [pc, #424]	; (8003774 <modem_create_ble_gatt_svc_characteristics+0x3d8>)
 80035ca:	0038      	movs	r0, r7
 80035cc:	9302      	str	r3, [sp, #8]
 80035ce:	9501      	str	r5, [sp, #4]
 80035d0:	9400      	str	r4, [sp, #0]
 80035d2:	4663      	mov	r3, ip
 80035d4:	0032      	movs	r2, r6
 80035d6:	f00a fb7f 	bl	800dcd8 <siprintf>
	modem_send_msg(cmd);
 80035da:	003b      	movs	r3, r7
 80035dc:	0018      	movs	r0, r3
 80035de:	f7fe ff65 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 80035e2:	23fa      	movs	r3, #250	; 0xfa
 80035e4:	009b      	lsls	r3, r3, #2
 80035e6:	0018      	movs	r0, r3
 80035e8:	f006 fb1b 	bl	8009c22 <osDelay>

	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].char_permission,
 80035ec:	4b5d      	ldr	r3, [pc, #372]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80035ee:	22e4      	movs	r2, #228	; 0xe4
 80035f0:	5a9b      	ldrh	r3, [r3, r2]
 80035f2:	469c      	mov	ip, r3
 80035f4:	4b5b      	ldr	r3, [pc, #364]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80035f6:	22e6      	movs	r2, #230	; 0xe6
 80035f8:	5c9b      	ldrb	r3, [r3, r2]
 80035fa:	4698      	mov	r8, r3
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80035fe:	22ee      	movs	r2, #238	; 0xee
 8003600:	5a9b      	ldrh	r3, [r3, r2]
 8003602:	001c      	movs	r4, r3
			Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].char_value);
 8003604:	4b57      	ldr	r3, [pc, #348]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003606:	22ea      	movs	r2, #234	; 0xea
 8003608:	5c9b      	ldrb	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].char_permission,
 800360a:	001d      	movs	r5, r3
			Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].char_value);
 800360c:	4b55      	ldr	r3, [pc, #340]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800360e:	22ec      	movs	r2, #236	; 0xec
 8003610:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].char_permission,
 8003612:	001e      	movs	r6, r3
			Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].char_value);
 8003614:	4b53      	ldr	r3, [pc, #332]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003616:	22f0      	movs	r2, #240	; 0xf0
 8003618:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_CLIENT_CHAR_ID].char_permission,
 800361a:	001a      	movs	r2, r3
 800361c:	4956      	ldr	r1, [pc, #344]	; (8003778 <modem_create_ble_gatt_svc_characteristics+0x3dc>)
 800361e:	0038      	movs	r0, r7
 8003620:	4b59      	ldr	r3, [pc, #356]	; (8003788 <modem_create_ble_gatt_svc_characteristics+0x3ec>)
 8003622:	9304      	str	r3, [sp, #16]
 8003624:	9203      	str	r2, [sp, #12]
 8003626:	9602      	str	r6, [sp, #8]
 8003628:	9501      	str	r5, [sp, #4]
 800362a:	9400      	str	r4, [sp, #0]
 800362c:	4643      	mov	r3, r8
 800362e:	4662      	mov	r2, ip
 8003630:	f00a fb52 	bl	800dcd8 <siprintf>

	modem_send_msg(cmd);
 8003634:	003b      	movs	r3, r7
 8003636:	0018      	movs	r0, r3
 8003638:	f7fe ff38 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 800363c:	23fa      	movs	r3, #250	; 0xfa
 800363e:	009b      	lsls	r3, r3, #2
 8003640:	0018      	movs	r0, r3
 8003642:	f006 faee 	bl	8009c22 <osDelay>

	/* GATT CHAR 0xB114--> Configure MQTT Port 1883 0r 8883 */
	Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_uuid=SVC_UUID_ABF0;
 8003646:	4a47      	ldr	r2, [pc, #284]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003648:	23ab      	movs	r3, #171	; 0xab
 800364a:	005b      	lsls	r3, r3, #1
 800364c:	2100      	movs	r1, #0
 800364e:	52d1      	strh	r1, [r2, r3]
	Modem_GATT_Param[__MQTT_PORT_CHAR_ID].charaId =__MQTT_PORT_CHAR_ID;
 8003650:	4a44      	ldr	r2, [pc, #272]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003652:	23ac      	movs	r3, #172	; 0xac
 8003654:	005b      	lsls	r3, r3, #1
 8003656:	2103      	movs	r1, #3
 8003658:	54d1      	strb	r1, [r2, r3]
	Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_property= 4;  //Write
 800365a:	4a42      	ldr	r2, [pc, #264]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800365c:	23ad      	movs	r3, #173	; 0xad
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	2104      	movs	r1, #4
 8003662:	52d1      	strh	r1, [r2, r3]
	Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_type=1;     //16-bit UUID
 8003664:	4a3f      	ldr	r2, [pc, #252]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003666:	23ae      	movs	r3, #174	; 0xae
 8003668:	005b      	lsls	r3, r3, #1
 800366a:	2101      	movs	r1, #1
 800366c:	54d1      	strb	r1, [r2, r3]
	Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_16 =UUID16_MQTT_PORT;
 800366e:	4a3d      	ldr	r2, [pc, #244]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003670:	23af      	movs	r3, #175	; 0xaf
 8003672:	005b      	lsls	r3, r3, #1
 8003674:	4945      	ldr	r1, [pc, #276]	; (800378c <modem_create_ble_gatt_svc_characteristics+0x3f0>)
 8003676:	52d1      	strh	r1, [r2, r3]
	Modem_GATT_Param[__MQTT_PORT_CHAR_ID].val_len=10;
 8003678:	4a3a      	ldr	r2, [pc, #232]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800367a:	23b1      	movs	r3, #177	; 0xb1
 800367c:	005b      	lsls	r3, r3, #1
 800367e:	210a      	movs	r1, #10
 8003680:	52d1      	strh	r1, [r2, r3]
	strcpy(Modem_GATT_Param[__MQTT_PORT_CHAR_ID].char_value,"48656C6C6F"); // Send NULL
 8003682:	4b43      	ldr	r3, [pc, #268]	; (8003790 <modem_create_ble_gatt_svc_characteristics+0x3f4>)
 8003684:	4a3a      	ldr	r2, [pc, #232]	; (8003770 <modem_create_ble_gatt_svc_characteristics+0x3d4>)
 8003686:	ca03      	ldmia	r2!, {r0, r1}
 8003688:	c303      	stmia	r3!, {r0, r1}
 800368a:	8811      	ldrh	r1, [r2, #0]
 800368c:	8019      	strh	r1, [r3, #0]
 800368e:	7892      	ldrb	r2, [r2, #2]
 8003690:	709a      	strb	r2, [r3, #2]
	Modem_GATT_Param[__MQTT_PORT_CHAR_ID].char_permission=2;  // write Only
 8003692:	4a34      	ldr	r2, [pc, #208]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003694:	23b0      	movs	r3, #176	; 0xb0
 8003696:	005b      	lsls	r3, r3, #1
 8003698:	2102      	movs	r1, #2
 800369a:	52d1      	strh	r1, [r2, r3]

	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].charaId,
 800369c:	4a31      	ldr	r2, [pc, #196]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800369e:	23ab      	movs	r3, #171	; 0xab
 80036a0:	005b      	lsls	r3, r3, #1
 80036a2:	5ad3      	ldrh	r3, [r2, r3]
 80036a4:	001e      	movs	r6, r3
 80036a6:	4a2f      	ldr	r2, [pc, #188]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80036a8:	23ac      	movs	r3, #172	; 0xac
 80036aa:	005b      	lsls	r3, r3, #1
 80036ac:	5cd3      	ldrb	r3, [r2, r3]
 80036ae:	469c      	mov	ip, r3
			Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_16);
 80036b0:	4a2c      	ldr	r2, [pc, #176]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80036b2:	23ad      	movs	r3, #173	; 0xad
 80036b4:	005b      	lsls	r3, r3, #1
 80036b6:	5ad3      	ldrh	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].charaId,
 80036b8:	001c      	movs	r4, r3
			Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_16);
 80036ba:	4a2a      	ldr	r2, [pc, #168]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80036bc:	23ae      	movs	r3, #174	; 0xae
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	5cd3      	ldrb	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].charaId,
 80036c2:	001d      	movs	r5, r3
			Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_property,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_16);
 80036c4:	4a27      	ldr	r2, [pc, #156]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80036c6:	23af      	movs	r3, #175	; 0xaf
 80036c8:	005b      	lsls	r3, r3, #1
 80036ca:	5ad3      	ldrh	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].charaId,
 80036cc:	4929      	ldr	r1, [pc, #164]	; (8003774 <modem_create_ble_gatt_svc_characteristics+0x3d8>)
 80036ce:	0038      	movs	r0, r7
 80036d0:	9302      	str	r3, [sp, #8]
 80036d2:	9501      	str	r5, [sp, #4]
 80036d4:	9400      	str	r4, [sp, #0]
 80036d6:	4663      	mov	r3, ip
 80036d8:	0032      	movs	r2, r6
 80036da:	f00a fafd 	bl	800dcd8 <siprintf>
	modem_send_msg(cmd);
 80036de:	003b      	movs	r3, r7
 80036e0:	0018      	movs	r0, r3
 80036e2:	f7fe fee3 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 80036e6:	23fa      	movs	r3, #250	; 0xfa
 80036e8:	009b      	lsls	r3, r3, #2
 80036ea:	0018      	movs	r0, r3
 80036ec:	f006 fa99 	bl	8009c22 <osDelay>

	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].char_permission,
 80036f0:	4a1c      	ldr	r2, [pc, #112]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80036f2:	23ab      	movs	r3, #171	; 0xab
 80036f4:	005b      	lsls	r3, r3, #1
 80036f6:	5ad3      	ldrh	r3, [r2, r3]
 80036f8:	469c      	mov	ip, r3
 80036fa:	4a1a      	ldr	r2, [pc, #104]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 80036fc:	23ac      	movs	r3, #172	; 0xac
 80036fe:	005b      	lsls	r3, r3, #1
 8003700:	5cd3      	ldrb	r3, [r2, r3]
 8003702:	4698      	mov	r8, r3
 8003704:	4a17      	ldr	r2, [pc, #92]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003706:	23b0      	movs	r3, #176	; 0xb0
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	5ad3      	ldrh	r3, [r2, r3]
 800370c:	001c      	movs	r4, r3
			Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].char_value);
 800370e:	4a15      	ldr	r2, [pc, #84]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003710:	23ae      	movs	r3, #174	; 0xae
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	5cd3      	ldrb	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].char_permission,
 8003716:	001d      	movs	r5, r3
			Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].char_value);
 8003718:	4a12      	ldr	r2, [pc, #72]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 800371a:	23af      	movs	r3, #175	; 0xaf
 800371c:	005b      	lsls	r3, r3, #1
 800371e:	5ad3      	ldrh	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].char_permission,
 8003720:	001e      	movs	r6, r3
			Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_type,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].uuid_16,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].val_len,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].char_value);
 8003722:	4a10      	ldr	r2, [pc, #64]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003724:	23b1      	movs	r3, #177	; 0xb1
 8003726:	005b      	lsls	r3, r3, #1
 8003728:	5ad3      	ldrh	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__MQTT_PORT_CHAR_ID].svc_uuid,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].charaId,Modem_GATT_Param[__MQTT_PORT_CHAR_ID].char_permission,
 800372a:	001a      	movs	r2, r3
 800372c:	4912      	ldr	r1, [pc, #72]	; (8003778 <modem_create_ble_gatt_svc_characteristics+0x3dc>)
 800372e:	0038      	movs	r0, r7
 8003730:	4b17      	ldr	r3, [pc, #92]	; (8003790 <modem_create_ble_gatt_svc_characteristics+0x3f4>)
 8003732:	9304      	str	r3, [sp, #16]
 8003734:	9203      	str	r2, [sp, #12]
 8003736:	9602      	str	r6, [sp, #8]
 8003738:	9501      	str	r5, [sp, #4]
 800373a:	9400      	str	r4, [sp, #0]
 800373c:	4643      	mov	r3, r8
 800373e:	4662      	mov	r2, ip
 8003740:	f00a faca 	bl	800dcd8 <siprintf>

	modem_send_msg(cmd);
 8003744:	003b      	movs	r3, r7
 8003746:	0018      	movs	r0, r3
 8003748:	f7fe feb0 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 800374c:	23fa      	movs	r3, #250	; 0xfa
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	0018      	movs	r0, r3
 8003752:	f006 fa66 	bl	8009c22 <osDelay>

	/* GATT CHAR 0xB115--> Set Press operation  */
	Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_uuid=SVC_UUID_ABF0;
 8003756:	4a03      	ldr	r2, [pc, #12]	; (8003764 <modem_create_ble_gatt_svc_characteristics+0x3c8>)
 8003758:	23e4      	movs	r3, #228	; 0xe4
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	2100      	movs	r1, #0
 800375e:	52d1      	strh	r1, [r2, r3]
 8003760:	e018      	b.n	8003794 <modem_create_ble_gatt_svc_characteristics+0x3f8>
 8003762:	46c0      	nop			; (mov r8, r8)
 8003764:	20000508 	.word	0x20000508
 8003768:	ffffb111 	.word	0xffffb111
 800376c:	20000516 	.word	0x20000516
 8003770:	08010d38 	.word	0x08010d38
 8003774:	08010d44 	.word	0x08010d44
 8003778:	08010d60 	.word	0x08010d60
 800377c:	ffffb112 	.word	0xffffb112
 8003780:	20000588 	.word	0x20000588
 8003784:	ffffb113 	.word	0xffffb113
 8003788:	200005fa 	.word	0x200005fa
 800378c:	ffffb114 	.word	0xffffb114
 8003790:	2000066c 	.word	0x2000066c
	Modem_GATT_Param[__SET_PRESS_CHAR_ID].charaId =__SET_PRESS_CHAR_ID;
 8003794:	4a82      	ldr	r2, [pc, #520]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003796:	23e5      	movs	r3, #229	; 0xe5
 8003798:	005b      	lsls	r3, r3, #1
 800379a:	2104      	movs	r1, #4
 800379c:	54d1      	strb	r1, [r2, r3]
	Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_property= 4;  //Write
 800379e:	4a80      	ldr	r2, [pc, #512]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80037a0:	23e6      	movs	r3, #230	; 0xe6
 80037a2:	005b      	lsls	r3, r3, #1
 80037a4:	2104      	movs	r1, #4
 80037a6:	52d1      	strh	r1, [r2, r3]
	Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_type=1;     //16-bit UUID
 80037a8:	4a7d      	ldr	r2, [pc, #500]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80037aa:	23e7      	movs	r3, #231	; 0xe7
 80037ac:	005b      	lsls	r3, r3, #1
 80037ae:	2101      	movs	r1, #1
 80037b0:	54d1      	strb	r1, [r2, r3]
	Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_16 =UUID16_SET_PRESS;
 80037b2:	4a7b      	ldr	r2, [pc, #492]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80037b4:	23e8      	movs	r3, #232	; 0xe8
 80037b6:	005b      	lsls	r3, r3, #1
 80037b8:	497a      	ldr	r1, [pc, #488]	; (80039a4 <modem_create_ble_gatt_svc_characteristics+0x608>)
 80037ba:	52d1      	strh	r1, [r2, r3]
	Modem_GATT_Param[__SET_PRESS_CHAR_ID].val_len=5;
 80037bc:	4a78      	ldr	r2, [pc, #480]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80037be:	23ea      	movs	r3, #234	; 0xea
 80037c0:	005b      	lsls	r3, r3, #1
 80037c2:	2105      	movs	r1, #5
 80037c4:	52d1      	strh	r1, [r2, r3]
	strcpy(Modem_GATT_Param[__SET_PRESS_CHAR_ID].char_value,"48656C6F"); // Send NULL
 80037c6:	4a78      	ldr	r2, [pc, #480]	; (80039a8 <modem_create_ble_gatt_svc_characteristics+0x60c>)
 80037c8:	4b78      	ldr	r3, [pc, #480]	; (80039ac <modem_create_ble_gatt_svc_characteristics+0x610>)
 80037ca:	0010      	movs	r0, r2
 80037cc:	0019      	movs	r1, r3
 80037ce:	2309      	movs	r3, #9
 80037d0:	001a      	movs	r2, r3
 80037d2:	f00a fc47 	bl	800e064 <memcpy>
	Modem_GATT_Param[__SET_PRESS_CHAR_ID].char_permission=2;  // write Only
 80037d6:	4a72      	ldr	r2, [pc, #456]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80037d8:	23e9      	movs	r3, #233	; 0xe9
 80037da:	005b      	lsls	r3, r3, #1
 80037dc:	2102      	movs	r1, #2
 80037de:	52d1      	strh	r1, [r2, r3]

	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_uuid,Modem_GATT_Param[__SET_PRESS_CHAR_ID].charaId,
 80037e0:	4a6f      	ldr	r2, [pc, #444]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80037e2:	23e4      	movs	r3, #228	; 0xe4
 80037e4:	005b      	lsls	r3, r3, #1
 80037e6:	5ad3      	ldrh	r3, [r2, r3]
 80037e8:	001e      	movs	r6, r3
 80037ea:	4a6d      	ldr	r2, [pc, #436]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80037ec:	23e5      	movs	r3, #229	; 0xe5
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	5cd3      	ldrb	r3, [r2, r3]
 80037f2:	469c      	mov	ip, r3
			Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_property,Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_type,Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_16);
 80037f4:	4a6a      	ldr	r2, [pc, #424]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80037f6:	23e6      	movs	r3, #230	; 0xe6
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	5ad3      	ldrh	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_uuid,Modem_GATT_Param[__SET_PRESS_CHAR_ID].charaId,
 80037fc:	001c      	movs	r4, r3
			Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_property,Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_type,Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_16);
 80037fe:	4a68      	ldr	r2, [pc, #416]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003800:	23e7      	movs	r3, #231	; 0xe7
 8003802:	005b      	lsls	r3, r3, #1
 8003804:	5cd3      	ldrb	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_uuid,Modem_GATT_Param[__SET_PRESS_CHAR_ID].charaId,
 8003806:	001d      	movs	r5, r3
			Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_property,Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_type,Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_16);
 8003808:	4a65      	ldr	r2, [pc, #404]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 800380a:	23e8      	movs	r3, #232	; 0xe8
 800380c:	005b      	lsls	r3, r3, #1
 800380e:	5ad3      	ldrh	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_uuid,Modem_GATT_Param[__SET_PRESS_CHAR_ID].charaId,
 8003810:	4967      	ldr	r1, [pc, #412]	; (80039b0 <modem_create_ble_gatt_svc_characteristics+0x614>)
 8003812:	0038      	movs	r0, r7
 8003814:	9302      	str	r3, [sp, #8]
 8003816:	9501      	str	r5, [sp, #4]
 8003818:	9400      	str	r4, [sp, #0]
 800381a:	4663      	mov	r3, ip
 800381c:	0032      	movs	r2, r6
 800381e:	f00a fa5b 	bl	800dcd8 <siprintf>
	modem_send_msg(cmd);
 8003822:	003b      	movs	r3, r7
 8003824:	0018      	movs	r0, r3
 8003826:	f7fe fe41 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 800382a:	23fa      	movs	r3, #250	; 0xfa
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	0018      	movs	r0, r3
 8003830:	f006 f9f7 	bl	8009c22 <osDelay>

	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_uuid,Modem_GATT_Param[__SET_PRESS_CHAR_ID].charaId,Modem_GATT_Param[__SET_PRESS_CHAR_ID].char_permission,
 8003834:	4a5a      	ldr	r2, [pc, #360]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003836:	23e4      	movs	r3, #228	; 0xe4
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	5ad3      	ldrh	r3, [r2, r3]
 800383c:	469c      	mov	ip, r3
 800383e:	4a58      	ldr	r2, [pc, #352]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003840:	23e5      	movs	r3, #229	; 0xe5
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	5cd3      	ldrb	r3, [r2, r3]
 8003846:	4698      	mov	r8, r3
 8003848:	4a55      	ldr	r2, [pc, #340]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 800384a:	23e9      	movs	r3, #233	; 0xe9
 800384c:	005b      	lsls	r3, r3, #1
 800384e:	5ad3      	ldrh	r3, [r2, r3]
 8003850:	001c      	movs	r4, r3
			Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_type,Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_16,Modem_GATT_Param[__SET_PRESS_CHAR_ID].val_len,Modem_GATT_Param[__SET_PRESS_CHAR_ID].char_value);
 8003852:	4a53      	ldr	r2, [pc, #332]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003854:	23e7      	movs	r3, #231	; 0xe7
 8003856:	005b      	lsls	r3, r3, #1
 8003858:	5cd3      	ldrb	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_uuid,Modem_GATT_Param[__SET_PRESS_CHAR_ID].charaId,Modem_GATT_Param[__SET_PRESS_CHAR_ID].char_permission,
 800385a:	001d      	movs	r5, r3
			Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_type,Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_16,Modem_GATT_Param[__SET_PRESS_CHAR_ID].val_len,Modem_GATT_Param[__SET_PRESS_CHAR_ID].char_value);
 800385c:	4a50      	ldr	r2, [pc, #320]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 800385e:	23e8      	movs	r3, #232	; 0xe8
 8003860:	005b      	lsls	r3, r3, #1
 8003862:	5ad3      	ldrh	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_uuid,Modem_GATT_Param[__SET_PRESS_CHAR_ID].charaId,Modem_GATT_Param[__SET_PRESS_CHAR_ID].char_permission,
 8003864:	001e      	movs	r6, r3
			Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_type,Modem_GATT_Param[__SET_PRESS_CHAR_ID].uuid_16,Modem_GATT_Param[__SET_PRESS_CHAR_ID].val_len,Modem_GATT_Param[__SET_PRESS_CHAR_ID].char_value);
 8003866:	4a4e      	ldr	r2, [pc, #312]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003868:	23ea      	movs	r3, #234	; 0xea
 800386a:	005b      	lsls	r3, r3, #1
 800386c:	5ad3      	ldrh	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__SET_PRESS_CHAR_ID].svc_uuid,Modem_GATT_Param[__SET_PRESS_CHAR_ID].charaId,Modem_GATT_Param[__SET_PRESS_CHAR_ID].char_permission,
 800386e:	001a      	movs	r2, r3
 8003870:	4950      	ldr	r1, [pc, #320]	; (80039b4 <modem_create_ble_gatt_svc_characteristics+0x618>)
 8003872:	0038      	movs	r0, r7
 8003874:	4b4c      	ldr	r3, [pc, #304]	; (80039a8 <modem_create_ble_gatt_svc_characteristics+0x60c>)
 8003876:	9304      	str	r3, [sp, #16]
 8003878:	9203      	str	r2, [sp, #12]
 800387a:	9602      	str	r6, [sp, #8]
 800387c:	9501      	str	r5, [sp, #4]
 800387e:	9400      	str	r4, [sp, #0]
 8003880:	4643      	mov	r3, r8
 8003882:	4662      	mov	r2, ip
 8003884:	f00a fa28 	bl	800dcd8 <siprintf>

	modem_send_msg(cmd);
 8003888:	003b      	movs	r3, r7
 800388a:	0018      	movs	r0, r3
 800388c:	f7fe fe0e 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 8003890:	23fa      	movs	r3, #250	; 0xfa
 8003892:	009b      	lsls	r3, r3, #2
 8003894:	0018      	movs	r0, r3
 8003896:	f006 f9c4 	bl	8009c22 <osDelay>


	/* GATT CHAR 0xB116--> GPS Latitude and Longitudes */
	Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_uuid=SVC_UUID_ABF0;
 800389a:	4b41      	ldr	r3, [pc, #260]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 800389c:	4a46      	ldr	r2, [pc, #280]	; (80039b8 <modem_create_ble_gatt_svc_characteristics+0x61c>)
 800389e:	2100      	movs	r1, #0
 80038a0:	5299      	strh	r1, [r3, r2]
	Modem_GATT_Param[__GPS_LAT_LONG_ID].charaId =__GPS_LAT_LONG_ID;
 80038a2:	4a3f      	ldr	r2, [pc, #252]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80038a4:	238f      	movs	r3, #143	; 0x8f
 80038a6:	009b      	lsls	r3, r3, #2
 80038a8:	2105      	movs	r1, #5
 80038aa:	54d1      	strb	r1, [r2, r3]
	Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_property= 18;  // Read and Notify
 80038ac:	4b3c      	ldr	r3, [pc, #240]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80038ae:	4a43      	ldr	r2, [pc, #268]	; (80039bc <modem_create_ble_gatt_svc_characteristics+0x620>)
 80038b0:	2112      	movs	r1, #18
 80038b2:	5299      	strh	r1, [r3, r2]
	Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_type=1;     //16-bit UUID
 80038b4:	4a3a      	ldr	r2, [pc, #232]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80038b6:	2390      	movs	r3, #144	; 0x90
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	2101      	movs	r1, #1
 80038bc:	54d1      	strb	r1, [r2, r3]
	Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_16 =UUID16_GPS_LAT_LONG;
 80038be:	4b38      	ldr	r3, [pc, #224]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80038c0:	4a3f      	ldr	r2, [pc, #252]	; (80039c0 <modem_create_ble_gatt_svc_characteristics+0x624>)
 80038c2:	4940      	ldr	r1, [pc, #256]	; (80039c4 <modem_create_ble_gatt_svc_characteristics+0x628>)
 80038c4:	5299      	strh	r1, [r3, r2]
	Modem_GATT_Param[__GPS_LAT_LONG_ID].val_len=40;
 80038c6:	4b36      	ldr	r3, [pc, #216]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80038c8:	4a3f      	ldr	r2, [pc, #252]	; (80039c8 <modem_create_ble_gatt_svc_characteristics+0x62c>)
 80038ca:	2128      	movs	r1, #40	; 0x28
 80038cc:	5299      	strh	r1, [r3, r2]
//	strcpy(Modem_GATT_Param[__GPS_LAT_LONG_ID].char_value,"48656C6F"); // Send Latitude and Longitudes
	strcpy(Modem_GATT_Param[__GPS_LAT_LONG_ID].char_value,Lat_string); // Send Latitude and Longitudes
 80038ce:	4a3f      	ldr	r2, [pc, #252]	; (80039cc <modem_create_ble_gatt_svc_characteristics+0x630>)
 80038d0:	4b3f      	ldr	r3, [pc, #252]	; (80039d0 <modem_create_ble_gatt_svc_characteristics+0x634>)
 80038d2:	0011      	movs	r1, r2
 80038d4:	0018      	movs	r0, r3
 80038d6:	f00a fbb2 	bl	800e03e <strcpy>
	Modem_GATT_Param[__GPS_LAT_LONG_ID].char_permission=1;  // Read Only
 80038da:	4a31      	ldr	r2, [pc, #196]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80038dc:	2391      	movs	r3, #145	; 0x91
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	2101      	movs	r1, #1
 80038e2:	52d1      	strh	r1, [r2, r3]

	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_uuid,Modem_GATT_Param[__GPS_LAT_LONG_ID].charaId,
 80038e4:	4b2e      	ldr	r3, [pc, #184]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80038e6:	4a34      	ldr	r2, [pc, #208]	; (80039b8 <modem_create_ble_gatt_svc_characteristics+0x61c>)
 80038e8:	5a9b      	ldrh	r3, [r3, r2]
 80038ea:	001e      	movs	r6, r3
 80038ec:	4a2c      	ldr	r2, [pc, #176]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80038ee:	238f      	movs	r3, #143	; 0x8f
 80038f0:	009b      	lsls	r3, r3, #2
 80038f2:	5cd3      	ldrb	r3, [r2, r3]
 80038f4:	469c      	mov	ip, r3
			Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_property,Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_type,Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_16);
 80038f6:	4b2a      	ldr	r3, [pc, #168]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 80038f8:	4a30      	ldr	r2, [pc, #192]	; (80039bc <modem_create_ble_gatt_svc_characteristics+0x620>)
 80038fa:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_uuid,Modem_GATT_Param[__GPS_LAT_LONG_ID].charaId,
 80038fc:	001c      	movs	r4, r3
			Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_property,Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_type,Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_16);
 80038fe:	4a28      	ldr	r2, [pc, #160]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003900:	2390      	movs	r3, #144	; 0x90
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	5cd3      	ldrb	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_uuid,Modem_GATT_Param[__GPS_LAT_LONG_ID].charaId,
 8003906:	001d      	movs	r5, r3
			Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_property,Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_type,Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_16);
 8003908:	4b25      	ldr	r3, [pc, #148]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 800390a:	4a2d      	ldr	r2, [pc, #180]	; (80039c0 <modem_create_ble_gatt_svc_characteristics+0x624>)
 800390c:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSC=%d,%d,%d,%d,%d",Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_uuid,Modem_GATT_Param[__GPS_LAT_LONG_ID].charaId,
 800390e:	4928      	ldr	r1, [pc, #160]	; (80039b0 <modem_create_ble_gatt_svc_characteristics+0x614>)
 8003910:	0038      	movs	r0, r7
 8003912:	9302      	str	r3, [sp, #8]
 8003914:	9501      	str	r5, [sp, #4]
 8003916:	9400      	str	r4, [sp, #0]
 8003918:	4663      	mov	r3, ip
 800391a:	0032      	movs	r2, r6
 800391c:	f00a f9dc 	bl	800dcd8 <siprintf>
	modem_send_msg(cmd);
 8003920:	003b      	movs	r3, r7
 8003922:	0018      	movs	r0, r3
 8003924:	f7fe fdc2 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 8003928:	23fa      	movs	r3, #250	; 0xfa
 800392a:	009b      	lsls	r3, r3, #2
 800392c:	0018      	movs	r0, r3
 800392e:	f006 f978 	bl	8009c22 <osDelay>

	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_uuid,Modem_GATT_Param[__GPS_LAT_LONG_ID].charaId,Modem_GATT_Param[__GPS_LAT_LONG_ID].char_permission,
 8003932:	4b1b      	ldr	r3, [pc, #108]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003934:	4a20      	ldr	r2, [pc, #128]	; (80039b8 <modem_create_ble_gatt_svc_characteristics+0x61c>)
 8003936:	5a9b      	ldrh	r3, [r3, r2]
 8003938:	469c      	mov	ip, r3
 800393a:	4a19      	ldr	r2, [pc, #100]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 800393c:	238f      	movs	r3, #143	; 0x8f
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	5cd3      	ldrb	r3, [r2, r3]
 8003942:	4698      	mov	r8, r3
 8003944:	4a16      	ldr	r2, [pc, #88]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003946:	2391      	movs	r3, #145	; 0x91
 8003948:	009b      	lsls	r3, r3, #2
 800394a:	5ad3      	ldrh	r3, [r2, r3]
 800394c:	001c      	movs	r4, r3
			Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_type,Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_16,Modem_GATT_Param[__GPS_LAT_LONG_ID].val_len,Modem_GATT_Param[__GPS_LAT_LONG_ID].char_value);
 800394e:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003950:	2390      	movs	r3, #144	; 0x90
 8003952:	009b      	lsls	r3, r3, #2
 8003954:	5cd3      	ldrb	r3, [r2, r3]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_uuid,Modem_GATT_Param[__GPS_LAT_LONG_ID].charaId,Modem_GATT_Param[__GPS_LAT_LONG_ID].char_permission,
 8003956:	001d      	movs	r5, r3
			Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_type,Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_16,Modem_GATT_Param[__GPS_LAT_LONG_ID].val_len,Modem_GATT_Param[__GPS_LAT_LONG_ID].char_value);
 8003958:	4b11      	ldr	r3, [pc, #68]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 800395a:	4a19      	ldr	r2, [pc, #100]	; (80039c0 <modem_create_ble_gatt_svc_characteristics+0x624>)
 800395c:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_uuid,Modem_GATT_Param[__GPS_LAT_LONG_ID].charaId,Modem_GATT_Param[__GPS_LAT_LONG_ID].char_permission,
 800395e:	001e      	movs	r6, r3
			Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_type,Modem_GATT_Param[__GPS_LAT_LONG_ID].uuid_16,Modem_GATT_Param[__GPS_LAT_LONG_ID].val_len,Modem_GATT_Param[__GPS_LAT_LONG_ID].char_value);
 8003960:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <modem_create_ble_gatt_svc_characteristics+0x604>)
 8003962:	4a19      	ldr	r2, [pc, #100]	; (80039c8 <modem_create_ble_gatt_svc_characteristics+0x62c>)
 8003964:	5a9b      	ldrh	r3, [r3, r2]
	sprintf(cmd,"AT+QBTGATSCV=%d,%d,%d,%d,%d,%d,\"%s\"",Modem_GATT_Param[__GPS_LAT_LONG_ID].svc_uuid,Modem_GATT_Param[__GPS_LAT_LONG_ID].charaId,Modem_GATT_Param[__GPS_LAT_LONG_ID].char_permission,
 8003966:	001a      	movs	r2, r3
 8003968:	4912      	ldr	r1, [pc, #72]	; (80039b4 <modem_create_ble_gatt_svc_characteristics+0x618>)
 800396a:	0038      	movs	r0, r7
 800396c:	4b18      	ldr	r3, [pc, #96]	; (80039d0 <modem_create_ble_gatt_svc_characteristics+0x634>)
 800396e:	9304      	str	r3, [sp, #16]
 8003970:	9203      	str	r2, [sp, #12]
 8003972:	9602      	str	r6, [sp, #8]
 8003974:	9501      	str	r5, [sp, #4]
 8003976:	9400      	str	r4, [sp, #0]
 8003978:	4643      	mov	r3, r8
 800397a:	4662      	mov	r2, ip
 800397c:	f00a f9ac 	bl	800dcd8 <siprintf>

	modem_send_msg(cmd);
 8003980:	003b      	movs	r3, r7
 8003982:	0018      	movs	r0, r3
 8003984:	f7fe fd92 	bl	80024ac <modem_send_msg>
	osDelay(1000);
 8003988:	23fa      	movs	r3, #250	; 0xfa
 800398a:	009b      	lsls	r3, r3, #2
 800398c:	0018      	movs	r0, r3
 800398e:	f006 f948 	bl	8009c22 <osDelay>


}
 8003992:	46c0      	nop			; (mov r8, r8)
 8003994:	46bd      	mov	sp, r7
 8003996:	b032      	add	sp, #200	; 0xc8
 8003998:	bc80      	pop	{r7}
 800399a:	46b8      	mov	r8, r7
 800399c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800399e:	46c0      	nop			; (mov r8, r8)
 80039a0:	20000508 	.word	0x20000508
 80039a4:	ffffb115 	.word	0xffffb115
 80039a8:	200006de 	.word	0x200006de
 80039ac:	08010d84 	.word	0x08010d84
 80039b0:	08010d44 	.word	0x08010d44
 80039b4:	08010d60 	.word	0x08010d60
 80039b8:	0000023a 	.word	0x0000023a
 80039bc:	0000023e 	.word	0x0000023e
 80039c0:	00000242 	.word	0x00000242
 80039c4:	ffffb116 	.word	0xffffb116
 80039c8:	00000246 	.word	0x00000246
 80039cc:	200004a8 	.word	0x200004a8
 80039d0:	20000750 	.word	0x20000750

080039d4 <modem_parse_ble_write_data>:
bool modem_parse_ble_write_data(char *input, BLEWriteData *outData)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	6039      	str	r1, [r7, #0]

	client_write=1;
 80039de:	4b5a      	ldr	r3, [pc, #360]	; (8003b48 <modem_parse_ble_write_data+0x174>)
 80039e0:	2201      	movs	r2, #1
 80039e2:	701a      	strb	r2, [r3, #0]
    const char *marker = "+QBTLEVALDATA:";
 80039e4:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <modem_parse_ble_write_data+0x178>)
 80039e6:	613b      	str	r3, [r7, #16]
    char *start = strstr(input, marker);
 80039e8:	693a      	ldr	r2, [r7, #16]
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	0011      	movs	r1, r2
 80039ee:	0018      	movs	r0, r3
 80039f0:	f00a fa7d 	bl	800deee <strstr>
 80039f4:	0003      	movs	r3, r0
 80039f6:	617b      	str	r3, [r7, #20]
    if (!start) return false;
 80039f8:	697b      	ldr	r3, [r7, #20]
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d101      	bne.n	8003a02 <modem_parse_ble_write_data+0x2e>
 80039fe:	2300      	movs	r3, #0
 8003a00:	e09d      	b.n	8003b3e <modem_parse_ble_write_data+0x16a>

    start += strlen(marker); // move past "+QBTLEVALDATA:"
 8003a02:	693b      	ldr	r3, [r7, #16]
 8003a04:	0018      	movs	r0, r3
 8003a06:	f7fc fb89 	bl	800011c <strlen>
 8003a0a:	0002      	movs	r2, r0
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	189b      	adds	r3, r3, r2
 8003a10:	617b      	str	r3, [r7, #20]

    // Trim leading whitespace
    while (*start == ' ' || *start == '\r' || *start == '\n') start++;
 8003a12:	e002      	b.n	8003a1a <modem_parse_ble_write_data+0x46>
 8003a14:	697b      	ldr	r3, [r7, #20]
 8003a16:	3301      	adds	r3, #1
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	781b      	ldrb	r3, [r3, #0]
 8003a1e:	2b20      	cmp	r3, #32
 8003a20:	d0f8      	beq.n	8003a14 <modem_parse_ble_write_data+0x40>
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	781b      	ldrb	r3, [r3, #0]
 8003a26:	2b0d      	cmp	r3, #13
 8003a28:	d0f4      	beq.n	8003a14 <modem_parse_ble_write_data+0x40>
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	781b      	ldrb	r3, [r3, #0]
 8003a2e:	2b0a      	cmp	r3, #10
 8003a30:	d0f0      	beq.n	8003a14 <modem_parse_ble_write_data+0x40>

    // Step-by-step manual parsing
    // Format: <cid>,"<address>",<value_length>,"<value>"

    // 1. Get <cid>
    char *token = strtok(start, ",");
 8003a32:	4a47      	ldr	r2, [pc, #284]	; (8003b50 <modem_parse_ble_write_data+0x17c>)
 8003a34:	697b      	ldr	r3, [r7, #20]
 8003a36:	0011      	movs	r1, r2
 8003a38:	0018      	movs	r0, r3
 8003a3a:	f00a f9f5 	bl	800de28 <strtok>
 8003a3e:	0003      	movs	r3, r0
 8003a40:	60fb      	str	r3, [r7, #12]
    if (!token) return false;
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d101      	bne.n	8003a4c <modem_parse_ble_write_data+0x78>
 8003a48:	2300      	movs	r3, #0
 8003a4a:	e078      	b.n	8003b3e <modem_parse_ble_write_data+0x16a>
    outData->cid = atoi(token);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	0018      	movs	r0, r3
 8003a50:	f008 fc25 	bl	800c29e <atoi>
 8003a54:	0002      	movs	r2, r0
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	601a      	str	r2, [r3, #0]

    // 2. Get "<address>"
    token = strtok(NULL, ",");
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <modem_parse_ble_write_data+0x17c>)
 8003a5c:	0019      	movs	r1, r3
 8003a5e:	2000      	movs	r0, #0
 8003a60:	f00a f9e2 	bl	800de28 <strtok>
 8003a64:	0003      	movs	r3, r0
 8003a66:	60fb      	str	r3, [r7, #12]
    if (!token || token[0] != '\"') return false;
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d003      	beq.n	8003a76 <modem_parse_ble_write_data+0xa2>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	781b      	ldrb	r3, [r3, #0]
 8003a72:	2b22      	cmp	r3, #34	; 0x22
 8003a74:	d001      	beq.n	8003a7a <modem_parse_ble_write_data+0xa6>
 8003a76:	2300      	movs	r3, #0
 8003a78:	e061      	b.n	8003b3e <modem_parse_ble_write_data+0x16a>
    token++;  // skip opening quote
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	3301      	adds	r3, #1
 8003a7e:	60fb      	str	r3, [r7, #12]
    char *quote = strchr(token, '\"');
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2122      	movs	r1, #34	; 0x22
 8003a84:	0018      	movs	r0, r3
 8003a86:	f00a f99b 	bl	800ddc0 <strchr>
 8003a8a:	0003      	movs	r3, r0
 8003a8c:	60bb      	str	r3, [r7, #8]
    if (!quote) return false;
 8003a8e:	68bb      	ldr	r3, [r7, #8]
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d101      	bne.n	8003a98 <modem_parse_ble_write_data+0xc4>
 8003a94:	2300      	movs	r3, #0
 8003a96:	e052      	b.n	8003b3e <modem_parse_ble_write_data+0x16a>
    *quote = '\0';
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	701a      	strb	r2, [r3, #0]
    strncpy(outData->address, token, sizeof(outData->address));
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	3304      	adds	r3, #4
 8003aa2:	68f9      	ldr	r1, [r7, #12]
 8003aa4:	220d      	movs	r2, #13
 8003aa6:	0018      	movs	r0, r3
 8003aa8:	f00a f9a9 	bl	800ddfe <strncpy>

    // 3. Get <value_length>
    token = strtok(NULL, ",");
 8003aac:	4b28      	ldr	r3, [pc, #160]	; (8003b50 <modem_parse_ble_write_data+0x17c>)
 8003aae:	0019      	movs	r1, r3
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	f00a f9b9 	bl	800de28 <strtok>
 8003ab6:	0003      	movs	r3, r0
 8003ab8:	60fb      	str	r3, [r7, #12]
    if (!token) return false;
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d101      	bne.n	8003ac4 <modem_parse_ble_write_data+0xf0>
 8003ac0:	2300      	movs	r3, #0
 8003ac2:	e03c      	b.n	8003b3e <modem_parse_ble_write_data+0x16a>
    outData->value_length = atoi(token);
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	0018      	movs	r0, r3
 8003ac8:	f008 fbe9 	bl	800c29e <atoi>
 8003acc:	0002      	movs	r2, r0
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	615a      	str	r2, [r3, #20]

    // 4. Get "<value>"
    token = strtok(NULL, "\r\n"); // ends at CR or LF
 8003ad2:	4b20      	ldr	r3, [pc, #128]	; (8003b54 <modem_parse_ble_write_data+0x180>)
 8003ad4:	0019      	movs	r1, r3
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	f00a f9a6 	bl	800de28 <strtok>
 8003adc:	0003      	movs	r3, r0
 8003ade:	60fb      	str	r3, [r7, #12]
    if (!token || token[0] != '\"') return false;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d003      	beq.n	8003aee <modem_parse_ble_write_data+0x11a>
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	2b22      	cmp	r3, #34	; 0x22
 8003aec:	d001      	beq.n	8003af2 <modem_parse_ble_write_data+0x11e>
 8003aee:	2300      	movs	r3, #0
 8003af0:	e025      	b.n	8003b3e <modem_parse_ble_write_data+0x16a>
    token++; // skip opening quote
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	3301      	adds	r3, #1
 8003af6:	60fb      	str	r3, [r7, #12]
    quote = strchr(token, '\"');
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	2122      	movs	r1, #34	; 0x22
 8003afc:	0018      	movs	r0, r3
 8003afe:	f00a f95f 	bl	800ddc0 <strchr>
 8003b02:	0003      	movs	r3, r0
 8003b04:	60bb      	str	r3, [r7, #8]
    if (!quote) return false;
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d101      	bne.n	8003b10 <modem_parse_ble_write_data+0x13c>
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	e016      	b.n	8003b3e <modem_parse_ble_write_data+0x16a>
    *quote = '\0';
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	2200      	movs	r2, #0
 8003b14:	701a      	strb	r2, [r3, #0]
    strncpy(outData->value, token, sizeof(outData->value));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	3318      	adds	r3, #24
 8003b1a:	68f9      	ldr	r1, [r7, #12]
 8003b1c:	2232      	movs	r2, #50	; 0x32
 8003b1e:	0018      	movs	r0, r3
 8003b20:	f00a f96d 	bl	800ddfe <strncpy>
    hex_to_ascii(BLE_Write_data.value, Ble_write_data_ascii);
 8003b24:	4a0c      	ldr	r2, [pc, #48]	; (8003b58 <modem_parse_ble_write_data+0x184>)
 8003b26:	4b0d      	ldr	r3, [pc, #52]	; (8003b5c <modem_parse_ble_write_data+0x188>)
 8003b28:	0011      	movs	r1, r2
 8003b2a:	0018      	movs	r0, r3
 8003b2c:	f000 f81a 	bl	8003b64 <hex_to_ascii>
    memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
 8003b30:	4b0b      	ldr	r3, [pc, #44]	; (8003b60 <modem_parse_ble_write_data+0x18c>)
 8003b32:	22c8      	movs	r2, #200	; 0xc8
 8003b34:	2100      	movs	r1, #0
 8003b36:	0018      	movs	r0, r3
 8003b38:	f00a f93a 	bl	800ddb0 <memset>
    return true;
 8003b3c:	2301      	movs	r3, #1
}
 8003b3e:	0018      	movs	r0, r3
 8003b40:	46bd      	mov	sp, r7
 8003b42:	b006      	add	sp, #24
 8003b44:	bd80      	pop	{r7, pc}
 8003b46:	46c0      	nop			; (mov r8, r8)
 8003b48:	200007e6 	.word	0x200007e6
 8003b4c:	08010d90 	.word	0x08010d90
 8003b50:	08010da0 	.word	0x08010da0
 8003b54:	08010da4 	.word	0x08010da4
 8003b58:	200007b4 	.word	0x200007b4
 8003b5c:	20000858 	.word	0x20000858
 8003b60:	200009cc 	.word	0x200009cc

08003b64 <hex_to_ascii>:
bool hex_to_ascii(const char *hex_str, char *out)
{
 8003b64:	b580      	push	{r7, lr}
 8003b66:	b086      	sub	sp, #24
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]
 8003b6c:	6039      	str	r1, [r7, #0]
    size_t len = strlen(hex_str);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	0018      	movs	r0, r3
 8003b72:	f7fc fad3 	bl	800011c <strlen>
 8003b76:	0003      	movs	r3, r0
 8003b78:	613b      	str	r3, [r7, #16]
    if (len % 2 != 0) return false;  // Must be even length
 8003b7a:	693b      	ldr	r3, [r7, #16]
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	4013      	ands	r3, r2
 8003b80:	d001      	beq.n	8003b86 <hex_to_ascii+0x22>
 8003b82:	2300      	movs	r3, #0
 8003b84:	e049      	b.n	8003c1a <hex_to_ascii+0xb6>

    for (size_t i = 0; i < len; i += 2)
 8003b86:	2300      	movs	r3, #0
 8003b88:	617b      	str	r3, [r7, #20]
 8003b8a:	e03b      	b.n	8003c04 <hex_to_ascii+0xa0>
    {
        if (!isxdigit((unsigned char)hex_str[i]) || !isxdigit((unsigned char)hex_str[i + 1]))
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	18d3      	adds	r3, r2, r3
 8003b92:	781b      	ldrb	r3, [r3, #0]
 8003b94:	1c5a      	adds	r2, r3, #1
 8003b96:	4b23      	ldr	r3, [pc, #140]	; (8003c24 <hex_to_ascii+0xc0>)
 8003b98:	18d3      	adds	r3, r2, r3
 8003b9a:	781b      	ldrb	r3, [r3, #0]
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	2344      	movs	r3, #68	; 0x44
 8003ba0:	4013      	ands	r3, r2
 8003ba2:	d00c      	beq.n	8003bbe <hex_to_ascii+0x5a>
 8003ba4:	697b      	ldr	r3, [r7, #20]
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	687a      	ldr	r2, [r7, #4]
 8003baa:	18d3      	adds	r3, r2, r3
 8003bac:	781b      	ldrb	r3, [r3, #0]
 8003bae:	1c5a      	adds	r2, r3, #1
 8003bb0:	4b1c      	ldr	r3, [pc, #112]	; (8003c24 <hex_to_ascii+0xc0>)
 8003bb2:	18d3      	adds	r3, r2, r3
 8003bb4:	781b      	ldrb	r3, [r3, #0]
 8003bb6:	001a      	movs	r2, r3
 8003bb8:	2344      	movs	r3, #68	; 0x44
 8003bba:	4013      	ands	r3, r2
 8003bbc:	d101      	bne.n	8003bc2 <hex_to_ascii+0x5e>
        {
            return false;  // Not valid hex digits
 8003bbe:	2300      	movs	r3, #0
 8003bc0:	e02b      	b.n	8003c1a <hex_to_ascii+0xb6>
        }

        char byte_str[3] = { hex_str[i], hex_str[i + 1], '\0' };
 8003bc2:	687a      	ldr	r2, [r7, #4]
 8003bc4:	697b      	ldr	r3, [r7, #20]
 8003bc6:	18d3      	adds	r3, r2, r3
 8003bc8:	781a      	ldrb	r2, [r3, #0]
 8003bca:	210c      	movs	r1, #12
 8003bcc:	187b      	adds	r3, r7, r1
 8003bce:	701a      	strb	r2, [r3, #0]
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	687a      	ldr	r2, [r7, #4]
 8003bd6:	18d3      	adds	r3, r2, r3
 8003bd8:	781a      	ldrb	r2, [r3, #0]
 8003bda:	187b      	adds	r3, r7, r1
 8003bdc:	705a      	strb	r2, [r3, #1]
 8003bde:	187b      	adds	r3, r7, r1
 8003be0:	2200      	movs	r2, #0
 8003be2:	709a      	strb	r2, [r3, #2]
        out[i / 2] = (char)strtol(byte_str, NULL, 16);
 8003be4:	187b      	adds	r3, r7, r1
 8003be6:	2210      	movs	r2, #16
 8003be8:	2100      	movs	r1, #0
 8003bea:	0018      	movs	r0, r3
 8003bec:	f009 fb16 	bl	800d21c <strtol>
 8003bf0:	0001      	movs	r1, r0
 8003bf2:	697b      	ldr	r3, [r7, #20]
 8003bf4:	085b      	lsrs	r3, r3, #1
 8003bf6:	683a      	ldr	r2, [r7, #0]
 8003bf8:	18d3      	adds	r3, r2, r3
 8003bfa:	b2ca      	uxtb	r2, r1
 8003bfc:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < len; i += 2)
 8003bfe:	697b      	ldr	r3, [r7, #20]
 8003c00:	3302      	adds	r3, #2
 8003c02:	617b      	str	r3, [r7, #20]
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	429a      	cmp	r2, r3
 8003c0a:	d3bf      	bcc.n	8003b8c <hex_to_ascii+0x28>
    }

    out[len / 2] = '\0';  // Null-terminate output
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	085b      	lsrs	r3, r3, #1
 8003c10:	683a      	ldr	r2, [r7, #0]
 8003c12:	18d3      	adds	r3, r2, r3
 8003c14:	2200      	movs	r2, #0
 8003c16:	701a      	strb	r2, [r3, #0]
    return true;
 8003c18:	2301      	movs	r3, #1
}
 8003c1a:	0018      	movs	r0, r3
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	b006      	add	sp, #24
 8003c20:	bd80      	pop	{r7, pc}
 8003c22:	46c0      	nop			; (mov r8, r8)
 8003c24:	08011458 	.word	0x08011458

08003c28 <asciiToHexStr>:
void asciiToHexStr(const char *asciiStr, char *hexStr)
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
    while (*asciiStr)
 8003c32:	e00d      	b.n	8003c50 <asciiToHexStr+0x28>
    {
        sprintf(hexStr, "%02X", (unsigned char)*asciiStr);
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	781b      	ldrb	r3, [r3, #0]
 8003c38:	001a      	movs	r2, r3
 8003c3a:	490b      	ldr	r1, [pc, #44]	; (8003c68 <asciiToHexStr+0x40>)
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f00a f84a 	bl	800dcd8 <siprintf>
        hexStr += 2;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	3302      	adds	r3, #2
 8003c48:	603b      	str	r3, [r7, #0]
        asciiStr++;
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	3301      	adds	r3, #1
 8003c4e:	607b      	str	r3, [r7, #4]
    while (*asciiStr)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d1ed      	bne.n	8003c34 <asciiToHexStr+0xc>
    }
    *hexStr = '\0'; // Null-terminate the hex string
 8003c58:	683b      	ldr	r3, [r7, #0]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	701a      	strb	r2, [r3, #0]
}
 8003c5e:	46c0      	nop			; (mov r8, r8)
 8003c60:	46bd      	mov	sp, r7
 8003c62:	b002      	add	sp, #8
 8003c64:	bd80      	pop	{r7, pc}
 8003c66:	46c0      	nop			; (mov r8, r8)
 8003c68:	08010da8 	.word	0x08010da8

08003c6c <modem_ble_update_client_lat_long>:
void modem_ble_update_client_lat_long()
{
 8003c6c:	b5b0      	push	{r4, r5, r7, lr}
 8003c6e:	b0d4      	sub	sp, #336	; 0x150
 8003c70:	af00      	add	r7, sp, #0

    #define LAT_LONG_BUF_LEN 50
    char lat_long_data[LAT_LONG_BUF_LEN];
    char lat_long_hex_str[2 * LAT_LONG_BUF_LEN + 1]={0};
 8003c72:	24b4      	movs	r4, #180	; 0xb4
 8003c74:	193b      	adds	r3, r7, r4
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	3304      	adds	r3, #4
 8003c7c:	2261      	movs	r2, #97	; 0x61
 8003c7e:	2100      	movs	r1, #0
 8003c80:	0018      	movs	r0, r3
 8003c82:	f00a f895 	bl	800ddb0 <memset>
    char cmd[180];

    sprintf(lat_long_data,"%s,%s",Lat_string,Long_string);
 8003c86:	4b10      	ldr	r3, [pc, #64]	; (8003cc8 <modem_ble_update_client_lat_long+0x5c>)
 8003c88:	4a10      	ldr	r2, [pc, #64]	; (8003ccc <modem_ble_update_client_lat_long+0x60>)
 8003c8a:	4911      	ldr	r1, [pc, #68]	; (8003cd0 <modem_ble_update_client_lat_long+0x64>)
 8003c8c:	258e      	movs	r5, #142	; 0x8e
 8003c8e:	006d      	lsls	r5, r5, #1
 8003c90:	1978      	adds	r0, r7, r5
 8003c92:	f00a f821 	bl	800dcd8 <siprintf>
    asciiToHexStr(lat_long_data, lat_long_hex_str);
 8003c96:	193a      	adds	r2, r7, r4
 8003c98:	197b      	adds	r3, r7, r5
 8003c9a:	0011      	movs	r1, r2
 8003c9c:	0018      	movs	r0, r3
 8003c9e:	f7ff ffc3 	bl	8003c28 <asciiToHexStr>
    /* Need to take Byte Length instead of hex string length */
    sprintf(cmd, "AT+QBTLESEND=5,0,%d,\"%s\"", strlen(lat_long_data), lat_long_hex_str);
 8003ca2:	197b      	adds	r3, r7, r5
 8003ca4:	0018      	movs	r0, r3
 8003ca6:	f7fc fa39 	bl	800011c <strlen>
 8003caa:	0002      	movs	r2, r0
 8003cac:	193b      	adds	r3, r7, r4
 8003cae:	4909      	ldr	r1, [pc, #36]	; (8003cd4 <modem_ble_update_client_lat_long+0x68>)
 8003cb0:	0038      	movs	r0, r7
 8003cb2:	f00a f811 	bl	800dcd8 <siprintf>


    modem_send_msg(cmd);
 8003cb6:	003b      	movs	r3, r7
 8003cb8:	0018      	movs	r0, r3
 8003cba:	f7fe fbf7 	bl	80024ac <modem_send_msg>
}
 8003cbe:	46c0      	nop			; (mov r8, r8)
 8003cc0:	46bd      	mov	sp, r7
 8003cc2:	b054      	add	sp, #336	; 0x150
 8003cc4:	bdb0      	pop	{r4, r5, r7, pc}
 8003cc6:	46c0      	nop			; (mov r8, r8)
 8003cc8:	200004b4 	.word	0x200004b4
 8003ccc:	200004a8 	.word	0x200004a8
 8003cd0:	08010db0 	.word	0x08010db0
 8003cd4:	08010db8 	.word	0x08010db8

08003cd8 <Log_msg>:
extern uint8_t mqtt_reinit;

/****************************** Function Prototypes **************************************/

void Log_msg(const char *msg)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg), 1000);
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	0018      	movs	r0, r3
 8003ce4:	f7fc fa1a 	bl	800011c <strlen>
 8003ce8:	0003      	movs	r3, r0
 8003cea:	b29a      	uxth	r2, r3
 8003cec:	23fa      	movs	r3, #250	; 0xfa
 8003cee:	009b      	lsls	r3, r3, #2
 8003cf0:	6879      	ldr	r1, [r7, #4]
 8003cf2:	4803      	ldr	r0, [pc, #12]	; (8003d00 <Log_msg+0x28>)
 8003cf4:	f003 fe6a 	bl	80079cc <HAL_UART_Transmit>
}
 8003cf8:	46c0      	nop			; (mov r8, r8)
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	b002      	add	sp, #8
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000920 	.word	0x20000920

08003d04 <Modem_Rx_Process_start>:

void Modem_Rx_Process_start()
{
 8003d04:	b590      	push	{r4, r7, lr}
 8003d06:	b087      	sub	sp, #28
 8003d08:	af00      	add	r7, sp, #0
	osThreadDef(ModemRxTask, ModemRx_Process, osPriorityHigh, 0, 512);
 8003d0a:	1d3b      	adds	r3, r7, #4
 8003d0c:	4a08      	ldr	r2, [pc, #32]	; (8003d30 <Modem_Rx_Process_start+0x2c>)
 8003d0e:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003d10:	c313      	stmia	r3!, {r0, r1, r4}
 8003d12:	ca03      	ldmia	r2!, {r0, r1}
 8003d14:	c303      	stmia	r3!, {r0, r1}
	ModemRx_TaskHandle = osThreadCreate(osThread(ModemRxTask), NULL);
 8003d16:	1d3b      	adds	r3, r7, #4
 8003d18:	2100      	movs	r1, #0
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f005 ff59 	bl	8009bd2 <osThreadCreate>
 8003d20:	0002      	movs	r2, r0
 8003d22:	4b04      	ldr	r3, [pc, #16]	; (8003d34 <Modem_Rx_Process_start+0x30>)
 8003d24:	601a      	str	r2, [r3, #0]
}
 8003d26:	46c0      	nop			; (mov r8, r8)
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	b007      	add	sp, #28
 8003d2c:	bd90      	pop	{r4, r7, pc}
 8003d2e:	46c0      	nop			; (mov r8, r8)
 8003d30:	08010de0 	.word	0x08010de0
 8003d34:	200009b8 	.word	0x200009b8

08003d38 <ModemRx_Process>:
void ModemRx_Process(void const * argument)
{
 8003d38:	b590      	push	{r4, r7, lr}
 8003d3a:	b08b      	sub	sp, #44	; 0x2c
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
//	osDelay(2000);
	uint32_t ulNotifiedValue;
	for(;;)
	{
        // Wait for notification from ISR
		ulNotifiedValue=ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003d40:	2301      	movs	r3, #1
 8003d42:	425b      	negs	r3, r3
 8003d44:	0019      	movs	r1, r3
 8003d46:	2001      	movs	r0, #1
 8003d48:	f007 fb7c 	bl	800b444 <ulTaskNotifyTake>
 8003d4c:	0003      	movs	r3, r0
 8003d4e:	627b      	str	r3, [r7, #36]	; 0x24
		if(ulNotifiedValue>0)
 8003d50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d100      	bne.n	8003d58 <ModemRx_Process+0x20>
 8003d56:	e256      	b.n	8004206 <ModemRx_Process+0x4ce>
		{
			Log_msg((const char*)EC200u_Rx_Buff);
 8003d58:	4bdb      	ldr	r3, [pc, #876]	; (80040c8 <ModemRx_Process+0x390>)
 8003d5a:	0018      	movs	r0, r3
 8003d5c:	f7ff ffbc 	bl	8003cd8 <Log_msg>
			//print_msg("Rx Task Running\r\n");
			switch(cmd_val)
 8003d60:	4bda      	ldr	r3, [pc, #872]	; (80040cc <ModemRx_Process+0x394>)
 8003d62:	781b      	ldrb	r3, [r3, #0]
 8003d64:	2b27      	cmp	r3, #39	; 0x27
 8003d66:	d900      	bls.n	8003d6a <ModemRx_Process+0x32>
 8003d68:	e1e8      	b.n	800413c <ModemRx_Process+0x404>
 8003d6a:	009a      	lsls	r2, r3, #2
 8003d6c:	4bd8      	ldr	r3, [pc, #864]	; (80040d0 <ModemRx_Process+0x398>)
 8003d6e:	18d3      	adds	r3, r2, r3
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	469f      	mov	pc, r3
			{
				case MODEM_AT_CHECK:
				{
					osDelay(100);
 8003d74:	2064      	movs	r0, #100	; 0x64
 8003d76:	f005 ff54 	bl	8009c22 <osDelay>
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 8003d7a:	4ad6      	ldr	r2, [pc, #856]	; (80040d4 <ModemRx_Process+0x39c>)
 8003d7c:	4bd2      	ldr	r3, [pc, #840]	; (80040c8 <ModemRx_Process+0x390>)
 8003d7e:	0011      	movs	r1, r2
 8003d80:	0018      	movs	r0, r3
 8003d82:	f7fe fb7f 	bl	8002484 <modem_check_resp>
 8003d86:	1e03      	subs	r3, r0, #0
 8003d88:	d100      	bne.n	8003d8c <ModemRx_Process+0x54>
 8003d8a:	e22b      	b.n	80041e4 <ModemRx_Process+0x4ac>
					{
						Modem_AT_check=1;
 8003d8c:	4bd2      	ldr	r3, [pc, #840]	; (80040d8 <ModemRx_Process+0x3a0>)
 8003d8e:	2201      	movs	r2, #1
 8003d90:	701a      	strb	r2, [r3, #0]
						cmd_val=0;
 8003d92:	4bce      	ldr	r3, [pc, #824]	; (80040cc <ModemRx_Process+0x394>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	701a      	strb	r2, [r3, #0]
					}
					break;
 8003d98:	e224      	b.n	80041e4 <ModemRx_Process+0x4ac>
				}
				case MODEM_GET_INF0:
				{
					osDelay(100);
 8003d9a:	2064      	movs	r0, #100	; 0x64
 8003d9c:	f005 ff41 	bl	8009c22 <osDelay>
					const char* buffer_ptr = (const char*)EC200u_Rx_Buff;
 8003da0:	4bc9      	ldr	r3, [pc, #804]	; (80040c8 <ModemRx_Process+0x390>)
 8003da2:	623b      	str	r3, [r7, #32]
					modem_parse_string(&buffer_ptr, modem_info_t.modem_prd_id_info, sizeof(modem_info_t.modem_prd_id_info));
 8003da4:	49cd      	ldr	r1, [pc, #820]	; (80040dc <ModemRx_Process+0x3a4>)
 8003da6:	2320      	movs	r3, #32
 8003da8:	18fb      	adds	r3, r7, r3
 8003daa:	2214      	movs	r2, #20
 8003dac:	0018      	movs	r0, r3
 8003dae:	f000 fa41 	bl	8004234 <modem_parse_string>
					//strcpy(modem_info_t.modem_prd_id_info,(char*)EC200u_Rx_Buff);
					cmd_val=0;
 8003db2:	4bc6      	ldr	r3, [pc, #792]	; (80040cc <ModemRx_Process+0x394>)
 8003db4:	2200      	movs	r2, #0
 8003db6:	701a      	strb	r2, [r3, #0]
					break;
 8003db8:	e225      	b.n	8004206 <ModemRx_Process+0x4ce>
				}
				case MODEM_GET_MANF_ID:
				{
					osDelay(100);
 8003dba:	2064      	movs	r0, #100	; 0x64
 8003dbc:	f005 ff31 	bl	8009c22 <osDelay>
					const char* buffer_ptr = (const char*)EC200u_Rx_Buff;
 8003dc0:	4bc1      	ldr	r3, [pc, #772]	; (80040c8 <ModemRx_Process+0x390>)
 8003dc2:	61fb      	str	r3, [r7, #28]
					modem_parse_string(&buffer_ptr, modem_info_t.modem_manf_id, sizeof(modem_info_t.modem_manf_id));
 8003dc4:	49c6      	ldr	r1, [pc, #792]	; (80040e0 <ModemRx_Process+0x3a8>)
 8003dc6:	231c      	movs	r3, #28
 8003dc8:	18fb      	adds	r3, r7, r3
 8003dca:	2219      	movs	r2, #25
 8003dcc:	0018      	movs	r0, r3
 8003dce:	f000 fa31 	bl	8004234 <modem_parse_string>
					cmd_val=0;
 8003dd2:	4bbe      	ldr	r3, [pc, #760]	; (80040cc <ModemRx_Process+0x394>)
 8003dd4:	2200      	movs	r2, #0
 8003dd6:	701a      	strb	r2, [r3, #0]
					break;
 8003dd8:	e215      	b.n	8004206 <ModemRx_Process+0x4ce>
				}
				case MODEM_GET_TA_MODEL_INFO:
				{
					osDelay(100);
 8003dda:	2064      	movs	r0, #100	; 0x64
 8003ddc:	f005 ff21 	bl	8009c22 <osDelay>
					const char* buffer_ptr = (const char*)EC200u_Rx_Buff;
 8003de0:	4bb9      	ldr	r3, [pc, #740]	; (80040c8 <ModemRx_Process+0x390>)
 8003de2:	61bb      	str	r3, [r7, #24]
					modem_parse_string(&buffer_ptr, modem_info_t.modem_TA_model_info, sizeof(modem_info_t.modem_TA_model_info));
 8003de4:	49bf      	ldr	r1, [pc, #764]	; (80040e4 <ModemRx_Process+0x3ac>)
 8003de6:	2318      	movs	r3, #24
 8003de8:	18fb      	adds	r3, r7, r3
 8003dea:	2219      	movs	r2, #25
 8003dec:	0018      	movs	r0, r3
 8003dee:	f000 fa21 	bl	8004234 <modem_parse_string>
					cmd_val=0;
 8003df2:	4bb6      	ldr	r3, [pc, #728]	; (80040cc <ModemRx_Process+0x394>)
 8003df4:	2200      	movs	r2, #0
 8003df6:	701a      	strb	r2, [r3, #0]
					memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
 8003df8:	4bb3      	ldr	r3, [pc, #716]	; (80040c8 <ModemRx_Process+0x390>)
 8003dfa:	22c8      	movs	r2, #200	; 0xc8
 8003dfc:	2100      	movs	r1, #0
 8003dfe:	0018      	movs	r0, r3
 8003e00:	f009 ffd6 	bl	800ddb0 <memset>
					break;
 8003e04:	e1ff      	b.n	8004206 <ModemRx_Process+0x4ce>
				}
				case MODEM_CHECK_SIM_READY:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"READY"))
 8003e06:	4ab8      	ldr	r2, [pc, #736]	; (80040e8 <ModemRx_Process+0x3b0>)
 8003e08:	4baf      	ldr	r3, [pc, #700]	; (80040c8 <ModemRx_Process+0x390>)
 8003e0a:	0011      	movs	r1, r2
 8003e0c:	0018      	movs	r0, r3
 8003e0e:	f7fe fb39 	bl	8002484 <modem_check_resp>
 8003e12:	1e03      	subs	r3, r0, #0
 8003e14:	d00b      	beq.n	8003e2e <ModemRx_Process+0xf6>
					{
						cmd_val=0;
 8003e16:	4bad      	ldr	r3, [pc, #692]	; (80040cc <ModemRx_Process+0x394>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.sim_status=1;
 8003e1c:	4baf      	ldr	r3, [pc, #700]	; (80040dc <ModemRx_Process+0x3a4>)
 8003e1e:	2246      	movs	r2, #70	; 0x46
 8003e20:	2101      	movs	r1, #1
 8003e22:	5499      	strb	r1, [r3, r2]
						Log_msg("Sim Card Detected\r\n");
 8003e24:	4bb1      	ldr	r3, [pc, #708]	; (80040ec <ModemRx_Process+0x3b4>)
 8003e26:	0018      	movs	r0, r3
 8003e28:	f7ff ff56 	bl	8003cd8 <Log_msg>
					else
					{
						modem_info_t.simcard_info.sim_status=255;
						Log_msg("Sim Card Not Detected\r\n");
					}
					break;
 8003e2c:	e1eb      	b.n	8004206 <ModemRx_Process+0x4ce>
						modem_info_t.simcard_info.sim_status=255;
 8003e2e:	4bab      	ldr	r3, [pc, #684]	; (80040dc <ModemRx_Process+0x3a4>)
 8003e30:	2246      	movs	r2, #70	; 0x46
 8003e32:	21ff      	movs	r1, #255	; 0xff
 8003e34:	5499      	strb	r1, [r3, r2]
						Log_msg("Sim Card Not Detected\r\n");
 8003e36:	4bae      	ldr	r3, [pc, #696]	; (80040f0 <ModemRx_Process+0x3b8>)
 8003e38:	0018      	movs	r0, r3
 8003e3a:	f7ff ff4d 	bl	8003cd8 <Log_msg>
					break;
 8003e3e:	e1e2      	b.n	8004206 <ModemRx_Process+0x4ce>
				}
				case MODEM_CHECK_NETWORK_REG:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 8003e40:	4aa4      	ldr	r2, [pc, #656]	; (80040d4 <ModemRx_Process+0x39c>)
 8003e42:	4ba1      	ldr	r3, [pc, #644]	; (80040c8 <ModemRx_Process+0x390>)
 8003e44:	0011      	movs	r1, r2
 8003e46:	0018      	movs	r0, r3
 8003e48:	f7fe fb1c 	bl	8002484 <modem_check_resp>
 8003e4c:	1e03      	subs	r3, r0, #0
 8003e4e:	d00b      	beq.n	8003e68 <ModemRx_Process+0x130>
					{
						cmd_val=0;
 8003e50:	4b9e      	ldr	r3, [pc, #632]	; (80040cc <ModemRx_Process+0x394>)
 8003e52:	2200      	movs	r2, #0
 8003e54:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.sim_reg_status=1;
 8003e56:	4ba1      	ldr	r3, [pc, #644]	; (80040dc <ModemRx_Process+0x3a4>)
 8003e58:	2247      	movs	r2, #71	; 0x47
 8003e5a:	2101      	movs	r1, #1
 8003e5c:	5499      	strb	r1, [r3, r2]
						Log_msg("Sim Card Registered\r\n");
 8003e5e:	4ba5      	ldr	r3, [pc, #660]	; (80040f4 <ModemRx_Process+0x3bc>)
 8003e60:	0018      	movs	r0, r3
 8003e62:	f7ff ff39 	bl	8003cd8 <Log_msg>
					else
					{
						modem_info_t.simcard_info.sim_reg_status=255;
						Log_msg("Sim Card Registration Failed\r\n");
					}
					break;
 8003e66:	e1ce      	b.n	8004206 <ModemRx_Process+0x4ce>
						modem_info_t.simcard_info.sim_reg_status=255;
 8003e68:	4b9c      	ldr	r3, [pc, #624]	; (80040dc <ModemRx_Process+0x3a4>)
 8003e6a:	2247      	movs	r2, #71	; 0x47
 8003e6c:	21ff      	movs	r1, #255	; 0xff
 8003e6e:	5499      	strb	r1, [r3, r2]
						Log_msg("Sim Card Registration Failed\r\n");
 8003e70:	4ba1      	ldr	r3, [pc, #644]	; (80040f8 <ModemRx_Process+0x3c0>)
 8003e72:	0018      	movs	r0, r3
 8003e74:	f7ff ff30 	bl	8003cd8 <Log_msg>
					break;
 8003e78:	e1c5      	b.n	8004206 <ModemRx_Process+0x4ce>
				}
				case MODEM_ATTACH_GPRS:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 8003e7a:	4a96      	ldr	r2, [pc, #600]	; (80040d4 <ModemRx_Process+0x39c>)
 8003e7c:	4b92      	ldr	r3, [pc, #584]	; (80040c8 <ModemRx_Process+0x390>)
 8003e7e:	0011      	movs	r1, r2
 8003e80:	0018      	movs	r0, r3
 8003e82:	f7fe faff 	bl	8002484 <modem_check_resp>
 8003e86:	1e03      	subs	r3, r0, #0
 8003e88:	d00b      	beq.n	8003ea2 <ModemRx_Process+0x16a>
					{
						cmd_val=0;
 8003e8a:	4b90      	ldr	r3, [pc, #576]	; (80040cc <ModemRx_Process+0x394>)
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.gprs_attachment=1;
 8003e90:	4b92      	ldr	r3, [pc, #584]	; (80040dc <ModemRx_Process+0x3a4>)
 8003e92:	2249      	movs	r2, #73	; 0x49
 8003e94:	2101      	movs	r1, #1
 8003e96:	5499      	strb	r1, [r3, r2]
						Log_msg("GPRS attachment sucessfull\r\n");
 8003e98:	4b98      	ldr	r3, [pc, #608]	; (80040fc <ModemRx_Process+0x3c4>)
 8003e9a:	0018      	movs	r0, r3
 8003e9c:	f7ff ff1c 	bl	8003cd8 <Log_msg>
					else
					{
						modem_info_t.simcard_info.gprs_attachment=255;
						Log_msg("GPRS attachment Failed\r\n");
					}
					break;
 8003ea0:	e1b1      	b.n	8004206 <ModemRx_Process+0x4ce>
						modem_info_t.simcard_info.gprs_attachment=255;
 8003ea2:	4b8e      	ldr	r3, [pc, #568]	; (80040dc <ModemRx_Process+0x3a4>)
 8003ea4:	2249      	movs	r2, #73	; 0x49
 8003ea6:	21ff      	movs	r1, #255	; 0xff
 8003ea8:	5499      	strb	r1, [r3, r2]
						Log_msg("GPRS attachment Failed\r\n");
 8003eaa:	4b95      	ldr	r3, [pc, #596]	; (8004100 <ModemRx_Process+0x3c8>)
 8003eac:	0018      	movs	r0, r3
 8003eae:	f7ff ff13 	bl	8003cd8 <Log_msg>
					break;
 8003eb2:	e1a8      	b.n	8004206 <ModemRx_Process+0x4ce>
				}
				case MODEM_SET_PDP:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 8003eb4:	4a87      	ldr	r2, [pc, #540]	; (80040d4 <ModemRx_Process+0x39c>)
 8003eb6:	4b84      	ldr	r3, [pc, #528]	; (80040c8 <ModemRx_Process+0x390>)
 8003eb8:	0011      	movs	r1, r2
 8003eba:	0018      	movs	r0, r3
 8003ebc:	f7fe fae2 	bl	8002484 <modem_check_resp>
 8003ec0:	1e03      	subs	r3, r0, #0
 8003ec2:	d00b      	beq.n	8003edc <ModemRx_Process+0x1a4>
					{
						cmd_val=0;
 8003ec4:	4b81      	ldr	r3, [pc, #516]	; (80040cc <ModemRx_Process+0x394>)
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.pdp_status=1;
 8003eca:	4b84      	ldr	r3, [pc, #528]	; (80040dc <ModemRx_Process+0x3a4>)
 8003ecc:	2248      	movs	r2, #72	; 0x48
 8003ece:	2101      	movs	r1, #1
 8003ed0:	5499      	strb	r1, [r3, r2]
						Log_msg("PDP is set\r\n");
 8003ed2:	4b8c      	ldr	r3, [pc, #560]	; (8004104 <ModemRx_Process+0x3cc>)
 8003ed4:	0018      	movs	r0, r3
 8003ed6:	f7ff feff 	bl	8003cd8 <Log_msg>
					else
					{
						modem_info_t.simcard_info.pdp_status=255;
						Log_msg("PDP is Failed\r\n");
					}
					break;
 8003eda:	e194      	b.n	8004206 <ModemRx_Process+0x4ce>
						modem_info_t.simcard_info.pdp_status=255;
 8003edc:	4b7f      	ldr	r3, [pc, #508]	; (80040dc <ModemRx_Process+0x3a4>)
 8003ede:	2248      	movs	r2, #72	; 0x48
 8003ee0:	21ff      	movs	r1, #255	; 0xff
 8003ee2:	5499      	strb	r1, [r3, r2]
						Log_msg("PDP is Failed\r\n");
 8003ee4:	4b88      	ldr	r3, [pc, #544]	; (8004108 <ModemRx_Process+0x3d0>)
 8003ee6:	0018      	movs	r0, r3
 8003ee8:	f7ff fef6 	bl	8003cd8 <Log_msg>
					break;
 8003eec:	e18b      	b.n	8004206 <ModemRx_Process+0x4ce>
				}
				case MODEM_ACTIVATE_PDP:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 8003eee:	4a79      	ldr	r2, [pc, #484]	; (80040d4 <ModemRx_Process+0x39c>)
 8003ef0:	4b75      	ldr	r3, [pc, #468]	; (80040c8 <ModemRx_Process+0x390>)
 8003ef2:	0011      	movs	r1, r2
 8003ef4:	0018      	movs	r0, r3
 8003ef6:	f7fe fac5 	bl	8002484 <modem_check_resp>
 8003efa:	1e03      	subs	r3, r0, #0
 8003efc:	d00b      	beq.n	8003f16 <ModemRx_Process+0x1de>
					{
						cmd_val=0;
 8003efe:	4b73      	ldr	r3, [pc, #460]	; (80040cc <ModemRx_Process+0x394>)
 8003f00:	2200      	movs	r2, #0
 8003f02:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.pdp_active_status=1;
 8003f04:	4b75      	ldr	r3, [pc, #468]	; (80040dc <ModemRx_Process+0x3a4>)
 8003f06:	224a      	movs	r2, #74	; 0x4a
 8003f08:	2101      	movs	r1, #1
 8003f0a:	5499      	strb	r1, [r3, r2]
						Log_msg("PDP is active\r\n");
 8003f0c:	4b7f      	ldr	r3, [pc, #508]	; (800410c <ModemRx_Process+0x3d4>)
 8003f0e:	0018      	movs	r0, r3
 8003f10:	f7ff fee2 	bl	8003cd8 <Log_msg>
 8003f14:	e007      	b.n	8003f26 <ModemRx_Process+0x1ee>
					}
					else
					{
						modem_info_t.simcard_info.pdp_active_status=255;
 8003f16:	4b71      	ldr	r3, [pc, #452]	; (80040dc <ModemRx_Process+0x3a4>)
 8003f18:	224a      	movs	r2, #74	; 0x4a
 8003f1a:	21ff      	movs	r1, #255	; 0xff
 8003f1c:	5499      	strb	r1, [r3, r2]
						Log_msg("PDP is activation Failed\r\n");
 8003f1e:	4b7c      	ldr	r3, [pc, #496]	; (8004110 <ModemRx_Process+0x3d8>)
 8003f20:	0018      	movs	r0, r3
 8003f22:	f7ff fed9 	bl	8003cd8 <Log_msg>
					}
				}
				case MODEM_MQTT_VERSION_CFG:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 8003f26:	4a6b      	ldr	r2, [pc, #428]	; (80040d4 <ModemRx_Process+0x39c>)
 8003f28:	4b67      	ldr	r3, [pc, #412]	; (80040c8 <ModemRx_Process+0x390>)
 8003f2a:	0011      	movs	r1, r2
 8003f2c:	0018      	movs	r0, r3
 8003f2e:	f7fe faa9 	bl	8002484 <modem_check_resp>
 8003f32:	1e03      	subs	r3, r0, #0
 8003f34:	d100      	bne.n	8003f38 <ModemRx_Process+0x200>
 8003f36:	e157      	b.n	80041e8 <ModemRx_Process+0x4b0>
					{
						cmd_val=0;
 8003f38:	4b64      	ldr	r3, [pc, #400]	; (80040cc <ModemRx_Process+0x394>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	701a      	strb	r2, [r3, #0]
						Log_msg("MQTT Configutations Done\r\n");
 8003f3e:	4b75      	ldr	r3, [pc, #468]	; (8004114 <ModemRx_Process+0x3dc>)
 8003f40:	0018      	movs	r0, r3
 8003f42:	f7ff fec9 	bl	8003cd8 <Log_msg>
					}
					break;
 8003f46:	e14f      	b.n	80041e8 <ModemRx_Process+0x4b0>
				}
				case MODEM_MQTT_OPEN:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QMTOPEN"))
 8003f48:	4a73      	ldr	r2, [pc, #460]	; (8004118 <ModemRx_Process+0x3e0>)
 8003f4a:	4b5f      	ldr	r3, [pc, #380]	; (80040c8 <ModemRx_Process+0x390>)
 8003f4c:	0011      	movs	r1, r2
 8003f4e:	0018      	movs	r0, r3
 8003f50:	f7fe fa98 	bl	8002484 <modem_check_resp>
 8003f54:	1e03      	subs	r3, r0, #0
 8003f56:	d018      	beq.n	8003f8a <ModemRx_Process+0x252>
					{
						cmd_val=0;
 8003f58:	4b5c      	ldr	r3, [pc, #368]	; (80040cc <ModemRx_Process+0x394>)
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	701a      	strb	r2, [r3, #0]
						const char* p = (const char*)EC200u_Rx_Buff;
 8003f5e:	4b5a      	ldr	r3, [pc, #360]	; (80040c8 <ModemRx_Process+0x390>)
 8003f60:	617b      	str	r3, [r7, #20]
						modem_info_t.mqtt_info_t.mqtt_client_idx = modem_parse_number(&p);
 8003f62:	2414      	movs	r4, #20
 8003f64:	193b      	adds	r3, r7, r4
 8003f66:	0018      	movs	r0, r3
 8003f68:	f000 f9d2 	bl	8004310 <modem_parse_number>
 8003f6c:	0003      	movs	r3, r0
 8003f6e:	b2d9      	uxtb	r1, r3
 8003f70:	4b5a      	ldr	r3, [pc, #360]	; (80040dc <ModemRx_Process+0x3a4>)
 8003f72:	224c      	movs	r2, #76	; 0x4c
 8003f74:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_open_stat  = modem_parse_number(&p);
 8003f76:	193b      	adds	r3, r7, r4
 8003f78:	0018      	movs	r0, r3
 8003f7a:	f000 f9c9 	bl	8004310 <modem_parse_number>
 8003f7e:	0003      	movs	r3, r0
 8003f80:	b2d9      	uxtb	r1, r3
 8003f82:	4b56      	ldr	r3, [pc, #344]	; (80040dc <ModemRx_Process+0x3a4>)
 8003f84:	224b      	movs	r2, #75	; 0x4b
 8003f86:	5499      	strb	r1, [r3, r2]
					{
						Log_msg("Failed to open MQTT network for a client\r\n");
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
						modem_info_t.mqtt_info_t.mqtt_open_stat=255;
					}
					break;
 8003f88:	e130      	b.n	80041ec <ModemRx_Process+0x4b4>
					else if(modem_check_resp((const char*)EC200u_Rx_Buff, "ERROR"))
 8003f8a:	4a64      	ldr	r2, [pc, #400]	; (800411c <ModemRx_Process+0x3e4>)
 8003f8c:	4b4e      	ldr	r3, [pc, #312]	; (80040c8 <ModemRx_Process+0x390>)
 8003f8e:	0011      	movs	r1, r2
 8003f90:	0018      	movs	r0, r3
 8003f92:	f7fe fa77 	bl	8002484 <modem_check_resp>
 8003f96:	1e03      	subs	r3, r0, #0
 8003f98:	d100      	bne.n	8003f9c <ModemRx_Process+0x264>
 8003f9a:	e127      	b.n	80041ec <ModemRx_Process+0x4b4>
						Log_msg("Failed to open MQTT network for a client\r\n");
 8003f9c:	4b60      	ldr	r3, [pc, #384]	; (8004120 <ModemRx_Process+0x3e8>)
 8003f9e:	0018      	movs	r0, r3
 8003fa0:	f7ff fe9a 	bl	8003cd8 <Log_msg>
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
 8003fa4:	4b4d      	ldr	r3, [pc, #308]	; (80040dc <ModemRx_Process+0x3a4>)
 8003fa6:	224c      	movs	r2, #76	; 0x4c
 8003fa8:	21ff      	movs	r1, #255	; 0xff
 8003faa:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_open_stat=255;
 8003fac:	4b4b      	ldr	r3, [pc, #300]	; (80040dc <ModemRx_Process+0x3a4>)
 8003fae:	224b      	movs	r2, #75	; 0x4b
 8003fb0:	21ff      	movs	r1, #255	; 0xff
 8003fb2:	5499      	strb	r1, [r3, r2]
					break;
 8003fb4:	e11a      	b.n	80041ec <ModemRx_Process+0x4b4>
				}
				case MODEM_MQTT_CONN:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QMTCONN"))
 8003fb6:	4a5b      	ldr	r2, [pc, #364]	; (8004124 <ModemRx_Process+0x3ec>)
 8003fb8:	4b43      	ldr	r3, [pc, #268]	; (80040c8 <ModemRx_Process+0x390>)
 8003fba:	0011      	movs	r1, r2
 8003fbc:	0018      	movs	r0, r3
 8003fbe:	f7fe fa61 	bl	8002484 <modem_check_resp>
 8003fc2:	1e03      	subs	r3, r0, #0
 8003fc4:	d021      	beq.n	800400a <ModemRx_Process+0x2d2>
					{
						cmd_val=0;
 8003fc6:	4b41      	ldr	r3, [pc, #260]	; (80040cc <ModemRx_Process+0x394>)
 8003fc8:	2200      	movs	r2, #0
 8003fca:	701a      	strb	r2, [r3, #0]
						const char* p = (const char*)EC200u_Rx_Buff;
 8003fcc:	4b3e      	ldr	r3, [pc, #248]	; (80040c8 <ModemRx_Process+0x390>)
 8003fce:	613b      	str	r3, [r7, #16]
						modem_info_t.mqtt_info_t.mqtt_client_idx = modem_parse_number(&p);
 8003fd0:	2410      	movs	r4, #16
 8003fd2:	193b      	adds	r3, r7, r4
 8003fd4:	0018      	movs	r0, r3
 8003fd6:	f000 f99b 	bl	8004310 <modem_parse_number>
 8003fda:	0003      	movs	r3, r0
 8003fdc:	b2d9      	uxtb	r1, r3
 8003fde:	4b3f      	ldr	r3, [pc, #252]	; (80040dc <ModemRx_Process+0x3a4>)
 8003fe0:	224c      	movs	r2, #76	; 0x4c
 8003fe2:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_stat  = modem_parse_number(&p);
 8003fe4:	193b      	adds	r3, r7, r4
 8003fe6:	0018      	movs	r0, r3
 8003fe8:	f000 f992 	bl	8004310 <modem_parse_number>
 8003fec:	0003      	movs	r3, r0
 8003fee:	b2d9      	uxtb	r1, r3
 8003ff0:	4b3a      	ldr	r3, [pc, #232]	; (80040dc <ModemRx_Process+0x3a4>)
 8003ff2:	224d      	movs	r2, #77	; 0x4d
 8003ff4:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_ret_code  = modem_parse_number(&p);
 8003ff6:	193b      	adds	r3, r7, r4
 8003ff8:	0018      	movs	r0, r3
 8003ffa:	f000 f989 	bl	8004310 <modem_parse_number>
 8003ffe:	0003      	movs	r3, r0
 8004000:	b2d9      	uxtb	r1, r3
 8004002:	4b36      	ldr	r3, [pc, #216]	; (80040dc <ModemRx_Process+0x3a4>)
 8004004:	224e      	movs	r2, #78	; 0x4e
 8004006:	5499      	strb	r1, [r3, r2]
						Log_msg("Failed to connect to a MQTT client\r\n");
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
						modem_info_t.mqtt_info_t.mqtt_conn_stat=255;
						modem_info_t.mqtt_info_t.mqtt_conn_ret_code=255;
					}
					break;
 8004008:	e0f2      	b.n	80041f0 <ModemRx_Process+0x4b8>
					else if(modem_check_resp((const char*)EC200u_Rx_Buff, "ERROR"))
 800400a:	4a44      	ldr	r2, [pc, #272]	; (800411c <ModemRx_Process+0x3e4>)
 800400c:	4b2e      	ldr	r3, [pc, #184]	; (80040c8 <ModemRx_Process+0x390>)
 800400e:	0011      	movs	r1, r2
 8004010:	0018      	movs	r0, r3
 8004012:	f7fe fa37 	bl	8002484 <modem_check_resp>
 8004016:	1e03      	subs	r3, r0, #0
 8004018:	d100      	bne.n	800401c <ModemRx_Process+0x2e4>
 800401a:	e0e9      	b.n	80041f0 <ModemRx_Process+0x4b8>
						Log_msg("Failed to connect to a MQTT client\r\n");
 800401c:	4b42      	ldr	r3, [pc, #264]	; (8004128 <ModemRx_Process+0x3f0>)
 800401e:	0018      	movs	r0, r3
 8004020:	f7ff fe5a 	bl	8003cd8 <Log_msg>
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
 8004024:	4b2d      	ldr	r3, [pc, #180]	; (80040dc <ModemRx_Process+0x3a4>)
 8004026:	224c      	movs	r2, #76	; 0x4c
 8004028:	21ff      	movs	r1, #255	; 0xff
 800402a:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_stat=255;
 800402c:	4b2b      	ldr	r3, [pc, #172]	; (80040dc <ModemRx_Process+0x3a4>)
 800402e:	224d      	movs	r2, #77	; 0x4d
 8004030:	21ff      	movs	r1, #255	; 0xff
 8004032:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_ret_code=255;
 8004034:	4b29      	ldr	r3, [pc, #164]	; (80040dc <ModemRx_Process+0x3a4>)
 8004036:	224e      	movs	r2, #78	; 0x4e
 8004038:	21ff      	movs	r1, #255	; 0xff
 800403a:	5499      	strb	r1, [r3, r2]
					break;
 800403c:	e0d8      	b.n	80041f0 <ModemRx_Process+0x4b8>
				}
				case MODEM_MQTT_SUBSCRIBE:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "ERROR"))
 800403e:	4a37      	ldr	r2, [pc, #220]	; (800411c <ModemRx_Process+0x3e4>)
 8004040:	4b21      	ldr	r3, [pc, #132]	; (80040c8 <ModemRx_Process+0x390>)
 8004042:	0011      	movs	r1, r2
 8004044:	0018      	movs	r0, r3
 8004046:	f7fe fa1d 	bl	8002484 <modem_check_resp>
 800404a:	1e03      	subs	r3, r0, #0
 800404c:	d100      	bne.n	8004050 <ModemRx_Process+0x318>
 800404e:	e0d1      	b.n	80041f4 <ModemRx_Process+0x4bc>
					{
						modem_info_t.mqtt_info_t.mqtt_subs_stat=255;
 8004050:	4b22      	ldr	r3, [pc, #136]	; (80040dc <ModemRx_Process+0x3a4>)
 8004052:	224f      	movs	r2, #79	; 0x4f
 8004054:	21ff      	movs	r1, #255	; 0xff
 8004056:	5499      	strb	r1, [r3, r2]
						Log_msg("Failed To subscribe to a topic\r\n");
 8004058:	4b34      	ldr	r3, [pc, #208]	; (800412c <ModemRx_Process+0x3f4>)
 800405a:	0018      	movs	r0, r3
 800405c:	f7ff fe3c 	bl	8003cd8 <Log_msg>
					}
					break;
 8004060:	e0c8      	b.n	80041f4 <ModemRx_Process+0x4bc>
//					}
//					break;
//				}
				case MODEM_GPS_GET_CURR_LOCATION:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QGPSLOC:"))
 8004062:	4a33      	ldr	r2, [pc, #204]	; (8004130 <ModemRx_Process+0x3f8>)
 8004064:	4b18      	ldr	r3, [pc, #96]	; (80040c8 <ModemRx_Process+0x390>)
 8004066:	0011      	movs	r1, r2
 8004068:	0018      	movs	r0, r3
 800406a:	f7fe fa0b 	bl	8002484 <modem_check_resp>
 800406e:	1e03      	subs	r3, r0, #0
 8004070:	d100      	bne.n	8004074 <ModemRx_Process+0x33c>
 8004072:	e0c1      	b.n	80041f8 <ModemRx_Process+0x4c0>
					{
						modem_parse_gps_location((const char*)EC200u_Rx_Buff, &GpsInfo_t);
 8004074:	4a2f      	ldr	r2, [pc, #188]	; (8004134 <ModemRx_Process+0x3fc>)
 8004076:	4b14      	ldr	r3, [pc, #80]	; (80040c8 <ModemRx_Process+0x390>)
 8004078:	0011      	movs	r1, r2
 800407a:	0018      	movs	r0, r3
 800407c:	f7fe ff1c 	bl	8002eb8 <modem_parse_gps_location>
					}
					break;
 8004080:	e0ba      	b.n	80041f8 <ModemRx_Process+0x4c0>
				}
				// ========== Parse BLE responses
				case MODEM_TURN_ON_BLE:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK")) // Need to handle +CME ERROR:4 (already turned on)
 8004082:	4a14      	ldr	r2, [pc, #80]	; (80040d4 <ModemRx_Process+0x39c>)
 8004084:	4b10      	ldr	r3, [pc, #64]	; (80040c8 <ModemRx_Process+0x390>)
 8004086:	0011      	movs	r1, r2
 8004088:	0018      	movs	r0, r3
 800408a:	f7fe f9fb 	bl	8002484 <modem_check_resp>
 800408e:	1e03      	subs	r3, r0, #0
 8004090:	d100      	bne.n	8004094 <ModemRx_Process+0x35c>
 8004092:	e0b3      	b.n	80041fc <ModemRx_Process+0x4c4>
					{
						cmd_val=0;
 8004094:	4b0d      	ldr	r3, [pc, #52]	; (80040cc <ModemRx_Process+0x394>)
 8004096:	2200      	movs	r2, #0
 8004098:	701a      	strb	r2, [r3, #0]
						Ble_info_t.power=1;
 800409a:	4b27      	ldr	r3, [pc, #156]	; (8004138 <ModemRx_Process+0x400>)
 800409c:	2224      	movs	r2, #36	; 0x24
 800409e:	2101      	movs	r1, #1
 80040a0:	5499      	strb	r1, [r3, r2]
					}
					break;
 80040a2:	e0ab      	b.n	80041fc <ModemRx_Process+0x4c4>
				}
				case MODEM_TURN_OFF_BLE:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK")) // Need to handle +CME ERROR:4 (already turned off)
 80040a4:	4a0b      	ldr	r2, [pc, #44]	; (80040d4 <ModemRx_Process+0x39c>)
 80040a6:	4b08      	ldr	r3, [pc, #32]	; (80040c8 <ModemRx_Process+0x390>)
 80040a8:	0011      	movs	r1, r2
 80040aa:	0018      	movs	r0, r3
 80040ac:	f7fe f9ea 	bl	8002484 <modem_check_resp>
 80040b0:	1e03      	subs	r3, r0, #0
 80040b2:	d100      	bne.n	80040b6 <ModemRx_Process+0x37e>
 80040b4:	e0a4      	b.n	8004200 <ModemRx_Process+0x4c8>
					{
						cmd_val=0;
 80040b6:	4b05      	ldr	r3, [pc, #20]	; (80040cc <ModemRx_Process+0x394>)
 80040b8:	2200      	movs	r2, #0
 80040ba:	701a      	strb	r2, [r3, #0]
						Ble_info_t.power=0;
 80040bc:	4b1e      	ldr	r3, [pc, #120]	; (8004138 <ModemRx_Process+0x400>)
 80040be:	2224      	movs	r2, #36	; 0x24
 80040c0:	2100      	movs	r1, #0
 80040c2:	5499      	strb	r1, [r3, r2]
					}
					break;
 80040c4:	e09c      	b.n	8004200 <ModemRx_Process+0x4c8>
 80040c6:	46c0      	nop			; (mov r8, r8)
 80040c8:	200009cc 	.word	0x200009cc
 80040cc:	200002a6 	.word	0x200002a6
 80040d0:	080111c0 	.word	0x080111c0
 80040d4:	08010df4 	.word	0x08010df4
 80040d8:	2000083d 	.word	0x2000083d
 80040dc:	200007ec 	.word	0x200007ec
 80040e0:	20000800 	.word	0x20000800
 80040e4:	20000819 	.word	0x20000819
 80040e8:	08010df8 	.word	0x08010df8
 80040ec:	08010e00 	.word	0x08010e00
 80040f0:	08010e14 	.word	0x08010e14
 80040f4:	08010e2c 	.word	0x08010e2c
 80040f8:	08010e44 	.word	0x08010e44
 80040fc:	08010e64 	.word	0x08010e64
 8004100:	08010e84 	.word	0x08010e84
 8004104:	08010ea0 	.word	0x08010ea0
 8004108:	08010eb0 	.word	0x08010eb0
 800410c:	08010ec0 	.word	0x08010ec0
 8004110:	08010ed0 	.word	0x08010ed0
 8004114:	08010eec 	.word	0x08010eec
 8004118:	08010f08 	.word	0x08010f08
 800411c:	08010f14 	.word	0x08010f14
 8004120:	08010f1c 	.word	0x08010f1c
 8004124:	08010f48 	.word	0x08010f48
 8004128:	08010f54 	.word	0x08010f54
 800412c:	08010f7c 	.word	0x08010f7c
 8004130:	08010fa0 	.word	0x08010fa0
 8004134:	20000208 	.word	0x20000208
 8004138:	200004d8 	.word	0x200004d8
				}
				default:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QMTSTAT"))
 800413c:	4a34      	ldr	r2, [pc, #208]	; (8004210 <ModemRx_Process+0x4d8>)
 800413e:	4b35      	ldr	r3, [pc, #212]	; (8004214 <ModemRx_Process+0x4dc>)
 8004140:	0011      	movs	r1, r2
 8004142:	0018      	movs	r0, r3
 8004144:	f7fe f99e 	bl	8002484 <modem_check_resp>
 8004148:	1e03      	subs	r3, r0, #0
 800414a:	d014      	beq.n	8004176 <ModemRx_Process+0x43e>
					{
						const char* p = (const char*)EC200u_Rx_Buff;
 800414c:	4b31      	ldr	r3, [pc, #196]	; (8004214 <ModemRx_Process+0x4dc>)
 800414e:	60fb      	str	r3, [r7, #12]
						modem_info_t.mqtt_info_t.mqtt_client_idx = modem_parse_number(&p);
 8004150:	240c      	movs	r4, #12
 8004152:	193b      	adds	r3, r7, r4
 8004154:	0018      	movs	r0, r3
 8004156:	f000 f8db 	bl	8004310 <modem_parse_number>
 800415a:	0003      	movs	r3, r0
 800415c:	b2d9      	uxtb	r1, r3
 800415e:	4b2e      	ldr	r3, [pc, #184]	; (8004218 <ModemRx_Process+0x4e0>)
 8004160:	224c      	movs	r2, #76	; 0x4c
 8004162:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_urc_error=modem_parse_number(&p);
 8004164:	193b      	adds	r3, r7, r4
 8004166:	0018      	movs	r0, r3
 8004168:	f000 f8d2 	bl	8004310 <modem_parse_number>
 800416c:	0003      	movs	r3, r0
 800416e:	b2d9      	uxtb	r1, r3
 8004170:	4b29      	ldr	r3, [pc, #164]	; (8004218 <ModemRx_Process+0x4e0>)
 8004172:	2250      	movs	r2, #80	; 0x50
 8004174:	5499      	strb	r1, [r3, r2]
						    }
						}

					}
					*/
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QBTGATSCON"))
 8004176:	4a29      	ldr	r2, [pc, #164]	; (800421c <ModemRx_Process+0x4e4>)
 8004178:	4b26      	ldr	r3, [pc, #152]	; (8004214 <ModemRx_Process+0x4dc>)
 800417a:	0011      	movs	r1, r2
 800417c:	0018      	movs	r0, r3
 800417e:	f7fe f981 	bl	8002484 <modem_check_resp>
 8004182:	1e03      	subs	r3, r0, #0
 8004184:	d00b      	beq.n	800419e <ModemRx_Process+0x466>
					{
						Ble_info_t.conn_state=1;
 8004186:	4b26      	ldr	r3, [pc, #152]	; (8004220 <ModemRx_Process+0x4e8>)
 8004188:	2201      	movs	r2, #1
 800418a:	61da      	str	r2, [r3, #28]
						clear_buff=1;
 800418c:	4b25      	ldr	r3, [pc, #148]	; (8004224 <ModemRx_Process+0x4ec>)
 800418e:	2201      	movs	r2, #1
 8004190:	701a      	strb	r2, [r3, #0]
						memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
 8004192:	4b20      	ldr	r3, [pc, #128]	; (8004214 <ModemRx_Process+0x4dc>)
 8004194:	22c8      	movs	r2, #200	; 0xc8
 8004196:	2100      	movs	r1, #0
 8004198:	0018      	movs	r0, r3
 800419a:	f009 fe09 	bl	800ddb0 <memset>
					}
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QBTGATSDCON"))
 800419e:	4a22      	ldr	r2, [pc, #136]	; (8004228 <ModemRx_Process+0x4f0>)
 80041a0:	4b1c      	ldr	r3, [pc, #112]	; (8004214 <ModemRx_Process+0x4dc>)
 80041a2:	0011      	movs	r1, r2
 80041a4:	0018      	movs	r0, r3
 80041a6:	f7fe f96d 	bl	8002484 <modem_check_resp>
 80041aa:	1e03      	subs	r3, r0, #0
 80041ac:	d00b      	beq.n	80041c6 <ModemRx_Process+0x48e>
					{
						clear_buff=1;
 80041ae:	4b1d      	ldr	r3, [pc, #116]	; (8004224 <ModemRx_Process+0x4ec>)
 80041b0:	2201      	movs	r2, #1
 80041b2:	701a      	strb	r2, [r3, #0]
						Ble_info_t.conn_state=0;
 80041b4:	4b1a      	ldr	r3, [pc, #104]	; (8004220 <ModemRx_Process+0x4e8>)
 80041b6:	2200      	movs	r2, #0
 80041b8:	61da      	str	r2, [r3, #28]
						memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
 80041ba:	4b16      	ldr	r3, [pc, #88]	; (8004214 <ModemRx_Process+0x4dc>)
 80041bc:	22c8      	movs	r2, #200	; 0xc8
 80041be:	2100      	movs	r1, #0
 80041c0:	0018      	movs	r0, r3
 80041c2:	f009 fdf5 	bl	800ddb0 <memset>
					}
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QBTLEVALDATA"))
 80041c6:	4a19      	ldr	r2, [pc, #100]	; (800422c <ModemRx_Process+0x4f4>)
 80041c8:	4b12      	ldr	r3, [pc, #72]	; (8004214 <ModemRx_Process+0x4dc>)
 80041ca:	0011      	movs	r1, r2
 80041cc:	0018      	movs	r0, r3
 80041ce:	f7fe f959 	bl	8002484 <modem_check_resp>
 80041d2:	1e03      	subs	r3, r0, #0
 80041d4:	d016      	beq.n	8004204 <ModemRx_Process+0x4cc>
					{
						modem_parse_ble_write_data((char *)EC200u_Rx_Buff, &BLE_Write_data);
 80041d6:	4a16      	ldr	r2, [pc, #88]	; (8004230 <ModemRx_Process+0x4f8>)
 80041d8:	4b0e      	ldr	r3, [pc, #56]	; (8004214 <ModemRx_Process+0x4dc>)
 80041da:	0011      	movs	r1, r2
 80041dc:	0018      	movs	r0, r3
 80041de:	f7ff fbf9 	bl	80039d4 <modem_parse_ble_write_data>
					}
					break;
 80041e2:	e00f      	b.n	8004204 <ModemRx_Process+0x4cc>
					break;
 80041e4:	46c0      	nop			; (mov r8, r8)
 80041e6:	e00e      	b.n	8004206 <ModemRx_Process+0x4ce>
					break;
 80041e8:	46c0      	nop			; (mov r8, r8)
 80041ea:	e00c      	b.n	8004206 <ModemRx_Process+0x4ce>
					break;
 80041ec:	46c0      	nop			; (mov r8, r8)
 80041ee:	e00a      	b.n	8004206 <ModemRx_Process+0x4ce>
					break;
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	e008      	b.n	8004206 <ModemRx_Process+0x4ce>
					break;
 80041f4:	46c0      	nop			; (mov r8, r8)
 80041f6:	e006      	b.n	8004206 <ModemRx_Process+0x4ce>
					break;
 80041f8:	46c0      	nop			; (mov r8, r8)
 80041fa:	e004      	b.n	8004206 <ModemRx_Process+0x4ce>
					break;
 80041fc:	46c0      	nop			; (mov r8, r8)
 80041fe:	e002      	b.n	8004206 <ModemRx_Process+0x4ce>
					break;
 8004200:	46c0      	nop			; (mov r8, r8)
 8004202:	e000      	b.n	8004206 <ModemRx_Process+0x4ce>
					break;
 8004204:	46c0      	nop			; (mov r8, r8)
				}
			}

		}
		osDelay(10);
 8004206:	200a      	movs	r0, #10
 8004208:	f005 fd0b 	bl	8009c22 <osDelay>
		ulNotifiedValue=ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 800420c:	e598      	b.n	8003d40 <ModemRx_Process+0x8>
 800420e:	46c0      	nop			; (mov r8, r8)
 8004210:	08010fac 	.word	0x08010fac
 8004214:	200009cc 	.word	0x200009cc
 8004218:	200007ec 	.word	0x200007ec
 800421c:	08010fb8 	.word	0x08010fb8
 8004220:	200004d8 	.word	0x200004d8
 8004224:	200007e7 	.word	0x200007e7
 8004228:	08010fc4 	.word	0x08010fc4
 800422c:	08010fd4 	.word	0x08010fd4
 8004230:	20000840 	.word	0x20000840

08004234 <modem_parse_string>:
 * \param[in]       dst: Destination buffer to copy revision into
 * \param[in]       dst_len: Size of destination buffer, including null terminator
 * \return          `1` on success, `0` otherwise
 */
uint8_t modem_parse_string(const char** src, char* dst, size_t dst_len)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b088      	sub	sp, #32
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
    const char* p = *src;
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	61fb      	str	r3, [r7, #28]
    const char* rev_start = NULL;
 8004246:	2300      	movs	r3, #0
 8004248:	61bb      	str	r3, [r7, #24]
    size_t i = 0;
 800424a:	2300      	movs	r3, #0
 800424c:	617b      	str	r3, [r7, #20]

    // Scan for "Revision: "
    while (*p != '\0') {
 800424e:	e054      	b.n	80042fa <modem_parse_string+0xc6>
        if (strncmp(p, "Revision:", 9) == 0) {
 8004250:	492e      	ldr	r1, [pc, #184]	; (800430c <modem_parse_string+0xd8>)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2209      	movs	r2, #9
 8004256:	0018      	movs	r0, r3
 8004258:	f009 fdc0 	bl	800dddc <strncmp>
 800425c:	1e03      	subs	r3, r0, #0
 800425e:	d13d      	bne.n	80042dc <modem_parse_string+0xa8>
            rev_start = p + 9;
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	3309      	adds	r3, #9
 8004264:	61bb      	str	r3, [r7, #24]

            // Skip leading whitespace
            while (*rev_start == ' ') {
 8004266:	e002      	b.n	800426e <modem_parse_string+0x3a>
                ++rev_start;
 8004268:	69bb      	ldr	r3, [r7, #24]
 800426a:	3301      	adds	r3, #1
 800426c:	61bb      	str	r3, [r7, #24]
            while (*rev_start == ' ') {
 800426e:	69bb      	ldr	r3, [r7, #24]
 8004270:	781b      	ldrb	r3, [r3, #0]
 8004272:	2b20      	cmp	r3, #32
 8004274:	d0f8      	beq.n	8004268 <modem_parse_string+0x34>
            }

            // Copy up to newline or buffer limit
            if (dst != NULL && dst_len > 0) {
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	2b00      	cmp	r3, #0
 800427a:	d027      	beq.n	80042cc <modem_parse_string+0x98>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d024      	beq.n	80042cc <modem_parse_string+0x98>
                --dst_len;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	3b01      	subs	r3, #1
 8004286:	607b      	str	r3, [r7, #4]
                while (*rev_start != '\0' && *rev_start != '\r' && *rev_start != '\n') {
 8004288:	e00d      	b.n	80042a6 <modem_parse_string+0x72>
                    if (i < dst_len) {
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	429a      	cmp	r2, r3
 8004290:	d216      	bcs.n	80042c0 <modem_parse_string+0x8c>
                        dst[i++] = *rev_start++;
 8004292:	69bb      	ldr	r3, [r7, #24]
 8004294:	1c5a      	adds	r2, r3, #1
 8004296:	61ba      	str	r2, [r7, #24]
 8004298:	697a      	ldr	r2, [r7, #20]
 800429a:	1c51      	adds	r1, r2, #1
 800429c:	6179      	str	r1, [r7, #20]
 800429e:	68b9      	ldr	r1, [r7, #8]
 80042a0:	188a      	adds	r2, r1, r2
 80042a2:	781b      	ldrb	r3, [r3, #0]
 80042a4:	7013      	strb	r3, [r2, #0]
                while (*rev_start != '\0' && *rev_start != '\r' && *rev_start != '\n') {
 80042a6:	69bb      	ldr	r3, [r7, #24]
 80042a8:	781b      	ldrb	r3, [r3, #0]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d009      	beq.n	80042c2 <modem_parse_string+0x8e>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	781b      	ldrb	r3, [r3, #0]
 80042b2:	2b0d      	cmp	r3, #13
 80042b4:	d005      	beq.n	80042c2 <modem_parse_string+0x8e>
 80042b6:	69bb      	ldr	r3, [r7, #24]
 80042b8:	781b      	ldrb	r3, [r3, #0]
 80042ba:	2b0a      	cmp	r3, #10
 80042bc:	d1e5      	bne.n	800428a <modem_parse_string+0x56>
 80042be:	e000      	b.n	80042c2 <modem_parse_string+0x8e>
                    } else {
                        break;
 80042c0:	46c0      	nop			; (mov r8, r8)
                    }
                }
                dst[i] = '\0';
 80042c2:	68ba      	ldr	r2, [r7, #8]
 80042c4:	697b      	ldr	r3, [r7, #20]
 80042c6:	18d3      	adds	r3, r2, r3
 80042c8:	2200      	movs	r2, #0
 80042ca:	701a      	strb	r2, [r3, #0]
            }

            *src = p;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	69fa      	ldr	r2, [r7, #28]
 80042d0:	601a      	str	r2, [r3, #0]
            return 1;
 80042d2:	2301      	movs	r3, #1
 80042d4:	e016      	b.n	8004304 <modem_parse_string+0xd0>
        }

        // Move to next line
        while (*p != '\0' && *p != '\n') {
            ++p;
 80042d6:	69fb      	ldr	r3, [r7, #28]
 80042d8:	3301      	adds	r3, #1
 80042da:	61fb      	str	r3, [r7, #28]
        while (*p != '\0' && *p != '\n') {
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d003      	beq.n	80042ec <modem_parse_string+0xb8>
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	781b      	ldrb	r3, [r3, #0]
 80042e8:	2b0a      	cmp	r3, #10
 80042ea:	d1f4      	bne.n	80042d6 <modem_parse_string+0xa2>
        }
        if (*p == '\n') {
 80042ec:	69fb      	ldr	r3, [r7, #28]
 80042ee:	781b      	ldrb	r3, [r3, #0]
 80042f0:	2b0a      	cmp	r3, #10
 80042f2:	d102      	bne.n	80042fa <modem_parse_string+0xc6>
            ++p;
 80042f4:	69fb      	ldr	r3, [r7, #28]
 80042f6:	3301      	adds	r3, #1
 80042f8:	61fb      	str	r3, [r7, #28]
    while (*p != '\0') {
 80042fa:	69fb      	ldr	r3, [r7, #28]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1a6      	bne.n	8004250 <modem_parse_string+0x1c>
        }
    }

    return 0; // Revision not found
 8004302:	2300      	movs	r3, #0
}
 8004304:	0018      	movs	r0, r3
 8004306:	46bd      	mov	sp, r7
 8004308:	b008      	add	sp, #32
 800430a:	bd80      	pop	{r7, pc}
 800430c:	08010fe4 	.word	0x08010fe4

08004310 <modem_parse_number>:
int32_t modem_parse_number(const char** str)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
    int32_t val = 0;
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
    uint8_t minus = 0;
 800431c:	2313      	movs	r3, #19
 800431e:	18fb      	adds	r3, r7, r3
 8004320:	2200      	movs	r2, #0
 8004322:	701a      	strb	r2, [r3, #0]
    const char* p = *str;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	60fb      	str	r3, [r7, #12]

    // Skip until we find a digit or minus sign
    while (*p && !(CHAR_IS_NUM(*p) || *p == '-')) {
 800432a:	e002      	b.n	8004332 <modem_parse_number+0x22>
        ++p;
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	3301      	adds	r3, #1
 8004330:	60fb      	str	r3, [r7, #12]
    while (*p && !(CHAR_IS_NUM(*p) || *p == '-')) {
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	781b      	ldrb	r3, [r3, #0]
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00b      	beq.n	8004352 <modem_parse_number+0x42>
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	781b      	ldrb	r3, [r3, #0]
 800433e:	2b2f      	cmp	r3, #47	; 0x2f
 8004340:	d903      	bls.n	800434a <modem_parse_number+0x3a>
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b39      	cmp	r3, #57	; 0x39
 8004348:	d903      	bls.n	8004352 <modem_parse_number+0x42>
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	781b      	ldrb	r3, [r3, #0]
 800434e:	2b2d      	cmp	r3, #45	; 0x2d
 8004350:	d1ec      	bne.n	800432c <modem_parse_number+0x1c>
    }

    // Handle negative sign if present
    if (*p == '-') {
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	781b      	ldrb	r3, [r3, #0]
 8004356:	2b2d      	cmp	r3, #45	; 0x2d
 8004358:	d115      	bne.n	8004386 <modem_parse_number+0x76>
        minus = 1;
 800435a:	2313      	movs	r3, #19
 800435c:	18fb      	adds	r3, r7, r3
 800435e:	2201      	movs	r2, #1
 8004360:	701a      	strb	r2, [r3, #0]
        ++p;
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3301      	adds	r3, #1
 8004366:	60fb      	str	r3, [r7, #12]
    }

    // Parse the number
    while (CHAR_IS_NUM(*p)) {
 8004368:	e00d      	b.n	8004386 <modem_parse_number+0x76>
        val = val * 10 + CHAR_TO_NUM(*p);
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	0013      	movs	r3, r2
 800436e:	009b      	lsls	r3, r3, #2
 8004370:	189b      	adds	r3, r3, r2
 8004372:	005b      	lsls	r3, r3, #1
 8004374:	001a      	movs	r2, r3
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	781b      	ldrb	r3, [r3, #0]
 800437a:	3b30      	subs	r3, #48	; 0x30
 800437c:	18d3      	adds	r3, r2, r3
 800437e:	617b      	str	r3, [r7, #20]
        ++p;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	3301      	adds	r3, #1
 8004384:	60fb      	str	r3, [r7, #12]
    while (CHAR_IS_NUM(*p)) {
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	781b      	ldrb	r3, [r3, #0]
 800438a:	2b2f      	cmp	r3, #47	; 0x2f
 800438c:	d903      	bls.n	8004396 <modem_parse_number+0x86>
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	781b      	ldrb	r3, [r3, #0]
 8004392:	2b39      	cmp	r3, #57	; 0x39
 8004394:	d9e9      	bls.n	800436a <modem_parse_number+0x5a>
    }

    *str = p; // Save updated pointer
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	68fa      	ldr	r2, [r7, #12]
 800439a:	601a      	str	r2, [r3, #0]
    return minus ? -val : val;
 800439c:	2313      	movs	r3, #19
 800439e:	18fb      	adds	r3, r7, r3
 80043a0:	781b      	ldrb	r3, [r3, #0]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d002      	beq.n	80043ac <modem_parse_number+0x9c>
 80043a6:	697b      	ldr	r3, [r7, #20]
 80043a8:	425b      	negs	r3, r3
 80043aa:	e000      	b.n	80043ae <modem_parse_number+0x9e>
 80043ac:	697b      	ldr	r3, [r7, #20]
}
 80043ae:	0018      	movs	r0, r3
 80043b0:	46bd      	mov	sp, r7
 80043b2:	b006      	add	sp, #24
 80043b4:	bd80      	pop	{r7, pc}

080043b6 <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80043b6:	b580      	push	{r7, lr}
 80043b8:	b084      	sub	sp, #16
 80043ba:	af00      	add	r7, sp, #0
 80043bc:	6078      	str	r0, [r7, #4]
 80043be:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80043c0:	2300      	movs	r3, #0
 80043c2:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80043c4:	2300      	movs	r3, #0
 80043c6:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d101      	bne.n	80043d2 <cJSON_strdup+0x1c>
    {
        return NULL;
 80043ce:	2300      	movs	r3, #0
 80043d0:	e019      	b.n	8004406 <cJSON_strdup+0x50>
    }

    length = strlen((const char*)string) + sizeof("");
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	0018      	movs	r0, r3
 80043d6:	f7fb fea1 	bl	800011c <strlen>
 80043da:	0003      	movs	r3, r0
 80043dc:	3301      	adds	r3, #1
 80043de:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68fa      	ldr	r2, [r7, #12]
 80043e6:	0010      	movs	r0, r2
 80043e8:	4798      	blx	r3
 80043ea:	0003      	movs	r3, r0
 80043ec:	60bb      	str	r3, [r7, #8]
    if (copy == NULL)
 80043ee:	68bb      	ldr	r3, [r7, #8]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d101      	bne.n	80043f8 <cJSON_strdup+0x42>
    {
        return NULL;
 80043f4:	2300      	movs	r3, #0
 80043f6:	e006      	b.n	8004406 <cJSON_strdup+0x50>
    }
    memcpy(copy, string, length);
 80043f8:	68fa      	ldr	r2, [r7, #12]
 80043fa:	6879      	ldr	r1, [r7, #4]
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	0018      	movs	r0, r3
 8004400:	f009 fe30 	bl	800e064 <memcpy>

    return copy;
 8004404:	68bb      	ldr	r3, [r7, #8]
}
 8004406:	0018      	movs	r0, r3
 8004408:	46bd      	mov	sp, r7
 800440a:	b004      	add	sp, #16
 800440c:	bd80      	pop	{r7, pc}

0800440e <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 800440e:	b580      	push	{r7, lr}
 8004410:	b084      	sub	sp, #16
 8004412:	af00      	add	r7, sp, #0
 8004414:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2028      	movs	r0, #40	; 0x28
 800441c:	4798      	blx	r3
 800441e:	0003      	movs	r3, r0
 8004420:	60fb      	str	r3, [r7, #12]
    if (node)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d005      	beq.n	8004434 <cJSON_New_Item+0x26>
    {
        memset(node, '\0', sizeof(cJSON));
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	2228      	movs	r2, #40	; 0x28
 800442c:	2100      	movs	r1, #0
 800442e:	0018      	movs	r0, r3
 8004430:	f009 fcbe 	bl	800ddb0 <memset>
    }

    return node;
 8004434:	68fb      	ldr	r3, [r7, #12]
}
 8004436:	0018      	movs	r0, r3
 8004438:	46bd      	mov	sp, r7
 800443a:	b004      	add	sp, #16
 800443c:	bd80      	pop	{r7, pc}
	...

08004440 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b084      	sub	sp, #16
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8004448:	2300      	movs	r3, #0
 800444a:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 800444c:	e038      	b.n	80044c0 <cJSON_Delete+0x80>
    {
        next = item->next;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	68da      	ldr	r2, [r3, #12]
 8004458:	2380      	movs	r3, #128	; 0x80
 800445a:	005b      	lsls	r3, r3, #1
 800445c:	4013      	ands	r3, r2
 800445e:	d108      	bne.n	8004472 <cJSON_Delete+0x32>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d004      	beq.n	8004472 <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	689b      	ldr	r3, [r3, #8]
 800446c:	0018      	movs	r0, r3
 800446e:	f7ff ffe7 	bl	8004440 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68da      	ldr	r2, [r3, #12]
 8004476:	2380      	movs	r3, #128	; 0x80
 8004478:	005b      	lsls	r3, r3, #1
 800447a:	4013      	ands	r3, r2
 800447c:	d109      	bne.n	8004492 <cJSON_Delete+0x52>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d005      	beq.n	8004492 <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <cJSON_Delete+0x90>)
 8004488:	685a      	ldr	r2, [r3, #4]
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	691b      	ldr	r3, [r3, #16]
 800448e:	0018      	movs	r0, r3
 8004490:	4790      	blx	r2
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	68da      	ldr	r2, [r3, #12]
 8004496:	2380      	movs	r3, #128	; 0x80
 8004498:	009b      	lsls	r3, r3, #2
 800449a:	4013      	ands	r3, r2
 800449c:	d109      	bne.n	80044b2 <cJSON_Delete+0x72>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a1b      	ldr	r3, [r3, #32]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d005      	beq.n	80044b2 <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80044a6:	4b0a      	ldr	r3, [pc, #40]	; (80044d0 <cJSON_Delete+0x90>)
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	6a1b      	ldr	r3, [r3, #32]
 80044ae:	0018      	movs	r0, r3
 80044b0:	4790      	blx	r2
        }
        global_hooks.deallocate(item);
 80044b2:	4b07      	ldr	r3, [pc, #28]	; (80044d0 <cJSON_Delete+0x90>)
 80044b4:	685b      	ldr	r3, [r3, #4]
 80044b6:	687a      	ldr	r2, [r7, #4]
 80044b8:	0010      	movs	r0, r2
 80044ba:	4798      	blx	r3
        item = next;
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d1c3      	bne.n	800444e <cJSON_Delete+0xe>
    }
}
 80044c6:	46c0      	nop			; (mov r8, r8)
 80044c8:	46c0      	nop			; (mov r8, r8)
 80044ca:	46bd      	mov	sp, r7
 80044cc:	b004      	add	sp, #16
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	20000000 	.word	0x20000000

080044d4 <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80044d8:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80044da:	0018      	movs	r0, r3
 80044dc:	46bd      	mov	sp, r7
 80044de:	bd80      	pop	{r7, pc}

080044e0 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80044e0:	b580      	push	{r7, lr}
 80044e2:	b084      	sub	sp, #16
 80044e4:	af00      	add	r7, sp, #0
 80044e6:	6078      	str	r0, [r7, #4]
 80044e8:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80044ea:	2300      	movs	r3, #0
 80044ec:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80044ee:	2300      	movs	r3, #0
 80044f0:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d003      	beq.n	8004500 <ensure+0x20>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d101      	bne.n	8004504 <ensure+0x24>
    {
        return NULL;
 8004500:	2300      	movs	r3, #0
 8004502:	e086      	b.n	8004612 <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	685b      	ldr	r3, [r3, #4]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d007      	beq.n	800451c <ensure+0x3c>
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	689a      	ldr	r2, [r3, #8]
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	429a      	cmp	r2, r3
 8004516:	d301      	bcc.n	800451c <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8004518:	2300      	movs	r3, #0
 800451a:	e07a      	b.n	8004612 <ensure+0x132>
    }

    if (needed > INT_MAX)
 800451c:	683b      	ldr	r3, [r7, #0]
 800451e:	2b00      	cmp	r3, #0
 8004520:	da01      	bge.n	8004526 <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 8004522:	2300      	movs	r3, #0
 8004524:	e075      	b.n	8004612 <ensure+0x132>
    }

    needed += p->offset + 1;
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	689a      	ldr	r2, [r3, #8]
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	18d3      	adds	r3, r2, r3
 800452e:	3301      	adds	r3, #1
 8004530:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	685b      	ldr	r3, [r3, #4]
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d805      	bhi.n	8004548 <ensure+0x68>
    {
        return p->buffer + p->offset;
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681a      	ldr	r2, [r3, #0]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	18d3      	adds	r3, r2, r3
 8004546:	e064      	b.n	8004612 <ensure+0x132>
    }

    if (p->noalloc) {
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	691b      	ldr	r3, [r3, #16]
 800454c:	2b00      	cmp	r3, #0
 800454e:	d001      	beq.n	8004554 <ensure+0x74>
        return NULL;
 8004550:	2300      	movs	r3, #0
 8004552:	e05e      	b.n	8004612 <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	2380      	movs	r3, #128	; 0x80
 8004558:	05db      	lsls	r3, r3, #23
 800455a:	429a      	cmp	r2, r3
 800455c:	d307      	bcc.n	800456e <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	2b00      	cmp	r3, #0
 8004562:	db02      	blt.n	800456a <ensure+0x8a>
        {
            newsize = INT_MAX;
 8004564:	4b2d      	ldr	r3, [pc, #180]	; (800461c <ensure+0x13c>)
 8004566:	60bb      	str	r3, [r7, #8]
 8004568:	e004      	b.n	8004574 <ensure+0x94>
        }
        else
        {
            return NULL;
 800456a:	2300      	movs	r3, #0
 800456c:	e051      	b.n	8004612 <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 800456e:	683b      	ldr	r3, [r7, #0]
 8004570:	005b      	lsls	r3, r3, #1
 8004572:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6a1b      	ldr	r3, [r3, #32]
 8004578:	2b00      	cmp	r3, #0
 800457a:	d019      	beq.n	80045b0 <ensure+0xd0>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1a      	ldr	r2, [r3, #32]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	68b9      	ldr	r1, [r7, #8]
 8004586:	0018      	movs	r0, r3
 8004588:	4790      	blx	r2
 800458a:	0003      	movs	r3, r0
 800458c:	60fb      	str	r3, [r7, #12]
        if (newbuffer == NULL)
 800458e:	68fb      	ldr	r3, [r7, #12]
 8004590:	2b00      	cmp	r3, #0
 8004592:	d134      	bne.n	80045fe <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	69da      	ldr	r2, [r3, #28]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	0018      	movs	r0, r3
 800459e:	4790      	blx	r2
            p->length = 0;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	2200      	movs	r2, #0
 80045aa:	601a      	str	r2, [r3, #0]

            return NULL;
 80045ac:	2300      	movs	r3, #0
 80045ae:	e030      	b.n	8004612 <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	68ba      	ldr	r2, [r7, #8]
 80045b6:	0010      	movs	r0, r2
 80045b8:	4798      	blx	r3
 80045ba:	0003      	movs	r3, r0
 80045bc:	60fb      	str	r3, [r7, #12]
        if (!newbuffer)
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d10d      	bne.n	80045e0 <ensure+0x100>
        {
            p->hooks.deallocate(p->buffer);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	69da      	ldr	r2, [r3, #28]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	0018      	movs	r0, r3
 80045ce:	4790      	blx	r2
            p->length = 0;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2200      	movs	r2, #0
 80045d4:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2200      	movs	r2, #0
 80045da:	601a      	str	r2, [r3, #0]

            return NULL;
 80045dc:	2300      	movs	r3, #0
 80045de:	e018      	b.n	8004612 <ensure+0x132>
        }
        
        memcpy(newbuffer, p->buffer, p->offset + 1);
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	6819      	ldr	r1, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	1c5a      	adds	r2, r3, #1
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	0018      	movs	r0, r3
 80045ee:	f009 fd39 	bl	800e064 <memcpy>
        p->hooks.deallocate(p->buffer);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	69da      	ldr	r2, [r3, #28]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	0018      	movs	r0, r3
 80045fc:	4790      	blx	r2
    }
    p->length = newsize;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	68ba      	ldr	r2, [r7, #8]
 8004602:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	68fa      	ldr	r2, [r7, #12]
 8004608:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	689b      	ldr	r3, [r3, #8]
 800460e:	68fa      	ldr	r2, [r7, #12]
 8004610:	18d3      	adds	r3, r2, r3
}
 8004612:	0018      	movs	r0, r3
 8004614:	46bd      	mov	sp, r7
 8004616:	b004      	add	sp, #16
 8004618:	bd80      	pop	{r7, pc}
 800461a:	46c0      	nop			; (mov r8, r8)
 800461c:	7fffffff 	.word	0x7fffffff

08004620 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8004620:	b590      	push	{r4, r7, lr}
 8004622:	b085      	sub	sp, #20
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8004628:	2300      	movs	r3, #0
 800462a:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2b00      	cmp	r3, #0
 8004630:	d014      	beq.n	800465c <update_offset+0x3c>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	2b00      	cmp	r3, #0
 8004638:	d010      	beq.n	800465c <update_offset+0x3c>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681a      	ldr	r2, [r3, #0]
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	18d3      	adds	r3, r2, r3
 8004644:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	689c      	ldr	r4, [r3, #8]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	0018      	movs	r0, r3
 800464e:	f7fb fd65 	bl	800011c <strlen>
 8004652:	0003      	movs	r3, r0
 8004654:	18e2      	adds	r2, r4, r3
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	609a      	str	r2, [r3, #8]
 800465a:	e000      	b.n	800465e <update_offset+0x3e>
        return;
 800465c:	46c0      	nop			; (mov r8, r8)
}
 800465e:	46bd      	mov	sp, r7
 8004660:	b005      	add	sp, #20
 8004662:	bd90      	pop	{r4, r7, pc}

08004664 <reverse>:
{
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
}
void reverse(char* str, int len)
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 800466e:	2300      	movs	r3, #0
 8004670:	617b      	str	r3, [r7, #20]
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	3b01      	subs	r3, #1
 8004676:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8004678:	e018      	b.n	80046ac <reverse+0x48>
        temp = str[i];
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	687a      	ldr	r2, [r7, #4]
 800467e:	18d3      	adds	r3, r2, r3
 8004680:	781b      	ldrb	r3, [r3, #0]
 8004682:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	18d2      	adds	r2, r2, r3
 800468a:	697b      	ldr	r3, [r7, #20]
 800468c:	6879      	ldr	r1, [r7, #4]
 800468e:	18cb      	adds	r3, r1, r3
 8004690:	7812      	ldrb	r2, [r2, #0]
 8004692:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	687a      	ldr	r2, [r7, #4]
 8004698:	18d3      	adds	r3, r2, r3
 800469a:	68fa      	ldr	r2, [r7, #12]
 800469c:	b2d2      	uxtb	r2, r2
 800469e:	701a      	strb	r2, [r3, #0]
        i++;
 80046a0:	697b      	ldr	r3, [r7, #20]
 80046a2:	3301      	adds	r3, #1
 80046a4:	617b      	str	r3, [r7, #20]
        j--;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	3b01      	subs	r3, #1
 80046aa:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	693b      	ldr	r3, [r7, #16]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	dbe2      	blt.n	800467a <reverse+0x16>
    }
}
 80046b4:	46c0      	nop			; (mov r8, r8)
 80046b6:	46c0      	nop			; (mov r8, r8)
 80046b8:	46bd      	mov	sp, r7
 80046ba:	b006      	add	sp, #24
 80046bc:	bd80      	pop	{r7, pc}

080046be <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(uint64_t x, char str[], int d)
{
 80046be:	b580      	push	{r7, lr}
 80046c0:	b086      	sub	sp, #24
 80046c2:	af00      	add	r7, sp, #0
 80046c4:	60b8      	str	r0, [r7, #8]
 80046c6:	60f9      	str	r1, [r7, #12]
 80046c8:	607a      	str	r2, [r7, #4]
 80046ca:	603b      	str	r3, [r7, #0]
    int i = 0;
 80046cc:	2300      	movs	r3, #0
 80046ce:	617b      	str	r3, [r7, #20]
    while (x) {
 80046d0:	e019      	b.n	8004706 <intToStr+0x48>
        str[i++] = (x % 10) + '0';
 80046d2:	68b8      	ldr	r0, [r7, #8]
 80046d4:	68f9      	ldr	r1, [r7, #12]
 80046d6:	220a      	movs	r2, #10
 80046d8:	2300      	movs	r3, #0
 80046da:	f7fb feef 	bl	80004bc <__aeabi_uldivmod>
 80046de:	b2d2      	uxtb	r2, r2
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	1c59      	adds	r1, r3, #1
 80046e4:	6179      	str	r1, [r7, #20]
 80046e6:	0019      	movs	r1, r3
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	185b      	adds	r3, r3, r1
 80046ec:	3230      	adds	r2, #48	; 0x30
 80046ee:	b2d2      	uxtb	r2, r2
 80046f0:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80046f2:	68b8      	ldr	r0, [r7, #8]
 80046f4:	68f9      	ldr	r1, [r7, #12]
 80046f6:	220a      	movs	r2, #10
 80046f8:	2300      	movs	r3, #0
 80046fa:	f7fb fedf 	bl	80004bc <__aeabi_uldivmod>
 80046fe:	0002      	movs	r2, r0
 8004700:	000b      	movs	r3, r1
 8004702:	60ba      	str	r2, [r7, #8]
 8004704:	60fb      	str	r3, [r7, #12]
    while (x) {
 8004706:	68bb      	ldr	r3, [r7, #8]
 8004708:	68fa      	ldr	r2, [r7, #12]
 800470a:	4313      	orrs	r3, r2
 800470c:	d1e1      	bne.n	80046d2 <intToStr+0x14>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 800470e:	e007      	b.n	8004720 <intToStr+0x62>
        str[i++] = '0';
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	1c5a      	adds	r2, r3, #1
 8004714:	617a      	str	r2, [r7, #20]
 8004716:	001a      	movs	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	189b      	adds	r3, r3, r2
 800471c:	2230      	movs	r2, #48	; 0x30
 800471e:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	429a      	cmp	r2, r3
 8004726:	dbf3      	blt.n	8004710 <intToStr+0x52>

    reverse(str, i);
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	0011      	movs	r1, r2
 800472e:	0018      	movs	r0, r3
 8004730:	f7ff ff98 	bl	8004664 <reverse>
    str[i] = '\0';
 8004734:	697b      	ldr	r3, [r7, #20]
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	18d3      	adds	r3, r2, r3
 800473a:	2200      	movs	r2, #0
 800473c:	701a      	strb	r2, [r3, #0]
    return i;
 800473e:	697b      	ldr	r3, [r7, #20]
}
 8004740:	0018      	movs	r0, r3
 8004742:	46bd      	mov	sp, r7
 8004744:	b006      	add	sp, #24
 8004746:	bd80      	pop	{r7, pc}

08004748 <Shift_array_byPosition>:
void Shift_array_byPosition(char str[], int length){ //1.4.3
 8004748:	b580      	push	{r7, lr}
 800474a:	b082      	sub	sp, #8
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
 8004750:	6039      	str	r1, [r7, #0]

  while(length != 0){
 8004752:	e00b      	b.n	800476c <Shift_array_byPosition+0x24>
	  str[length+1] = str[length];
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	687a      	ldr	r2, [r7, #4]
 8004758:	18d2      	adds	r2, r2, r3
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	3301      	adds	r3, #1
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	18cb      	adds	r3, r1, r3
 8004762:	7812      	ldrb	r2, [r2, #0]
 8004764:	701a      	strb	r2, [r3, #0]
	  length--;
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	3b01      	subs	r3, #1
 800476a:	603b      	str	r3, [r7, #0]
  while(length != 0){
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <Shift_array_byPosition+0xc>
  }
  str[length+1] = str[length];
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	687a      	ldr	r2, [r7, #4]
 8004776:	18d2      	adds	r2, r2, r3
 8004778:	683b      	ldr	r3, [r7, #0]
 800477a:	3301      	adds	r3, #1
 800477c:	6879      	ldr	r1, [r7, #4]
 800477e:	18cb      	adds	r3, r1, r3
 8004780:	7812      	ldrb	r2, [r2, #0]
 8004782:	701a      	strb	r2, [r3, #0]
}
 8004784:	46c0      	nop			; (mov r8, r8)
 8004786:	46bd      	mov	sp, r7
 8004788:	b002      	add	sp, #8
 800478a:	bd80      	pop	{r7, pc}

0800478c <print_number>:
        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}
/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 800478c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800478e:	b097      	sub	sp, #92	; 0x5c
 8004790:	af00      	add	r7, sp, #0
 8004792:	6178      	str	r0, [r7, #20]
 8004794:	6139      	str	r1, [r7, #16]
    unsigned char *output_pointer = NULL;
 8004796:	2300      	movs	r3, #0
 8004798:	64fb      	str	r3, [r7, #76]	; 0x4c
    double d = item->valuedouble;
 800479a:	697b      	ldr	r3, [r7, #20]
 800479c:	699a      	ldr	r2, [r3, #24]
 800479e:	69db      	ldr	r3, [r3, #28]
 80047a0:	643a      	str	r2, [r7, #64]	; 0x40
 80047a2:	647b      	str	r3, [r7, #68]	; 0x44
    uint64_t longInt_d=d;
 80047a4:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047a6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047a8:	f7fb fee4 	bl	8000574 <__aeabi_d2ulz>
 80047ac:	0002      	movs	r2, r0
 80047ae:	000b      	movs	r3, r1
 80047b0:	63ba      	str	r2, [r7, #56]	; 0x38
 80047b2:	63fb      	str	r3, [r7, #60]	; 0x3c
    int length = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	657b      	str	r3, [r7, #84]	; 0x54
    size_t i = 0;
 80047b8:	2300      	movs	r3, #0
 80047ba:	653b      	str	r3, [r7, #80]	; 0x50
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80047bc:	230c      	movs	r3, #12
 80047be:	2610      	movs	r6, #16
 80047c0:	199b      	adds	r3, r3, r6
 80047c2:	19db      	adds	r3, r3, r7
 80047c4:	2200      	movs	r2, #0
 80047c6:	601a      	str	r2, [r3, #0]
 80047c8:	3304      	adds	r3, #4
 80047ca:	2216      	movs	r2, #22
 80047cc:	2100      	movs	r1, #0
 80047ce:	0018      	movs	r0, r3
 80047d0:	f009 faee 	bl	800ddb0 <memset>
    unsigned char decimal_point = get_decimal_point();
 80047d4:	2327      	movs	r3, #39	; 0x27
 80047d6:	199b      	adds	r3, r3, r6
 80047d8:	19de      	adds	r6, r3, r7
 80047da:	f7ff fe7b 	bl	80044d4 <get_decimal_point>
 80047de:	0003      	movs	r3, r0
 80047e0:	7033      	strb	r3, [r6, #0]

    if (output_buffer == NULL)
 80047e2:	693b      	ldr	r3, [r7, #16]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <print_number+0x60>
    {
        return false;
 80047e8:	2300      	movs	r3, #0
 80047ea:	e144      	b.n	8004a76 <print_number+0x2ea>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 80047ec:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80047ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80047f2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80047f4:	f7fd fd72 	bl	80022dc <__aeabi_dcmpun>
 80047f8:	1e03      	subs	r3, r0, #0
 80047fa:	d120      	bne.n	800483e <print_number+0xb2>
 80047fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80047fe:	001c      	movs	r4, r3
 8004800:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004802:	005b      	lsls	r3, r3, #1
 8004804:	085d      	lsrs	r5, r3, #1
 8004806:	2301      	movs	r3, #1
 8004808:	1c1e      	adds	r6, r3, #0
 800480a:	2201      	movs	r2, #1
 800480c:	4252      	negs	r2, r2
 800480e:	4b9c      	ldr	r3, [pc, #624]	; (8004a80 <print_number+0x2f4>)
 8004810:	0020      	movs	r0, r4
 8004812:	0029      	movs	r1, r5
 8004814:	f7fd fd62 	bl	80022dc <__aeabi_dcmpun>
 8004818:	1e03      	subs	r3, r0, #0
 800481a:	d10a      	bne.n	8004832 <print_number+0xa6>
 800481c:	2201      	movs	r2, #1
 800481e:	4252      	negs	r2, r2
 8004820:	4b97      	ldr	r3, [pc, #604]	; (8004a80 <print_number+0x2f4>)
 8004822:	0020      	movs	r0, r4
 8004824:	0029      	movs	r1, r5
 8004826:	f7fb fe2b 	bl	8000480 <__aeabi_dcmple>
 800482a:	1e03      	subs	r3, r0, #0
 800482c:	d101      	bne.n	8004832 <print_number+0xa6>
 800482e:	2300      	movs	r3, #0
 8004830:	1c1e      	adds	r6, r3, #0
 8004832:	b2f3      	uxtb	r3, r6
 8004834:	2201      	movs	r2, #1
 8004836:	4053      	eors	r3, r2
 8004838:	b2db      	uxtb	r3, r3
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <print_number+0xca>
    {
        length = sprintf((char*)number_buffer, "null");
 800483e:	4a91      	ldr	r2, [pc, #580]	; (8004a84 <print_number+0x2f8>)
 8004840:	230c      	movs	r3, #12
 8004842:	2110      	movs	r1, #16
 8004844:	185b      	adds	r3, r3, r1
 8004846:	19db      	adds	r3, r3, r7
 8004848:	0011      	movs	r1, r2
 800484a:	0018      	movs	r0, r3
 800484c:	f009 fa44 	bl	800dcd8 <siprintf>
 8004850:	0003      	movs	r3, r0
 8004852:	657b      	str	r3, [r7, #84]	; 0x54
 8004854:	e0c5      	b.n	80049e2 <print_number+0x256>
//        	ftoa_new(d, number_buffer,3);
//    	}
//    	length=strlen(number_buffer);


		if(d==0)
 8004856:	2200      	movs	r2, #0
 8004858:	2300      	movs	r3, #0
 800485a:	6c38      	ldr	r0, [r7, #64]	; 0x40
 800485c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800485e:	f7fb fdff 	bl	8000460 <__aeabi_dcmpeq>
 8004862:	1e03      	subs	r3, r0, #0
 8004864:	d006      	beq.n	8004874 <print_number+0xe8>
		{
			number_buffer[0]='0';
 8004866:	230c      	movs	r3, #12
 8004868:	2210      	movs	r2, #16
 800486a:	189b      	adds	r3, r3, r2
 800486c:	19db      	adds	r3, r3, r7
 800486e:	2230      	movs	r2, #48	; 0x30
 8004870:	701a      	strb	r2, [r3, #0]
 8004872:	e0ad      	b.n	80049d0 <print_number+0x244>
		}
		else if((longInt_d-d)==0)
 8004874:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004876:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004878:	f7fb feb0 	bl	80005dc <__aeabi_ul2d>
 800487c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800487e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004880:	f7fd f9aa 	bl	8001bd8 <__aeabi_dsub>
 8004884:	0002      	movs	r2, r0
 8004886:	000b      	movs	r3, r1
 8004888:	0010      	movs	r0, r2
 800488a:	0019      	movs	r1, r3
 800488c:	2200      	movs	r2, #0
 800488e:	2300      	movs	r3, #0
 8004890:	f7fb fde6 	bl	8000460 <__aeabi_dcmpeq>
 8004894:	1e03      	subs	r3, r0, #0
 8004896:	d009      	beq.n	80048ac <print_number+0x120>
		{
			intToStr((uint64_t)longInt_d, (char*)number_buffer, 0);
 8004898:	230c      	movs	r3, #12
 800489a:	2210      	movs	r2, #16
 800489c:	189b      	adds	r3, r3, r2
 800489e:	19da      	adds	r2, r3, r7
 80048a0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048a4:	2300      	movs	r3, #0
 80048a6:	f7ff ff0a 	bl	80046be <intToStr>
 80048aa:	e091      	b.n	80049d0 <print_number+0x244>
		}
		else if (d < 0)
 80048ac:	2200      	movs	r2, #0
 80048ae:	2300      	movs	r3, #0
 80048b0:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80048b2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048b4:	f7fb fdda 	bl	800046c <__aeabi_dcmplt>
 80048b8:	1e03      	subs	r3, r0, #0
 80048ba:	d06a      	beq.n	8004992 <print_number+0x206>
		{
			d = d * (-1);
 80048bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048be:	60bb      	str	r3, [r7, #8]
 80048c0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048c2:	2280      	movs	r2, #128	; 0x80
 80048c4:	0612      	lsls	r2, r2, #24
 80048c6:	405a      	eors	r2, r3
 80048c8:	60fa      	str	r2, [r7, #12]
 80048ca:	68bb      	ldr	r3, [r7, #8]
 80048cc:	68fc      	ldr	r4, [r7, #12]
 80048ce:	643b      	str	r3, [r7, #64]	; 0x40
 80048d0:	647c      	str	r4, [r7, #68]	; 0x44
			longInt_d = d;
 80048d2:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80048d4:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80048d6:	f7fb fe4d 	bl	8000574 <__aeabi_d2ulz>
 80048da:	0002      	movs	r2, r0
 80048dc:	000b      	movs	r3, r1
 80048de:	63ba      	str	r2, [r7, #56]	; 0x38
 80048e0:	63fb      	str	r3, [r7, #60]	; 0x3c
			if((longInt_d-d)==0)
 80048e2:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80048e4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80048e6:	f7fb fe79 	bl	80005dc <__aeabi_ul2d>
 80048ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80048ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80048ee:	f7fd f973 	bl	8001bd8 <__aeabi_dsub>
 80048f2:	0002      	movs	r2, r0
 80048f4:	000b      	movs	r3, r1
 80048f6:	0010      	movs	r0, r2
 80048f8:	0019      	movs	r1, r3
 80048fa:	2200      	movs	r2, #0
 80048fc:	2300      	movs	r3, #0
 80048fe:	f7fb fdaf 	bl	8000460 <__aeabi_dcmpeq>
 8004902:	1e03      	subs	r3, r0, #0
 8004904:	d01a      	beq.n	800493c <print_number+0x1b0>
			{
				intToStr((uint64_t)longInt_d,(char*)number_buffer, 0);
 8004906:	240c      	movs	r4, #12
 8004908:	2510      	movs	r5, #16
 800490a:	1963      	adds	r3, r4, r5
 800490c:	19da      	adds	r2, r3, r7
 800490e:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004910:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004912:	2300      	movs	r3, #0
 8004914:	f7ff fed3 	bl	80046be <intToStr>
				Shift_array_byPosition((char*)number_buffer,strlen((const char *)number_buffer));
 8004918:	1963      	adds	r3, r4, r5
 800491a:	19db      	adds	r3, r3, r7
 800491c:	0018      	movs	r0, r3
 800491e:	f7fb fbfd 	bl	800011c <strlen>
 8004922:	0003      	movs	r3, r0
 8004924:	001a      	movs	r2, r3
 8004926:	1963      	adds	r3, r4, r5
 8004928:	19db      	adds	r3, r3, r7
 800492a:	0011      	movs	r1, r2
 800492c:	0018      	movs	r0, r3
 800492e:	f7ff ff0b 	bl	8004748 <Shift_array_byPosition>
				number_buffer[0]='-';
 8004932:	1963      	adds	r3, r4, r5
 8004934:	19db      	adds	r3, r3, r7
 8004936:	222d      	movs	r2, #45	; 0x2d
 8004938:	701a      	strb	r2, [r3, #0]
 800493a:	e049      	b.n	80049d0 <print_number+0x244>
			}
			else
			{
				d = d * (-1);
 800493c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800493e:	603b      	str	r3, [r7, #0]
 8004940:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004942:	2280      	movs	r2, #128	; 0x80
 8004944:	0612      	lsls	r2, r2, #24
 8004946:	405a      	eors	r2, r3
 8004948:	607a      	str	r2, [r7, #4]
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	687c      	ldr	r4, [r7, #4]
 800494e:	643b      	str	r3, [r7, #64]	; 0x40
 8004950:	647c      	str	r4, [r7, #68]	; 0x44
				if(d > 0x7FFFFFFFFFFFFFFF) // for convert Exponent format  || ticket : https://cimcondigital.atlassian.net/browse/IRTU6000PP-35
 8004952:	2200      	movs	r2, #0
 8004954:	4b4c      	ldr	r3, [pc, #304]	; (8004a88 <print_number+0x2fc>)
 8004956:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004958:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800495a:	f7fb fd9b 	bl	8000494 <__aeabi_dcmpgt>
 800495e:	1e03      	subs	r3, r0, #0
 8004960:	d00b      	beq.n	800497a <print_number+0x1ee>
				{
					length = sprintf((char*)number_buffer, "%2.3f", d);
 8004962:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004964:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004966:	4949      	ldr	r1, [pc, #292]	; (8004a8c <print_number+0x300>)
 8004968:	200c      	movs	r0, #12
 800496a:	2410      	movs	r4, #16
 800496c:	1900      	adds	r0, r0, r4
 800496e:	19c0      	adds	r0, r0, r7
 8004970:	f009 f9b2 	bl	800dcd8 <siprintf>
 8004974:	0003      	movs	r3, r0
 8004976:	657b      	str	r3, [r7, #84]	; 0x54
 8004978:	e02a      	b.n	80049d0 <print_number+0x244>
				}
				else
				{
					length = sprintf((char*)number_buffer, "%e", d);
 800497a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800497c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800497e:	4944      	ldr	r1, [pc, #272]	; (8004a90 <print_number+0x304>)
 8004980:	200c      	movs	r0, #12
 8004982:	2410      	movs	r4, #16
 8004984:	1900      	adds	r0, r0, r4
 8004986:	19c0      	adds	r0, r0, r7
 8004988:	f009 f9a6 	bl	800dcd8 <siprintf>
 800498c:	0003      	movs	r3, r0
 800498e:	657b      	str	r3, [r7, #84]	; 0x54
 8004990:	e01e      	b.n	80049d0 <print_number+0x244>
				//number_buffer[0]='-';
			}
		}
		else
		{
			if(d < 0x7FFFFFFFFFFFFFFF) // for convert Exponent format  || ticket : https://cimcondigital.atlassian.net/browse/IRTU6000PP-35
 8004992:	2200      	movs	r2, #0
 8004994:	4b3c      	ldr	r3, [pc, #240]	; (8004a88 <print_number+0x2fc>)
 8004996:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8004998:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800499a:	f7fb fd67 	bl	800046c <__aeabi_dcmplt>
 800499e:	1e03      	subs	r3, r0, #0
 80049a0:	d00b      	beq.n	80049ba <print_number+0x22e>
			{
				length = sprintf((char*)number_buffer, "%2.3f", d);
 80049a2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049a4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049a6:	4939      	ldr	r1, [pc, #228]	; (8004a8c <print_number+0x300>)
 80049a8:	200c      	movs	r0, #12
 80049aa:	2410      	movs	r4, #16
 80049ac:	1900      	adds	r0, r0, r4
 80049ae:	19c0      	adds	r0, r0, r7
 80049b0:	f009 f992 	bl	800dcd8 <siprintf>
 80049b4:	0003      	movs	r3, r0
 80049b6:	657b      	str	r3, [r7, #84]	; 0x54
 80049b8:	e00a      	b.n	80049d0 <print_number+0x244>
			}
			else
			{
				length = sprintf((char*)number_buffer, "%e", d);  // for convert to Exponential foam
 80049ba:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80049bc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80049be:	4934      	ldr	r1, [pc, #208]	; (8004a90 <print_number+0x304>)
 80049c0:	200c      	movs	r0, #12
 80049c2:	2410      	movs	r4, #16
 80049c4:	1900      	adds	r0, r0, r4
 80049c6:	19c0      	adds	r0, r0, r7
 80049c8:	f009 f986 	bl	800dcd8 <siprintf>
 80049cc:	0003      	movs	r3, r0
 80049ce:	657b      	str	r3, [r7, #84]	; 0x54
			}
			//ftoa_new(d, number_buffer,3);
		}
		length=strlen((const char *)number_buffer);
 80049d0:	230c      	movs	r3, #12
 80049d2:	2210      	movs	r2, #16
 80049d4:	189b      	adds	r3, r3, r2
 80049d6:	19db      	adds	r3, r3, r7
 80049d8:	0018      	movs	r0, r3
 80049da:	f7fb fb9f 	bl	800011c <strlen>
 80049de:	0003      	movs	r3, r0
 80049e0:	657b      	str	r3, [r7, #84]	; 0x54
//            length = sprintf((char*)number_buffer, "%lf", d);
//        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 80049e2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	db02      	blt.n	80049ee <print_number+0x262>
 80049e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049ea:	2b19      	cmp	r3, #25
 80049ec:	dd01      	ble.n	80049f2 <print_number+0x266>
    {
        return false;
 80049ee:	2300      	movs	r3, #0
 80049f0:	e041      	b.n	8004a76 <print_number+0x2ea>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 80049f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80049f4:	1c5a      	adds	r2, r3, #1
 80049f6:	693b      	ldr	r3, [r7, #16]
 80049f8:	0011      	movs	r1, r2
 80049fa:	0018      	movs	r0, r3
 80049fc:	f7ff fd70 	bl	80044e0 <ensure>
 8004a00:	0003      	movs	r3, r0
 8004a02:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (output_pointer == NULL)
 8004a04:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d101      	bne.n	8004a0e <print_number+0x282>
    {
        return false;
 8004a0a:	2300      	movs	r3, #0
 8004a0c:	e033      	b.n	8004a76 <print_number+0x2ea>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8004a0e:	2300      	movs	r3, #0
 8004a10:	653b      	str	r3, [r7, #80]	; 0x50
 8004a12:	e020      	b.n	8004a56 <print_number+0x2ca>
    {
        if (number_buffer[i] == decimal_point)
 8004a14:	230c      	movs	r3, #12
 8004a16:	2110      	movs	r1, #16
 8004a18:	185b      	adds	r3, r3, r1
 8004a1a:	19da      	adds	r2, r3, r7
 8004a1c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1e:	18d3      	adds	r3, r2, r3
 8004a20:	781b      	ldrb	r3, [r3, #0]
 8004a22:	2227      	movs	r2, #39	; 0x27
 8004a24:	1852      	adds	r2, r2, r1
 8004a26:	19d2      	adds	r2, r2, r7
 8004a28:	7812      	ldrb	r2, [r2, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d105      	bne.n	8004a3a <print_number+0x2ae>
        {
            output_pointer[i] = '.';
 8004a2e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a30:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a32:	18d3      	adds	r3, r2, r3
 8004a34:	222e      	movs	r2, #46	; 0x2e
 8004a36:	701a      	strb	r2, [r3, #0]
            continue;
 8004a38:	e00a      	b.n	8004a50 <print_number+0x2c4>
        }

        output_pointer[i] = number_buffer[i];
 8004a3a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a3c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a3e:	18d3      	adds	r3, r2, r3
 8004a40:	220c      	movs	r2, #12
 8004a42:	2110      	movs	r1, #16
 8004a44:	1852      	adds	r2, r2, r1
 8004a46:	19d1      	adds	r1, r2, r7
 8004a48:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a4a:	188a      	adds	r2, r1, r2
 8004a4c:	7812      	ldrb	r2, [r2, #0]
 8004a4e:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8004a50:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a52:	3301      	adds	r3, #1
 8004a54:	653b      	str	r3, [r7, #80]	; 0x50
 8004a56:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a58:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8004a5a:	429a      	cmp	r2, r3
 8004a5c:	d3da      	bcc.n	8004a14 <print_number+0x288>
    }
    output_pointer[i] = '\0';
 8004a5e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004a60:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a62:	18d3      	adds	r3, r2, r3
 8004a64:	2200      	movs	r2, #0
 8004a66:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8004a68:	693b      	ldr	r3, [r7, #16]
 8004a6a:	689a      	ldr	r2, [r3, #8]
 8004a6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a6e:	18d2      	adds	r2, r2, r3
 8004a70:	693b      	ldr	r3, [r7, #16]
 8004a72:	609a      	str	r2, [r3, #8]

    return true;
 8004a74:	2301      	movs	r3, #1
}
 8004a76:	0018      	movs	r0, r3
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	b017      	add	sp, #92	; 0x5c
 8004a7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004a7e:	46c0      	nop			; (mov r8, r8)
 8004a80:	7fefffff 	.word	0x7fefffff
 8004a84:	08010ffc 	.word	0x08010ffc
 8004a88:	43e00000 	.word	0x43e00000
 8004a8c:	08011004 	.word	0x08011004
 8004a90:	0801100c 	.word	0x0801100c

08004a94 <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8004a94:	b580      	push	{r7, lr}
 8004a96:	b088      	sub	sp, #32
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
 8004a9c:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8004aae:	2300      	movs	r3, #0
 8004ab0:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d101      	bne.n	8004abc <print_string_ptr+0x28>
    {
        return false;
 8004ab8:	2300      	movs	r3, #0
 8004aba:	e0e0      	b.n	8004c7e <print_string_ptr+0x1ea>
    }

    /* empty string */
    if (input == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d115      	bne.n	8004aee <print_string_ptr+0x5a>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	2103      	movs	r1, #3
 8004ac6:	0018      	movs	r0, r3
 8004ac8:	f7ff fd0a 	bl	80044e0 <ensure>
 8004acc:	0003      	movs	r3, r0
 8004ace:	613b      	str	r3, [r7, #16]
        if (output == NULL)
 8004ad0:	693b      	ldr	r3, [r7, #16]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <print_string_ptr+0x46>
        {
            return false;
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	e0d1      	b.n	8004c7e <print_string_ptr+0x1ea>
        }
        strcpy((char*)output, "\"\"");
 8004ada:	693a      	ldr	r2, [r7, #16]
 8004adc:	4b6a      	ldr	r3, [pc, #424]	; (8004c88 <print_string_ptr+0x1f4>)
 8004ade:	0010      	movs	r0, r2
 8004ae0:	0019      	movs	r1, r3
 8004ae2:	2303      	movs	r3, #3
 8004ae4:	001a      	movs	r2, r3
 8004ae6:	f009 fabd 	bl	800e064 <memcpy>

        return true;
 8004aea:	2301      	movs	r3, #1
 8004aec:	e0c7      	b.n	8004c7e <print_string_ptr+0x1ea>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	e022      	b.n	8004b3a <print_string_ptr+0xa6>
    {
        switch (*input_pointer)
 8004af4:	69fb      	ldr	r3, [r7, #28]
 8004af6:	781b      	ldrb	r3, [r3, #0]
 8004af8:	2b22      	cmp	r3, #34	; 0x22
 8004afa:	dc0d      	bgt.n	8004b18 <print_string_ptr+0x84>
 8004afc:	2b08      	cmp	r3, #8
 8004afe:	db11      	blt.n	8004b24 <print_string_ptr+0x90>
 8004b00:	3b08      	subs	r3, #8
 8004b02:	4a62      	ldr	r2, [pc, #392]	; (8004c8c <print_string_ptr+0x1f8>)
 8004b04:	40da      	lsrs	r2, r3
 8004b06:	0013      	movs	r3, r2
 8004b08:	2201      	movs	r2, #1
 8004b0a:	4013      	ands	r3, r2
 8004b0c:	1e5a      	subs	r2, r3, #1
 8004b0e:	4193      	sbcs	r3, r2
 8004b10:	b2db      	uxtb	r3, r3
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d102      	bne.n	8004b1c <print_string_ptr+0x88>
 8004b16:	e005      	b.n	8004b24 <print_string_ptr+0x90>
 8004b18:	2b5c      	cmp	r3, #92	; 0x5c
 8004b1a:	d103      	bne.n	8004b24 <print_string_ptr+0x90>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8004b1c:	697b      	ldr	r3, [r7, #20]
 8004b1e:	3301      	adds	r3, #1
 8004b20:	617b      	str	r3, [r7, #20]
                break;
 8004b22:	e007      	b.n	8004b34 <print_string_ptr+0xa0>
            default:
                if (*input_pointer < 32)
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	781b      	ldrb	r3, [r3, #0]
 8004b28:	2b1f      	cmp	r3, #31
 8004b2a:	d802      	bhi.n	8004b32 <print_string_ptr+0x9e>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8004b2c:	697b      	ldr	r3, [r7, #20]
 8004b2e:	3305      	adds	r3, #5
 8004b30:	617b      	str	r3, [r7, #20]
                }
                break;
 8004b32:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer; input_pointer++)
 8004b34:	69fb      	ldr	r3, [r7, #28]
 8004b36:	3301      	adds	r3, #1
 8004b38:	61fb      	str	r3, [r7, #28]
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	781b      	ldrb	r3, [r3, #0]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d1d8      	bne.n	8004af4 <print_string_ptr+0x60>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8004b42:	69fa      	ldr	r2, [r7, #28]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	001a      	movs	r2, r3
 8004b4a:	697b      	ldr	r3, [r7, #20]
 8004b4c:	189b      	adds	r3, r3, r2
 8004b4e:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	1cda      	adds	r2, r3, #3
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	0011      	movs	r1, r2
 8004b58:	0018      	movs	r0, r3
 8004b5a:	f7ff fcc1 	bl	80044e0 <ensure>
 8004b5e:	0003      	movs	r3, r0
 8004b60:	613b      	str	r3, [r7, #16]
    if (output == NULL)
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d101      	bne.n	8004b6c <print_string_ptr+0xd8>
    {
        return false;
 8004b68:	2300      	movs	r3, #0
 8004b6a:	e088      	b.n	8004c7e <print_string_ptr+0x1ea>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8004b6c:	697b      	ldr	r3, [r7, #20]
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d117      	bne.n	8004ba2 <print_string_ptr+0x10e>
    {
        output[0] = '\"';
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	2222      	movs	r2, #34	; 0x22
 8004b76:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	3301      	adds	r3, #1
 8004b7c:	68fa      	ldr	r2, [r7, #12]
 8004b7e:	6879      	ldr	r1, [r7, #4]
 8004b80:	0018      	movs	r0, r3
 8004b82:	f009 fa6f 	bl	800e064 <memcpy>
        output[output_length + 1] = '\"';
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	3301      	adds	r3, #1
 8004b8a:	693a      	ldr	r2, [r7, #16]
 8004b8c:	18d3      	adds	r3, r2, r3
 8004b8e:	2222      	movs	r2, #34	; 0x22
 8004b90:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	3302      	adds	r3, #2
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	18d3      	adds	r3, r2, r3
 8004b9a:	2200      	movs	r2, #0
 8004b9c:	701a      	strb	r2, [r3, #0]

        return true;
 8004b9e:	2301      	movs	r3, #1
 8004ba0:	e06d      	b.n	8004c7e <print_string_ptr+0x1ea>
    }

    output[0] = '\"';
 8004ba2:	693b      	ldr	r3, [r7, #16]
 8004ba4:	2222      	movs	r2, #34	; 0x22
 8004ba6:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	3301      	adds	r3, #1
 8004bac:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	61fb      	str	r3, [r7, #28]
 8004bb2:	e053      	b.n	8004c5c <print_string_ptr+0x1c8>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	2b1f      	cmp	r3, #31
 8004bba:	d90c      	bls.n	8004bd6 <print_string_ptr+0x142>
 8004bbc:	69fb      	ldr	r3, [r7, #28]
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b22      	cmp	r3, #34	; 0x22
 8004bc2:	d008      	beq.n	8004bd6 <print_string_ptr+0x142>
 8004bc4:	69fb      	ldr	r3, [r7, #28]
 8004bc6:	781b      	ldrb	r3, [r3, #0]
 8004bc8:	2b5c      	cmp	r3, #92	; 0x5c
 8004bca:	d004      	beq.n	8004bd6 <print_string_ptr+0x142>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8004bcc:	69fb      	ldr	r3, [r7, #28]
 8004bce:	781a      	ldrb	r2, [r3, #0]
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	701a      	strb	r2, [r3, #0]
 8004bd4:	e03c      	b.n	8004c50 <print_string_ptr+0x1bc>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	1c5a      	adds	r2, r3, #1
 8004bda:	61ba      	str	r2, [r7, #24]
 8004bdc:	225c      	movs	r2, #92	; 0x5c
 8004bde:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8004be0:	69fb      	ldr	r3, [r7, #28]
 8004be2:	781b      	ldrb	r3, [r3, #0]
 8004be4:	2b22      	cmp	r3, #34	; 0x22
 8004be6:	dc09      	bgt.n	8004bfc <print_string_ptr+0x168>
 8004be8:	2b08      	cmp	r3, #8
 8004bea:	db25      	blt.n	8004c38 <print_string_ptr+0x1a4>
 8004bec:	3b08      	subs	r3, #8
 8004bee:	2b1a      	cmp	r3, #26
 8004bf0:	d822      	bhi.n	8004c38 <print_string_ptr+0x1a4>
 8004bf2:	009a      	lsls	r2, r3, #2
 8004bf4:	4b26      	ldr	r3, [pc, #152]	; (8004c90 <print_string_ptr+0x1fc>)
 8004bf6:	18d3      	adds	r3, r2, r3
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	469f      	mov	pc, r3
 8004bfc:	2b5c      	cmp	r3, #92	; 0x5c
 8004bfe:	d11b      	bne.n	8004c38 <print_string_ptr+0x1a4>
            {
                case '\\':
                    *output_pointer = '\\';
 8004c00:	69bb      	ldr	r3, [r7, #24]
 8004c02:	225c      	movs	r2, #92	; 0x5c
 8004c04:	701a      	strb	r2, [r3, #0]
                    break;
 8004c06:	e023      	b.n	8004c50 <print_string_ptr+0x1bc>
                case '\"':
                    *output_pointer = '\"';
 8004c08:	69bb      	ldr	r3, [r7, #24]
 8004c0a:	2222      	movs	r2, #34	; 0x22
 8004c0c:	701a      	strb	r2, [r3, #0]
                    break;
 8004c0e:	e01f      	b.n	8004c50 <print_string_ptr+0x1bc>
                case '\b':
                    *output_pointer = 'b';
 8004c10:	69bb      	ldr	r3, [r7, #24]
 8004c12:	2262      	movs	r2, #98	; 0x62
 8004c14:	701a      	strb	r2, [r3, #0]
                    break;
 8004c16:	e01b      	b.n	8004c50 <print_string_ptr+0x1bc>
                case '\f':
                    *output_pointer = 'f';
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	2266      	movs	r2, #102	; 0x66
 8004c1c:	701a      	strb	r2, [r3, #0]
                    break;
 8004c1e:	e017      	b.n	8004c50 <print_string_ptr+0x1bc>
                case '\n':
                    *output_pointer = 'n';
 8004c20:	69bb      	ldr	r3, [r7, #24]
 8004c22:	226e      	movs	r2, #110	; 0x6e
 8004c24:	701a      	strb	r2, [r3, #0]
                    break;
 8004c26:	e013      	b.n	8004c50 <print_string_ptr+0x1bc>
                case '\r':
                    *output_pointer = 'r';
 8004c28:	69bb      	ldr	r3, [r7, #24]
 8004c2a:	2272      	movs	r2, #114	; 0x72
 8004c2c:	701a      	strb	r2, [r3, #0]
                    break;
 8004c2e:	e00f      	b.n	8004c50 <print_string_ptr+0x1bc>
                case '\t':
                    *output_pointer = 't';
 8004c30:	69bb      	ldr	r3, [r7, #24]
 8004c32:	2274      	movs	r2, #116	; 0x74
 8004c34:	701a      	strb	r2, [r3, #0]
                    break;
 8004c36:	e00b      	b.n	8004c50 <print_string_ptr+0x1bc>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8004c38:	69fb      	ldr	r3, [r7, #28]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	001a      	movs	r2, r3
 8004c3e:	4915      	ldr	r1, [pc, #84]	; (8004c94 <print_string_ptr+0x200>)
 8004c40:	69bb      	ldr	r3, [r7, #24]
 8004c42:	0018      	movs	r0, r3
 8004c44:	f009 f848 	bl	800dcd8 <siprintf>
                    output_pointer += 4;
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	3304      	adds	r3, #4
 8004c4c:	61bb      	str	r3, [r7, #24]
                    break;
 8004c4e:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8004c50:	69fb      	ldr	r3, [r7, #28]
 8004c52:	3301      	adds	r3, #1
 8004c54:	61fb      	str	r3, [r7, #28]
 8004c56:	69bb      	ldr	r3, [r7, #24]
 8004c58:	3301      	adds	r3, #1
 8004c5a:	61bb      	str	r3, [r7, #24]
 8004c5c:	69fb      	ldr	r3, [r7, #28]
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1a7      	bne.n	8004bb4 <print_string_ptr+0x120>
            }
        }
    }
    output[output_length + 1] = '\"';
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	3301      	adds	r3, #1
 8004c68:	693a      	ldr	r2, [r7, #16]
 8004c6a:	18d3      	adds	r3, r2, r3
 8004c6c:	2222      	movs	r2, #34	; 0x22
 8004c6e:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	3302      	adds	r3, #2
 8004c74:	693a      	ldr	r2, [r7, #16]
 8004c76:	18d3      	adds	r3, r2, r3
 8004c78:	2200      	movs	r2, #0
 8004c7a:	701a      	strb	r2, [r3, #0]

    return true;
 8004c7c:	2301      	movs	r3, #1
}
 8004c7e:	0018      	movs	r0, r3
 8004c80:	46bd      	mov	sp, r7
 8004c82:	b008      	add	sp, #32
 8004c84:	bd80      	pop	{r7, pc}
 8004c86:	46c0      	nop			; (mov r8, r8)
 8004c88:	08011010 	.word	0x08011010
 8004c8c:	04000037 	.word	0x04000037
 8004c90:	08011260 	.word	0x08011260
 8004c94:	08011014 	.word	0x08011014

08004c98 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	b082      	sub	sp, #8
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
 8004ca0:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	691b      	ldr	r3, [r3, #16]
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	0011      	movs	r1, r2
 8004caa:	0018      	movs	r0, r3
 8004cac:	f7ff fef2 	bl	8004a94 <print_string_ptr>
 8004cb0:	0003      	movs	r3, r0
}
 8004cb2:	0018      	movs	r0, r3
 8004cb4:	46bd      	mov	sp, r7
 8004cb6:	b002      	add	sp, #8
 8004cb8:	bd80      	pop	{r7, pc}
	...

08004cbc <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8004cbc:	b5b0      	push	{r4, r5, r7, lr}
 8004cbe:	b08e      	sub	sp, #56	; 0x38
 8004cc0:	af00      	add	r7, sp, #0
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	60b9      	str	r1, [r7, #8]
 8004cc6:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8004ccc:	2410      	movs	r4, #16
 8004cce:	193b      	adds	r3, r7, r4
 8004cd0:	2224      	movs	r2, #36	; 0x24
 8004cd2:	2100      	movs	r1, #0
 8004cd4:	0018      	movs	r0, r3
 8004cd6:	f009 f86b 	bl	800ddb0 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681a      	ldr	r2, [r3, #0]
 8004cde:	4b42      	ldr	r3, [pc, #264]	; (8004de8 <print+0x12c>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	0018      	movs	r0, r3
 8004ce4:	4790      	blx	r2
 8004ce6:	0002      	movs	r2, r0
 8004ce8:	193b      	adds	r3, r7, r4
 8004cea:	601a      	str	r2, [r3, #0]
    buffer->length = default_buffer_size;
 8004cec:	4b3e      	ldr	r3, [pc, #248]	; (8004de8 <print+0x12c>)
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	193b      	adds	r3, r7, r4
 8004cf2:	605a      	str	r2, [r3, #4]
    buffer->format = format;
 8004cf4:	0025      	movs	r5, r4
 8004cf6:	193b      	adds	r3, r7, r4
 8004cf8:	68ba      	ldr	r2, [r7, #8]
 8004cfa:	615a      	str	r2, [r3, #20]
    buffer->hooks = *hooks;
 8004cfc:	197b      	adds	r3, r7, r5
 8004cfe:	687a      	ldr	r2, [r7, #4]
 8004d00:	3318      	adds	r3, #24
 8004d02:	ca13      	ldmia	r2!, {r0, r1, r4}
 8004d04:	c313      	stmia	r3!, {r0, r1, r4}
    if (buffer->buffer == NULL)
 8004d06:	002c      	movs	r4, r5
 8004d08:	193b      	adds	r3, r7, r4
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d04c      	beq.n	8004daa <print+0xee>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8004d10:	193a      	adds	r2, r7, r4
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	0011      	movs	r1, r2
 8004d16:	0018      	movs	r0, r3
 8004d18:	f000 f87a 	bl	8004e10 <print_value>
 8004d1c:	1e03      	subs	r3, r0, #0
 8004d1e:	d046      	beq.n	8004dae <print+0xf2>
    {
        goto fail;
    }
    update_offset(buffer);
 8004d20:	193b      	adds	r3, r7, r4
 8004d22:	0018      	movs	r0, r3
 8004d24:	f7ff fc7c 	bl	8004620 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	689b      	ldr	r3, [r3, #8]
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d011      	beq.n	8004d54 <print+0x98>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	689a      	ldr	r2, [r3, #8]
 8004d34:	193b      	adds	r3, r7, r4
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	193b      	adds	r3, r7, r4
 8004d3a:	689b      	ldr	r3, [r3, #8]
 8004d3c:	3301      	adds	r3, #1
 8004d3e:	0019      	movs	r1, r3
 8004d40:	4790      	blx	r2
 8004d42:	0003      	movs	r3, r0
 8004d44:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL) {
 8004d46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d032      	beq.n	8004db2 <print+0xf6>
            goto fail;
        }
        buffer->buffer = NULL;
 8004d4c:	193b      	adds	r3, r7, r4
 8004d4e:	2200      	movs	r2, #0
 8004d50:	601a      	str	r2, [r3, #0]
 8004d52:	e028      	b.n	8004da6 <print+0xea>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	2410      	movs	r4, #16
 8004d5a:	193b      	adds	r3, r7, r4
 8004d5c:	689b      	ldr	r3, [r3, #8]
 8004d5e:	3301      	adds	r3, #1
 8004d60:	0018      	movs	r0, r3
 8004d62:	4790      	blx	r2
 8004d64:	0003      	movs	r3, r0
 8004d66:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL)
 8004d68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d023      	beq.n	8004db6 <print+0xfa>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8004d6e:	193b      	adds	r3, r7, r4
 8004d70:	6819      	ldr	r1, [r3, #0]
 8004d72:	193b      	adds	r3, r7, r4
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	1c58      	adds	r0, r3, #1
 8004d78:	193b      	adds	r3, r7, r4
 8004d7a:	685a      	ldr	r2, [r3, #4]
 8004d7c:	0003      	movs	r3, r0
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d900      	bls.n	8004d84 <print+0xc8>
 8004d82:	0013      	movs	r3, r2
 8004d84:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004d86:	001a      	movs	r2, r3
 8004d88:	f009 f96c 	bl	800e064 <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8004d8c:	2110      	movs	r1, #16
 8004d8e:	187b      	adds	r3, r7, r1
 8004d90:	689b      	ldr	r3, [r3, #8]
 8004d92:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004d94:	18d3      	adds	r3, r2, r3
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685a      	ldr	r2, [r3, #4]
 8004d9e:	187b      	adds	r3, r7, r1
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	0018      	movs	r0, r3
 8004da4:	4790      	blx	r2
    }

    return printed;
 8004da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004da8:	e01a      	b.n	8004de0 <print+0x124>
        goto fail;
 8004daa:	46c0      	nop			; (mov r8, r8)
 8004dac:	e004      	b.n	8004db8 <print+0xfc>
        goto fail;
 8004dae:	46c0      	nop			; (mov r8, r8)
 8004db0:	e002      	b.n	8004db8 <print+0xfc>
            goto fail;
 8004db2:	46c0      	nop			; (mov r8, r8)
 8004db4:	e000      	b.n	8004db8 <print+0xfc>
            goto fail;
 8004db6:	46c0      	nop			; (mov r8, r8)

fail:
    if (buffer->buffer != NULL)
 8004db8:	2110      	movs	r1, #16
 8004dba:	187b      	adds	r3, r7, r1
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <print+0x112>
    {
        hooks->deallocate(buffer->buffer);
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	685a      	ldr	r2, [r3, #4]
 8004dc6:	187b      	adds	r3, r7, r1
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	0018      	movs	r0, r3
 8004dcc:	4790      	blx	r2
    }

    if (printed != NULL)
 8004dce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d004      	beq.n	8004dde <print+0x122>
    {
        hooks->deallocate(printed);
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	685b      	ldr	r3, [r3, #4]
 8004dd8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004dda:	0010      	movs	r0, r2
 8004ddc:	4798      	blx	r3
    }

    return NULL;
 8004dde:	2300      	movs	r3, #0
}
 8004de0:	0018      	movs	r0, r3
 8004de2:	46bd      	mov	sp, r7
 8004de4:	b00e      	add	sp, #56	; 0x38
 8004de6:	bdb0      	pop	{r4, r5, r7, pc}
 8004de8:	08011350 	.word	0x08011350

08004dec <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8004dec:	b580      	push	{r7, lr}
 8004dee:	b082      	sub	sp, #8
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8004df4:	4a05      	ldr	r2, [pc, #20]	; (8004e0c <cJSON_Print+0x20>)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2101      	movs	r1, #1
 8004dfa:	0018      	movs	r0, r3
 8004dfc:	f7ff ff5e 	bl	8004cbc <print>
 8004e00:	0003      	movs	r3, r0
}
 8004e02:	0018      	movs	r0, r3
 8004e04:	46bd      	mov	sp, r7
 8004e06:	b002      	add	sp, #8
 8004e08:	bd80      	pop	{r7, pc}
 8004e0a:	46c0      	nop			; (mov r8, r8)
 8004e0c:	20000000 	.word	0x20000000

08004e10 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b084      	sub	sp, #16
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8004e1a:	2300      	movs	r3, #0
 8004e1c:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <print_value+0x1a>
 8004e24:	683b      	ldr	r3, [r7, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	d101      	bne.n	8004e2e <print_value+0x1e>
    {
        return false;
 8004e2a:	2300      	movs	r3, #0
 8004e2c:	e0a1      	b.n	8004f72 <print_value+0x162>
    }

    switch ((item->type) & 0xFF)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	68db      	ldr	r3, [r3, #12]
 8004e32:	22ff      	movs	r2, #255	; 0xff
 8004e34:	4013      	ands	r3, r2
 8004e36:	2b80      	cmp	r3, #128	; 0x80
 8004e38:	d05c      	beq.n	8004ef4 <print_value+0xe4>
 8004e3a:	dd00      	ble.n	8004e3e <print_value+0x2e>
 8004e3c:	e098      	b.n	8004f70 <print_value+0x160>
 8004e3e:	2b20      	cmp	r3, #32
 8004e40:	dc0a      	bgt.n	8004e58 <print_value+0x48>
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	dc00      	bgt.n	8004e48 <print_value+0x38>
 8004e46:	e093      	b.n	8004f70 <print_value+0x160>
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	d900      	bls.n	8004e4e <print_value+0x3e>
 8004e4c:	e090      	b.n	8004f70 <print_value+0x160>
 8004e4e:	009a      	lsls	r2, r3, #2
 8004e50:	4b4a      	ldr	r3, [pc, #296]	; (8004f7c <print_value+0x16c>)
 8004e52:	18d3      	adds	r3, r2, r3
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	469f      	mov	pc, r3
 8004e58:	2b40      	cmp	r3, #64	; 0x40
 8004e5a:	d100      	bne.n	8004e5e <print_value+0x4e>
 8004e5c:	e080      	b.n	8004f60 <print_value+0x150>
 8004e5e:	e087      	b.n	8004f70 <print_value+0x160>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8004e60:	683b      	ldr	r3, [r7, #0]
 8004e62:	2105      	movs	r1, #5
 8004e64:	0018      	movs	r0, r3
 8004e66:	f7ff fb3b 	bl	80044e0 <ensure>
 8004e6a:	0003      	movs	r3, r0
 8004e6c:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d101      	bne.n	8004e78 <print_value+0x68>
            {
                return false;
 8004e74:	2300      	movs	r3, #0
 8004e76:	e07c      	b.n	8004f72 <print_value+0x162>
            }
            strcpy((char*)output, "null");
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4b41      	ldr	r3, [pc, #260]	; (8004f80 <print_value+0x170>)
 8004e7c:	0010      	movs	r0, r2
 8004e7e:	0019      	movs	r1, r3
 8004e80:	2305      	movs	r3, #5
 8004e82:	001a      	movs	r2, r3
 8004e84:	f009 f8ee 	bl	800e064 <memcpy>
            return true;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e072      	b.n	8004f72 <print_value+0x162>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2106      	movs	r1, #6
 8004e90:	0018      	movs	r0, r3
 8004e92:	f7ff fb25 	bl	80044e0 <ensure>
 8004e96:	0003      	movs	r3, r0
 8004e98:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d101      	bne.n	8004ea4 <print_value+0x94>
            {
                return false;
 8004ea0:	2300      	movs	r3, #0
 8004ea2:	e066      	b.n	8004f72 <print_value+0x162>
            }
            strcpy((char*)output, "false");
 8004ea4:	68fa      	ldr	r2, [r7, #12]
 8004ea6:	4b37      	ldr	r3, [pc, #220]	; (8004f84 <print_value+0x174>)
 8004ea8:	0010      	movs	r0, r2
 8004eaa:	0019      	movs	r1, r3
 8004eac:	2306      	movs	r3, #6
 8004eae:	001a      	movs	r2, r3
 8004eb0:	f009 f8d8 	bl	800e064 <memcpy>
            return true;
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e05c      	b.n	8004f72 <print_value+0x162>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2105      	movs	r1, #5
 8004ebc:	0018      	movs	r0, r3
 8004ebe:	f7ff fb0f 	bl	80044e0 <ensure>
 8004ec2:	0003      	movs	r3, r0
 8004ec4:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d101      	bne.n	8004ed0 <print_value+0xc0>
            {
                return false;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	e050      	b.n	8004f72 <print_value+0x162>
            }
            strcpy((char*)output, "true");
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4b2d      	ldr	r3, [pc, #180]	; (8004f88 <print_value+0x178>)
 8004ed4:	0010      	movs	r0, r2
 8004ed6:	0019      	movs	r1, r3
 8004ed8:	2305      	movs	r3, #5
 8004eda:	001a      	movs	r2, r3
 8004edc:	f009 f8c2 	bl	800e064 <memcpy>
            return true;
 8004ee0:	2301      	movs	r3, #1
 8004ee2:	e046      	b.n	8004f72 <print_value+0x162>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8004ee4:	683a      	ldr	r2, [r7, #0]
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	0011      	movs	r1, r2
 8004eea:	0018      	movs	r0, r3
 8004eec:	f7ff fc4e 	bl	800478c <print_number>
 8004ef0:	0003      	movs	r3, r0
 8004ef2:	e03e      	b.n	8004f72 <print_value+0x162>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	691b      	ldr	r3, [r3, #16]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d101      	bne.n	8004f04 <print_value+0xf4>
            {
                return false;
 8004f00:	2300      	movs	r3, #0
 8004f02:	e036      	b.n	8004f72 <print_value+0x162>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	691b      	ldr	r3, [r3, #16]
 8004f08:	0018      	movs	r0, r3
 8004f0a:	f7fb f907 	bl	800011c <strlen>
 8004f0e:	0003      	movs	r3, r0
 8004f10:	3301      	adds	r3, #1
 8004f12:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 8004f14:	68ba      	ldr	r2, [r7, #8]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	0011      	movs	r1, r2
 8004f1a:	0018      	movs	r0, r3
 8004f1c:	f7ff fae0 	bl	80044e0 <ensure>
 8004f20:	0003      	movs	r3, r0
 8004f22:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <print_value+0x11e>
            {
                return false;
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	e021      	b.n	8004f72 <print_value+0x162>
            }
            memcpy(output, item->valuestring, raw_length);
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	6919      	ldr	r1, [r3, #16]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	0018      	movs	r0, r3
 8004f38:	f009 f894 	bl	800e064 <memcpy>
            return true;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e018      	b.n	8004f72 <print_value+0x162>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8004f40:	683a      	ldr	r2, [r7, #0]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	0011      	movs	r1, r2
 8004f46:	0018      	movs	r0, r3
 8004f48:	f7ff fea6 	bl	8004c98 <print_string>
 8004f4c:	0003      	movs	r3, r0
 8004f4e:	e010      	b.n	8004f72 <print_value+0x162>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	0011      	movs	r1, r2
 8004f56:	0018      	movs	r0, r3
 8004f58:	f000 f818 	bl	8004f8c <print_array>
 8004f5c:	0003      	movs	r3, r0
 8004f5e:	e008      	b.n	8004f72 <print_value+0x162>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8004f60:	683a      	ldr	r2, [r7, #0]
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	0011      	movs	r1, r2
 8004f66:	0018      	movs	r0, r3
 8004f68:	f000 f89e 	bl	80050a8 <print_object>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	e000      	b.n	8004f72 <print_value+0x162>

        default:
            return false;
 8004f70:	2300      	movs	r3, #0
    }
}
 8004f72:	0018      	movs	r0, r3
 8004f74:	46bd      	mov	sp, r7
 8004f76:	b004      	add	sp, #16
 8004f78:	bd80      	pop	{r7, pc}
 8004f7a:	46c0      	nop			; (mov r8, r8)
 8004f7c:	080112cc 	.word	0x080112cc
 8004f80:	08010ffc 	.word	0x08010ffc
 8004f84:	08011020 	.word	0x08011020
 8004f88:	08011028 	.word	0x08011028

08004f8c <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
 8004f94:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 8004f96:	2300      	movs	r3, #0
 8004f98:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	689b      	ldr	r3, [r3, #8]
 8004fa2:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 8004fa4:	683b      	ldr	r3, [r7, #0]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <print_array+0x22>
    {
        return false;
 8004faa:	2300      	movs	r3, #0
 8004fac:	e078      	b.n	80050a0 <print_array+0x114>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	2101      	movs	r1, #1
 8004fb2:	0018      	movs	r0, r3
 8004fb4:	f7ff fa94 	bl	80044e0 <ensure>
 8004fb8:	0003      	movs	r3, r0
 8004fba:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d101      	bne.n	8004fc6 <print_array+0x3a>
    {
        return false;
 8004fc2:	2300      	movs	r3, #0
 8004fc4:	e06c      	b.n	80050a0 <print_array+0x114>
    }

    *output_pointer = '[';
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	225b      	movs	r2, #91	; 0x5b
 8004fca:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 8004fcc:	683b      	ldr	r3, [r7, #0]
 8004fce:	689b      	ldr	r3, [r3, #8]
 8004fd0:	1c5a      	adds	r2, r3, #1
 8004fd2:	683b      	ldr	r3, [r7, #0]
 8004fd4:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	68db      	ldr	r3, [r3, #12]
 8004fda:	1c5a      	adds	r2, r3, #1
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 8004fe0:	e041      	b.n	8005066 <print_array+0xda>
    {
        if (!print_value(current_element, output_buffer))
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	693b      	ldr	r3, [r7, #16]
 8004fe6:	0011      	movs	r1, r2
 8004fe8:	0018      	movs	r0, r3
 8004fea:	f7ff ff11 	bl	8004e10 <print_value>
 8004fee:	1e03      	subs	r3, r0, #0
 8004ff0:	d101      	bne.n	8004ff6 <print_array+0x6a>
        {
            return false;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	e054      	b.n	80050a0 <print_array+0x114>
        }
        update_offset(output_buffer);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	0018      	movs	r0, r3
 8004ffa:	f7ff fb11 	bl	8004620 <update_offset>
        if (current_element->next)
 8004ffe:	693b      	ldr	r3, [r7, #16]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d02c      	beq.n	8005060 <print_array+0xd4>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 8005006:	683b      	ldr	r3, [r7, #0]
 8005008:	695b      	ldr	r3, [r3, #20]
 800500a:	2b00      	cmp	r3, #0
 800500c:	d001      	beq.n	8005012 <print_array+0x86>
 800500e:	2302      	movs	r3, #2
 8005010:	e000      	b.n	8005014 <print_array+0x88>
 8005012:	2301      	movs	r3, #1
 8005014:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	0011      	movs	r1, r2
 800501e:	0018      	movs	r0, r3
 8005020:	f7ff fa5e 	bl	80044e0 <ensure>
 8005024:	0003      	movs	r3, r0
 8005026:	617b      	str	r3, [r7, #20]
            if (output_pointer == NULL)
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d101      	bne.n	8005032 <print_array+0xa6>
            {
                return false;
 800502e:	2300      	movs	r3, #0
 8005030:	e036      	b.n	80050a0 <print_array+0x114>
            }
            *output_pointer++ = ',';
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	1c5a      	adds	r2, r3, #1
 8005036:	617a      	str	r2, [r7, #20]
 8005038:	222c      	movs	r2, #44	; 0x2c
 800503a:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	2b00      	cmp	r3, #0
 8005042:	d004      	beq.n	800504e <print_array+0xc2>
            {
                *output_pointer++ = ' ';
 8005044:	697b      	ldr	r3, [r7, #20]
 8005046:	1c5a      	adds	r2, r3, #1
 8005048:	617a      	str	r2, [r7, #20]
 800504a:	2220      	movs	r2, #32
 800504c:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 800504e:	697b      	ldr	r3, [r7, #20]
 8005050:	2200      	movs	r2, #0
 8005052:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	18d2      	adds	r2, r2, r3
 800505c:	683b      	ldr	r3, [r7, #0]
 800505e:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8005060:	693b      	ldr	r3, [r7, #16]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 8005066:	693b      	ldr	r3, [r7, #16]
 8005068:	2b00      	cmp	r3, #0
 800506a:	d1ba      	bne.n	8004fe2 <print_array+0x56>
    }

    output_pointer = ensure(output_buffer, 2);
 800506c:	683b      	ldr	r3, [r7, #0]
 800506e:	2102      	movs	r1, #2
 8005070:	0018      	movs	r0, r3
 8005072:	f7ff fa35 	bl	80044e0 <ensure>
 8005076:	0003      	movs	r3, r0
 8005078:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <print_array+0xf8>
    {
        return false;
 8005080:	2300      	movs	r3, #0
 8005082:	e00d      	b.n	80050a0 <print_array+0x114>
    }
    *output_pointer++ = ']';
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	1c5a      	adds	r2, r3, #1
 8005088:	617a      	str	r2, [r7, #20]
 800508a:	225d      	movs	r2, #93	; 0x5d
 800508c:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 800508e:	697b      	ldr	r3, [r7, #20]
 8005090:	2200      	movs	r2, #0
 8005092:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 8005094:	683b      	ldr	r3, [r7, #0]
 8005096:	68db      	ldr	r3, [r3, #12]
 8005098:	1e5a      	subs	r2, r3, #1
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	60da      	str	r2, [r3, #12]

    return true;
 800509e:	2301      	movs	r3, #1
}
 80050a0:	0018      	movs	r0, r3
 80050a2:	46bd      	mov	sp, r7
 80050a4:	b006      	add	sp, #24
 80050a6:	bd80      	pop	{r7, pc}

080050a8 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 80050a8:	b580      	push	{r7, lr}
 80050aa:	b088      	sub	sp, #32
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
 80050b0:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80050b2:	2300      	movs	r3, #0
 80050b4:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 80050b6:	2300      	movs	r3, #0
 80050b8:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	689b      	ldr	r3, [r3, #8]
 80050be:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 80050c0:	683b      	ldr	r3, [r7, #0]
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <print_object+0x22>
    {
        return false;
 80050c6:	2300      	movs	r3, #0
 80050c8:	e116      	b.n	80052f8 <print_object+0x250>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 80050ca:	683b      	ldr	r3, [r7, #0]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d001      	beq.n	80050d6 <print_object+0x2e>
 80050d2:	2302      	movs	r3, #2
 80050d4:	e000      	b.n	80050d8 <print_object+0x30>
 80050d6:	2301      	movs	r3, #1
 80050d8:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	1c5a      	adds	r2, r3, #1
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	0011      	movs	r1, r2
 80050e2:	0018      	movs	r0, r3
 80050e4:	f7ff f9fc 	bl	80044e0 <ensure>
 80050e8:	0003      	movs	r3, r0
 80050ea:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d101      	bne.n	80050f6 <print_object+0x4e>
    {
        return false;
 80050f2:	2300      	movs	r3, #0
 80050f4:	e100      	b.n	80052f8 <print_object+0x250>
    }

    *output_pointer++ = '{';
 80050f6:	69fb      	ldr	r3, [r7, #28]
 80050f8:	1c5a      	adds	r2, r3, #1
 80050fa:	61fa      	str	r2, [r7, #28]
 80050fc:	227b      	movs	r2, #123	; 0x7b
 80050fe:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8005100:	683b      	ldr	r3, [r7, #0]
 8005102:	68db      	ldr	r3, [r3, #12]
 8005104:	1c5a      	adds	r2, r3, #1
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	695b      	ldr	r3, [r3, #20]
 800510e:	2b00      	cmp	r3, #0
 8005110:	d004      	beq.n	800511c <print_object+0x74>
    {
        *output_pointer++ = '\n';
 8005112:	69fb      	ldr	r3, [r7, #28]
 8005114:	1c5a      	adds	r2, r3, #1
 8005116:	61fa      	str	r2, [r7, #28]
 8005118:	220a      	movs	r2, #10
 800511a:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	689a      	ldr	r2, [r3, #8]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	18d2      	adds	r2, r2, r3
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	609a      	str	r2, [r3, #8]

    while (current_item)
 8005128:	e0aa      	b.n	8005280 <print_object+0x1d8>
    {
        if (output_buffer->format)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	695b      	ldr	r3, [r3, #20]
 800512e:	2b00      	cmp	r3, #0
 8005130:	d024      	beq.n	800517c <print_object+0xd4>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68da      	ldr	r2, [r3, #12]
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	0011      	movs	r1, r2
 800513a:	0018      	movs	r0, r3
 800513c:	f7ff f9d0 	bl	80044e0 <ensure>
 8005140:	0003      	movs	r3, r0
 8005142:	61fb      	str	r3, [r7, #28]
            if (output_pointer == NULL)
 8005144:	69fb      	ldr	r3, [r7, #28]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d101      	bne.n	800514e <print_object+0xa6>
            {
                return false;
 800514a:	2300      	movs	r3, #0
 800514c:	e0d4      	b.n	80052f8 <print_object+0x250>
            }
            for (i = 0; i < output_buffer->depth; i++)
 800514e:	2300      	movs	r3, #0
 8005150:	617b      	str	r3, [r7, #20]
 8005152:	e007      	b.n	8005164 <print_object+0xbc>
            {
                *output_pointer++ = '\t';
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	1c5a      	adds	r2, r3, #1
 8005158:	61fa      	str	r2, [r7, #28]
 800515a:	2209      	movs	r2, #9
 800515c:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	3301      	adds	r3, #1
 8005162:	617b      	str	r3, [r7, #20]
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	68db      	ldr	r3, [r3, #12]
 8005168:	697a      	ldr	r2, [r7, #20]
 800516a:	429a      	cmp	r2, r3
 800516c:	d3f2      	bcc.n	8005154 <print_object+0xac>
            }
            output_buffer->offset += output_buffer->depth;
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	689a      	ldr	r2, [r3, #8]
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	68db      	ldr	r3, [r3, #12]
 8005176:	18d2      	adds	r2, r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 800517c:	69bb      	ldr	r3, [r7, #24]
 800517e:	6a1b      	ldr	r3, [r3, #32]
 8005180:	683a      	ldr	r2, [r7, #0]
 8005182:	0011      	movs	r1, r2
 8005184:	0018      	movs	r0, r3
 8005186:	f7ff fc85 	bl	8004a94 <print_string_ptr>
 800518a:	1e03      	subs	r3, r0, #0
 800518c:	d101      	bne.n	8005192 <print_object+0xea>
        {
            return false;
 800518e:	2300      	movs	r3, #0
 8005190:	e0b2      	b.n	80052f8 <print_object+0x250>
        }
        update_offset(output_buffer);
 8005192:	683b      	ldr	r3, [r7, #0]
 8005194:	0018      	movs	r0, r3
 8005196:	f7ff fa43 	bl	8004620 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	695b      	ldr	r3, [r3, #20]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d001      	beq.n	80051a6 <print_object+0xfe>
 80051a2:	2302      	movs	r3, #2
 80051a4:	e000      	b.n	80051a8 <print_object+0x100>
 80051a6:	2301      	movs	r3, #1
 80051a8:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 80051aa:	68fa      	ldr	r2, [r7, #12]
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	0011      	movs	r1, r2
 80051b0:	0018      	movs	r0, r3
 80051b2:	f7ff f995 	bl	80044e0 <ensure>
 80051b6:	0003      	movs	r3, r0
 80051b8:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d101      	bne.n	80051c4 <print_object+0x11c>
        {
            return false;
 80051c0:	2300      	movs	r3, #0
 80051c2:	e099      	b.n	80052f8 <print_object+0x250>
        }
        *output_pointer++ = ':';
 80051c4:	69fb      	ldr	r3, [r7, #28]
 80051c6:	1c5a      	adds	r2, r3, #1
 80051c8:	61fa      	str	r2, [r7, #28]
 80051ca:	223a      	movs	r2, #58	; 0x3a
 80051cc:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 80051ce:	683b      	ldr	r3, [r7, #0]
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d004      	beq.n	80051e0 <print_object+0x138>
        {
            *output_pointer++ = '\t';
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	61fa      	str	r2, [r7, #28]
 80051dc:	2209      	movs	r2, #9
 80051de:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	689a      	ldr	r2, [r3, #8]
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	18d2      	adds	r2, r2, r3
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 80051ec:	683a      	ldr	r2, [r7, #0]
 80051ee:	69bb      	ldr	r3, [r7, #24]
 80051f0:	0011      	movs	r1, r2
 80051f2:	0018      	movs	r0, r3
 80051f4:	f7ff fe0c 	bl	8004e10 <print_value>
 80051f8:	1e03      	subs	r3, r0, #0
 80051fa:	d101      	bne.n	8005200 <print_object+0x158>
        {
            return false;
 80051fc:	2300      	movs	r3, #0
 80051fe:	e07b      	b.n	80052f8 <print_object+0x250>
        }
        update_offset(output_buffer);
 8005200:	683b      	ldr	r3, [r7, #0]
 8005202:	0018      	movs	r0, r3
 8005204:	f7ff fa0c 	bl	8004620 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	695b      	ldr	r3, [r3, #20]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d001      	beq.n	8005214 <print_object+0x16c>
 8005210:	2201      	movs	r2, #1
 8005212:	e000      	b.n	8005216 <print_object+0x16e>
 8005214:	2200      	movs	r2, #0
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	2b00      	cmp	r3, #0
 800521c:	d001      	beq.n	8005222 <print_object+0x17a>
 800521e:	2301      	movs	r3, #1
 8005220:	e000      	b.n	8005224 <print_object+0x17c>
 8005222:	2300      	movs	r3, #0
 8005224:	18d3      	adds	r3, r2, r3
 8005226:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	1c5a      	adds	r2, r3, #1
 800522c:	683b      	ldr	r3, [r7, #0]
 800522e:	0011      	movs	r1, r2
 8005230:	0018      	movs	r0, r3
 8005232:	f7ff f955 	bl	80044e0 <ensure>
 8005236:	0003      	movs	r3, r0
 8005238:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 800523a:	69fb      	ldr	r3, [r7, #28]
 800523c:	2b00      	cmp	r3, #0
 800523e:	d101      	bne.n	8005244 <print_object+0x19c>
        {
            return false;
 8005240:	2300      	movs	r3, #0
 8005242:	e059      	b.n	80052f8 <print_object+0x250>
        }
        if (current_item->next)
 8005244:	69bb      	ldr	r3, [r7, #24]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d004      	beq.n	8005256 <print_object+0x1ae>
        {
            *output_pointer++ = ',';
 800524c:	69fb      	ldr	r3, [r7, #28]
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	61fa      	str	r2, [r7, #28]
 8005252:	222c      	movs	r2, #44	; 0x2c
 8005254:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	695b      	ldr	r3, [r3, #20]
 800525a:	2b00      	cmp	r3, #0
 800525c:	d004      	beq.n	8005268 <print_object+0x1c0>
        {
            *output_pointer++ = '\n';
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	1c5a      	adds	r2, r3, #1
 8005262:	61fa      	str	r2, [r7, #28]
 8005264:	220a      	movs	r2, #10
 8005266:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8005268:	69fb      	ldr	r3, [r7, #28]
 800526a:	2200      	movs	r2, #0
 800526c:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	689a      	ldr	r2, [r3, #8]
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	18d2      	adds	r2, r2, r3
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 800527a:	69bb      	ldr	r3, [r7, #24]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d000      	beq.n	8005288 <print_object+0x1e0>
 8005286:	e750      	b.n	800512a <print_object+0x82>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d003      	beq.n	8005298 <print_object+0x1f0>
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	68db      	ldr	r3, [r3, #12]
 8005294:	3301      	adds	r3, #1
 8005296:	e000      	b.n	800529a <print_object+0x1f2>
 8005298:	2302      	movs	r3, #2
 800529a:	683a      	ldr	r2, [r7, #0]
 800529c:	0019      	movs	r1, r3
 800529e:	0010      	movs	r0, r2
 80052a0:	f7ff f91e 	bl	80044e0 <ensure>
 80052a4:	0003      	movs	r3, r0
 80052a6:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 80052a8:	69fb      	ldr	r3, [r7, #28]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d101      	bne.n	80052b2 <print_object+0x20a>
    {
        return false;
 80052ae:	2300      	movs	r3, #0
 80052b0:	e022      	b.n	80052f8 <print_object+0x250>
    }
    if (output_buffer->format)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	695b      	ldr	r3, [r3, #20]
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d010      	beq.n	80052dc <print_object+0x234>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80052ba:	2300      	movs	r3, #0
 80052bc:	613b      	str	r3, [r7, #16]
 80052be:	e007      	b.n	80052d0 <print_object+0x228>
        {
            *output_pointer++ = '\t';
 80052c0:	69fb      	ldr	r3, [r7, #28]
 80052c2:	1c5a      	adds	r2, r3, #1
 80052c4:	61fa      	str	r2, [r7, #28]
 80052c6:	2209      	movs	r2, #9
 80052c8:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80052ca:	693b      	ldr	r3, [r7, #16]
 80052cc:	3301      	adds	r3, #1
 80052ce:	613b      	str	r3, [r7, #16]
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	68db      	ldr	r3, [r3, #12]
 80052d4:	3b01      	subs	r3, #1
 80052d6:	693a      	ldr	r2, [r7, #16]
 80052d8:	429a      	cmp	r2, r3
 80052da:	d3f1      	bcc.n	80052c0 <print_object+0x218>
        }
    }
    *output_pointer++ = '}';
 80052dc:	69fb      	ldr	r3, [r7, #28]
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	61fa      	str	r2, [r7, #28]
 80052e2:	227d      	movs	r2, #125	; 0x7d
 80052e4:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80052e6:	69fb      	ldr	r3, [r7, #28]
 80052e8:	2200      	movs	r2, #0
 80052ea:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80052ec:	683b      	ldr	r3, [r7, #0]
 80052ee:	68db      	ldr	r3, [r3, #12]
 80052f0:	1e5a      	subs	r2, r3, #1
 80052f2:	683b      	ldr	r3, [r7, #0]
 80052f4:	60da      	str	r2, [r3, #12]

    return true;
 80052f6:	2301      	movs	r3, #1
}
 80052f8:	0018      	movs	r0, r3
 80052fa:	46bd      	mov	sp, r7
 80052fc:	b008      	add	sp, #32
 80052fe:	bd80      	pop	{r7, pc}

08005300 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8005300:	b580      	push	{r7, lr}
 8005302:	b082      	sub	sp, #8
 8005304:	af00      	add	r7, sp, #0
 8005306:	6078      	str	r0, [r7, #4]
 8005308:	6039      	str	r1, [r7, #0]
    prev->next = item;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	683a      	ldr	r2, [r7, #0]
 800530e:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8005310:	683b      	ldr	r3, [r7, #0]
 8005312:	687a      	ldr	r2, [r7, #4]
 8005314:	605a      	str	r2, [r3, #4]
}
 8005316:	46c0      	nop			; (mov r8, r8)
 8005318:	46bd      	mov	sp, r7
 800531a:	b002      	add	sp, #8
 800531c:	bd80      	pop	{r7, pc}

0800531e <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b084      	sub	sp, #16
 8005322:	af00      	add	r7, sp, #0
 8005324:	6078      	str	r0, [r7, #4]
 8005326:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8005328:	2300      	movs	r3, #0
 800532a:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 800532c:	683b      	ldr	r3, [r7, #0]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d006      	beq.n	8005340 <add_item_to_array+0x22>
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2b00      	cmp	r3, #0
 8005336:	d003      	beq.n	8005340 <add_item_to_array+0x22>
 8005338:	687a      	ldr	r2, [r7, #4]
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	429a      	cmp	r2, r3
 800533e:	d101      	bne.n	8005344 <add_item_to_array+0x26>
    {
        return false;
 8005340:	2300      	movs	r3, #0
 8005342:	e01f      	b.n	8005384 <add_item_to_array+0x66>
    }

    child = array->child;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	689b      	ldr	r3, [r3, #8]
 8005348:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d109      	bne.n	8005364 <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	683a      	ldr	r2, [r7, #0]
 8005354:	609a      	str	r2, [r3, #8]
        item->prev = item;
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	683a      	ldr	r2, [r7, #0]
 800535a:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	2200      	movs	r2, #0
 8005360:	601a      	str	r2, [r3, #0]
 8005362:	e00e      	b.n	8005382 <add_item_to_array+0x64>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	2b00      	cmp	r3, #0
 800536a:	d00a      	beq.n	8005382 <add_item_to_array+0x64>
        {
            suffix_object(child->prev, item);
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	685b      	ldr	r3, [r3, #4]
 8005370:	683a      	ldr	r2, [r7, #0]
 8005372:	0011      	movs	r1, r2
 8005374:	0018      	movs	r0, r3
 8005376:	f7ff ffc3 	bl	8005300 <suffix_object>
            array->child->prev = item;
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	683a      	ldr	r2, [r7, #0]
 8005380:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 8005382:	2301      	movs	r3, #1
}
 8005384:	0018      	movs	r0, r3
 8005386:	46bd      	mov	sp, r7
 8005388:	b004      	add	sp, #16
 800538a:	bd80      	pop	{r7, pc}

0800538c <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b082      	sub	sp, #8
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
    return (void*)string;
 8005394:	687b      	ldr	r3, [r7, #4]
}
 8005396:	0018      	movs	r0, r3
 8005398:	46bd      	mov	sp, r7
 800539a:	b002      	add	sp, #8
 800539c:	bd80      	pop	{r7, pc}
	...

080053a0 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80053a0:	b580      	push	{r7, lr}
 80053a2:	b086      	sub	sp, #24
 80053a4:	af00      	add	r7, sp, #0
 80053a6:	60f8      	str	r0, [r7, #12]
 80053a8:	60b9      	str	r1, [r7, #8]
 80053aa:	607a      	str	r2, [r7, #4]
 80053ac:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80053ae:	2300      	movs	r3, #0
 80053b0:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 80053b2:	2300      	movs	r3, #0
 80053b4:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d009      	beq.n	80053d0 <add_item_to_object+0x30>
 80053bc:	68bb      	ldr	r3, [r7, #8]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <add_item_to_object+0x30>
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d003      	beq.n	80053d0 <add_item_to_object+0x30>
 80053c8:	68fa      	ldr	r2, [r7, #12]
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d101      	bne.n	80053d4 <add_item_to_object+0x34>
    {
        return false;
 80053d0:	2300      	movs	r3, #0
 80053d2:	e03e      	b.n	8005452 <add_item_to_object+0xb2>
    }

    if (constant_key)
 80053d4:	6a3b      	ldr	r3, [r7, #32]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <add_item_to_object+0x54>
    {
        new_key = (char*)cast_away_const(string);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	0018      	movs	r0, r3
 80053de:	f7ff ffd5 	bl	800538c <cast_away_const>
 80053e2:	0003      	movs	r3, r0
 80053e4:	617b      	str	r3, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2280      	movs	r2, #128	; 0x80
 80053ec:	0092      	lsls	r2, r2, #2
 80053ee:	4313      	orrs	r3, r2
 80053f0:	613b      	str	r3, [r7, #16]
 80053f2:	e011      	b.n	8005418 <add_item_to_object+0x78>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80053f4:	683a      	ldr	r2, [r7, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	0011      	movs	r1, r2
 80053fa:	0018      	movs	r0, r3
 80053fc:	f7fe ffdb 	bl	80043b6 <cJSON_strdup>
 8005400:	0003      	movs	r3, r0
 8005402:	617b      	str	r3, [r7, #20]
        if (new_key == NULL)
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d101      	bne.n	800540e <add_item_to_object+0x6e>
        {
            return false;
 800540a:	2300      	movs	r3, #0
 800540c:	e021      	b.n	8005452 <add_item_to_object+0xb2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	68db      	ldr	r3, [r3, #12]
 8005412:	4a12      	ldr	r2, [pc, #72]	; (800545c <add_item_to_object+0xbc>)
 8005414:	4013      	ands	r3, r2
 8005416:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	68da      	ldr	r2, [r3, #12]
 800541c:	2380      	movs	r3, #128	; 0x80
 800541e:	009b      	lsls	r3, r3, #2
 8005420:	4013      	ands	r3, r2
 8005422:	d109      	bne.n	8005438 <add_item_to_object+0x98>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d005      	beq.n	8005438 <add_item_to_object+0x98>
    {
        hooks->deallocate(item->string);
 800542c:	683b      	ldr	r3, [r7, #0]
 800542e:	685a      	ldr	r2, [r3, #4]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	6a1b      	ldr	r3, [r3, #32]
 8005434:	0018      	movs	r0, r3
 8005436:	4790      	blx	r2
    }

    item->string = new_key;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	697a      	ldr	r2, [r7, #20]
 800543c:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	0011      	movs	r1, r2
 800544a:	0018      	movs	r0, r3
 800544c:	f7ff ff67 	bl	800531e <add_item_to_array>
 8005450:	0003      	movs	r3, r0
}
 8005452:	0018      	movs	r0, r3
 8005454:	46bd      	mov	sp, r7
 8005456:	b006      	add	sp, #24
 8005458:	bd80      	pop	{r7, pc}
 800545a:	46c0      	nop			; (mov r8, r8)
 800545c:	fffffdff 	.word	0xfffffdff

08005460 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, double number)
{
 8005460:	b590      	push	{r4, r7, lr}
 8005462:	b089      	sub	sp, #36	; 0x24
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	60b9      	str	r1, [r7, #8]
 800546a:	603a      	str	r2, [r7, #0]
 800546c:	607b      	str	r3, [r7, #4]
//   if(number==0)
//	{
//		number=0.00001;
//	}//maulin
    cJSON *number_item = cJSON_CreateNumber(number);
 800546e:	683a      	ldr	r2, [r7, #0]
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	0010      	movs	r0, r2
 8005474:	0019      	movs	r1, r3
 8005476:	f000 f83d 	bl	80054f4 <cJSON_CreateNumber>
 800547a:	0003      	movs	r3, r0
 800547c:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 800547e:	4b0a      	ldr	r3, [pc, #40]	; (80054a8 <cJSON_AddNumberToObject+0x48>)
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	68b9      	ldr	r1, [r7, #8]
 8005484:	68f8      	ldr	r0, [r7, #12]
 8005486:	2400      	movs	r4, #0
 8005488:	9400      	str	r4, [sp, #0]
 800548a:	f7ff ff89 	bl	80053a0 <add_item_to_object>
 800548e:	1e03      	subs	r3, r0, #0
 8005490:	d001      	beq.n	8005496 <cJSON_AddNumberToObject+0x36>
    {
        return number_item;
 8005492:	697b      	ldr	r3, [r7, #20]
 8005494:	e004      	b.n	80054a0 <cJSON_AddNumberToObject+0x40>
    }

    cJSON_Delete(number_item);
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	0018      	movs	r0, r3
 800549a:	f7fe ffd1 	bl	8004440 <cJSON_Delete>
    return NULL;
 800549e:	2300      	movs	r3, #0
}
 80054a0:	0018      	movs	r0, r3
 80054a2:	46bd      	mov	sp, r7
 80054a4:	b007      	add	sp, #28
 80054a6:	bd90      	pop	{r4, r7, pc}
 80054a8:	20000000 	.word	0x20000000

080054ac <cJSON_AddStringToObject>:

CJSON_PUBLIC(cJSON*) cJSON_AddStringToObject(cJSON * const object, const char * const name, const char * const string)
{
 80054ac:	b590      	push	{r4, r7, lr}
 80054ae:	b089      	sub	sp, #36	; 0x24
 80054b0:	af02      	add	r7, sp, #8
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
    cJSON *string_item = cJSON_CreateString(string);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	0018      	movs	r0, r3
 80054bc:	f000 f860 	bl	8005580 <cJSON_CreateString>
 80054c0:	0003      	movs	r3, r0
 80054c2:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, string_item, &global_hooks, false))
 80054c4:	4b0a      	ldr	r3, [pc, #40]	; (80054f0 <cJSON_AddStringToObject+0x44>)
 80054c6:	697a      	ldr	r2, [r7, #20]
 80054c8:	68b9      	ldr	r1, [r7, #8]
 80054ca:	68f8      	ldr	r0, [r7, #12]
 80054cc:	2400      	movs	r4, #0
 80054ce:	9400      	str	r4, [sp, #0]
 80054d0:	f7ff ff66 	bl	80053a0 <add_item_to_object>
 80054d4:	1e03      	subs	r3, r0, #0
 80054d6:	d001      	beq.n	80054dc <cJSON_AddStringToObject+0x30>
    {
        return string_item;
 80054d8:	697b      	ldr	r3, [r7, #20]
 80054da:	e004      	b.n	80054e6 <cJSON_AddStringToObject+0x3a>
    }

    cJSON_Delete(string_item);
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	0018      	movs	r0, r3
 80054e0:	f7fe ffae 	bl	8004440 <cJSON_Delete>
    return NULL;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	0018      	movs	r0, r3
 80054e8:	46bd      	mov	sp, r7
 80054ea:	b007      	add	sp, #28
 80054ec:	bd90      	pop	{r4, r7, pc}
 80054ee:	46c0      	nop			; (mov r8, r8)
 80054f0:	20000000 	.word	0x20000000

080054f4 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b084      	sub	sp, #16
 80054f8:	af00      	add	r7, sp, #0
 80054fa:	6038      	str	r0, [r7, #0]
 80054fc:	6079      	str	r1, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80054fe:	4b1b      	ldr	r3, [pc, #108]	; (800556c <cJSON_CreateNumber+0x78>)
 8005500:	0018      	movs	r0, r3
 8005502:	f7fe ff84 	bl	800440e <cJSON_New_Item>
 8005506:	0003      	movs	r3, r0
 8005508:	60fb      	str	r3, [r7, #12]
    if(item)
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	2b00      	cmp	r3, #0
 800550e:	d027      	beq.n	8005560 <cJSON_CreateNumber+0x6c>
    {
        item->type = cJSON_Number;
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	2208      	movs	r2, #8
 8005514:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 8005516:	68f9      	ldr	r1, [r7, #12]
 8005518:	683a      	ldr	r2, [r7, #0]
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	618a      	str	r2, [r1, #24]
 800551e:	61cb      	str	r3, [r1, #28]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 8005520:	4a13      	ldr	r2, [pc, #76]	; (8005570 <cJSON_CreateNumber+0x7c>)
 8005522:	4b14      	ldr	r3, [pc, #80]	; (8005574 <cJSON_CreateNumber+0x80>)
 8005524:	6838      	ldr	r0, [r7, #0]
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	f7fa ffbe 	bl	80004a8 <__aeabi_dcmpge>
 800552c:	1e03      	subs	r3, r0, #0
 800552e:	d003      	beq.n	8005538 <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	4a11      	ldr	r2, [pc, #68]	; (8005578 <cJSON_CreateNumber+0x84>)
 8005534:	615a      	str	r2, [r3, #20]
 8005536:	e013      	b.n	8005560 <cJSON_CreateNumber+0x6c>
        }
        else if (num <= (double)INT_MIN)
 8005538:	2200      	movs	r2, #0
 800553a:	4b10      	ldr	r3, [pc, #64]	; (800557c <cJSON_CreateNumber+0x88>)
 800553c:	6838      	ldr	r0, [r7, #0]
 800553e:	6879      	ldr	r1, [r7, #4]
 8005540:	f7fa ff9e 	bl	8000480 <__aeabi_dcmple>
 8005544:	1e03      	subs	r3, r0, #0
 8005546:	d004      	beq.n	8005552 <cJSON_CreateNumber+0x5e>
        {
            item->valueint = INT_MIN;
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	2280      	movs	r2, #128	; 0x80
 800554c:	0612      	lsls	r2, r2, #24
 800554e:	615a      	str	r2, [r3, #20]
 8005550:	e006      	b.n	8005560 <cJSON_CreateNumber+0x6c>
        }
        else
        {
            item->valueint = (int)num;
 8005552:	6838      	ldr	r0, [r7, #0]
 8005554:	6879      	ldr	r1, [r7, #4]
 8005556:	f7fc fedf 	bl	8002318 <__aeabi_d2iz>
 800555a:	0002      	movs	r2, r0
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8005560:	68fb      	ldr	r3, [r7, #12]
}
 8005562:	0018      	movs	r0, r3
 8005564:	46bd      	mov	sp, r7
 8005566:	b004      	add	sp, #16
 8005568:	bd80      	pop	{r7, pc}
 800556a:	46c0      	nop			; (mov r8, r8)
 800556c:	20000000 	.word	0x20000000
 8005570:	ffc00000 	.word	0xffc00000
 8005574:	41dfffff 	.word	0x41dfffff
 8005578:	7fffffff 	.word	0x7fffffff
 800557c:	c1e00000 	.word	0xc1e00000

08005580 <cJSON_CreateString>:

CJSON_PUBLIC(cJSON *) cJSON_CreateString(const char *string)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 8005588:	4b11      	ldr	r3, [pc, #68]	; (80055d0 <cJSON_CreateString+0x50>)
 800558a:	0018      	movs	r0, r3
 800558c:	f7fe ff3f 	bl	800440e <cJSON_New_Item>
 8005590:	0003      	movs	r3, r0
 8005592:	60fb      	str	r3, [r7, #12]
    if(item)
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d015      	beq.n	80055c6 <cJSON_CreateString+0x46>
    {
        item->type = cJSON_String;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	2210      	movs	r2, #16
 800559e:	60da      	str	r2, [r3, #12]
        item->valuestring = (char*)cJSON_strdup((const unsigned char*)string, &global_hooks);
 80055a0:	4a0b      	ldr	r2, [pc, #44]	; (80055d0 <cJSON_CreateString+0x50>)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	0011      	movs	r1, r2
 80055a6:	0018      	movs	r0, r3
 80055a8:	f7fe ff05 	bl	80043b6 <cJSON_strdup>
 80055ac:	0002      	movs	r2, r0
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	611a      	str	r2, [r3, #16]
        if(!item->valuestring)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	691b      	ldr	r3, [r3, #16]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d105      	bne.n	80055c6 <cJSON_CreateString+0x46>
        {
            cJSON_Delete(item);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	0018      	movs	r0, r3
 80055be:	f7fe ff3f 	bl	8004440 <cJSON_Delete>
            return NULL;
 80055c2:	2300      	movs	r3, #0
 80055c4:	e000      	b.n	80055c8 <cJSON_CreateString+0x48>
        }
    }

    return item;
 80055c6:	68fb      	ldr	r3, [r7, #12]
}
 80055c8:	0018      	movs	r0, r3
 80055ca:	46bd      	mov	sp, r7
 80055cc:	b004      	add	sp, #16
 80055ce:	bd80      	pop	{r7, pc}
 80055d0:	20000000 	.word	0x20000000

080055d4 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 80055d4:	b580      	push	{r7, lr}
 80055d6:	b082      	sub	sp, #8
 80055d8:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 80055da:	4b08      	ldr	r3, [pc, #32]	; (80055fc <cJSON_CreateObject+0x28>)
 80055dc:	0018      	movs	r0, r3
 80055de:	f7fe ff16 	bl	800440e <cJSON_New_Item>
 80055e2:	0003      	movs	r3, r0
 80055e4:	607b      	str	r3, [r7, #4]
    if (item)
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d002      	beq.n	80055f2 <cJSON_CreateObject+0x1e>
    {
        item->type = cJSON_Object;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2240      	movs	r2, #64	; 0x40
 80055f0:	60da      	str	r2, [r3, #12]
    }

    return item;
 80055f2:	687b      	ldr	r3, [r7, #4]
}
 80055f4:	0018      	movs	r0, r3
 80055f6:	46bd      	mov	sp, r7
 80055f8:	b002      	add	sp, #8
 80055fa:	bd80      	pop	{r7, pc}
 80055fc:	20000000 	.word	0x20000000

08005600 <Telemetry_timer_cb>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Telemetry_timer_cb( TimerHandle_t xTimer )
{
 8005600:	b580      	push	{r7, lr}
 8005602:	b082      	sub	sp, #8
 8005604:	af00      	add	r7, sp, #0
 8005606:	6078      	str	r0, [r7, #4]
	telemetry_send_time=1;
 8005608:	4b06      	ldr	r3, [pc, #24]	; (8005624 <Telemetry_timer_cb+0x24>)
 800560a:	2201      	movs	r2, #1
 800560c:	701a      	strb	r2, [r3, #0]
	Gps_fetch++;
 800560e:	4b06      	ldr	r3, [pc, #24]	; (8005628 <Telemetry_timer_cb+0x28>)
 8005610:	781b      	ldrb	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	b2da      	uxtb	r2, r3
 8005616:	4b04      	ldr	r3, [pc, #16]	; (8005628 <Telemetry_timer_cb+0x28>)
 8005618:	701a      	strb	r2, [r3, #0]
}
 800561a:	46c0      	nop			; (mov r8, r8)
 800561c:	46bd      	mov	sp, r7
 800561e:	b002      	add	sp, #8
 8005620:	bd80      	pop	{r7, pc}
 8005622:	46c0      	nop			; (mov r8, r8)
 8005624:	20000a98 	.word	0x20000a98
 8005628:	20000a99 	.word	0x20000a99

0800562c <HAL_UARTEx_RxEventCallback>:

void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800562c:	b580      	push	{r7, lr}
 800562e:	b084      	sub	sp, #16
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	000a      	movs	r2, r1
 8005636:	1cbb      	adds	r3, r7, #2
 8005638:	801a      	strh	r2, [r3, #0]
  if (huart->Instance == USART1)
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	4a11      	ldr	r2, [pc, #68]	; (8005684 <HAL_UARTEx_RxEventCallback+0x58>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d11a      	bne.n	800567a <HAL_UARTEx_RxEventCallback+0x4e>
  {
    EC200u_Rx_Len = Size;
 8005644:	4b10      	ldr	r3, [pc, #64]	; (8005688 <HAL_UARTEx_RxEventCallback+0x5c>)
 8005646:	1cba      	adds	r2, r7, #2
 8005648:	8812      	ldrh	r2, [r2, #0]
 800564a:	801a      	strh	r2, [r3, #0]

    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800564c:	2300      	movs	r3, #0
 800564e:	60fb      	str	r3, [r7, #12]
    vTaskNotifyGiveFromISR(ModemRx_TaskHandle, &xHigherPriorityTaskWoken);
 8005650:	4b0e      	ldr	r3, [pc, #56]	; (800568c <HAL_UARTEx_RxEventCallback+0x60>)
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	220c      	movs	r2, #12
 8005656:	18ba      	adds	r2, r7, r2
 8005658:	0011      	movs	r1, r2
 800565a:	0018      	movs	r0, r3
 800565c:	f005 ff34 	bl	800b4c8 <vTaskNotifyGiveFromISR>
    portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d003      	beq.n	800566e <HAL_UARTEx_RxEventCallback+0x42>
 8005666:	4b0a      	ldr	r3, [pc, #40]	; (8005690 <HAL_UARTEx_RxEventCallback+0x64>)
 8005668:	2280      	movs	r2, #128	; 0x80
 800566a:	0552      	lsls	r2, r2, #21
 800566c:	601a      	str	r2, [r3, #0]

//    memset(EC200u_Rx_Buff, 0, sizeof(EC200u_Rx_Buff));

    HAL_UARTEx_ReceiveToIdle_IT(huart, &EC200u_Rx_Buff[0], sizeof(EC200u_Rx_Buff));
 800566e:	4909      	ldr	r1, [pc, #36]	; (8005694 <HAL_UARTEx_RxEventCallback+0x68>)
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	22c8      	movs	r2, #200	; 0xc8
 8005674:	0018      	movs	r0, r3
 8005676:	f004 f9c9 	bl	8009a0c <HAL_UARTEx_ReceiveToIdle_IT>
  }
}
 800567a:	46c0      	nop			; (mov r8, r8)
 800567c:	46bd      	mov	sp, r7
 800567e:	b004      	add	sp, #16
 8005680:	bd80      	pop	{r7, pc}
 8005682:	46c0      	nop			; (mov r8, r8)
 8005684:	40013800 	.word	0x40013800
 8005688:	200009c8 	.word	0x200009c8
 800568c:	200009b8 	.word	0x200009b8
 8005690:	e000ed04 	.word	0xe000ed04
 8005694:	200009cc 	.word	0x200009cc

08005698 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800569e:	f000 fc3f 	bl	8005f20 <HAL_Init>
  //__enable_irq();
  //SCB->VTOR = 0x0800C000;
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80056a2:	f000 f83d 	bl	8005720 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80056a6:	f000 f939 	bl	800591c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80056aa:	f000 f8e9 	bl	8005880 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 80056ae:	f000 f899 	bl	80057e4 <MX_USART1_UART_Init>

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */


  Modem_port_block_semaphore=xSemaphoreCreateBinary();
 80056b2:	2203      	movs	r2, #3
 80056b4:	2100      	movs	r1, #0
 80056b6:	2001      	movs	r0, #1
 80056b8:	f004 fbc4 	bl	8009e44 <xQueueGenericCreate>
 80056bc:	0002      	movs	r2, r0
 80056be:	4b11      	ldr	r3, [pc, #68]	; (8005704 <main+0x6c>)
 80056c0:	601a      	str	r2, [r3, #0]

  if(Modem_port_block_semaphore == NULL)
 80056c2:	4b10      	ldr	r3, [pc, #64]	; (8005704 <main+0x6c>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d104      	bne.n	80056d4 <main+0x3c>
  {
	  printf("Failed to create a semaphore");
 80056ca:	4b0f      	ldr	r3, [pc, #60]	; (8005708 <main+0x70>)
 80056cc:	0018      	movs	r0, r3
 80056ce:	f008 faf3 	bl	800dcb8 <iprintf>
 80056d2:	e003      	b.n	80056dc <main+0x44>
  }
  else
  {
	  printf("Created a Semaphore");
 80056d4:	4b0d      	ldr	r3, [pc, #52]	; (800570c <main+0x74>)
 80056d6:	0018      	movs	r0, r3
 80056d8:	f008 faee 	bl	800dcb8 <iprintf>

  /* USER CODE BEGIN RTOS_TIMERS */
  /* start timers, add new ones, ... */
  #ifdef TIMERS_EN

  Telemetry_timer=xTimerCreate("Timer", TELEMETRY_SEND_TIME*1000, pdTRUE, (void*)0, Telemetry_timer_cb);
 80056dc:	490c      	ldr	r1, [pc, #48]	; (8005710 <main+0x78>)
 80056de:	480d      	ldr	r0, [pc, #52]	; (8005714 <main+0x7c>)
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <main+0x80>)
 80056e2:	9300      	str	r3, [sp, #0]
 80056e4:	2300      	movs	r3, #0
 80056e6:	2201      	movs	r2, #1
 80056e8:	f005 ffe4 	bl	800b6b4 <xTimerCreate>
 80056ec:	0002      	movs	r2, r0
 80056ee:	4b0b      	ldr	r3, [pc, #44]	; (800571c <main+0x84>)
 80056f0:	601a      	str	r2, [r3, #0]

  /* Create the thread(s) */
  /* definition and creation of defaultTask */


  Modem_MQTT_start();
 80056f2:	f7fc fefb 	bl	80024ec <Modem_MQTT_start>

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Modem_Rx_Process_start();
 80056f6:	f7fe fb05 	bl	8003d04 <Modem_Rx_Process_start>

  Modem_BLE_Start();
 80056fa:	f7fd fd1b 	bl	8003134 <Modem_BLE_Start>


  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80056fe:	f004 fa60 	bl	8009bc2 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8005702:	e7fe      	b.n	8005702 <main+0x6a>
 8005704:	200009c4 	.word	0x200009c4
 8005708:	08011030 	.word	0x08011030
 800570c:	08011050 	.word	0x08011050
 8005710:	00002710 	.word	0x00002710
 8005714:	08011064 	.word	0x08011064
 8005718:	08005601 	.word	0x08005601
 800571c:	200009c0 	.word	0x200009c0

08005720 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005720:	b590      	push	{r4, r7, lr}
 8005722:	b093      	sub	sp, #76	; 0x4c
 8005724:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005726:	2410      	movs	r4, #16
 8005728:	193b      	adds	r3, r7, r4
 800572a:	0018      	movs	r0, r3
 800572c:	2338      	movs	r3, #56	; 0x38
 800572e:	001a      	movs	r2, r3
 8005730:	2100      	movs	r1, #0
 8005732:	f008 fb3d 	bl	800ddb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005736:	003b      	movs	r3, r7
 8005738:	0018      	movs	r0, r3
 800573a:	2310      	movs	r3, #16
 800573c:	001a      	movs	r2, r3
 800573e:	2100      	movs	r1, #0
 8005740:	f008 fb36 	bl	800ddb0 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005744:	2380      	movs	r3, #128	; 0x80
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	0018      	movs	r0, r3
 800574a:	f000 ff6d 	bl	8006628 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800574e:	193b      	adds	r3, r7, r4
 8005750:	220a      	movs	r2, #10
 8005752:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8005754:	193b      	adds	r3, r7, r4
 8005756:	2280      	movs	r2, #128	; 0x80
 8005758:	0052      	lsls	r2, r2, #1
 800575a:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 800575c:	0021      	movs	r1, r4
 800575e:	187b      	adds	r3, r7, r1
 8005760:	2200      	movs	r2, #0
 8005762:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8005764:	187b      	adds	r3, r7, r1
 8005766:	2240      	movs	r2, #64	; 0x40
 8005768:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800576a:	187b      	adds	r3, r7, r1
 800576c:	2201      	movs	r2, #1
 800576e:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005770:	187b      	adds	r3, r7, r1
 8005772:	2202      	movs	r2, #2
 8005774:	61da      	str	r2, [r3, #28]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8005776:	187b      	adds	r3, r7, r1
 8005778:	2202      	movs	r2, #2
 800577a:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800577c:	187b      	adds	r3, r7, r1
 800577e:	2200      	movs	r2, #0
 8005780:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 8;
 8005782:	187b      	adds	r3, r7, r1
 8005784:	2208      	movs	r2, #8
 8005786:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005788:	187b      	adds	r3, r7, r1
 800578a:	2280      	movs	r2, #128	; 0x80
 800578c:	0292      	lsls	r2, r2, #10
 800578e:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8005790:	187b      	adds	r3, r7, r1
 8005792:	2280      	movs	r2, #128	; 0x80
 8005794:	0492      	lsls	r2, r2, #18
 8005796:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8005798:	187b      	adds	r3, r7, r1
 800579a:	2280      	movs	r2, #128	; 0x80
 800579c:	0592      	lsls	r2, r2, #22
 800579e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80057a0:	187b      	adds	r3, r7, r1
 80057a2:	0018      	movs	r0, r3
 80057a4:	f000 ff8c 	bl	80066c0 <HAL_RCC_OscConfig>
 80057a8:	1e03      	subs	r3, r0, #0
 80057aa:	d001      	beq.n	80057b0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80057ac:	f000 f918 	bl	80059e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80057b0:	003b      	movs	r3, r7
 80057b2:	2207      	movs	r2, #7
 80057b4:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80057b6:	003b      	movs	r3, r7
 80057b8:	2202      	movs	r2, #2
 80057ba:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80057bc:	003b      	movs	r3, r7
 80057be:	2200      	movs	r2, #0
 80057c0:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80057c2:	003b      	movs	r3, r7
 80057c4:	2200      	movs	r2, #0
 80057c6:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80057c8:	003b      	movs	r3, r7
 80057ca:	2102      	movs	r1, #2
 80057cc:	0018      	movs	r0, r3
 80057ce:	f001 fa91 	bl	8006cf4 <HAL_RCC_ClockConfig>
 80057d2:	1e03      	subs	r3, r0, #0
 80057d4:	d001      	beq.n	80057da <SystemClock_Config+0xba>
  {
    Error_Handler();
 80057d6:	f000 f903 	bl	80059e0 <Error_Handler>
  }
}
 80057da:	46c0      	nop			; (mov r8, r8)
 80057dc:	46bd      	mov	sp, r7
 80057de:	b013      	add	sp, #76	; 0x4c
 80057e0:	bd90      	pop	{r4, r7, pc}
	...

080057e4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80057e4:	b580      	push	{r7, lr}
 80057e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80057e8:	4b23      	ldr	r3, [pc, #140]	; (8005878 <MX_USART1_UART_Init+0x94>)
 80057ea:	4a24      	ldr	r2, [pc, #144]	; (800587c <MX_USART1_UART_Init+0x98>)
 80057ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80057ee:	4b22      	ldr	r3, [pc, #136]	; (8005878 <MX_USART1_UART_Init+0x94>)
 80057f0:	22e1      	movs	r2, #225	; 0xe1
 80057f2:	0252      	lsls	r2, r2, #9
 80057f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80057f6:	4b20      	ldr	r3, [pc, #128]	; (8005878 <MX_USART1_UART_Init+0x94>)
 80057f8:	2200      	movs	r2, #0
 80057fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80057fc:	4b1e      	ldr	r3, [pc, #120]	; (8005878 <MX_USART1_UART_Init+0x94>)
 80057fe:	2200      	movs	r2, #0
 8005800:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8005802:	4b1d      	ldr	r3, [pc, #116]	; (8005878 <MX_USART1_UART_Init+0x94>)
 8005804:	2200      	movs	r2, #0
 8005806:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8005808:	4b1b      	ldr	r3, [pc, #108]	; (8005878 <MX_USART1_UART_Init+0x94>)
 800580a:	220c      	movs	r2, #12
 800580c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800580e:	4b1a      	ldr	r3, [pc, #104]	; (8005878 <MX_USART1_UART_Init+0x94>)
 8005810:	2200      	movs	r2, #0
 8005812:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8005814:	4b18      	ldr	r3, [pc, #96]	; (8005878 <MX_USART1_UART_Init+0x94>)
 8005816:	2200      	movs	r2, #0
 8005818:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800581a:	4b17      	ldr	r3, [pc, #92]	; (8005878 <MX_USART1_UART_Init+0x94>)
 800581c:	2200      	movs	r2, #0
 800581e:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8005820:	4b15      	ldr	r3, [pc, #84]	; (8005878 <MX_USART1_UART_Init+0x94>)
 8005822:	2200      	movs	r2, #0
 8005824:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8005826:	4b14      	ldr	r3, [pc, #80]	; (8005878 <MX_USART1_UART_Init+0x94>)
 8005828:	2200      	movs	r2, #0
 800582a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800582c:	4b12      	ldr	r3, [pc, #72]	; (8005878 <MX_USART1_UART_Init+0x94>)
 800582e:	0018      	movs	r0, r3
 8005830:	f002 f876 	bl	8007920 <HAL_UART_Init>
 8005834:	1e03      	subs	r3, r0, #0
 8005836:	d001      	beq.n	800583c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8005838:	f000 f8d2 	bl	80059e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800583c:	4b0e      	ldr	r3, [pc, #56]	; (8005878 <MX_USART1_UART_Init+0x94>)
 800583e:	2100      	movs	r1, #0
 8005840:	0018      	movs	r0, r3
 8005842:	f004 f861 	bl	8009908 <HAL_UARTEx_SetTxFifoThreshold>
 8005846:	1e03      	subs	r3, r0, #0
 8005848:	d001      	beq.n	800584e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 800584a:	f000 f8c9 	bl	80059e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800584e:	4b0a      	ldr	r3, [pc, #40]	; (8005878 <MX_USART1_UART_Init+0x94>)
 8005850:	2100      	movs	r1, #0
 8005852:	0018      	movs	r0, r3
 8005854:	f004 f898 	bl	8009988 <HAL_UARTEx_SetRxFifoThreshold>
 8005858:	1e03      	subs	r3, r0, #0
 800585a:	d001      	beq.n	8005860 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 800585c:	f000 f8c0 	bl	80059e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8005860:	4b05      	ldr	r3, [pc, #20]	; (8005878 <MX_USART1_UART_Init+0x94>)
 8005862:	0018      	movs	r0, r3
 8005864:	f004 f816 	bl	8009894 <HAL_UARTEx_DisableFifoMode>
 8005868:	1e03      	subs	r3, r0, #0
 800586a:	d001      	beq.n	8005870 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 800586c:	f000 f8b8 	bl	80059e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8005870:	46c0      	nop			; (mov r8, r8)
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	46c0      	nop			; (mov r8, r8)
 8005878:	2000088c 	.word	0x2000088c
 800587c:	40013800 	.word	0x40013800

08005880 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8005880:	b580      	push	{r7, lr}
 8005882:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8005884:	4b23      	ldr	r3, [pc, #140]	; (8005914 <MX_USART2_UART_Init+0x94>)
 8005886:	4a24      	ldr	r2, [pc, #144]	; (8005918 <MX_USART2_UART_Init+0x98>)
 8005888:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800588a:	4b22      	ldr	r3, [pc, #136]	; (8005914 <MX_USART2_UART_Init+0x94>)
 800588c:	22e1      	movs	r2, #225	; 0xe1
 800588e:	0252      	lsls	r2, r2, #9
 8005890:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8005892:	4b20      	ldr	r3, [pc, #128]	; (8005914 <MX_USART2_UART_Init+0x94>)
 8005894:	2200      	movs	r2, #0
 8005896:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8005898:	4b1e      	ldr	r3, [pc, #120]	; (8005914 <MX_USART2_UART_Init+0x94>)
 800589a:	2200      	movs	r2, #0
 800589c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800589e:	4b1d      	ldr	r3, [pc, #116]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80058a4:	4b1b      	ldr	r3, [pc, #108]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058a6:	220c      	movs	r2, #12
 80058a8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058aa:	4b1a      	ldr	r3, [pc, #104]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058ac:	2200      	movs	r2, #0
 80058ae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80058b0:	4b18      	ldr	r3, [pc, #96]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058b2:	2200      	movs	r2, #0
 80058b4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80058b6:	4b17      	ldr	r3, [pc, #92]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80058bc:	4b15      	ldr	r3, [pc, #84]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058be:	2200      	movs	r2, #0
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80058c2:	4b14      	ldr	r3, [pc, #80]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058c4:	2200      	movs	r2, #0
 80058c6:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80058c8:	4b12      	ldr	r3, [pc, #72]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058ca:	0018      	movs	r0, r3
 80058cc:	f002 f828 	bl	8007920 <HAL_UART_Init>
 80058d0:	1e03      	subs	r3, r0, #0
 80058d2:	d001      	beq.n	80058d8 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80058d4:	f000 f884 	bl	80059e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058d8:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058da:	2100      	movs	r1, #0
 80058dc:	0018      	movs	r0, r3
 80058de:	f004 f813 	bl	8009908 <HAL_UARTEx_SetTxFifoThreshold>
 80058e2:	1e03      	subs	r3, r0, #0
 80058e4:	d001      	beq.n	80058ea <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80058e6:	f000 f87b 	bl	80059e0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80058ea:	4b0a      	ldr	r3, [pc, #40]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058ec:	2100      	movs	r1, #0
 80058ee:	0018      	movs	r0, r3
 80058f0:	f004 f84a 	bl	8009988 <HAL_UARTEx_SetRxFifoThreshold>
 80058f4:	1e03      	subs	r3, r0, #0
 80058f6:	d001      	beq.n	80058fc <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80058f8:	f000 f872 	bl	80059e0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 80058fc:	4b05      	ldr	r3, [pc, #20]	; (8005914 <MX_USART2_UART_Init+0x94>)
 80058fe:	0018      	movs	r0, r3
 8005900:	f003 ffc8 	bl	8009894 <HAL_UARTEx_DisableFifoMode>
 8005904:	1e03      	subs	r3, r0, #0
 8005906:	d001      	beq.n	800590c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8005908:	f000 f86a 	bl	80059e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800590c:	46c0      	nop			; (mov r8, r8)
 800590e:	46bd      	mov	sp, r7
 8005910:	bd80      	pop	{r7, pc}
 8005912:	46c0      	nop			; (mov r8, r8)
 8005914:	20000920 	.word	0x20000920
 8005918:	40004400 	.word	0x40004400

0800591c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800591c:	b590      	push	{r4, r7, lr}
 800591e:	b089      	sub	sp, #36	; 0x24
 8005920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005922:	240c      	movs	r4, #12
 8005924:	193b      	adds	r3, r7, r4
 8005926:	0018      	movs	r0, r3
 8005928:	2314      	movs	r3, #20
 800592a:	001a      	movs	r2, r3
 800592c:	2100      	movs	r1, #0
 800592e:	f008 fa3f 	bl	800ddb0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005932:	4b20      	ldr	r3, [pc, #128]	; (80059b4 <MX_GPIO_Init+0x98>)
 8005934:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005936:	4b1f      	ldr	r3, [pc, #124]	; (80059b4 <MX_GPIO_Init+0x98>)
 8005938:	2104      	movs	r1, #4
 800593a:	430a      	orrs	r2, r1
 800593c:	635a      	str	r2, [r3, #52]	; 0x34
 800593e:	4b1d      	ldr	r3, [pc, #116]	; (80059b4 <MX_GPIO_Init+0x98>)
 8005940:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005942:	2204      	movs	r2, #4
 8005944:	4013      	ands	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]
 8005948:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800594a:	4b1a      	ldr	r3, [pc, #104]	; (80059b4 <MX_GPIO_Init+0x98>)
 800594c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800594e:	4b19      	ldr	r3, [pc, #100]	; (80059b4 <MX_GPIO_Init+0x98>)
 8005950:	2120      	movs	r1, #32
 8005952:	430a      	orrs	r2, r1
 8005954:	635a      	str	r2, [r3, #52]	; 0x34
 8005956:	4b17      	ldr	r3, [pc, #92]	; (80059b4 <MX_GPIO_Init+0x98>)
 8005958:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800595a:	2220      	movs	r2, #32
 800595c:	4013      	ands	r3, r2
 800595e:	607b      	str	r3, [r7, #4]
 8005960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005962:	4b14      	ldr	r3, [pc, #80]	; (80059b4 <MX_GPIO_Init+0x98>)
 8005964:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005966:	4b13      	ldr	r3, [pc, #76]	; (80059b4 <MX_GPIO_Init+0x98>)
 8005968:	2101      	movs	r1, #1
 800596a:	430a      	orrs	r2, r1
 800596c:	635a      	str	r2, [r3, #52]	; 0x34
 800596e:	4b11      	ldr	r3, [pc, #68]	; (80059b4 <MX_GPIO_Init+0x98>)
 8005970:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005972:	2201      	movs	r2, #1
 8005974:	4013      	ands	r3, r2
 8005976:	603b      	str	r3, [r7, #0]
 8005978:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800597a:	193b      	adds	r3, r7, r4
 800597c:	2280      	movs	r2, #128	; 0x80
 800597e:	0192      	lsls	r2, r2, #6
 8005980:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8005982:	193b      	adds	r3, r7, r4
 8005984:	2288      	movs	r2, #136	; 0x88
 8005986:	0352      	lsls	r2, r2, #13
 8005988:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800598a:	193b      	adds	r3, r7, r4
 800598c:	2200      	movs	r2, #0
 800598e:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005990:	193b      	adds	r3, r7, r4
 8005992:	4a09      	ldr	r2, [pc, #36]	; (80059b8 <MX_GPIO_Init+0x9c>)
 8005994:	0019      	movs	r1, r3
 8005996:	0010      	movs	r0, r2
 8005998:	f000 fca4 	bl	80062e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 800599c:	2200      	movs	r2, #0
 800599e:	2103      	movs	r1, #3
 80059a0:	2007      	movs	r0, #7
 80059a2:	f000 fba9 	bl	80060f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 80059a6:	2007      	movs	r0, #7
 80059a8:	f000 fbbb 	bl	8006122 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80059ac:	46c0      	nop			; (mov r8, r8)
 80059ae:	46bd      	mov	sp, r7
 80059b0:	b009      	add	sp, #36	; 0x24
 80059b2:	bd90      	pop	{r4, r7, pc}
 80059b4:	40021000 	.word	0x40021000
 80059b8:	50000800 	.word	0x50000800

080059bc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80059bc:	b580      	push	{r7, lr}
 80059be:	b082      	sub	sp, #8
 80059c0:	af00      	add	r7, sp, #0
 80059c2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	4a04      	ldr	r2, [pc, #16]	; (80059dc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80059ca:	4293      	cmp	r3, r2
 80059cc:	d101      	bne.n	80059d2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80059ce:	f000 fac7 	bl	8005f60 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80059d2:	46c0      	nop			; (mov r8, r8)
 80059d4:	46bd      	mov	sp, r7
 80059d6:	b002      	add	sp, #8
 80059d8:	bd80      	pop	{r7, pc}
 80059da:	46c0      	nop			; (mov r8, r8)
 80059dc:	40014800 	.word	0x40014800

080059e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80059e0:	b580      	push	{r7, lr}
 80059e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80059e4:	b672      	cpsid	i
}
 80059e6:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80059e8:	e7fe      	b.n	80059e8 <Error_Handler+0x8>
	...

080059ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b082      	sub	sp, #8
 80059f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80059f2:	4b15      	ldr	r3, [pc, #84]	; (8005a48 <HAL_MspInit+0x5c>)
 80059f4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80059f6:	4b14      	ldr	r3, [pc, #80]	; (8005a48 <HAL_MspInit+0x5c>)
 80059f8:	2101      	movs	r1, #1
 80059fa:	430a      	orrs	r2, r1
 80059fc:	641a      	str	r2, [r3, #64]	; 0x40
 80059fe:	4b12      	ldr	r3, [pc, #72]	; (8005a48 <HAL_MspInit+0x5c>)
 8005a00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a02:	2201      	movs	r2, #1
 8005a04:	4013      	ands	r3, r2
 8005a06:	607b      	str	r3, [r7, #4]
 8005a08:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005a0a:	4b0f      	ldr	r3, [pc, #60]	; (8005a48 <HAL_MspInit+0x5c>)
 8005a0c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a0e:	4b0e      	ldr	r3, [pc, #56]	; (8005a48 <HAL_MspInit+0x5c>)
 8005a10:	2180      	movs	r1, #128	; 0x80
 8005a12:	0549      	lsls	r1, r1, #21
 8005a14:	430a      	orrs	r2, r1
 8005a16:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a18:	4b0b      	ldr	r3, [pc, #44]	; (8005a48 <HAL_MspInit+0x5c>)
 8005a1a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a1c:	2380      	movs	r3, #128	; 0x80
 8005a1e:	055b      	lsls	r3, r3, #21
 8005a20:	4013      	ands	r3, r2
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8005a26:	2302      	movs	r3, #2
 8005a28:	425b      	negs	r3, r3
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	2103      	movs	r1, #3
 8005a2e:	0018      	movs	r0, r3
 8005a30:	f000 fb62 	bl	80060f8 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8005a34:	23c0      	movs	r3, #192	; 0xc0
 8005a36:	00db      	lsls	r3, r3, #3
 8005a38:	0018      	movs	r0, r3
 8005a3a:	f000 faad 	bl	8005f98 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005a3e:	46c0      	nop			; (mov r8, r8)
 8005a40:	46bd      	mov	sp, r7
 8005a42:	b002      	add	sp, #8
 8005a44:	bd80      	pop	{r7, pc}
 8005a46:	46c0      	nop			; (mov r8, r8)
 8005a48:	40021000 	.word	0x40021000

08005a4c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005a4c:	b590      	push	{r4, r7, lr}
 8005a4e:	b099      	sub	sp, #100	; 0x64
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005a54:	234c      	movs	r3, #76	; 0x4c
 8005a56:	18fb      	adds	r3, r7, r3
 8005a58:	0018      	movs	r0, r3
 8005a5a:	2314      	movs	r3, #20
 8005a5c:	001a      	movs	r2, r3
 8005a5e:	2100      	movs	r1, #0
 8005a60:	f008 f9a6 	bl	800ddb0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005a64:	2418      	movs	r4, #24
 8005a66:	193b      	adds	r3, r7, r4
 8005a68:	0018      	movs	r0, r3
 8005a6a:	2334      	movs	r3, #52	; 0x34
 8005a6c:	001a      	movs	r2, r3
 8005a6e:	2100      	movs	r1, #0
 8005a70:	f008 f99e 	bl	800ddb0 <memset>
  if(huart->Instance==USART1)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	4a4d      	ldr	r2, [pc, #308]	; (8005bb0 <HAL_UART_MspInit+0x164>)
 8005a7a:	4293      	cmp	r3, r2
 8005a7c:	d146      	bne.n	8005b0c <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005a7e:	193b      	adds	r3, r7, r4
 8005a80:	2201      	movs	r2, #1
 8005a82:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8005a84:	193b      	adds	r3, r7, r4
 8005a86:	2200      	movs	r2, #0
 8005a88:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005a8a:	193b      	adds	r3, r7, r4
 8005a8c:	0018      	movs	r0, r3
 8005a8e:	f001 fb05 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 8005a92:	1e03      	subs	r3, r0, #0
 8005a94:	d001      	beq.n	8005a9a <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8005a96:	f7ff ffa3 	bl	80059e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005a9a:	4b46      	ldr	r3, [pc, #280]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005a9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a9e:	4b45      	ldr	r3, [pc, #276]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005aa0:	2180      	movs	r1, #128	; 0x80
 8005aa2:	01c9      	lsls	r1, r1, #7
 8005aa4:	430a      	orrs	r2, r1
 8005aa6:	641a      	str	r2, [r3, #64]	; 0x40
 8005aa8:	4b42      	ldr	r3, [pc, #264]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005aaa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005aac:	2380      	movs	r3, #128	; 0x80
 8005aae:	01db      	lsls	r3, r3, #7
 8005ab0:	4013      	ands	r3, r2
 8005ab2:	617b      	str	r3, [r7, #20]
 8005ab4:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005ab6:	4b3f      	ldr	r3, [pc, #252]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005ab8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005aba:	4b3e      	ldr	r3, [pc, #248]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005abc:	2104      	movs	r1, #4
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	635a      	str	r2, [r3, #52]	; 0x34
 8005ac2:	4b3c      	ldr	r3, [pc, #240]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005ac4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ac6:	2204      	movs	r2, #4
 8005ac8:	4013      	ands	r3, r2
 8005aca:	613b      	str	r3, [r7, #16]
 8005acc:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8005ace:	214c      	movs	r1, #76	; 0x4c
 8005ad0:	187b      	adds	r3, r7, r1
 8005ad2:	2230      	movs	r2, #48	; 0x30
 8005ad4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ad6:	187b      	adds	r3, r7, r1
 8005ad8:	2202      	movs	r2, #2
 8005ada:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	2200      	movs	r2, #0
 8005ae0:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8005ae8:	187b      	adds	r3, r7, r1
 8005aea:	2201      	movs	r2, #1
 8005aec:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aee:	187b      	adds	r3, r7, r1
 8005af0:	4a31      	ldr	r2, [pc, #196]	; (8005bb8 <HAL_UART_MspInit+0x16c>)
 8005af2:	0019      	movs	r1, r3
 8005af4:	0010      	movs	r0, r2
 8005af6:	f000 fbf5 	bl	80062e4 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8005afa:	2200      	movs	r2, #0
 8005afc:	2103      	movs	r1, #3
 8005afe:	201b      	movs	r0, #27
 8005b00:	f000 fafa 	bl	80060f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8005b04:	201b      	movs	r0, #27
 8005b06:	f000 fb0c 	bl	8006122 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8005b0a:	e04c      	b.n	8005ba6 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	4a2a      	ldr	r2, [pc, #168]	; (8005bbc <HAL_UART_MspInit+0x170>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d147      	bne.n	8005ba6 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005b16:	2118      	movs	r1, #24
 8005b18:	187b      	adds	r3, r7, r1
 8005b1a:	2202      	movs	r2, #2
 8005b1c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	2200      	movs	r2, #0
 8005b22:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	0018      	movs	r0, r3
 8005b28:	f001 fab8 	bl	800709c <HAL_RCCEx_PeriphCLKConfig>
 8005b2c:	1e03      	subs	r3, r0, #0
 8005b2e:	d001      	beq.n	8005b34 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8005b30:	f7ff ff56 	bl	80059e0 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8005b34:	4b1f      	ldr	r3, [pc, #124]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005b36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b38:	4b1e      	ldr	r3, [pc, #120]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005b3a:	2180      	movs	r1, #128	; 0x80
 8005b3c:	0289      	lsls	r1, r1, #10
 8005b3e:	430a      	orrs	r2, r1
 8005b40:	63da      	str	r2, [r3, #60]	; 0x3c
 8005b42:	4b1c      	ldr	r3, [pc, #112]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005b44:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b46:	2380      	movs	r3, #128	; 0x80
 8005b48:	029b      	lsls	r3, r3, #10
 8005b4a:	4013      	ands	r3, r2
 8005b4c:	60fb      	str	r3, [r7, #12]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005b50:	4b18      	ldr	r3, [pc, #96]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005b52:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005b54:	4b17      	ldr	r3, [pc, #92]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005b56:	2101      	movs	r1, #1
 8005b58:	430a      	orrs	r2, r1
 8005b5a:	635a      	str	r2, [r3, #52]	; 0x34
 8005b5c:	4b15      	ldr	r3, [pc, #84]	; (8005bb4 <HAL_UART_MspInit+0x168>)
 8005b5e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b60:	2201      	movs	r2, #1
 8005b62:	4013      	ands	r3, r2
 8005b64:	60bb      	str	r3, [r7, #8]
 8005b66:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8005b68:	214c      	movs	r1, #76	; 0x4c
 8005b6a:	187b      	adds	r3, r7, r1
 8005b6c:	220c      	movs	r2, #12
 8005b6e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b70:	187b      	adds	r3, r7, r1
 8005b72:	2202      	movs	r2, #2
 8005b74:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b76:	187b      	adds	r3, r7, r1
 8005b78:	2200      	movs	r2, #0
 8005b7a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b7c:	187b      	adds	r3, r7, r1
 8005b7e:	2200      	movs	r2, #0
 8005b80:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8005b82:	187b      	adds	r3, r7, r1
 8005b84:	2201      	movs	r2, #1
 8005b86:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005b88:	187a      	adds	r2, r7, r1
 8005b8a:	23a0      	movs	r3, #160	; 0xa0
 8005b8c:	05db      	lsls	r3, r3, #23
 8005b8e:	0011      	movs	r1, r2
 8005b90:	0018      	movs	r0, r3
 8005b92:	f000 fba7 	bl	80062e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8005b96:	2200      	movs	r2, #0
 8005b98:	2103      	movs	r1, #3
 8005b9a:	201c      	movs	r0, #28
 8005b9c:	f000 faac 	bl	80060f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8005ba0:	201c      	movs	r0, #28
 8005ba2:	f000 fabe 	bl	8006122 <HAL_NVIC_EnableIRQ>
}
 8005ba6:	46c0      	nop			; (mov r8, r8)
 8005ba8:	46bd      	mov	sp, r7
 8005baa:	b019      	add	sp, #100	; 0x64
 8005bac:	bd90      	pop	{r4, r7, pc}
 8005bae:	46c0      	nop			; (mov r8, r8)
 8005bb0:	40013800 	.word	0x40013800
 8005bb4:	40021000 	.word	0x40021000
 8005bb8:	50000800 	.word	0x50000800
 8005bbc:	40004400 	.word	0x40004400

08005bc0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8005bc0:	b5b0      	push	{r4, r5, r7, lr}
 8005bc2:	b08c      	sub	sp, #48	; 0x30
 8005bc4:	af00      	add	r7, sp, #0
 8005bc6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005bc8:	232b      	movs	r3, #43	; 0x2b
 8005bca:	18fb      	adds	r3, r7, r3
 8005bcc:	2200      	movs	r2, #0
 8005bce:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8005bd0:	4b38      	ldr	r3, [pc, #224]	; (8005cb4 <HAL_InitTick+0xf4>)
 8005bd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005bd4:	4b37      	ldr	r3, [pc, #220]	; (8005cb4 <HAL_InitTick+0xf4>)
 8005bd6:	2180      	movs	r1, #128	; 0x80
 8005bd8:	02c9      	lsls	r1, r1, #11
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	641a      	str	r2, [r3, #64]	; 0x40
 8005bde:	4b35      	ldr	r3, [pc, #212]	; (8005cb4 <HAL_InitTick+0xf4>)
 8005be0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005be2:	2380      	movs	r3, #128	; 0x80
 8005be4:	02db      	lsls	r3, r3, #11
 8005be6:	4013      	ands	r3, r2
 8005be8:	60bb      	str	r3, [r7, #8]
 8005bea:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005bec:	230c      	movs	r3, #12
 8005bee:	18fa      	adds	r2, r7, r3
 8005bf0:	2410      	movs	r4, #16
 8005bf2:	193b      	adds	r3, r7, r4
 8005bf4:	0011      	movs	r1, r2
 8005bf6:	0018      	movs	r0, r3
 8005bf8:	f001 fa26 	bl	8007048 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8005bfc:	193b      	adds	r3, r7, r4
 8005bfe:	68db      	ldr	r3, [r3, #12]
 8005c00:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8005c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d104      	bne.n	8005c12 <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8005c08:	f001 fa08 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 8005c0c:	0003      	movs	r3, r0
 8005c0e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c10:	e004      	b.n	8005c1c <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8005c12:	f001 fa03 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 8005c16:	0003      	movs	r3, r0
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005c1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c1e:	4926      	ldr	r1, [pc, #152]	; (8005cb8 <HAL_InitTick+0xf8>)
 8005c20:	0018      	movs	r0, r3
 8005c22:	f7fa fa97 	bl	8000154 <__udivsi3>
 8005c26:	0003      	movs	r3, r0
 8005c28:	3b01      	subs	r3, #1
 8005c2a:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8005c2c:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <HAL_InitTick+0xfc>)
 8005c2e:	4a24      	ldr	r2, [pc, #144]	; (8005cc0 <HAL_InitTick+0x100>)
 8005c30:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8005c32:	4b22      	ldr	r3, [pc, #136]	; (8005cbc <HAL_InitTick+0xfc>)
 8005c34:	4a23      	ldr	r2, [pc, #140]	; (8005cc4 <HAL_InitTick+0x104>)
 8005c36:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8005c38:	4b20      	ldr	r3, [pc, #128]	; (8005cbc <HAL_InitTick+0xfc>)
 8005c3a:	6a3a      	ldr	r2, [r7, #32]
 8005c3c:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8005c3e:	4b1f      	ldr	r3, [pc, #124]	; (8005cbc <HAL_InitTick+0xfc>)
 8005c40:	2200      	movs	r2, #0
 8005c42:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005c44:	4b1d      	ldr	r3, [pc, #116]	; (8005cbc <HAL_InitTick+0xfc>)
 8005c46:	2200      	movs	r2, #0
 8005c48:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005c4a:	4b1c      	ldr	r3, [pc, #112]	; (8005cbc <HAL_InitTick+0xfc>)
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8005c50:	252b      	movs	r5, #43	; 0x2b
 8005c52:	197c      	adds	r4, r7, r5
 8005c54:	4b19      	ldr	r3, [pc, #100]	; (8005cbc <HAL_InitTick+0xfc>)
 8005c56:	0018      	movs	r0, r3
 8005c58:	f001 fbd8 	bl	800740c <HAL_TIM_Base_Init>
 8005c5c:	0003      	movs	r3, r0
 8005c5e:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8005c60:	197b      	adds	r3, r7, r5
 8005c62:	781b      	ldrb	r3, [r3, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d11e      	bne.n	8005ca6 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8005c68:	197c      	adds	r4, r7, r5
 8005c6a:	4b14      	ldr	r3, [pc, #80]	; (8005cbc <HAL_InitTick+0xfc>)
 8005c6c:	0018      	movs	r0, r3
 8005c6e:	f001 fc2d 	bl	80074cc <HAL_TIM_Base_Start_IT>
 8005c72:	0003      	movs	r3, r0
 8005c74:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8005c76:	197b      	adds	r3, r7, r5
 8005c78:	781b      	ldrb	r3, [r3, #0]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d113      	bne.n	8005ca6 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8005c7e:	2016      	movs	r0, #22
 8005c80:	f000 fa4f 	bl	8006122 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2b03      	cmp	r3, #3
 8005c88:	d809      	bhi.n	8005c9e <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	0019      	movs	r1, r3
 8005c90:	2016      	movs	r0, #22
 8005c92:	f000 fa31 	bl	80060f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8005c96:	4b0c      	ldr	r3, [pc, #48]	; (8005cc8 <HAL_InitTick+0x108>)
 8005c98:	687a      	ldr	r2, [r7, #4]
 8005c9a:	601a      	str	r2, [r3, #0]
 8005c9c:	e003      	b.n	8005ca6 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8005c9e:	232b      	movs	r3, #43	; 0x2b
 8005ca0:	18fb      	adds	r3, r7, r3
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8005ca6:	232b      	movs	r3, #43	; 0x2b
 8005ca8:	18fb      	adds	r3, r7, r3
 8005caa:	781b      	ldrb	r3, [r3, #0]
}
 8005cac:	0018      	movs	r0, r3
 8005cae:	46bd      	mov	sp, r7
 8005cb0:	b00c      	add	sp, #48	; 0x30
 8005cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8005cb4:	40021000 	.word	0x40021000
 8005cb8:	000f4240 	.word	0x000f4240
 8005cbc:	20000a9c 	.word	0x20000a9c
 8005cc0:	40014800 	.word	0x40014800
 8005cc4:	000003e7 	.word	0x000003e7
 8005cc8:	20000010 	.word	0x20000010

08005ccc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005cd0:	e7fe      	b.n	8005cd0 <NMI_Handler+0x4>

08005cd2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005cd2:	b580      	push	{r7, lr}
 8005cd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
	 __asm("BKPT #0");
 8005cd6:	be00      	bkpt	0x0000
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005cd8:	e7fe      	b.n	8005cd8 <HardFault_Handler+0x6>

08005cda <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8005cda:	b580      	push	{r7, lr}
 8005cdc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8005cde:	2380      	movs	r3, #128	; 0x80
 8005ce0:	019b      	lsls	r3, r3, #6
 8005ce2:	0018      	movs	r0, r3
 8005ce4:	f000 fc62 	bl	80065ac <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8005ce8:	46c0      	nop			; (mov r8, r8)
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
	...

08005cf0 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8005cf4:	4b03      	ldr	r3, [pc, #12]	; (8005d04 <TIM17_IRQHandler+0x14>)
 8005cf6:	0018      	movs	r0, r3
 8005cf8:	f001 fc44 	bl	8007584 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8005cfc:	46c0      	nop			; (mov r8, r8)
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}
 8005d02:	46c0      	nop			; (mov r8, r8)
 8005d04:	20000a9c 	.word	0x20000a9c

08005d08 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
//  BaseType_t xHigherPriorityTaskWoken = pdFALSE;

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8005d0c:	4b03      	ldr	r3, [pc, #12]	; (8005d1c <USART1_IRQHandler+0x14>)
 8005d0e:	0018      	movs	r0, r3
 8005d10:	f001 ff00 	bl	8007b14 <HAL_UART_IRQHandler>
//  vTaskNotifyGiveFromISR(ModemRx_TaskHandle, &xHigherPriorityTaskWoken);
//  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
//  HAL_UARTEx_ReceiveToIdle_IT(&huart1,(uint8_t*)EC200u_Rx_Buff, sizeof(EC200u_Rx_Buff));
//  memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
  /* USER CODE END USART1_IRQn 1 */
}
 8005d14:	46c0      	nop			; (mov r8, r8)
 8005d16:	46bd      	mov	sp, r7
 8005d18:	bd80      	pop	{r7, pc}
 8005d1a:	46c0      	nop			; (mov r8, r8)
 8005d1c:	2000088c 	.word	0x2000088c

08005d20 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8005d20:	b580      	push	{r7, lr}
 8005d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8005d24:	4b03      	ldr	r3, [pc, #12]	; (8005d34 <USART2_IRQHandler+0x14>)
 8005d26:	0018      	movs	r0, r3
 8005d28:	f001 fef4 	bl	8007b14 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8005d2c:	46c0      	nop			; (mov r8, r8)
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	bd80      	pop	{r7, pc}
 8005d32:	46c0      	nop			; (mov r8, r8)
 8005d34:	20000920 	.word	0x20000920

08005d38 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	af00      	add	r7, sp, #0
  return 1;
 8005d3c:	2301      	movs	r3, #1
}
 8005d3e:	0018      	movs	r0, r3
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}

08005d44 <_kill>:

int _kill(int pid, int sig)
{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b082      	sub	sp, #8
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8005d4e:	f008 f949 	bl	800dfe4 <__errno>
 8005d52:	0003      	movs	r3, r0
 8005d54:	2216      	movs	r2, #22
 8005d56:	601a      	str	r2, [r3, #0]
  return -1;
 8005d58:	2301      	movs	r3, #1
 8005d5a:	425b      	negs	r3, r3
}
 8005d5c:	0018      	movs	r0, r3
 8005d5e:	46bd      	mov	sp, r7
 8005d60:	b002      	add	sp, #8
 8005d62:	bd80      	pop	{r7, pc}

08005d64 <_exit>:

void _exit (int status)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b082      	sub	sp, #8
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	425a      	negs	r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	0011      	movs	r1, r2
 8005d74:	0018      	movs	r0, r3
 8005d76:	f7ff ffe5 	bl	8005d44 <_kill>
  while (1) {}    /* Make sure we hang here */
 8005d7a:	e7fe      	b.n	8005d7a <_exit+0x16>

08005d7c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005d7c:	b580      	push	{r7, lr}
 8005d7e:	b086      	sub	sp, #24
 8005d80:	af00      	add	r7, sp, #0
 8005d82:	60f8      	str	r0, [r7, #12]
 8005d84:	60b9      	str	r1, [r7, #8]
 8005d86:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d88:	2300      	movs	r3, #0
 8005d8a:	617b      	str	r3, [r7, #20]
 8005d8c:	e00a      	b.n	8005da4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005d8e:	e000      	b.n	8005d92 <_read+0x16>
 8005d90:	bf00      	nop
 8005d92:	0001      	movs	r1, r0
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	1c5a      	adds	r2, r3, #1
 8005d98:	60ba      	str	r2, [r7, #8]
 8005d9a:	b2ca      	uxtb	r2, r1
 8005d9c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005d9e:	697b      	ldr	r3, [r7, #20]
 8005da0:	3301      	adds	r3, #1
 8005da2:	617b      	str	r3, [r7, #20]
 8005da4:	697a      	ldr	r2, [r7, #20]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	429a      	cmp	r2, r3
 8005daa:	dbf0      	blt.n	8005d8e <_read+0x12>
  }

  return len;
 8005dac:	687b      	ldr	r3, [r7, #4]
}
 8005dae:	0018      	movs	r0, r3
 8005db0:	46bd      	mov	sp, r7
 8005db2:	b006      	add	sp, #24
 8005db4:	bd80      	pop	{r7, pc}

08005db6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8005db6:	b580      	push	{r7, lr}
 8005db8:	b086      	sub	sp, #24
 8005dba:	af00      	add	r7, sp, #0
 8005dbc:	60f8      	str	r0, [r7, #12]
 8005dbe:	60b9      	str	r1, [r7, #8]
 8005dc0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dc2:	2300      	movs	r3, #0
 8005dc4:	617b      	str	r3, [r7, #20]
 8005dc6:	e009      	b.n	8005ddc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8005dc8:	68bb      	ldr	r3, [r7, #8]
 8005dca:	1c5a      	adds	r2, r3, #1
 8005dcc:	60ba      	str	r2, [r7, #8]
 8005dce:	781b      	ldrb	r3, [r3, #0]
 8005dd0:	0018      	movs	r0, r3
 8005dd2:	e000      	b.n	8005dd6 <_write+0x20>
 8005dd4:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005dd6:	697b      	ldr	r3, [r7, #20]
 8005dd8:	3301      	adds	r3, #1
 8005dda:	617b      	str	r3, [r7, #20]
 8005ddc:	697a      	ldr	r2, [r7, #20]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	429a      	cmp	r2, r3
 8005de2:	dbf1      	blt.n	8005dc8 <_write+0x12>
  }
  return len;
 8005de4:	687b      	ldr	r3, [r7, #4]
}
 8005de6:	0018      	movs	r0, r3
 8005de8:	46bd      	mov	sp, r7
 8005dea:	b006      	add	sp, #24
 8005dec:	bd80      	pop	{r7, pc}

08005dee <_close>:

int _close(int file)
{
 8005dee:	b580      	push	{r7, lr}
 8005df0:	b082      	sub	sp, #8
 8005df2:	af00      	add	r7, sp, #0
 8005df4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005df6:	2301      	movs	r3, #1
 8005df8:	425b      	negs	r3, r3
}
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	b002      	add	sp, #8
 8005e00:	bd80      	pop	{r7, pc}

08005e02 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005e02:	b580      	push	{r7, lr}
 8005e04:	b082      	sub	sp, #8
 8005e06:	af00      	add	r7, sp, #0
 8005e08:	6078      	str	r0, [r7, #4]
 8005e0a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	2280      	movs	r2, #128	; 0x80
 8005e10:	0192      	lsls	r2, r2, #6
 8005e12:	605a      	str	r2, [r3, #4]
  return 0;
 8005e14:	2300      	movs	r3, #0
}
 8005e16:	0018      	movs	r0, r3
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	b002      	add	sp, #8
 8005e1c:	bd80      	pop	{r7, pc}

08005e1e <_isatty>:

int _isatty(int file)
{
 8005e1e:	b580      	push	{r7, lr}
 8005e20:	b082      	sub	sp, #8
 8005e22:	af00      	add	r7, sp, #0
 8005e24:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005e26:	2301      	movs	r3, #1
}
 8005e28:	0018      	movs	r0, r3
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	b002      	add	sp, #8
 8005e2e:	bd80      	pop	{r7, pc}

08005e30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8005e30:	b580      	push	{r7, lr}
 8005e32:	b084      	sub	sp, #16
 8005e34:	af00      	add	r7, sp, #0
 8005e36:	60f8      	str	r0, [r7, #12]
 8005e38:	60b9      	str	r1, [r7, #8]
 8005e3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8005e3c:	2300      	movs	r3, #0
}
 8005e3e:	0018      	movs	r0, r3
 8005e40:	46bd      	mov	sp, r7
 8005e42:	b004      	add	sp, #16
 8005e44:	bd80      	pop	{r7, pc}
	...

08005e48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b086      	sub	sp, #24
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005e50:	4a14      	ldr	r2, [pc, #80]	; (8005ea4 <_sbrk+0x5c>)
 8005e52:	4b15      	ldr	r3, [pc, #84]	; (8005ea8 <_sbrk+0x60>)
 8005e54:	1ad3      	subs	r3, r2, r3
 8005e56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005e58:	697b      	ldr	r3, [r7, #20]
 8005e5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005e5c:	4b13      	ldr	r3, [pc, #76]	; (8005eac <_sbrk+0x64>)
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d102      	bne.n	8005e6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8005e64:	4b11      	ldr	r3, [pc, #68]	; (8005eac <_sbrk+0x64>)
 8005e66:	4a12      	ldr	r2, [pc, #72]	; (8005eb0 <_sbrk+0x68>)
 8005e68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005e6a:	4b10      	ldr	r3, [pc, #64]	; (8005eac <_sbrk+0x64>)
 8005e6c:	681a      	ldr	r2, [r3, #0]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	18d3      	adds	r3, r2, r3
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	429a      	cmp	r2, r3
 8005e76:	d207      	bcs.n	8005e88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8005e78:	f008 f8b4 	bl	800dfe4 <__errno>
 8005e7c:	0003      	movs	r3, r0
 8005e7e:	220c      	movs	r2, #12
 8005e80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8005e82:	2301      	movs	r3, #1
 8005e84:	425b      	negs	r3, r3
 8005e86:	e009      	b.n	8005e9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005e88:	4b08      	ldr	r3, [pc, #32]	; (8005eac <_sbrk+0x64>)
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005e8e:	4b07      	ldr	r3, [pc, #28]	; (8005eac <_sbrk+0x64>)
 8005e90:	681a      	ldr	r2, [r3, #0]
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	18d2      	adds	r2, r2, r3
 8005e96:	4b05      	ldr	r3, [pc, #20]	; (8005eac <_sbrk+0x64>)
 8005e98:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
}
 8005e9c:	0018      	movs	r0, r3
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	b006      	add	sp, #24
 8005ea2:	bd80      	pop	{r7, pc}
 8005ea4:	20009000 	.word	0x20009000
 8005ea8:	00000400 	.word	0x00000400
 8005eac:	20000ae8 	.word	0x20000ae8
 8005eb0:	20003ce8 	.word	0x20003ce8

08005eb4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8005eb4:	b580      	push	{r7, lr}
 8005eb6:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
 8005eb8:	4b03      	ldr	r3, [pc, #12]	; (8005ec8 <SystemInit+0x14>)
 8005eba:	2280      	movs	r2, #128	; 0x80
 8005ebc:	0512      	lsls	r2, r2, #20
 8005ebe:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8005ec0:	46c0      	nop			; (mov r8, r8)
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}
 8005ec6:	46c0      	nop			; (mov r8, r8)
 8005ec8:	e000ed00 	.word	0xe000ed00

08005ecc <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8005ecc:	480d      	ldr	r0, [pc, #52]	; (8005f04 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8005ece:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8005ed0:	f7ff fff0 	bl	8005eb4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005ed4:	480c      	ldr	r0, [pc, #48]	; (8005f08 <LoopForever+0x6>)
  ldr r1, =_edata
 8005ed6:	490d      	ldr	r1, [pc, #52]	; (8005f0c <LoopForever+0xa>)
  ldr r2, =_sidata
 8005ed8:	4a0d      	ldr	r2, [pc, #52]	; (8005f10 <LoopForever+0xe>)
  movs r3, #0
 8005eda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005edc:	e002      	b.n	8005ee4 <LoopCopyDataInit>

08005ede <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005ede:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005ee0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005ee2:	3304      	adds	r3, #4

08005ee4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005ee4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8005ee6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005ee8:	d3f9      	bcc.n	8005ede <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005eea:	4a0a      	ldr	r2, [pc, #40]	; (8005f14 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005eec:	4c0a      	ldr	r4, [pc, #40]	; (8005f18 <LoopForever+0x16>)
  movs r3, #0
 8005eee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005ef0:	e001      	b.n	8005ef6 <LoopFillZerobss>

08005ef2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005ef2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005ef4:	3204      	adds	r2, #4

08005ef6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8005ef6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005ef8:	d3fb      	bcc.n	8005ef2 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8005efa:	f008 f879 	bl	800dff0 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8005efe:	f7ff fbcb 	bl	8005698 <main>

08005f02 <LoopForever>:

LoopForever:
  b LoopForever
 8005f02:	e7fe      	b.n	8005f02 <LoopForever>
  ldr   r0, =_estack
 8005f04:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8005f08:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005f0c:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8005f10:	08011898 	.word	0x08011898
  ldr r2, =_sbss
 8005f14:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8005f18:	20003ce4 	.word	0x20003ce4

08005f1c <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8005f1c:	e7fe      	b.n	8005f1c <ADC1_COMP_IRQHandler>
	...

08005f20 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005f20:	b580      	push	{r7, lr}
 8005f22:	b082      	sub	sp, #8
 8005f24:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005f26:	1dfb      	adds	r3, r7, #7
 8005f28:	2200      	movs	r2, #0
 8005f2a:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8005f2c:	4b0b      	ldr	r3, [pc, #44]	; (8005f5c <HAL_Init+0x3c>)
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	4b0a      	ldr	r3, [pc, #40]	; (8005f5c <HAL_Init+0x3c>)
 8005f32:	2180      	movs	r1, #128	; 0x80
 8005f34:	0049      	lsls	r1, r1, #1
 8005f36:	430a      	orrs	r2, r1
 8005f38:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8005f3a:	2003      	movs	r0, #3
 8005f3c:	f7ff fe40 	bl	8005bc0 <HAL_InitTick>
 8005f40:	1e03      	subs	r3, r0, #0
 8005f42:	d003      	beq.n	8005f4c <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8005f44:	1dfb      	adds	r3, r7, #7
 8005f46:	2201      	movs	r2, #1
 8005f48:	701a      	strb	r2, [r3, #0]
 8005f4a:	e001      	b.n	8005f50 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8005f4c:	f7ff fd4e 	bl	80059ec <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8005f50:	1dfb      	adds	r3, r7, #7
 8005f52:	781b      	ldrb	r3, [r3, #0]
}
 8005f54:	0018      	movs	r0, r3
 8005f56:	46bd      	mov	sp, r7
 8005f58:	b002      	add	sp, #8
 8005f5a:	bd80      	pop	{r7, pc}
 8005f5c:	40022000 	.word	0x40022000

08005f60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005f60:	b580      	push	{r7, lr}
 8005f62:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8005f64:	4b05      	ldr	r3, [pc, #20]	; (8005f7c <HAL_IncTick+0x1c>)
 8005f66:	781b      	ldrb	r3, [r3, #0]
 8005f68:	001a      	movs	r2, r3
 8005f6a:	4b05      	ldr	r3, [pc, #20]	; (8005f80 <HAL_IncTick+0x20>)
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	18d2      	adds	r2, r2, r3
 8005f70:	4b03      	ldr	r3, [pc, #12]	; (8005f80 <HAL_IncTick+0x20>)
 8005f72:	601a      	str	r2, [r3, #0]
}
 8005f74:	46c0      	nop			; (mov r8, r8)
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}
 8005f7a:	46c0      	nop			; (mov r8, r8)
 8005f7c:	20000014 	.word	0x20000014
 8005f80:	20000aec 	.word	0x20000aec

08005f84 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	af00      	add	r7, sp, #0
  return uwTick;
 8005f88:	4b02      	ldr	r3, [pc, #8]	; (8005f94 <HAL_GetTick+0x10>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
}
 8005f8c:	0018      	movs	r0, r3
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	46c0      	nop			; (mov r8, r8)
 8005f94:	20000aec 	.word	0x20000aec

08005f98 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b082      	sub	sp, #8
 8005f9c:	af00      	add	r7, sp, #0
 8005f9e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8005fa0:	4b06      	ldr	r3, [pc, #24]	; (8005fbc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a06      	ldr	r2, [pc, #24]	; (8005fc0 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8005fa6:	4013      	ands	r3, r2
 8005fa8:	0019      	movs	r1, r3
 8005faa:	4b04      	ldr	r3, [pc, #16]	; (8005fbc <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8005fac:	687a      	ldr	r2, [r7, #4]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	601a      	str	r2, [r3, #0]
}
 8005fb2:	46c0      	nop			; (mov r8, r8)
 8005fb4:	46bd      	mov	sp, r7
 8005fb6:	b002      	add	sp, #8
 8005fb8:	bd80      	pop	{r7, pc}
 8005fba:	46c0      	nop			; (mov r8, r8)
 8005fbc:	40010000 	.word	0x40010000
 8005fc0:	fffff9ff 	.word	0xfffff9ff

08005fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b082      	sub	sp, #8
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	0002      	movs	r2, r0
 8005fcc:	1dfb      	adds	r3, r7, #7
 8005fce:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8005fd0:	1dfb      	adds	r3, r7, #7
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	2b7f      	cmp	r3, #127	; 0x7f
 8005fd6:	d809      	bhi.n	8005fec <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005fd8:	1dfb      	adds	r3, r7, #7
 8005fda:	781b      	ldrb	r3, [r3, #0]
 8005fdc:	001a      	movs	r2, r3
 8005fde:	231f      	movs	r3, #31
 8005fe0:	401a      	ands	r2, r3
 8005fe2:	4b04      	ldr	r3, [pc, #16]	; (8005ff4 <__NVIC_EnableIRQ+0x30>)
 8005fe4:	2101      	movs	r1, #1
 8005fe6:	4091      	lsls	r1, r2
 8005fe8:	000a      	movs	r2, r1
 8005fea:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005fec:	46c0      	nop			; (mov r8, r8)
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b002      	add	sp, #8
 8005ff2:	bd80      	pop	{r7, pc}
 8005ff4:	e000e100 	.word	0xe000e100

08005ff8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ff8:	b590      	push	{r4, r7, lr}
 8005ffa:	b083      	sub	sp, #12
 8005ffc:	af00      	add	r7, sp, #0
 8005ffe:	0002      	movs	r2, r0
 8006000:	6039      	str	r1, [r7, #0]
 8006002:	1dfb      	adds	r3, r7, #7
 8006004:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8006006:	1dfb      	adds	r3, r7, #7
 8006008:	781b      	ldrb	r3, [r3, #0]
 800600a:	2b7f      	cmp	r3, #127	; 0x7f
 800600c:	d828      	bhi.n	8006060 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800600e:	4a2f      	ldr	r2, [pc, #188]	; (80060cc <__NVIC_SetPriority+0xd4>)
 8006010:	1dfb      	adds	r3, r7, #7
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	b25b      	sxtb	r3, r3
 8006016:	089b      	lsrs	r3, r3, #2
 8006018:	33c0      	adds	r3, #192	; 0xc0
 800601a:	009b      	lsls	r3, r3, #2
 800601c:	589b      	ldr	r3, [r3, r2]
 800601e:	1dfa      	adds	r2, r7, #7
 8006020:	7812      	ldrb	r2, [r2, #0]
 8006022:	0011      	movs	r1, r2
 8006024:	2203      	movs	r2, #3
 8006026:	400a      	ands	r2, r1
 8006028:	00d2      	lsls	r2, r2, #3
 800602a:	21ff      	movs	r1, #255	; 0xff
 800602c:	4091      	lsls	r1, r2
 800602e:	000a      	movs	r2, r1
 8006030:	43d2      	mvns	r2, r2
 8006032:	401a      	ands	r2, r3
 8006034:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006036:	683b      	ldr	r3, [r7, #0]
 8006038:	019b      	lsls	r3, r3, #6
 800603a:	22ff      	movs	r2, #255	; 0xff
 800603c:	401a      	ands	r2, r3
 800603e:	1dfb      	adds	r3, r7, #7
 8006040:	781b      	ldrb	r3, [r3, #0]
 8006042:	0018      	movs	r0, r3
 8006044:	2303      	movs	r3, #3
 8006046:	4003      	ands	r3, r0
 8006048:	00db      	lsls	r3, r3, #3
 800604a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800604c:	481f      	ldr	r0, [pc, #124]	; (80060cc <__NVIC_SetPriority+0xd4>)
 800604e:	1dfb      	adds	r3, r7, #7
 8006050:	781b      	ldrb	r3, [r3, #0]
 8006052:	b25b      	sxtb	r3, r3
 8006054:	089b      	lsrs	r3, r3, #2
 8006056:	430a      	orrs	r2, r1
 8006058:	33c0      	adds	r3, #192	; 0xc0
 800605a:	009b      	lsls	r3, r3, #2
 800605c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800605e:	e031      	b.n	80060c4 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8006060:	4a1b      	ldr	r2, [pc, #108]	; (80060d0 <__NVIC_SetPriority+0xd8>)
 8006062:	1dfb      	adds	r3, r7, #7
 8006064:	781b      	ldrb	r3, [r3, #0]
 8006066:	0019      	movs	r1, r3
 8006068:	230f      	movs	r3, #15
 800606a:	400b      	ands	r3, r1
 800606c:	3b08      	subs	r3, #8
 800606e:	089b      	lsrs	r3, r3, #2
 8006070:	3306      	adds	r3, #6
 8006072:	009b      	lsls	r3, r3, #2
 8006074:	18d3      	adds	r3, r2, r3
 8006076:	3304      	adds	r3, #4
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	1dfa      	adds	r2, r7, #7
 800607c:	7812      	ldrb	r2, [r2, #0]
 800607e:	0011      	movs	r1, r2
 8006080:	2203      	movs	r2, #3
 8006082:	400a      	ands	r2, r1
 8006084:	00d2      	lsls	r2, r2, #3
 8006086:	21ff      	movs	r1, #255	; 0xff
 8006088:	4091      	lsls	r1, r2
 800608a:	000a      	movs	r2, r1
 800608c:	43d2      	mvns	r2, r2
 800608e:	401a      	ands	r2, r3
 8006090:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	019b      	lsls	r3, r3, #6
 8006096:	22ff      	movs	r2, #255	; 0xff
 8006098:	401a      	ands	r2, r3
 800609a:	1dfb      	adds	r3, r7, #7
 800609c:	781b      	ldrb	r3, [r3, #0]
 800609e:	0018      	movs	r0, r3
 80060a0:	2303      	movs	r3, #3
 80060a2:	4003      	ands	r3, r0
 80060a4:	00db      	lsls	r3, r3, #3
 80060a6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80060a8:	4809      	ldr	r0, [pc, #36]	; (80060d0 <__NVIC_SetPriority+0xd8>)
 80060aa:	1dfb      	adds	r3, r7, #7
 80060ac:	781b      	ldrb	r3, [r3, #0]
 80060ae:	001c      	movs	r4, r3
 80060b0:	230f      	movs	r3, #15
 80060b2:	4023      	ands	r3, r4
 80060b4:	3b08      	subs	r3, #8
 80060b6:	089b      	lsrs	r3, r3, #2
 80060b8:	430a      	orrs	r2, r1
 80060ba:	3306      	adds	r3, #6
 80060bc:	009b      	lsls	r3, r3, #2
 80060be:	18c3      	adds	r3, r0, r3
 80060c0:	3304      	adds	r3, #4
 80060c2:	601a      	str	r2, [r3, #0]
}
 80060c4:	46c0      	nop			; (mov r8, r8)
 80060c6:	46bd      	mov	sp, r7
 80060c8:	b003      	add	sp, #12
 80060ca:	bd90      	pop	{r4, r7, pc}
 80060cc:	e000e100 	.word	0xe000e100
 80060d0:	e000ed00 	.word	0xe000ed00

080060d4 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80060d4:	b580      	push	{r7, lr}
 80060d6:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80060d8:	f3bf 8f4f 	dsb	sy
}
 80060dc:	46c0      	nop			; (mov r8, r8)
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = ((0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80060de:	4b04      	ldr	r3, [pc, #16]	; (80060f0 <__NVIC_SystemReset+0x1c>)
 80060e0:	4a04      	ldr	r2, [pc, #16]	; (80060f4 <__NVIC_SystemReset+0x20>)
 80060e2:	60da      	str	r2, [r3, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80060e4:	f3bf 8f4f 	dsb	sy
}
 80060e8:	46c0      	nop			; (mov r8, r8)
                 SCB_AIRCR_SYSRESETREQ_Msk);
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80060ea:	46c0      	nop			; (mov r8, r8)
 80060ec:	e7fd      	b.n	80060ea <__NVIC_SystemReset+0x16>
 80060ee:	46c0      	nop			; (mov r8, r8)
 80060f0:	e000ed00 	.word	0xe000ed00
 80060f4:	05fa0004 	.word	0x05fa0004

080060f8 <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80060f8:	b580      	push	{r7, lr}
 80060fa:	b084      	sub	sp, #16
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	60b9      	str	r1, [r7, #8]
 8006100:	607a      	str	r2, [r7, #4]
 8006102:	210f      	movs	r1, #15
 8006104:	187b      	adds	r3, r7, r1
 8006106:	1c02      	adds	r2, r0, #0
 8006108:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800610a:	68ba      	ldr	r2, [r7, #8]
 800610c:	187b      	adds	r3, r7, r1
 800610e:	781b      	ldrb	r3, [r3, #0]
 8006110:	b25b      	sxtb	r3, r3
 8006112:	0011      	movs	r1, r2
 8006114:	0018      	movs	r0, r3
 8006116:	f7ff ff6f 	bl	8005ff8 <__NVIC_SetPriority>
}
 800611a:	46c0      	nop			; (mov r8, r8)
 800611c:	46bd      	mov	sp, r7
 800611e:	b004      	add	sp, #16
 8006120:	bd80      	pop	{r7, pc}

08006122 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006122:	b580      	push	{r7, lr}
 8006124:	b082      	sub	sp, #8
 8006126:	af00      	add	r7, sp, #0
 8006128:	0002      	movs	r2, r0
 800612a:	1dfb      	adds	r3, r7, #7
 800612c:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800612e:	1dfb      	adds	r3, r7, #7
 8006130:	781b      	ldrb	r3, [r3, #0]
 8006132:	b25b      	sxtb	r3, r3
 8006134:	0018      	movs	r0, r3
 8006136:	f7ff ff45 	bl	8005fc4 <__NVIC_EnableIRQ>
}
 800613a:	46c0      	nop			; (mov r8, r8)
 800613c:	46bd      	mov	sp, r7
 800613e:	b002      	add	sp, #8
 8006140:	bd80      	pop	{r7, pc}

08006142 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006142:	b580      	push	{r7, lr}
 8006144:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006146:	f7ff ffc5 	bl	80060d4 <__NVIC_SystemReset>
	...

0800614c <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b082      	sub	sp, #8
 8006150:	af00      	add	r7, sp, #0
 8006152:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d101      	bne.n	800615e <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 800615a:	2301      	movs	r3, #1
 800615c:	e050      	b.n	8006200 <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2225      	movs	r2, #37	; 0x25
 8006162:	5c9b      	ldrb	r3, [r3, r2]
 8006164:	b2db      	uxtb	r3, r3
 8006166:	2b02      	cmp	r3, #2
 8006168:	d008      	beq.n	800617c <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	2204      	movs	r2, #4
 800616e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	2224      	movs	r2, #36	; 0x24
 8006174:	2100      	movs	r1, #0
 8006176:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8006178:	2301      	movs	r3, #1
 800617a:	e041      	b.n	8006200 <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	681a      	ldr	r2, [r3, #0]
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	210e      	movs	r1, #14
 8006188:	438a      	bics	r2, r1
 800618a:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006190:	681a      	ldr	r2, [r3, #0]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006196:	491c      	ldr	r1, [pc, #112]	; (8006208 <HAL_DMA_Abort+0xbc>)
 8006198:	400a      	ands	r2, r1
 800619a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	2101      	movs	r1, #1
 80061a8:	438a      	bics	r2, r1
 80061aa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80061ac:	4b17      	ldr	r3, [pc, #92]	; (800620c <HAL_DMA_Abort+0xc0>)
 80061ae:	6859      	ldr	r1, [r3, #4]
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b4:	221c      	movs	r2, #28
 80061b6:	4013      	ands	r3, r2
 80061b8:	2201      	movs	r2, #1
 80061ba:	409a      	lsls	r2, r3
 80061bc:	4b13      	ldr	r3, [pc, #76]	; (800620c <HAL_DMA_Abort+0xc0>)
 80061be:	430a      	orrs	r2, r1
 80061c0:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80061c6:	687a      	ldr	r2, [r7, #4]
 80061c8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80061ca:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d00c      	beq.n	80061ee <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061de:	490a      	ldr	r1, [pc, #40]	; (8006208 <HAL_DMA_Abort+0xbc>)
 80061e0:	400a      	ands	r2, r1
 80061e2:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80061e8:	687a      	ldr	r2, [r7, #4]
 80061ea:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80061ec:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2225      	movs	r2, #37	; 0x25
 80061f2:	2101      	movs	r1, #1
 80061f4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	2224      	movs	r2, #36	; 0x24
 80061fa:	2100      	movs	r1, #0
 80061fc:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80061fe:	2300      	movs	r3, #0
}
 8006200:	0018      	movs	r0, r3
 8006202:	46bd      	mov	sp, r7
 8006204:	b002      	add	sp, #8
 8006206:	bd80      	pop	{r7, pc}
 8006208:	fffffeff 	.word	0xfffffeff
 800620c:	40020000 	.word	0x40020000

08006210 <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b084      	sub	sp, #16
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006218:	210f      	movs	r1, #15
 800621a:	187b      	adds	r3, r7, r1
 800621c:	2200      	movs	r2, #0
 800621e:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	2225      	movs	r2, #37	; 0x25
 8006224:	5c9b      	ldrb	r3, [r3, r2]
 8006226:	b2db      	uxtb	r3, r3
 8006228:	2b02      	cmp	r3, #2
 800622a:	d006      	beq.n	800623a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2204      	movs	r2, #4
 8006230:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8006232:	187b      	adds	r3, r7, r1
 8006234:	2201      	movs	r2, #1
 8006236:	701a      	strb	r2, [r3, #0]
 8006238:	e049      	b.n	80062ce <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	210e      	movs	r1, #14
 8006246:	438a      	bics	r2, r1
 8006248:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	2101      	movs	r1, #1
 8006256:	438a      	bics	r2, r1
 8006258:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800625e:	681a      	ldr	r2, [r3, #0]
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006264:	491d      	ldr	r1, [pc, #116]	; (80062dc <HAL_DMA_Abort_IT+0xcc>)
 8006266:	400a      	ands	r2, r1
 8006268:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 800626a:	4b1d      	ldr	r3, [pc, #116]	; (80062e0 <HAL_DMA_Abort_IT+0xd0>)
 800626c:	6859      	ldr	r1, [r3, #4]
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006272:	221c      	movs	r2, #28
 8006274:	4013      	ands	r3, r2
 8006276:	2201      	movs	r2, #1
 8006278:	409a      	lsls	r2, r3
 800627a:	4b19      	ldr	r3, [pc, #100]	; (80062e0 <HAL_DMA_Abort_IT+0xd0>)
 800627c:	430a      	orrs	r2, r1
 800627e:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006284:	687a      	ldr	r2, [r7, #4]
 8006286:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8006288:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800628e:	2b00      	cmp	r3, #0
 8006290:	d00c      	beq.n	80062ac <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800629c:	490f      	ldr	r1, [pc, #60]	; (80062dc <HAL_DMA_Abort_IT+0xcc>)
 800629e:	400a      	ands	r2, r1
 80062a0:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062a6:	687a      	ldr	r2, [r7, #4]
 80062a8:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80062aa:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	2225      	movs	r2, #37	; 0x25
 80062b0:	2101      	movs	r1, #1
 80062b2:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2224      	movs	r2, #36	; 0x24
 80062b8:	2100      	movs	r1, #0
 80062ba:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d004      	beq.n	80062ce <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	0010      	movs	r0, r2
 80062cc:	4798      	blx	r3
    }
  }
  return status;
 80062ce:	230f      	movs	r3, #15
 80062d0:	18fb      	adds	r3, r7, r3
 80062d2:	781b      	ldrb	r3, [r3, #0]
}
 80062d4:	0018      	movs	r0, r3
 80062d6:	46bd      	mov	sp, r7
 80062d8:	b004      	add	sp, #16
 80062da:	bd80      	pop	{r7, pc}
 80062dc:	fffffeff 	.word	0xfffffeff
 80062e0:	40020000 	.word	0x40020000

080062e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80062e4:	b580      	push	{r7, lr}
 80062e6:	b086      	sub	sp, #24
 80062e8:	af00      	add	r7, sp, #0
 80062ea:	6078      	str	r0, [r7, #4]
 80062ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80062ee:	2300      	movs	r3, #0
 80062f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062f2:	e147      	b.n	8006584 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80062f4:	683b      	ldr	r3, [r7, #0]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	2101      	movs	r1, #1
 80062fa:	697a      	ldr	r2, [r7, #20]
 80062fc:	4091      	lsls	r1, r2
 80062fe:	000a      	movs	r2, r1
 8006300:	4013      	ands	r3, r2
 8006302:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2b00      	cmp	r3, #0
 8006308:	d100      	bne.n	800630c <HAL_GPIO_Init+0x28>
 800630a:	e138      	b.n	800657e <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	685b      	ldr	r3, [r3, #4]
 8006310:	2203      	movs	r2, #3
 8006312:	4013      	ands	r3, r2
 8006314:	2b01      	cmp	r3, #1
 8006316:	d005      	beq.n	8006324 <HAL_GPIO_Init+0x40>
 8006318:	683b      	ldr	r3, [r7, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	2203      	movs	r2, #3
 800631e:	4013      	ands	r3, r2
 8006320:	2b02      	cmp	r3, #2
 8006322:	d130      	bne.n	8006386 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	689b      	ldr	r3, [r3, #8]
 8006328:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	005b      	lsls	r3, r3, #1
 800632e:	2203      	movs	r2, #3
 8006330:	409a      	lsls	r2, r3
 8006332:	0013      	movs	r3, r2
 8006334:	43da      	mvns	r2, r3
 8006336:	693b      	ldr	r3, [r7, #16]
 8006338:	4013      	ands	r3, r2
 800633a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	68da      	ldr	r2, [r3, #12]
 8006340:	697b      	ldr	r3, [r7, #20]
 8006342:	005b      	lsls	r3, r3, #1
 8006344:	409a      	lsls	r2, r3
 8006346:	0013      	movs	r3, r2
 8006348:	693a      	ldr	r2, [r7, #16]
 800634a:	4313      	orrs	r3, r2
 800634c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	693a      	ldr	r2, [r7, #16]
 8006352:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800635a:	2201      	movs	r2, #1
 800635c:	697b      	ldr	r3, [r7, #20]
 800635e:	409a      	lsls	r2, r3
 8006360:	0013      	movs	r3, r2
 8006362:	43da      	mvns	r2, r3
 8006364:	693b      	ldr	r3, [r7, #16]
 8006366:	4013      	ands	r3, r2
 8006368:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800636a:	683b      	ldr	r3, [r7, #0]
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	091b      	lsrs	r3, r3, #4
 8006370:	2201      	movs	r2, #1
 8006372:	401a      	ands	r2, r3
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	409a      	lsls	r2, r3
 8006378:	0013      	movs	r3, r2
 800637a:	693a      	ldr	r2, [r7, #16]
 800637c:	4313      	orrs	r3, r2
 800637e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	685b      	ldr	r3, [r3, #4]
 800638a:	2203      	movs	r2, #3
 800638c:	4013      	ands	r3, r2
 800638e:	2b03      	cmp	r3, #3
 8006390:	d017      	beq.n	80063c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	68db      	ldr	r3, [r3, #12]
 8006396:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8006398:	697b      	ldr	r3, [r7, #20]
 800639a:	005b      	lsls	r3, r3, #1
 800639c:	2203      	movs	r2, #3
 800639e:	409a      	lsls	r2, r3
 80063a0:	0013      	movs	r3, r2
 80063a2:	43da      	mvns	r2, r3
 80063a4:	693b      	ldr	r3, [r7, #16]
 80063a6:	4013      	ands	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	689a      	ldr	r2, [r3, #8]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	005b      	lsls	r3, r3, #1
 80063b2:	409a      	lsls	r2, r3
 80063b4:	0013      	movs	r3, r2
 80063b6:	693a      	ldr	r2, [r7, #16]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	693a      	ldr	r2, [r7, #16]
 80063c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80063c2:	683b      	ldr	r3, [r7, #0]
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	2203      	movs	r2, #3
 80063c8:	4013      	ands	r3, r2
 80063ca:	2b02      	cmp	r3, #2
 80063cc:	d123      	bne.n	8006416 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80063ce:	697b      	ldr	r3, [r7, #20]
 80063d0:	08da      	lsrs	r2, r3, #3
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	3208      	adds	r2, #8
 80063d6:	0092      	lsls	r2, r2, #2
 80063d8:	58d3      	ldr	r3, [r2, r3]
 80063da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	2207      	movs	r2, #7
 80063e0:	4013      	ands	r3, r2
 80063e2:	009b      	lsls	r3, r3, #2
 80063e4:	220f      	movs	r2, #15
 80063e6:	409a      	lsls	r2, r3
 80063e8:	0013      	movs	r3, r2
 80063ea:	43da      	mvns	r2, r3
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	4013      	ands	r3, r2
 80063f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80063f2:	683b      	ldr	r3, [r7, #0]
 80063f4:	691a      	ldr	r2, [r3, #16]
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	2107      	movs	r1, #7
 80063fa:	400b      	ands	r3, r1
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	409a      	lsls	r2, r3
 8006400:	0013      	movs	r3, r2
 8006402:	693a      	ldr	r2, [r7, #16]
 8006404:	4313      	orrs	r3, r2
 8006406:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006408:	697b      	ldr	r3, [r7, #20]
 800640a:	08da      	lsrs	r2, r3, #3
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	3208      	adds	r2, #8
 8006410:	0092      	lsls	r2, r2, #2
 8006412:	6939      	ldr	r1, [r7, #16]
 8006414:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	005b      	lsls	r3, r3, #1
 8006420:	2203      	movs	r2, #3
 8006422:	409a      	lsls	r2, r3
 8006424:	0013      	movs	r3, r2
 8006426:	43da      	mvns	r2, r3
 8006428:	693b      	ldr	r3, [r7, #16]
 800642a:	4013      	ands	r3, r2
 800642c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800642e:	683b      	ldr	r3, [r7, #0]
 8006430:	685b      	ldr	r3, [r3, #4]
 8006432:	2203      	movs	r2, #3
 8006434:	401a      	ands	r2, r3
 8006436:	697b      	ldr	r3, [r7, #20]
 8006438:	005b      	lsls	r3, r3, #1
 800643a:	409a      	lsls	r2, r3
 800643c:	0013      	movs	r3, r2
 800643e:	693a      	ldr	r2, [r7, #16]
 8006440:	4313      	orrs	r3, r2
 8006442:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	693a      	ldr	r2, [r7, #16]
 8006448:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	685a      	ldr	r2, [r3, #4]
 800644e:	23c0      	movs	r3, #192	; 0xc0
 8006450:	029b      	lsls	r3, r3, #10
 8006452:	4013      	ands	r3, r2
 8006454:	d100      	bne.n	8006458 <HAL_GPIO_Init+0x174>
 8006456:	e092      	b.n	800657e <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8006458:	4a50      	ldr	r2, [pc, #320]	; (800659c <HAL_GPIO_Init+0x2b8>)
 800645a:	697b      	ldr	r3, [r7, #20]
 800645c:	089b      	lsrs	r3, r3, #2
 800645e:	3318      	adds	r3, #24
 8006460:	009b      	lsls	r3, r3, #2
 8006462:	589b      	ldr	r3, [r3, r2]
 8006464:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8006466:	697b      	ldr	r3, [r7, #20]
 8006468:	2203      	movs	r2, #3
 800646a:	4013      	ands	r3, r2
 800646c:	00db      	lsls	r3, r3, #3
 800646e:	220f      	movs	r2, #15
 8006470:	409a      	lsls	r2, r3
 8006472:	0013      	movs	r3, r2
 8006474:	43da      	mvns	r2, r3
 8006476:	693b      	ldr	r3, [r7, #16]
 8006478:	4013      	ands	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 800647c:	687a      	ldr	r2, [r7, #4]
 800647e:	23a0      	movs	r3, #160	; 0xa0
 8006480:	05db      	lsls	r3, r3, #23
 8006482:	429a      	cmp	r2, r3
 8006484:	d013      	beq.n	80064ae <HAL_GPIO_Init+0x1ca>
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	4a45      	ldr	r2, [pc, #276]	; (80065a0 <HAL_GPIO_Init+0x2bc>)
 800648a:	4293      	cmp	r3, r2
 800648c:	d00d      	beq.n	80064aa <HAL_GPIO_Init+0x1c6>
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	4a44      	ldr	r2, [pc, #272]	; (80065a4 <HAL_GPIO_Init+0x2c0>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d007      	beq.n	80064a6 <HAL_GPIO_Init+0x1c2>
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	4a43      	ldr	r2, [pc, #268]	; (80065a8 <HAL_GPIO_Init+0x2c4>)
 800649a:	4293      	cmp	r3, r2
 800649c:	d101      	bne.n	80064a2 <HAL_GPIO_Init+0x1be>
 800649e:	2303      	movs	r3, #3
 80064a0:	e006      	b.n	80064b0 <HAL_GPIO_Init+0x1cc>
 80064a2:	2305      	movs	r3, #5
 80064a4:	e004      	b.n	80064b0 <HAL_GPIO_Init+0x1cc>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e002      	b.n	80064b0 <HAL_GPIO_Init+0x1cc>
 80064aa:	2301      	movs	r3, #1
 80064ac:	e000      	b.n	80064b0 <HAL_GPIO_Init+0x1cc>
 80064ae:	2300      	movs	r3, #0
 80064b0:	697a      	ldr	r2, [r7, #20]
 80064b2:	2103      	movs	r1, #3
 80064b4:	400a      	ands	r2, r1
 80064b6:	00d2      	lsls	r2, r2, #3
 80064b8:	4093      	lsls	r3, r2
 80064ba:	693a      	ldr	r2, [r7, #16]
 80064bc:	4313      	orrs	r3, r2
 80064be:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80064c0:	4936      	ldr	r1, [pc, #216]	; (800659c <HAL_GPIO_Init+0x2b8>)
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	089b      	lsrs	r3, r3, #2
 80064c6:	3318      	adds	r3, #24
 80064c8:	009b      	lsls	r3, r3, #2
 80064ca:	693a      	ldr	r2, [r7, #16]
 80064cc:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80064ce:	4b33      	ldr	r3, [pc, #204]	; (800659c <HAL_GPIO_Init+0x2b8>)
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	43da      	mvns	r2, r3
 80064d8:	693b      	ldr	r3, [r7, #16]
 80064da:	4013      	ands	r3, r2
 80064dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80064de:	683b      	ldr	r3, [r7, #0]
 80064e0:	685a      	ldr	r2, [r3, #4]
 80064e2:	2380      	movs	r3, #128	; 0x80
 80064e4:	035b      	lsls	r3, r3, #13
 80064e6:	4013      	ands	r3, r2
 80064e8:	d003      	beq.n	80064f2 <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80064ea:	693a      	ldr	r2, [r7, #16]
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80064f2:	4b2a      	ldr	r3, [pc, #168]	; (800659c <HAL_GPIO_Init+0x2b8>)
 80064f4:	693a      	ldr	r2, [r7, #16]
 80064f6:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80064f8:	4b28      	ldr	r3, [pc, #160]	; (800659c <HAL_GPIO_Init+0x2b8>)
 80064fa:	685b      	ldr	r3, [r3, #4]
 80064fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	43da      	mvns	r2, r3
 8006502:	693b      	ldr	r3, [r7, #16]
 8006504:	4013      	ands	r3, r2
 8006506:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	2380      	movs	r3, #128	; 0x80
 800650e:	039b      	lsls	r3, r3, #14
 8006510:	4013      	ands	r3, r2
 8006512:	d003      	beq.n	800651c <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8006514:	693a      	ldr	r2, [r7, #16]
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	4313      	orrs	r3, r2
 800651a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800651c:	4b1f      	ldr	r3, [pc, #124]	; (800659c <HAL_GPIO_Init+0x2b8>)
 800651e:	693a      	ldr	r2, [r7, #16]
 8006520:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006522:	4a1e      	ldr	r2, [pc, #120]	; (800659c <HAL_GPIO_Init+0x2b8>)
 8006524:	2384      	movs	r3, #132	; 0x84
 8006526:	58d3      	ldr	r3, [r2, r3]
 8006528:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	43da      	mvns	r2, r3
 800652e:	693b      	ldr	r3, [r7, #16]
 8006530:	4013      	ands	r3, r2
 8006532:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	685a      	ldr	r2, [r3, #4]
 8006538:	2380      	movs	r3, #128	; 0x80
 800653a:	029b      	lsls	r3, r3, #10
 800653c:	4013      	ands	r3, r2
 800653e:	d003      	beq.n	8006548 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 8006540:	693a      	ldr	r2, [r7, #16]
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	4313      	orrs	r3, r2
 8006546:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006548:	4914      	ldr	r1, [pc, #80]	; (800659c <HAL_GPIO_Init+0x2b8>)
 800654a:	2284      	movs	r2, #132	; 0x84
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8006550:	4a12      	ldr	r2, [pc, #72]	; (800659c <HAL_GPIO_Init+0x2b8>)
 8006552:	2380      	movs	r3, #128	; 0x80
 8006554:	58d3      	ldr	r3, [r2, r3]
 8006556:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	43da      	mvns	r2, r3
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	4013      	ands	r3, r2
 8006560:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006562:	683b      	ldr	r3, [r7, #0]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	2380      	movs	r3, #128	; 0x80
 8006568:	025b      	lsls	r3, r3, #9
 800656a:	4013      	ands	r3, r2
 800656c:	d003      	beq.n	8006576 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800656e:	693a      	ldr	r2, [r7, #16]
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	4313      	orrs	r3, r2
 8006574:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8006576:	4909      	ldr	r1, [pc, #36]	; (800659c <HAL_GPIO_Init+0x2b8>)
 8006578:	2280      	movs	r2, #128	; 0x80
 800657a:	693b      	ldr	r3, [r7, #16]
 800657c:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	3301      	adds	r3, #1
 8006582:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	681a      	ldr	r2, [r3, #0]
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	40da      	lsrs	r2, r3
 800658c:	1e13      	subs	r3, r2, #0
 800658e:	d000      	beq.n	8006592 <HAL_GPIO_Init+0x2ae>
 8006590:	e6b0      	b.n	80062f4 <HAL_GPIO_Init+0x10>
  }
}
 8006592:	46c0      	nop			; (mov r8, r8)
 8006594:	46c0      	nop			; (mov r8, r8)
 8006596:	46bd      	mov	sp, r7
 8006598:	b006      	add	sp, #24
 800659a:	bd80      	pop	{r7, pc}
 800659c:	40021800 	.word	0x40021800
 80065a0:	50000400 	.word	0x50000400
 80065a4:	50000800 	.word	0x50000800
 80065a8:	50000c00 	.word	0x50000c00

080065ac <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b082      	sub	sp, #8
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	0002      	movs	r2, r0
 80065b4:	1dbb      	adds	r3, r7, #6
 80065b6:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80065ba:	68db      	ldr	r3, [r3, #12]
 80065bc:	1dba      	adds	r2, r7, #6
 80065be:	8812      	ldrh	r2, [r2, #0]
 80065c0:	4013      	ands	r3, r2
 80065c2:	d008      	beq.n	80065d6 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80065c4:	4b0d      	ldr	r3, [pc, #52]	; (80065fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80065c6:	1dba      	adds	r2, r7, #6
 80065c8:	8812      	ldrh	r2, [r2, #0]
 80065ca:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80065cc:	1dbb      	adds	r3, r7, #6
 80065ce:	881b      	ldrh	r3, [r3, #0]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f000 f815 	bl	8006600 <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80065d6:	4b09      	ldr	r3, [pc, #36]	; (80065fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80065d8:	691b      	ldr	r3, [r3, #16]
 80065da:	1dba      	adds	r2, r7, #6
 80065dc:	8812      	ldrh	r2, [r2, #0]
 80065de:	4013      	ands	r3, r2
 80065e0:	d008      	beq.n	80065f4 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80065e2:	4b06      	ldr	r3, [pc, #24]	; (80065fc <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80065e4:	1dba      	adds	r2, r7, #6
 80065e6:	8812      	ldrh	r2, [r2, #0]
 80065e8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80065ea:	1dbb      	adds	r3, r7, #6
 80065ec:	881b      	ldrh	r3, [r3, #0]
 80065ee:	0018      	movs	r0, r3
 80065f0:	f000 f810 	bl	8006614 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80065f4:	46c0      	nop			; (mov r8, r8)
 80065f6:	46bd      	mov	sp, r7
 80065f8:	b002      	add	sp, #8
 80065fa:	bd80      	pop	{r7, pc}
 80065fc:	40021800 	.word	0x40021800

08006600 <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 8006600:	b580      	push	{r7, lr}
 8006602:	b082      	sub	sp, #8
 8006604:	af00      	add	r7, sp, #0
 8006606:	0002      	movs	r2, r0
 8006608:	1dbb      	adds	r3, r7, #6
 800660a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 800660c:	46c0      	nop			; (mov r8, r8)
 800660e:	46bd      	mov	sp, r7
 8006610:	b002      	add	sp, #8
 8006612:	bd80      	pop	{r7, pc}

08006614 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b082      	sub	sp, #8
 8006618:	af00      	add	r7, sp, #0
 800661a:	0002      	movs	r2, r0
 800661c:	1dbb      	adds	r3, r7, #6
 800661e:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 8006620:	46c0      	nop			; (mov r8, r8)
 8006622:	46bd      	mov	sp, r7
 8006624:	b002      	add	sp, #8
 8006626:	bd80      	pop	{r7, pc}

08006628 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006628:	b580      	push	{r7, lr}
 800662a:	b084      	sub	sp, #16
 800662c:	af00      	add	r7, sp, #0
 800662e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8006630:	4b19      	ldr	r3, [pc, #100]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	4a19      	ldr	r2, [pc, #100]	; (800669c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8006636:	4013      	ands	r3, r2
 8006638:	0019      	movs	r1, r3
 800663a:	4b17      	ldr	r3, [pc, #92]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800663c:	687a      	ldr	r2, [r7, #4]
 800663e:	430a      	orrs	r2, r1
 8006640:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006642:	687a      	ldr	r2, [r7, #4]
 8006644:	2380      	movs	r3, #128	; 0x80
 8006646:	009b      	lsls	r3, r3, #2
 8006648:	429a      	cmp	r2, r3
 800664a:	d11f      	bne.n	800668c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800664c:	4b14      	ldr	r3, [pc, #80]	; (80066a0 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800664e:	681a      	ldr	r2, [r3, #0]
 8006650:	0013      	movs	r3, r2
 8006652:	005b      	lsls	r3, r3, #1
 8006654:	189b      	adds	r3, r3, r2
 8006656:	005b      	lsls	r3, r3, #1
 8006658:	4912      	ldr	r1, [pc, #72]	; (80066a4 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800665a:	0018      	movs	r0, r3
 800665c:	f7f9 fd7a 	bl	8000154 <__udivsi3>
 8006660:	0003      	movs	r3, r0
 8006662:	3301      	adds	r3, #1
 8006664:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006666:	e008      	b.n	800667a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d003      	beq.n	8006676 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	3b01      	subs	r3, #1
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	e001      	b.n	800667a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8006676:	2303      	movs	r3, #3
 8006678:	e009      	b.n	800668e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800667a:	4b07      	ldr	r3, [pc, #28]	; (8006698 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800667c:	695a      	ldr	r2, [r3, #20]
 800667e:	2380      	movs	r3, #128	; 0x80
 8006680:	00db      	lsls	r3, r3, #3
 8006682:	401a      	ands	r2, r3
 8006684:	2380      	movs	r3, #128	; 0x80
 8006686:	00db      	lsls	r3, r3, #3
 8006688:	429a      	cmp	r2, r3
 800668a:	d0ed      	beq.n	8006668 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800668c:	2300      	movs	r3, #0
}
 800668e:	0018      	movs	r0, r3
 8006690:	46bd      	mov	sp, r7
 8006692:	b004      	add	sp, #16
 8006694:	bd80      	pop	{r7, pc}
 8006696:	46c0      	nop			; (mov r8, r8)
 8006698:	40007000 	.word	0x40007000
 800669c:	fffff9ff 	.word	0xfffff9ff
 80066a0:	2000000c 	.word	0x2000000c
 80066a4:	000f4240 	.word	0x000f4240

080066a8 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80066ac:	4b03      	ldr	r3, [pc, #12]	; (80066bc <LL_RCC_GetAPB1Prescaler+0x14>)
 80066ae:	689a      	ldr	r2, [r3, #8]
 80066b0:	23e0      	movs	r3, #224	; 0xe0
 80066b2:	01db      	lsls	r3, r3, #7
 80066b4:	4013      	ands	r3, r2
}
 80066b6:	0018      	movs	r0, r3
 80066b8:	46bd      	mov	sp, r7
 80066ba:	bd80      	pop	{r7, pc}
 80066bc:	40021000 	.word	0x40021000

080066c0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b088      	sub	sp, #32
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d101      	bne.n	80066d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ce:	2301      	movs	r3, #1
 80066d0:	e2fe      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	2201      	movs	r2, #1
 80066d8:	4013      	ands	r3, r2
 80066da:	d100      	bne.n	80066de <HAL_RCC_OscConfig+0x1e>
 80066dc:	e07c      	b.n	80067d8 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80066de:	4bc3      	ldr	r3, [pc, #780]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	2238      	movs	r2, #56	; 0x38
 80066e4:	4013      	ands	r3, r2
 80066e6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80066e8:	4bc0      	ldr	r3, [pc, #768]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	2203      	movs	r2, #3
 80066ee:	4013      	ands	r3, r2
 80066f0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	2b10      	cmp	r3, #16
 80066f6:	d102      	bne.n	80066fe <HAL_RCC_OscConfig+0x3e>
 80066f8:	697b      	ldr	r3, [r7, #20]
 80066fa:	2b03      	cmp	r3, #3
 80066fc:	d002      	beq.n	8006704 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80066fe:	69bb      	ldr	r3, [r7, #24]
 8006700:	2b08      	cmp	r3, #8
 8006702:	d10b      	bne.n	800671c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006704:	4bb9      	ldr	r3, [pc, #740]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	2380      	movs	r3, #128	; 0x80
 800670a:	029b      	lsls	r3, r3, #10
 800670c:	4013      	ands	r3, r2
 800670e:	d062      	beq.n	80067d6 <HAL_RCC_OscConfig+0x116>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	685b      	ldr	r3, [r3, #4]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d15e      	bne.n	80067d6 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e2d9      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	685a      	ldr	r2, [r3, #4]
 8006720:	2380      	movs	r3, #128	; 0x80
 8006722:	025b      	lsls	r3, r3, #9
 8006724:	429a      	cmp	r2, r3
 8006726:	d107      	bne.n	8006738 <HAL_RCC_OscConfig+0x78>
 8006728:	4bb0      	ldr	r3, [pc, #704]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 800672a:	681a      	ldr	r2, [r3, #0]
 800672c:	4baf      	ldr	r3, [pc, #700]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 800672e:	2180      	movs	r1, #128	; 0x80
 8006730:	0249      	lsls	r1, r1, #9
 8006732:	430a      	orrs	r2, r1
 8006734:	601a      	str	r2, [r3, #0]
 8006736:	e020      	b.n	800677a <HAL_RCC_OscConfig+0xba>
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685a      	ldr	r2, [r3, #4]
 800673c:	23a0      	movs	r3, #160	; 0xa0
 800673e:	02db      	lsls	r3, r3, #11
 8006740:	429a      	cmp	r2, r3
 8006742:	d10e      	bne.n	8006762 <HAL_RCC_OscConfig+0xa2>
 8006744:	4ba9      	ldr	r3, [pc, #676]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006746:	681a      	ldr	r2, [r3, #0]
 8006748:	4ba8      	ldr	r3, [pc, #672]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 800674a:	2180      	movs	r1, #128	; 0x80
 800674c:	02c9      	lsls	r1, r1, #11
 800674e:	430a      	orrs	r2, r1
 8006750:	601a      	str	r2, [r3, #0]
 8006752:	4ba6      	ldr	r3, [pc, #664]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006754:	681a      	ldr	r2, [r3, #0]
 8006756:	4ba5      	ldr	r3, [pc, #660]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006758:	2180      	movs	r1, #128	; 0x80
 800675a:	0249      	lsls	r1, r1, #9
 800675c:	430a      	orrs	r2, r1
 800675e:	601a      	str	r2, [r3, #0]
 8006760:	e00b      	b.n	800677a <HAL_RCC_OscConfig+0xba>
 8006762:	4ba2      	ldr	r3, [pc, #648]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006764:	681a      	ldr	r2, [r3, #0]
 8006766:	4ba1      	ldr	r3, [pc, #644]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006768:	49a1      	ldr	r1, [pc, #644]	; (80069f0 <HAL_RCC_OscConfig+0x330>)
 800676a:	400a      	ands	r2, r1
 800676c:	601a      	str	r2, [r3, #0]
 800676e:	4b9f      	ldr	r3, [pc, #636]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006770:	681a      	ldr	r2, [r3, #0]
 8006772:	4b9e      	ldr	r3, [pc, #632]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006774:	499f      	ldr	r1, [pc, #636]	; (80069f4 <HAL_RCC_OscConfig+0x334>)
 8006776:	400a      	ands	r2, r1
 8006778:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	685b      	ldr	r3, [r3, #4]
 800677e:	2b00      	cmp	r3, #0
 8006780:	d014      	beq.n	80067ac <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006782:	f7ff fbff 	bl	8005f84 <HAL_GetTick>
 8006786:	0003      	movs	r3, r0
 8006788:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800678a:	e008      	b.n	800679e <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800678c:	f7ff fbfa 	bl	8005f84 <HAL_GetTick>
 8006790:	0002      	movs	r2, r0
 8006792:	693b      	ldr	r3, [r7, #16]
 8006794:	1ad3      	subs	r3, r2, r3
 8006796:	2b64      	cmp	r3, #100	; 0x64
 8006798:	d901      	bls.n	800679e <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 800679a:	2303      	movs	r3, #3
 800679c:	e298      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800679e:	4b93      	ldr	r3, [pc, #588]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80067a0:	681a      	ldr	r2, [r3, #0]
 80067a2:	2380      	movs	r3, #128	; 0x80
 80067a4:	029b      	lsls	r3, r3, #10
 80067a6:	4013      	ands	r3, r2
 80067a8:	d0f0      	beq.n	800678c <HAL_RCC_OscConfig+0xcc>
 80067aa:	e015      	b.n	80067d8 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80067ac:	f7ff fbea 	bl	8005f84 <HAL_GetTick>
 80067b0:	0003      	movs	r3, r0
 80067b2:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067b4:	e008      	b.n	80067c8 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80067b6:	f7ff fbe5 	bl	8005f84 <HAL_GetTick>
 80067ba:	0002      	movs	r2, r0
 80067bc:	693b      	ldr	r3, [r7, #16]
 80067be:	1ad3      	subs	r3, r2, r3
 80067c0:	2b64      	cmp	r3, #100	; 0x64
 80067c2:	d901      	bls.n	80067c8 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80067c4:	2303      	movs	r3, #3
 80067c6:	e283      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80067c8:	4b88      	ldr	r3, [pc, #544]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80067ca:	681a      	ldr	r2, [r3, #0]
 80067cc:	2380      	movs	r3, #128	; 0x80
 80067ce:	029b      	lsls	r3, r3, #10
 80067d0:	4013      	ands	r3, r2
 80067d2:	d1f0      	bne.n	80067b6 <HAL_RCC_OscConfig+0xf6>
 80067d4:	e000      	b.n	80067d8 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d6:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	2202      	movs	r2, #2
 80067de:	4013      	ands	r3, r2
 80067e0:	d100      	bne.n	80067e4 <HAL_RCC_OscConfig+0x124>
 80067e2:	e099      	b.n	8006918 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80067e4:	4b81      	ldr	r3, [pc, #516]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80067e6:	689b      	ldr	r3, [r3, #8]
 80067e8:	2238      	movs	r2, #56	; 0x38
 80067ea:	4013      	ands	r3, r2
 80067ec:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80067ee:	4b7f      	ldr	r3, [pc, #508]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80067f0:	68db      	ldr	r3, [r3, #12]
 80067f2:	2203      	movs	r2, #3
 80067f4:	4013      	ands	r3, r2
 80067f6:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80067f8:	69bb      	ldr	r3, [r7, #24]
 80067fa:	2b10      	cmp	r3, #16
 80067fc:	d102      	bne.n	8006804 <HAL_RCC_OscConfig+0x144>
 80067fe:	697b      	ldr	r3, [r7, #20]
 8006800:	2b02      	cmp	r3, #2
 8006802:	d002      	beq.n	800680a <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8006804:	69bb      	ldr	r3, [r7, #24]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d135      	bne.n	8006876 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800680a:	4b78      	ldr	r3, [pc, #480]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 800680c:	681a      	ldr	r2, [r3, #0]
 800680e:	2380      	movs	r3, #128	; 0x80
 8006810:	00db      	lsls	r3, r3, #3
 8006812:	4013      	ands	r3, r2
 8006814:	d005      	beq.n	8006822 <HAL_RCC_OscConfig+0x162>
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68db      	ldr	r3, [r3, #12]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e256      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006822:	4b72      	ldr	r3, [pc, #456]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006824:	685b      	ldr	r3, [r3, #4]
 8006826:	4a74      	ldr	r2, [pc, #464]	; (80069f8 <HAL_RCC_OscConfig+0x338>)
 8006828:	4013      	ands	r3, r2
 800682a:	0019      	movs	r1, r3
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	695b      	ldr	r3, [r3, #20]
 8006830:	021a      	lsls	r2, r3, #8
 8006832:	4b6e      	ldr	r3, [pc, #440]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006834:	430a      	orrs	r2, r1
 8006836:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006838:	69bb      	ldr	r3, [r7, #24]
 800683a:	2b00      	cmp	r3, #0
 800683c:	d112      	bne.n	8006864 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800683e:	4b6b      	ldr	r3, [pc, #428]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a6e      	ldr	r2, [pc, #440]	; (80069fc <HAL_RCC_OscConfig+0x33c>)
 8006844:	4013      	ands	r3, r2
 8006846:	0019      	movs	r1, r3
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	691a      	ldr	r2, [r3, #16]
 800684c:	4b67      	ldr	r3, [pc, #412]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 800684e:	430a      	orrs	r2, r1
 8006850:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8006852:	4b66      	ldr	r3, [pc, #408]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	0adb      	lsrs	r3, r3, #11
 8006858:	2207      	movs	r2, #7
 800685a:	4013      	ands	r3, r2
 800685c:	4a68      	ldr	r2, [pc, #416]	; (8006a00 <HAL_RCC_OscConfig+0x340>)
 800685e:	40da      	lsrs	r2, r3
 8006860:	4b68      	ldr	r3, [pc, #416]	; (8006a04 <HAL_RCC_OscConfig+0x344>)
 8006862:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8006864:	4b68      	ldr	r3, [pc, #416]	; (8006a08 <HAL_RCC_OscConfig+0x348>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	0018      	movs	r0, r3
 800686a:	f7ff f9a9 	bl	8005bc0 <HAL_InitTick>
 800686e:	1e03      	subs	r3, r0, #0
 8006870:	d051      	beq.n	8006916 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 8006872:	2301      	movs	r3, #1
 8006874:	e22c      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	2b00      	cmp	r3, #0
 800687c:	d030      	beq.n	80068e0 <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800687e:	4b5b      	ldr	r3, [pc, #364]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a5e      	ldr	r2, [pc, #376]	; (80069fc <HAL_RCC_OscConfig+0x33c>)
 8006884:	4013      	ands	r3, r2
 8006886:	0019      	movs	r1, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	4b57      	ldr	r3, [pc, #348]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 800688e:	430a      	orrs	r2, r1
 8006890:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8006892:	4b56      	ldr	r3, [pc, #344]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006894:	681a      	ldr	r2, [r3, #0]
 8006896:	4b55      	ldr	r3, [pc, #340]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006898:	2180      	movs	r1, #128	; 0x80
 800689a:	0049      	lsls	r1, r1, #1
 800689c:	430a      	orrs	r2, r1
 800689e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068a0:	f7ff fb70 	bl	8005f84 <HAL_GetTick>
 80068a4:	0003      	movs	r3, r0
 80068a6:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068a8:	e008      	b.n	80068bc <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068aa:	f7ff fb6b 	bl	8005f84 <HAL_GetTick>
 80068ae:	0002      	movs	r2, r0
 80068b0:	693b      	ldr	r3, [r7, #16]
 80068b2:	1ad3      	subs	r3, r2, r3
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d901      	bls.n	80068bc <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80068b8:	2303      	movs	r3, #3
 80068ba:	e209      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80068bc:	4b4b      	ldr	r3, [pc, #300]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80068be:	681a      	ldr	r2, [r3, #0]
 80068c0:	2380      	movs	r3, #128	; 0x80
 80068c2:	00db      	lsls	r3, r3, #3
 80068c4:	4013      	ands	r3, r2
 80068c6:	d0f0      	beq.n	80068aa <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068c8:	4b48      	ldr	r3, [pc, #288]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80068ca:	685b      	ldr	r3, [r3, #4]
 80068cc:	4a4a      	ldr	r2, [pc, #296]	; (80069f8 <HAL_RCC_OscConfig+0x338>)
 80068ce:	4013      	ands	r3, r2
 80068d0:	0019      	movs	r1, r3
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	695b      	ldr	r3, [r3, #20]
 80068d6:	021a      	lsls	r2, r3, #8
 80068d8:	4b44      	ldr	r3, [pc, #272]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80068da:	430a      	orrs	r2, r1
 80068dc:	605a      	str	r2, [r3, #4]
 80068de:	e01b      	b.n	8006918 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80068e0:	4b42      	ldr	r3, [pc, #264]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80068e2:	681a      	ldr	r2, [r3, #0]
 80068e4:	4b41      	ldr	r3, [pc, #260]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80068e6:	4949      	ldr	r1, [pc, #292]	; (8006a0c <HAL_RCC_OscConfig+0x34c>)
 80068e8:	400a      	ands	r2, r1
 80068ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80068ec:	f7ff fb4a 	bl	8005f84 <HAL_GetTick>
 80068f0:	0003      	movs	r3, r0
 80068f2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80068f4:	e008      	b.n	8006908 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80068f6:	f7ff fb45 	bl	8005f84 <HAL_GetTick>
 80068fa:	0002      	movs	r2, r0
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	1ad3      	subs	r3, r2, r3
 8006900:	2b02      	cmp	r3, #2
 8006902:	d901      	bls.n	8006908 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8006904:	2303      	movs	r3, #3
 8006906:	e1e3      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006908:	4b38      	ldr	r3, [pc, #224]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	2380      	movs	r3, #128	; 0x80
 800690e:	00db      	lsls	r3, r3, #3
 8006910:	4013      	ands	r3, r2
 8006912:	d1f0      	bne.n	80068f6 <HAL_RCC_OscConfig+0x236>
 8006914:	e000      	b.n	8006918 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006916:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	2208      	movs	r2, #8
 800691e:	4013      	ands	r3, r2
 8006920:	d047      	beq.n	80069b2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006922:	4b32      	ldr	r3, [pc, #200]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006924:	689b      	ldr	r3, [r3, #8]
 8006926:	2238      	movs	r2, #56	; 0x38
 8006928:	4013      	ands	r3, r2
 800692a:	2b18      	cmp	r3, #24
 800692c:	d10a      	bne.n	8006944 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800692e:	4b2f      	ldr	r3, [pc, #188]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006932:	2202      	movs	r2, #2
 8006934:	4013      	ands	r3, r2
 8006936:	d03c      	beq.n	80069b2 <HAL_RCC_OscConfig+0x2f2>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	699b      	ldr	r3, [r3, #24]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d138      	bne.n	80069b2 <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 8006940:	2301      	movs	r3, #1
 8006942:	e1c5      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d019      	beq.n	8006980 <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800694c:	4b27      	ldr	r3, [pc, #156]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 800694e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006950:	4b26      	ldr	r3, [pc, #152]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006952:	2101      	movs	r1, #1
 8006954:	430a      	orrs	r2, r1
 8006956:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006958:	f7ff fb14 	bl	8005f84 <HAL_GetTick>
 800695c:	0003      	movs	r3, r0
 800695e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006960:	e008      	b.n	8006974 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006962:	f7ff fb0f 	bl	8005f84 <HAL_GetTick>
 8006966:	0002      	movs	r2, r0
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	1ad3      	subs	r3, r2, r3
 800696c:	2b02      	cmp	r3, #2
 800696e:	d901      	bls.n	8006974 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 8006970:	2303      	movs	r3, #3
 8006972:	e1ad      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006974:	4b1d      	ldr	r3, [pc, #116]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006976:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006978:	2202      	movs	r2, #2
 800697a:	4013      	ands	r3, r2
 800697c:	d0f1      	beq.n	8006962 <HAL_RCC_OscConfig+0x2a2>
 800697e:	e018      	b.n	80069b2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8006980:	4b1a      	ldr	r3, [pc, #104]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006982:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8006984:	4b19      	ldr	r3, [pc, #100]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 8006986:	2101      	movs	r1, #1
 8006988:	438a      	bics	r2, r1
 800698a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800698c:	f7ff fafa 	bl	8005f84 <HAL_GetTick>
 8006990:	0003      	movs	r3, r0
 8006992:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006994:	e008      	b.n	80069a8 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006996:	f7ff faf5 	bl	8005f84 <HAL_GetTick>
 800699a:	0002      	movs	r2, r0
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	1ad3      	subs	r3, r2, r3
 80069a0:	2b02      	cmp	r3, #2
 80069a2:	d901      	bls.n	80069a8 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80069a4:	2303      	movs	r3, #3
 80069a6:	e193      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80069a8:	4b10      	ldr	r3, [pc, #64]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80069aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80069ac:	2202      	movs	r2, #2
 80069ae:	4013      	ands	r3, r2
 80069b0:	d1f1      	bne.n	8006996 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	681b      	ldr	r3, [r3, #0]
 80069b6:	2204      	movs	r2, #4
 80069b8:	4013      	ands	r3, r2
 80069ba:	d100      	bne.n	80069be <HAL_RCC_OscConfig+0x2fe>
 80069bc:	e0c6      	b.n	8006b4c <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069be:	231f      	movs	r3, #31
 80069c0:	18fb      	adds	r3, r7, r3
 80069c2:	2200      	movs	r2, #0
 80069c4:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2238      	movs	r2, #56	; 0x38
 80069cc:	4013      	ands	r3, r2
 80069ce:	2b20      	cmp	r3, #32
 80069d0:	d11e      	bne.n	8006a10 <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80069d2:	4b06      	ldr	r3, [pc, #24]	; (80069ec <HAL_RCC_OscConfig+0x32c>)
 80069d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80069d6:	2202      	movs	r2, #2
 80069d8:	4013      	ands	r3, r2
 80069da:	d100      	bne.n	80069de <HAL_RCC_OscConfig+0x31e>
 80069dc:	e0b6      	b.n	8006b4c <HAL_RCC_OscConfig+0x48c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	689b      	ldr	r3, [r3, #8]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d000      	beq.n	80069e8 <HAL_RCC_OscConfig+0x328>
 80069e6:	e0b1      	b.n	8006b4c <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80069e8:	2301      	movs	r3, #1
 80069ea:	e171      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
 80069ec:	40021000 	.word	0x40021000
 80069f0:	fffeffff 	.word	0xfffeffff
 80069f4:	fffbffff 	.word	0xfffbffff
 80069f8:	ffff80ff 	.word	0xffff80ff
 80069fc:	ffffc7ff 	.word	0xffffc7ff
 8006a00:	00f42400 	.word	0x00f42400
 8006a04:	2000000c 	.word	0x2000000c
 8006a08:	20000010 	.word	0x20000010
 8006a0c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8006a10:	4bb1      	ldr	r3, [pc, #708]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006a12:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a14:	2380      	movs	r3, #128	; 0x80
 8006a16:	055b      	lsls	r3, r3, #21
 8006a18:	4013      	ands	r3, r2
 8006a1a:	d101      	bne.n	8006a20 <HAL_RCC_OscConfig+0x360>
 8006a1c:	2301      	movs	r3, #1
 8006a1e:	e000      	b.n	8006a22 <HAL_RCC_OscConfig+0x362>
 8006a20:	2300      	movs	r3, #0
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d011      	beq.n	8006a4a <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8006a26:	4bac      	ldr	r3, [pc, #688]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006a28:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a2a:	4bab      	ldr	r3, [pc, #684]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006a2c:	2180      	movs	r1, #128	; 0x80
 8006a2e:	0549      	lsls	r1, r1, #21
 8006a30:	430a      	orrs	r2, r1
 8006a32:	63da      	str	r2, [r3, #60]	; 0x3c
 8006a34:	4ba8      	ldr	r3, [pc, #672]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006a36:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006a38:	2380      	movs	r3, #128	; 0x80
 8006a3a:	055b      	lsls	r3, r3, #21
 8006a3c:	4013      	ands	r3, r2
 8006a3e:	60fb      	str	r3, [r7, #12]
 8006a40:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8006a42:	231f      	movs	r3, #31
 8006a44:	18fb      	adds	r3, r7, r3
 8006a46:	2201      	movs	r2, #1
 8006a48:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a4a:	4ba4      	ldr	r3, [pc, #656]	; (8006cdc <HAL_RCC_OscConfig+0x61c>)
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	2380      	movs	r3, #128	; 0x80
 8006a50:	005b      	lsls	r3, r3, #1
 8006a52:	4013      	ands	r3, r2
 8006a54:	d11a      	bne.n	8006a8c <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a56:	4ba1      	ldr	r3, [pc, #644]	; (8006cdc <HAL_RCC_OscConfig+0x61c>)
 8006a58:	681a      	ldr	r2, [r3, #0]
 8006a5a:	4ba0      	ldr	r3, [pc, #640]	; (8006cdc <HAL_RCC_OscConfig+0x61c>)
 8006a5c:	2180      	movs	r1, #128	; 0x80
 8006a5e:	0049      	lsls	r1, r1, #1
 8006a60:	430a      	orrs	r2, r1
 8006a62:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8006a64:	f7ff fa8e 	bl	8005f84 <HAL_GetTick>
 8006a68:	0003      	movs	r3, r0
 8006a6a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a6c:	e008      	b.n	8006a80 <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a6e:	f7ff fa89 	bl	8005f84 <HAL_GetTick>
 8006a72:	0002      	movs	r2, r0
 8006a74:	693b      	ldr	r3, [r7, #16]
 8006a76:	1ad3      	subs	r3, r2, r3
 8006a78:	2b02      	cmp	r3, #2
 8006a7a:	d901      	bls.n	8006a80 <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8006a7c:	2303      	movs	r3, #3
 8006a7e:	e127      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006a80:	4b96      	ldr	r3, [pc, #600]	; (8006cdc <HAL_RCC_OscConfig+0x61c>)
 8006a82:	681a      	ldr	r2, [r3, #0]
 8006a84:	2380      	movs	r3, #128	; 0x80
 8006a86:	005b      	lsls	r3, r3, #1
 8006a88:	4013      	ands	r3, r2
 8006a8a:	d0f0      	beq.n	8006a6e <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	2b01      	cmp	r3, #1
 8006a92:	d106      	bne.n	8006aa2 <HAL_RCC_OscConfig+0x3e2>
 8006a94:	4b90      	ldr	r3, [pc, #576]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006a96:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006a98:	4b8f      	ldr	r3, [pc, #572]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006a9a:	2101      	movs	r1, #1
 8006a9c:	430a      	orrs	r2, r1
 8006a9e:	65da      	str	r2, [r3, #92]	; 0x5c
 8006aa0:	e01c      	b.n	8006adc <HAL_RCC_OscConfig+0x41c>
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	2b05      	cmp	r3, #5
 8006aa8:	d10c      	bne.n	8006ac4 <HAL_RCC_OscConfig+0x404>
 8006aaa:	4b8b      	ldr	r3, [pc, #556]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006aac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006aae:	4b8a      	ldr	r3, [pc, #552]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006ab0:	2104      	movs	r1, #4
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ab6:	4b88      	ldr	r3, [pc, #544]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006ab8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006aba:	4b87      	ldr	r3, [pc, #540]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006abc:	2101      	movs	r1, #1
 8006abe:	430a      	orrs	r2, r1
 8006ac0:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ac2:	e00b      	b.n	8006adc <HAL_RCC_OscConfig+0x41c>
 8006ac4:	4b84      	ldr	r3, [pc, #528]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006ac6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ac8:	4b83      	ldr	r3, [pc, #524]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006aca:	2101      	movs	r1, #1
 8006acc:	438a      	bics	r2, r1
 8006ace:	65da      	str	r2, [r3, #92]	; 0x5c
 8006ad0:	4b81      	ldr	r3, [pc, #516]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006ad2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006ad4:	4b80      	ldr	r3, [pc, #512]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006ad6:	2104      	movs	r1, #4
 8006ad8:	438a      	bics	r2, r1
 8006ada:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	689b      	ldr	r3, [r3, #8]
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d014      	beq.n	8006b0e <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ae4:	f7ff fa4e 	bl	8005f84 <HAL_GetTick>
 8006ae8:	0003      	movs	r3, r0
 8006aea:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006aec:	e009      	b.n	8006b02 <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006aee:	f7ff fa49 	bl	8005f84 <HAL_GetTick>
 8006af2:	0002      	movs	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	4a79      	ldr	r2, [pc, #484]	; (8006ce0 <HAL_RCC_OscConfig+0x620>)
 8006afa:	4293      	cmp	r3, r2
 8006afc:	d901      	bls.n	8006b02 <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8006afe:	2303      	movs	r3, #3
 8006b00:	e0e6      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006b02:	4b75      	ldr	r3, [pc, #468]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006b04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b06:	2202      	movs	r2, #2
 8006b08:	4013      	ands	r3, r2
 8006b0a:	d0f0      	beq.n	8006aee <HAL_RCC_OscConfig+0x42e>
 8006b0c:	e013      	b.n	8006b36 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b0e:	f7ff fa39 	bl	8005f84 <HAL_GetTick>
 8006b12:	0003      	movs	r3, r0
 8006b14:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b16:	e009      	b.n	8006b2c <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b18:	f7ff fa34 	bl	8005f84 <HAL_GetTick>
 8006b1c:	0002      	movs	r2, r0
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	1ad3      	subs	r3, r2, r3
 8006b22:	4a6f      	ldr	r2, [pc, #444]	; (8006ce0 <HAL_RCC_OscConfig+0x620>)
 8006b24:	4293      	cmp	r3, r2
 8006b26:	d901      	bls.n	8006b2c <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8006b28:	2303      	movs	r3, #3
 8006b2a:	e0d1      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006b2c:	4b6a      	ldr	r3, [pc, #424]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006b30:	2202      	movs	r2, #2
 8006b32:	4013      	ands	r3, r2
 8006b34:	d1f0      	bne.n	8006b18 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8006b36:	231f      	movs	r3, #31
 8006b38:	18fb      	adds	r3, r7, r3
 8006b3a:	781b      	ldrb	r3, [r3, #0]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d105      	bne.n	8006b4c <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8006b40:	4b65      	ldr	r3, [pc, #404]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006b42:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b44:	4b64      	ldr	r3, [pc, #400]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006b46:	4967      	ldr	r1, [pc, #412]	; (8006ce4 <HAL_RCC_OscConfig+0x624>)
 8006b48:	400a      	ands	r2, r1
 8006b4a:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	69db      	ldr	r3, [r3, #28]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d100      	bne.n	8006b56 <HAL_RCC_OscConfig+0x496>
 8006b54:	e0bb      	b.n	8006cce <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006b56:	4b60      	ldr	r3, [pc, #384]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006b58:	689b      	ldr	r3, [r3, #8]
 8006b5a:	2238      	movs	r2, #56	; 0x38
 8006b5c:	4013      	ands	r3, r2
 8006b5e:	2b10      	cmp	r3, #16
 8006b60:	d100      	bne.n	8006b64 <HAL_RCC_OscConfig+0x4a4>
 8006b62:	e07b      	b.n	8006c5c <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	69db      	ldr	r3, [r3, #28]
 8006b68:	2b02      	cmp	r3, #2
 8006b6a:	d156      	bne.n	8006c1a <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b6c:	4b5a      	ldr	r3, [pc, #360]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006b6e:	681a      	ldr	r2, [r3, #0]
 8006b70:	4b59      	ldr	r3, [pc, #356]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006b72:	495d      	ldr	r1, [pc, #372]	; (8006ce8 <HAL_RCC_OscConfig+0x628>)
 8006b74:	400a      	ands	r2, r1
 8006b76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b78:	f7ff fa04 	bl	8005f84 <HAL_GetTick>
 8006b7c:	0003      	movs	r3, r0
 8006b7e:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b80:	e008      	b.n	8006b94 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b82:	f7ff f9ff 	bl	8005f84 <HAL_GetTick>
 8006b86:	0002      	movs	r2, r0
 8006b88:	693b      	ldr	r3, [r7, #16]
 8006b8a:	1ad3      	subs	r3, r2, r3
 8006b8c:	2b02      	cmp	r3, #2
 8006b8e:	d901      	bls.n	8006b94 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8006b90:	2303      	movs	r3, #3
 8006b92:	e09d      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006b94:	4b50      	ldr	r3, [pc, #320]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	2380      	movs	r3, #128	; 0x80
 8006b9a:	049b      	lsls	r3, r3, #18
 8006b9c:	4013      	ands	r3, r2
 8006b9e:	d1f0      	bne.n	8006b82 <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006ba0:	4b4d      	ldr	r3, [pc, #308]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006ba2:	68db      	ldr	r3, [r3, #12]
 8006ba4:	4a51      	ldr	r2, [pc, #324]	; (8006cec <HAL_RCC_OscConfig+0x62c>)
 8006ba6:	4013      	ands	r3, r2
 8006ba8:	0019      	movs	r1, r3
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a1a      	ldr	r2, [r3, #32]
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bb2:	431a      	orrs	r2, r3
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bb8:	021b      	lsls	r3, r3, #8
 8006bba:	431a      	orrs	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bc0:	431a      	orrs	r2, r3
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006bcc:	431a      	orrs	r2, r3
 8006bce:	4b42      	ldr	r3, [pc, #264]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006bd0:	430a      	orrs	r2, r1
 8006bd2:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006bd4:	4b40      	ldr	r3, [pc, #256]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006bd6:	681a      	ldr	r2, [r3, #0]
 8006bd8:	4b3f      	ldr	r3, [pc, #252]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006bda:	2180      	movs	r1, #128	; 0x80
 8006bdc:	0449      	lsls	r1, r1, #17
 8006bde:	430a      	orrs	r2, r1
 8006be0:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8006be2:	4b3d      	ldr	r3, [pc, #244]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006be4:	68da      	ldr	r2, [r3, #12]
 8006be6:	4b3c      	ldr	r3, [pc, #240]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006be8:	2180      	movs	r1, #128	; 0x80
 8006bea:	0549      	lsls	r1, r1, #21
 8006bec:	430a      	orrs	r2, r1
 8006bee:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bf0:	f7ff f9c8 	bl	8005f84 <HAL_GetTick>
 8006bf4:	0003      	movs	r3, r0
 8006bf6:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006bf8:	e008      	b.n	8006c0c <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bfa:	f7ff f9c3 	bl	8005f84 <HAL_GetTick>
 8006bfe:	0002      	movs	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d901      	bls.n	8006c0c <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8006c08:	2303      	movs	r3, #3
 8006c0a:	e061      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006c0c:	4b32      	ldr	r3, [pc, #200]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006c0e:	681a      	ldr	r2, [r3, #0]
 8006c10:	2380      	movs	r3, #128	; 0x80
 8006c12:	049b      	lsls	r3, r3, #18
 8006c14:	4013      	ands	r3, r2
 8006c16:	d0f0      	beq.n	8006bfa <HAL_RCC_OscConfig+0x53a>
 8006c18:	e059      	b.n	8006cce <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c1a:	4b2f      	ldr	r3, [pc, #188]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	4b2e      	ldr	r3, [pc, #184]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006c20:	4931      	ldr	r1, [pc, #196]	; (8006ce8 <HAL_RCC_OscConfig+0x628>)
 8006c22:	400a      	ands	r2, r1
 8006c24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006c26:	f7ff f9ad 	bl	8005f84 <HAL_GetTick>
 8006c2a:	0003      	movs	r3, r0
 8006c2c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c2e:	e008      	b.n	8006c42 <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c30:	f7ff f9a8 	bl	8005f84 <HAL_GetTick>
 8006c34:	0002      	movs	r2, r0
 8006c36:	693b      	ldr	r3, [r7, #16]
 8006c38:	1ad3      	subs	r3, r2, r3
 8006c3a:	2b02      	cmp	r3, #2
 8006c3c:	d901      	bls.n	8006c42 <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8006c3e:	2303      	movs	r3, #3
 8006c40:	e046      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006c42:	4b25      	ldr	r3, [pc, #148]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006c44:	681a      	ldr	r2, [r3, #0]
 8006c46:	2380      	movs	r3, #128	; 0x80
 8006c48:	049b      	lsls	r3, r3, #18
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	d1f0      	bne.n	8006c30 <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8006c4e:	4b22      	ldr	r3, [pc, #136]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006c50:	68da      	ldr	r2, [r3, #12]
 8006c52:	4b21      	ldr	r3, [pc, #132]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006c54:	4926      	ldr	r1, [pc, #152]	; (8006cf0 <HAL_RCC_OscConfig+0x630>)
 8006c56:	400a      	ands	r2, r1
 8006c58:	60da      	str	r2, [r3, #12]
 8006c5a:	e038      	b.n	8006cce <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	69db      	ldr	r3, [r3, #28]
 8006c60:	2b01      	cmp	r3, #1
 8006c62:	d101      	bne.n	8006c68 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8006c64:	2301      	movs	r3, #1
 8006c66:	e033      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8006c68:	4b1b      	ldr	r3, [pc, #108]	; (8006cd8 <HAL_RCC_OscConfig+0x618>)
 8006c6a:	68db      	ldr	r3, [r3, #12]
 8006c6c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c6e:	697b      	ldr	r3, [r7, #20]
 8006c70:	2203      	movs	r2, #3
 8006c72:	401a      	ands	r2, r3
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	6a1b      	ldr	r3, [r3, #32]
 8006c78:	429a      	cmp	r2, r3
 8006c7a:	d126      	bne.n	8006cca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c7c:	697b      	ldr	r3, [r7, #20]
 8006c7e:	2270      	movs	r2, #112	; 0x70
 8006c80:	401a      	ands	r2, r3
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c86:	429a      	cmp	r2, r3
 8006c88:	d11f      	bne.n	8006cca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006c8a:	697a      	ldr	r2, [r7, #20]
 8006c8c:	23fe      	movs	r3, #254	; 0xfe
 8006c8e:	01db      	lsls	r3, r3, #7
 8006c90:	401a      	ands	r2, r3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c96:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8006c98:	429a      	cmp	r2, r3
 8006c9a:	d116      	bne.n	8006cca <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006c9c:	697a      	ldr	r2, [r7, #20]
 8006c9e:	23f8      	movs	r3, #248	; 0xf8
 8006ca0:	039b      	lsls	r3, r3, #14
 8006ca2:	401a      	ands	r2, r3
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ca8:	429a      	cmp	r2, r3
 8006caa:	d10e      	bne.n	8006cca <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cac:	697a      	ldr	r2, [r7, #20]
 8006cae:	23e0      	movs	r3, #224	; 0xe0
 8006cb0:	051b      	lsls	r3, r3, #20
 8006cb2:	401a      	ands	r2, r3
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8006cb8:	429a      	cmp	r2, r3
 8006cba:	d106      	bne.n	8006cca <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8006cbc:	697b      	ldr	r3, [r7, #20]
 8006cbe:	0f5b      	lsrs	r3, r3, #29
 8006cc0:	075a      	lsls	r2, r3, #29
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d001      	beq.n	8006cce <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e000      	b.n	8006cd0 <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	b008      	add	sp, #32
 8006cd6:	bd80      	pop	{r7, pc}
 8006cd8:	40021000 	.word	0x40021000
 8006cdc:	40007000 	.word	0x40007000
 8006ce0:	00001388 	.word	0x00001388
 8006ce4:	efffffff 	.word	0xefffffff
 8006ce8:	feffffff 	.word	0xfeffffff
 8006cec:	11c1808c 	.word	0x11c1808c
 8006cf0:	eefefffc 	.word	0xeefefffc

08006cf4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cf4:	b580      	push	{r7, lr}
 8006cf6:	b084      	sub	sp, #16
 8006cf8:	af00      	add	r7, sp, #0
 8006cfa:	6078      	str	r0, [r7, #4]
 8006cfc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e0e9      	b.n	8006edc <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d08:	4b76      	ldr	r3, [pc, #472]	; (8006ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2207      	movs	r2, #7
 8006d0e:	4013      	ands	r3, r2
 8006d10:	683a      	ldr	r2, [r7, #0]
 8006d12:	429a      	cmp	r2, r3
 8006d14:	d91e      	bls.n	8006d54 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d16:	4b73      	ldr	r3, [pc, #460]	; (8006ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2207      	movs	r2, #7
 8006d1c:	4393      	bics	r3, r2
 8006d1e:	0019      	movs	r1, r3
 8006d20:	4b70      	ldr	r3, [pc, #448]	; (8006ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d22:	683a      	ldr	r2, [r7, #0]
 8006d24:	430a      	orrs	r2, r1
 8006d26:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006d28:	f7ff f92c 	bl	8005f84 <HAL_GetTick>
 8006d2c:	0003      	movs	r3, r0
 8006d2e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d30:	e009      	b.n	8006d46 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d32:	f7ff f927 	bl	8005f84 <HAL_GetTick>
 8006d36:	0002      	movs	r2, r0
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	1ad3      	subs	r3, r2, r3
 8006d3c:	4a6a      	ldr	r2, [pc, #424]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f4>)
 8006d3e:	4293      	cmp	r3, r2
 8006d40:	d901      	bls.n	8006d46 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8006d42:	2303      	movs	r3, #3
 8006d44:	e0ca      	b.n	8006edc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006d46:	4b67      	ldr	r3, [pc, #412]	; (8006ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	2207      	movs	r2, #7
 8006d4c:	4013      	ands	r3, r2
 8006d4e:	683a      	ldr	r2, [r7, #0]
 8006d50:	429a      	cmp	r2, r3
 8006d52:	d1ee      	bne.n	8006d32 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	2202      	movs	r2, #2
 8006d5a:	4013      	ands	r3, r2
 8006d5c:	d015      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	2204      	movs	r2, #4
 8006d64:	4013      	ands	r3, r2
 8006d66:	d006      	beq.n	8006d76 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8006d68:	4b60      	ldr	r3, [pc, #384]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006d6a:	689a      	ldr	r2, [r3, #8]
 8006d6c:	4b5f      	ldr	r3, [pc, #380]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006d6e:	21e0      	movs	r1, #224	; 0xe0
 8006d70:	01c9      	lsls	r1, r1, #7
 8006d72:	430a      	orrs	r2, r1
 8006d74:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d76:	4b5d      	ldr	r3, [pc, #372]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006d78:	689b      	ldr	r3, [r3, #8]
 8006d7a:	4a5d      	ldr	r2, [pc, #372]	; (8006ef0 <HAL_RCC_ClockConfig+0x1fc>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	0019      	movs	r1, r3
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689a      	ldr	r2, [r3, #8]
 8006d84:	4b59      	ldr	r3, [pc, #356]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006d86:	430a      	orrs	r2, r1
 8006d88:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	2201      	movs	r2, #1
 8006d90:	4013      	ands	r3, r2
 8006d92:	d057      	beq.n	8006e44 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	685b      	ldr	r3, [r3, #4]
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d107      	bne.n	8006dac <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006d9c:	4b53      	ldr	r3, [pc, #332]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006d9e:	681a      	ldr	r2, [r3, #0]
 8006da0:	2380      	movs	r3, #128	; 0x80
 8006da2:	029b      	lsls	r3, r3, #10
 8006da4:	4013      	ands	r3, r2
 8006da6:	d12b      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006da8:	2301      	movs	r3, #1
 8006daa:	e097      	b.n	8006edc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	2b02      	cmp	r3, #2
 8006db2:	d107      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006db4:	4b4d      	ldr	r3, [pc, #308]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006db6:	681a      	ldr	r2, [r3, #0]
 8006db8:	2380      	movs	r3, #128	; 0x80
 8006dba:	049b      	lsls	r3, r3, #18
 8006dbc:	4013      	ands	r3, r2
 8006dbe:	d11f      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e08b      	b.n	8006edc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	685b      	ldr	r3, [r3, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d107      	bne.n	8006ddc <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006dcc:	4b47      	ldr	r3, [pc, #284]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006dce:	681a      	ldr	r2, [r3, #0]
 8006dd0:	2380      	movs	r3, #128	; 0x80
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	4013      	ands	r3, r2
 8006dd6:	d113      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dd8:	2301      	movs	r3, #1
 8006dda:	e07f      	b.n	8006edc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	685b      	ldr	r3, [r3, #4]
 8006de0:	2b03      	cmp	r3, #3
 8006de2:	d106      	bne.n	8006df2 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006de4:	4b41      	ldr	r3, [pc, #260]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006de6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006de8:	2202      	movs	r2, #2
 8006dea:	4013      	ands	r3, r2
 8006dec:	d108      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dee:	2301      	movs	r3, #1
 8006df0:	e074      	b.n	8006edc <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006df2:	4b3e      	ldr	r3, [pc, #248]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006df6:	2202      	movs	r2, #2
 8006df8:	4013      	ands	r3, r2
 8006dfa:	d101      	bne.n	8006e00 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8006dfc:	2301      	movs	r3, #1
 8006dfe:	e06d      	b.n	8006edc <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006e00:	4b3a      	ldr	r3, [pc, #232]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006e02:	689b      	ldr	r3, [r3, #8]
 8006e04:	2207      	movs	r2, #7
 8006e06:	4393      	bics	r3, r2
 8006e08:	0019      	movs	r1, r3
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	685a      	ldr	r2, [r3, #4]
 8006e0e:	4b37      	ldr	r3, [pc, #220]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006e10:	430a      	orrs	r2, r1
 8006e12:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006e14:	f7ff f8b6 	bl	8005f84 <HAL_GetTick>
 8006e18:	0003      	movs	r3, r0
 8006e1a:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e1c:	e009      	b.n	8006e32 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e1e:	f7ff f8b1 	bl	8005f84 <HAL_GetTick>
 8006e22:	0002      	movs	r2, r0
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	1ad3      	subs	r3, r2, r3
 8006e28:	4a2f      	ldr	r2, [pc, #188]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f4>)
 8006e2a:	4293      	cmp	r3, r2
 8006e2c:	d901      	bls.n	8006e32 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8006e2e:	2303      	movs	r3, #3
 8006e30:	e054      	b.n	8006edc <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e32:	4b2e      	ldr	r3, [pc, #184]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	2238      	movs	r2, #56	; 0x38
 8006e38:	401a      	ands	r2, r3
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	685b      	ldr	r3, [r3, #4]
 8006e3e:	00db      	lsls	r3, r3, #3
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d1ec      	bne.n	8006e1e <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e44:	4b27      	ldr	r3, [pc, #156]	; (8006ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	2207      	movs	r2, #7
 8006e4a:	4013      	ands	r3, r2
 8006e4c:	683a      	ldr	r2, [r7, #0]
 8006e4e:	429a      	cmp	r2, r3
 8006e50:	d21e      	bcs.n	8006e90 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e52:	4b24      	ldr	r3, [pc, #144]	; (8006ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2207      	movs	r2, #7
 8006e58:	4393      	bics	r3, r2
 8006e5a:	0019      	movs	r1, r3
 8006e5c:	4b21      	ldr	r3, [pc, #132]	; (8006ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e5e:	683a      	ldr	r2, [r7, #0]
 8006e60:	430a      	orrs	r2, r1
 8006e62:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8006e64:	f7ff f88e 	bl	8005f84 <HAL_GetTick>
 8006e68:	0003      	movs	r3, r0
 8006e6a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e6c:	e009      	b.n	8006e82 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006e6e:	f7ff f889 	bl	8005f84 <HAL_GetTick>
 8006e72:	0002      	movs	r2, r0
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	1ad3      	subs	r3, r2, r3
 8006e78:	4a1b      	ldr	r2, [pc, #108]	; (8006ee8 <HAL_RCC_ClockConfig+0x1f4>)
 8006e7a:	4293      	cmp	r3, r2
 8006e7c:	d901      	bls.n	8006e82 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8006e7e:	2303      	movs	r3, #3
 8006e80:	e02c      	b.n	8006edc <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8006e82:	4b18      	ldr	r3, [pc, #96]	; (8006ee4 <HAL_RCC_ClockConfig+0x1f0>)
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2207      	movs	r2, #7
 8006e88:	4013      	ands	r3, r2
 8006e8a:	683a      	ldr	r2, [r7, #0]
 8006e8c:	429a      	cmp	r2, r3
 8006e8e:	d1ee      	bne.n	8006e6e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	2204      	movs	r2, #4
 8006e96:	4013      	ands	r3, r2
 8006e98:	d009      	beq.n	8006eae <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8006e9a:	4b14      	ldr	r3, [pc, #80]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006e9c:	689b      	ldr	r3, [r3, #8]
 8006e9e:	4a15      	ldr	r2, [pc, #84]	; (8006ef4 <HAL_RCC_ClockConfig+0x200>)
 8006ea0:	4013      	ands	r3, r2
 8006ea2:	0019      	movs	r1, r3
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	68da      	ldr	r2, [r3, #12]
 8006ea8:	4b10      	ldr	r3, [pc, #64]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006eaa:	430a      	orrs	r2, r1
 8006eac:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8006eae:	f000 f829 	bl	8006f04 <HAL_RCC_GetSysClockFreq>
 8006eb2:	0001      	movs	r1, r0
 8006eb4:	4b0d      	ldr	r3, [pc, #52]	; (8006eec <HAL_RCC_ClockConfig+0x1f8>)
 8006eb6:	689b      	ldr	r3, [r3, #8]
 8006eb8:	0a1b      	lsrs	r3, r3, #8
 8006eba:	220f      	movs	r2, #15
 8006ebc:	401a      	ands	r2, r3
 8006ebe:	4b0e      	ldr	r3, [pc, #56]	; (8006ef8 <HAL_RCC_ClockConfig+0x204>)
 8006ec0:	0092      	lsls	r2, r2, #2
 8006ec2:	58d3      	ldr	r3, [r2, r3]
 8006ec4:	221f      	movs	r2, #31
 8006ec6:	4013      	ands	r3, r2
 8006ec8:	000a      	movs	r2, r1
 8006eca:	40da      	lsrs	r2, r3
 8006ecc:	4b0b      	ldr	r3, [pc, #44]	; (8006efc <HAL_RCC_ClockConfig+0x208>)
 8006ece:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8006ed0:	4b0b      	ldr	r3, [pc, #44]	; (8006f00 <HAL_RCC_ClockConfig+0x20c>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	0018      	movs	r0, r3
 8006ed6:	f7fe fe73 	bl	8005bc0 <HAL_InitTick>
 8006eda:	0003      	movs	r3, r0
}
 8006edc:	0018      	movs	r0, r3
 8006ede:	46bd      	mov	sp, r7
 8006ee0:	b004      	add	sp, #16
 8006ee2:	bd80      	pop	{r7, pc}
 8006ee4:	40022000 	.word	0x40022000
 8006ee8:	00001388 	.word	0x00001388
 8006eec:	40021000 	.word	0x40021000
 8006ef0:	fffff0ff 	.word	0xfffff0ff
 8006ef4:	ffff8fff 	.word	0xffff8fff
 8006ef8:	08011354 	.word	0x08011354
 8006efc:	2000000c 	.word	0x2000000c
 8006f00:	20000010 	.word	0x20000010

08006f04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f04:	b580      	push	{r7, lr}
 8006f06:	b086      	sub	sp, #24
 8006f08:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8006f0a:	4b3c      	ldr	r3, [pc, #240]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f0c:	689b      	ldr	r3, [r3, #8]
 8006f0e:	2238      	movs	r2, #56	; 0x38
 8006f10:	4013      	ands	r3, r2
 8006f12:	d10f      	bne.n	8006f34 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8006f14:	4b39      	ldr	r3, [pc, #228]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	0adb      	lsrs	r3, r3, #11
 8006f1a:	2207      	movs	r2, #7
 8006f1c:	4013      	ands	r3, r2
 8006f1e:	2201      	movs	r2, #1
 8006f20:	409a      	lsls	r2, r3
 8006f22:	0013      	movs	r3, r2
 8006f24:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8006f26:	6839      	ldr	r1, [r7, #0]
 8006f28:	4835      	ldr	r0, [pc, #212]	; (8007000 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f2a:	f7f9 f913 	bl	8000154 <__udivsi3>
 8006f2e:	0003      	movs	r3, r0
 8006f30:	613b      	str	r3, [r7, #16]
 8006f32:	e05d      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8006f34:	4b31      	ldr	r3, [pc, #196]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f36:	689b      	ldr	r3, [r3, #8]
 8006f38:	2238      	movs	r2, #56	; 0x38
 8006f3a:	4013      	ands	r3, r2
 8006f3c:	2b08      	cmp	r3, #8
 8006f3e:	d102      	bne.n	8006f46 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8006f40:	4b30      	ldr	r3, [pc, #192]	; (8007004 <HAL_RCC_GetSysClockFreq+0x100>)
 8006f42:	613b      	str	r3, [r7, #16]
 8006f44:	e054      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8006f46:	4b2d      	ldr	r3, [pc, #180]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f48:	689b      	ldr	r3, [r3, #8]
 8006f4a:	2238      	movs	r2, #56	; 0x38
 8006f4c:	4013      	ands	r3, r2
 8006f4e:	2b10      	cmp	r3, #16
 8006f50:	d138      	bne.n	8006fc4 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8006f52:	4b2a      	ldr	r3, [pc, #168]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f54:	68db      	ldr	r3, [r3, #12]
 8006f56:	2203      	movs	r2, #3
 8006f58:	4013      	ands	r3, r2
 8006f5a:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006f5c:	4b27      	ldr	r3, [pc, #156]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f5e:	68db      	ldr	r3, [r3, #12]
 8006f60:	091b      	lsrs	r3, r3, #4
 8006f62:	2207      	movs	r2, #7
 8006f64:	4013      	ands	r3, r2
 8006f66:	3301      	adds	r3, #1
 8006f68:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	2b03      	cmp	r3, #3
 8006f6e:	d10d      	bne.n	8006f8c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006f70:	68b9      	ldr	r1, [r7, #8]
 8006f72:	4824      	ldr	r0, [pc, #144]	; (8007004 <HAL_RCC_GetSysClockFreq+0x100>)
 8006f74:	f7f9 f8ee 	bl	8000154 <__udivsi3>
 8006f78:	0003      	movs	r3, r0
 8006f7a:	0019      	movs	r1, r3
 8006f7c:	4b1f      	ldr	r3, [pc, #124]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f7e:	68db      	ldr	r3, [r3, #12]
 8006f80:	0a1b      	lsrs	r3, r3, #8
 8006f82:	227f      	movs	r2, #127	; 0x7f
 8006f84:	4013      	ands	r3, r2
 8006f86:	434b      	muls	r3, r1
 8006f88:	617b      	str	r3, [r7, #20]
        break;
 8006f8a:	e00d      	b.n	8006fa8 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8006f8c:	68b9      	ldr	r1, [r7, #8]
 8006f8e:	481c      	ldr	r0, [pc, #112]	; (8007000 <HAL_RCC_GetSysClockFreq+0xfc>)
 8006f90:	f7f9 f8e0 	bl	8000154 <__udivsi3>
 8006f94:	0003      	movs	r3, r0
 8006f96:	0019      	movs	r1, r3
 8006f98:	4b18      	ldr	r3, [pc, #96]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	0a1b      	lsrs	r3, r3, #8
 8006f9e:	227f      	movs	r2, #127	; 0x7f
 8006fa0:	4013      	ands	r3, r2
 8006fa2:	434b      	muls	r3, r1
 8006fa4:	617b      	str	r3, [r7, #20]
        break;
 8006fa6:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006faa:	68db      	ldr	r3, [r3, #12]
 8006fac:	0f5b      	lsrs	r3, r3, #29
 8006fae:	2207      	movs	r2, #7
 8006fb0:	4013      	ands	r3, r2
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8006fb6:	6879      	ldr	r1, [r7, #4]
 8006fb8:	6978      	ldr	r0, [r7, #20]
 8006fba:	f7f9 f8cb 	bl	8000154 <__udivsi3>
 8006fbe:	0003      	movs	r3, r0
 8006fc0:	613b      	str	r3, [r7, #16]
 8006fc2:	e015      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8006fc4:	4b0d      	ldr	r3, [pc, #52]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fc6:	689b      	ldr	r3, [r3, #8]
 8006fc8:	2238      	movs	r2, #56	; 0x38
 8006fca:	4013      	ands	r3, r2
 8006fcc:	2b20      	cmp	r3, #32
 8006fce:	d103      	bne.n	8006fd8 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8006fd0:	2380      	movs	r3, #128	; 0x80
 8006fd2:	021b      	lsls	r3, r3, #8
 8006fd4:	613b      	str	r3, [r7, #16]
 8006fd6:	e00b      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8006fd8:	4b08      	ldr	r3, [pc, #32]	; (8006ffc <HAL_RCC_GetSysClockFreq+0xf8>)
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	2238      	movs	r2, #56	; 0x38
 8006fde:	4013      	ands	r3, r2
 8006fe0:	2b18      	cmp	r3, #24
 8006fe2:	d103      	bne.n	8006fec <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8006fe4:	23fa      	movs	r3, #250	; 0xfa
 8006fe6:	01db      	lsls	r3, r3, #7
 8006fe8:	613b      	str	r3, [r7, #16]
 8006fea:	e001      	b.n	8006ff0 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8006fec:	2300      	movs	r3, #0
 8006fee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006ff0:	693b      	ldr	r3, [r7, #16]
}
 8006ff2:	0018      	movs	r0, r3
 8006ff4:	46bd      	mov	sp, r7
 8006ff6:	b006      	add	sp, #24
 8006ff8:	bd80      	pop	{r7, pc}
 8006ffa:	46c0      	nop			; (mov r8, r8)
 8006ffc:	40021000 	.word	0x40021000
 8007000:	00f42400 	.word	0x00f42400
 8007004:	007a1200 	.word	0x007a1200

08007008 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007008:	b580      	push	{r7, lr}
 800700a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800700c:	4b02      	ldr	r3, [pc, #8]	; (8007018 <HAL_RCC_GetHCLKFreq+0x10>)
 800700e:	681b      	ldr	r3, [r3, #0]
}
 8007010:	0018      	movs	r0, r3
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	46c0      	nop			; (mov r8, r8)
 8007018:	2000000c 	.word	0x2000000c

0800701c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800701c:	b5b0      	push	{r4, r5, r7, lr}
 800701e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8007020:	f7ff fff2 	bl	8007008 <HAL_RCC_GetHCLKFreq>
 8007024:	0004      	movs	r4, r0
 8007026:	f7ff fb3f 	bl	80066a8 <LL_RCC_GetAPB1Prescaler>
 800702a:	0003      	movs	r3, r0
 800702c:	0b1a      	lsrs	r2, r3, #12
 800702e:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007030:	0092      	lsls	r2, r2, #2
 8007032:	58d3      	ldr	r3, [r2, r3]
 8007034:	221f      	movs	r2, #31
 8007036:	4013      	ands	r3, r2
 8007038:	40dc      	lsrs	r4, r3
 800703a:	0023      	movs	r3, r4
}
 800703c:	0018      	movs	r0, r3
 800703e:	46bd      	mov	sp, r7
 8007040:	bdb0      	pop	{r4, r5, r7, pc}
 8007042:	46c0      	nop			; (mov r8, r8)
 8007044:	08011394 	.word	0x08011394

08007048 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8007048:	b580      	push	{r7, lr}
 800704a:	b082      	sub	sp, #8
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2207      	movs	r2, #7
 8007056:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8007058:	4b0e      	ldr	r3, [pc, #56]	; (8007094 <HAL_RCC_GetClockConfig+0x4c>)
 800705a:	689b      	ldr	r3, [r3, #8]
 800705c:	2207      	movs	r2, #7
 800705e:	401a      	ands	r2, r3
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8007064:	4b0b      	ldr	r3, [pc, #44]	; (8007094 <HAL_RCC_GetClockConfig+0x4c>)
 8007066:	689a      	ldr	r2, [r3, #8]
 8007068:	23f0      	movs	r3, #240	; 0xf0
 800706a:	011b      	lsls	r3, r3, #4
 800706c:	401a      	ands	r2, r3
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 8007072:	4b08      	ldr	r3, [pc, #32]	; (8007094 <HAL_RCC_GetClockConfig+0x4c>)
 8007074:	689a      	ldr	r2, [r3, #8]
 8007076:	23e0      	movs	r3, #224	; 0xe0
 8007078:	01db      	lsls	r3, r3, #7
 800707a:	401a      	ands	r2, r3
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8007080:	4b05      	ldr	r3, [pc, #20]	; (8007098 <HAL_RCC_GetClockConfig+0x50>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2207      	movs	r2, #7
 8007086:	401a      	ands	r2, r3
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	601a      	str	r2, [r3, #0]
}
 800708c:	46c0      	nop			; (mov r8, r8)
 800708e:	46bd      	mov	sp, r7
 8007090:	b002      	add	sp, #8
 8007092:	bd80      	pop	{r7, pc}
 8007094:	40021000 	.word	0x40021000
 8007098:	40022000 	.word	0x40022000

0800709c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b086      	sub	sp, #24
 80070a0:	af00      	add	r7, sp, #0
 80070a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80070a4:	2313      	movs	r3, #19
 80070a6:	18fb      	adds	r3, r7, r3
 80070a8:	2200      	movs	r2, #0
 80070aa:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80070ac:	2312      	movs	r3, #18
 80070ae:	18fb      	adds	r3, r7, r3
 80070b0:	2200      	movs	r2, #0
 80070b2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	2380      	movs	r3, #128	; 0x80
 80070ba:	029b      	lsls	r3, r3, #10
 80070bc:	4013      	ands	r3, r2
 80070be:	d100      	bne.n	80070c2 <HAL_RCCEx_PeriphCLKConfig+0x26>
 80070c0:	e0a3      	b.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80070c2:	2011      	movs	r0, #17
 80070c4:	183b      	adds	r3, r7, r0
 80070c6:	2200      	movs	r2, #0
 80070c8:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80070ca:	4bc3      	ldr	r3, [pc, #780]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070ce:	2380      	movs	r3, #128	; 0x80
 80070d0:	055b      	lsls	r3, r3, #21
 80070d2:	4013      	ands	r3, r2
 80070d4:	d110      	bne.n	80070f8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80070d6:	4bc0      	ldr	r3, [pc, #768]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070da:	4bbf      	ldr	r3, [pc, #764]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070dc:	2180      	movs	r1, #128	; 0x80
 80070de:	0549      	lsls	r1, r1, #21
 80070e0:	430a      	orrs	r2, r1
 80070e2:	63da      	str	r2, [r3, #60]	; 0x3c
 80070e4:	4bbc      	ldr	r3, [pc, #752]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80070e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80070e8:	2380      	movs	r3, #128	; 0x80
 80070ea:	055b      	lsls	r3, r3, #21
 80070ec:	4013      	ands	r3, r2
 80070ee:	60bb      	str	r3, [r7, #8]
 80070f0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80070f2:	183b      	adds	r3, r7, r0
 80070f4:	2201      	movs	r2, #1
 80070f6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80070f8:	4bb8      	ldr	r3, [pc, #736]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80070fa:	681a      	ldr	r2, [r3, #0]
 80070fc:	4bb7      	ldr	r3, [pc, #732]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80070fe:	2180      	movs	r1, #128	; 0x80
 8007100:	0049      	lsls	r1, r1, #1
 8007102:	430a      	orrs	r2, r1
 8007104:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007106:	f7fe ff3d 	bl	8005f84 <HAL_GetTick>
 800710a:	0003      	movs	r3, r0
 800710c:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800710e:	e00b      	b.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007110:	f7fe ff38 	bl	8005f84 <HAL_GetTick>
 8007114:	0002      	movs	r2, r0
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	2b02      	cmp	r3, #2
 800711c:	d904      	bls.n	8007128 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800711e:	2313      	movs	r3, #19
 8007120:	18fb      	adds	r3, r7, r3
 8007122:	2203      	movs	r2, #3
 8007124:	701a      	strb	r2, [r3, #0]
        break;
 8007126:	e005      	b.n	8007134 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8007128:	4bac      	ldr	r3, [pc, #688]	; (80073dc <HAL_RCCEx_PeriphCLKConfig+0x340>)
 800712a:	681a      	ldr	r2, [r3, #0]
 800712c:	2380      	movs	r3, #128	; 0x80
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	4013      	ands	r3, r2
 8007132:	d0ed      	beq.n	8007110 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8007134:	2313      	movs	r3, #19
 8007136:	18fb      	adds	r3, r7, r3
 8007138:	781b      	ldrb	r3, [r3, #0]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d154      	bne.n	80071e8 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800713e:	4ba6      	ldr	r3, [pc, #664]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007140:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007142:	23c0      	movs	r3, #192	; 0xc0
 8007144:	009b      	lsls	r3, r3, #2
 8007146:	4013      	ands	r3, r2
 8007148:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800714a:	697b      	ldr	r3, [r7, #20]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d019      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007154:	697a      	ldr	r2, [r7, #20]
 8007156:	429a      	cmp	r2, r3
 8007158:	d014      	beq.n	8007184 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800715a:	4b9f      	ldr	r3, [pc, #636]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800715c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800715e:	4aa0      	ldr	r2, [pc, #640]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 8007160:	4013      	ands	r3, r2
 8007162:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007164:	4b9c      	ldr	r3, [pc, #624]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007166:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007168:	4b9b      	ldr	r3, [pc, #620]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800716a:	2180      	movs	r1, #128	; 0x80
 800716c:	0249      	lsls	r1, r1, #9
 800716e:	430a      	orrs	r2, r1
 8007170:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007172:	4b99      	ldr	r3, [pc, #612]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007174:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007176:	4b98      	ldr	r3, [pc, #608]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007178:	499a      	ldr	r1, [pc, #616]	; (80073e4 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 800717a:	400a      	ands	r2, r1
 800717c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800717e:	4b96      	ldr	r3, [pc, #600]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007180:	697a      	ldr	r2, [r7, #20]
 8007182:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	2201      	movs	r2, #1
 8007188:	4013      	ands	r3, r2
 800718a:	d016      	beq.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800718c:	f7fe fefa 	bl	8005f84 <HAL_GetTick>
 8007190:	0003      	movs	r3, r0
 8007192:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007194:	e00c      	b.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007196:	f7fe fef5 	bl	8005f84 <HAL_GetTick>
 800719a:	0002      	movs	r2, r0
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	1ad3      	subs	r3, r2, r3
 80071a0:	4a91      	ldr	r2, [pc, #580]	; (80073e8 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 80071a2:	4293      	cmp	r3, r2
 80071a4:	d904      	bls.n	80071b0 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80071a6:	2313      	movs	r3, #19
 80071a8:	18fb      	adds	r3, r7, r3
 80071aa:	2203      	movs	r2, #3
 80071ac:	701a      	strb	r2, [r3, #0]
            break;
 80071ae:	e004      	b.n	80071ba <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071b0:	4b89      	ldr	r3, [pc, #548]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071b4:	2202      	movs	r2, #2
 80071b6:	4013      	ands	r3, r2
 80071b8:	d0ed      	beq.n	8007196 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80071ba:	2313      	movs	r3, #19
 80071bc:	18fb      	adds	r3, r7, r3
 80071be:	781b      	ldrb	r3, [r3, #0]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d10a      	bne.n	80071da <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80071c4:	4b84      	ldr	r3, [pc, #528]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80071c8:	4a85      	ldr	r2, [pc, #532]	; (80073e0 <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80071ca:	4013      	ands	r3, r2
 80071cc:	0019      	movs	r1, r3
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80071d2:	4b81      	ldr	r3, [pc, #516]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80071d4:	430a      	orrs	r2, r1
 80071d6:	65da      	str	r2, [r3, #92]	; 0x5c
 80071d8:	e00c      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80071da:	2312      	movs	r3, #18
 80071dc:	18fb      	adds	r3, r7, r3
 80071de:	2213      	movs	r2, #19
 80071e0:	18ba      	adds	r2, r7, r2
 80071e2:	7812      	ldrb	r2, [r2, #0]
 80071e4:	701a      	strb	r2, [r3, #0]
 80071e6:	e005      	b.n	80071f4 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80071e8:	2312      	movs	r3, #18
 80071ea:	18fb      	adds	r3, r7, r3
 80071ec:	2213      	movs	r2, #19
 80071ee:	18ba      	adds	r2, r7, r2
 80071f0:	7812      	ldrb	r2, [r2, #0]
 80071f2:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80071f4:	2311      	movs	r3, #17
 80071f6:	18fb      	adds	r3, r7, r3
 80071f8:	781b      	ldrb	r3, [r3, #0]
 80071fa:	2b01      	cmp	r3, #1
 80071fc:	d105      	bne.n	800720a <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80071fe:	4b76      	ldr	r3, [pc, #472]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007200:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007202:	4b75      	ldr	r3, [pc, #468]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007204:	4979      	ldr	r1, [pc, #484]	; (80073ec <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8007206:	400a      	ands	r2, r1
 8007208:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	2201      	movs	r2, #1
 8007210:	4013      	ands	r3, r2
 8007212:	d009      	beq.n	8007228 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007214:	4b70      	ldr	r3, [pc, #448]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007218:	2203      	movs	r2, #3
 800721a:	4393      	bics	r3, r2
 800721c:	0019      	movs	r1, r3
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	685a      	ldr	r2, [r3, #4]
 8007222:	4b6d      	ldr	r3, [pc, #436]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007224:	430a      	orrs	r2, r1
 8007226:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2202      	movs	r2, #2
 800722e:	4013      	ands	r3, r2
 8007230:	d009      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007232:	4b69      	ldr	r3, [pc, #420]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007236:	220c      	movs	r2, #12
 8007238:	4393      	bics	r3, r2
 800723a:	0019      	movs	r1, r3
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	689a      	ldr	r2, [r3, #8]
 8007240:	4b65      	ldr	r3, [pc, #404]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007242:	430a      	orrs	r2, r1
 8007244:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2210      	movs	r2, #16
 800724c:	4013      	ands	r3, r2
 800724e:	d009      	beq.n	8007264 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007250:	4b61      	ldr	r3, [pc, #388]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007252:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007254:	4a66      	ldr	r2, [pc, #408]	; (80073f0 <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8007256:	4013      	ands	r3, r2
 8007258:	0019      	movs	r1, r3
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	68da      	ldr	r2, [r3, #12]
 800725e:	4b5e      	ldr	r3, [pc, #376]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007260:	430a      	orrs	r2, r1
 8007262:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	2380      	movs	r3, #128	; 0x80
 800726a:	009b      	lsls	r3, r3, #2
 800726c:	4013      	ands	r3, r2
 800726e:	d009      	beq.n	8007284 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007270:	4b59      	ldr	r3, [pc, #356]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007274:	4a5f      	ldr	r2, [pc, #380]	; (80073f4 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8007276:	4013      	ands	r3, r2
 8007278:	0019      	movs	r1, r3
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	699a      	ldr	r2, [r3, #24]
 800727e:	4b56      	ldr	r3, [pc, #344]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007280:	430a      	orrs	r2, r1
 8007282:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	681a      	ldr	r2, [r3, #0]
 8007288:	2380      	movs	r3, #128	; 0x80
 800728a:	00db      	lsls	r3, r3, #3
 800728c:	4013      	ands	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007290:	4b51      	ldr	r3, [pc, #324]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007294:	4a58      	ldr	r2, [pc, #352]	; (80073f8 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8007296:	4013      	ands	r3, r2
 8007298:	0019      	movs	r1, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	69da      	ldr	r2, [r3, #28]
 800729e:	4b4e      	ldr	r3, [pc, #312]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072a0:	430a      	orrs	r2, r1
 80072a2:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	2220      	movs	r2, #32
 80072aa:	4013      	ands	r3, r2
 80072ac:	d009      	beq.n	80072c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80072ae:	4b4a      	ldr	r3, [pc, #296]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072b2:	4a52      	ldr	r2, [pc, #328]	; (80073fc <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80072b4:	4013      	ands	r3, r2
 80072b6:	0019      	movs	r1, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	691a      	ldr	r2, [r3, #16]
 80072bc:	4b46      	ldr	r3, [pc, #280]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072be:	430a      	orrs	r2, r1
 80072c0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681a      	ldr	r2, [r3, #0]
 80072c6:	2380      	movs	r3, #128	; 0x80
 80072c8:	01db      	lsls	r3, r3, #7
 80072ca:	4013      	ands	r3, r2
 80072cc:	d015      	beq.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80072ce:	4b42      	ldr	r3, [pc, #264]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072d2:	009b      	lsls	r3, r3, #2
 80072d4:	0899      	lsrs	r1, r3, #2
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6a1a      	ldr	r2, [r3, #32]
 80072da:	4b3f      	ldr	r3, [pc, #252]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072dc:	430a      	orrs	r2, r1
 80072de:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	6a1a      	ldr	r2, [r3, #32]
 80072e4:	2380      	movs	r3, #128	; 0x80
 80072e6:	05db      	lsls	r3, r3, #23
 80072e8:	429a      	cmp	r2, r3
 80072ea:	d106      	bne.n	80072fa <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80072ec:	4b3a      	ldr	r3, [pc, #232]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072ee:	68da      	ldr	r2, [r3, #12]
 80072f0:	4b39      	ldr	r3, [pc, #228]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80072f2:	2180      	movs	r1, #128	; 0x80
 80072f4:	0249      	lsls	r1, r1, #9
 80072f6:	430a      	orrs	r2, r1
 80072f8:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	2380      	movs	r3, #128	; 0x80
 8007300:	031b      	lsls	r3, r3, #12
 8007302:	4013      	ands	r3, r2
 8007304:	d009      	beq.n	800731a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8007306:	4b34      	ldr	r3, [pc, #208]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800730a:	2240      	movs	r2, #64	; 0x40
 800730c:	4393      	bics	r3, r2
 800730e:	0019      	movs	r1, r3
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007314:	4b30      	ldr	r3, [pc, #192]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007316:	430a      	orrs	r2, r1
 8007318:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681a      	ldr	r2, [r3, #0]
 800731e:	2380      	movs	r3, #128	; 0x80
 8007320:	039b      	lsls	r3, r3, #14
 8007322:	4013      	ands	r3, r2
 8007324:	d016      	beq.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8007326:	4b2c      	ldr	r3, [pc, #176]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007328:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800732a:	4a35      	ldr	r2, [pc, #212]	; (8007400 <HAL_RCCEx_PeriphCLKConfig+0x364>)
 800732c:	4013      	ands	r3, r2
 800732e:	0019      	movs	r1, r3
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007334:	4b28      	ldr	r3, [pc, #160]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007336:	430a      	orrs	r2, r1
 8007338:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800733e:	2380      	movs	r3, #128	; 0x80
 8007340:	03db      	lsls	r3, r3, #15
 8007342:	429a      	cmp	r2, r3
 8007344:	d106      	bne.n	8007354 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007346:	4b24      	ldr	r3, [pc, #144]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007348:	68da      	ldr	r2, [r3, #12]
 800734a:	4b23      	ldr	r3, [pc, #140]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800734c:	2180      	movs	r1, #128	; 0x80
 800734e:	0449      	lsls	r1, r1, #17
 8007350:	430a      	orrs	r2, r1
 8007352:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681a      	ldr	r2, [r3, #0]
 8007358:	2380      	movs	r3, #128	; 0x80
 800735a:	03db      	lsls	r3, r3, #15
 800735c:	4013      	ands	r3, r2
 800735e:	d016      	beq.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8007360:	4b1d      	ldr	r3, [pc, #116]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007362:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007364:	4a27      	ldr	r2, [pc, #156]	; (8007404 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8007366:	4013      	ands	r3, r2
 8007368:	0019      	movs	r1, r3
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800736e:	4b1a      	ldr	r3, [pc, #104]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007370:	430a      	orrs	r2, r1
 8007372:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007378:	2380      	movs	r3, #128	; 0x80
 800737a:	045b      	lsls	r3, r3, #17
 800737c:	429a      	cmp	r2, r3
 800737e:	d106      	bne.n	800738e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8007380:	4b15      	ldr	r3, [pc, #84]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007382:	68da      	ldr	r2, [r3, #12]
 8007384:	4b14      	ldr	r3, [pc, #80]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8007386:	2180      	movs	r1, #128	; 0x80
 8007388:	0449      	lsls	r1, r1, #17
 800738a:	430a      	orrs	r2, r1
 800738c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	2380      	movs	r3, #128	; 0x80
 8007394:	011b      	lsls	r3, r3, #4
 8007396:	4013      	ands	r3, r2
 8007398:	d016      	beq.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800739a:	4b0f      	ldr	r3, [pc, #60]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800739c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800739e:	4a1a      	ldr	r2, [pc, #104]	; (8007408 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 80073a0:	4013      	ands	r3, r2
 80073a2:	0019      	movs	r1, r3
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	695a      	ldr	r2, [r3, #20]
 80073a8:	4b0b      	ldr	r3, [pc, #44]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073aa:	430a      	orrs	r2, r1
 80073ac:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	695a      	ldr	r2, [r3, #20]
 80073b2:	2380      	movs	r3, #128	; 0x80
 80073b4:	01db      	lsls	r3, r3, #7
 80073b6:	429a      	cmp	r2, r3
 80073b8:	d106      	bne.n	80073c8 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80073ba:	4b07      	ldr	r3, [pc, #28]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073bc:	68da      	ldr	r2, [r3, #12]
 80073be:	4b06      	ldr	r3, [pc, #24]	; (80073d8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80073c0:	2180      	movs	r1, #128	; 0x80
 80073c2:	0249      	lsls	r1, r1, #9
 80073c4:	430a      	orrs	r2, r1
 80073c6:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80073c8:	2312      	movs	r3, #18
 80073ca:	18fb      	adds	r3, r7, r3
 80073cc:	781b      	ldrb	r3, [r3, #0]
}
 80073ce:	0018      	movs	r0, r3
 80073d0:	46bd      	mov	sp, r7
 80073d2:	b006      	add	sp, #24
 80073d4:	bd80      	pop	{r7, pc}
 80073d6:	46c0      	nop			; (mov r8, r8)
 80073d8:	40021000 	.word	0x40021000
 80073dc:	40007000 	.word	0x40007000
 80073e0:	fffffcff 	.word	0xfffffcff
 80073e4:	fffeffff 	.word	0xfffeffff
 80073e8:	00001388 	.word	0x00001388
 80073ec:	efffffff 	.word	0xefffffff
 80073f0:	fffff3ff 	.word	0xfffff3ff
 80073f4:	fff3ffff 	.word	0xfff3ffff
 80073f8:	ffcfffff 	.word	0xffcfffff
 80073fc:	ffffcfff 	.word	0xffffcfff
 8007400:	ffbfffff 	.word	0xffbfffff
 8007404:	feffffff 	.word	0xfeffffff
 8007408:	ffff3fff 	.word	0xffff3fff

0800740c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800740c:	b580      	push	{r7, lr}
 800740e:	b082      	sub	sp, #8
 8007410:	af00      	add	r7, sp, #0
 8007412:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2b00      	cmp	r3, #0
 8007418:	d101      	bne.n	800741e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800741a:	2301      	movs	r3, #1
 800741c:	e04a      	b.n	80074b4 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	223d      	movs	r2, #61	; 0x3d
 8007422:	5c9b      	ldrb	r3, [r3, r2]
 8007424:	b2db      	uxtb	r3, r3
 8007426:	2b00      	cmp	r3, #0
 8007428:	d107      	bne.n	800743a <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	223c      	movs	r2, #60	; 0x3c
 800742e:	2100      	movs	r1, #0
 8007430:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	0018      	movs	r0, r3
 8007436:	f000 f841 	bl	80074bc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	223d      	movs	r2, #61	; 0x3d
 800743e:	2102      	movs	r1, #2
 8007440:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681a      	ldr	r2, [r3, #0]
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	3304      	adds	r3, #4
 800744a:	0019      	movs	r1, r3
 800744c:	0010      	movs	r0, r2
 800744e:	f000 f9c1 	bl	80077d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	2248      	movs	r2, #72	; 0x48
 8007456:	2101      	movs	r1, #1
 8007458:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	223e      	movs	r2, #62	; 0x3e
 800745e:	2101      	movs	r1, #1
 8007460:	5499      	strb	r1, [r3, r2]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	223f      	movs	r2, #63	; 0x3f
 8007466:	2101      	movs	r1, #1
 8007468:	5499      	strb	r1, [r3, r2]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	2240      	movs	r2, #64	; 0x40
 800746e:	2101      	movs	r1, #1
 8007470:	5499      	strb	r1, [r3, r2]
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2241      	movs	r2, #65	; 0x41
 8007476:	2101      	movs	r1, #1
 8007478:	5499      	strb	r1, [r3, r2]
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2242      	movs	r2, #66	; 0x42
 800747e:	2101      	movs	r1, #1
 8007480:	5499      	strb	r1, [r3, r2]
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	2243      	movs	r2, #67	; 0x43
 8007486:	2101      	movs	r1, #1
 8007488:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2244      	movs	r2, #68	; 0x44
 800748e:	2101      	movs	r1, #1
 8007490:	5499      	strb	r1, [r3, r2]
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2245      	movs	r2, #69	; 0x45
 8007496:	2101      	movs	r1, #1
 8007498:	5499      	strb	r1, [r3, r2]
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	2246      	movs	r2, #70	; 0x46
 800749e:	2101      	movs	r1, #1
 80074a0:	5499      	strb	r1, [r3, r2]
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	2247      	movs	r2, #71	; 0x47
 80074a6:	2101      	movs	r1, #1
 80074a8:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	223d      	movs	r2, #61	; 0x3d
 80074ae:	2101      	movs	r1, #1
 80074b0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80074b2:	2300      	movs	r3, #0
}
 80074b4:	0018      	movs	r0, r3
 80074b6:	46bd      	mov	sp, r7
 80074b8:	b002      	add	sp, #8
 80074ba:	bd80      	pop	{r7, pc}

080074bc <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b082      	sub	sp, #8
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80074c4:	46c0      	nop			; (mov r8, r8)
 80074c6:	46bd      	mov	sp, r7
 80074c8:	b002      	add	sp, #8
 80074ca:	bd80      	pop	{r7, pc}

080074cc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80074cc:	b580      	push	{r7, lr}
 80074ce:	b084      	sub	sp, #16
 80074d0:	af00      	add	r7, sp, #0
 80074d2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	223d      	movs	r2, #61	; 0x3d
 80074d8:	5c9b      	ldrb	r3, [r3, r2]
 80074da:	b2db      	uxtb	r3, r3
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d001      	beq.n	80074e4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80074e0:	2301      	movs	r3, #1
 80074e2:	e042      	b.n	800756a <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	223d      	movs	r2, #61	; 0x3d
 80074e8:	2102      	movs	r1, #2
 80074ea:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	68da      	ldr	r2, [r3, #12]
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	2101      	movs	r1, #1
 80074f8:	430a      	orrs	r2, r1
 80074fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	681b      	ldr	r3, [r3, #0]
 8007500:	4a1c      	ldr	r2, [pc, #112]	; (8007574 <HAL_TIM_Base_Start_IT+0xa8>)
 8007502:	4293      	cmp	r3, r2
 8007504:	d00f      	beq.n	8007526 <HAL_TIM_Base_Start_IT+0x5a>
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681a      	ldr	r2, [r3, #0]
 800750a:	2380      	movs	r3, #128	; 0x80
 800750c:	05db      	lsls	r3, r3, #23
 800750e:	429a      	cmp	r2, r3
 8007510:	d009      	beq.n	8007526 <HAL_TIM_Base_Start_IT+0x5a>
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	4a18      	ldr	r2, [pc, #96]	; (8007578 <HAL_TIM_Base_Start_IT+0xac>)
 8007518:	4293      	cmp	r3, r2
 800751a:	d004      	beq.n	8007526 <HAL_TIM_Base_Start_IT+0x5a>
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	4a16      	ldr	r2, [pc, #88]	; (800757c <HAL_TIM_Base_Start_IT+0xb0>)
 8007522:	4293      	cmp	r3, r2
 8007524:	d116      	bne.n	8007554 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	4a14      	ldr	r2, [pc, #80]	; (8007580 <HAL_TIM_Base_Start_IT+0xb4>)
 800752e:	4013      	ands	r3, r2
 8007530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	2b06      	cmp	r3, #6
 8007536:	d016      	beq.n	8007566 <HAL_TIM_Base_Start_IT+0x9a>
 8007538:	68fa      	ldr	r2, [r7, #12]
 800753a:	2380      	movs	r3, #128	; 0x80
 800753c:	025b      	lsls	r3, r3, #9
 800753e:	429a      	cmp	r2, r3
 8007540:	d011      	beq.n	8007566 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	681a      	ldr	r2, [r3, #0]
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	2101      	movs	r1, #1
 800754e:	430a      	orrs	r2, r1
 8007550:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007552:	e008      	b.n	8007566 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	681a      	ldr	r2, [r3, #0]
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	2101      	movs	r1, #1
 8007560:	430a      	orrs	r2, r1
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	e000      	b.n	8007568 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007566:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8007568:	2300      	movs	r3, #0
}
 800756a:	0018      	movs	r0, r3
 800756c:	46bd      	mov	sp, r7
 800756e:	b004      	add	sp, #16
 8007570:	bd80      	pop	{r7, pc}
 8007572:	46c0      	nop			; (mov r8, r8)
 8007574:	40012c00 	.word	0x40012c00
 8007578:	40000400 	.word	0x40000400
 800757c:	40014000 	.word	0x40014000
 8007580:	00010007 	.word	0x00010007

08007584 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b084      	sub	sp, #16
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	68db      	ldr	r3, [r3, #12]
 8007592:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	691b      	ldr	r3, [r3, #16]
 800759a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800759c:	68bb      	ldr	r3, [r7, #8]
 800759e:	2202      	movs	r2, #2
 80075a0:	4013      	ands	r3, r2
 80075a2:	d021      	beq.n	80075e8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	2202      	movs	r2, #2
 80075a8:	4013      	ands	r3, r2
 80075aa:	d01d      	beq.n	80075e8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	2203      	movs	r2, #3
 80075b2:	4252      	negs	r2, r2
 80075b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	2201      	movs	r2, #1
 80075ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	681b      	ldr	r3, [r3, #0]
 80075c0:	699b      	ldr	r3, [r3, #24]
 80075c2:	2203      	movs	r2, #3
 80075c4:	4013      	ands	r3, r2
 80075c6:	d004      	beq.n	80075d2 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	0018      	movs	r0, r3
 80075cc:	f000 f8ea 	bl	80077a4 <HAL_TIM_IC_CaptureCallback>
 80075d0:	e007      	b.n	80075e2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	0018      	movs	r0, r3
 80075d6:	f000 f8dd 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	0018      	movs	r0, r3
 80075de:	f000 f8e9 	bl	80077b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2200      	movs	r2, #0
 80075e6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2204      	movs	r2, #4
 80075ec:	4013      	ands	r3, r2
 80075ee:	d022      	beq.n	8007636 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	2204      	movs	r2, #4
 80075f4:	4013      	ands	r3, r2
 80075f6:	d01e      	beq.n	8007636 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2205      	movs	r2, #5
 80075fe:	4252      	negs	r2, r2
 8007600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2202      	movs	r2, #2
 8007606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	699a      	ldr	r2, [r3, #24]
 800760e:	23c0      	movs	r3, #192	; 0xc0
 8007610:	009b      	lsls	r3, r3, #2
 8007612:	4013      	ands	r3, r2
 8007614:	d004      	beq.n	8007620 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	0018      	movs	r0, r3
 800761a:	f000 f8c3 	bl	80077a4 <HAL_TIM_IC_CaptureCallback>
 800761e:	e007      	b.n	8007630 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	0018      	movs	r0, r3
 8007624:	f000 f8b6 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	0018      	movs	r0, r3
 800762c:	f000 f8c2 	bl	80077b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	2200      	movs	r2, #0
 8007634:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007636:	68bb      	ldr	r3, [r7, #8]
 8007638:	2208      	movs	r2, #8
 800763a:	4013      	ands	r3, r2
 800763c:	d021      	beq.n	8007682 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800763e:	68fb      	ldr	r3, [r7, #12]
 8007640:	2208      	movs	r2, #8
 8007642:	4013      	ands	r3, r2
 8007644:	d01d      	beq.n	8007682 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2209      	movs	r2, #9
 800764c:	4252      	negs	r2, r2
 800764e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	2204      	movs	r2, #4
 8007654:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69db      	ldr	r3, [r3, #28]
 800765c:	2203      	movs	r2, #3
 800765e:	4013      	ands	r3, r2
 8007660:	d004      	beq.n	800766c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	0018      	movs	r0, r3
 8007666:	f000 f89d 	bl	80077a4 <HAL_TIM_IC_CaptureCallback>
 800766a:	e007      	b.n	800767c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	0018      	movs	r0, r3
 8007670:	f000 f890 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	0018      	movs	r0, r3
 8007678:	f000 f89c 	bl	80077b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007682:	68bb      	ldr	r3, [r7, #8]
 8007684:	2210      	movs	r2, #16
 8007686:	4013      	ands	r3, r2
 8007688:	d022      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800768a:	68fb      	ldr	r3, [r7, #12]
 800768c:	2210      	movs	r2, #16
 800768e:	4013      	ands	r3, r2
 8007690:	d01e      	beq.n	80076d0 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	681b      	ldr	r3, [r3, #0]
 8007696:	2211      	movs	r2, #17
 8007698:	4252      	negs	r2, r2
 800769a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2208      	movs	r2, #8
 80076a0:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	69da      	ldr	r2, [r3, #28]
 80076a8:	23c0      	movs	r3, #192	; 0xc0
 80076aa:	009b      	lsls	r3, r3, #2
 80076ac:	4013      	ands	r3, r2
 80076ae:	d004      	beq.n	80076ba <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	0018      	movs	r0, r3
 80076b4:	f000 f876 	bl	80077a4 <HAL_TIM_IC_CaptureCallback>
 80076b8:	e007      	b.n	80076ca <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	0018      	movs	r0, r3
 80076be:	f000 f869 	bl	8007794 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	0018      	movs	r0, r3
 80076c6:	f000 f875 	bl	80077b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2200      	movs	r2, #0
 80076ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80076d0:	68bb      	ldr	r3, [r7, #8]
 80076d2:	2201      	movs	r2, #1
 80076d4:	4013      	ands	r3, r2
 80076d6:	d00c      	beq.n	80076f2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	2201      	movs	r2, #1
 80076dc:	4013      	ands	r3, r2
 80076de:	d008      	beq.n	80076f2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	2202      	movs	r2, #2
 80076e6:	4252      	negs	r2, r2
 80076e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	0018      	movs	r0, r3
 80076ee:	f7fe f965 	bl	80059bc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80076f2:	68bb      	ldr	r3, [r7, #8]
 80076f4:	2280      	movs	r2, #128	; 0x80
 80076f6:	4013      	ands	r3, r2
 80076f8:	d104      	bne.n	8007704 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80076fa:	68ba      	ldr	r2, [r7, #8]
 80076fc:	2380      	movs	r3, #128	; 0x80
 80076fe:	019b      	lsls	r3, r3, #6
 8007700:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007702:	d00b      	beq.n	800771c <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	2280      	movs	r2, #128	; 0x80
 8007708:	4013      	ands	r3, r2
 800770a:	d007      	beq.n	800771c <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800770c:	687b      	ldr	r3, [r7, #4]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	4a1e      	ldr	r2, [pc, #120]	; (800778c <HAL_TIM_IRQHandler+0x208>)
 8007712:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	0018      	movs	r0, r3
 8007718:	f000 f8f2 	bl	8007900 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800771c:	68ba      	ldr	r2, [r7, #8]
 800771e:	2380      	movs	r3, #128	; 0x80
 8007720:	005b      	lsls	r3, r3, #1
 8007722:	4013      	ands	r3, r2
 8007724:	d00b      	beq.n	800773e <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	2280      	movs	r2, #128	; 0x80
 800772a:	4013      	ands	r3, r2
 800772c:	d007      	beq.n	800773e <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	4a17      	ldr	r2, [pc, #92]	; (8007790 <HAL_TIM_IRQHandler+0x20c>)
 8007734:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	0018      	movs	r0, r3
 800773a:	f000 f8e9 	bl	8007910 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2240      	movs	r2, #64	; 0x40
 8007742:	4013      	ands	r3, r2
 8007744:	d00c      	beq.n	8007760 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2240      	movs	r2, #64	; 0x40
 800774a:	4013      	ands	r3, r2
 800774c:	d008      	beq.n	8007760 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	681b      	ldr	r3, [r3, #0]
 8007752:	2241      	movs	r2, #65	; 0x41
 8007754:	4252      	negs	r2, r2
 8007756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	0018      	movs	r0, r3
 800775c:	f000 f832 	bl	80077c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	2220      	movs	r2, #32
 8007764:	4013      	ands	r3, r2
 8007766:	d00c      	beq.n	8007782 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2220      	movs	r2, #32
 800776c:	4013      	ands	r3, r2
 800776e:	d008      	beq.n	8007782 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	2221      	movs	r2, #33	; 0x21
 8007776:	4252      	negs	r2, r2
 8007778:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	0018      	movs	r0, r3
 800777e:	f000 f8b7 	bl	80078f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007782:	46c0      	nop			; (mov r8, r8)
 8007784:	46bd      	mov	sp, r7
 8007786:	b004      	add	sp, #16
 8007788:	bd80      	pop	{r7, pc}
 800778a:	46c0      	nop			; (mov r8, r8)
 800778c:	ffffdf7f 	.word	0xffffdf7f
 8007790:	fffffeff 	.word	0xfffffeff

08007794 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007794:	b580      	push	{r7, lr}
 8007796:	b082      	sub	sp, #8
 8007798:	af00      	add	r7, sp, #0
 800779a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800779c:	46c0      	nop			; (mov r8, r8)
 800779e:	46bd      	mov	sp, r7
 80077a0:	b002      	add	sp, #8
 80077a2:	bd80      	pop	{r7, pc}

080077a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80077a4:	b580      	push	{r7, lr}
 80077a6:	b082      	sub	sp, #8
 80077a8:	af00      	add	r7, sp, #0
 80077aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80077ac:	46c0      	nop			; (mov r8, r8)
 80077ae:	46bd      	mov	sp, r7
 80077b0:	b002      	add	sp, #8
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b082      	sub	sp, #8
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80077bc:	46c0      	nop			; (mov r8, r8)
 80077be:	46bd      	mov	sp, r7
 80077c0:	b002      	add	sp, #8
 80077c2:	bd80      	pop	{r7, pc}

080077c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b082      	sub	sp, #8
 80077c8:	af00      	add	r7, sp, #0
 80077ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80077cc:	46c0      	nop			; (mov r8, r8)
 80077ce:	46bd      	mov	sp, r7
 80077d0:	b002      	add	sp, #8
 80077d2:	bd80      	pop	{r7, pc}

080077d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80077d4:	b580      	push	{r7, lr}
 80077d6:	b084      	sub	sp, #16
 80077d8:	af00      	add	r7, sp, #0
 80077da:	6078      	str	r0, [r7, #4]
 80077dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	4a3b      	ldr	r2, [pc, #236]	; (80078d4 <TIM_Base_SetConfig+0x100>)
 80077e8:	4293      	cmp	r3, r2
 80077ea:	d008      	beq.n	80077fe <TIM_Base_SetConfig+0x2a>
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	2380      	movs	r3, #128	; 0x80
 80077f0:	05db      	lsls	r3, r3, #23
 80077f2:	429a      	cmp	r2, r3
 80077f4:	d003      	beq.n	80077fe <TIM_Base_SetConfig+0x2a>
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	4a37      	ldr	r2, [pc, #220]	; (80078d8 <TIM_Base_SetConfig+0x104>)
 80077fa:	4293      	cmp	r3, r2
 80077fc:	d108      	bne.n	8007810 <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	2270      	movs	r2, #112	; 0x70
 8007802:	4393      	bics	r3, r2
 8007804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007806:	683b      	ldr	r3, [r7, #0]
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	68fa      	ldr	r2, [r7, #12]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	4a30      	ldr	r2, [pc, #192]	; (80078d4 <TIM_Base_SetConfig+0x100>)
 8007814:	4293      	cmp	r3, r2
 8007816:	d018      	beq.n	800784a <TIM_Base_SetConfig+0x76>
 8007818:	687a      	ldr	r2, [r7, #4]
 800781a:	2380      	movs	r3, #128	; 0x80
 800781c:	05db      	lsls	r3, r3, #23
 800781e:	429a      	cmp	r2, r3
 8007820:	d013      	beq.n	800784a <TIM_Base_SetConfig+0x76>
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	4a2c      	ldr	r2, [pc, #176]	; (80078d8 <TIM_Base_SetConfig+0x104>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d00f      	beq.n	800784a <TIM_Base_SetConfig+0x76>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	4a2b      	ldr	r2, [pc, #172]	; (80078dc <TIM_Base_SetConfig+0x108>)
 800782e:	4293      	cmp	r3, r2
 8007830:	d00b      	beq.n	800784a <TIM_Base_SetConfig+0x76>
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	4a2a      	ldr	r2, [pc, #168]	; (80078e0 <TIM_Base_SetConfig+0x10c>)
 8007836:	4293      	cmp	r3, r2
 8007838:	d007      	beq.n	800784a <TIM_Base_SetConfig+0x76>
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	4a29      	ldr	r2, [pc, #164]	; (80078e4 <TIM_Base_SetConfig+0x110>)
 800783e:	4293      	cmp	r3, r2
 8007840:	d003      	beq.n	800784a <TIM_Base_SetConfig+0x76>
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	4a28      	ldr	r2, [pc, #160]	; (80078e8 <TIM_Base_SetConfig+0x114>)
 8007846:	4293      	cmp	r3, r2
 8007848:	d108      	bne.n	800785c <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	4a27      	ldr	r2, [pc, #156]	; (80078ec <TIM_Base_SetConfig+0x118>)
 800784e:	4013      	ands	r3, r2
 8007850:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007852:	683b      	ldr	r3, [r7, #0]
 8007854:	68db      	ldr	r3, [r3, #12]
 8007856:	68fa      	ldr	r2, [r7, #12]
 8007858:	4313      	orrs	r3, r2
 800785a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	2280      	movs	r2, #128	; 0x80
 8007860:	4393      	bics	r3, r2
 8007862:	001a      	movs	r2, r3
 8007864:	683b      	ldr	r3, [r7, #0]
 8007866:	695b      	ldr	r3, [r3, #20]
 8007868:	4313      	orrs	r3, r2
 800786a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	68fa      	ldr	r2, [r7, #12]
 8007870:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007872:	683b      	ldr	r3, [r7, #0]
 8007874:	689a      	ldr	r2, [r3, #8]
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800787a:	683b      	ldr	r3, [r7, #0]
 800787c:	681a      	ldr	r2, [r3, #0]
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	4a13      	ldr	r2, [pc, #76]	; (80078d4 <TIM_Base_SetConfig+0x100>)
 8007886:	4293      	cmp	r3, r2
 8007888:	d00b      	beq.n	80078a2 <TIM_Base_SetConfig+0xce>
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	4a14      	ldr	r2, [pc, #80]	; (80078e0 <TIM_Base_SetConfig+0x10c>)
 800788e:	4293      	cmp	r3, r2
 8007890:	d007      	beq.n	80078a2 <TIM_Base_SetConfig+0xce>
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	4a13      	ldr	r2, [pc, #76]	; (80078e4 <TIM_Base_SetConfig+0x110>)
 8007896:	4293      	cmp	r3, r2
 8007898:	d003      	beq.n	80078a2 <TIM_Base_SetConfig+0xce>
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	4a12      	ldr	r2, [pc, #72]	; (80078e8 <TIM_Base_SetConfig+0x114>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d103      	bne.n	80078aa <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80078a2:	683b      	ldr	r3, [r7, #0]
 80078a4:	691a      	ldr	r2, [r3, #16]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	2201      	movs	r2, #1
 80078ae:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	691b      	ldr	r3, [r3, #16]
 80078b4:	2201      	movs	r2, #1
 80078b6:	4013      	ands	r3, r2
 80078b8:	2b01      	cmp	r3, #1
 80078ba:	d106      	bne.n	80078ca <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	691b      	ldr	r3, [r3, #16]
 80078c0:	2201      	movs	r2, #1
 80078c2:	4393      	bics	r3, r2
 80078c4:	001a      	movs	r2, r3
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	611a      	str	r2, [r3, #16]
  }
}
 80078ca:	46c0      	nop			; (mov r8, r8)
 80078cc:	46bd      	mov	sp, r7
 80078ce:	b004      	add	sp, #16
 80078d0:	bd80      	pop	{r7, pc}
 80078d2:	46c0      	nop			; (mov r8, r8)
 80078d4:	40012c00 	.word	0x40012c00
 80078d8:	40000400 	.word	0x40000400
 80078dc:	40002000 	.word	0x40002000
 80078e0:	40014000 	.word	0x40014000
 80078e4:	40014400 	.word	0x40014400
 80078e8:	40014800 	.word	0x40014800
 80078ec:	fffffcff 	.word	0xfffffcff

080078f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80078f8:	46c0      	nop			; (mov r8, r8)
 80078fa:	46bd      	mov	sp, r7
 80078fc:	b002      	add	sp, #8
 80078fe:	bd80      	pop	{r7, pc}

08007900 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007900:	b580      	push	{r7, lr}
 8007902:	b082      	sub	sp, #8
 8007904:	af00      	add	r7, sp, #0
 8007906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007908:	46c0      	nop			; (mov r8, r8)
 800790a:	46bd      	mov	sp, r7
 800790c:	b002      	add	sp, #8
 800790e:	bd80      	pop	{r7, pc}

08007910 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b082      	sub	sp, #8
 8007914:	af00      	add	r7, sp, #0
 8007916:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007918:	46c0      	nop			; (mov r8, r8)
 800791a:	46bd      	mov	sp, r7
 800791c:	b002      	add	sp, #8
 800791e:	bd80      	pop	{r7, pc}

08007920 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007920:	b580      	push	{r7, lr}
 8007922:	b082      	sub	sp, #8
 8007924:	af00      	add	r7, sp, #0
 8007926:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d101      	bne.n	8007932 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800792e:	2301      	movs	r3, #1
 8007930:	e046      	b.n	80079c0 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	2288      	movs	r2, #136	; 0x88
 8007936:	589b      	ldr	r3, [r3, r2]
 8007938:	2b00      	cmp	r3, #0
 800793a:	d107      	bne.n	800794c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	2284      	movs	r2, #132	; 0x84
 8007940:	2100      	movs	r1, #0
 8007942:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	0018      	movs	r0, r3
 8007948:	f7fe f880 	bl	8005a4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2288      	movs	r2, #136	; 0x88
 8007950:	2124      	movs	r1, #36	; 0x24
 8007952:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	681a      	ldr	r2, [r3, #0]
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	2101      	movs	r1, #1
 8007960:	438a      	bics	r2, r1
 8007962:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007968:	2b00      	cmp	r3, #0
 800796a:	d003      	beq.n	8007974 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	0018      	movs	r0, r3
 8007970:	f000 fecc 	bl	800870c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	0018      	movs	r0, r3
 8007978:	f000 fc0a 	bl	8008190 <UART_SetConfig>
 800797c:	0003      	movs	r3, r0
 800797e:	2b01      	cmp	r3, #1
 8007980:	d101      	bne.n	8007986 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8007982:	2301      	movs	r3, #1
 8007984:	e01c      	b.n	80079c0 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	685a      	ldr	r2, [r3, #4]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	490d      	ldr	r1, [pc, #52]	; (80079c8 <HAL_UART_Init+0xa8>)
 8007992:	400a      	ands	r2, r1
 8007994:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	681b      	ldr	r3, [r3, #0]
 800799a:	689a      	ldr	r2, [r3, #8]
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	212a      	movs	r1, #42	; 0x2a
 80079a2:	438a      	bics	r2, r1
 80079a4:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	681a      	ldr	r2, [r3, #0]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	2101      	movs	r1, #1
 80079b2:	430a      	orrs	r2, r1
 80079b4:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	0018      	movs	r0, r3
 80079ba:	f000 ff5b 	bl	8008874 <UART_CheckIdleState>
 80079be:	0003      	movs	r3, r0
}
 80079c0:	0018      	movs	r0, r3
 80079c2:	46bd      	mov	sp, r7
 80079c4:	b002      	add	sp, #8
 80079c6:	bd80      	pop	{r7, pc}
 80079c8:	ffffb7ff 	.word	0xffffb7ff

080079cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079cc:	b580      	push	{r7, lr}
 80079ce:	b08a      	sub	sp, #40	; 0x28
 80079d0:	af02      	add	r7, sp, #8
 80079d2:	60f8      	str	r0, [r7, #12]
 80079d4:	60b9      	str	r1, [r7, #8]
 80079d6:	603b      	str	r3, [r7, #0]
 80079d8:	1dbb      	adds	r3, r7, #6
 80079da:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	2288      	movs	r2, #136	; 0x88
 80079e0:	589b      	ldr	r3, [r3, r2]
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d000      	beq.n	80079e8 <HAL_UART_Transmit+0x1c>
 80079e6:	e090      	b.n	8007b0a <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d003      	beq.n	80079f6 <HAL_UART_Transmit+0x2a>
 80079ee:	1dbb      	adds	r3, r7, #6
 80079f0:	881b      	ldrh	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80079f6:	2301      	movs	r3, #1
 80079f8:	e088      	b.n	8007b0c <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079fa:	68fb      	ldr	r3, [r7, #12]
 80079fc:	689a      	ldr	r2, [r3, #8]
 80079fe:	2380      	movs	r3, #128	; 0x80
 8007a00:	015b      	lsls	r3, r3, #5
 8007a02:	429a      	cmp	r2, r3
 8007a04:	d109      	bne.n	8007a1a <HAL_UART_Transmit+0x4e>
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	691b      	ldr	r3, [r3, #16]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d105      	bne.n	8007a1a <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	2201      	movs	r2, #1
 8007a12:	4013      	ands	r3, r2
 8007a14:	d001      	beq.n	8007a1a <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8007a16:	2301      	movs	r3, #1
 8007a18:	e078      	b.n	8007b0c <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	2290      	movs	r2, #144	; 0x90
 8007a1e:	2100      	movs	r1, #0
 8007a20:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007a22:	68fb      	ldr	r3, [r7, #12]
 8007a24:	2288      	movs	r2, #136	; 0x88
 8007a26:	2121      	movs	r1, #33	; 0x21
 8007a28:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007a2a:	f7fe faab 	bl	8005f84 <HAL_GetTick>
 8007a2e:	0003      	movs	r3, r0
 8007a30:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8007a32:	68fb      	ldr	r3, [r7, #12]
 8007a34:	1dba      	adds	r2, r7, #6
 8007a36:	2154      	movs	r1, #84	; 0x54
 8007a38:	8812      	ldrh	r2, [r2, #0]
 8007a3a:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	1dba      	adds	r2, r7, #6
 8007a40:	2156      	movs	r1, #86	; 0x56
 8007a42:	8812      	ldrh	r2, [r2, #0]
 8007a44:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a46:	68fb      	ldr	r3, [r7, #12]
 8007a48:	689a      	ldr	r2, [r3, #8]
 8007a4a:	2380      	movs	r3, #128	; 0x80
 8007a4c:	015b      	lsls	r3, r3, #5
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d108      	bne.n	8007a64 <HAL_UART_Transmit+0x98>
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	691b      	ldr	r3, [r3, #16]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d104      	bne.n	8007a64 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8007a5a:	2300      	movs	r3, #0
 8007a5c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	61bb      	str	r3, [r7, #24]
 8007a62:	e003      	b.n	8007a6c <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8007a64:	68bb      	ldr	r3, [r7, #8]
 8007a66:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a68:	2300      	movs	r3, #0
 8007a6a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a6c:	e030      	b.n	8007ad0 <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a6e:	697a      	ldr	r2, [r7, #20]
 8007a70:	68f8      	ldr	r0, [r7, #12]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	9300      	str	r3, [sp, #0]
 8007a76:	0013      	movs	r3, r2
 8007a78:	2200      	movs	r2, #0
 8007a7a:	2180      	movs	r1, #128	; 0x80
 8007a7c:	f000 ffa4 	bl	80089c8 <UART_WaitOnFlagUntilTimeout>
 8007a80:	1e03      	subs	r3, r0, #0
 8007a82:	d005      	beq.n	8007a90 <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2288      	movs	r2, #136	; 0x88
 8007a88:	2120      	movs	r1, #32
 8007a8a:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8007a8c:	2303      	movs	r3, #3
 8007a8e:	e03d      	b.n	8007b0c <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8007a90:	69fb      	ldr	r3, [r7, #28]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d10b      	bne.n	8007aae <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a96:	69bb      	ldr	r3, [r7, #24]
 8007a98:	881b      	ldrh	r3, [r3, #0]
 8007a9a:	001a      	movs	r2, r3
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	05d2      	lsls	r2, r2, #23
 8007aa2:	0dd2      	lsrs	r2, r2, #23
 8007aa4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007aa6:	69bb      	ldr	r3, [r7, #24]
 8007aa8:	3302      	adds	r3, #2
 8007aaa:	61bb      	str	r3, [r7, #24]
 8007aac:	e007      	b.n	8007abe <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007aae:	69fb      	ldr	r3, [r7, #28]
 8007ab0:	781a      	ldrb	r2, [r3, #0]
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007ab8:	69fb      	ldr	r3, [r7, #28]
 8007aba:	3301      	adds	r3, #1
 8007abc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	2256      	movs	r2, #86	; 0x56
 8007ac2:	5a9b      	ldrh	r3, [r3, r2]
 8007ac4:	b29b      	uxth	r3, r3
 8007ac6:	3b01      	subs	r3, #1
 8007ac8:	b299      	uxth	r1, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	2256      	movs	r2, #86	; 0x56
 8007ace:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	2256      	movs	r2, #86	; 0x56
 8007ad4:	5a9b      	ldrh	r3, [r3, r2]
 8007ad6:	b29b      	uxth	r3, r3
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d1c8      	bne.n	8007a6e <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007adc:	697a      	ldr	r2, [r7, #20]
 8007ade:	68f8      	ldr	r0, [r7, #12]
 8007ae0:	683b      	ldr	r3, [r7, #0]
 8007ae2:	9300      	str	r3, [sp, #0]
 8007ae4:	0013      	movs	r3, r2
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	2140      	movs	r1, #64	; 0x40
 8007aea:	f000 ff6d 	bl	80089c8 <UART_WaitOnFlagUntilTimeout>
 8007aee:	1e03      	subs	r3, r0, #0
 8007af0:	d005      	beq.n	8007afe <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007af2:	68fb      	ldr	r3, [r7, #12]
 8007af4:	2288      	movs	r2, #136	; 0x88
 8007af6:	2120      	movs	r1, #32
 8007af8:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8007afa:	2303      	movs	r3, #3
 8007afc:	e006      	b.n	8007b0c <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2288      	movs	r2, #136	; 0x88
 8007b02:	2120      	movs	r1, #32
 8007b04:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e000      	b.n	8007b0c <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8007b0a:	2302      	movs	r3, #2
  }
}
 8007b0c:	0018      	movs	r0, r3
 8007b0e:	46bd      	mov	sp, r7
 8007b10:	b008      	add	sp, #32
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007b14:	b5b0      	push	{r4, r5, r7, lr}
 8007b16:	b0aa      	sub	sp, #168	; 0xa8
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	69db      	ldr	r3, [r3, #28]
 8007b22:	22a4      	movs	r2, #164	; 0xa4
 8007b24:	18b9      	adds	r1, r7, r2
 8007b26:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	20a0      	movs	r0, #160	; 0xa0
 8007b30:	1839      	adds	r1, r7, r0
 8007b32:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	689b      	ldr	r3, [r3, #8]
 8007b3a:	249c      	movs	r4, #156	; 0x9c
 8007b3c:	1939      	adds	r1, r7, r4
 8007b3e:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007b40:	0011      	movs	r1, r2
 8007b42:	18bb      	adds	r3, r7, r2
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4aa2      	ldr	r2, [pc, #648]	; (8007dd0 <HAL_UART_IRQHandler+0x2bc>)
 8007b48:	4013      	ands	r3, r2
 8007b4a:	2298      	movs	r2, #152	; 0x98
 8007b4c:	18bd      	adds	r5, r7, r2
 8007b4e:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8007b50:	18bb      	adds	r3, r7, r2
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2b00      	cmp	r3, #0
 8007b56:	d11a      	bne.n	8007b8e <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b58:	187b      	adds	r3, r7, r1
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	2220      	movs	r2, #32
 8007b5e:	4013      	ands	r3, r2
 8007b60:	d015      	beq.n	8007b8e <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b62:	183b      	adds	r3, r7, r0
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	2220      	movs	r2, #32
 8007b68:	4013      	ands	r3, r2
 8007b6a:	d105      	bne.n	8007b78 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b6c:	193b      	adds	r3, r7, r4
 8007b6e:	681a      	ldr	r2, [r3, #0]
 8007b70:	2380      	movs	r3, #128	; 0x80
 8007b72:	055b      	lsls	r3, r3, #21
 8007b74:	4013      	ands	r3, r2
 8007b76:	d00a      	beq.n	8007b8e <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d100      	bne.n	8007b82 <HAL_UART_IRQHandler+0x6e>
 8007b80:	e2dc      	b.n	800813c <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007b86:	687a      	ldr	r2, [r7, #4]
 8007b88:	0010      	movs	r0, r2
 8007b8a:	4798      	blx	r3
      }
      return;
 8007b8c:	e2d6      	b.n	800813c <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007b8e:	2398      	movs	r3, #152	; 0x98
 8007b90:	18fb      	adds	r3, r7, r3
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d100      	bne.n	8007b9a <HAL_UART_IRQHandler+0x86>
 8007b98:	e122      	b.n	8007de0 <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007b9a:	239c      	movs	r3, #156	; 0x9c
 8007b9c:	18fb      	adds	r3, r7, r3
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	4a8c      	ldr	r2, [pc, #560]	; (8007dd4 <HAL_UART_IRQHandler+0x2c0>)
 8007ba2:	4013      	ands	r3, r2
 8007ba4:	d106      	bne.n	8007bb4 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007ba6:	23a0      	movs	r3, #160	; 0xa0
 8007ba8:	18fb      	adds	r3, r7, r3
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	4a8a      	ldr	r2, [pc, #552]	; (8007dd8 <HAL_UART_IRQHandler+0x2c4>)
 8007bae:	4013      	ands	r3, r2
 8007bb0:	d100      	bne.n	8007bb4 <HAL_UART_IRQHandler+0xa0>
 8007bb2:	e115      	b.n	8007de0 <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007bb4:	23a4      	movs	r3, #164	; 0xa4
 8007bb6:	18fb      	adds	r3, r7, r3
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	2201      	movs	r2, #1
 8007bbc:	4013      	ands	r3, r2
 8007bbe:	d012      	beq.n	8007be6 <HAL_UART_IRQHandler+0xd2>
 8007bc0:	23a0      	movs	r3, #160	; 0xa0
 8007bc2:	18fb      	adds	r3, r7, r3
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	2380      	movs	r3, #128	; 0x80
 8007bc8:	005b      	lsls	r3, r3, #1
 8007bca:	4013      	ands	r3, r2
 8007bcc:	d00b      	beq.n	8007be6 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	2290      	movs	r2, #144	; 0x90
 8007bda:	589b      	ldr	r3, [r3, r2]
 8007bdc:	2201      	movs	r2, #1
 8007bde:	431a      	orrs	r2, r3
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2190      	movs	r1, #144	; 0x90
 8007be4:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007be6:	23a4      	movs	r3, #164	; 0xa4
 8007be8:	18fb      	adds	r3, r7, r3
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2202      	movs	r2, #2
 8007bee:	4013      	ands	r3, r2
 8007bf0:	d011      	beq.n	8007c16 <HAL_UART_IRQHandler+0x102>
 8007bf2:	239c      	movs	r3, #156	; 0x9c
 8007bf4:	18fb      	adds	r3, r7, r3
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	2201      	movs	r2, #1
 8007bfa:	4013      	ands	r3, r2
 8007bfc:	d00b      	beq.n	8007c16 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	2202      	movs	r2, #2
 8007c04:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	2290      	movs	r2, #144	; 0x90
 8007c0a:	589b      	ldr	r3, [r3, r2]
 8007c0c:	2204      	movs	r2, #4
 8007c0e:	431a      	orrs	r2, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	2190      	movs	r1, #144	; 0x90
 8007c14:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007c16:	23a4      	movs	r3, #164	; 0xa4
 8007c18:	18fb      	adds	r3, r7, r3
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	2204      	movs	r2, #4
 8007c1e:	4013      	ands	r3, r2
 8007c20:	d011      	beq.n	8007c46 <HAL_UART_IRQHandler+0x132>
 8007c22:	239c      	movs	r3, #156	; 0x9c
 8007c24:	18fb      	adds	r3, r7, r3
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	2201      	movs	r2, #1
 8007c2a:	4013      	ands	r3, r2
 8007c2c:	d00b      	beq.n	8007c46 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	2204      	movs	r2, #4
 8007c34:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	2290      	movs	r2, #144	; 0x90
 8007c3a:	589b      	ldr	r3, [r3, r2]
 8007c3c:	2202      	movs	r2, #2
 8007c3e:	431a      	orrs	r2, r3
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2190      	movs	r1, #144	; 0x90
 8007c44:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007c46:	23a4      	movs	r3, #164	; 0xa4
 8007c48:	18fb      	adds	r3, r7, r3
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	2208      	movs	r2, #8
 8007c4e:	4013      	ands	r3, r2
 8007c50:	d017      	beq.n	8007c82 <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c52:	23a0      	movs	r3, #160	; 0xa0
 8007c54:	18fb      	adds	r3, r7, r3
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2220      	movs	r2, #32
 8007c5a:	4013      	ands	r3, r2
 8007c5c:	d105      	bne.n	8007c6a <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007c5e:	239c      	movs	r3, #156	; 0x9c
 8007c60:	18fb      	adds	r3, r7, r3
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	4a5b      	ldr	r2, [pc, #364]	; (8007dd4 <HAL_UART_IRQHandler+0x2c0>)
 8007c66:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007c68:	d00b      	beq.n	8007c82 <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	2208      	movs	r2, #8
 8007c70:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	2290      	movs	r2, #144	; 0x90
 8007c76:	589b      	ldr	r3, [r3, r2]
 8007c78:	2208      	movs	r2, #8
 8007c7a:	431a      	orrs	r2, r3
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	2190      	movs	r1, #144	; 0x90
 8007c80:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007c82:	23a4      	movs	r3, #164	; 0xa4
 8007c84:	18fb      	adds	r3, r7, r3
 8007c86:	681a      	ldr	r2, [r3, #0]
 8007c88:	2380      	movs	r3, #128	; 0x80
 8007c8a:	011b      	lsls	r3, r3, #4
 8007c8c:	4013      	ands	r3, r2
 8007c8e:	d013      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x1a4>
 8007c90:	23a0      	movs	r3, #160	; 0xa0
 8007c92:	18fb      	adds	r3, r7, r3
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	2380      	movs	r3, #128	; 0x80
 8007c98:	04db      	lsls	r3, r3, #19
 8007c9a:	4013      	ands	r3, r2
 8007c9c:	d00c      	beq.n	8007cb8 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2280      	movs	r2, #128	; 0x80
 8007ca4:	0112      	lsls	r2, r2, #4
 8007ca6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	2290      	movs	r2, #144	; 0x90
 8007cac:	589b      	ldr	r3, [r3, r2]
 8007cae:	2220      	movs	r2, #32
 8007cb0:	431a      	orrs	r2, r3
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2190      	movs	r1, #144	; 0x90
 8007cb6:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	2290      	movs	r2, #144	; 0x90
 8007cbc:	589b      	ldr	r3, [r3, r2]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d100      	bne.n	8007cc4 <HAL_UART_IRQHandler+0x1b0>
 8007cc2:	e23d      	b.n	8008140 <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007cc4:	23a4      	movs	r3, #164	; 0xa4
 8007cc6:	18fb      	adds	r3, r7, r3
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	2220      	movs	r2, #32
 8007ccc:	4013      	ands	r3, r2
 8007cce:	d015      	beq.n	8007cfc <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007cd0:	23a0      	movs	r3, #160	; 0xa0
 8007cd2:	18fb      	adds	r3, r7, r3
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2220      	movs	r2, #32
 8007cd8:	4013      	ands	r3, r2
 8007cda:	d106      	bne.n	8007cea <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007cdc:	239c      	movs	r3, #156	; 0x9c
 8007cde:	18fb      	adds	r3, r7, r3
 8007ce0:	681a      	ldr	r2, [r3, #0]
 8007ce2:	2380      	movs	r3, #128	; 0x80
 8007ce4:	055b      	lsls	r3, r3, #21
 8007ce6:	4013      	ands	r3, r2
 8007ce8:	d008      	beq.n	8007cfc <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d004      	beq.n	8007cfc <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007cf6:	687a      	ldr	r2, [r7, #4]
 8007cf8:	0010      	movs	r0, r2
 8007cfa:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2290      	movs	r2, #144	; 0x90
 8007d00:	589b      	ldr	r3, [r3, r2]
 8007d02:	2194      	movs	r1, #148	; 0x94
 8007d04:	187a      	adds	r2, r7, r1
 8007d06:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	689b      	ldr	r3, [r3, #8]
 8007d0e:	2240      	movs	r2, #64	; 0x40
 8007d10:	4013      	ands	r3, r2
 8007d12:	2b40      	cmp	r3, #64	; 0x40
 8007d14:	d004      	beq.n	8007d20 <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007d16:	187b      	adds	r3, r7, r1
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	2228      	movs	r2, #40	; 0x28
 8007d1c:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007d1e:	d04c      	beq.n	8007dba <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	0018      	movs	r0, r3
 8007d24:	f000 ffe4 	bl	8008cf0 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	689b      	ldr	r3, [r3, #8]
 8007d2e:	2240      	movs	r2, #64	; 0x40
 8007d30:	4013      	ands	r3, r2
 8007d32:	2b40      	cmp	r3, #64	; 0x40
 8007d34:	d13c      	bne.n	8007db0 <HAL_UART_IRQHandler+0x29c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d36:	f3ef 8310 	mrs	r3, PRIMASK
 8007d3a:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8007d3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d3e:	2090      	movs	r0, #144	; 0x90
 8007d40:	183a      	adds	r2, r7, r0
 8007d42:	6013      	str	r3, [r2, #0]
 8007d44:	2301      	movs	r3, #1
 8007d46:	667b      	str	r3, [r7, #100]	; 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d48:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007d4a:	f383 8810 	msr	PRIMASK, r3
}
 8007d4e:	46c0      	nop			; (mov r8, r8)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	689a      	ldr	r2, [r3, #8]
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	2140      	movs	r1, #64	; 0x40
 8007d5c:	438a      	bics	r2, r1
 8007d5e:	609a      	str	r2, [r3, #8]
 8007d60:	183b      	adds	r3, r7, r0
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d66:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8007d68:	f383 8810 	msr	PRIMASK, r3
}
 8007d6c:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	2280      	movs	r2, #128	; 0x80
 8007d72:	589b      	ldr	r3, [r3, r2]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d016      	beq.n	8007da6 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2280      	movs	r2, #128	; 0x80
 8007d7c:	589b      	ldr	r3, [r3, r2]
 8007d7e:	4a17      	ldr	r2, [pc, #92]	; (8007ddc <HAL_UART_IRQHandler+0x2c8>)
 8007d80:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	2280      	movs	r2, #128	; 0x80
 8007d86:	589b      	ldr	r3, [r3, r2]
 8007d88:	0018      	movs	r0, r3
 8007d8a:	f7fe fa41 	bl	8006210 <HAL_DMA_Abort_IT>
 8007d8e:	1e03      	subs	r3, r0, #0
 8007d90:	d01c      	beq.n	8007dcc <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	2280      	movs	r2, #128	; 0x80
 8007d96:	589b      	ldr	r3, [r3, r2]
 8007d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d9a:	687a      	ldr	r2, [r7, #4]
 8007d9c:	2180      	movs	r1, #128	; 0x80
 8007d9e:	5852      	ldr	r2, [r2, r1]
 8007da0:	0010      	movs	r0, r2
 8007da2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007da4:	e012      	b.n	8007dcc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	0018      	movs	r0, r3
 8007daa:	f000 f9e9 	bl	8008180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dae:	e00d      	b.n	8007dcc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	0018      	movs	r0, r3
 8007db4:	f000 f9e4 	bl	8008180 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007db8:	e008      	b.n	8007dcc <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	0018      	movs	r0, r3
 8007dbe:	f000 f9df 	bl	8008180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	2290      	movs	r2, #144	; 0x90
 8007dc6:	2100      	movs	r1, #0
 8007dc8:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8007dca:	e1b9      	b.n	8008140 <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dcc:	46c0      	nop			; (mov r8, r8)
    return;
 8007dce:	e1b7      	b.n	8008140 <HAL_UART_IRQHandler+0x62c>
 8007dd0:	0000080f 	.word	0x0000080f
 8007dd4:	10000001 	.word	0x10000001
 8007dd8:	04000120 	.word	0x04000120
 8007ddc:	08008dbd 	.word	0x08008dbd

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d000      	beq.n	8007dea <HAL_UART_IRQHandler+0x2d6>
 8007de8:	e13e      	b.n	8008068 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007dea:	23a4      	movs	r3, #164	; 0xa4
 8007dec:	18fb      	adds	r3, r7, r3
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2210      	movs	r2, #16
 8007df2:	4013      	ands	r3, r2
 8007df4:	d100      	bne.n	8007df8 <HAL_UART_IRQHandler+0x2e4>
 8007df6:	e137      	b.n	8008068 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007df8:	23a0      	movs	r3, #160	; 0xa0
 8007dfa:	18fb      	adds	r3, r7, r3
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	2210      	movs	r2, #16
 8007e00:	4013      	ands	r3, r2
 8007e02:	d100      	bne.n	8007e06 <HAL_UART_IRQHandler+0x2f2>
 8007e04:	e130      	b.n	8008068 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	2210      	movs	r2, #16
 8007e0c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	689b      	ldr	r3, [r3, #8]
 8007e14:	2240      	movs	r2, #64	; 0x40
 8007e16:	4013      	ands	r3, r2
 8007e18:	2b40      	cmp	r3, #64	; 0x40
 8007e1a:	d000      	beq.n	8007e1e <HAL_UART_IRQHandler+0x30a>
 8007e1c:	e0a4      	b.n	8007f68 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2280      	movs	r2, #128	; 0x80
 8007e22:	589b      	ldr	r3, [r3, r2]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	685a      	ldr	r2, [r3, #4]
 8007e28:	217e      	movs	r1, #126	; 0x7e
 8007e2a:	187b      	adds	r3, r7, r1
 8007e2c:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8007e2e:	187b      	adds	r3, r7, r1
 8007e30:	881b      	ldrh	r3, [r3, #0]
 8007e32:	2b00      	cmp	r3, #0
 8007e34:	d100      	bne.n	8007e38 <HAL_UART_IRQHandler+0x324>
 8007e36:	e185      	b.n	8008144 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	225c      	movs	r2, #92	; 0x5c
 8007e3c:	5a9b      	ldrh	r3, [r3, r2]
 8007e3e:	187a      	adds	r2, r7, r1
 8007e40:	8812      	ldrh	r2, [r2, #0]
 8007e42:	429a      	cmp	r2, r3
 8007e44:	d300      	bcc.n	8007e48 <HAL_UART_IRQHandler+0x334>
 8007e46:	e17d      	b.n	8008144 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	187a      	adds	r2, r7, r1
 8007e4c:	215e      	movs	r1, #94	; 0x5e
 8007e4e:	8812      	ldrh	r2, [r2, #0]
 8007e50:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	2280      	movs	r2, #128	; 0x80
 8007e56:	589b      	ldr	r3, [r3, r2]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	2220      	movs	r2, #32
 8007e5e:	4013      	ands	r3, r2
 8007e60:	d170      	bne.n	8007f44 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e62:	f3ef 8310 	mrs	r3, PRIMASK
 8007e66:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007e68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e6a:	67bb      	str	r3, [r7, #120]	; 0x78
 8007e6c:	2301      	movs	r3, #1
 8007e6e:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e72:	f383 8810 	msr	PRIMASK, r3
}
 8007e76:	46c0      	nop			; (mov r8, r8)
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	681a      	ldr	r2, [r3, #0]
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	49b4      	ldr	r1, [pc, #720]	; (8008154 <HAL_UART_IRQHandler+0x640>)
 8007e84:	400a      	ands	r2, r1
 8007e86:	601a      	str	r2, [r3, #0]
 8007e88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007e8a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e8e:	f383 8810 	msr	PRIMASK, r3
}
 8007e92:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e94:	f3ef 8310 	mrs	r3, PRIMASK
 8007e98:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8007e9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e9c:	677b      	str	r3, [r7, #116]	; 0x74
 8007e9e:	2301      	movs	r3, #1
 8007ea0:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ea2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007ea4:	f383 8810 	msr	PRIMASK, r3
}
 8007ea8:	46c0      	nop			; (mov r8, r8)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	689a      	ldr	r2, [r3, #8]
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	2101      	movs	r1, #1
 8007eb6:	438a      	bics	r2, r1
 8007eb8:	609a      	str	r2, [r3, #8]
 8007eba:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007ebc:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ebe:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007ec0:	f383 8810 	msr	PRIMASK, r3
}
 8007ec4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec6:	f3ef 8310 	mrs	r3, PRIMASK
 8007eca:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8007ecc:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ece:	673b      	str	r3, [r7, #112]	; 0x70
 8007ed0:	2301      	movs	r3, #1
 8007ed2:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007ed6:	f383 8810 	msr	PRIMASK, r3
}
 8007eda:	46c0      	nop			; (mov r8, r8)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	689a      	ldr	r2, [r3, #8]
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	2140      	movs	r1, #64	; 0x40
 8007ee8:	438a      	bics	r2, r1
 8007eea:	609a      	str	r2, [r3, #8]
 8007eec:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007eee:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ef0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007ef2:	f383 8810 	msr	PRIMASK, r3
}
 8007ef6:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	228c      	movs	r2, #140	; 0x8c
 8007efc:	2120      	movs	r1, #32
 8007efe:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	2200      	movs	r2, #0
 8007f04:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f06:	f3ef 8310 	mrs	r3, PRIMASK
 8007f0a:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8007f0c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f0e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f10:	2301      	movs	r3, #1
 8007f12:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007f16:	f383 8810 	msr	PRIMASK, r3
}
 8007f1a:	46c0      	nop			; (mov r8, r8)
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	681a      	ldr	r2, [r3, #0]
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	2110      	movs	r1, #16
 8007f28:	438a      	bics	r2, r1
 8007f2a:	601a      	str	r2, [r3, #0]
 8007f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007f2e:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f30:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f32:	f383 8810 	msr	PRIMASK, r3
}
 8007f36:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	2280      	movs	r2, #128	; 0x80
 8007f3c:	589b      	ldr	r3, [r3, r2]
 8007f3e:	0018      	movs	r0, r3
 8007f40:	f7fe f904 	bl	800614c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2202      	movs	r2, #2
 8007f48:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	225c      	movs	r2, #92	; 0x5c
 8007f4e:	5a9a      	ldrh	r2, [r3, r2]
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	215e      	movs	r1, #94	; 0x5e
 8007f54:	5a5b      	ldrh	r3, [r3, r1]
 8007f56:	b29b      	uxth	r3, r3
 8007f58:	1ad3      	subs	r3, r2, r3
 8007f5a:	b29a      	uxth	r2, r3
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	0011      	movs	r1, r2
 8007f60:	0018      	movs	r0, r3
 8007f62:	f7fd fb63 	bl	800562c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f66:	e0ed      	b.n	8008144 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	225c      	movs	r2, #92	; 0x5c
 8007f6c:	5a99      	ldrh	r1, [r3, r2]
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	225e      	movs	r2, #94	; 0x5e
 8007f72:	5a9b      	ldrh	r3, [r3, r2]
 8007f74:	b29a      	uxth	r2, r3
 8007f76:	208e      	movs	r0, #142	; 0x8e
 8007f78:	183b      	adds	r3, r7, r0
 8007f7a:	1a8a      	subs	r2, r1, r2
 8007f7c:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	225e      	movs	r2, #94	; 0x5e
 8007f82:	5a9b      	ldrh	r3, [r3, r2]
 8007f84:	b29b      	uxth	r3, r3
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d100      	bne.n	8007f8c <HAL_UART_IRQHandler+0x478>
 8007f8a:	e0dd      	b.n	8008148 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8007f8c:	183b      	adds	r3, r7, r0
 8007f8e:	881b      	ldrh	r3, [r3, #0]
 8007f90:	2b00      	cmp	r3, #0
 8007f92:	d100      	bne.n	8007f96 <HAL_UART_IRQHandler+0x482>
 8007f94:	e0d8      	b.n	8008148 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f96:	f3ef 8310 	mrs	r3, PRIMASK
 8007f9a:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f9c:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007f9e:	2488      	movs	r4, #136	; 0x88
 8007fa0:	193a      	adds	r2, r7, r4
 8007fa2:	6013      	str	r3, [r2, #0]
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa8:	693b      	ldr	r3, [r7, #16]
 8007faa:	f383 8810 	msr	PRIMASK, r3
}
 8007fae:	46c0      	nop			; (mov r8, r8)
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	681a      	ldr	r2, [r3, #0]
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	681b      	ldr	r3, [r3, #0]
 8007fba:	4967      	ldr	r1, [pc, #412]	; (8008158 <HAL_UART_IRQHandler+0x644>)
 8007fbc:	400a      	ands	r2, r1
 8007fbe:	601a      	str	r2, [r3, #0]
 8007fc0:	193b      	adds	r3, r7, r4
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fc6:	697b      	ldr	r3, [r7, #20]
 8007fc8:	f383 8810 	msr	PRIMASK, r3
}
 8007fcc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007fce:	f3ef 8310 	mrs	r3, PRIMASK
 8007fd2:	61bb      	str	r3, [r7, #24]
  return(result);
 8007fd4:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007fd6:	2484      	movs	r4, #132	; 0x84
 8007fd8:	193a      	adds	r2, r7, r4
 8007fda:	6013      	str	r3, [r2, #0]
 8007fdc:	2301      	movs	r3, #1
 8007fde:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fe0:	69fb      	ldr	r3, [r7, #28]
 8007fe2:	f383 8810 	msr	PRIMASK, r3
}
 8007fe6:	46c0      	nop			; (mov r8, r8)
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	689a      	ldr	r2, [r3, #8]
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	495a      	ldr	r1, [pc, #360]	; (800815c <HAL_UART_IRQHandler+0x648>)
 8007ff4:	400a      	ands	r2, r1
 8007ff6:	609a      	str	r2, [r3, #8]
 8007ff8:	193b      	adds	r3, r7, r4
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ffe:	6a3b      	ldr	r3, [r7, #32]
 8008000:	f383 8810 	msr	PRIMASK, r3
}
 8008004:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	228c      	movs	r2, #140	; 0x8c
 800800a:	2120      	movs	r1, #32
 800800c:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	2200      	movs	r2, #0
 8008012:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2200      	movs	r2, #0
 8008018:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800801a:	f3ef 8310 	mrs	r3, PRIMASK
 800801e:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008020:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008022:	2480      	movs	r4, #128	; 0x80
 8008024:	193a      	adds	r2, r7, r4
 8008026:	6013      	str	r3, [r2, #0]
 8008028:	2301      	movs	r3, #1
 800802a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800802c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800802e:	f383 8810 	msr	PRIMASK, r3
}
 8008032:	46c0      	nop			; (mov r8, r8)
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	681b      	ldr	r3, [r3, #0]
 8008038:	681a      	ldr	r2, [r3, #0]
 800803a:	687b      	ldr	r3, [r7, #4]
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	2110      	movs	r1, #16
 8008040:	438a      	bics	r2, r1
 8008042:	601a      	str	r2, [r3, #0]
 8008044:	193b      	adds	r3, r7, r4
 8008046:	681b      	ldr	r3, [r3, #0]
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800804a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800804c:	f383 8810 	msr	PRIMASK, r3
}
 8008050:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	2202      	movs	r2, #2
 8008056:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008058:	183b      	adds	r3, r7, r0
 800805a:	881a      	ldrh	r2, [r3, #0]
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	0011      	movs	r1, r2
 8008060:	0018      	movs	r0, r3
 8008062:	f7fd fae3 	bl	800562c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008066:	e06f      	b.n	8008148 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008068:	23a4      	movs	r3, #164	; 0xa4
 800806a:	18fb      	adds	r3, r7, r3
 800806c:	681a      	ldr	r2, [r3, #0]
 800806e:	2380      	movs	r3, #128	; 0x80
 8008070:	035b      	lsls	r3, r3, #13
 8008072:	4013      	ands	r3, r2
 8008074:	d010      	beq.n	8008098 <HAL_UART_IRQHandler+0x584>
 8008076:	239c      	movs	r3, #156	; 0x9c
 8008078:	18fb      	adds	r3, r7, r3
 800807a:	681a      	ldr	r2, [r3, #0]
 800807c:	2380      	movs	r3, #128	; 0x80
 800807e:	03db      	lsls	r3, r3, #15
 8008080:	4013      	ands	r3, r2
 8008082:	d009      	beq.n	8008098 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2280      	movs	r2, #128	; 0x80
 800808a:	0352      	lsls	r2, r2, #13
 800808c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	0018      	movs	r0, r3
 8008092:	f001 fbe7 	bl	8009864 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008096:	e05a      	b.n	800814e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008098:	23a4      	movs	r3, #164	; 0xa4
 800809a:	18fb      	adds	r3, r7, r3
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	2280      	movs	r2, #128	; 0x80
 80080a0:	4013      	ands	r3, r2
 80080a2:	d016      	beq.n	80080d2 <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80080a4:	23a0      	movs	r3, #160	; 0xa0
 80080a6:	18fb      	adds	r3, r7, r3
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	2280      	movs	r2, #128	; 0x80
 80080ac:	4013      	ands	r3, r2
 80080ae:	d106      	bne.n	80080be <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80080b0:	239c      	movs	r3, #156	; 0x9c
 80080b2:	18fb      	adds	r3, r7, r3
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	2380      	movs	r3, #128	; 0x80
 80080b8:	041b      	lsls	r3, r3, #16
 80080ba:	4013      	ands	r3, r2
 80080bc:	d009      	beq.n	80080d2 <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d042      	beq.n	800814c <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80080ca:	687a      	ldr	r2, [r7, #4]
 80080cc:	0010      	movs	r0, r2
 80080ce:	4798      	blx	r3
    }
    return;
 80080d0:	e03c      	b.n	800814c <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80080d2:	23a4      	movs	r3, #164	; 0xa4
 80080d4:	18fb      	adds	r3, r7, r3
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	2240      	movs	r2, #64	; 0x40
 80080da:	4013      	ands	r3, r2
 80080dc:	d00a      	beq.n	80080f4 <HAL_UART_IRQHandler+0x5e0>
 80080de:	23a0      	movs	r3, #160	; 0xa0
 80080e0:	18fb      	adds	r3, r7, r3
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	2240      	movs	r2, #64	; 0x40
 80080e6:	4013      	ands	r3, r2
 80080e8:	d004      	beq.n	80080f4 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	0018      	movs	r0, r3
 80080ee:	f000 fe7c 	bl	8008dea <UART_EndTransmit_IT>
    return;
 80080f2:	e02c      	b.n	800814e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80080f4:	23a4      	movs	r3, #164	; 0xa4
 80080f6:	18fb      	adds	r3, r7, r3
 80080f8:	681a      	ldr	r2, [r3, #0]
 80080fa:	2380      	movs	r3, #128	; 0x80
 80080fc:	041b      	lsls	r3, r3, #16
 80080fe:	4013      	ands	r3, r2
 8008100:	d00b      	beq.n	800811a <HAL_UART_IRQHandler+0x606>
 8008102:	23a0      	movs	r3, #160	; 0xa0
 8008104:	18fb      	adds	r3, r7, r3
 8008106:	681a      	ldr	r2, [r3, #0]
 8008108:	2380      	movs	r3, #128	; 0x80
 800810a:	05db      	lsls	r3, r3, #23
 800810c:	4013      	ands	r3, r2
 800810e:	d004      	beq.n	800811a <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8008110:	687b      	ldr	r3, [r7, #4]
 8008112:	0018      	movs	r0, r3
 8008114:	f001 fbb6 	bl	8009884 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008118:	e019      	b.n	800814e <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800811a:	23a4      	movs	r3, #164	; 0xa4
 800811c:	18fb      	adds	r3, r7, r3
 800811e:	681a      	ldr	r2, [r3, #0]
 8008120:	2380      	movs	r3, #128	; 0x80
 8008122:	045b      	lsls	r3, r3, #17
 8008124:	4013      	ands	r3, r2
 8008126:	d012      	beq.n	800814e <HAL_UART_IRQHandler+0x63a>
 8008128:	23a0      	movs	r3, #160	; 0xa0
 800812a:	18fb      	adds	r3, r7, r3
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	2b00      	cmp	r3, #0
 8008130:	da0d      	bge.n	800814e <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	0018      	movs	r0, r3
 8008136:	f001 fb9d 	bl	8009874 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800813a:	e008      	b.n	800814e <HAL_UART_IRQHandler+0x63a>
      return;
 800813c:	46c0      	nop			; (mov r8, r8)
 800813e:	e006      	b.n	800814e <HAL_UART_IRQHandler+0x63a>
    return;
 8008140:	46c0      	nop			; (mov r8, r8)
 8008142:	e004      	b.n	800814e <HAL_UART_IRQHandler+0x63a>
      return;
 8008144:	46c0      	nop			; (mov r8, r8)
 8008146:	e002      	b.n	800814e <HAL_UART_IRQHandler+0x63a>
      return;
 8008148:	46c0      	nop			; (mov r8, r8)
 800814a:	e000      	b.n	800814e <HAL_UART_IRQHandler+0x63a>
    return;
 800814c:	46c0      	nop			; (mov r8, r8)
  }
}
 800814e:	46bd      	mov	sp, r7
 8008150:	b02a      	add	sp, #168	; 0xa8
 8008152:	bdb0      	pop	{r4, r5, r7, pc}
 8008154:	fffffeff 	.word	0xfffffeff
 8008158:	fffffedf 	.word	0xfffffedf
 800815c:	effffffe 	.word	0xeffffffe

08008160 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008168:	46c0      	nop			; (mov r8, r8)
 800816a:	46bd      	mov	sp, r7
 800816c:	b002      	add	sp, #8
 800816e:	bd80      	pop	{r7, pc}

08008170 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008170:	b580      	push	{r7, lr}
 8008172:	b082      	sub	sp, #8
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8008178:	46c0      	nop			; (mov r8, r8)
 800817a:	46bd      	mov	sp, r7
 800817c:	b002      	add	sp, #8
 800817e:	bd80      	pop	{r7, pc}

08008180 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008180:	b580      	push	{r7, lr}
 8008182:	b082      	sub	sp, #8
 8008184:	af00      	add	r7, sp, #0
 8008186:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008188:	46c0      	nop			; (mov r8, r8)
 800818a:	46bd      	mov	sp, r7
 800818c:	b002      	add	sp, #8
 800818e:	bd80      	pop	{r7, pc}

08008190 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008190:	b5b0      	push	{r4, r5, r7, lr}
 8008192:	b090      	sub	sp, #64	; 0x40
 8008194:	af00      	add	r7, sp, #0
 8008196:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008198:	231a      	movs	r3, #26
 800819a:	2220      	movs	r2, #32
 800819c:	189b      	adds	r3, r3, r2
 800819e:	19db      	adds	r3, r3, r7
 80081a0:	2200      	movs	r2, #0
 80081a2:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80081a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a6:	689a      	ldr	r2, [r3, #8]
 80081a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081aa:	691b      	ldr	r3, [r3, #16]
 80081ac:	431a      	orrs	r2, r3
 80081ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b0:	695b      	ldr	r3, [r3, #20]
 80081b2:	431a      	orrs	r2, r3
 80081b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081b6:	69db      	ldr	r3, [r3, #28]
 80081b8:	4313      	orrs	r3, r2
 80081ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80081bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	4aaf      	ldr	r2, [pc, #700]	; (8008480 <UART_SetConfig+0x2f0>)
 80081c4:	4013      	ands	r3, r2
 80081c6:	0019      	movs	r1, r3
 80081c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ca:	681a      	ldr	r2, [r3, #0]
 80081cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80081ce:	430b      	orrs	r3, r1
 80081d0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80081d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	685b      	ldr	r3, [r3, #4]
 80081d8:	4aaa      	ldr	r2, [pc, #680]	; (8008484 <UART_SetConfig+0x2f4>)
 80081da:	4013      	ands	r3, r2
 80081dc:	0018      	movs	r0, r3
 80081de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e0:	68d9      	ldr	r1, [r3, #12]
 80081e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081e4:	681a      	ldr	r2, [r3, #0]
 80081e6:	0003      	movs	r3, r0
 80081e8:	430b      	orrs	r3, r1
 80081ea:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80081ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081ee:	699b      	ldr	r3, [r3, #24]
 80081f0:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80081f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081f4:	681b      	ldr	r3, [r3, #0]
 80081f6:	4aa4      	ldr	r2, [pc, #656]	; (8008488 <UART_SetConfig+0x2f8>)
 80081f8:	4293      	cmp	r3, r2
 80081fa:	d004      	beq.n	8008206 <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80081fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081fe:	6a1b      	ldr	r3, [r3, #32]
 8008200:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008202:	4313      	orrs	r3, r2
 8008204:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008208:	681b      	ldr	r3, [r3, #0]
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	4a9f      	ldr	r2, [pc, #636]	; (800848c <UART_SetConfig+0x2fc>)
 800820e:	4013      	ands	r3, r2
 8008210:	0019      	movs	r1, r3
 8008212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008214:	681a      	ldr	r2, [r3, #0]
 8008216:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008218:	430b      	orrs	r3, r1
 800821a:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800821c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008222:	220f      	movs	r2, #15
 8008224:	4393      	bics	r3, r2
 8008226:	0018      	movs	r0, r3
 8008228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800822c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800822e:	681a      	ldr	r2, [r3, #0]
 8008230:	0003      	movs	r3, r0
 8008232:	430b      	orrs	r3, r1
 8008234:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4a95      	ldr	r2, [pc, #596]	; (8008490 <UART_SetConfig+0x300>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d131      	bne.n	80082a4 <UART_SetConfig+0x114>
 8008240:	4b94      	ldr	r3, [pc, #592]	; (8008494 <UART_SetConfig+0x304>)
 8008242:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008244:	2203      	movs	r2, #3
 8008246:	4013      	ands	r3, r2
 8008248:	2b03      	cmp	r3, #3
 800824a:	d01d      	beq.n	8008288 <UART_SetConfig+0xf8>
 800824c:	d823      	bhi.n	8008296 <UART_SetConfig+0x106>
 800824e:	2b02      	cmp	r3, #2
 8008250:	d00c      	beq.n	800826c <UART_SetConfig+0xdc>
 8008252:	d820      	bhi.n	8008296 <UART_SetConfig+0x106>
 8008254:	2b00      	cmp	r3, #0
 8008256:	d002      	beq.n	800825e <UART_SetConfig+0xce>
 8008258:	2b01      	cmp	r3, #1
 800825a:	d00e      	beq.n	800827a <UART_SetConfig+0xea>
 800825c:	e01b      	b.n	8008296 <UART_SetConfig+0x106>
 800825e:	231b      	movs	r3, #27
 8008260:	2220      	movs	r2, #32
 8008262:	189b      	adds	r3, r3, r2
 8008264:	19db      	adds	r3, r3, r7
 8008266:	2200      	movs	r2, #0
 8008268:	701a      	strb	r2, [r3, #0]
 800826a:	e0b4      	b.n	80083d6 <UART_SetConfig+0x246>
 800826c:	231b      	movs	r3, #27
 800826e:	2220      	movs	r2, #32
 8008270:	189b      	adds	r3, r3, r2
 8008272:	19db      	adds	r3, r3, r7
 8008274:	2202      	movs	r2, #2
 8008276:	701a      	strb	r2, [r3, #0]
 8008278:	e0ad      	b.n	80083d6 <UART_SetConfig+0x246>
 800827a:	231b      	movs	r3, #27
 800827c:	2220      	movs	r2, #32
 800827e:	189b      	adds	r3, r3, r2
 8008280:	19db      	adds	r3, r3, r7
 8008282:	2204      	movs	r2, #4
 8008284:	701a      	strb	r2, [r3, #0]
 8008286:	e0a6      	b.n	80083d6 <UART_SetConfig+0x246>
 8008288:	231b      	movs	r3, #27
 800828a:	2220      	movs	r2, #32
 800828c:	189b      	adds	r3, r3, r2
 800828e:	19db      	adds	r3, r3, r7
 8008290:	2208      	movs	r2, #8
 8008292:	701a      	strb	r2, [r3, #0]
 8008294:	e09f      	b.n	80083d6 <UART_SetConfig+0x246>
 8008296:	231b      	movs	r3, #27
 8008298:	2220      	movs	r2, #32
 800829a:	189b      	adds	r3, r3, r2
 800829c:	19db      	adds	r3, r3, r7
 800829e:	2210      	movs	r2, #16
 80082a0:	701a      	strb	r2, [r3, #0]
 80082a2:	e098      	b.n	80083d6 <UART_SetConfig+0x246>
 80082a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a7b      	ldr	r2, [pc, #492]	; (8008498 <UART_SetConfig+0x308>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d131      	bne.n	8008312 <UART_SetConfig+0x182>
 80082ae:	4b79      	ldr	r3, [pc, #484]	; (8008494 <UART_SetConfig+0x304>)
 80082b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80082b2:	220c      	movs	r2, #12
 80082b4:	4013      	ands	r3, r2
 80082b6:	2b0c      	cmp	r3, #12
 80082b8:	d01d      	beq.n	80082f6 <UART_SetConfig+0x166>
 80082ba:	d823      	bhi.n	8008304 <UART_SetConfig+0x174>
 80082bc:	2b08      	cmp	r3, #8
 80082be:	d00c      	beq.n	80082da <UART_SetConfig+0x14a>
 80082c0:	d820      	bhi.n	8008304 <UART_SetConfig+0x174>
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d002      	beq.n	80082cc <UART_SetConfig+0x13c>
 80082c6:	2b04      	cmp	r3, #4
 80082c8:	d00e      	beq.n	80082e8 <UART_SetConfig+0x158>
 80082ca:	e01b      	b.n	8008304 <UART_SetConfig+0x174>
 80082cc:	231b      	movs	r3, #27
 80082ce:	2220      	movs	r2, #32
 80082d0:	189b      	adds	r3, r3, r2
 80082d2:	19db      	adds	r3, r3, r7
 80082d4:	2200      	movs	r2, #0
 80082d6:	701a      	strb	r2, [r3, #0]
 80082d8:	e07d      	b.n	80083d6 <UART_SetConfig+0x246>
 80082da:	231b      	movs	r3, #27
 80082dc:	2220      	movs	r2, #32
 80082de:	189b      	adds	r3, r3, r2
 80082e0:	19db      	adds	r3, r3, r7
 80082e2:	2202      	movs	r2, #2
 80082e4:	701a      	strb	r2, [r3, #0]
 80082e6:	e076      	b.n	80083d6 <UART_SetConfig+0x246>
 80082e8:	231b      	movs	r3, #27
 80082ea:	2220      	movs	r2, #32
 80082ec:	189b      	adds	r3, r3, r2
 80082ee:	19db      	adds	r3, r3, r7
 80082f0:	2204      	movs	r2, #4
 80082f2:	701a      	strb	r2, [r3, #0]
 80082f4:	e06f      	b.n	80083d6 <UART_SetConfig+0x246>
 80082f6:	231b      	movs	r3, #27
 80082f8:	2220      	movs	r2, #32
 80082fa:	189b      	adds	r3, r3, r2
 80082fc:	19db      	adds	r3, r3, r7
 80082fe:	2208      	movs	r2, #8
 8008300:	701a      	strb	r2, [r3, #0]
 8008302:	e068      	b.n	80083d6 <UART_SetConfig+0x246>
 8008304:	231b      	movs	r3, #27
 8008306:	2220      	movs	r2, #32
 8008308:	189b      	adds	r3, r3, r2
 800830a:	19db      	adds	r3, r3, r7
 800830c:	2210      	movs	r2, #16
 800830e:	701a      	strb	r2, [r3, #0]
 8008310:	e061      	b.n	80083d6 <UART_SetConfig+0x246>
 8008312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	4a61      	ldr	r2, [pc, #388]	; (800849c <UART_SetConfig+0x30c>)
 8008318:	4293      	cmp	r3, r2
 800831a:	d106      	bne.n	800832a <UART_SetConfig+0x19a>
 800831c:	231b      	movs	r3, #27
 800831e:	2220      	movs	r2, #32
 8008320:	189b      	adds	r3, r3, r2
 8008322:	19db      	adds	r3, r3, r7
 8008324:	2200      	movs	r2, #0
 8008326:	701a      	strb	r2, [r3, #0]
 8008328:	e055      	b.n	80083d6 <UART_SetConfig+0x246>
 800832a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4a5c      	ldr	r2, [pc, #368]	; (80084a0 <UART_SetConfig+0x310>)
 8008330:	4293      	cmp	r3, r2
 8008332:	d106      	bne.n	8008342 <UART_SetConfig+0x1b2>
 8008334:	231b      	movs	r3, #27
 8008336:	2220      	movs	r2, #32
 8008338:	189b      	adds	r3, r3, r2
 800833a:	19db      	adds	r3, r3, r7
 800833c:	2200      	movs	r2, #0
 800833e:	701a      	strb	r2, [r3, #0]
 8008340:	e049      	b.n	80083d6 <UART_SetConfig+0x246>
 8008342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	4a50      	ldr	r2, [pc, #320]	; (8008488 <UART_SetConfig+0x2f8>)
 8008348:	4293      	cmp	r3, r2
 800834a:	d13e      	bne.n	80083ca <UART_SetConfig+0x23a>
 800834c:	4b51      	ldr	r3, [pc, #324]	; (8008494 <UART_SetConfig+0x304>)
 800834e:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8008350:	23c0      	movs	r3, #192	; 0xc0
 8008352:	011b      	lsls	r3, r3, #4
 8008354:	4013      	ands	r3, r2
 8008356:	22c0      	movs	r2, #192	; 0xc0
 8008358:	0112      	lsls	r2, r2, #4
 800835a:	4293      	cmp	r3, r2
 800835c:	d027      	beq.n	80083ae <UART_SetConfig+0x21e>
 800835e:	22c0      	movs	r2, #192	; 0xc0
 8008360:	0112      	lsls	r2, r2, #4
 8008362:	4293      	cmp	r3, r2
 8008364:	d82a      	bhi.n	80083bc <UART_SetConfig+0x22c>
 8008366:	2280      	movs	r2, #128	; 0x80
 8008368:	0112      	lsls	r2, r2, #4
 800836a:	4293      	cmp	r3, r2
 800836c:	d011      	beq.n	8008392 <UART_SetConfig+0x202>
 800836e:	2280      	movs	r2, #128	; 0x80
 8008370:	0112      	lsls	r2, r2, #4
 8008372:	4293      	cmp	r3, r2
 8008374:	d822      	bhi.n	80083bc <UART_SetConfig+0x22c>
 8008376:	2b00      	cmp	r3, #0
 8008378:	d004      	beq.n	8008384 <UART_SetConfig+0x1f4>
 800837a:	2280      	movs	r2, #128	; 0x80
 800837c:	00d2      	lsls	r2, r2, #3
 800837e:	4293      	cmp	r3, r2
 8008380:	d00e      	beq.n	80083a0 <UART_SetConfig+0x210>
 8008382:	e01b      	b.n	80083bc <UART_SetConfig+0x22c>
 8008384:	231b      	movs	r3, #27
 8008386:	2220      	movs	r2, #32
 8008388:	189b      	adds	r3, r3, r2
 800838a:	19db      	adds	r3, r3, r7
 800838c:	2200      	movs	r2, #0
 800838e:	701a      	strb	r2, [r3, #0]
 8008390:	e021      	b.n	80083d6 <UART_SetConfig+0x246>
 8008392:	231b      	movs	r3, #27
 8008394:	2220      	movs	r2, #32
 8008396:	189b      	adds	r3, r3, r2
 8008398:	19db      	adds	r3, r3, r7
 800839a:	2202      	movs	r2, #2
 800839c:	701a      	strb	r2, [r3, #0]
 800839e:	e01a      	b.n	80083d6 <UART_SetConfig+0x246>
 80083a0:	231b      	movs	r3, #27
 80083a2:	2220      	movs	r2, #32
 80083a4:	189b      	adds	r3, r3, r2
 80083a6:	19db      	adds	r3, r3, r7
 80083a8:	2204      	movs	r2, #4
 80083aa:	701a      	strb	r2, [r3, #0]
 80083ac:	e013      	b.n	80083d6 <UART_SetConfig+0x246>
 80083ae:	231b      	movs	r3, #27
 80083b0:	2220      	movs	r2, #32
 80083b2:	189b      	adds	r3, r3, r2
 80083b4:	19db      	adds	r3, r3, r7
 80083b6:	2208      	movs	r2, #8
 80083b8:	701a      	strb	r2, [r3, #0]
 80083ba:	e00c      	b.n	80083d6 <UART_SetConfig+0x246>
 80083bc:	231b      	movs	r3, #27
 80083be:	2220      	movs	r2, #32
 80083c0:	189b      	adds	r3, r3, r2
 80083c2:	19db      	adds	r3, r3, r7
 80083c4:	2210      	movs	r2, #16
 80083c6:	701a      	strb	r2, [r3, #0]
 80083c8:	e005      	b.n	80083d6 <UART_SetConfig+0x246>
 80083ca:	231b      	movs	r3, #27
 80083cc:	2220      	movs	r2, #32
 80083ce:	189b      	adds	r3, r3, r2
 80083d0:	19db      	adds	r3, r3, r7
 80083d2:	2210      	movs	r2, #16
 80083d4:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80083d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d8:	681b      	ldr	r3, [r3, #0]
 80083da:	4a2b      	ldr	r2, [pc, #172]	; (8008488 <UART_SetConfig+0x2f8>)
 80083dc:	4293      	cmp	r3, r2
 80083de:	d000      	beq.n	80083e2 <UART_SetConfig+0x252>
 80083e0:	e0a9      	b.n	8008536 <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80083e2:	231b      	movs	r3, #27
 80083e4:	2220      	movs	r2, #32
 80083e6:	189b      	adds	r3, r3, r2
 80083e8:	19db      	adds	r3, r3, r7
 80083ea:	781b      	ldrb	r3, [r3, #0]
 80083ec:	2b08      	cmp	r3, #8
 80083ee:	d015      	beq.n	800841c <UART_SetConfig+0x28c>
 80083f0:	dc18      	bgt.n	8008424 <UART_SetConfig+0x294>
 80083f2:	2b04      	cmp	r3, #4
 80083f4:	d00d      	beq.n	8008412 <UART_SetConfig+0x282>
 80083f6:	dc15      	bgt.n	8008424 <UART_SetConfig+0x294>
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d002      	beq.n	8008402 <UART_SetConfig+0x272>
 80083fc:	2b02      	cmp	r3, #2
 80083fe:	d005      	beq.n	800840c <UART_SetConfig+0x27c>
 8008400:	e010      	b.n	8008424 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008402:	f7fe fe0b 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 8008406:	0003      	movs	r3, r0
 8008408:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800840a:	e014      	b.n	8008436 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800840c:	4b25      	ldr	r3, [pc, #148]	; (80084a4 <UART_SetConfig+0x314>)
 800840e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008410:	e011      	b.n	8008436 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008412:	f7fe fd77 	bl	8006f04 <HAL_RCC_GetSysClockFreq>
 8008416:	0003      	movs	r3, r0
 8008418:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800841a:	e00c      	b.n	8008436 <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800841c:	2380      	movs	r3, #128	; 0x80
 800841e:	021b      	lsls	r3, r3, #8
 8008420:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008422:	e008      	b.n	8008436 <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8008424:	2300      	movs	r3, #0
 8008426:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8008428:	231a      	movs	r3, #26
 800842a:	2220      	movs	r2, #32
 800842c:	189b      	adds	r3, r3, r2
 800842e:	19db      	adds	r3, r3, r7
 8008430:	2201      	movs	r2, #1
 8008432:	701a      	strb	r2, [r3, #0]
        break;
 8008434:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008436:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008438:	2b00      	cmp	r3, #0
 800843a:	d100      	bne.n	800843e <UART_SetConfig+0x2ae>
 800843c:	e14b      	b.n	80086d6 <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800843e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008440:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008442:	4b19      	ldr	r3, [pc, #100]	; (80084a8 <UART_SetConfig+0x318>)
 8008444:	0052      	lsls	r2, r2, #1
 8008446:	5ad3      	ldrh	r3, [r2, r3]
 8008448:	0019      	movs	r1, r3
 800844a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800844c:	f7f7 fe82 	bl	8000154 <__udivsi3>
 8008450:	0003      	movs	r3, r0
 8008452:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008454:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	0013      	movs	r3, r2
 800845a:	005b      	lsls	r3, r3, #1
 800845c:	189b      	adds	r3, r3, r2
 800845e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008460:	429a      	cmp	r2, r3
 8008462:	d305      	bcc.n	8008470 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8008464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800846a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800846c:	429a      	cmp	r2, r3
 800846e:	d91d      	bls.n	80084ac <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8008470:	231a      	movs	r3, #26
 8008472:	2220      	movs	r2, #32
 8008474:	189b      	adds	r3, r3, r2
 8008476:	19db      	adds	r3, r3, r7
 8008478:	2201      	movs	r2, #1
 800847a:	701a      	strb	r2, [r3, #0]
 800847c:	e12b      	b.n	80086d6 <UART_SetConfig+0x546>
 800847e:	46c0      	nop			; (mov r8, r8)
 8008480:	cfff69f3 	.word	0xcfff69f3
 8008484:	ffffcfff 	.word	0xffffcfff
 8008488:	40008000 	.word	0x40008000
 800848c:	11fff4ff 	.word	0x11fff4ff
 8008490:	40013800 	.word	0x40013800
 8008494:	40021000 	.word	0x40021000
 8008498:	40004400 	.word	0x40004400
 800849c:	40004800 	.word	0x40004800
 80084a0:	40004c00 	.word	0x40004c00
 80084a4:	00f42400 	.word	0x00f42400
 80084a8:	080113b4 	.word	0x080113b4
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ae:	61bb      	str	r3, [r7, #24]
 80084b0:	2300      	movs	r3, #0
 80084b2:	61fb      	str	r3, [r7, #28]
 80084b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084b8:	4b92      	ldr	r3, [pc, #584]	; (8008704 <UART_SetConfig+0x574>)
 80084ba:	0052      	lsls	r2, r2, #1
 80084bc:	5ad3      	ldrh	r3, [r2, r3]
 80084be:	613b      	str	r3, [r7, #16]
 80084c0:	2300      	movs	r3, #0
 80084c2:	617b      	str	r3, [r7, #20]
 80084c4:	693a      	ldr	r2, [r7, #16]
 80084c6:	697b      	ldr	r3, [r7, #20]
 80084c8:	69b8      	ldr	r0, [r7, #24]
 80084ca:	69f9      	ldr	r1, [r7, #28]
 80084cc:	f7f7 fff6 	bl	80004bc <__aeabi_uldivmod>
 80084d0:	0002      	movs	r2, r0
 80084d2:	000b      	movs	r3, r1
 80084d4:	0e11      	lsrs	r1, r2, #24
 80084d6:	021d      	lsls	r5, r3, #8
 80084d8:	430d      	orrs	r5, r1
 80084da:	0214      	lsls	r4, r2, #8
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	685b      	ldr	r3, [r3, #4]
 80084e0:	085b      	lsrs	r3, r3, #1
 80084e2:	60bb      	str	r3, [r7, #8]
 80084e4:	2300      	movs	r3, #0
 80084e6:	60fb      	str	r3, [r7, #12]
 80084e8:	68b8      	ldr	r0, [r7, #8]
 80084ea:	68f9      	ldr	r1, [r7, #12]
 80084ec:	1900      	adds	r0, r0, r4
 80084ee:	4169      	adcs	r1, r5
 80084f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084f2:	685b      	ldr	r3, [r3, #4]
 80084f4:	603b      	str	r3, [r7, #0]
 80084f6:	2300      	movs	r3, #0
 80084f8:	607b      	str	r3, [r7, #4]
 80084fa:	683a      	ldr	r2, [r7, #0]
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	f7f7 ffdd 	bl	80004bc <__aeabi_uldivmod>
 8008502:	0002      	movs	r2, r0
 8008504:	000b      	movs	r3, r1
 8008506:	0013      	movs	r3, r2
 8008508:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800850a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800850c:	23c0      	movs	r3, #192	; 0xc0
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	429a      	cmp	r2, r3
 8008512:	d309      	bcc.n	8008528 <UART_SetConfig+0x398>
 8008514:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008516:	2380      	movs	r3, #128	; 0x80
 8008518:	035b      	lsls	r3, r3, #13
 800851a:	429a      	cmp	r2, r3
 800851c:	d204      	bcs.n	8008528 <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 800851e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008524:	60da      	str	r2, [r3, #12]
 8008526:	e0d6      	b.n	80086d6 <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 8008528:	231a      	movs	r3, #26
 800852a:	2220      	movs	r2, #32
 800852c:	189b      	adds	r3, r3, r2
 800852e:	19db      	adds	r3, r3, r7
 8008530:	2201      	movs	r2, #1
 8008532:	701a      	strb	r2, [r3, #0]
 8008534:	e0cf      	b.n	80086d6 <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008536:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008538:	69da      	ldr	r2, [r3, #28]
 800853a:	2380      	movs	r3, #128	; 0x80
 800853c:	021b      	lsls	r3, r3, #8
 800853e:	429a      	cmp	r2, r3
 8008540:	d000      	beq.n	8008544 <UART_SetConfig+0x3b4>
 8008542:	e070      	b.n	8008626 <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8008544:	231b      	movs	r3, #27
 8008546:	2220      	movs	r2, #32
 8008548:	189b      	adds	r3, r3, r2
 800854a:	19db      	adds	r3, r3, r7
 800854c:	781b      	ldrb	r3, [r3, #0]
 800854e:	2b08      	cmp	r3, #8
 8008550:	d015      	beq.n	800857e <UART_SetConfig+0x3ee>
 8008552:	dc18      	bgt.n	8008586 <UART_SetConfig+0x3f6>
 8008554:	2b04      	cmp	r3, #4
 8008556:	d00d      	beq.n	8008574 <UART_SetConfig+0x3e4>
 8008558:	dc15      	bgt.n	8008586 <UART_SetConfig+0x3f6>
 800855a:	2b00      	cmp	r3, #0
 800855c:	d002      	beq.n	8008564 <UART_SetConfig+0x3d4>
 800855e:	2b02      	cmp	r3, #2
 8008560:	d005      	beq.n	800856e <UART_SetConfig+0x3de>
 8008562:	e010      	b.n	8008586 <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008564:	f7fe fd5a 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 8008568:	0003      	movs	r3, r0
 800856a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800856c:	e014      	b.n	8008598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800856e:	4b66      	ldr	r3, [pc, #408]	; (8008708 <UART_SetConfig+0x578>)
 8008570:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008572:	e011      	b.n	8008598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008574:	f7fe fcc6 	bl	8006f04 <HAL_RCC_GetSysClockFreq>
 8008578:	0003      	movs	r3, r0
 800857a:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800857c:	e00c      	b.n	8008598 <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800857e:	2380      	movs	r3, #128	; 0x80
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008584:	e008      	b.n	8008598 <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8008586:	2300      	movs	r3, #0
 8008588:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800858a:	231a      	movs	r3, #26
 800858c:	2220      	movs	r2, #32
 800858e:	189b      	adds	r3, r3, r2
 8008590:	19db      	adds	r3, r3, r7
 8008592:	2201      	movs	r2, #1
 8008594:	701a      	strb	r2, [r3, #0]
        break;
 8008596:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800859a:	2b00      	cmp	r3, #0
 800859c:	d100      	bne.n	80085a0 <UART_SetConfig+0x410>
 800859e:	e09a      	b.n	80086d6 <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80085a4:	4b57      	ldr	r3, [pc, #348]	; (8008704 <UART_SetConfig+0x574>)
 80085a6:	0052      	lsls	r2, r2, #1
 80085a8:	5ad3      	ldrh	r3, [r2, r3]
 80085aa:	0019      	movs	r1, r3
 80085ac:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80085ae:	f7f7 fdd1 	bl	8000154 <__udivsi3>
 80085b2:	0003      	movs	r3, r0
 80085b4:	005a      	lsls	r2, r3, #1
 80085b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b8:	685b      	ldr	r3, [r3, #4]
 80085ba:	085b      	lsrs	r3, r3, #1
 80085bc:	18d2      	adds	r2, r2, r3
 80085be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085c0:	685b      	ldr	r3, [r3, #4]
 80085c2:	0019      	movs	r1, r3
 80085c4:	0010      	movs	r0, r2
 80085c6:	f7f7 fdc5 	bl	8000154 <__udivsi3>
 80085ca:	0003      	movs	r3, r0
 80085cc:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085d0:	2b0f      	cmp	r3, #15
 80085d2:	d921      	bls.n	8008618 <UART_SetConfig+0x488>
 80085d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085d6:	2380      	movs	r3, #128	; 0x80
 80085d8:	025b      	lsls	r3, r3, #9
 80085da:	429a      	cmp	r2, r3
 80085dc:	d21c      	bcs.n	8008618 <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80085de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085e0:	b29a      	uxth	r2, r3
 80085e2:	200e      	movs	r0, #14
 80085e4:	2420      	movs	r4, #32
 80085e6:	1903      	adds	r3, r0, r4
 80085e8:	19db      	adds	r3, r3, r7
 80085ea:	210f      	movs	r1, #15
 80085ec:	438a      	bics	r2, r1
 80085ee:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80085f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80085f2:	085b      	lsrs	r3, r3, #1
 80085f4:	b29b      	uxth	r3, r3
 80085f6:	2207      	movs	r2, #7
 80085f8:	4013      	ands	r3, r2
 80085fa:	b299      	uxth	r1, r3
 80085fc:	1903      	adds	r3, r0, r4
 80085fe:	19db      	adds	r3, r3, r7
 8008600:	1902      	adds	r2, r0, r4
 8008602:	19d2      	adds	r2, r2, r7
 8008604:	8812      	ldrh	r2, [r2, #0]
 8008606:	430a      	orrs	r2, r1
 8008608:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	681b      	ldr	r3, [r3, #0]
 800860e:	1902      	adds	r2, r0, r4
 8008610:	19d2      	adds	r2, r2, r7
 8008612:	8812      	ldrh	r2, [r2, #0]
 8008614:	60da      	str	r2, [r3, #12]
 8008616:	e05e      	b.n	80086d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 8008618:	231a      	movs	r3, #26
 800861a:	2220      	movs	r2, #32
 800861c:	189b      	adds	r3, r3, r2
 800861e:	19db      	adds	r3, r3, r7
 8008620:	2201      	movs	r2, #1
 8008622:	701a      	strb	r2, [r3, #0]
 8008624:	e057      	b.n	80086d6 <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008626:	231b      	movs	r3, #27
 8008628:	2220      	movs	r2, #32
 800862a:	189b      	adds	r3, r3, r2
 800862c:	19db      	adds	r3, r3, r7
 800862e:	781b      	ldrb	r3, [r3, #0]
 8008630:	2b08      	cmp	r3, #8
 8008632:	d015      	beq.n	8008660 <UART_SetConfig+0x4d0>
 8008634:	dc18      	bgt.n	8008668 <UART_SetConfig+0x4d8>
 8008636:	2b04      	cmp	r3, #4
 8008638:	d00d      	beq.n	8008656 <UART_SetConfig+0x4c6>
 800863a:	dc15      	bgt.n	8008668 <UART_SetConfig+0x4d8>
 800863c:	2b00      	cmp	r3, #0
 800863e:	d002      	beq.n	8008646 <UART_SetConfig+0x4b6>
 8008640:	2b02      	cmp	r3, #2
 8008642:	d005      	beq.n	8008650 <UART_SetConfig+0x4c0>
 8008644:	e010      	b.n	8008668 <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008646:	f7fe fce9 	bl	800701c <HAL_RCC_GetPCLK1Freq>
 800864a:	0003      	movs	r3, r0
 800864c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800864e:	e014      	b.n	800867a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008650:	4b2d      	ldr	r3, [pc, #180]	; (8008708 <UART_SetConfig+0x578>)
 8008652:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008654:	e011      	b.n	800867a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008656:	f7fe fc55 	bl	8006f04 <HAL_RCC_GetSysClockFreq>
 800865a:	0003      	movs	r3, r0
 800865c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800865e:	e00c      	b.n	800867a <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008660:	2380      	movs	r3, #128	; 0x80
 8008662:	021b      	lsls	r3, r3, #8
 8008664:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8008666:	e008      	b.n	800867a <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 8008668:	2300      	movs	r3, #0
 800866a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800866c:	231a      	movs	r3, #26
 800866e:	2220      	movs	r2, #32
 8008670:	189b      	adds	r3, r3, r2
 8008672:	19db      	adds	r3, r3, r7
 8008674:	2201      	movs	r2, #1
 8008676:	701a      	strb	r2, [r3, #0]
        break;
 8008678:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800867a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800867c:	2b00      	cmp	r3, #0
 800867e:	d02a      	beq.n	80086d6 <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008684:	4b1f      	ldr	r3, [pc, #124]	; (8008704 <UART_SetConfig+0x574>)
 8008686:	0052      	lsls	r2, r2, #1
 8008688:	5ad3      	ldrh	r3, [r2, r3]
 800868a:	0019      	movs	r1, r3
 800868c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800868e:	f7f7 fd61 	bl	8000154 <__udivsi3>
 8008692:	0003      	movs	r3, r0
 8008694:	001a      	movs	r2, r3
 8008696:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008698:	685b      	ldr	r3, [r3, #4]
 800869a:	085b      	lsrs	r3, r3, #1
 800869c:	18d2      	adds	r2, r2, r3
 800869e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a0:	685b      	ldr	r3, [r3, #4]
 80086a2:	0019      	movs	r1, r3
 80086a4:	0010      	movs	r0, r2
 80086a6:	f7f7 fd55 	bl	8000154 <__udivsi3>
 80086aa:	0003      	movs	r3, r0
 80086ac:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80086ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086b0:	2b0f      	cmp	r3, #15
 80086b2:	d90a      	bls.n	80086ca <UART_SetConfig+0x53a>
 80086b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80086b6:	2380      	movs	r3, #128	; 0x80
 80086b8:	025b      	lsls	r3, r3, #9
 80086ba:	429a      	cmp	r2, r3
 80086bc:	d205      	bcs.n	80086ca <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80086be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c0:	b29a      	uxth	r2, r3
 80086c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	60da      	str	r2, [r3, #12]
 80086c8:	e005      	b.n	80086d6 <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80086ca:	231a      	movs	r3, #26
 80086cc:	2220      	movs	r2, #32
 80086ce:	189b      	adds	r3, r3, r2
 80086d0:	19db      	adds	r3, r3, r7
 80086d2:	2201      	movs	r2, #1
 80086d4:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80086d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086d8:	226a      	movs	r2, #106	; 0x6a
 80086da:	2101      	movs	r1, #1
 80086dc:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80086de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e0:	2268      	movs	r2, #104	; 0x68
 80086e2:	2101      	movs	r1, #1
 80086e4:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80086e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e8:	2200      	movs	r2, #0
 80086ea:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80086ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086ee:	2200      	movs	r2, #0
 80086f0:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80086f2:	231a      	movs	r3, #26
 80086f4:	2220      	movs	r2, #32
 80086f6:	189b      	adds	r3, r3, r2
 80086f8:	19db      	adds	r3, r3, r7
 80086fa:	781b      	ldrb	r3, [r3, #0]
}
 80086fc:	0018      	movs	r0, r3
 80086fe:	46bd      	mov	sp, r7
 8008700:	b010      	add	sp, #64	; 0x40
 8008702:	bdb0      	pop	{r4, r5, r7, pc}
 8008704:	080113b4 	.word	0x080113b4
 8008708:	00f42400 	.word	0x00f42400

0800870c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b082      	sub	sp, #8
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008718:	2208      	movs	r2, #8
 800871a:	4013      	ands	r3, r2
 800871c:	d00b      	beq.n	8008736 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	685b      	ldr	r3, [r3, #4]
 8008724:	4a4a      	ldr	r2, [pc, #296]	; (8008850 <UART_AdvFeatureConfig+0x144>)
 8008726:	4013      	ands	r3, r2
 8008728:	0019      	movs	r1, r3
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	430a      	orrs	r2, r1
 8008734:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873a:	2201      	movs	r2, #1
 800873c:	4013      	ands	r3, r2
 800873e:	d00b      	beq.n	8008758 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	685b      	ldr	r3, [r3, #4]
 8008746:	4a43      	ldr	r2, [pc, #268]	; (8008854 <UART_AdvFeatureConfig+0x148>)
 8008748:	4013      	ands	r3, r2
 800874a:	0019      	movs	r1, r3
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	430a      	orrs	r2, r1
 8008756:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800875c:	2202      	movs	r2, #2
 800875e:	4013      	ands	r3, r2
 8008760:	d00b      	beq.n	800877a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	685b      	ldr	r3, [r3, #4]
 8008768:	4a3b      	ldr	r2, [pc, #236]	; (8008858 <UART_AdvFeatureConfig+0x14c>)
 800876a:	4013      	ands	r3, r2
 800876c:	0019      	movs	r1, r3
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	681b      	ldr	r3, [r3, #0]
 8008776:	430a      	orrs	r2, r1
 8008778:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800877e:	2204      	movs	r2, #4
 8008780:	4013      	ands	r3, r2
 8008782:	d00b      	beq.n	800879c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	685b      	ldr	r3, [r3, #4]
 800878a:	4a34      	ldr	r2, [pc, #208]	; (800885c <UART_AdvFeatureConfig+0x150>)
 800878c:	4013      	ands	r3, r2
 800878e:	0019      	movs	r1, r3
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	430a      	orrs	r2, r1
 800879a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a0:	2210      	movs	r2, #16
 80087a2:	4013      	ands	r3, r2
 80087a4:	d00b      	beq.n	80087be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	681b      	ldr	r3, [r3, #0]
 80087aa:	689b      	ldr	r3, [r3, #8]
 80087ac:	4a2c      	ldr	r2, [pc, #176]	; (8008860 <UART_AdvFeatureConfig+0x154>)
 80087ae:	4013      	ands	r3, r2
 80087b0:	0019      	movs	r1, r3
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	430a      	orrs	r2, r1
 80087bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087c2:	2220      	movs	r2, #32
 80087c4:	4013      	ands	r3, r2
 80087c6:	d00b      	beq.n	80087e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	689b      	ldr	r3, [r3, #8]
 80087ce:	4a25      	ldr	r2, [pc, #148]	; (8008864 <UART_AdvFeatureConfig+0x158>)
 80087d0:	4013      	ands	r3, r2
 80087d2:	0019      	movs	r1, r3
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	681b      	ldr	r3, [r3, #0]
 80087dc:	430a      	orrs	r2, r1
 80087de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087e4:	2240      	movs	r2, #64	; 0x40
 80087e6:	4013      	ands	r3, r2
 80087e8:	d01d      	beq.n	8008826 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	685b      	ldr	r3, [r3, #4]
 80087f0:	4a1d      	ldr	r2, [pc, #116]	; (8008868 <UART_AdvFeatureConfig+0x15c>)
 80087f2:	4013      	ands	r3, r2
 80087f4:	0019      	movs	r1, r3
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	430a      	orrs	r2, r1
 8008800:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008806:	2380      	movs	r3, #128	; 0x80
 8008808:	035b      	lsls	r3, r3, #13
 800880a:	429a      	cmp	r2, r3
 800880c:	d10b      	bne.n	8008826 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	685b      	ldr	r3, [r3, #4]
 8008814:	4a15      	ldr	r2, [pc, #84]	; (800886c <UART_AdvFeatureConfig+0x160>)
 8008816:	4013      	ands	r3, r2
 8008818:	0019      	movs	r1, r3
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800881e:	687b      	ldr	r3, [r7, #4]
 8008820:	681b      	ldr	r3, [r3, #0]
 8008822:	430a      	orrs	r2, r1
 8008824:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800882a:	2280      	movs	r2, #128	; 0x80
 800882c:	4013      	ands	r3, r2
 800882e:	d00b      	beq.n	8008848 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	685b      	ldr	r3, [r3, #4]
 8008836:	4a0e      	ldr	r2, [pc, #56]	; (8008870 <UART_AdvFeatureConfig+0x164>)
 8008838:	4013      	ands	r3, r2
 800883a:	0019      	movs	r1, r3
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	430a      	orrs	r2, r1
 8008846:	605a      	str	r2, [r3, #4]
  }
}
 8008848:	46c0      	nop			; (mov r8, r8)
 800884a:	46bd      	mov	sp, r7
 800884c:	b002      	add	sp, #8
 800884e:	bd80      	pop	{r7, pc}
 8008850:	ffff7fff 	.word	0xffff7fff
 8008854:	fffdffff 	.word	0xfffdffff
 8008858:	fffeffff 	.word	0xfffeffff
 800885c:	fffbffff 	.word	0xfffbffff
 8008860:	ffffefff 	.word	0xffffefff
 8008864:	ffffdfff 	.word	0xffffdfff
 8008868:	ffefffff 	.word	0xffefffff
 800886c:	ff9fffff 	.word	0xff9fffff
 8008870:	fff7ffff 	.word	0xfff7ffff

08008874 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008874:	b580      	push	{r7, lr}
 8008876:	b092      	sub	sp, #72	; 0x48
 8008878:	af02      	add	r7, sp, #8
 800887a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	2290      	movs	r2, #144	; 0x90
 8008880:	2100      	movs	r1, #0
 8008882:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008884:	f7fd fb7e 	bl	8005f84 <HAL_GetTick>
 8008888:	0003      	movs	r3, r0
 800888a:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	681b      	ldr	r3, [r3, #0]
 8008892:	2208      	movs	r2, #8
 8008894:	4013      	ands	r3, r2
 8008896:	2b08      	cmp	r3, #8
 8008898:	d12d      	bne.n	80088f6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800889a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800889c:	2280      	movs	r2, #128	; 0x80
 800889e:	0391      	lsls	r1, r2, #14
 80088a0:	6878      	ldr	r0, [r7, #4]
 80088a2:	4a47      	ldr	r2, [pc, #284]	; (80089c0 <UART_CheckIdleState+0x14c>)
 80088a4:	9200      	str	r2, [sp, #0]
 80088a6:	2200      	movs	r2, #0
 80088a8:	f000 f88e 	bl	80089c8 <UART_WaitOnFlagUntilTimeout>
 80088ac:	1e03      	subs	r3, r0, #0
 80088ae:	d022      	beq.n	80088f6 <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80088b0:	f3ef 8310 	mrs	r3, PRIMASK
 80088b4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80088b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80088b8:	63bb      	str	r3, [r7, #56]	; 0x38
 80088ba:	2301      	movs	r3, #1
 80088bc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088c0:	f383 8810 	msr	PRIMASK, r3
}
 80088c4:	46c0      	nop			; (mov r8, r8)
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	681b      	ldr	r3, [r3, #0]
 80088ca:	681a      	ldr	r2, [r3, #0]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	2180      	movs	r1, #128	; 0x80
 80088d2:	438a      	bics	r2, r1
 80088d4:	601a      	str	r2, [r3, #0]
 80088d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80088d8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80088da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80088dc:	f383 8810 	msr	PRIMASK, r3
}
 80088e0:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	2288      	movs	r2, #136	; 0x88
 80088e6:	2120      	movs	r1, #32
 80088e8:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2284      	movs	r2, #132	; 0x84
 80088ee:	2100      	movs	r1, #0
 80088f0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088f2:	2303      	movs	r3, #3
 80088f4:	e060      	b.n	80089b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	681b      	ldr	r3, [r3, #0]
 80088fc:	2204      	movs	r2, #4
 80088fe:	4013      	ands	r3, r2
 8008900:	2b04      	cmp	r3, #4
 8008902:	d146      	bne.n	8008992 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008904:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008906:	2280      	movs	r2, #128	; 0x80
 8008908:	03d1      	lsls	r1, r2, #15
 800890a:	6878      	ldr	r0, [r7, #4]
 800890c:	4a2c      	ldr	r2, [pc, #176]	; (80089c0 <UART_CheckIdleState+0x14c>)
 800890e:	9200      	str	r2, [sp, #0]
 8008910:	2200      	movs	r2, #0
 8008912:	f000 f859 	bl	80089c8 <UART_WaitOnFlagUntilTimeout>
 8008916:	1e03      	subs	r3, r0, #0
 8008918:	d03b      	beq.n	8008992 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800891a:	f3ef 8310 	mrs	r3, PRIMASK
 800891e:	60fb      	str	r3, [r7, #12]
  return(result);
 8008920:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008922:	637b      	str	r3, [r7, #52]	; 0x34
 8008924:	2301      	movs	r3, #1
 8008926:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008928:	693b      	ldr	r3, [r7, #16]
 800892a:	f383 8810 	msr	PRIMASK, r3
}
 800892e:	46c0      	nop			; (mov r8, r8)
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	681a      	ldr	r2, [r3, #0]
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4922      	ldr	r1, [pc, #136]	; (80089c4 <UART_CheckIdleState+0x150>)
 800893c:	400a      	ands	r2, r1
 800893e:	601a      	str	r2, [r3, #0]
 8008940:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008942:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008944:	697b      	ldr	r3, [r7, #20]
 8008946:	f383 8810 	msr	PRIMASK, r3
}
 800894a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800894c:	f3ef 8310 	mrs	r3, PRIMASK
 8008950:	61bb      	str	r3, [r7, #24]
  return(result);
 8008952:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008954:	633b      	str	r3, [r7, #48]	; 0x30
 8008956:	2301      	movs	r3, #1
 8008958:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800895a:	69fb      	ldr	r3, [r7, #28]
 800895c:	f383 8810 	msr	PRIMASK, r3
}
 8008960:	46c0      	nop			; (mov r8, r8)
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	689a      	ldr	r2, [r3, #8]
 8008968:	687b      	ldr	r3, [r7, #4]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	2101      	movs	r1, #1
 800896e:	438a      	bics	r2, r1
 8008970:	609a      	str	r2, [r3, #8]
 8008972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008974:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008976:	6a3b      	ldr	r3, [r7, #32]
 8008978:	f383 8810 	msr	PRIMASK, r3
}
 800897c:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	228c      	movs	r2, #140	; 0x8c
 8008982:	2120      	movs	r1, #32
 8008984:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	2284      	movs	r2, #132	; 0x84
 800898a:	2100      	movs	r1, #0
 800898c:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800898e:	2303      	movs	r3, #3
 8008990:	e012      	b.n	80089b8 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008992:	687b      	ldr	r3, [r7, #4]
 8008994:	2288      	movs	r2, #136	; 0x88
 8008996:	2120      	movs	r1, #32
 8008998:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	228c      	movs	r2, #140	; 0x8c
 800899e:	2120      	movs	r1, #32
 80089a0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	2200      	movs	r2, #0
 80089a6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	2200      	movs	r2, #0
 80089ac:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	2284      	movs	r2, #132	; 0x84
 80089b2:	2100      	movs	r1, #0
 80089b4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80089b6:	2300      	movs	r3, #0
}
 80089b8:	0018      	movs	r0, r3
 80089ba:	46bd      	mov	sp, r7
 80089bc:	b010      	add	sp, #64	; 0x40
 80089be:	bd80      	pop	{r7, pc}
 80089c0:	01ffffff 	.word	0x01ffffff
 80089c4:	fffffedf 	.word	0xfffffedf

080089c8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b084      	sub	sp, #16
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	60f8      	str	r0, [r7, #12]
 80089d0:	60b9      	str	r1, [r7, #8]
 80089d2:	603b      	str	r3, [r7, #0]
 80089d4:	1dfb      	adds	r3, r7, #7
 80089d6:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80089d8:	e051      	b.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80089da:	69bb      	ldr	r3, [r7, #24]
 80089dc:	3301      	adds	r3, #1
 80089de:	d04e      	beq.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80089e0:	f7fd fad0 	bl	8005f84 <HAL_GetTick>
 80089e4:	0002      	movs	r2, r0
 80089e6:	683b      	ldr	r3, [r7, #0]
 80089e8:	1ad3      	subs	r3, r2, r3
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	429a      	cmp	r2, r3
 80089ee:	d302      	bcc.n	80089f6 <UART_WaitOnFlagUntilTimeout+0x2e>
 80089f0:	69bb      	ldr	r3, [r7, #24]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d101      	bne.n	80089fa <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e051      	b.n	8008a9e <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80089fa:	68fb      	ldr	r3, [r7, #12]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	2204      	movs	r2, #4
 8008a02:	4013      	ands	r3, r2
 8008a04:	d03b      	beq.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008a06:	68bb      	ldr	r3, [r7, #8]
 8008a08:	2b80      	cmp	r3, #128	; 0x80
 8008a0a:	d038      	beq.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xb6>
 8008a0c:	68bb      	ldr	r3, [r7, #8]
 8008a0e:	2b40      	cmp	r3, #64	; 0x40
 8008a10:	d035      	beq.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	69db      	ldr	r3, [r3, #28]
 8008a18:	2208      	movs	r2, #8
 8008a1a:	4013      	ands	r3, r2
 8008a1c:	2b08      	cmp	r3, #8
 8008a1e:	d111      	bne.n	8008a44 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2208      	movs	r2, #8
 8008a26:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	0018      	movs	r0, r3
 8008a2c:	f000 f960 	bl	8008cf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	2290      	movs	r2, #144	; 0x90
 8008a34:	2108      	movs	r1, #8
 8008a36:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2284      	movs	r2, #132	; 0x84
 8008a3c:	2100      	movs	r1, #0
 8008a3e:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e02c      	b.n	8008a9e <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	69da      	ldr	r2, [r3, #28]
 8008a4a:	2380      	movs	r3, #128	; 0x80
 8008a4c:	011b      	lsls	r3, r3, #4
 8008a4e:	401a      	ands	r2, r3
 8008a50:	2380      	movs	r3, #128	; 0x80
 8008a52:	011b      	lsls	r3, r3, #4
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d112      	bne.n	8008a7e <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	2280      	movs	r2, #128	; 0x80
 8008a5e:	0112      	lsls	r2, r2, #4
 8008a60:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	0018      	movs	r0, r3
 8008a66:	f000 f943 	bl	8008cf0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a6a:	68fb      	ldr	r3, [r7, #12]
 8008a6c:	2290      	movs	r2, #144	; 0x90
 8008a6e:	2120      	movs	r1, #32
 8008a70:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2284      	movs	r2, #132	; 0x84
 8008a76:	2100      	movs	r1, #0
 8008a78:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8008a7a:	2303      	movs	r3, #3
 8008a7c:	e00f      	b.n	8008a9e <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	69db      	ldr	r3, [r3, #28]
 8008a84:	68ba      	ldr	r2, [r7, #8]
 8008a86:	4013      	ands	r3, r2
 8008a88:	68ba      	ldr	r2, [r7, #8]
 8008a8a:	1ad3      	subs	r3, r2, r3
 8008a8c:	425a      	negs	r2, r3
 8008a8e:	4153      	adcs	r3, r2
 8008a90:	b2db      	uxtb	r3, r3
 8008a92:	001a      	movs	r2, r3
 8008a94:	1dfb      	adds	r3, r7, #7
 8008a96:	781b      	ldrb	r3, [r3, #0]
 8008a98:	429a      	cmp	r2, r3
 8008a9a:	d09e      	beq.n	80089da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008a9c:	2300      	movs	r3, #0
}
 8008a9e:	0018      	movs	r0, r3
 8008aa0:	46bd      	mov	sp, r7
 8008aa2:	b004      	add	sp, #16
 8008aa4:	bd80      	pop	{r7, pc}
	...

08008aa8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b098      	sub	sp, #96	; 0x60
 8008aac:	af00      	add	r7, sp, #0
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	1dbb      	adds	r3, r7, #6
 8008ab4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	68ba      	ldr	r2, [r7, #8]
 8008aba:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	1dba      	adds	r2, r7, #6
 8008ac0:	215c      	movs	r1, #92	; 0x5c
 8008ac2:	8812      	ldrh	r2, [r2, #0]
 8008ac4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8008ac6:	68fb      	ldr	r3, [r7, #12]
 8008ac8:	1dba      	adds	r2, r7, #6
 8008aca:	215e      	movs	r1, #94	; 0x5e
 8008acc:	8812      	ldrh	r2, [r2, #0]
 8008ace:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	2200      	movs	r2, #0
 8008ad4:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008ad6:	68fb      	ldr	r3, [r7, #12]
 8008ad8:	689a      	ldr	r2, [r3, #8]
 8008ada:	2380      	movs	r3, #128	; 0x80
 8008adc:	015b      	lsls	r3, r3, #5
 8008ade:	429a      	cmp	r2, r3
 8008ae0:	d10d      	bne.n	8008afe <UART_Start_Receive_IT+0x56>
 8008ae2:	68fb      	ldr	r3, [r7, #12]
 8008ae4:	691b      	ldr	r3, [r3, #16]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d104      	bne.n	8008af4 <UART_Start_Receive_IT+0x4c>
 8008aea:	68fb      	ldr	r3, [r7, #12]
 8008aec:	2260      	movs	r2, #96	; 0x60
 8008aee:	497b      	ldr	r1, [pc, #492]	; (8008cdc <UART_Start_Receive_IT+0x234>)
 8008af0:	5299      	strh	r1, [r3, r2]
 8008af2:	e02e      	b.n	8008b52 <UART_Start_Receive_IT+0xaa>
 8008af4:	68fb      	ldr	r3, [r7, #12]
 8008af6:	2260      	movs	r2, #96	; 0x60
 8008af8:	21ff      	movs	r1, #255	; 0xff
 8008afa:	5299      	strh	r1, [r3, r2]
 8008afc:	e029      	b.n	8008b52 <UART_Start_Receive_IT+0xaa>
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	689b      	ldr	r3, [r3, #8]
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d10d      	bne.n	8008b22 <UART_Start_Receive_IT+0x7a>
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	691b      	ldr	r3, [r3, #16]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	d104      	bne.n	8008b18 <UART_Start_Receive_IT+0x70>
 8008b0e:	68fb      	ldr	r3, [r7, #12]
 8008b10:	2260      	movs	r2, #96	; 0x60
 8008b12:	21ff      	movs	r1, #255	; 0xff
 8008b14:	5299      	strh	r1, [r3, r2]
 8008b16:	e01c      	b.n	8008b52 <UART_Start_Receive_IT+0xaa>
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	2260      	movs	r2, #96	; 0x60
 8008b1c:	217f      	movs	r1, #127	; 0x7f
 8008b1e:	5299      	strh	r1, [r3, r2]
 8008b20:	e017      	b.n	8008b52 <UART_Start_Receive_IT+0xaa>
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	689a      	ldr	r2, [r3, #8]
 8008b26:	2380      	movs	r3, #128	; 0x80
 8008b28:	055b      	lsls	r3, r3, #21
 8008b2a:	429a      	cmp	r2, r3
 8008b2c:	d10d      	bne.n	8008b4a <UART_Start_Receive_IT+0xa2>
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	691b      	ldr	r3, [r3, #16]
 8008b32:	2b00      	cmp	r3, #0
 8008b34:	d104      	bne.n	8008b40 <UART_Start_Receive_IT+0x98>
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	2260      	movs	r2, #96	; 0x60
 8008b3a:	217f      	movs	r1, #127	; 0x7f
 8008b3c:	5299      	strh	r1, [r3, r2]
 8008b3e:	e008      	b.n	8008b52 <UART_Start_Receive_IT+0xaa>
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	2260      	movs	r2, #96	; 0x60
 8008b44:	213f      	movs	r1, #63	; 0x3f
 8008b46:	5299      	strh	r1, [r3, r2]
 8008b48:	e003      	b.n	8008b52 <UART_Start_Receive_IT+0xaa>
 8008b4a:	68fb      	ldr	r3, [r7, #12]
 8008b4c:	2260      	movs	r2, #96	; 0x60
 8008b4e:	2100      	movs	r1, #0
 8008b50:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2290      	movs	r2, #144	; 0x90
 8008b56:	2100      	movs	r1, #0
 8008b58:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	228c      	movs	r2, #140	; 0x8c
 8008b5e:	2122      	movs	r1, #34	; 0x22
 8008b60:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008b62:	f3ef 8310 	mrs	r3, PRIMASK
 8008b66:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8008b68:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b6a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008b6c:	2301      	movs	r3, #1
 8008b6e:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008b72:	f383 8810 	msr	PRIMASK, r3
}
 8008b76:	46c0      	nop			; (mov r8, r8)
 8008b78:	68fb      	ldr	r3, [r7, #12]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	689a      	ldr	r2, [r3, #8]
 8008b7e:	68fb      	ldr	r3, [r7, #12]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	2101      	movs	r1, #1
 8008b84:	430a      	orrs	r2, r1
 8008b86:	609a      	str	r2, [r3, #8]
 8008b88:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008b8a:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008b8c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008b8e:	f383 8810 	msr	PRIMASK, r3
}
 8008b92:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008b94:	68fb      	ldr	r3, [r7, #12]
 8008b96:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8008b98:	2380      	movs	r3, #128	; 0x80
 8008b9a:	059b      	lsls	r3, r3, #22
 8008b9c:	429a      	cmp	r2, r3
 8008b9e:	d150      	bne.n	8008c42 <UART_Start_Receive_IT+0x19a>
 8008ba0:	68fb      	ldr	r3, [r7, #12]
 8008ba2:	2268      	movs	r2, #104	; 0x68
 8008ba4:	5a9b      	ldrh	r3, [r3, r2]
 8008ba6:	1dba      	adds	r2, r7, #6
 8008ba8:	8812      	ldrh	r2, [r2, #0]
 8008baa:	429a      	cmp	r2, r3
 8008bac:	d349      	bcc.n	8008c42 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	689a      	ldr	r2, [r3, #8]
 8008bb2:	2380      	movs	r3, #128	; 0x80
 8008bb4:	015b      	lsls	r3, r3, #5
 8008bb6:	429a      	cmp	r2, r3
 8008bb8:	d107      	bne.n	8008bca <UART_Start_Receive_IT+0x122>
 8008bba:	68fb      	ldr	r3, [r7, #12]
 8008bbc:	691b      	ldr	r3, [r3, #16]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d103      	bne.n	8008bca <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	4a46      	ldr	r2, [pc, #280]	; (8008ce0 <UART_Start_Receive_IT+0x238>)
 8008bc6:	675a      	str	r2, [r3, #116]	; 0x74
 8008bc8:	e002      	b.n	8008bd0 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008bca:	68fb      	ldr	r3, [r7, #12]
 8008bcc:	4a45      	ldr	r2, [pc, #276]	; (8008ce4 <UART_Start_Receive_IT+0x23c>)
 8008bce:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008bd0:	68fb      	ldr	r3, [r7, #12]
 8008bd2:	691b      	ldr	r3, [r3, #16]
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d019      	beq.n	8008c0c <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008bd8:	f3ef 8310 	mrs	r3, PRIMASK
 8008bdc:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8008bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008be0:	65bb      	str	r3, [r7, #88]	; 0x58
 8008be2:	2301      	movs	r3, #1
 8008be4:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008be8:	f383 8810 	msr	PRIMASK, r3
}
 8008bec:	46c0      	nop			; (mov r8, r8)
 8008bee:	68fb      	ldr	r3, [r7, #12]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	681a      	ldr	r2, [r3, #0]
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	681b      	ldr	r3, [r3, #0]
 8008bf8:	2180      	movs	r1, #128	; 0x80
 8008bfa:	0049      	lsls	r1, r1, #1
 8008bfc:	430a      	orrs	r2, r1
 8008bfe:	601a      	str	r2, [r3, #0]
 8008c00:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008c02:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c06:	f383 8810 	msr	PRIMASK, r3
}
 8008c0a:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c0c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c10:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8008c12:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008c14:	657b      	str	r3, [r7, #84]	; 0x54
 8008c16:	2301      	movs	r3, #1
 8008c18:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008c1c:	f383 8810 	msr	PRIMASK, r3
}
 8008c20:	46c0      	nop			; (mov r8, r8)
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	681b      	ldr	r3, [r3, #0]
 8008c26:	689a      	ldr	r2, [r3, #8]
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	2180      	movs	r1, #128	; 0x80
 8008c2e:	0549      	lsls	r1, r1, #21
 8008c30:	430a      	orrs	r2, r1
 8008c32:	609a      	str	r2, [r3, #8]
 8008c34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c36:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008c3a:	f383 8810 	msr	PRIMASK, r3
}
 8008c3e:	46c0      	nop			; (mov r8, r8)
 8008c40:	e047      	b.n	8008cd2 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689a      	ldr	r2, [r3, #8]
 8008c46:	2380      	movs	r3, #128	; 0x80
 8008c48:	015b      	lsls	r3, r3, #5
 8008c4a:	429a      	cmp	r2, r3
 8008c4c:	d107      	bne.n	8008c5e <UART_Start_Receive_IT+0x1b6>
 8008c4e:	68fb      	ldr	r3, [r7, #12]
 8008c50:	691b      	ldr	r3, [r3, #16]
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d103      	bne.n	8008c5e <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a23      	ldr	r2, [pc, #140]	; (8008ce8 <UART_Start_Receive_IT+0x240>)
 8008c5a:	675a      	str	r2, [r3, #116]	; 0x74
 8008c5c:	e002      	b.n	8008c64 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008c5e:	68fb      	ldr	r3, [r7, #12]
 8008c60:	4a22      	ldr	r2, [pc, #136]	; (8008cec <UART_Start_Receive_IT+0x244>)
 8008c62:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	691b      	ldr	r3, [r3, #16]
 8008c68:	2b00      	cmp	r3, #0
 8008c6a:	d019      	beq.n	8008ca0 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008c6c:	f3ef 8310 	mrs	r3, PRIMASK
 8008c70:	61fb      	str	r3, [r7, #28]
  return(result);
 8008c72:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008c74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c76:	2301      	movs	r3, #1
 8008c78:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c7a:	6a3b      	ldr	r3, [r7, #32]
 8008c7c:	f383 8810 	msr	PRIMASK, r3
}
 8008c80:	46c0      	nop			; (mov r8, r8)
 8008c82:	68fb      	ldr	r3, [r7, #12]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	681a      	ldr	r2, [r3, #0]
 8008c88:	68fb      	ldr	r3, [r7, #12]
 8008c8a:	681b      	ldr	r3, [r3, #0]
 8008c8c:	2190      	movs	r1, #144	; 0x90
 8008c8e:	0049      	lsls	r1, r1, #1
 8008c90:	430a      	orrs	r2, r1
 8008c92:	601a      	str	r2, [r3, #0]
 8008c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c96:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c9a:	f383 8810 	msr	PRIMASK, r3
}
 8008c9e:	e018      	b.n	8008cd2 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8008ca4:	613b      	str	r3, [r7, #16]
  return(result);
 8008ca6:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008ca8:	653b      	str	r3, [r7, #80]	; 0x50
 8008caa:	2301      	movs	r3, #1
 8008cac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cae:	697b      	ldr	r3, [r7, #20]
 8008cb0:	f383 8810 	msr	PRIMASK, r3
}
 8008cb4:	46c0      	nop			; (mov r8, r8)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	2120      	movs	r1, #32
 8008cc2:	430a      	orrs	r2, r1
 8008cc4:	601a      	str	r2, [r3, #0]
 8008cc6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008cc8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008cca:	69bb      	ldr	r3, [r7, #24]
 8008ccc:	f383 8810 	msr	PRIMASK, r3
}
 8008cd0:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8008cd2:	2300      	movs	r3, #0
}
 8008cd4:	0018      	movs	r0, r3
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	b018      	add	sp, #96	; 0x60
 8008cda:	bd80      	pop	{r7, pc}
 8008cdc:	000001ff 	.word	0x000001ff
 8008ce0:	0800950d 	.word	0x0800950d
 8008ce4:	080091cd 	.word	0x080091cd
 8008ce8:	08009009 	.word	0x08009009
 8008cec:	08008e45 	.word	0x08008e45

08008cf0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008cf0:	b580      	push	{r7, lr}
 8008cf2:	b08e      	sub	sp, #56	; 0x38
 8008cf4:	af00      	add	r7, sp, #0
 8008cf6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008cf8:	f3ef 8310 	mrs	r3, PRIMASK
 8008cfc:	617b      	str	r3, [r7, #20]
  return(result);
 8008cfe:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d00:	637b      	str	r3, [r7, #52]	; 0x34
 8008d02:	2301      	movs	r3, #1
 8008d04:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d06:	69bb      	ldr	r3, [r7, #24]
 8008d08:	f383 8810 	msr	PRIMASK, r3
}
 8008d0c:	46c0      	nop			; (mov r8, r8)
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	681b      	ldr	r3, [r3, #0]
 8008d12:	681a      	ldr	r2, [r3, #0]
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	4926      	ldr	r1, [pc, #152]	; (8008db4 <UART_EndRxTransfer+0xc4>)
 8008d1a:	400a      	ands	r2, r1
 8008d1c:	601a      	str	r2, [r3, #0]
 8008d1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d20:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d22:	69fb      	ldr	r3, [r7, #28]
 8008d24:	f383 8810 	msr	PRIMASK, r3
}
 8008d28:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d2a:	f3ef 8310 	mrs	r3, PRIMASK
 8008d2e:	623b      	str	r3, [r7, #32]
  return(result);
 8008d30:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008d32:	633b      	str	r3, [r7, #48]	; 0x30
 8008d34:	2301      	movs	r3, #1
 8008d36:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d3a:	f383 8810 	msr	PRIMASK, r3
}
 8008d3e:	46c0      	nop			; (mov r8, r8)
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	689a      	ldr	r2, [r3, #8]
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	491b      	ldr	r1, [pc, #108]	; (8008db8 <UART_EndRxTransfer+0xc8>)
 8008d4c:	400a      	ands	r2, r1
 8008d4e:	609a      	str	r2, [r3, #8]
 8008d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d52:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d56:	f383 8810 	msr	PRIMASK, r3
}
 8008d5a:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008d60:	2b01      	cmp	r3, #1
 8008d62:	d118      	bne.n	8008d96 <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008d64:	f3ef 8310 	mrs	r3, PRIMASK
 8008d68:	60bb      	str	r3, [r7, #8]
  return(result);
 8008d6a:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008d6e:	2301      	movs	r3, #1
 8008d70:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	f383 8810 	msr	PRIMASK, r3
}
 8008d78:	46c0      	nop			; (mov r8, r8)
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	681a      	ldr	r2, [r3, #0]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	2110      	movs	r1, #16
 8008d86:	438a      	bics	r2, r1
 8008d88:	601a      	str	r2, [r3, #0]
 8008d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008d8e:	693b      	ldr	r3, [r7, #16]
 8008d90:	f383 8810 	msr	PRIMASK, r3
}
 8008d94:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	228c      	movs	r2, #140	; 0x8c
 8008d9a:	2120      	movs	r1, #32
 8008d9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	2200      	movs	r2, #0
 8008da2:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	2200      	movs	r2, #0
 8008da8:	675a      	str	r2, [r3, #116]	; 0x74
}
 8008daa:	46c0      	nop			; (mov r8, r8)
 8008dac:	46bd      	mov	sp, r7
 8008dae:	b00e      	add	sp, #56	; 0x38
 8008db0:	bd80      	pop	{r7, pc}
 8008db2:	46c0      	nop			; (mov r8, r8)
 8008db4:	fffffedf 	.word	0xfffffedf
 8008db8:	effffffe 	.word	0xeffffffe

08008dbc <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008dbc:	b580      	push	{r7, lr}
 8008dbe:	b084      	sub	sp, #16
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008dc8:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	225e      	movs	r2, #94	; 0x5e
 8008dce:	2100      	movs	r1, #0
 8008dd0:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	2256      	movs	r2, #86	; 0x56
 8008dd6:	2100      	movs	r1, #0
 8008dd8:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	0018      	movs	r0, r3
 8008dde:	f7ff f9cf 	bl	8008180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008de2:	46c0      	nop			; (mov r8, r8)
 8008de4:	46bd      	mov	sp, r7
 8008de6:	b004      	add	sp, #16
 8008de8:	bd80      	pop	{r7, pc}

08008dea <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dea:	b580      	push	{r7, lr}
 8008dec:	b086      	sub	sp, #24
 8008dee:	af00      	add	r7, sp, #0
 8008df0:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008df2:	f3ef 8310 	mrs	r3, PRIMASK
 8008df6:	60bb      	str	r3, [r7, #8]
  return(result);
 8008df8:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008dfa:	617b      	str	r3, [r7, #20]
 8008dfc:	2301      	movs	r3, #1
 8008dfe:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	f383 8810 	msr	PRIMASK, r3
}
 8008e06:	46c0      	nop			; (mov r8, r8)
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	681a      	ldr	r2, [r3, #0]
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2140      	movs	r1, #64	; 0x40
 8008e14:	438a      	bics	r2, r1
 8008e16:	601a      	str	r2, [r3, #0]
 8008e18:	697b      	ldr	r3, [r7, #20]
 8008e1a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008e1c:	693b      	ldr	r3, [r7, #16]
 8008e1e:	f383 8810 	msr	PRIMASK, r3
}
 8008e22:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2288      	movs	r2, #136	; 0x88
 8008e28:	2120      	movs	r1, #32
 8008e2a:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2200      	movs	r2, #0
 8008e30:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	0018      	movs	r0, r3
 8008e36:	f7ff f993 	bl	8008160 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008e3a:	46c0      	nop			; (mov r8, r8)
 8008e3c:	46bd      	mov	sp, r7
 8008e3e:	b006      	add	sp, #24
 8008e40:	bd80      	pop	{r7, pc}
	...

08008e44 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008e44:	b580      	push	{r7, lr}
 8008e46:	b094      	sub	sp, #80	; 0x50
 8008e48:	af00      	add	r7, sp, #0
 8008e4a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008e4c:	204e      	movs	r0, #78	; 0x4e
 8008e4e:	183b      	adds	r3, r7, r0
 8008e50:	687a      	ldr	r2, [r7, #4]
 8008e52:	2160      	movs	r1, #96	; 0x60
 8008e54:	5a52      	ldrh	r2, [r2, r1]
 8008e56:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e58:	687b      	ldr	r3, [r7, #4]
 8008e5a:	228c      	movs	r2, #140	; 0x8c
 8008e5c:	589b      	ldr	r3, [r3, r2]
 8008e5e:	2b22      	cmp	r3, #34	; 0x22
 8008e60:	d000      	beq.n	8008e64 <UART_RxISR_8BIT+0x20>
 8008e62:	e0bf      	b.n	8008fe4 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008e6a:	214c      	movs	r1, #76	; 0x4c
 8008e6c:	187b      	adds	r3, r7, r1
 8008e6e:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008e70:	187b      	adds	r3, r7, r1
 8008e72:	881b      	ldrh	r3, [r3, #0]
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	183b      	adds	r3, r7, r0
 8008e78:	881b      	ldrh	r3, [r3, #0]
 8008e7a:	b2d9      	uxtb	r1, r3
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e80:	400a      	ands	r2, r1
 8008e82:	b2d2      	uxtb	r2, r2
 8008e84:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008e86:	687b      	ldr	r3, [r7, #4]
 8008e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008e8a:	1c5a      	adds	r2, r3, #1
 8008e8c:	687b      	ldr	r3, [r7, #4]
 8008e8e:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	225e      	movs	r2, #94	; 0x5e
 8008e94:	5a9b      	ldrh	r3, [r3, r2]
 8008e96:	b29b      	uxth	r3, r3
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	b299      	uxth	r1, r3
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	225e      	movs	r2, #94	; 0x5e
 8008ea0:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	225e      	movs	r2, #94	; 0x5e
 8008ea6:	5a9b      	ldrh	r3, [r3, r2]
 8008ea8:	b29b      	uxth	r3, r3
 8008eaa:	2b00      	cmp	r3, #0
 8008eac:	d000      	beq.n	8008eb0 <UART_RxISR_8BIT+0x6c>
 8008eae:	e0a1      	b.n	8008ff4 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008eb0:	f3ef 8310 	mrs	r3, PRIMASK
 8008eb4:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eb8:	64bb      	str	r3, [r7, #72]	; 0x48
 8008eba:	2301      	movs	r3, #1
 8008ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ec0:	f383 8810 	msr	PRIMASK, r3
}
 8008ec4:	46c0      	nop			; (mov r8, r8)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	494a      	ldr	r1, [pc, #296]	; (8008ffc <UART_RxISR_8BIT+0x1b8>)
 8008ed2:	400a      	ands	r2, r1
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008ed8:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008edc:	f383 8810 	msr	PRIMASK, r3
}
 8008ee0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008ee2:	f3ef 8310 	mrs	r3, PRIMASK
 8008ee6:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008ee8:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008eea:	647b      	str	r3, [r7, #68]	; 0x44
 8008eec:	2301      	movs	r3, #1
 8008eee:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ef0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008ef2:	f383 8810 	msr	PRIMASK, r3
}
 8008ef6:	46c0      	nop			; (mov r8, r8)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	689a      	ldr	r2, [r3, #8]
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	2101      	movs	r1, #1
 8008f04:	438a      	bics	r2, r1
 8008f06:	609a      	str	r2, [r3, #8]
 8008f08:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f0a:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f0e:	f383 8810 	msr	PRIMASK, r3
}
 8008f12:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f14:	687b      	ldr	r3, [r7, #4]
 8008f16:	228c      	movs	r2, #140	; 0x8c
 8008f18:	2120      	movs	r1, #32
 8008f1a:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	4a34      	ldr	r2, [pc, #208]	; (8009000 <UART_RxISR_8BIT+0x1bc>)
 8008f2e:	4293      	cmp	r3, r2
 8008f30:	d01f      	beq.n	8008f72 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f32:	687b      	ldr	r3, [r7, #4]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	685a      	ldr	r2, [r3, #4]
 8008f38:	2380      	movs	r3, #128	; 0x80
 8008f3a:	041b      	lsls	r3, r3, #16
 8008f3c:	4013      	ands	r3, r2
 8008f3e:	d018      	beq.n	8008f72 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f40:	f3ef 8310 	mrs	r3, PRIMASK
 8008f44:	61bb      	str	r3, [r7, #24]
  return(result);
 8008f46:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f48:	643b      	str	r3, [r7, #64]	; 0x40
 8008f4a:	2301      	movs	r3, #1
 8008f4c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f4e:	69fb      	ldr	r3, [r7, #28]
 8008f50:	f383 8810 	msr	PRIMASK, r3
}
 8008f54:	46c0      	nop			; (mov r8, r8)
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	681a      	ldr	r2, [r3, #0]
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	4928      	ldr	r1, [pc, #160]	; (8009004 <UART_RxISR_8BIT+0x1c0>)
 8008f62:	400a      	ands	r2, r1
 8008f64:	601a      	str	r2, [r3, #0]
 8008f66:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008f68:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f6a:	6a3b      	ldr	r3, [r7, #32]
 8008f6c:	f383 8810 	msr	PRIMASK, r3
}
 8008f70:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f76:	2b01      	cmp	r3, #1
 8008f78:	d12f      	bne.n	8008fda <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	2200      	movs	r2, #0
 8008f7e:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008f80:	f3ef 8310 	mrs	r3, PRIMASK
 8008f84:	60fb      	str	r3, [r7, #12]
  return(result);
 8008f86:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f88:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008f8e:	693b      	ldr	r3, [r7, #16]
 8008f90:	f383 8810 	msr	PRIMASK, r3
}
 8008f94:	46c0      	nop			; (mov r8, r8)
 8008f96:	687b      	ldr	r3, [r7, #4]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	681a      	ldr	r2, [r3, #0]
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2110      	movs	r1, #16
 8008fa2:	438a      	bics	r2, r1
 8008fa4:	601a      	str	r2, [r3, #0]
 8008fa6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008fa8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008faa:	697b      	ldr	r3, [r7, #20]
 8008fac:	f383 8810 	msr	PRIMASK, r3
}
 8008fb0:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	2210      	movs	r2, #16
 8008fba:	4013      	ands	r3, r2
 8008fbc:	2b10      	cmp	r3, #16
 8008fbe:	d103      	bne.n	8008fc8 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	2210      	movs	r2, #16
 8008fc6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	225c      	movs	r2, #92	; 0x5c
 8008fcc:	5a9a      	ldrh	r2, [r3, r2]
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	0011      	movs	r1, r2
 8008fd2:	0018      	movs	r0, r3
 8008fd4:	f7fc fb2a 	bl	800562c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fd8:	e00c      	b.n	8008ff4 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	0018      	movs	r0, r3
 8008fde:	f7ff f8c7 	bl	8008170 <HAL_UART_RxCpltCallback>
}
 8008fe2:	e007      	b.n	8008ff4 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	699a      	ldr	r2, [r3, #24]
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	681b      	ldr	r3, [r3, #0]
 8008fee:	2108      	movs	r1, #8
 8008ff0:	430a      	orrs	r2, r1
 8008ff2:	619a      	str	r2, [r3, #24]
}
 8008ff4:	46c0      	nop			; (mov r8, r8)
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	b014      	add	sp, #80	; 0x50
 8008ffa:	bd80      	pop	{r7, pc}
 8008ffc:	fffffedf 	.word	0xfffffedf
 8009000:	40008000 	.word	0x40008000
 8009004:	fbffffff 	.word	0xfbffffff

08009008 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b094      	sub	sp, #80	; 0x50
 800900c:	af00      	add	r7, sp, #0
 800900e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8009010:	204e      	movs	r0, #78	; 0x4e
 8009012:	183b      	adds	r3, r7, r0
 8009014:	687a      	ldr	r2, [r7, #4]
 8009016:	2160      	movs	r1, #96	; 0x60
 8009018:	5a52      	ldrh	r2, [r2, r1]
 800901a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800901c:	687b      	ldr	r3, [r7, #4]
 800901e:	228c      	movs	r2, #140	; 0x8c
 8009020:	589b      	ldr	r3, [r3, r2]
 8009022:	2b22      	cmp	r3, #34	; 0x22
 8009024:	d000      	beq.n	8009028 <UART_RxISR_16BIT+0x20>
 8009026:	e0bf      	b.n	80091a8 <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	681b      	ldr	r3, [r3, #0]
 800902c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800902e:	214c      	movs	r1, #76	; 0x4c
 8009030:	187b      	adds	r3, r7, r1
 8009032:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009038:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800903a:	187b      	adds	r3, r7, r1
 800903c:	183a      	adds	r2, r7, r0
 800903e:	881b      	ldrh	r3, [r3, #0]
 8009040:	8812      	ldrh	r2, [r2, #0]
 8009042:	4013      	ands	r3, r2
 8009044:	b29a      	uxth	r2, r3
 8009046:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009048:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904e:	1c9a      	adds	r2, r3, #2
 8009050:	687b      	ldr	r3, [r7, #4]
 8009052:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	225e      	movs	r2, #94	; 0x5e
 8009058:	5a9b      	ldrh	r3, [r3, r2]
 800905a:	b29b      	uxth	r3, r3
 800905c:	3b01      	subs	r3, #1
 800905e:	b299      	uxth	r1, r3
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	225e      	movs	r2, #94	; 0x5e
 8009064:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	225e      	movs	r2, #94	; 0x5e
 800906a:	5a9b      	ldrh	r3, [r3, r2]
 800906c:	b29b      	uxth	r3, r3
 800906e:	2b00      	cmp	r3, #0
 8009070:	d000      	beq.n	8009074 <UART_RxISR_16BIT+0x6c>
 8009072:	e0a1      	b.n	80091b8 <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009074:	f3ef 8310 	mrs	r3, PRIMASK
 8009078:	623b      	str	r3, [r7, #32]
  return(result);
 800907a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800907c:	647b      	str	r3, [r7, #68]	; 0x44
 800907e:	2301      	movs	r3, #1
 8009080:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009082:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009084:	f383 8810 	msr	PRIMASK, r3
}
 8009088:	46c0      	nop			; (mov r8, r8)
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	681a      	ldr	r2, [r3, #0]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	494a      	ldr	r1, [pc, #296]	; (80091c0 <UART_RxISR_16BIT+0x1b8>)
 8009096:	400a      	ands	r2, r1
 8009098:	601a      	str	r2, [r3, #0]
 800909a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800909c:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800909e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090a0:	f383 8810 	msr	PRIMASK, r3
}
 80090a4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80090a6:	f3ef 8310 	mrs	r3, PRIMASK
 80090aa:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80090ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80090ae:	643b      	str	r3, [r7, #64]	; 0x40
 80090b0:	2301      	movs	r3, #1
 80090b2:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b6:	f383 8810 	msr	PRIMASK, r3
}
 80090ba:	46c0      	nop			; (mov r8, r8)
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	681b      	ldr	r3, [r3, #0]
 80090c0:	689a      	ldr	r2, [r3, #8]
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	2101      	movs	r1, #1
 80090c8:	438a      	bics	r2, r1
 80090ca:	609a      	str	r2, [r3, #8]
 80090cc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80090ce:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80090d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80090d2:	f383 8810 	msr	PRIMASK, r3
}
 80090d6:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	228c      	movs	r2, #140	; 0x8c
 80090dc:	2120      	movs	r1, #32
 80090de:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	2200      	movs	r2, #0
 80090e4:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	2200      	movs	r2, #0
 80090ea:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80090ec:	687b      	ldr	r3, [r7, #4]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a34      	ldr	r2, [pc, #208]	; (80091c4 <UART_RxISR_16BIT+0x1bc>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d01f      	beq.n	8009136 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	685a      	ldr	r2, [r3, #4]
 80090fc:	2380      	movs	r3, #128	; 0x80
 80090fe:	041b      	lsls	r3, r3, #16
 8009100:	4013      	ands	r3, r2
 8009102:	d018      	beq.n	8009136 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009104:	f3ef 8310 	mrs	r3, PRIMASK
 8009108:	617b      	str	r3, [r7, #20]
  return(result);
 800910a:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800910c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800910e:	2301      	movs	r3, #1
 8009110:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009112:	69bb      	ldr	r3, [r7, #24]
 8009114:	f383 8810 	msr	PRIMASK, r3
}
 8009118:	46c0      	nop			; (mov r8, r8)
 800911a:	687b      	ldr	r3, [r7, #4]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	681a      	ldr	r2, [r3, #0]
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	4928      	ldr	r1, [pc, #160]	; (80091c8 <UART_RxISR_16BIT+0x1c0>)
 8009126:	400a      	ands	r2, r1
 8009128:	601a      	str	r2, [r3, #0]
 800912a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800912c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800912e:	69fb      	ldr	r3, [r7, #28]
 8009130:	f383 8810 	msr	PRIMASK, r3
}
 8009134:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800913a:	2b01      	cmp	r3, #1
 800913c:	d12f      	bne.n	800919e <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009144:	f3ef 8310 	mrs	r3, PRIMASK
 8009148:	60bb      	str	r3, [r7, #8]
  return(result);
 800914a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800914c:	63bb      	str	r3, [r7, #56]	; 0x38
 800914e:	2301      	movs	r3, #1
 8009150:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009152:	68fb      	ldr	r3, [r7, #12]
 8009154:	f383 8810 	msr	PRIMASK, r3
}
 8009158:	46c0      	nop			; (mov r8, r8)
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	681a      	ldr	r2, [r3, #0]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	2110      	movs	r1, #16
 8009166:	438a      	bics	r2, r1
 8009168:	601a      	str	r2, [r3, #0]
 800916a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800916e:	693b      	ldr	r3, [r7, #16]
 8009170:	f383 8810 	msr	PRIMASK, r3
}
 8009174:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009176:	687b      	ldr	r3, [r7, #4]
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	69db      	ldr	r3, [r3, #28]
 800917c:	2210      	movs	r2, #16
 800917e:	4013      	ands	r3, r2
 8009180:	2b10      	cmp	r3, #16
 8009182:	d103      	bne.n	800918c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	2210      	movs	r2, #16
 800918a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800918c:	687b      	ldr	r3, [r7, #4]
 800918e:	225c      	movs	r2, #92	; 0x5c
 8009190:	5a9a      	ldrh	r2, [r3, r2]
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	0011      	movs	r1, r2
 8009196:	0018      	movs	r0, r3
 8009198:	f7fc fa48 	bl	800562c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800919c:	e00c      	b.n	80091b8 <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	0018      	movs	r0, r3
 80091a2:	f7fe ffe5 	bl	8008170 <HAL_UART_RxCpltCallback>
}
 80091a6:	e007      	b.n	80091b8 <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699a      	ldr	r2, [r3, #24]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	2108      	movs	r1, #8
 80091b4:	430a      	orrs	r2, r1
 80091b6:	619a      	str	r2, [r3, #24]
}
 80091b8:	46c0      	nop			; (mov r8, r8)
 80091ba:	46bd      	mov	sp, r7
 80091bc:	b014      	add	sp, #80	; 0x50
 80091be:	bd80      	pop	{r7, pc}
 80091c0:	fffffedf 	.word	0xfffffedf
 80091c4:	40008000 	.word	0x40008000
 80091c8:	fbffffff 	.word	0xfbffffff

080091cc <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80091cc:	b580      	push	{r7, lr}
 80091ce:	b0a0      	sub	sp, #128	; 0x80
 80091d0:	af00      	add	r7, sp, #0
 80091d2:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80091d4:	237a      	movs	r3, #122	; 0x7a
 80091d6:	18fb      	adds	r3, r7, r3
 80091d8:	687a      	ldr	r2, [r7, #4]
 80091da:	2160      	movs	r1, #96	; 0x60
 80091dc:	5a52      	ldrh	r2, [r2, r1]
 80091de:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	69db      	ldr	r3, [r3, #28]
 80091e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	681b      	ldr	r3, [r3, #0]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	689b      	ldr	r3, [r3, #8]
 80091f6:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	228c      	movs	r2, #140	; 0x8c
 80091fc:	589b      	ldr	r3, [r3, r2]
 80091fe:	2b22      	cmp	r3, #34	; 0x22
 8009200:	d000      	beq.n	8009204 <UART_RxISR_8BIT_FIFOEN+0x38>
 8009202:	e16a      	b.n	80094da <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009204:	236e      	movs	r3, #110	; 0x6e
 8009206:	18fb      	adds	r3, r7, r3
 8009208:	687a      	ldr	r2, [r7, #4]
 800920a:	2168      	movs	r1, #104	; 0x68
 800920c:	5a52      	ldrh	r2, [r2, r1]
 800920e:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009210:	e111      	b.n	8009436 <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009218:	216c      	movs	r1, #108	; 0x6c
 800921a:	187b      	adds	r3, r7, r1
 800921c:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800921e:	187b      	adds	r3, r7, r1
 8009220:	881b      	ldrh	r3, [r3, #0]
 8009222:	b2da      	uxtb	r2, r3
 8009224:	237a      	movs	r3, #122	; 0x7a
 8009226:	18fb      	adds	r3, r7, r3
 8009228:	881b      	ldrh	r3, [r3, #0]
 800922a:	b2d9      	uxtb	r1, r3
 800922c:	687b      	ldr	r3, [r7, #4]
 800922e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009230:	400a      	ands	r2, r1
 8009232:	b2d2      	uxtb	r2, r2
 8009234:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800923a:	1c5a      	adds	r2, r3, #1
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	225e      	movs	r2, #94	; 0x5e
 8009244:	5a9b      	ldrh	r3, [r3, r2]
 8009246:	b29b      	uxth	r3, r3
 8009248:	3b01      	subs	r3, #1
 800924a:	b299      	uxth	r1, r3
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	225e      	movs	r2, #94	; 0x5e
 8009250:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	69db      	ldr	r3, [r3, #28]
 8009258:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800925a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800925c:	2207      	movs	r2, #7
 800925e:	4013      	ands	r3, r2
 8009260:	d049      	beq.n	80092f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009262:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009264:	2201      	movs	r2, #1
 8009266:	4013      	ands	r3, r2
 8009268:	d010      	beq.n	800928c <UART_RxISR_8BIT_FIFOEN+0xc0>
 800926a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800926c:	2380      	movs	r3, #128	; 0x80
 800926e:	005b      	lsls	r3, r3, #1
 8009270:	4013      	ands	r3, r2
 8009272:	d00b      	beq.n	800928c <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	681b      	ldr	r3, [r3, #0]
 8009278:	2201      	movs	r2, #1
 800927a:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	2290      	movs	r2, #144	; 0x90
 8009280:	589b      	ldr	r3, [r3, r2]
 8009282:	2201      	movs	r2, #1
 8009284:	431a      	orrs	r2, r3
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2190      	movs	r1, #144	; 0x90
 800928a:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800928c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800928e:	2202      	movs	r2, #2
 8009290:	4013      	ands	r3, r2
 8009292:	d00f      	beq.n	80092b4 <UART_RxISR_8BIT_FIFOEN+0xe8>
 8009294:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009296:	2201      	movs	r2, #1
 8009298:	4013      	ands	r3, r2
 800929a:	d00b      	beq.n	80092b4 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800929c:	687b      	ldr	r3, [r7, #4]
 800929e:	681b      	ldr	r3, [r3, #0]
 80092a0:	2202      	movs	r2, #2
 80092a2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2290      	movs	r2, #144	; 0x90
 80092a8:	589b      	ldr	r3, [r3, r2]
 80092aa:	2204      	movs	r2, #4
 80092ac:	431a      	orrs	r2, r3
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	2190      	movs	r1, #144	; 0x90
 80092b2:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80092b4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80092b6:	2204      	movs	r2, #4
 80092b8:	4013      	ands	r3, r2
 80092ba:	d00f      	beq.n	80092dc <UART_RxISR_8BIT_FIFOEN+0x110>
 80092bc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092be:	2201      	movs	r2, #1
 80092c0:	4013      	ands	r3, r2
 80092c2:	d00b      	beq.n	80092dc <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	2204      	movs	r2, #4
 80092ca:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2290      	movs	r2, #144	; 0x90
 80092d0:	589b      	ldr	r3, [r3, r2]
 80092d2:	2202      	movs	r2, #2
 80092d4:	431a      	orrs	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2190      	movs	r1, #144	; 0x90
 80092da:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	2290      	movs	r2, #144	; 0x90
 80092e0:	589b      	ldr	r3, [r3, r2]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d007      	beq.n	80092f6 <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	0018      	movs	r0, r3
 80092ea:	f7fe ff49 	bl	8008180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2290      	movs	r2, #144	; 0x90
 80092f2:	2100      	movs	r1, #0
 80092f4:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 80092f6:	687b      	ldr	r3, [r7, #4]
 80092f8:	225e      	movs	r2, #94	; 0x5e
 80092fa:	5a9b      	ldrh	r3, [r3, r2]
 80092fc:	b29b      	uxth	r3, r3
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d000      	beq.n	8009304 <UART_RxISR_8BIT_FIFOEN+0x138>
 8009302:	e098      	b.n	8009436 <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009304:	f3ef 8310 	mrs	r3, PRIMASK
 8009308:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800930a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800930c:	66bb      	str	r3, [r7, #104]	; 0x68
 800930e:	2301      	movs	r3, #1
 8009310:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009312:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009314:	f383 8810 	msr	PRIMASK, r3
}
 8009318:	46c0      	nop			; (mov r8, r8)
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	681a      	ldr	r2, [r3, #0]
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	4973      	ldr	r1, [pc, #460]	; (80094f4 <UART_RxISR_8BIT_FIFOEN+0x328>)
 8009326:	400a      	ands	r2, r1
 8009328:	601a      	str	r2, [r3, #0]
 800932a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800932c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800932e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009330:	f383 8810 	msr	PRIMASK, r3
}
 8009334:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009336:	f3ef 8310 	mrs	r3, PRIMASK
 800933a:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 800933c:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800933e:	667b      	str	r3, [r7, #100]	; 0x64
 8009340:	2301      	movs	r3, #1
 8009342:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009344:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009346:	f383 8810 	msr	PRIMASK, r3
}
 800934a:	46c0      	nop			; (mov r8, r8)
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	689a      	ldr	r2, [r3, #8]
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	4968      	ldr	r1, [pc, #416]	; (80094f8 <UART_RxISR_8BIT_FIFOEN+0x32c>)
 8009358:	400a      	ands	r2, r1
 800935a:	609a      	str	r2, [r3, #8]
 800935c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800935e:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009360:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009362:	f383 8810 	msr	PRIMASK, r3
}
 8009366:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	228c      	movs	r2, #140	; 0x8c
 800936c:	2120      	movs	r1, #32
 800936e:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	2200      	movs	r2, #0
 8009374:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	2200      	movs	r2, #0
 800937a:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800937c:	687b      	ldr	r3, [r7, #4]
 800937e:	681b      	ldr	r3, [r3, #0]
 8009380:	4a5e      	ldr	r2, [pc, #376]	; (80094fc <UART_RxISR_8BIT_FIFOEN+0x330>)
 8009382:	4293      	cmp	r3, r2
 8009384:	d01f      	beq.n	80093c6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	685a      	ldr	r2, [r3, #4]
 800938c:	2380      	movs	r3, #128	; 0x80
 800938e:	041b      	lsls	r3, r3, #16
 8009390:	4013      	ands	r3, r2
 8009392:	d018      	beq.n	80093c6 <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009394:	f3ef 8310 	mrs	r3, PRIMASK
 8009398:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 800939a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800939c:	663b      	str	r3, [r7, #96]	; 0x60
 800939e:	2301      	movs	r3, #1
 80093a0:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80093a4:	f383 8810 	msr	PRIMASK, r3
}
 80093a8:	46c0      	nop			; (mov r8, r8)
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	681a      	ldr	r2, [r3, #0]
 80093b0:	687b      	ldr	r3, [r7, #4]
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	4952      	ldr	r1, [pc, #328]	; (8009500 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80093b6:	400a      	ands	r2, r1
 80093b8:	601a      	str	r2, [r3, #0]
 80093ba:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80093bc:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093c0:	f383 8810 	msr	PRIMASK, r3
}
 80093c4:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80093ca:	2b01      	cmp	r3, #1
 80093cc:	d12f      	bne.n	800942e <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ce:	687b      	ldr	r3, [r7, #4]
 80093d0:	2200      	movs	r2, #0
 80093d2:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80093d4:	f3ef 8310 	mrs	r3, PRIMASK
 80093d8:	623b      	str	r3, [r7, #32]
  return(result);
 80093da:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093de:	2301      	movs	r3, #1
 80093e0:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093e4:	f383 8810 	msr	PRIMASK, r3
}
 80093e8:	46c0      	nop			; (mov r8, r8)
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681a      	ldr	r2, [r3, #0]
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2110      	movs	r1, #16
 80093f6:	438a      	bics	r2, r1
 80093f8:	601a      	str	r2, [r3, #0]
 80093fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80093fc:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80093fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009400:	f383 8810 	msr	PRIMASK, r3
}
 8009404:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	69db      	ldr	r3, [r3, #28]
 800940c:	2210      	movs	r2, #16
 800940e:	4013      	ands	r3, r2
 8009410:	2b10      	cmp	r3, #16
 8009412:	d103      	bne.n	800941c <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2210      	movs	r2, #16
 800941a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800941c:	687b      	ldr	r3, [r7, #4]
 800941e:	225c      	movs	r2, #92	; 0x5c
 8009420:	5a9a      	ldrh	r2, [r3, r2]
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	0011      	movs	r1, r2
 8009426:	0018      	movs	r0, r3
 8009428:	f7fc f900 	bl	800562c <HAL_UARTEx_RxEventCallback>
 800942c:	e003      	b.n	8009436 <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	0018      	movs	r0, r3
 8009432:	f7fe fe9d 	bl	8008170 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009436:	236e      	movs	r3, #110	; 0x6e
 8009438:	18fb      	adds	r3, r7, r3
 800943a:	881b      	ldrh	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d004      	beq.n	800944a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8009440:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009442:	2220      	movs	r2, #32
 8009444:	4013      	ands	r3, r2
 8009446:	d000      	beq.n	800944a <UART_RxISR_8BIT_FIFOEN+0x27e>
 8009448:	e6e3      	b.n	8009212 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800944a:	205a      	movs	r0, #90	; 0x5a
 800944c:	183b      	adds	r3, r7, r0
 800944e:	687a      	ldr	r2, [r7, #4]
 8009450:	215e      	movs	r1, #94	; 0x5e
 8009452:	5a52      	ldrh	r2, [r2, r1]
 8009454:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009456:	0001      	movs	r1, r0
 8009458:	187b      	adds	r3, r7, r1
 800945a:	881b      	ldrh	r3, [r3, #0]
 800945c:	2b00      	cmp	r3, #0
 800945e:	d044      	beq.n	80094ea <UART_RxISR_8BIT_FIFOEN+0x31e>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	2268      	movs	r2, #104	; 0x68
 8009464:	5a9b      	ldrh	r3, [r3, r2]
 8009466:	187a      	adds	r2, r7, r1
 8009468:	8812      	ldrh	r2, [r2, #0]
 800946a:	429a      	cmp	r2, r3
 800946c:	d23d      	bcs.n	80094ea <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800946e:	f3ef 8310 	mrs	r3, PRIMASK
 8009472:	60bb      	str	r3, [r7, #8]
  return(result);
 8009474:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009476:	657b      	str	r3, [r7, #84]	; 0x54
 8009478:	2301      	movs	r3, #1
 800947a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f383 8810 	msr	PRIMASK, r3
}
 8009482:	46c0      	nop			; (mov r8, r8)
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	681b      	ldr	r3, [r3, #0]
 8009488:	689a      	ldr	r2, [r3, #8]
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	491d      	ldr	r1, [pc, #116]	; (8009504 <UART_RxISR_8BIT_FIFOEN+0x338>)
 8009490:	400a      	ands	r2, r1
 8009492:	609a      	str	r2, [r3, #8]
 8009494:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009496:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009498:	693b      	ldr	r3, [r7, #16]
 800949a:	f383 8810 	msr	PRIMASK, r3
}
 800949e:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80094a0:	687b      	ldr	r3, [r7, #4]
 80094a2:	4a19      	ldr	r2, [pc, #100]	; (8009508 <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80094a4:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80094a6:	f3ef 8310 	mrs	r3, PRIMASK
 80094aa:	617b      	str	r3, [r7, #20]
  return(result);
 80094ac:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80094ae:	653b      	str	r3, [r7, #80]	; 0x50
 80094b0:	2301      	movs	r3, #1
 80094b2:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094b4:	69bb      	ldr	r3, [r7, #24]
 80094b6:	f383 8810 	msr	PRIMASK, r3
}
 80094ba:	46c0      	nop			; (mov r8, r8)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681a      	ldr	r2, [r3, #0]
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	681b      	ldr	r3, [r3, #0]
 80094c6:	2120      	movs	r1, #32
 80094c8:	430a      	orrs	r2, r1
 80094ca:	601a      	str	r2, [r3, #0]
 80094cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ce:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80094d0:	69fb      	ldr	r3, [r7, #28]
 80094d2:	f383 8810 	msr	PRIMASK, r3
}
 80094d6:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80094d8:	e007      	b.n	80094ea <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	681b      	ldr	r3, [r3, #0]
 80094de:	699a      	ldr	r2, [r3, #24]
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	2108      	movs	r1, #8
 80094e6:	430a      	orrs	r2, r1
 80094e8:	619a      	str	r2, [r3, #24]
}
 80094ea:	46c0      	nop			; (mov r8, r8)
 80094ec:	46bd      	mov	sp, r7
 80094ee:	b020      	add	sp, #128	; 0x80
 80094f0:	bd80      	pop	{r7, pc}
 80094f2:	46c0      	nop			; (mov r8, r8)
 80094f4:	fffffeff 	.word	0xfffffeff
 80094f8:	effffffe 	.word	0xeffffffe
 80094fc:	40008000 	.word	0x40008000
 8009500:	fbffffff 	.word	0xfbffffff
 8009504:	efffffff 	.word	0xefffffff
 8009508:	08008e45 	.word	0x08008e45

0800950c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800950c:	b580      	push	{r7, lr}
 800950e:	b0a2      	sub	sp, #136	; 0x88
 8009510:	af00      	add	r7, sp, #0
 8009512:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009514:	2382      	movs	r3, #130	; 0x82
 8009516:	18fb      	adds	r3, r7, r3
 8009518:	687a      	ldr	r2, [r7, #4]
 800951a:	2160      	movs	r1, #96	; 0x60
 800951c:	5a52      	ldrh	r2, [r2, r1]
 800951e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009520:	687b      	ldr	r3, [r7, #4]
 8009522:	681b      	ldr	r3, [r3, #0]
 8009524:	69db      	ldr	r3, [r3, #28]
 8009526:	2284      	movs	r2, #132	; 0x84
 8009528:	18ba      	adds	r2, r7, r2
 800952a:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	681b      	ldr	r3, [r3, #0]
 8009532:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009534:	687b      	ldr	r3, [r7, #4]
 8009536:	681b      	ldr	r3, [r3, #0]
 8009538:	689b      	ldr	r3, [r3, #8]
 800953a:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	228c      	movs	r2, #140	; 0x8c
 8009540:	589b      	ldr	r3, [r3, r2]
 8009542:	2b22      	cmp	r3, #34	; 0x22
 8009544:	d000      	beq.n	8009548 <UART_RxISR_16BIT_FIFOEN+0x3c>
 8009546:	e174      	b.n	8009832 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009548:	2376      	movs	r3, #118	; 0x76
 800954a:	18fb      	adds	r3, r7, r3
 800954c:	687a      	ldr	r2, [r7, #4]
 800954e:	2168      	movs	r1, #104	; 0x68
 8009550:	5a52      	ldrh	r2, [r2, r1]
 8009552:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009554:	e119      	b.n	800978a <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800955c:	2174      	movs	r1, #116	; 0x74
 800955e:	187b      	adds	r3, r7, r1
 8009560:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8009562:	687b      	ldr	r3, [r7, #4]
 8009564:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009566:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 8009568:	187b      	adds	r3, r7, r1
 800956a:	2282      	movs	r2, #130	; 0x82
 800956c:	18ba      	adds	r2, r7, r2
 800956e:	881b      	ldrh	r3, [r3, #0]
 8009570:	8812      	ldrh	r2, [r2, #0]
 8009572:	4013      	ands	r3, r2
 8009574:	b29a      	uxth	r2, r3
 8009576:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009578:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800957a:	687b      	ldr	r3, [r7, #4]
 800957c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800957e:	1c9a      	adds	r2, r3, #2
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009584:	687b      	ldr	r3, [r7, #4]
 8009586:	225e      	movs	r2, #94	; 0x5e
 8009588:	5a9b      	ldrh	r3, [r3, r2]
 800958a:	b29b      	uxth	r3, r3
 800958c:	3b01      	subs	r3, #1
 800958e:	b299      	uxth	r1, r3
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	225e      	movs	r2, #94	; 0x5e
 8009594:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8009596:	687b      	ldr	r3, [r7, #4]
 8009598:	681b      	ldr	r3, [r3, #0]
 800959a:	69db      	ldr	r3, [r3, #28]
 800959c:	2184      	movs	r1, #132	; 0x84
 800959e:	187a      	adds	r2, r7, r1
 80095a0:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80095a2:	187b      	adds	r3, r7, r1
 80095a4:	681b      	ldr	r3, [r3, #0]
 80095a6:	2207      	movs	r2, #7
 80095a8:	4013      	ands	r3, r2
 80095aa:	d04e      	beq.n	800964a <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095ac:	187b      	adds	r3, r7, r1
 80095ae:	681b      	ldr	r3, [r3, #0]
 80095b0:	2201      	movs	r2, #1
 80095b2:	4013      	ands	r3, r2
 80095b4:	d010      	beq.n	80095d8 <UART_RxISR_16BIT_FIFOEN+0xcc>
 80095b6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80095b8:	2380      	movs	r3, #128	; 0x80
 80095ba:	005b      	lsls	r3, r3, #1
 80095bc:	4013      	ands	r3, r2
 80095be:	d00b      	beq.n	80095d8 <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	681b      	ldr	r3, [r3, #0]
 80095c4:	2201      	movs	r2, #1
 80095c6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	2290      	movs	r2, #144	; 0x90
 80095cc:	589b      	ldr	r3, [r3, r2]
 80095ce:	2201      	movs	r2, #1
 80095d0:	431a      	orrs	r2, r3
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	2190      	movs	r1, #144	; 0x90
 80095d6:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80095d8:	2384      	movs	r3, #132	; 0x84
 80095da:	18fb      	adds	r3, r7, r3
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	2202      	movs	r2, #2
 80095e0:	4013      	ands	r3, r2
 80095e2:	d00f      	beq.n	8009604 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80095e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80095e6:	2201      	movs	r2, #1
 80095e8:	4013      	ands	r3, r2
 80095ea:	d00b      	beq.n	8009604 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	681b      	ldr	r3, [r3, #0]
 80095f0:	2202      	movs	r2, #2
 80095f2:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	2290      	movs	r2, #144	; 0x90
 80095f8:	589b      	ldr	r3, [r3, r2]
 80095fa:	2204      	movs	r2, #4
 80095fc:	431a      	orrs	r2, r3
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	2190      	movs	r1, #144	; 0x90
 8009602:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009604:	2384      	movs	r3, #132	; 0x84
 8009606:	18fb      	adds	r3, r7, r3
 8009608:	681b      	ldr	r3, [r3, #0]
 800960a:	2204      	movs	r2, #4
 800960c:	4013      	ands	r3, r2
 800960e:	d00f      	beq.n	8009630 <UART_RxISR_16BIT_FIFOEN+0x124>
 8009610:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009612:	2201      	movs	r2, #1
 8009614:	4013      	ands	r3, r2
 8009616:	d00b      	beq.n	8009630 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	2204      	movs	r2, #4
 800961e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2290      	movs	r2, #144	; 0x90
 8009624:	589b      	ldr	r3, [r3, r2]
 8009626:	2202      	movs	r2, #2
 8009628:	431a      	orrs	r2, r3
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	2190      	movs	r1, #144	; 0x90
 800962e:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	2290      	movs	r2, #144	; 0x90
 8009634:	589b      	ldr	r3, [r3, r2]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d007      	beq.n	800964a <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	0018      	movs	r0, r3
 800963e:	f7fe fd9f 	bl	8008180 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	2290      	movs	r2, #144	; 0x90
 8009646:	2100      	movs	r1, #0
 8009648:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	225e      	movs	r2, #94	; 0x5e
 800964e:	5a9b      	ldrh	r3, [r3, r2]
 8009650:	b29b      	uxth	r3, r3
 8009652:	2b00      	cmp	r3, #0
 8009654:	d000      	beq.n	8009658 <UART_RxISR_16BIT_FIFOEN+0x14c>
 8009656:	e098      	b.n	800978a <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009658:	f3ef 8310 	mrs	r3, PRIMASK
 800965c:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 800965e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009660:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009662:	2301      	movs	r3, #1
 8009664:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009666:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009668:	f383 8810 	msr	PRIMASK, r3
}
 800966c:	46c0      	nop			; (mov r8, r8)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	681b      	ldr	r3, [r3, #0]
 8009672:	681a      	ldr	r2, [r3, #0]
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4974      	ldr	r1, [pc, #464]	; (800984c <UART_RxISR_16BIT_FIFOEN+0x340>)
 800967a:	400a      	ands	r2, r1
 800967c:	601a      	str	r2, [r3, #0]
 800967e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009680:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009682:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009684:	f383 8810 	msr	PRIMASK, r3
}
 8009688:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800968a:	f3ef 8310 	mrs	r3, PRIMASK
 800968e:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8009690:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009692:	66bb      	str	r3, [r7, #104]	; 0x68
 8009694:	2301      	movs	r3, #1
 8009696:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009698:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800969a:	f383 8810 	msr	PRIMASK, r3
}
 800969e:	46c0      	nop			; (mov r8, r8)
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	689a      	ldr	r2, [r3, #8]
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4969      	ldr	r1, [pc, #420]	; (8009850 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80096ac:	400a      	ands	r2, r1
 80096ae:	609a      	str	r2, [r3, #8]
 80096b0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80096b2:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096b4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80096b6:	f383 8810 	msr	PRIMASK, r3
}
 80096ba:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	228c      	movs	r2, #140	; 0x8c
 80096c0:	2120      	movs	r1, #32
 80096c2:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	2200      	movs	r2, #0
 80096c8:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	2200      	movs	r2, #0
 80096ce:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	4a5f      	ldr	r2, [pc, #380]	; (8009854 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80096d6:	4293      	cmp	r3, r2
 80096d8:	d01f      	beq.n	800971a <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	685a      	ldr	r2, [r3, #4]
 80096e0:	2380      	movs	r3, #128	; 0x80
 80096e2:	041b      	lsls	r3, r3, #16
 80096e4:	4013      	ands	r3, r2
 80096e6:	d018      	beq.n	800971a <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80096e8:	f3ef 8310 	mrs	r3, PRIMASK
 80096ec:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 80096ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80096f0:	667b      	str	r3, [r7, #100]	; 0x64
 80096f2:	2301      	movs	r3, #1
 80096f4:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80096f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096f8:	f383 8810 	msr	PRIMASK, r3
}
 80096fc:	46c0      	nop			; (mov r8, r8)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	681a      	ldr	r2, [r3, #0]
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	681b      	ldr	r3, [r3, #0]
 8009708:	4953      	ldr	r1, [pc, #332]	; (8009858 <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800970a:	400a      	ands	r2, r1
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009710:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009712:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009714:	f383 8810 	msr	PRIMASK, r3
}
 8009718:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800971e:	2b01      	cmp	r3, #1
 8009720:	d12f      	bne.n	8009782 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	2200      	movs	r2, #0
 8009726:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009728:	f3ef 8310 	mrs	r3, PRIMASK
 800972c:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800972e:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009730:	663b      	str	r3, [r7, #96]	; 0x60
 8009732:	2301      	movs	r3, #1
 8009734:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009738:	f383 8810 	msr	PRIMASK, r3
}
 800973c:	46c0      	nop			; (mov r8, r8)
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681a      	ldr	r2, [r3, #0]
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	2110      	movs	r1, #16
 800974a:	438a      	bics	r2, r1
 800974c:	601a      	str	r2, [r3, #0]
 800974e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009750:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009752:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009754:	f383 8810 	msr	PRIMASK, r3
}
 8009758:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	69db      	ldr	r3, [r3, #28]
 8009760:	2210      	movs	r2, #16
 8009762:	4013      	ands	r3, r2
 8009764:	2b10      	cmp	r3, #16
 8009766:	d103      	bne.n	8009770 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009768:	687b      	ldr	r3, [r7, #4]
 800976a:	681b      	ldr	r3, [r3, #0]
 800976c:	2210      	movs	r2, #16
 800976e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	225c      	movs	r2, #92	; 0x5c
 8009774:	5a9a      	ldrh	r2, [r3, r2]
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	0011      	movs	r1, r2
 800977a:	0018      	movs	r0, r3
 800977c:	f7fb ff56 	bl	800562c <HAL_UARTEx_RxEventCallback>
 8009780:	e003      	b.n	800978a <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009782:	687b      	ldr	r3, [r7, #4]
 8009784:	0018      	movs	r0, r3
 8009786:	f7fe fcf3 	bl	8008170 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800978a:	2376      	movs	r3, #118	; 0x76
 800978c:	18fb      	adds	r3, r7, r3
 800978e:	881b      	ldrh	r3, [r3, #0]
 8009790:	2b00      	cmp	r3, #0
 8009792:	d006      	beq.n	80097a2 <UART_RxISR_16BIT_FIFOEN+0x296>
 8009794:	2384      	movs	r3, #132	; 0x84
 8009796:	18fb      	adds	r3, r7, r3
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	2220      	movs	r2, #32
 800979c:	4013      	ands	r3, r2
 800979e:	d000      	beq.n	80097a2 <UART_RxISR_16BIT_FIFOEN+0x296>
 80097a0:	e6d9      	b.n	8009556 <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80097a2:	205e      	movs	r0, #94	; 0x5e
 80097a4:	183b      	adds	r3, r7, r0
 80097a6:	687a      	ldr	r2, [r7, #4]
 80097a8:	215e      	movs	r1, #94	; 0x5e
 80097aa:	5a52      	ldrh	r2, [r2, r1]
 80097ac:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80097ae:	0001      	movs	r1, r0
 80097b0:	187b      	adds	r3, r7, r1
 80097b2:	881b      	ldrh	r3, [r3, #0]
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d044      	beq.n	8009842 <UART_RxISR_16BIT_FIFOEN+0x336>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	2268      	movs	r2, #104	; 0x68
 80097bc:	5a9b      	ldrh	r3, [r3, r2]
 80097be:	187a      	adds	r2, r7, r1
 80097c0:	8812      	ldrh	r2, [r2, #0]
 80097c2:	429a      	cmp	r2, r3
 80097c4:	d23d      	bcs.n	8009842 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097c6:	f3ef 8310 	mrs	r3, PRIMASK
 80097ca:	60fb      	str	r3, [r7, #12]
  return(result);
 80097cc:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097ce:	65bb      	str	r3, [r7, #88]	; 0x58
 80097d0:	2301      	movs	r3, #1
 80097d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097d4:	693b      	ldr	r3, [r7, #16]
 80097d6:	f383 8810 	msr	PRIMASK, r3
}
 80097da:	46c0      	nop			; (mov r8, r8)
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	689a      	ldr	r2, [r3, #8]
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	491d      	ldr	r1, [pc, #116]	; (800985c <UART_RxISR_16BIT_FIFOEN+0x350>)
 80097e8:	400a      	ands	r2, r1
 80097ea:	609a      	str	r2, [r3, #8]
 80097ec:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80097ee:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80097f0:	697b      	ldr	r3, [r7, #20]
 80097f2:	f383 8810 	msr	PRIMASK, r3
}
 80097f6:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	4a19      	ldr	r2, [pc, #100]	; (8009860 <UART_RxISR_16BIT_FIFOEN+0x354>)
 80097fc:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80097fe:	f3ef 8310 	mrs	r3, PRIMASK
 8009802:	61bb      	str	r3, [r7, #24]
  return(result);
 8009804:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009806:	657b      	str	r3, [r7, #84]	; 0x54
 8009808:	2301      	movs	r3, #1
 800980a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800980c:	69fb      	ldr	r3, [r7, #28]
 800980e:	f383 8810 	msr	PRIMASK, r3
}
 8009812:	46c0      	nop			; (mov r8, r8)
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	681a      	ldr	r2, [r3, #0]
 800981a:	687b      	ldr	r3, [r7, #4]
 800981c:	681b      	ldr	r3, [r3, #0]
 800981e:	2120      	movs	r1, #32
 8009820:	430a      	orrs	r2, r1
 8009822:	601a      	str	r2, [r3, #0]
 8009824:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009826:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009828:	6a3b      	ldr	r3, [r7, #32]
 800982a:	f383 8810 	msr	PRIMASK, r3
}
 800982e:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009830:	e007      	b.n	8009842 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009832:	687b      	ldr	r3, [r7, #4]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	699a      	ldr	r2, [r3, #24]
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	681b      	ldr	r3, [r3, #0]
 800983c:	2108      	movs	r1, #8
 800983e:	430a      	orrs	r2, r1
 8009840:	619a      	str	r2, [r3, #24]
}
 8009842:	46c0      	nop			; (mov r8, r8)
 8009844:	46bd      	mov	sp, r7
 8009846:	b022      	add	sp, #136	; 0x88
 8009848:	bd80      	pop	{r7, pc}
 800984a:	46c0      	nop			; (mov r8, r8)
 800984c:	fffffeff 	.word	0xfffffeff
 8009850:	effffffe 	.word	0xeffffffe
 8009854:	40008000 	.word	0x40008000
 8009858:	fbffffff 	.word	0xfbffffff
 800985c:	efffffff 	.word	0xefffffff
 8009860:	08009009 	.word	0x08009009

08009864 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009864:	b580      	push	{r7, lr}
 8009866:	b082      	sub	sp, #8
 8009868:	af00      	add	r7, sp, #0
 800986a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800986c:	46c0      	nop			; (mov r8, r8)
 800986e:	46bd      	mov	sp, r7
 8009870:	b002      	add	sp, #8
 8009872:	bd80      	pop	{r7, pc}

08009874 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009874:	b580      	push	{r7, lr}
 8009876:	b082      	sub	sp, #8
 8009878:	af00      	add	r7, sp, #0
 800987a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800987c:	46c0      	nop			; (mov r8, r8)
 800987e:	46bd      	mov	sp, r7
 8009880:	b002      	add	sp, #8
 8009882:	bd80      	pop	{r7, pc}

08009884 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009884:	b580      	push	{r7, lr}
 8009886:	b082      	sub	sp, #8
 8009888:	af00      	add	r7, sp, #0
 800988a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800988c:	46c0      	nop			; (mov r8, r8)
 800988e:	46bd      	mov	sp, r7
 8009890:	b002      	add	sp, #8
 8009892:	bd80      	pop	{r7, pc}

08009894 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2284      	movs	r2, #132	; 0x84
 80098a0:	5c9b      	ldrb	r3, [r3, r2]
 80098a2:	2b01      	cmp	r3, #1
 80098a4:	d101      	bne.n	80098aa <HAL_UARTEx_DisableFifoMode+0x16>
 80098a6:	2302      	movs	r3, #2
 80098a8:	e027      	b.n	80098fa <HAL_UARTEx_DisableFifoMode+0x66>
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2284      	movs	r2, #132	; 0x84
 80098ae:	2101      	movs	r1, #1
 80098b0:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	2288      	movs	r2, #136	; 0x88
 80098b6:	2124      	movs	r1, #36	; 0x24
 80098b8:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80098ba:	687b      	ldr	r3, [r7, #4]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	681b      	ldr	r3, [r3, #0]
 80098c0:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681a      	ldr	r2, [r3, #0]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	2101      	movs	r1, #1
 80098ce:	438a      	bics	r2, r1
 80098d0:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80098d2:	68fb      	ldr	r3, [r7, #12]
 80098d4:	4a0b      	ldr	r2, [pc, #44]	; (8009904 <HAL_UARTEx_DisableFifoMode+0x70>)
 80098d6:	4013      	ands	r3, r2
 80098d8:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	68fa      	ldr	r2, [r7, #12]
 80098e6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	2288      	movs	r2, #136	; 0x88
 80098ec:	2120      	movs	r1, #32
 80098ee:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	2284      	movs	r2, #132	; 0x84
 80098f4:	2100      	movs	r1, #0
 80098f6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80098f8:	2300      	movs	r3, #0
}
 80098fa:	0018      	movs	r0, r3
 80098fc:	46bd      	mov	sp, r7
 80098fe:	b004      	add	sp, #16
 8009900:	bd80      	pop	{r7, pc}
 8009902:	46c0      	nop			; (mov r8, r8)
 8009904:	dfffffff 	.word	0xdfffffff

08009908 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009908:	b580      	push	{r7, lr}
 800990a:	b084      	sub	sp, #16
 800990c:	af00      	add	r7, sp, #0
 800990e:	6078      	str	r0, [r7, #4]
 8009910:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	2284      	movs	r2, #132	; 0x84
 8009916:	5c9b      	ldrb	r3, [r3, r2]
 8009918:	2b01      	cmp	r3, #1
 800991a:	d101      	bne.n	8009920 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 800991c:	2302      	movs	r3, #2
 800991e:	e02e      	b.n	800997e <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	2284      	movs	r2, #132	; 0x84
 8009924:	2101      	movs	r1, #1
 8009926:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	2288      	movs	r2, #136	; 0x88
 800992c:	2124      	movs	r1, #36	; 0x24
 800992e:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009930:	687b      	ldr	r3, [r7, #4]
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	681a      	ldr	r2, [r3, #0]
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	681b      	ldr	r3, [r3, #0]
 8009942:	2101      	movs	r1, #1
 8009944:	438a      	bics	r2, r1
 8009946:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	689b      	ldr	r3, [r3, #8]
 800994e:	00db      	lsls	r3, r3, #3
 8009950:	08d9      	lsrs	r1, r3, #3
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	683a      	ldr	r2, [r7, #0]
 8009958:	430a      	orrs	r2, r1
 800995a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	0018      	movs	r0, r3
 8009960:	f000 f8b8 	bl	8009ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	68fa      	ldr	r2, [r7, #12]
 800996a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	2288      	movs	r2, #136	; 0x88
 8009970:	2120      	movs	r1, #32
 8009972:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009974:	687b      	ldr	r3, [r7, #4]
 8009976:	2284      	movs	r2, #132	; 0x84
 8009978:	2100      	movs	r1, #0
 800997a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800997c:	2300      	movs	r3, #0
}
 800997e:	0018      	movs	r0, r3
 8009980:	46bd      	mov	sp, r7
 8009982:	b004      	add	sp, #16
 8009984:	bd80      	pop	{r7, pc}
	...

08009988 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009988:	b580      	push	{r7, lr}
 800998a:	b084      	sub	sp, #16
 800998c:	af00      	add	r7, sp, #0
 800998e:	6078      	str	r0, [r7, #4]
 8009990:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	2284      	movs	r2, #132	; 0x84
 8009996:	5c9b      	ldrb	r3, [r3, r2]
 8009998:	2b01      	cmp	r3, #1
 800999a:	d101      	bne.n	80099a0 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800999c:	2302      	movs	r3, #2
 800999e:	e02f      	b.n	8009a00 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	2284      	movs	r2, #132	; 0x84
 80099a4:	2101      	movs	r1, #1
 80099a6:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	2288      	movs	r2, #136	; 0x88
 80099ac:	2124      	movs	r1, #36	; 0x24
 80099ae:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	681b      	ldr	r3, [r3, #0]
 80099b4:	681b      	ldr	r3, [r3, #0]
 80099b6:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80099b8:	687b      	ldr	r3, [r7, #4]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	681a      	ldr	r2, [r3, #0]
 80099be:	687b      	ldr	r3, [r7, #4]
 80099c0:	681b      	ldr	r3, [r3, #0]
 80099c2:	2101      	movs	r1, #1
 80099c4:	438a      	bics	r2, r1
 80099c6:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	689b      	ldr	r3, [r3, #8]
 80099ce:	4a0e      	ldr	r2, [pc, #56]	; (8009a08 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80099d0:	4013      	ands	r3, r2
 80099d2:	0019      	movs	r1, r3
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	683a      	ldr	r2, [r7, #0]
 80099da:	430a      	orrs	r2, r1
 80099dc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80099de:	687b      	ldr	r3, [r7, #4]
 80099e0:	0018      	movs	r0, r3
 80099e2:	f000 f877 	bl	8009ad4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68fa      	ldr	r2, [r7, #12]
 80099ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	2288      	movs	r2, #136	; 0x88
 80099f2:	2120      	movs	r1, #32
 80099f4:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	2284      	movs	r2, #132	; 0x84
 80099fa:	2100      	movs	r1, #0
 80099fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80099fe:	2300      	movs	r3, #0
}
 8009a00:	0018      	movs	r0, r3
 8009a02:	46bd      	mov	sp, r7
 8009a04:	b004      	add	sp, #16
 8009a06:	bd80      	pop	{r7, pc}
 8009a08:	f1ffffff 	.word	0xf1ffffff

08009a0c <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009a0c:	b580      	push	{r7, lr}
 8009a0e:	b08a      	sub	sp, #40	; 0x28
 8009a10:	af00      	add	r7, sp, #0
 8009a12:	60f8      	str	r0, [r7, #12]
 8009a14:	60b9      	str	r1, [r7, #8]
 8009a16:	1dbb      	adds	r3, r7, #6
 8009a18:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009a1a:	2327      	movs	r3, #39	; 0x27
 8009a1c:	18fb      	adds	r3, r7, r3
 8009a1e:	2200      	movs	r2, #0
 8009a20:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009a22:	68fb      	ldr	r3, [r7, #12]
 8009a24:	228c      	movs	r2, #140	; 0x8c
 8009a26:	589b      	ldr	r3, [r3, r2]
 8009a28:	2b20      	cmp	r3, #32
 8009a2a:	d14e      	bne.n	8009aca <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d003      	beq.n	8009a3a <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 8009a32:	1dbb      	adds	r3, r7, #6
 8009a34:	881b      	ldrh	r3, [r3, #0]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d101      	bne.n	8009a3e <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 8009a3a:	2301      	movs	r3, #1
 8009a3c:	e046      	b.n	8009acc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	689a      	ldr	r2, [r3, #8]
 8009a42:	2380      	movs	r3, #128	; 0x80
 8009a44:	015b      	lsls	r3, r3, #5
 8009a46:	429a      	cmp	r2, r3
 8009a48:	d109      	bne.n	8009a5e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 8009a4a:	68fb      	ldr	r3, [r7, #12]
 8009a4c:	691b      	ldr	r3, [r3, #16]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d105      	bne.n	8009a5e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8009a52:	68bb      	ldr	r3, [r7, #8]
 8009a54:	2201      	movs	r2, #1
 8009a56:	4013      	ands	r3, r2
 8009a58:	d001      	beq.n	8009a5e <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 8009a5a:	2301      	movs	r3, #1
 8009a5c:	e036      	b.n	8009acc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	2201      	movs	r2, #1
 8009a62:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009a64:	68fb      	ldr	r3, [r7, #12]
 8009a66:	2200      	movs	r2, #0
 8009a68:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8009a6a:	1dbb      	adds	r3, r7, #6
 8009a6c:	881a      	ldrh	r2, [r3, #0]
 8009a6e:	68b9      	ldr	r1, [r7, #8]
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	0018      	movs	r0, r3
 8009a74:	f7ff f818 	bl	8008aa8 <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a7c:	2b01      	cmp	r3, #1
 8009a7e:	d11c      	bne.n	8009aba <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	2210      	movs	r2, #16
 8009a86:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8009a88:	f3ef 8310 	mrs	r3, PRIMASK
 8009a8c:	617b      	str	r3, [r7, #20]
  return(result);
 8009a8e:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a90:	623b      	str	r3, [r7, #32]
 8009a92:	2301      	movs	r3, #1
 8009a94:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009a96:	69bb      	ldr	r3, [r7, #24]
 8009a98:	f383 8810 	msr	PRIMASK, r3
}
 8009a9c:	46c0      	nop			; (mov r8, r8)
 8009a9e:	68fb      	ldr	r3, [r7, #12]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681a      	ldr	r2, [r3, #0]
 8009aa4:	68fb      	ldr	r3, [r7, #12]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	2110      	movs	r1, #16
 8009aaa:	430a      	orrs	r2, r1
 8009aac:	601a      	str	r2, [r3, #0]
 8009aae:	6a3b      	ldr	r3, [r7, #32]
 8009ab0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8009ab2:	69fb      	ldr	r3, [r7, #28]
 8009ab4:	f383 8810 	msr	PRIMASK, r3
}
 8009ab8:	e003      	b.n	8009ac2 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8009aba:	2327      	movs	r3, #39	; 0x27
 8009abc:	18fb      	adds	r3, r7, r3
 8009abe:	2201      	movs	r2, #1
 8009ac0:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8009ac2:	2327      	movs	r3, #39	; 0x27
 8009ac4:	18fb      	adds	r3, r7, r3
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	e000      	b.n	8009acc <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8009aca:	2302      	movs	r3, #2
  }
}
 8009acc:	0018      	movs	r0, r3
 8009ace:	46bd      	mov	sp, r7
 8009ad0:	b00a      	add	sp, #40	; 0x28
 8009ad2:	bd80      	pop	{r7, pc}

08009ad4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ad6:	b085      	sub	sp, #20
 8009ad8:	af00      	add	r7, sp, #0
 8009ada:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009adc:	687b      	ldr	r3, [r7, #4]
 8009ade:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d108      	bne.n	8009af6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	226a      	movs	r2, #106	; 0x6a
 8009ae8:	2101      	movs	r1, #1
 8009aea:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	2268      	movs	r2, #104	; 0x68
 8009af0:	2101      	movs	r1, #1
 8009af2:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009af4:	e043      	b.n	8009b7e <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009af6:	260f      	movs	r6, #15
 8009af8:	19bb      	adds	r3, r7, r6
 8009afa:	2208      	movs	r2, #8
 8009afc:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009afe:	200e      	movs	r0, #14
 8009b00:	183b      	adds	r3, r7, r0
 8009b02:	2208      	movs	r2, #8
 8009b04:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	0e5b      	lsrs	r3, r3, #25
 8009b0e:	b2da      	uxtb	r2, r3
 8009b10:	240d      	movs	r4, #13
 8009b12:	193b      	adds	r3, r7, r4
 8009b14:	2107      	movs	r1, #7
 8009b16:	400a      	ands	r2, r1
 8009b18:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	689b      	ldr	r3, [r3, #8]
 8009b20:	0f5b      	lsrs	r3, r3, #29
 8009b22:	b2da      	uxtb	r2, r3
 8009b24:	250c      	movs	r5, #12
 8009b26:	197b      	adds	r3, r7, r5
 8009b28:	2107      	movs	r1, #7
 8009b2a:	400a      	ands	r2, r1
 8009b2c:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b2e:	183b      	adds	r3, r7, r0
 8009b30:	781b      	ldrb	r3, [r3, #0]
 8009b32:	197a      	adds	r2, r7, r5
 8009b34:	7812      	ldrb	r2, [r2, #0]
 8009b36:	4914      	ldr	r1, [pc, #80]	; (8009b88 <UARTEx_SetNbDataToProcess+0xb4>)
 8009b38:	5c8a      	ldrb	r2, [r1, r2]
 8009b3a:	435a      	muls	r2, r3
 8009b3c:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8009b3e:	197b      	adds	r3, r7, r5
 8009b40:	781b      	ldrb	r3, [r3, #0]
 8009b42:	4a12      	ldr	r2, [pc, #72]	; (8009b8c <UARTEx_SetNbDataToProcess+0xb8>)
 8009b44:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009b46:	0019      	movs	r1, r3
 8009b48:	f7f6 fb8e 	bl	8000268 <__divsi3>
 8009b4c:	0003      	movs	r3, r0
 8009b4e:	b299      	uxth	r1, r3
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	226a      	movs	r2, #106	; 0x6a
 8009b54:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b56:	19bb      	adds	r3, r7, r6
 8009b58:	781b      	ldrb	r3, [r3, #0]
 8009b5a:	193a      	adds	r2, r7, r4
 8009b5c:	7812      	ldrb	r2, [r2, #0]
 8009b5e:	490a      	ldr	r1, [pc, #40]	; (8009b88 <UARTEx_SetNbDataToProcess+0xb4>)
 8009b60:	5c8a      	ldrb	r2, [r1, r2]
 8009b62:	435a      	muls	r2, r3
 8009b64:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8009b66:	193b      	adds	r3, r7, r4
 8009b68:	781b      	ldrb	r3, [r3, #0]
 8009b6a:	4a08      	ldr	r2, [pc, #32]	; (8009b8c <UARTEx_SetNbDataToProcess+0xb8>)
 8009b6c:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009b6e:	0019      	movs	r1, r3
 8009b70:	f7f6 fb7a 	bl	8000268 <__divsi3>
 8009b74:	0003      	movs	r3, r0
 8009b76:	b299      	uxth	r1, r3
 8009b78:	687b      	ldr	r3, [r7, #4]
 8009b7a:	2268      	movs	r2, #104	; 0x68
 8009b7c:	5299      	strh	r1, [r3, r2]
}
 8009b7e:	46c0      	nop			; (mov r8, r8)
 8009b80:	46bd      	mov	sp, r7
 8009b82:	b005      	add	sp, #20
 8009b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009b86:	46c0      	nop			; (mov r8, r8)
 8009b88:	080113cc 	.word	0x080113cc
 8009b8c:	080113d4 	.word	0x080113d4

08009b90 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b084      	sub	sp, #16
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	0002      	movs	r2, r0
 8009b98:	1dbb      	adds	r3, r7, #6
 8009b9a:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009b9c:	2300      	movs	r3, #0
 8009b9e:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009ba0:	1dbb      	adds	r3, r7, #6
 8009ba2:	2200      	movs	r2, #0
 8009ba4:	5e9b      	ldrsh	r3, [r3, r2]
 8009ba6:	2b84      	cmp	r3, #132	; 0x84
 8009ba8:	d006      	beq.n	8009bb8 <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8009baa:	1dbb      	adds	r3, r7, #6
 8009bac:	2200      	movs	r2, #0
 8009bae:	5e9a      	ldrsh	r2, [r3, r2]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	18d3      	adds	r3, r2, r3
 8009bb4:	3303      	adds	r3, #3
 8009bb6:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009bb8:	68fb      	ldr	r3, [r7, #12]
}
 8009bba:	0018      	movs	r0, r3
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	b004      	add	sp, #16
 8009bc0:	bd80      	pop	{r7, pc}

08009bc2 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009bc2:	b580      	push	{r7, lr}
 8009bc4:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009bc6:	f000 ff37 	bl	800aa38 <vTaskStartScheduler>
  
  return osOK;
 8009bca:	2300      	movs	r3, #0
}
 8009bcc:	0018      	movs	r0, r3
 8009bce:	46bd      	mov	sp, r7
 8009bd0:	bd80      	pop	{r7, pc}

08009bd2 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009bd2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009bd4:	b087      	sub	sp, #28
 8009bd6:	af02      	add	r7, sp, #8
 8009bd8:	6078      	str	r0, [r7, #4]
 8009bda:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	685c      	ldr	r4, [r3, #4]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009be4:	687b      	ldr	r3, [r7, #4]
 8009be6:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009be8:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	2208      	movs	r2, #8
 8009bee:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009bf0:	0018      	movs	r0, r3
 8009bf2:	f7ff ffcd 	bl	8009b90 <makeFreeRtosPriority>
 8009bf6:	0001      	movs	r1, r0
 8009bf8:	683a      	ldr	r2, [r7, #0]
 8009bfa:	230c      	movs	r3, #12
 8009bfc:	18fb      	adds	r3, r7, r3
 8009bfe:	9301      	str	r3, [sp, #4]
 8009c00:	9100      	str	r1, [sp, #0]
 8009c02:	0013      	movs	r3, r2
 8009c04:	0032      	movs	r2, r6
 8009c06:	0029      	movs	r1, r5
 8009c08:	0020      	movs	r0, r4
 8009c0a:	f000 fdc0 	bl	800a78e <xTaskCreate>
 8009c0e:	0003      	movs	r3, r0
 8009c10:	2b01      	cmp	r3, #1
 8009c12:	d001      	beq.n	8009c18 <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8009c14:	2300      	movs	r3, #0
 8009c16:	e000      	b.n	8009c1a <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8009c18:	68fb      	ldr	r3, [r7, #12]
}
 8009c1a:	0018      	movs	r0, r3
 8009c1c:	46bd      	mov	sp, r7
 8009c1e:	b005      	add	sp, #20
 8009c20:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009c22 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009c22:	b580      	push	{r7, lr}
 8009c24:	b084      	sub	sp, #16
 8009c26:	af00      	add	r7, sp, #0
 8009c28:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009c2e:	68fb      	ldr	r3, [r7, #12]
 8009c30:	2b00      	cmp	r3, #0
 8009c32:	d001      	beq.n	8009c38 <osDelay+0x16>
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	e000      	b.n	8009c3a <osDelay+0x18>
 8009c38:	2301      	movs	r3, #1
 8009c3a:	0018      	movs	r0, r3
 8009c3c:	f000 fed6 	bl	800a9ec <vTaskDelay>
  
  return osOK;
 8009c40:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009c42:	0018      	movs	r0, r3
 8009c44:	46bd      	mov	sp, r7
 8009c46:	b004      	add	sp, #16
 8009c48:	bd80      	pop	{r7, pc}

08009c4a <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c4a:	b580      	push	{r7, lr}
 8009c4c:	b082      	sub	sp, #8
 8009c4e:	af00      	add	r7, sp, #0
 8009c50:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	3308      	adds	r3, #8
 8009c56:	001a      	movs	r2, r3
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	2201      	movs	r2, #1
 8009c60:	4252      	negs	r2, r2
 8009c62:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	3308      	adds	r3, #8
 8009c68:	001a      	movs	r2, r3
 8009c6a:	687b      	ldr	r3, [r7, #4]
 8009c6c:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c6e:	687b      	ldr	r3, [r7, #4]
 8009c70:	3308      	adds	r3, #8
 8009c72:	001a      	movs	r2, r3
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009c7e:	46c0      	nop			; (mov r8, r8)
 8009c80:	46bd      	mov	sp, r7
 8009c82:	b002      	add	sp, #8
 8009c84:	bd80      	pop	{r7, pc}

08009c86 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009c86:	b580      	push	{r7, lr}
 8009c88:	b082      	sub	sp, #8
 8009c8a:	af00      	add	r7, sp, #0
 8009c8c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009c94:	46c0      	nop			; (mov r8, r8)
 8009c96:	46bd      	mov	sp, r7
 8009c98:	b002      	add	sp, #8
 8009c9a:	bd80      	pop	{r7, pc}

08009c9c <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009c9c:	b580      	push	{r7, lr}
 8009c9e:	b084      	sub	sp, #16
 8009ca0:	af00      	add	r7, sp, #0
 8009ca2:	6078      	str	r0, [r7, #4]
 8009ca4:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	685b      	ldr	r3, [r3, #4]
 8009caa:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cac:	683b      	ldr	r3, [r7, #0]
 8009cae:	68fa      	ldr	r2, [r7, #12]
 8009cb0:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	689a      	ldr	r2, [r3, #8]
 8009cb6:	683b      	ldr	r3, [r7, #0]
 8009cb8:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	689b      	ldr	r3, [r3, #8]
 8009cbe:	683a      	ldr	r2, [r7, #0]
 8009cc0:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	683a      	ldr	r2, [r7, #0]
 8009cc6:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009cc8:	683b      	ldr	r3, [r7, #0]
 8009cca:	687a      	ldr	r2, [r7, #4]
 8009ccc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009cce:	687b      	ldr	r3, [r7, #4]
 8009cd0:	681b      	ldr	r3, [r3, #0]
 8009cd2:	1c5a      	adds	r2, r3, #1
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	601a      	str	r2, [r3, #0]
}
 8009cd8:	46c0      	nop			; (mov r8, r8)
 8009cda:	46bd      	mov	sp, r7
 8009cdc:	b004      	add	sp, #16
 8009cde:	bd80      	pop	{r7, pc}

08009ce0 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b084      	sub	sp, #16
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	6078      	str	r0, [r7, #4]
 8009ce8:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009cea:	683b      	ldr	r3, [r7, #0]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009cf0:	68bb      	ldr	r3, [r7, #8]
 8009cf2:	3301      	adds	r3, #1
 8009cf4:	d103      	bne.n	8009cfe <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	691b      	ldr	r3, [r3, #16]
 8009cfa:	60fb      	str	r3, [r7, #12]
 8009cfc:	e00c      	b.n	8009d18 <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	3308      	adds	r3, #8
 8009d02:	60fb      	str	r3, [r7, #12]
 8009d04:	e002      	b.n	8009d0c <vListInsert+0x2c>
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	60fb      	str	r3, [r7, #12]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	685b      	ldr	r3, [r3, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	68ba      	ldr	r2, [r7, #8]
 8009d14:	429a      	cmp	r2, r3
 8009d16:	d2f6      	bcs.n	8009d06 <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	685a      	ldr	r2, [r3, #4]
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d20:	683b      	ldr	r3, [r7, #0]
 8009d22:	685b      	ldr	r3, [r3, #4]
 8009d24:	683a      	ldr	r2, [r7, #0]
 8009d26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d28:	683b      	ldr	r3, [r7, #0]
 8009d2a:	68fa      	ldr	r2, [r7, #12]
 8009d2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d2e:	68fb      	ldr	r3, [r7, #12]
 8009d30:	683a      	ldr	r2, [r7, #0]
 8009d32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d34:	683b      	ldr	r3, [r7, #0]
 8009d36:	687a      	ldr	r2, [r7, #4]
 8009d38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d3a:	687b      	ldr	r3, [r7, #4]
 8009d3c:	681b      	ldr	r3, [r3, #0]
 8009d3e:	1c5a      	adds	r2, r3, #1
 8009d40:	687b      	ldr	r3, [r7, #4]
 8009d42:	601a      	str	r2, [r3, #0]
}
 8009d44:	46c0      	nop			; (mov r8, r8)
 8009d46:	46bd      	mov	sp, r7
 8009d48:	b004      	add	sp, #16
 8009d4a:	bd80      	pop	{r7, pc}

08009d4c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009d4c:	b580      	push	{r7, lr}
 8009d4e:	b084      	sub	sp, #16
 8009d50:	af00      	add	r7, sp, #0
 8009d52:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009d54:	687b      	ldr	r3, [r7, #4]
 8009d56:	691b      	ldr	r3, [r3, #16]
 8009d58:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	685b      	ldr	r3, [r3, #4]
 8009d5e:	687a      	ldr	r2, [r7, #4]
 8009d60:	6892      	ldr	r2, [r2, #8]
 8009d62:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	687a      	ldr	r2, [r7, #4]
 8009d6a:	6852      	ldr	r2, [r2, #4]
 8009d6c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	685b      	ldr	r3, [r3, #4]
 8009d72:	687a      	ldr	r2, [r7, #4]
 8009d74:	429a      	cmp	r2, r3
 8009d76:	d103      	bne.n	8009d80 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009d78:	687b      	ldr	r3, [r7, #4]
 8009d7a:	689a      	ldr	r2, [r3, #8]
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2200      	movs	r2, #0
 8009d84:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	681b      	ldr	r3, [r3, #0]
 8009d8a:	1e5a      	subs	r2, r3, #1
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	681b      	ldr	r3, [r3, #0]
}
 8009d94:	0018      	movs	r0, r3
 8009d96:	46bd      	mov	sp, r7
 8009d98:	b004      	add	sp, #16
 8009d9a:	bd80      	pop	{r7, pc}

08009d9c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009d9c:	b580      	push	{r7, lr}
 8009d9e:	b084      	sub	sp, #16
 8009da0:	af00      	add	r7, sp, #0
 8009da2:	6078      	str	r0, [r7, #4]
 8009da4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009da6:	687b      	ldr	r3, [r7, #4]
 8009da8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d101      	bne.n	8009db4 <xQueueGenericReset+0x18>
 8009db0:	b672      	cpsid	i
 8009db2:	e7fe      	b.n	8009db2 <xQueueGenericReset+0x16>

	taskENTER_CRITICAL();
 8009db4:	f002 f824 	bl	800be00 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681a      	ldr	r2, [r3, #0]
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009dc4:	434b      	muls	r3, r1
 8009dc6:	18d2      	adds	r2, r2, r3
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009dd2:	68fb      	ldr	r3, [r7, #12]
 8009dd4:	681a      	ldr	r2, [r3, #0]
 8009dd6:	68fb      	ldr	r3, [r7, #12]
 8009dd8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	681a      	ldr	r2, [r3, #0]
 8009dde:	68fb      	ldr	r3, [r7, #12]
 8009de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de2:	1e59      	subs	r1, r3, #1
 8009de4:	68fb      	ldr	r3, [r7, #12]
 8009de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009de8:	434b      	muls	r3, r1
 8009dea:	18d2      	adds	r2, r2, r3
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009df0:	68fb      	ldr	r3, [r7, #12]
 8009df2:	2244      	movs	r2, #68	; 0x44
 8009df4:	21ff      	movs	r1, #255	; 0xff
 8009df6:	5499      	strb	r1, [r3, r2]
		pxQueue->cTxLock = queueUNLOCKED;
 8009df8:	68fb      	ldr	r3, [r7, #12]
 8009dfa:	2245      	movs	r2, #69	; 0x45
 8009dfc:	21ff      	movs	r1, #255	; 0xff
 8009dfe:	5499      	strb	r1, [r3, r2]

		if( xNewQueue == pdFALSE )
 8009e00:	683b      	ldr	r3, [r7, #0]
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d10d      	bne.n	8009e22 <xQueueGenericReset+0x86>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	691b      	ldr	r3, [r3, #16]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d013      	beq.n	8009e36 <xQueueGenericReset+0x9a>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	3310      	adds	r3, #16
 8009e12:	0018      	movs	r0, r3
 8009e14:	f001 f838 	bl	800ae88 <xTaskRemoveFromEventList>
 8009e18:	1e03      	subs	r3, r0, #0
 8009e1a:	d00c      	beq.n	8009e36 <xQueueGenericReset+0x9a>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e1c:	f001 ffe0 	bl	800bde0 <vPortYield>
 8009e20:	e009      	b.n	8009e36 <xQueueGenericReset+0x9a>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	3310      	adds	r3, #16
 8009e26:	0018      	movs	r0, r3
 8009e28:	f7ff ff0f 	bl	8009c4a <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	3324      	adds	r3, #36	; 0x24
 8009e30:	0018      	movs	r0, r3
 8009e32:	f7ff ff0a 	bl	8009c4a <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009e36:	f001 fff5 	bl	800be24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009e3a:	2301      	movs	r3, #1
}
 8009e3c:	0018      	movs	r0, r3
 8009e3e:	46bd      	mov	sp, r7
 8009e40:	b004      	add	sp, #16
 8009e42:	bd80      	pop	{r7, pc}

08009e44 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009e44:	b590      	push	{r4, r7, lr}
 8009e46:	b08b      	sub	sp, #44	; 0x2c
 8009e48:	af02      	add	r7, sp, #8
 8009e4a:	60f8      	str	r0, [r7, #12]
 8009e4c:	60b9      	str	r1, [r7, #8]
 8009e4e:	1dfb      	adds	r3, r7, #7
 8009e50:	701a      	strb	r2, [r3, #0]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d101      	bne.n	8009e5c <xQueueGenericCreate+0x18>
 8009e58:	b672      	cpsid	i
 8009e5a:	e7fe      	b.n	8009e5a <xQueueGenericCreate+0x16>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5c:	68fb      	ldr	r3, [r7, #12]
 8009e5e:	68ba      	ldr	r2, [r7, #8]
 8009e60:	4353      	muls	r3, r2
 8009e62:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009e64:	69fb      	ldr	r3, [r7, #28]
 8009e66:	3348      	adds	r3, #72	; 0x48
 8009e68:	0018      	movs	r0, r3
 8009e6a:	f002 f861 	bl	800bf30 <pvPortMalloc>
 8009e6e:	0003      	movs	r3, r0
 8009e70:	61bb      	str	r3, [r7, #24]

		if( pxNewQueue != NULL )
 8009e72:	69bb      	ldr	r3, [r7, #24]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	d00e      	beq.n	8009e96 <xQueueGenericCreate+0x52>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009e78:	69bb      	ldr	r3, [r7, #24]
 8009e7a:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e7c:	697b      	ldr	r3, [r7, #20]
 8009e7e:	3348      	adds	r3, #72	; 0x48
 8009e80:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009e82:	1dfb      	adds	r3, r7, #7
 8009e84:	781c      	ldrb	r4, [r3, #0]
 8009e86:	697a      	ldr	r2, [r7, #20]
 8009e88:	68b9      	ldr	r1, [r7, #8]
 8009e8a:	68f8      	ldr	r0, [r7, #12]
 8009e8c:	69bb      	ldr	r3, [r7, #24]
 8009e8e:	9300      	str	r3, [sp, #0]
 8009e90:	0023      	movs	r3, r4
 8009e92:	f000 f805 	bl	8009ea0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009e96:	69bb      	ldr	r3, [r7, #24]
	}
 8009e98:	0018      	movs	r0, r3
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	b009      	add	sp, #36	; 0x24
 8009e9e:	bd90      	pop	{r4, r7, pc}

08009ea0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009ea0:	b580      	push	{r7, lr}
 8009ea2:	b084      	sub	sp, #16
 8009ea4:	af00      	add	r7, sp, #0
 8009ea6:	60f8      	str	r0, [r7, #12]
 8009ea8:	60b9      	str	r1, [r7, #8]
 8009eaa:	607a      	str	r2, [r7, #4]
 8009eac:	001a      	movs	r2, r3
 8009eae:	1cfb      	adds	r3, r7, #3
 8009eb0:	701a      	strb	r2, [r3, #0]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009eb2:	68bb      	ldr	r3, [r7, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d103      	bne.n	8009ec0 <prvInitialiseNewQueue+0x20>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009eb8:	69bb      	ldr	r3, [r7, #24]
 8009eba:	69ba      	ldr	r2, [r7, #24]
 8009ebc:	601a      	str	r2, [r3, #0]
 8009ebe:	e002      	b.n	8009ec6 <prvInitialiseNewQueue+0x26>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009ec0:	69bb      	ldr	r3, [r7, #24]
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009ec6:	69bb      	ldr	r3, [r7, #24]
 8009ec8:	68fa      	ldr	r2, [r7, #12]
 8009eca:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009ecc:	69bb      	ldr	r3, [r7, #24]
 8009ece:	68ba      	ldr	r2, [r7, #8]
 8009ed0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009ed2:	69bb      	ldr	r3, [r7, #24]
 8009ed4:	2101      	movs	r1, #1
 8009ed6:	0018      	movs	r0, r3
 8009ed8:	f7ff ff60 	bl	8009d9c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009edc:	46c0      	nop			; (mov r8, r8)
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	b004      	add	sp, #16
 8009ee2:	bd80      	pop	{r7, pc}

08009ee4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009ee4:	b580      	push	{r7, lr}
 8009ee6:	b08a      	sub	sp, #40	; 0x28
 8009ee8:	af00      	add	r7, sp, #0
 8009eea:	60f8      	str	r0, [r7, #12]
 8009eec:	60b9      	str	r1, [r7, #8]
 8009eee:	607a      	str	r2, [r7, #4]
 8009ef0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009ef2:	2300      	movs	r3, #0
 8009ef4:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009ef6:	68fb      	ldr	r3, [r7, #12]
 8009ef8:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 8009efa:	6a3b      	ldr	r3, [r7, #32]
 8009efc:	2b00      	cmp	r3, #0
 8009efe:	d101      	bne.n	8009f04 <xQueueGenericSend+0x20>
 8009f00:	b672      	cpsid	i
 8009f02:	e7fe      	b.n	8009f02 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f04:	68bb      	ldr	r3, [r7, #8]
 8009f06:	2b00      	cmp	r3, #0
 8009f08:	d103      	bne.n	8009f12 <xQueueGenericSend+0x2e>
 8009f0a:	6a3b      	ldr	r3, [r7, #32]
 8009f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f0e:	2b00      	cmp	r3, #0
 8009f10:	d101      	bne.n	8009f16 <xQueueGenericSend+0x32>
 8009f12:	2301      	movs	r3, #1
 8009f14:	e000      	b.n	8009f18 <xQueueGenericSend+0x34>
 8009f16:	2300      	movs	r3, #0
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d101      	bne.n	8009f20 <xQueueGenericSend+0x3c>
 8009f1c:	b672      	cpsid	i
 8009f1e:	e7fe      	b.n	8009f1e <xQueueGenericSend+0x3a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f20:	683b      	ldr	r3, [r7, #0]
 8009f22:	2b02      	cmp	r3, #2
 8009f24:	d103      	bne.n	8009f2e <xQueueGenericSend+0x4a>
 8009f26:	6a3b      	ldr	r3, [r7, #32]
 8009f28:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f2a:	2b01      	cmp	r3, #1
 8009f2c:	d101      	bne.n	8009f32 <xQueueGenericSend+0x4e>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	e000      	b.n	8009f34 <xQueueGenericSend+0x50>
 8009f32:	2300      	movs	r3, #0
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d101      	bne.n	8009f3c <xQueueGenericSend+0x58>
 8009f38:	b672      	cpsid	i
 8009f3a:	e7fe      	b.n	8009f3a <xQueueGenericSend+0x56>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009f3c:	f001 f920 	bl	800b180 <xTaskGetSchedulerState>
 8009f40:	1e03      	subs	r3, r0, #0
 8009f42:	d102      	bne.n	8009f4a <xQueueGenericSend+0x66>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d101      	bne.n	8009f4e <xQueueGenericSend+0x6a>
 8009f4a:	2301      	movs	r3, #1
 8009f4c:	e000      	b.n	8009f50 <xQueueGenericSend+0x6c>
 8009f4e:	2300      	movs	r3, #0
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <xQueueGenericSend+0x74>
 8009f54:	b672      	cpsid	i
 8009f56:	e7fe      	b.n	8009f56 <xQueueGenericSend+0x72>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009f58:	f001 ff52 	bl	800be00 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009f5c:	6a3b      	ldr	r3, [r7, #32]
 8009f5e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009f60:	6a3b      	ldr	r3, [r7, #32]
 8009f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f64:	429a      	cmp	r2, r3
 8009f66:	d302      	bcc.n	8009f6e <xQueueGenericSend+0x8a>
 8009f68:	683b      	ldr	r3, [r7, #0]
 8009f6a:	2b02      	cmp	r3, #2
 8009f6c:	d11e      	bne.n	8009fac <xQueueGenericSend+0xc8>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009f6e:	683a      	ldr	r2, [r7, #0]
 8009f70:	68b9      	ldr	r1, [r7, #8]
 8009f72:	6a3b      	ldr	r3, [r7, #32]
 8009f74:	0018      	movs	r0, r3
 8009f76:	f000 fa92 	bl	800a49e <prvCopyDataToQueue>
 8009f7a:	0003      	movs	r3, r0
 8009f7c:	61fb      	str	r3, [r7, #28]

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009f7e:	6a3b      	ldr	r3, [r7, #32]
 8009f80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d009      	beq.n	8009f9a <xQueueGenericSend+0xb6>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009f86:	6a3b      	ldr	r3, [r7, #32]
 8009f88:	3324      	adds	r3, #36	; 0x24
 8009f8a:	0018      	movs	r0, r3
 8009f8c:	f000 ff7c 	bl	800ae88 <xTaskRemoveFromEventList>
 8009f90:	1e03      	subs	r3, r0, #0
 8009f92:	d007      	beq.n	8009fa4 <xQueueGenericSend+0xc0>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009f94:	f001 ff24 	bl	800bde0 <vPortYield>
 8009f98:	e004      	b.n	8009fa4 <xQueueGenericSend+0xc0>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009f9a:	69fb      	ldr	r3, [r7, #28]
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d001      	beq.n	8009fa4 <xQueueGenericSend+0xc0>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009fa0:	f001 ff1e 	bl	800bde0 <vPortYield>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009fa4:	f001 ff3e 	bl	800be24 <vPortExitCritical>
				return pdPASS;
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e05b      	b.n	800a064 <xQueueGenericSend+0x180>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009fac:	687b      	ldr	r3, [r7, #4]
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d103      	bne.n	8009fba <xQueueGenericSend+0xd6>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009fb2:	f001 ff37 	bl	800be24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009fb6:	2300      	movs	r3, #0
 8009fb8:	e054      	b.n	800a064 <xQueueGenericSend+0x180>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009fba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009fbc:	2b00      	cmp	r3, #0
 8009fbe:	d106      	bne.n	8009fce <xQueueGenericSend+0xea>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009fc0:	2314      	movs	r3, #20
 8009fc2:	18fb      	adds	r3, r7, r3
 8009fc4:	0018      	movs	r0, r3
 8009fc6:	f000 ffbb 	bl	800af40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009fce:	f001 ff29 	bl	800be24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009fd2:	f000 fd6d 	bl	800aab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009fd6:	f001 ff13 	bl	800be00 <vPortEnterCritical>
 8009fda:	6a3b      	ldr	r3, [r7, #32]
 8009fdc:	2244      	movs	r2, #68	; 0x44
 8009fde:	5c9b      	ldrb	r3, [r3, r2]
 8009fe0:	b25b      	sxtb	r3, r3
 8009fe2:	3301      	adds	r3, #1
 8009fe4:	d103      	bne.n	8009fee <xQueueGenericSend+0x10a>
 8009fe6:	6a3b      	ldr	r3, [r7, #32]
 8009fe8:	2244      	movs	r2, #68	; 0x44
 8009fea:	2100      	movs	r1, #0
 8009fec:	5499      	strb	r1, [r3, r2]
 8009fee:	6a3b      	ldr	r3, [r7, #32]
 8009ff0:	2245      	movs	r2, #69	; 0x45
 8009ff2:	5c9b      	ldrb	r3, [r3, r2]
 8009ff4:	b25b      	sxtb	r3, r3
 8009ff6:	3301      	adds	r3, #1
 8009ff8:	d103      	bne.n	800a002 <xQueueGenericSend+0x11e>
 8009ffa:	6a3b      	ldr	r3, [r7, #32]
 8009ffc:	2245      	movs	r2, #69	; 0x45
 8009ffe:	2100      	movs	r1, #0
 800a000:	5499      	strb	r1, [r3, r2]
 800a002:	f001 ff0f 	bl	800be24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a006:	1d3a      	adds	r2, r7, #4
 800a008:	2314      	movs	r3, #20
 800a00a:	18fb      	adds	r3, r7, r3
 800a00c:	0011      	movs	r1, r2
 800a00e:	0018      	movs	r0, r3
 800a010:	f000 ffaa 	bl	800af68 <xTaskCheckForTimeOut>
 800a014:	1e03      	subs	r3, r0, #0
 800a016:	d11e      	bne.n	800a056 <xQueueGenericSend+0x172>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a018:	6a3b      	ldr	r3, [r7, #32]
 800a01a:	0018      	movs	r0, r3
 800a01c:	f000 fb44 	bl	800a6a8 <prvIsQueueFull>
 800a020:	1e03      	subs	r3, r0, #0
 800a022:	d011      	beq.n	800a048 <xQueueGenericSend+0x164>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a024:	6a3b      	ldr	r3, [r7, #32]
 800a026:	3310      	adds	r3, #16
 800a028:	687a      	ldr	r2, [r7, #4]
 800a02a:	0011      	movs	r1, r2
 800a02c:	0018      	movs	r0, r3
 800a02e:	f000 fee7 	bl	800ae00 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a032:	6a3b      	ldr	r3, [r7, #32]
 800a034:	0018      	movs	r0, r3
 800a036:	f000 fac3 	bl	800a5c0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a03a:	f000 fd45 	bl	800aac8 <xTaskResumeAll>
 800a03e:	1e03      	subs	r3, r0, #0
 800a040:	d18a      	bne.n	8009f58 <xQueueGenericSend+0x74>
				{
					portYIELD_WITHIN_API();
 800a042:	f001 fecd 	bl	800bde0 <vPortYield>
 800a046:	e787      	b.n	8009f58 <xQueueGenericSend+0x74>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a048:	6a3b      	ldr	r3, [r7, #32]
 800a04a:	0018      	movs	r0, r3
 800a04c:	f000 fab8 	bl	800a5c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a050:	f000 fd3a 	bl	800aac8 <xTaskResumeAll>
 800a054:	e780      	b.n	8009f58 <xQueueGenericSend+0x74>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a056:	6a3b      	ldr	r3, [r7, #32]
 800a058:	0018      	movs	r0, r3
 800a05a:	f000 fab1 	bl	800a5c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a05e:	f000 fd33 	bl	800aac8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a062:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a064:	0018      	movs	r0, r3
 800a066:	46bd      	mov	sp, r7
 800a068:	b00a      	add	sp, #40	; 0x28
 800a06a:	bd80      	pop	{r7, pc}

0800a06c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a06c:	b590      	push	{r4, r7, lr}
 800a06e:	b08b      	sub	sp, #44	; 0x2c
 800a070:	af00      	add	r7, sp, #0
 800a072:	60f8      	str	r0, [r7, #12]
 800a074:	60b9      	str	r1, [r7, #8]
 800a076:	607a      	str	r2, [r7, #4]
 800a078:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	623b      	str	r3, [r7, #32]

	configASSERT( pxQueue );
 800a07e:	6a3b      	ldr	r3, [r7, #32]
 800a080:	2b00      	cmp	r3, #0
 800a082:	d101      	bne.n	800a088 <xQueueGenericSendFromISR+0x1c>
 800a084:	b672      	cpsid	i
 800a086:	e7fe      	b.n	800a086 <xQueueGenericSendFromISR+0x1a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a088:	68bb      	ldr	r3, [r7, #8]
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d103      	bne.n	800a096 <xQueueGenericSendFromISR+0x2a>
 800a08e:	6a3b      	ldr	r3, [r7, #32]
 800a090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a092:	2b00      	cmp	r3, #0
 800a094:	d101      	bne.n	800a09a <xQueueGenericSendFromISR+0x2e>
 800a096:	2301      	movs	r3, #1
 800a098:	e000      	b.n	800a09c <xQueueGenericSendFromISR+0x30>
 800a09a:	2300      	movs	r3, #0
 800a09c:	2b00      	cmp	r3, #0
 800a09e:	d101      	bne.n	800a0a4 <xQueueGenericSendFromISR+0x38>
 800a0a0:	b672      	cpsid	i
 800a0a2:	e7fe      	b.n	800a0a2 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a0a4:	683b      	ldr	r3, [r7, #0]
 800a0a6:	2b02      	cmp	r3, #2
 800a0a8:	d103      	bne.n	800a0b2 <xQueueGenericSendFromISR+0x46>
 800a0aa:	6a3b      	ldr	r3, [r7, #32]
 800a0ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ae:	2b01      	cmp	r3, #1
 800a0b0:	d101      	bne.n	800a0b6 <xQueueGenericSendFromISR+0x4a>
 800a0b2:	2301      	movs	r3, #1
 800a0b4:	e000      	b.n	800a0b8 <xQueueGenericSendFromISR+0x4c>
 800a0b6:	2300      	movs	r3, #0
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d101      	bne.n	800a0c0 <xQueueGenericSendFromISR+0x54>
 800a0bc:	b672      	cpsid	i
 800a0be:	e7fe      	b.n	800a0be <xQueueGenericSendFromISR+0x52>
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0c0:	f001 fec8 	bl	800be54 <ulSetInterruptMaskFromISR>
 800a0c4:	0003      	movs	r3, r0
 800a0c6:	61fb      	str	r3, [r7, #28]
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a0c8:	6a3b      	ldr	r3, [r7, #32]
 800a0ca:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a0cc:	6a3b      	ldr	r3, [r7, #32]
 800a0ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d302      	bcc.n	800a0da <xQueueGenericSendFromISR+0x6e>
 800a0d4:	683b      	ldr	r3, [r7, #0]
 800a0d6:	2b02      	cmp	r3, #2
 800a0d8:	d131      	bne.n	800a13e <xQueueGenericSendFromISR+0xd2>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0da:	241b      	movs	r4, #27
 800a0dc:	193b      	adds	r3, r7, r4
 800a0de:	6a3a      	ldr	r2, [r7, #32]
 800a0e0:	2145      	movs	r1, #69	; 0x45
 800a0e2:	5c52      	ldrb	r2, [r2, r1]
 800a0e4:	701a      	strb	r2, [r3, #0]
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0e6:	6a3b      	ldr	r3, [r7, #32]
 800a0e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0ea:	617b      	str	r3, [r7, #20]
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a0ec:	683a      	ldr	r2, [r7, #0]
 800a0ee:	68b9      	ldr	r1, [r7, #8]
 800a0f0:	6a3b      	ldr	r3, [r7, #32]
 800a0f2:	0018      	movs	r0, r3
 800a0f4:	f000 f9d3 	bl	800a49e <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a0f8:	193b      	adds	r3, r7, r4
 800a0fa:	781b      	ldrb	r3, [r3, #0]
 800a0fc:	b25b      	sxtb	r3, r3
 800a0fe:	3301      	adds	r3, #1
 800a100:	d111      	bne.n	800a126 <xQueueGenericSendFromISR+0xba>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a102:	6a3b      	ldr	r3, [r7, #32]
 800a104:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a106:	2b00      	cmp	r3, #0
 800a108:	d016      	beq.n	800a138 <xQueueGenericSendFromISR+0xcc>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a10a:	6a3b      	ldr	r3, [r7, #32]
 800a10c:	3324      	adds	r3, #36	; 0x24
 800a10e:	0018      	movs	r0, r3
 800a110:	f000 feba 	bl	800ae88 <xTaskRemoveFromEventList>
 800a114:	1e03      	subs	r3, r0, #0
 800a116:	d00f      	beq.n	800a138 <xQueueGenericSendFromISR+0xcc>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a118:	687b      	ldr	r3, [r7, #4]
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d00c      	beq.n	800a138 <xQueueGenericSendFromISR+0xcc>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2201      	movs	r2, #1
 800a122:	601a      	str	r2, [r3, #0]
 800a124:	e008      	b.n	800a138 <xQueueGenericSendFromISR+0xcc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a126:	231b      	movs	r3, #27
 800a128:	18fb      	adds	r3, r7, r3
 800a12a:	781b      	ldrb	r3, [r3, #0]
 800a12c:	3301      	adds	r3, #1
 800a12e:	b2db      	uxtb	r3, r3
 800a130:	b259      	sxtb	r1, r3
 800a132:	6a3b      	ldr	r3, [r7, #32]
 800a134:	2245      	movs	r2, #69	; 0x45
 800a136:	5499      	strb	r1, [r3, r2]
			}

			xReturn = pdPASS;
 800a138:	2301      	movs	r3, #1
 800a13a:	627b      	str	r3, [r7, #36]	; 0x24
		{
 800a13c:	e001      	b.n	800a142 <xQueueGenericSendFromISR+0xd6>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a13e:	2300      	movs	r3, #0
 800a140:	627b      	str	r3, [r7, #36]	; 0x24
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800a142:	69fb      	ldr	r3, [r7, #28]
 800a144:	0018      	movs	r0, r3
 800a146:	f001 fe8b 	bl	800be60 <vClearInterruptMaskFromISR>

	return xReturn;
 800a14a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a14c:	0018      	movs	r0, r3
 800a14e:	46bd      	mov	sp, r7
 800a150:	b00b      	add	sp, #44	; 0x2c
 800a152:	bd90      	pop	{r4, r7, pc}

0800a154 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b08a      	sub	sp, #40	; 0x28
 800a158:	af00      	add	r7, sp, #0
 800a15a:	60f8      	str	r0, [r7, #12]
 800a15c:	60b9      	str	r1, [r7, #8]
 800a15e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a160:	2300      	movs	r3, #0
 800a162:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	623b      	str	r3, [r7, #32]

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a168:	6a3b      	ldr	r3, [r7, #32]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d101      	bne.n	800a172 <xQueueReceive+0x1e>
 800a16e:	b672      	cpsid	i
 800a170:	e7fe      	b.n	800a170 <xQueueReceive+0x1c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a172:	68bb      	ldr	r3, [r7, #8]
 800a174:	2b00      	cmp	r3, #0
 800a176:	d103      	bne.n	800a180 <xQueueReceive+0x2c>
 800a178:	6a3b      	ldr	r3, [r7, #32]
 800a17a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a17c:	2b00      	cmp	r3, #0
 800a17e:	d101      	bne.n	800a184 <xQueueReceive+0x30>
 800a180:	2301      	movs	r3, #1
 800a182:	e000      	b.n	800a186 <xQueueReceive+0x32>
 800a184:	2300      	movs	r3, #0
 800a186:	2b00      	cmp	r3, #0
 800a188:	d101      	bne.n	800a18e <xQueueReceive+0x3a>
 800a18a:	b672      	cpsid	i
 800a18c:	e7fe      	b.n	800a18c <xQueueReceive+0x38>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a18e:	f000 fff7 	bl	800b180 <xTaskGetSchedulerState>
 800a192:	1e03      	subs	r3, r0, #0
 800a194:	d102      	bne.n	800a19c <xQueueReceive+0x48>
 800a196:	687b      	ldr	r3, [r7, #4]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d101      	bne.n	800a1a0 <xQueueReceive+0x4c>
 800a19c:	2301      	movs	r3, #1
 800a19e:	e000      	b.n	800a1a2 <xQueueReceive+0x4e>
 800a1a0:	2300      	movs	r3, #0
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	d101      	bne.n	800a1aa <xQueueReceive+0x56>
 800a1a6:	b672      	cpsid	i
 800a1a8:	e7fe      	b.n	800a1a8 <xQueueReceive+0x54>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1aa:	f001 fe29 	bl	800be00 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1ae:	6a3b      	ldr	r3, [r7, #32]
 800a1b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1b2:	61fb      	str	r3, [r7, #28]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1b4:	69fb      	ldr	r3, [r7, #28]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d01a      	beq.n	800a1f0 <xQueueReceive+0x9c>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a1ba:	68ba      	ldr	r2, [r7, #8]
 800a1bc:	6a3b      	ldr	r3, [r7, #32]
 800a1be:	0011      	movs	r1, r2
 800a1c0:	0018      	movs	r0, r3
 800a1c2:	f000 f9d7 	bl	800a574 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a1c6:	69fb      	ldr	r3, [r7, #28]
 800a1c8:	1e5a      	subs	r2, r3, #1
 800a1ca:	6a3b      	ldr	r3, [r7, #32]
 800a1cc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a1ce:	6a3b      	ldr	r3, [r7, #32]
 800a1d0:	691b      	ldr	r3, [r3, #16]
 800a1d2:	2b00      	cmp	r3, #0
 800a1d4:	d008      	beq.n	800a1e8 <xQueueReceive+0x94>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	3310      	adds	r3, #16
 800a1da:	0018      	movs	r0, r3
 800a1dc:	f000 fe54 	bl	800ae88 <xTaskRemoveFromEventList>
 800a1e0:	1e03      	subs	r3, r0, #0
 800a1e2:	d001      	beq.n	800a1e8 <xQueueReceive+0x94>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a1e4:	f001 fdfc 	bl	800bde0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a1e8:	f001 fe1c 	bl	800be24 <vPortExitCritical>
				return pdPASS;
 800a1ec:	2301      	movs	r3, #1
 800a1ee:	e062      	b.n	800a2b6 <xQueueReceive+0x162>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	2b00      	cmp	r3, #0
 800a1f4:	d103      	bne.n	800a1fe <xQueueReceive+0xaa>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a1f6:	f001 fe15 	bl	800be24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	e05b      	b.n	800a2b6 <xQueueReceive+0x162>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a1fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a200:	2b00      	cmp	r3, #0
 800a202:	d106      	bne.n	800a212 <xQueueReceive+0xbe>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a204:	2314      	movs	r3, #20
 800a206:	18fb      	adds	r3, r7, r3
 800a208:	0018      	movs	r0, r3
 800a20a:	f000 fe99 	bl	800af40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a20e:	2301      	movs	r3, #1
 800a210:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a212:	f001 fe07 	bl	800be24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a216:	f000 fc4b 	bl	800aab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a21a:	f001 fdf1 	bl	800be00 <vPortEnterCritical>
 800a21e:	6a3b      	ldr	r3, [r7, #32]
 800a220:	2244      	movs	r2, #68	; 0x44
 800a222:	5c9b      	ldrb	r3, [r3, r2]
 800a224:	b25b      	sxtb	r3, r3
 800a226:	3301      	adds	r3, #1
 800a228:	d103      	bne.n	800a232 <xQueueReceive+0xde>
 800a22a:	6a3b      	ldr	r3, [r7, #32]
 800a22c:	2244      	movs	r2, #68	; 0x44
 800a22e:	2100      	movs	r1, #0
 800a230:	5499      	strb	r1, [r3, r2]
 800a232:	6a3b      	ldr	r3, [r7, #32]
 800a234:	2245      	movs	r2, #69	; 0x45
 800a236:	5c9b      	ldrb	r3, [r3, r2]
 800a238:	b25b      	sxtb	r3, r3
 800a23a:	3301      	adds	r3, #1
 800a23c:	d103      	bne.n	800a246 <xQueueReceive+0xf2>
 800a23e:	6a3b      	ldr	r3, [r7, #32]
 800a240:	2245      	movs	r2, #69	; 0x45
 800a242:	2100      	movs	r1, #0
 800a244:	5499      	strb	r1, [r3, r2]
 800a246:	f001 fded 	bl	800be24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a24a:	1d3a      	adds	r2, r7, #4
 800a24c:	2314      	movs	r3, #20
 800a24e:	18fb      	adds	r3, r7, r3
 800a250:	0011      	movs	r1, r2
 800a252:	0018      	movs	r0, r3
 800a254:	f000 fe88 	bl	800af68 <xTaskCheckForTimeOut>
 800a258:	1e03      	subs	r3, r0, #0
 800a25a:	d11e      	bne.n	800a29a <xQueueReceive+0x146>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a25c:	6a3b      	ldr	r3, [r7, #32]
 800a25e:	0018      	movs	r0, r3
 800a260:	f000 fa0c 	bl	800a67c <prvIsQueueEmpty>
 800a264:	1e03      	subs	r3, r0, #0
 800a266:	d011      	beq.n	800a28c <xQueueReceive+0x138>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a268:	6a3b      	ldr	r3, [r7, #32]
 800a26a:	3324      	adds	r3, #36	; 0x24
 800a26c:	687a      	ldr	r2, [r7, #4]
 800a26e:	0011      	movs	r1, r2
 800a270:	0018      	movs	r0, r3
 800a272:	f000 fdc5 	bl	800ae00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a276:	6a3b      	ldr	r3, [r7, #32]
 800a278:	0018      	movs	r0, r3
 800a27a:	f000 f9a1 	bl	800a5c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a27e:	f000 fc23 	bl	800aac8 <xTaskResumeAll>
 800a282:	1e03      	subs	r3, r0, #0
 800a284:	d191      	bne.n	800a1aa <xQueueReceive+0x56>
				{
					portYIELD_WITHIN_API();
 800a286:	f001 fdab 	bl	800bde0 <vPortYield>
 800a28a:	e78e      	b.n	800a1aa <xQueueReceive+0x56>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a28c:	6a3b      	ldr	r3, [r7, #32]
 800a28e:	0018      	movs	r0, r3
 800a290:	f000 f996 	bl	800a5c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a294:	f000 fc18 	bl	800aac8 <xTaskResumeAll>
 800a298:	e787      	b.n	800a1aa <xQueueReceive+0x56>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a29a:	6a3b      	ldr	r3, [r7, #32]
 800a29c:	0018      	movs	r0, r3
 800a29e:	f000 f98f 	bl	800a5c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a2a2:	f000 fc11 	bl	800aac8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2a6:	6a3b      	ldr	r3, [r7, #32]
 800a2a8:	0018      	movs	r0, r3
 800a2aa:	f000 f9e7 	bl	800a67c <prvIsQueueEmpty>
 800a2ae:	1e03      	subs	r3, r0, #0
 800a2b0:	d100      	bne.n	800a2b4 <xQueueReceive+0x160>
 800a2b2:	e77a      	b.n	800a1aa <xQueueReceive+0x56>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a2b4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a2b6:	0018      	movs	r0, r3
 800a2b8:	46bd      	mov	sp, r7
 800a2ba:	b00a      	add	sp, #40	; 0x28
 800a2bc:	bd80      	pop	{r7, pc}

0800a2be <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a2be:	b580      	push	{r7, lr}
 800a2c0:	b08a      	sub	sp, #40	; 0x28
 800a2c2:	af00      	add	r7, sp, #0
 800a2c4:	6078      	str	r0, [r7, #4]
 800a2c6:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	627b      	str	r3, [r7, #36]	; 0x24
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a2cc:	687b      	ldr	r3, [r7, #4]
 800a2ce:	61fb      	str	r3, [r7, #28]

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a2d0:	2300      	movs	r3, #0
 800a2d2:	623b      	str	r3, [r7, #32]
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a2d4:	69fb      	ldr	r3, [r7, #28]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d101      	bne.n	800a2de <xQueueSemaphoreTake+0x20>
 800a2da:	b672      	cpsid	i
 800a2dc:	e7fe      	b.n	800a2dc <xQueueSemaphoreTake+0x1e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a2de:	69fb      	ldr	r3, [r7, #28]
 800a2e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a2e2:	2b00      	cmp	r3, #0
 800a2e4:	d001      	beq.n	800a2ea <xQueueSemaphoreTake+0x2c>
 800a2e6:	b672      	cpsid	i
 800a2e8:	e7fe      	b.n	800a2e8 <xQueueSemaphoreTake+0x2a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2ea:	f000 ff49 	bl	800b180 <xTaskGetSchedulerState>
 800a2ee:	1e03      	subs	r3, r0, #0
 800a2f0:	d102      	bne.n	800a2f8 <xQueueSemaphoreTake+0x3a>
 800a2f2:	683b      	ldr	r3, [r7, #0]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d101      	bne.n	800a2fc <xQueueSemaphoreTake+0x3e>
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	e000      	b.n	800a2fe <xQueueSemaphoreTake+0x40>
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d101      	bne.n	800a306 <xQueueSemaphoreTake+0x48>
 800a302:	b672      	cpsid	i
 800a304:	e7fe      	b.n	800a304 <xQueueSemaphoreTake+0x46>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a306:	f001 fd7b 	bl	800be00 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a30a:	69fb      	ldr	r3, [r7, #28]
 800a30c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a30e:	61bb      	str	r3, [r7, #24]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a310:	69bb      	ldr	r3, [r7, #24]
 800a312:	2b00      	cmp	r3, #0
 800a314:	d01d      	beq.n	800a352 <xQueueSemaphoreTake+0x94>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a316:	69bb      	ldr	r3, [r7, #24]
 800a318:	1e5a      	subs	r2, r3, #1
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a31e:	69fb      	ldr	r3, [r7, #28]
 800a320:	681b      	ldr	r3, [r3, #0]
 800a322:	2b00      	cmp	r3, #0
 800a324:	d104      	bne.n	800a330 <xQueueSemaphoreTake+0x72>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a326:	f001 f87b 	bl	800b420 <pvTaskIncrementMutexHeldCount>
 800a32a:	0002      	movs	r2, r0
 800a32c:	69fb      	ldr	r3, [r7, #28]
 800a32e:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a330:	69fb      	ldr	r3, [r7, #28]
 800a332:	691b      	ldr	r3, [r3, #16]
 800a334:	2b00      	cmp	r3, #0
 800a336:	d008      	beq.n	800a34a <xQueueSemaphoreTake+0x8c>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a338:	69fb      	ldr	r3, [r7, #28]
 800a33a:	3310      	adds	r3, #16
 800a33c:	0018      	movs	r0, r3
 800a33e:	f000 fda3 	bl	800ae88 <xTaskRemoveFromEventList>
 800a342:	1e03      	subs	r3, r0, #0
 800a344:	d001      	beq.n	800a34a <xQueueSemaphoreTake+0x8c>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a346:	f001 fd4b 	bl	800bde0 <vPortYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a34a:	f001 fd6b 	bl	800be24 <vPortExitCritical>
				return pdPASS;
 800a34e:	2301      	movs	r3, #1
 800a350:	e08b      	b.n	800a46a <xQueueSemaphoreTake+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a352:	683b      	ldr	r3, [r7, #0]
 800a354:	2b00      	cmp	r3, #0
 800a356:	d108      	bne.n	800a36a <xQueueSemaphoreTake+0xac>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a358:	6a3b      	ldr	r3, [r7, #32]
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d001      	beq.n	800a362 <xQueueSemaphoreTake+0xa4>
 800a35e:	b672      	cpsid	i
 800a360:	e7fe      	b.n	800a360 <xQueueSemaphoreTake+0xa2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a362:	f001 fd5f 	bl	800be24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a366:	2300      	movs	r3, #0
 800a368:	e07f      	b.n	800a46a <xQueueSemaphoreTake+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a36a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d106      	bne.n	800a37e <xQueueSemaphoreTake+0xc0>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a370:	230c      	movs	r3, #12
 800a372:	18fb      	adds	r3, r7, r3
 800a374:	0018      	movs	r0, r3
 800a376:	f000 fde3 	bl	800af40 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a37a:	2301      	movs	r3, #1
 800a37c:	627b      	str	r3, [r7, #36]	; 0x24
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a37e:	f001 fd51 	bl	800be24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a382:	f000 fb95 	bl	800aab0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a386:	f001 fd3b 	bl	800be00 <vPortEnterCritical>
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	2244      	movs	r2, #68	; 0x44
 800a38e:	5c9b      	ldrb	r3, [r3, r2]
 800a390:	b25b      	sxtb	r3, r3
 800a392:	3301      	adds	r3, #1
 800a394:	d103      	bne.n	800a39e <xQueueSemaphoreTake+0xe0>
 800a396:	69fb      	ldr	r3, [r7, #28]
 800a398:	2244      	movs	r2, #68	; 0x44
 800a39a:	2100      	movs	r1, #0
 800a39c:	5499      	strb	r1, [r3, r2]
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	2245      	movs	r2, #69	; 0x45
 800a3a2:	5c9b      	ldrb	r3, [r3, r2]
 800a3a4:	b25b      	sxtb	r3, r3
 800a3a6:	3301      	adds	r3, #1
 800a3a8:	d103      	bne.n	800a3b2 <xQueueSemaphoreTake+0xf4>
 800a3aa:	69fb      	ldr	r3, [r7, #28]
 800a3ac:	2245      	movs	r2, #69	; 0x45
 800a3ae:	2100      	movs	r1, #0
 800a3b0:	5499      	strb	r1, [r3, r2]
 800a3b2:	f001 fd37 	bl	800be24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3b6:	003a      	movs	r2, r7
 800a3b8:	230c      	movs	r3, #12
 800a3ba:	18fb      	adds	r3, r7, r3
 800a3bc:	0011      	movs	r1, r2
 800a3be:	0018      	movs	r0, r3
 800a3c0:	f000 fdd2 	bl	800af68 <xTaskCheckForTimeOut>
 800a3c4:	1e03      	subs	r3, r0, #0
 800a3c6:	d12e      	bne.n	800a426 <xQueueSemaphoreTake+0x168>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	0018      	movs	r0, r3
 800a3cc:	f000 f956 	bl	800a67c <prvIsQueueEmpty>
 800a3d0:	1e03      	subs	r3, r0, #0
 800a3d2:	d021      	beq.n	800a418 <xQueueSemaphoreTake+0x15a>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3d4:	69fb      	ldr	r3, [r7, #28]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	2b00      	cmp	r3, #0
 800a3da:	d10a      	bne.n	800a3f2 <xQueueSemaphoreTake+0x134>
					{
						taskENTER_CRITICAL();
 800a3dc:	f001 fd10 	bl	800be00 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a3e0:	69fb      	ldr	r3, [r7, #28]
 800a3e2:	689b      	ldr	r3, [r3, #8]
 800a3e4:	0018      	movs	r0, r3
 800a3e6:	f000 fee7 	bl	800b1b8 <xTaskPriorityInherit>
 800a3ea:	0003      	movs	r3, r0
 800a3ec:	623b      	str	r3, [r7, #32]
						}
						taskEXIT_CRITICAL();
 800a3ee:	f001 fd19 	bl	800be24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a3f2:	69fb      	ldr	r3, [r7, #28]
 800a3f4:	3324      	adds	r3, #36	; 0x24
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	0011      	movs	r1, r2
 800a3fa:	0018      	movs	r0, r3
 800a3fc:	f000 fd00 	bl	800ae00 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a400:	69fb      	ldr	r3, [r7, #28]
 800a402:	0018      	movs	r0, r3
 800a404:	f000 f8dc 	bl	800a5c0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a408:	f000 fb5e 	bl	800aac8 <xTaskResumeAll>
 800a40c:	1e03      	subs	r3, r0, #0
 800a40e:	d000      	beq.n	800a412 <xQueueSemaphoreTake+0x154>
 800a410:	e779      	b.n	800a306 <xQueueSemaphoreTake+0x48>
				{
					portYIELD_WITHIN_API();
 800a412:	f001 fce5 	bl	800bde0 <vPortYield>
 800a416:	e776      	b.n	800a306 <xQueueSemaphoreTake+0x48>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a418:	69fb      	ldr	r3, [r7, #28]
 800a41a:	0018      	movs	r0, r3
 800a41c:	f000 f8d0 	bl	800a5c0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a420:	f000 fb52 	bl	800aac8 <xTaskResumeAll>
 800a424:	e76f      	b.n	800a306 <xQueueSemaphoreTake+0x48>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a426:	69fb      	ldr	r3, [r7, #28]
 800a428:	0018      	movs	r0, r3
 800a42a:	f000 f8c9 	bl	800a5c0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a42e:	f000 fb4b 	bl	800aac8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a432:	69fb      	ldr	r3, [r7, #28]
 800a434:	0018      	movs	r0, r3
 800a436:	f000 f921 	bl	800a67c <prvIsQueueEmpty>
 800a43a:	1e03      	subs	r3, r0, #0
 800a43c:	d100      	bne.n	800a440 <xQueueSemaphoreTake+0x182>
 800a43e:	e762      	b.n	800a306 <xQueueSemaphoreTake+0x48>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a440:	6a3b      	ldr	r3, [r7, #32]
 800a442:	2b00      	cmp	r3, #0
 800a444:	d010      	beq.n	800a468 <xQueueSemaphoreTake+0x1aa>
					{
						taskENTER_CRITICAL();
 800a446:	f001 fcdb 	bl	800be00 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a44a:	69fb      	ldr	r3, [r7, #28]
 800a44c:	0018      	movs	r0, r3
 800a44e:	f000 f810 	bl	800a472 <prvGetDisinheritPriorityAfterTimeout>
 800a452:	0003      	movs	r3, r0
 800a454:	617b      	str	r3, [r7, #20]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	689b      	ldr	r3, [r3, #8]
 800a45a:	697a      	ldr	r2, [r7, #20]
 800a45c:	0011      	movs	r1, r2
 800a45e:	0018      	movs	r0, r3
 800a460:	f000 ff6e 	bl	800b340 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a464:	f001 fcde 	bl	800be24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a468:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a46a:	0018      	movs	r0, r3
 800a46c:	46bd      	mov	sp, r7
 800a46e:	b00a      	add	sp, #40	; 0x28
 800a470:	bd80      	pop	{r7, pc}

0800a472 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a472:	b580      	push	{r7, lr}
 800a474:	b084      	sub	sp, #16
 800a476:	af00      	add	r7, sp, #0
 800a478:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a47e:	2b00      	cmp	r3, #0
 800a480:	d006      	beq.n	800a490 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a482:	687b      	ldr	r3, [r7, #4]
 800a484:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	2207      	movs	r2, #7
 800a48a:	1ad3      	subs	r3, r2, r3
 800a48c:	60fb      	str	r3, [r7, #12]
 800a48e:	e001      	b.n	800a494 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a490:	2300      	movs	r3, #0
 800a492:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a494:	68fb      	ldr	r3, [r7, #12]
	}
 800a496:	0018      	movs	r0, r3
 800a498:	46bd      	mov	sp, r7
 800a49a:	b004      	add	sp, #16
 800a49c:	bd80      	pop	{r7, pc}

0800a49e <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a49e:	b580      	push	{r7, lr}
 800a4a0:	b086      	sub	sp, #24
 800a4a2:	af00      	add	r7, sp, #0
 800a4a4:	60f8      	str	r0, [r7, #12]
 800a4a6:	60b9      	str	r1, [r7, #8]
 800a4a8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a4b2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a4b4:	68fb      	ldr	r3, [r7, #12]
 800a4b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d10e      	bne.n	800a4da <prvCopyDataToQueue+0x3c>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	681b      	ldr	r3, [r3, #0]
 800a4c0:	2b00      	cmp	r3, #0
 800a4c2:	d14e      	bne.n	800a562 <prvCopyDataToQueue+0xc4>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	689b      	ldr	r3, [r3, #8]
 800a4c8:	0018      	movs	r0, r3
 800a4ca:	f000 fedd 	bl	800b288 <xTaskPriorityDisinherit>
 800a4ce:	0003      	movs	r3, r0
 800a4d0:	617b      	str	r3, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a4d2:	68fb      	ldr	r3, [r7, #12]
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	609a      	str	r2, [r3, #8]
 800a4d8:	e043      	b.n	800a562 <prvCopyDataToQueue+0xc4>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a4da:	687b      	ldr	r3, [r7, #4]
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d119      	bne.n	800a514 <prvCopyDataToQueue+0x76>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6858      	ldr	r0, [r3, #4]
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a4e8:	68bb      	ldr	r3, [r7, #8]
 800a4ea:	0019      	movs	r1, r3
 800a4ec:	f003 fdba 	bl	800e064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	685a      	ldr	r2, [r3, #4]
 800a4f4:	68fb      	ldr	r3, [r7, #12]
 800a4f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a4f8:	18d2      	adds	r2, r2, r3
 800a4fa:	68fb      	ldr	r3, [r7, #12]
 800a4fc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a4fe:	68fb      	ldr	r3, [r7, #12]
 800a500:	685a      	ldr	r2, [r3, #4]
 800a502:	68fb      	ldr	r3, [r7, #12]
 800a504:	689b      	ldr	r3, [r3, #8]
 800a506:	429a      	cmp	r2, r3
 800a508:	d32b      	bcc.n	800a562 <prvCopyDataToQueue+0xc4>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681a      	ldr	r2, [r3, #0]
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	605a      	str	r2, [r3, #4]
 800a512:	e026      	b.n	800a562 <prvCopyDataToQueue+0xc4>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	68d8      	ldr	r0, [r3, #12]
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a51c:	68bb      	ldr	r3, [r7, #8]
 800a51e:	0019      	movs	r1, r3
 800a520:	f003 fda0 	bl	800e064 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a524:	68fb      	ldr	r3, [r7, #12]
 800a526:	68da      	ldr	r2, [r3, #12]
 800a528:	68fb      	ldr	r3, [r7, #12]
 800a52a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a52c:	425b      	negs	r3, r3
 800a52e:	18d2      	adds	r2, r2, r3
 800a530:	68fb      	ldr	r3, [r7, #12]
 800a532:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	68da      	ldr	r2, [r3, #12]
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	429a      	cmp	r2, r3
 800a53e:	d207      	bcs.n	800a550 <prvCopyDataToQueue+0xb2>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	689a      	ldr	r2, [r3, #8]
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a548:	425b      	negs	r3, r3
 800a54a:	18d2      	adds	r2, r2, r3
 800a54c:	68fb      	ldr	r3, [r7, #12]
 800a54e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	2b02      	cmp	r3, #2
 800a554:	d105      	bne.n	800a562 <prvCopyDataToQueue+0xc4>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	2b00      	cmp	r3, #0
 800a55a:	d002      	beq.n	800a562 <prvCopyDataToQueue+0xc4>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a55c:	693b      	ldr	r3, [r7, #16]
 800a55e:	3b01      	subs	r3, #1
 800a560:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a562:	693b      	ldr	r3, [r7, #16]
 800a564:	1c5a      	adds	r2, r3, #1
 800a566:	68fb      	ldr	r3, [r7, #12]
 800a568:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a56a:	697b      	ldr	r3, [r7, #20]
}
 800a56c:	0018      	movs	r0, r3
 800a56e:	46bd      	mov	sp, r7
 800a570:	b006      	add	sp, #24
 800a572:	bd80      	pop	{r7, pc}

0800a574 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a574:	b580      	push	{r7, lr}
 800a576:	b082      	sub	sp, #8
 800a578:	af00      	add	r7, sp, #0
 800a57a:	6078      	str	r0, [r7, #4]
 800a57c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	2b00      	cmp	r3, #0
 800a584:	d018      	beq.n	800a5b8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a586:	687b      	ldr	r3, [r7, #4]
 800a588:	68da      	ldr	r2, [r3, #12]
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a58e:	18d2      	adds	r2, r2, r3
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	68da      	ldr	r2, [r3, #12]
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	689b      	ldr	r3, [r3, #8]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	d303      	bcc.n	800a5a8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a5a0:	687b      	ldr	r3, [r7, #4]
 800a5a2:	681a      	ldr	r2, [r3, #0]
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	68d9      	ldr	r1, [r3, #12]
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a5b0:	683b      	ldr	r3, [r7, #0]
 800a5b2:	0018      	movs	r0, r3
 800a5b4:	f003 fd56 	bl	800e064 <memcpy>
	}
}
 800a5b8:	46c0      	nop			; (mov r8, r8)
 800a5ba:	46bd      	mov	sp, r7
 800a5bc:	b002      	add	sp, #8
 800a5be:	bd80      	pop	{r7, pc}

0800a5c0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a5c0:	b580      	push	{r7, lr}
 800a5c2:	b084      	sub	sp, #16
 800a5c4:	af00      	add	r7, sp, #0
 800a5c6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a5c8:	f001 fc1a 	bl	800be00 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a5cc:	230f      	movs	r3, #15
 800a5ce:	18fb      	adds	r3, r7, r3
 800a5d0:	687a      	ldr	r2, [r7, #4]
 800a5d2:	2145      	movs	r1, #69	; 0x45
 800a5d4:	5c52      	ldrb	r2, [r2, r1]
 800a5d6:	701a      	strb	r2, [r3, #0]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a5d8:	e013      	b.n	800a602 <prvUnlockQueue+0x42>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a5da:	687b      	ldr	r3, [r7, #4]
 800a5dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5de:	2b00      	cmp	r3, #0
 800a5e0:	d016      	beq.n	800a610 <prvUnlockQueue+0x50>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	3324      	adds	r3, #36	; 0x24
 800a5e6:	0018      	movs	r0, r3
 800a5e8:	f000 fc4e 	bl	800ae88 <xTaskRemoveFromEventList>
 800a5ec:	1e03      	subs	r3, r0, #0
 800a5ee:	d001      	beq.n	800a5f4 <prvUnlockQueue+0x34>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a5f0:	f000 fd0a 	bl	800b008 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a5f4:	210f      	movs	r1, #15
 800a5f6:	187b      	adds	r3, r7, r1
 800a5f8:	781b      	ldrb	r3, [r3, #0]
 800a5fa:	3b01      	subs	r3, #1
 800a5fc:	b2da      	uxtb	r2, r3
 800a5fe:	187b      	adds	r3, r7, r1
 800a600:	701a      	strb	r2, [r3, #0]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a602:	230f      	movs	r3, #15
 800a604:	18fb      	adds	r3, r7, r3
 800a606:	781b      	ldrb	r3, [r3, #0]
 800a608:	b25b      	sxtb	r3, r3
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	dce5      	bgt.n	800a5da <prvUnlockQueue+0x1a>
 800a60e:	e000      	b.n	800a612 <prvUnlockQueue+0x52>
					break;
 800a610:	46c0      	nop			; (mov r8, r8)
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a612:	687b      	ldr	r3, [r7, #4]
 800a614:	2245      	movs	r2, #69	; 0x45
 800a616:	21ff      	movs	r1, #255	; 0xff
 800a618:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a61a:	f001 fc03 	bl	800be24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a61e:	f001 fbef 	bl	800be00 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a622:	230e      	movs	r3, #14
 800a624:	18fb      	adds	r3, r7, r3
 800a626:	687a      	ldr	r2, [r7, #4]
 800a628:	2144      	movs	r1, #68	; 0x44
 800a62a:	5c52      	ldrb	r2, [r2, r1]
 800a62c:	701a      	strb	r2, [r3, #0]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a62e:	e013      	b.n	800a658 <prvUnlockQueue+0x98>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a630:	687b      	ldr	r3, [r7, #4]
 800a632:	691b      	ldr	r3, [r3, #16]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d016      	beq.n	800a666 <prvUnlockQueue+0xa6>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	3310      	adds	r3, #16
 800a63c:	0018      	movs	r0, r3
 800a63e:	f000 fc23 	bl	800ae88 <xTaskRemoveFromEventList>
 800a642:	1e03      	subs	r3, r0, #0
 800a644:	d001      	beq.n	800a64a <prvUnlockQueue+0x8a>
				{
					vTaskMissedYield();
 800a646:	f000 fcdf 	bl	800b008 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a64a:	210e      	movs	r1, #14
 800a64c:	187b      	adds	r3, r7, r1
 800a64e:	781b      	ldrb	r3, [r3, #0]
 800a650:	3b01      	subs	r3, #1
 800a652:	b2da      	uxtb	r2, r3
 800a654:	187b      	adds	r3, r7, r1
 800a656:	701a      	strb	r2, [r3, #0]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a658:	230e      	movs	r3, #14
 800a65a:	18fb      	adds	r3, r7, r3
 800a65c:	781b      	ldrb	r3, [r3, #0]
 800a65e:	b25b      	sxtb	r3, r3
 800a660:	2b00      	cmp	r3, #0
 800a662:	dce5      	bgt.n	800a630 <prvUnlockQueue+0x70>
 800a664:	e000      	b.n	800a668 <prvUnlockQueue+0xa8>
			}
			else
			{
				break;
 800a666:	46c0      	nop			; (mov r8, r8)
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a668:	687b      	ldr	r3, [r7, #4]
 800a66a:	2244      	movs	r2, #68	; 0x44
 800a66c:	21ff      	movs	r1, #255	; 0xff
 800a66e:	5499      	strb	r1, [r3, r2]
	}
	taskEXIT_CRITICAL();
 800a670:	f001 fbd8 	bl	800be24 <vPortExitCritical>
}
 800a674:	46c0      	nop			; (mov r8, r8)
 800a676:	46bd      	mov	sp, r7
 800a678:	b004      	add	sp, #16
 800a67a:	bd80      	pop	{r7, pc}

0800a67c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a67c:	b580      	push	{r7, lr}
 800a67e:	b084      	sub	sp, #16
 800a680:	af00      	add	r7, sp, #0
 800a682:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a684:	f001 fbbc 	bl	800be00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a688:	687b      	ldr	r3, [r7, #4]
 800a68a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d102      	bne.n	800a696 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a690:	2301      	movs	r3, #1
 800a692:	60fb      	str	r3, [r7, #12]
 800a694:	e001      	b.n	800a69a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a696:	2300      	movs	r3, #0
 800a698:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a69a:	f001 fbc3 	bl	800be24 <vPortExitCritical>

	return xReturn;
 800a69e:	68fb      	ldr	r3, [r7, #12]
}
 800a6a0:	0018      	movs	r0, r3
 800a6a2:	46bd      	mov	sp, r7
 800a6a4:	b004      	add	sp, #16
 800a6a6:	bd80      	pop	{r7, pc}

0800a6a8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a6a8:	b580      	push	{r7, lr}
 800a6aa:	b084      	sub	sp, #16
 800a6ac:	af00      	add	r7, sp, #0
 800a6ae:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a6b0:	f001 fba6 	bl	800be00 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a6b4:	687b      	ldr	r3, [r7, #4]
 800a6b6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a6bc:	429a      	cmp	r2, r3
 800a6be:	d102      	bne.n	800a6c6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a6c0:	2301      	movs	r3, #1
 800a6c2:	60fb      	str	r3, [r7, #12]
 800a6c4:	e001      	b.n	800a6ca <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a6c6:	2300      	movs	r3, #0
 800a6c8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a6ca:	f001 fbab 	bl	800be24 <vPortExitCritical>

	return xReturn;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
}
 800a6d0:	0018      	movs	r0, r3
 800a6d2:	46bd      	mov	sp, r7
 800a6d4:	b004      	add	sp, #16
 800a6d6:	bd80      	pop	{r7, pc}

0800a6d8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a6d8:	b580      	push	{r7, lr}
 800a6da:	b084      	sub	sp, #16
 800a6dc:	af00      	add	r7, sp, #0
 800a6de:	6078      	str	r0, [r7, #4]
 800a6e0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	60fb      	str	r3, [r7, #12]
 800a6e6:	e015      	b.n	800a714 <vQueueAddToRegistry+0x3c>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a6e8:	4b0e      	ldr	r3, [pc, #56]	; (800a724 <vQueueAddToRegistry+0x4c>)
 800a6ea:	68fa      	ldr	r2, [r7, #12]
 800a6ec:	00d2      	lsls	r2, r2, #3
 800a6ee:	58d3      	ldr	r3, [r2, r3]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	d10c      	bne.n	800a70e <vQueueAddToRegistry+0x36>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a6f4:	4b0b      	ldr	r3, [pc, #44]	; (800a724 <vQueueAddToRegistry+0x4c>)
 800a6f6:	68fa      	ldr	r2, [r7, #12]
 800a6f8:	00d2      	lsls	r2, r2, #3
 800a6fa:	6839      	ldr	r1, [r7, #0]
 800a6fc:	50d1      	str	r1, [r2, r3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a6fe:	4a09      	ldr	r2, [pc, #36]	; (800a724 <vQueueAddToRegistry+0x4c>)
 800a700:	68fb      	ldr	r3, [r7, #12]
 800a702:	00db      	lsls	r3, r3, #3
 800a704:	18d3      	adds	r3, r2, r3
 800a706:	3304      	adds	r3, #4
 800a708:	687a      	ldr	r2, [r7, #4]
 800a70a:	601a      	str	r2, [r3, #0]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a70c:	e006      	b.n	800a71c <vQueueAddToRegistry+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a70e:	68fb      	ldr	r3, [r7, #12]
 800a710:	3301      	adds	r3, #1
 800a712:	60fb      	str	r3, [r7, #12]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	2b07      	cmp	r3, #7
 800a718:	d9e6      	bls.n	800a6e8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a71a:	46c0      	nop			; (mov r8, r8)
 800a71c:	46c0      	nop			; (mov r8, r8)
 800a71e:	46bd      	mov	sp, r7
 800a720:	b004      	add	sp, #16
 800a722:	bd80      	pop	{r7, pc}
 800a724:	20000af0 	.word	0x20000af0

0800a728 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b086      	sub	sp, #24
 800a72c:	af00      	add	r7, sp, #0
 800a72e:	60f8      	str	r0, [r7, #12]
 800a730:	60b9      	str	r1, [r7, #8]
 800a732:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a734:	68fb      	ldr	r3, [r7, #12]
 800a736:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a738:	f001 fb62 	bl	800be00 <vPortEnterCritical>
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	2244      	movs	r2, #68	; 0x44
 800a740:	5c9b      	ldrb	r3, [r3, r2]
 800a742:	b25b      	sxtb	r3, r3
 800a744:	3301      	adds	r3, #1
 800a746:	d103      	bne.n	800a750 <vQueueWaitForMessageRestricted+0x28>
 800a748:	697b      	ldr	r3, [r7, #20]
 800a74a:	2244      	movs	r2, #68	; 0x44
 800a74c:	2100      	movs	r1, #0
 800a74e:	5499      	strb	r1, [r3, r2]
 800a750:	697b      	ldr	r3, [r7, #20]
 800a752:	2245      	movs	r2, #69	; 0x45
 800a754:	5c9b      	ldrb	r3, [r3, r2]
 800a756:	b25b      	sxtb	r3, r3
 800a758:	3301      	adds	r3, #1
 800a75a:	d103      	bne.n	800a764 <vQueueWaitForMessageRestricted+0x3c>
 800a75c:	697b      	ldr	r3, [r7, #20]
 800a75e:	2245      	movs	r2, #69	; 0x45
 800a760:	2100      	movs	r1, #0
 800a762:	5499      	strb	r1, [r3, r2]
 800a764:	f001 fb5e 	bl	800be24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a768:	697b      	ldr	r3, [r7, #20]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	2b00      	cmp	r3, #0
 800a76e:	d106      	bne.n	800a77e <vQueueWaitForMessageRestricted+0x56>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a770:	697b      	ldr	r3, [r7, #20]
 800a772:	3324      	adds	r3, #36	; 0x24
 800a774:	687a      	ldr	r2, [r7, #4]
 800a776:	68b9      	ldr	r1, [r7, #8]
 800a778:	0018      	movs	r0, r3
 800a77a:	f000 fb5f 	bl	800ae3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a77e:	697b      	ldr	r3, [r7, #20]
 800a780:	0018      	movs	r0, r3
 800a782:	f7ff ff1d 	bl	800a5c0 <prvUnlockQueue>
	}
 800a786:	46c0      	nop			; (mov r8, r8)
 800a788:	46bd      	mov	sp, r7
 800a78a:	b006      	add	sp, #24
 800a78c:	bd80      	pop	{r7, pc}

0800a78e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a78e:	b590      	push	{r4, r7, lr}
 800a790:	b08d      	sub	sp, #52	; 0x34
 800a792:	af04      	add	r7, sp, #16
 800a794:	60f8      	str	r0, [r7, #12]
 800a796:	60b9      	str	r1, [r7, #8]
 800a798:	603b      	str	r3, [r7, #0]
 800a79a:	1dbb      	adds	r3, r7, #6
 800a79c:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a79e:	1dbb      	adds	r3, r7, #6
 800a7a0:	881b      	ldrh	r3, [r3, #0]
 800a7a2:	009b      	lsls	r3, r3, #2
 800a7a4:	0018      	movs	r0, r3
 800a7a6:	f001 fbc3 	bl	800bf30 <pvPortMalloc>
 800a7aa:	0003      	movs	r3, r0
 800a7ac:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 800a7ae:	697b      	ldr	r3, [r7, #20]
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d010      	beq.n	800a7d6 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a7b4:	2054      	movs	r0, #84	; 0x54
 800a7b6:	f001 fbbb 	bl	800bf30 <pvPortMalloc>
 800a7ba:	0003      	movs	r3, r0
 800a7bc:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 800a7be:	69fb      	ldr	r3, [r7, #28]
 800a7c0:	2b00      	cmp	r3, #0
 800a7c2:	d003      	beq.n	800a7cc <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a7c4:	69fb      	ldr	r3, [r7, #28]
 800a7c6:	697a      	ldr	r2, [r7, #20]
 800a7c8:	631a      	str	r2, [r3, #48]	; 0x30
 800a7ca:	e006      	b.n	800a7da <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	0018      	movs	r0, r3
 800a7d0:	f001 fc5a 	bl	800c088 <vPortFree>
 800a7d4:	e001      	b.n	800a7da <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a7da:	69fb      	ldr	r3, [r7, #28]
 800a7dc:	2b00      	cmp	r3, #0
 800a7de:	d016      	beq.n	800a80e <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a7e0:	1dbb      	adds	r3, r7, #6
 800a7e2:	881a      	ldrh	r2, [r3, #0]
 800a7e4:	683c      	ldr	r4, [r7, #0]
 800a7e6:	68b9      	ldr	r1, [r7, #8]
 800a7e8:	68f8      	ldr	r0, [r7, #12]
 800a7ea:	2300      	movs	r3, #0
 800a7ec:	9303      	str	r3, [sp, #12]
 800a7ee:	69fb      	ldr	r3, [r7, #28]
 800a7f0:	9302      	str	r3, [sp, #8]
 800a7f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a7f4:	9301      	str	r3, [sp, #4]
 800a7f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a7f8:	9300      	str	r3, [sp, #0]
 800a7fa:	0023      	movs	r3, r4
 800a7fc:	f000 f810 	bl	800a820 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a800:	69fb      	ldr	r3, [r7, #28]
 800a802:	0018      	movs	r0, r3
 800a804:	f000 f88e 	bl	800a924 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a808:	2301      	movs	r3, #1
 800a80a:	61bb      	str	r3, [r7, #24]
 800a80c:	e002      	b.n	800a814 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a80e:	2301      	movs	r3, #1
 800a810:	425b      	negs	r3, r3
 800a812:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a814:	69bb      	ldr	r3, [r7, #24]
	}
 800a816:	0018      	movs	r0, r3
 800a818:	46bd      	mov	sp, r7
 800a81a:	b009      	add	sp, #36	; 0x24
 800a81c:	bd90      	pop	{r4, r7, pc}
	...

0800a820 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a820:	b580      	push	{r7, lr}
 800a822:	b086      	sub	sp, #24
 800a824:	af00      	add	r7, sp, #0
 800a826:	60f8      	str	r0, [r7, #12]
 800a828:	60b9      	str	r1, [r7, #8]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a830:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	493a      	ldr	r1, [pc, #232]	; (800a920 <prvInitialiseNewTask+0x100>)
 800a836:	468c      	mov	ip, r1
 800a838:	4463      	add	r3, ip
 800a83a:	009b      	lsls	r3, r3, #2
 800a83c:	18d3      	adds	r3, r2, r3
 800a83e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a840:	693b      	ldr	r3, [r7, #16]
 800a842:	2207      	movs	r2, #7
 800a844:	4393      	bics	r3, r2
 800a846:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a848:	693b      	ldr	r3, [r7, #16]
 800a84a:	2207      	movs	r2, #7
 800a84c:	4013      	ands	r3, r2
 800a84e:	d001      	beq.n	800a854 <prvInitialiseNewTask+0x34>
 800a850:	b672      	cpsid	i
 800a852:	e7fe      	b.n	800a852 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a854:	68bb      	ldr	r3, [r7, #8]
 800a856:	2b00      	cmp	r3, #0
 800a858:	d020      	beq.n	800a89c <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a85a:	2300      	movs	r3, #0
 800a85c:	617b      	str	r3, [r7, #20]
 800a85e:	e013      	b.n	800a888 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a860:	68ba      	ldr	r2, [r7, #8]
 800a862:	697b      	ldr	r3, [r7, #20]
 800a864:	18d3      	adds	r3, r2, r3
 800a866:	7818      	ldrb	r0, [r3, #0]
 800a868:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a86a:	2134      	movs	r1, #52	; 0x34
 800a86c:	697b      	ldr	r3, [r7, #20]
 800a86e:	18d3      	adds	r3, r2, r3
 800a870:	185b      	adds	r3, r3, r1
 800a872:	1c02      	adds	r2, r0, #0
 800a874:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a876:	68ba      	ldr	r2, [r7, #8]
 800a878:	697b      	ldr	r3, [r7, #20]
 800a87a:	18d3      	adds	r3, r2, r3
 800a87c:	781b      	ldrb	r3, [r3, #0]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	d006      	beq.n	800a890 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a882:	697b      	ldr	r3, [r7, #20]
 800a884:	3301      	adds	r3, #1
 800a886:	617b      	str	r3, [r7, #20]
 800a888:	697b      	ldr	r3, [r7, #20]
 800a88a:	2b0f      	cmp	r3, #15
 800a88c:	d9e8      	bls.n	800a860 <prvInitialiseNewTask+0x40>
 800a88e:	e000      	b.n	800a892 <prvInitialiseNewTask+0x72>
			{
				break;
 800a890:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a894:	2243      	movs	r2, #67	; 0x43
 800a896:	2100      	movs	r1, #0
 800a898:	5499      	strb	r1, [r3, r2]
 800a89a:	e003      	b.n	800a8a4 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a89e:	2234      	movs	r2, #52	; 0x34
 800a8a0:	2100      	movs	r1, #0
 800a8a2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a8a4:	6a3b      	ldr	r3, [r7, #32]
 800a8a6:	2b06      	cmp	r3, #6
 800a8a8:	d901      	bls.n	800a8ae <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a8aa:	2306      	movs	r3, #6
 800a8ac:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a8ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b0:	6a3a      	ldr	r2, [r7, #32]
 800a8b2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a8b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8b6:	6a3a      	ldr	r2, [r7, #32]
 800a8b8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 800a8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8bc:	2200      	movs	r2, #0
 800a8be:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a8c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8c2:	3304      	adds	r3, #4
 800a8c4:	0018      	movs	r0, r3
 800a8c6:	f7ff f9de 	bl	8009c86 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8cc:	3318      	adds	r3, #24
 800a8ce:	0018      	movs	r0, r3
 800a8d0:	f7ff f9d9 	bl	8009c86 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a8d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8d6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8d8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a8da:	6a3b      	ldr	r3, [r7, #32]
 800a8dc:	2207      	movs	r2, #7
 800a8de:	1ad2      	subs	r2, r2, r3
 800a8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a8e8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a8ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8ec:	2200      	movs	r2, #0
 800a8ee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a8f2:	2250      	movs	r2, #80	; 0x50
 800a8f4:	2100      	movs	r1, #0
 800a8f6:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a8f8:	683a      	ldr	r2, [r7, #0]
 800a8fa:	68f9      	ldr	r1, [r7, #12]
 800a8fc:	693b      	ldr	r3, [r7, #16]
 800a8fe:	0018      	movs	r0, r3
 800a900:	f001 f9e4 	bl	800bccc <pxPortInitialiseStack>
 800a904:	0002      	movs	r2, r0
 800a906:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a908:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a90a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a90c:	2b00      	cmp	r3, #0
 800a90e:	d002      	beq.n	800a916 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a912:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a914:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a916:	46c0      	nop			; (mov r8, r8)
 800a918:	46bd      	mov	sp, r7
 800a91a:	b006      	add	sp, #24
 800a91c:	bd80      	pop	{r7, pc}
 800a91e:	46c0      	nop			; (mov r8, r8)
 800a920:	3fffffff 	.word	0x3fffffff

0800a924 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a924:	b580      	push	{r7, lr}
 800a926:	b082      	sub	sp, #8
 800a928:	af00      	add	r7, sp, #0
 800a92a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a92c:	f001 fa68 	bl	800be00 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a930:	4b28      	ldr	r3, [pc, #160]	; (800a9d4 <prvAddNewTaskToReadyList+0xb0>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	1c5a      	adds	r2, r3, #1
 800a936:	4b27      	ldr	r3, [pc, #156]	; (800a9d4 <prvAddNewTaskToReadyList+0xb0>)
 800a938:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800a93a:	4b27      	ldr	r3, [pc, #156]	; (800a9d8 <prvAddNewTaskToReadyList+0xb4>)
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	2b00      	cmp	r3, #0
 800a940:	d109      	bne.n	800a956 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a942:	4b25      	ldr	r3, [pc, #148]	; (800a9d8 <prvAddNewTaskToReadyList+0xb4>)
 800a944:	687a      	ldr	r2, [r7, #4]
 800a946:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a948:	4b22      	ldr	r3, [pc, #136]	; (800a9d4 <prvAddNewTaskToReadyList+0xb0>)
 800a94a:	681b      	ldr	r3, [r3, #0]
 800a94c:	2b01      	cmp	r3, #1
 800a94e:	d110      	bne.n	800a972 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a950:	f000 fb74 	bl	800b03c <prvInitialiseTaskLists>
 800a954:	e00d      	b.n	800a972 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a956:	4b21      	ldr	r3, [pc, #132]	; (800a9dc <prvAddNewTaskToReadyList+0xb8>)
 800a958:	681b      	ldr	r3, [r3, #0]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	d109      	bne.n	800a972 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a95e:	4b1e      	ldr	r3, [pc, #120]	; (800a9d8 <prvAddNewTaskToReadyList+0xb4>)
 800a960:	681b      	ldr	r3, [r3, #0]
 800a962:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a968:	429a      	cmp	r2, r3
 800a96a:	d802      	bhi.n	800a972 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a96c:	4b1a      	ldr	r3, [pc, #104]	; (800a9d8 <prvAddNewTaskToReadyList+0xb4>)
 800a96e:	687a      	ldr	r2, [r7, #4]
 800a970:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a972:	4b1b      	ldr	r3, [pc, #108]	; (800a9e0 <prvAddNewTaskToReadyList+0xbc>)
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	1c5a      	adds	r2, r3, #1
 800a978:	4b19      	ldr	r3, [pc, #100]	; (800a9e0 <prvAddNewTaskToReadyList+0xbc>)
 800a97a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a980:	4b18      	ldr	r3, [pc, #96]	; (800a9e4 <prvAddNewTaskToReadyList+0xc0>)
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	429a      	cmp	r2, r3
 800a986:	d903      	bls.n	800a990 <prvAddNewTaskToReadyList+0x6c>
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a98c:	4b15      	ldr	r3, [pc, #84]	; (800a9e4 <prvAddNewTaskToReadyList+0xc0>)
 800a98e:	601a      	str	r2, [r3, #0]
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a994:	0013      	movs	r3, r2
 800a996:	009b      	lsls	r3, r3, #2
 800a998:	189b      	adds	r3, r3, r2
 800a99a:	009b      	lsls	r3, r3, #2
 800a99c:	4a12      	ldr	r2, [pc, #72]	; (800a9e8 <prvAddNewTaskToReadyList+0xc4>)
 800a99e:	189a      	adds	r2, r3, r2
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	3304      	adds	r3, #4
 800a9a4:	0019      	movs	r1, r3
 800a9a6:	0010      	movs	r0, r2
 800a9a8:	f7ff f978 	bl	8009c9c <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a9ac:	f001 fa3a 	bl	800be24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a9b0:	4b0a      	ldr	r3, [pc, #40]	; (800a9dc <prvAddNewTaskToReadyList+0xb8>)
 800a9b2:	681b      	ldr	r3, [r3, #0]
 800a9b4:	2b00      	cmp	r3, #0
 800a9b6:	d008      	beq.n	800a9ca <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a9b8:	4b07      	ldr	r3, [pc, #28]	; (800a9d8 <prvAddNewTaskToReadyList+0xb4>)
 800a9ba:	681b      	ldr	r3, [r3, #0]
 800a9bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a9be:	687b      	ldr	r3, [r7, #4]
 800a9c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a9c2:	429a      	cmp	r2, r3
 800a9c4:	d201      	bcs.n	800a9ca <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a9c6:	f001 fa0b 	bl	800bde0 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a9ca:	46c0      	nop			; (mov r8, r8)
 800a9cc:	46bd      	mov	sp, r7
 800a9ce:	b002      	add	sp, #8
 800a9d0:	bd80      	pop	{r7, pc}
 800a9d2:	46c0      	nop			; (mov r8, r8)
 800a9d4:	20000c30 	.word	0x20000c30
 800a9d8:	20000b30 	.word	0x20000b30
 800a9dc:	20000c3c 	.word	0x20000c3c
 800a9e0:	20000c4c 	.word	0x20000c4c
 800a9e4:	20000c38 	.word	0x20000c38
 800a9e8:	20000b34 	.word	0x20000b34

0800a9ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a9ec:	b580      	push	{r7, lr}
 800a9ee:	b084      	sub	sp, #16
 800a9f0:	af00      	add	r7, sp, #0
 800a9f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a9f4:	2300      	movs	r3, #0
 800a9f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a9f8:	687b      	ldr	r3, [r7, #4]
 800a9fa:	2b00      	cmp	r3, #0
 800a9fc:	d010      	beq.n	800aa20 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a9fe:	4b0d      	ldr	r3, [pc, #52]	; (800aa34 <vTaskDelay+0x48>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	2b00      	cmp	r3, #0
 800aa04:	d001      	beq.n	800aa0a <vTaskDelay+0x1e>
 800aa06:	b672      	cpsid	i
 800aa08:	e7fe      	b.n	800aa08 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800aa0a:	f000 f851 	bl	800aab0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800aa0e:	687b      	ldr	r3, [r7, #4]
 800aa10:	2100      	movs	r1, #0
 800aa12:	0018      	movs	r0, r3
 800aa14:	f000 fdd0 	bl	800b5b8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800aa18:	f000 f856 	bl	800aac8 <xTaskResumeAll>
 800aa1c:	0003      	movs	r3, r0
 800aa1e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800aa20:	68fb      	ldr	r3, [r7, #12]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d101      	bne.n	800aa2a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 800aa26:	f001 f9db 	bl	800bde0 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800aa2a:	46c0      	nop			; (mov r8, r8)
 800aa2c:	46bd      	mov	sp, r7
 800aa2e:	b004      	add	sp, #16
 800aa30:	bd80      	pop	{r7, pc}
 800aa32:	46c0      	nop			; (mov r8, r8)
 800aa34:	20000c58 	.word	0x20000c58

0800aa38 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800aa38:	b580      	push	{r7, lr}
 800aa3a:	b084      	sub	sp, #16
 800aa3c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800aa3e:	4916      	ldr	r1, [pc, #88]	; (800aa98 <vTaskStartScheduler+0x60>)
 800aa40:	4816      	ldr	r0, [pc, #88]	; (800aa9c <vTaskStartScheduler+0x64>)
 800aa42:	4b17      	ldr	r3, [pc, #92]	; (800aaa0 <vTaskStartScheduler+0x68>)
 800aa44:	9301      	str	r3, [sp, #4]
 800aa46:	2300      	movs	r3, #0
 800aa48:	9300      	str	r3, [sp, #0]
 800aa4a:	2300      	movs	r3, #0
 800aa4c:	2280      	movs	r2, #128	; 0x80
 800aa4e:	f7ff fe9e 	bl	800a78e <xTaskCreate>
 800aa52:	0003      	movs	r3, r0
 800aa54:	607b      	str	r3, [r7, #4]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	2b01      	cmp	r3, #1
 800aa5a:	d103      	bne.n	800aa64 <vTaskStartScheduler+0x2c>
		{
			xReturn = xTimerCreateTimerTask();
 800aa5c:	f000 fe00 	bl	800b660 <xTimerCreateTimerTask>
 800aa60:	0003      	movs	r3, r0
 800aa62:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b01      	cmp	r3, #1
 800aa68:	d10d      	bne.n	800aa86 <vTaskStartScheduler+0x4e>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800aa6a:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800aa6c:	4b0d      	ldr	r3, [pc, #52]	; (800aaa4 <vTaskStartScheduler+0x6c>)
 800aa6e:	2201      	movs	r2, #1
 800aa70:	4252      	negs	r2, r2
 800aa72:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800aa74:	4b0c      	ldr	r3, [pc, #48]	; (800aaa8 <vTaskStartScheduler+0x70>)
 800aa76:	2201      	movs	r2, #1
 800aa78:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800aa7a:	4b0c      	ldr	r3, [pc, #48]	; (800aaac <vTaskStartScheduler+0x74>)
 800aa7c:	2200      	movs	r2, #0
 800aa7e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800aa80:	f001 f98a 	bl	800bd98 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800aa84:	e004      	b.n	800aa90 <vTaskStartScheduler+0x58>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	3301      	adds	r3, #1
 800aa8a:	d101      	bne.n	800aa90 <vTaskStartScheduler+0x58>
 800aa8c:	b672      	cpsid	i
 800aa8e:	e7fe      	b.n	800aa8e <vTaskStartScheduler+0x56>
}
 800aa90:	46c0      	nop			; (mov r8, r8)
 800aa92:	46bd      	mov	sp, r7
 800aa94:	b002      	add	sp, #8
 800aa96:	bd80      	pop	{r7, pc}
 800aa98:	0801106c 	.word	0x0801106c
 800aa9c:	0800b01d 	.word	0x0800b01d
 800aaa0:	20000c54 	.word	0x20000c54
 800aaa4:	20000c50 	.word	0x20000c50
 800aaa8:	20000c3c 	.word	0x20000c3c
 800aaac:	20000c34 	.word	0x20000c34

0800aab0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800aab0:	b580      	push	{r7, lr}
 800aab2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aab4:	4b03      	ldr	r3, [pc, #12]	; (800aac4 <vTaskSuspendAll+0x14>)
 800aab6:	681b      	ldr	r3, [r3, #0]
 800aab8:	1c5a      	adds	r2, r3, #1
 800aaba:	4b02      	ldr	r3, [pc, #8]	; (800aac4 <vTaskSuspendAll+0x14>)
 800aabc:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aabe:	46c0      	nop			; (mov r8, r8)
 800aac0:	46bd      	mov	sp, r7
 800aac2:	bd80      	pop	{r7, pc}
 800aac4:	20000c58 	.word	0x20000c58

0800aac8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b084      	sub	sp, #16
 800aacc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aace:	2300      	movs	r3, #0
 800aad0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aad2:	2300      	movs	r3, #0
 800aad4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aad6:	4b3a      	ldr	r3, [pc, #232]	; (800abc0 <xTaskResumeAll+0xf8>)
 800aad8:	681b      	ldr	r3, [r3, #0]
 800aada:	2b00      	cmp	r3, #0
 800aadc:	d101      	bne.n	800aae2 <xTaskResumeAll+0x1a>
 800aade:	b672      	cpsid	i
 800aae0:	e7fe      	b.n	800aae0 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aae2:	f001 f98d 	bl	800be00 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aae6:	4b36      	ldr	r3, [pc, #216]	; (800abc0 <xTaskResumeAll+0xf8>)
 800aae8:	681b      	ldr	r3, [r3, #0]
 800aaea:	1e5a      	subs	r2, r3, #1
 800aaec:	4b34      	ldr	r3, [pc, #208]	; (800abc0 <xTaskResumeAll+0xf8>)
 800aaee:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aaf0:	4b33      	ldr	r3, [pc, #204]	; (800abc0 <xTaskResumeAll+0xf8>)
 800aaf2:	681b      	ldr	r3, [r3, #0]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	d15b      	bne.n	800abb0 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aaf8:	4b32      	ldr	r3, [pc, #200]	; (800abc4 <xTaskResumeAll+0xfc>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d057      	beq.n	800abb0 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab00:	e02f      	b.n	800ab62 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab02:	4b31      	ldr	r3, [pc, #196]	; (800abc8 <xTaskResumeAll+0x100>)
 800ab04:	68db      	ldr	r3, [r3, #12]
 800ab06:	68db      	ldr	r3, [r3, #12]
 800ab08:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	3318      	adds	r3, #24
 800ab0e:	0018      	movs	r0, r3
 800ab10:	f7ff f91c 	bl	8009d4c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ab14:	68fb      	ldr	r3, [r7, #12]
 800ab16:	3304      	adds	r3, #4
 800ab18:	0018      	movs	r0, r3
 800ab1a:	f7ff f917 	bl	8009d4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab22:	4b2a      	ldr	r3, [pc, #168]	; (800abcc <xTaskResumeAll+0x104>)
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	429a      	cmp	r2, r3
 800ab28:	d903      	bls.n	800ab32 <xTaskResumeAll+0x6a>
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab2e:	4b27      	ldr	r3, [pc, #156]	; (800abcc <xTaskResumeAll+0x104>)
 800ab30:	601a      	str	r2, [r3, #0]
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab36:	0013      	movs	r3, r2
 800ab38:	009b      	lsls	r3, r3, #2
 800ab3a:	189b      	adds	r3, r3, r2
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	4a24      	ldr	r2, [pc, #144]	; (800abd0 <xTaskResumeAll+0x108>)
 800ab40:	189a      	adds	r2, r3, r2
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	3304      	adds	r3, #4
 800ab46:	0019      	movs	r1, r3
 800ab48:	0010      	movs	r0, r2
 800ab4a:	f7ff f8a7 	bl	8009c9c <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ab4e:	68fb      	ldr	r3, [r7, #12]
 800ab50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ab52:	4b20      	ldr	r3, [pc, #128]	; (800abd4 <xTaskResumeAll+0x10c>)
 800ab54:	681b      	ldr	r3, [r3, #0]
 800ab56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ab58:	429a      	cmp	r2, r3
 800ab5a:	d302      	bcc.n	800ab62 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 800ab5c:	4b1e      	ldr	r3, [pc, #120]	; (800abd8 <xTaskResumeAll+0x110>)
 800ab5e:	2201      	movs	r2, #1
 800ab60:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800ab62:	4b19      	ldr	r3, [pc, #100]	; (800abc8 <xTaskResumeAll+0x100>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d1cb      	bne.n	800ab02 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800ab6a:	68fb      	ldr	r3, [r7, #12]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d001      	beq.n	800ab74 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800ab70:	f000 fae8 	bl	800b144 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800ab74:	4b19      	ldr	r3, [pc, #100]	; (800abdc <xTaskResumeAll+0x114>)
 800ab76:	681b      	ldr	r3, [r3, #0]
 800ab78:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	2b00      	cmp	r3, #0
 800ab7e:	d00f      	beq.n	800aba0 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800ab80:	f000 f83c 	bl	800abfc <xTaskIncrementTick>
 800ab84:	1e03      	subs	r3, r0, #0
 800ab86:	d002      	beq.n	800ab8e <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800ab88:	4b13      	ldr	r3, [pc, #76]	; (800abd8 <xTaskResumeAll+0x110>)
 800ab8a:	2201      	movs	r2, #1
 800ab8c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	3b01      	subs	r3, #1
 800ab92:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d1f2      	bne.n	800ab80 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 800ab9a:	4b10      	ldr	r3, [pc, #64]	; (800abdc <xTaskResumeAll+0x114>)
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800aba0:	4b0d      	ldr	r3, [pc, #52]	; (800abd8 <xTaskResumeAll+0x110>)
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	2b00      	cmp	r3, #0
 800aba6:	d003      	beq.n	800abb0 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800aba8:	2301      	movs	r3, #1
 800abaa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800abac:	f001 f918 	bl	800bde0 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800abb0:	f001 f938 	bl	800be24 <vPortExitCritical>

	return xAlreadyYielded;
 800abb4:	68bb      	ldr	r3, [r7, #8]
}
 800abb6:	0018      	movs	r0, r3
 800abb8:	46bd      	mov	sp, r7
 800abba:	b004      	add	sp, #16
 800abbc:	bd80      	pop	{r7, pc}
 800abbe:	46c0      	nop			; (mov r8, r8)
 800abc0:	20000c58 	.word	0x20000c58
 800abc4:	20000c30 	.word	0x20000c30
 800abc8:	20000bf0 	.word	0x20000bf0
 800abcc:	20000c38 	.word	0x20000c38
 800abd0:	20000b34 	.word	0x20000b34
 800abd4:	20000b30 	.word	0x20000b30
 800abd8:	20000c44 	.word	0x20000c44
 800abdc:	20000c40 	.word	0x20000c40

0800abe0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800abe0:	b580      	push	{r7, lr}
 800abe2:	b082      	sub	sp, #8
 800abe4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800abe6:	4b04      	ldr	r3, [pc, #16]	; (800abf8 <xTaskGetTickCount+0x18>)
 800abe8:	681b      	ldr	r3, [r3, #0]
 800abea:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800abec:	687b      	ldr	r3, [r7, #4]
}
 800abee:	0018      	movs	r0, r3
 800abf0:	46bd      	mov	sp, r7
 800abf2:	b002      	add	sp, #8
 800abf4:	bd80      	pop	{r7, pc}
 800abf6:	46c0      	nop			; (mov r8, r8)
 800abf8:	20000c34 	.word	0x20000c34

0800abfc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800abfc:	b580      	push	{r7, lr}
 800abfe:	b086      	sub	sp, #24
 800ac00:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800ac02:	2300      	movs	r3, #0
 800ac04:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac06:	4b4a      	ldr	r3, [pc, #296]	; (800ad30 <xTaskIncrementTick+0x134>)
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d000      	beq.n	800ac10 <xTaskIncrementTick+0x14>
 800ac0e:	e084      	b.n	800ad1a <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800ac10:	4b48      	ldr	r3, [pc, #288]	; (800ad34 <xTaskIncrementTick+0x138>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	3301      	adds	r3, #1
 800ac16:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800ac18:	4b46      	ldr	r3, [pc, #280]	; (800ad34 <xTaskIncrementTick+0x138>)
 800ac1a:	693a      	ldr	r2, [r7, #16]
 800ac1c:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800ac1e:	693b      	ldr	r3, [r7, #16]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	d117      	bne.n	800ac54 <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800ac24:	4b44      	ldr	r3, [pc, #272]	; (800ad38 <xTaskIncrementTick+0x13c>)
 800ac26:	681b      	ldr	r3, [r3, #0]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	2b00      	cmp	r3, #0
 800ac2c:	d001      	beq.n	800ac32 <xTaskIncrementTick+0x36>
 800ac2e:	b672      	cpsid	i
 800ac30:	e7fe      	b.n	800ac30 <xTaskIncrementTick+0x34>
 800ac32:	4b41      	ldr	r3, [pc, #260]	; (800ad38 <xTaskIncrementTick+0x13c>)
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	60fb      	str	r3, [r7, #12]
 800ac38:	4b40      	ldr	r3, [pc, #256]	; (800ad3c <xTaskIncrementTick+0x140>)
 800ac3a:	681a      	ldr	r2, [r3, #0]
 800ac3c:	4b3e      	ldr	r3, [pc, #248]	; (800ad38 <xTaskIncrementTick+0x13c>)
 800ac3e:	601a      	str	r2, [r3, #0]
 800ac40:	4b3e      	ldr	r3, [pc, #248]	; (800ad3c <xTaskIncrementTick+0x140>)
 800ac42:	68fa      	ldr	r2, [r7, #12]
 800ac44:	601a      	str	r2, [r3, #0]
 800ac46:	4b3e      	ldr	r3, [pc, #248]	; (800ad40 <xTaskIncrementTick+0x144>)
 800ac48:	681b      	ldr	r3, [r3, #0]
 800ac4a:	1c5a      	adds	r2, r3, #1
 800ac4c:	4b3c      	ldr	r3, [pc, #240]	; (800ad40 <xTaskIncrementTick+0x144>)
 800ac4e:	601a      	str	r2, [r3, #0]
 800ac50:	f000 fa78 	bl	800b144 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ac54:	4b3b      	ldr	r3, [pc, #236]	; (800ad44 <xTaskIncrementTick+0x148>)
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	693a      	ldr	r2, [r7, #16]
 800ac5a:	429a      	cmp	r2, r3
 800ac5c:	d349      	bcc.n	800acf2 <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ac5e:	4b36      	ldr	r3, [pc, #216]	; (800ad38 <xTaskIncrementTick+0x13c>)
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	2b00      	cmp	r3, #0
 800ac66:	d104      	bne.n	800ac72 <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac68:	4b36      	ldr	r3, [pc, #216]	; (800ad44 <xTaskIncrementTick+0x148>)
 800ac6a:	2201      	movs	r2, #1
 800ac6c:	4252      	negs	r2, r2
 800ac6e:	601a      	str	r2, [r3, #0]
					break;
 800ac70:	e03f      	b.n	800acf2 <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac72:	4b31      	ldr	r3, [pc, #196]	; (800ad38 <xTaskIncrementTick+0x13c>)
 800ac74:	681b      	ldr	r3, [r3, #0]
 800ac76:	68db      	ldr	r3, [r3, #12]
 800ac78:	68db      	ldr	r3, [r3, #12]
 800ac7a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ac7c:	68bb      	ldr	r3, [r7, #8]
 800ac7e:	685b      	ldr	r3, [r3, #4]
 800ac80:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ac82:	693a      	ldr	r2, [r7, #16]
 800ac84:	687b      	ldr	r3, [r7, #4]
 800ac86:	429a      	cmp	r2, r3
 800ac88:	d203      	bcs.n	800ac92 <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ac8a:	4b2e      	ldr	r3, [pc, #184]	; (800ad44 <xTaskIncrementTick+0x148>)
 800ac8c:	687a      	ldr	r2, [r7, #4]
 800ac8e:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ac90:	e02f      	b.n	800acf2 <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ac92:	68bb      	ldr	r3, [r7, #8]
 800ac94:	3304      	adds	r3, #4
 800ac96:	0018      	movs	r0, r3
 800ac98:	f7ff f858 	bl	8009d4c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ac9c:	68bb      	ldr	r3, [r7, #8]
 800ac9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d004      	beq.n	800acae <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aca4:	68bb      	ldr	r3, [r7, #8]
 800aca6:	3318      	adds	r3, #24
 800aca8:	0018      	movs	r0, r3
 800acaa:	f7ff f84f 	bl	8009d4c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800acae:	68bb      	ldr	r3, [r7, #8]
 800acb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb2:	4b25      	ldr	r3, [pc, #148]	; (800ad48 <xTaskIncrementTick+0x14c>)
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	429a      	cmp	r2, r3
 800acb8:	d903      	bls.n	800acc2 <xTaskIncrementTick+0xc6>
 800acba:	68bb      	ldr	r3, [r7, #8]
 800acbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acbe:	4b22      	ldr	r3, [pc, #136]	; (800ad48 <xTaskIncrementTick+0x14c>)
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	68bb      	ldr	r3, [r7, #8]
 800acc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acc6:	0013      	movs	r3, r2
 800acc8:	009b      	lsls	r3, r3, #2
 800acca:	189b      	adds	r3, r3, r2
 800accc:	009b      	lsls	r3, r3, #2
 800acce:	4a1f      	ldr	r2, [pc, #124]	; (800ad4c <xTaskIncrementTick+0x150>)
 800acd0:	189a      	adds	r2, r3, r2
 800acd2:	68bb      	ldr	r3, [r7, #8]
 800acd4:	3304      	adds	r3, #4
 800acd6:	0019      	movs	r1, r3
 800acd8:	0010      	movs	r0, r2
 800acda:	f7fe ffdf 	bl	8009c9c <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800acde:	68bb      	ldr	r3, [r7, #8]
 800ace0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ace2:	4b1b      	ldr	r3, [pc, #108]	; (800ad50 <xTaskIncrementTick+0x154>)
 800ace4:	681b      	ldr	r3, [r3, #0]
 800ace6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace8:	429a      	cmp	r2, r3
 800acea:	d3b8      	bcc.n	800ac5e <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 800acec:	2301      	movs	r3, #1
 800acee:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800acf0:	e7b5      	b.n	800ac5e <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800acf2:	4b17      	ldr	r3, [pc, #92]	; (800ad50 <xTaskIncrementTick+0x154>)
 800acf4:	681b      	ldr	r3, [r3, #0]
 800acf6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acf8:	4914      	ldr	r1, [pc, #80]	; (800ad4c <xTaskIncrementTick+0x150>)
 800acfa:	0013      	movs	r3, r2
 800acfc:	009b      	lsls	r3, r3, #2
 800acfe:	189b      	adds	r3, r3, r2
 800ad00:	009b      	lsls	r3, r3, #2
 800ad02:	585b      	ldr	r3, [r3, r1]
 800ad04:	2b01      	cmp	r3, #1
 800ad06:	d901      	bls.n	800ad0c <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 800ad08:	2301      	movs	r3, #1
 800ad0a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800ad0c:	4b11      	ldr	r3, [pc, #68]	; (800ad54 <xTaskIncrementTick+0x158>)
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d007      	beq.n	800ad24 <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800ad14:	2301      	movs	r3, #1
 800ad16:	617b      	str	r3, [r7, #20]
 800ad18:	e004      	b.n	800ad24 <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800ad1a:	4b0f      	ldr	r3, [pc, #60]	; (800ad58 <xTaskIncrementTick+0x15c>)
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	1c5a      	adds	r2, r3, #1
 800ad20:	4b0d      	ldr	r3, [pc, #52]	; (800ad58 <xTaskIncrementTick+0x15c>)
 800ad22:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800ad24:	697b      	ldr	r3, [r7, #20]
}
 800ad26:	0018      	movs	r0, r3
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	b006      	add	sp, #24
 800ad2c:	bd80      	pop	{r7, pc}
 800ad2e:	46c0      	nop			; (mov r8, r8)
 800ad30:	20000c58 	.word	0x20000c58
 800ad34:	20000c34 	.word	0x20000c34
 800ad38:	20000be8 	.word	0x20000be8
 800ad3c:	20000bec 	.word	0x20000bec
 800ad40:	20000c48 	.word	0x20000c48
 800ad44:	20000c50 	.word	0x20000c50
 800ad48:	20000c38 	.word	0x20000c38
 800ad4c:	20000b34 	.word	0x20000b34
 800ad50:	20000b30 	.word	0x20000b30
 800ad54:	20000c44 	.word	0x20000c44
 800ad58:	20000c40 	.word	0x20000c40

0800ad5c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800ad5c:	b580      	push	{r7, lr}
 800ad5e:	b082      	sub	sp, #8
 800ad60:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800ad62:	4b22      	ldr	r3, [pc, #136]	; (800adec <vTaskSwitchContext+0x90>)
 800ad64:	681b      	ldr	r3, [r3, #0]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d003      	beq.n	800ad72 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800ad6a:	4b21      	ldr	r3, [pc, #132]	; (800adf0 <vTaskSwitchContext+0x94>)
 800ad6c:	2201      	movs	r2, #1
 800ad6e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800ad70:	e037      	b.n	800ade2 <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800ad72:	4b1f      	ldr	r3, [pc, #124]	; (800adf0 <vTaskSwitchContext+0x94>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ad78:	4b1e      	ldr	r3, [pc, #120]	; (800adf4 <vTaskSwitchContext+0x98>)
 800ad7a:	681b      	ldr	r3, [r3, #0]
 800ad7c:	607b      	str	r3, [r7, #4]
 800ad7e:	e007      	b.n	800ad90 <vTaskSwitchContext+0x34>
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d101      	bne.n	800ad8a <vTaskSwitchContext+0x2e>
 800ad86:	b672      	cpsid	i
 800ad88:	e7fe      	b.n	800ad88 <vTaskSwitchContext+0x2c>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	3b01      	subs	r3, #1
 800ad8e:	607b      	str	r3, [r7, #4]
 800ad90:	4919      	ldr	r1, [pc, #100]	; (800adf8 <vTaskSwitchContext+0x9c>)
 800ad92:	687a      	ldr	r2, [r7, #4]
 800ad94:	0013      	movs	r3, r2
 800ad96:	009b      	lsls	r3, r3, #2
 800ad98:	189b      	adds	r3, r3, r2
 800ad9a:	009b      	lsls	r3, r3, #2
 800ad9c:	585b      	ldr	r3, [r3, r1]
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d0ee      	beq.n	800ad80 <vTaskSwitchContext+0x24>
 800ada2:	687a      	ldr	r2, [r7, #4]
 800ada4:	0013      	movs	r3, r2
 800ada6:	009b      	lsls	r3, r3, #2
 800ada8:	189b      	adds	r3, r3, r2
 800adaa:	009b      	lsls	r3, r3, #2
 800adac:	4a12      	ldr	r2, [pc, #72]	; (800adf8 <vTaskSwitchContext+0x9c>)
 800adae:	189b      	adds	r3, r3, r2
 800adb0:	603b      	str	r3, [r7, #0]
 800adb2:	683b      	ldr	r3, [r7, #0]
 800adb4:	685b      	ldr	r3, [r3, #4]
 800adb6:	685a      	ldr	r2, [r3, #4]
 800adb8:	683b      	ldr	r3, [r7, #0]
 800adba:	605a      	str	r2, [r3, #4]
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	685a      	ldr	r2, [r3, #4]
 800adc0:	683b      	ldr	r3, [r7, #0]
 800adc2:	3308      	adds	r3, #8
 800adc4:	429a      	cmp	r2, r3
 800adc6:	d104      	bne.n	800add2 <vTaskSwitchContext+0x76>
 800adc8:	683b      	ldr	r3, [r7, #0]
 800adca:	685b      	ldr	r3, [r3, #4]
 800adcc:	685a      	ldr	r2, [r3, #4]
 800adce:	683b      	ldr	r3, [r7, #0]
 800add0:	605a      	str	r2, [r3, #4]
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	685b      	ldr	r3, [r3, #4]
 800add6:	68da      	ldr	r2, [r3, #12]
 800add8:	4b08      	ldr	r3, [pc, #32]	; (800adfc <vTaskSwitchContext+0xa0>)
 800adda:	601a      	str	r2, [r3, #0]
 800addc:	4b05      	ldr	r3, [pc, #20]	; (800adf4 <vTaskSwitchContext+0x98>)
 800adde:	687a      	ldr	r2, [r7, #4]
 800ade0:	601a      	str	r2, [r3, #0]
}
 800ade2:	46c0      	nop			; (mov r8, r8)
 800ade4:	46bd      	mov	sp, r7
 800ade6:	b002      	add	sp, #8
 800ade8:	bd80      	pop	{r7, pc}
 800adea:	46c0      	nop			; (mov r8, r8)
 800adec:	20000c58 	.word	0x20000c58
 800adf0:	20000c44 	.word	0x20000c44
 800adf4:	20000c38 	.word	0x20000c38
 800adf8:	20000b34 	.word	0x20000b34
 800adfc:	20000b30 	.word	0x20000b30

0800ae00 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ae00:	b580      	push	{r7, lr}
 800ae02:	b082      	sub	sp, #8
 800ae04:	af00      	add	r7, sp, #0
 800ae06:	6078      	str	r0, [r7, #4]
 800ae08:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	2b00      	cmp	r3, #0
 800ae0e:	d101      	bne.n	800ae14 <vTaskPlaceOnEventList+0x14>
 800ae10:	b672      	cpsid	i
 800ae12:	e7fe      	b.n	800ae12 <vTaskPlaceOnEventList+0x12>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae14:	4b08      	ldr	r3, [pc, #32]	; (800ae38 <vTaskPlaceOnEventList+0x38>)
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	3318      	adds	r3, #24
 800ae1a:	001a      	movs	r2, r3
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	0011      	movs	r1, r2
 800ae20:	0018      	movs	r0, r3
 800ae22:	f7fe ff5d 	bl	8009ce0 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	2101      	movs	r1, #1
 800ae2a:	0018      	movs	r0, r3
 800ae2c:	f000 fbc4 	bl	800b5b8 <prvAddCurrentTaskToDelayedList>
}
 800ae30:	46c0      	nop			; (mov r8, r8)
 800ae32:	46bd      	mov	sp, r7
 800ae34:	b002      	add	sp, #8
 800ae36:	bd80      	pop	{r7, pc}
 800ae38:	20000b30 	.word	0x20000b30

0800ae3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ae3c:	b580      	push	{r7, lr}
 800ae3e:	b084      	sub	sp, #16
 800ae40:	af00      	add	r7, sp, #0
 800ae42:	60f8      	str	r0, [r7, #12]
 800ae44:	60b9      	str	r1, [r7, #8]
 800ae46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800ae48:	68fb      	ldr	r3, [r7, #12]
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	d101      	bne.n	800ae52 <vTaskPlaceOnEventListRestricted+0x16>
 800ae4e:	b672      	cpsid	i
 800ae50:	e7fe      	b.n	800ae50 <vTaskPlaceOnEventListRestricted+0x14>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ae52:	4b0c      	ldr	r3, [pc, #48]	; (800ae84 <vTaskPlaceOnEventListRestricted+0x48>)
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	3318      	adds	r3, #24
 800ae58:	001a      	movs	r2, r3
 800ae5a:	68fb      	ldr	r3, [r7, #12]
 800ae5c:	0011      	movs	r1, r2
 800ae5e:	0018      	movs	r0, r3
 800ae60:	f7fe ff1c 	bl	8009c9c <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d002      	beq.n	800ae70 <vTaskPlaceOnEventListRestricted+0x34>
		{
			xTicksToWait = portMAX_DELAY;
 800ae6a:	2301      	movs	r3, #1
 800ae6c:	425b      	negs	r3, r3
 800ae6e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ae70:	687a      	ldr	r2, [r7, #4]
 800ae72:	68bb      	ldr	r3, [r7, #8]
 800ae74:	0011      	movs	r1, r2
 800ae76:	0018      	movs	r0, r3
 800ae78:	f000 fb9e 	bl	800b5b8 <prvAddCurrentTaskToDelayedList>
	}
 800ae7c:	46c0      	nop			; (mov r8, r8)
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	b004      	add	sp, #16
 800ae82:	bd80      	pop	{r7, pc}
 800ae84:	20000b30 	.word	0x20000b30

0800ae88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b084      	sub	sp, #16
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	68db      	ldr	r3, [r3, #12]
 800ae94:	68db      	ldr	r3, [r3, #12]
 800ae96:	60bb      	str	r3, [r7, #8]
	configASSERT( pxUnblockedTCB );
 800ae98:	68bb      	ldr	r3, [r7, #8]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d101      	bne.n	800aea2 <xTaskRemoveFromEventList+0x1a>
 800ae9e:	b672      	cpsid	i
 800aea0:	e7fe      	b.n	800aea0 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800aea2:	68bb      	ldr	r3, [r7, #8]
 800aea4:	3318      	adds	r3, #24
 800aea6:	0018      	movs	r0, r3
 800aea8:	f7fe ff50 	bl	8009d4c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aeac:	4b1e      	ldr	r3, [pc, #120]	; (800af28 <xTaskRemoveFromEventList+0xa0>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d11d      	bne.n	800aef0 <xTaskRemoveFromEventList+0x68>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800aeb4:	68bb      	ldr	r3, [r7, #8]
 800aeb6:	3304      	adds	r3, #4
 800aeb8:	0018      	movs	r0, r3
 800aeba:	f7fe ff47 	bl	8009d4c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800aebe:	68bb      	ldr	r3, [r7, #8]
 800aec0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aec2:	4b1a      	ldr	r3, [pc, #104]	; (800af2c <xTaskRemoveFromEventList+0xa4>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	429a      	cmp	r2, r3
 800aec8:	d903      	bls.n	800aed2 <xTaskRemoveFromEventList+0x4a>
 800aeca:	68bb      	ldr	r3, [r7, #8]
 800aecc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aece:	4b17      	ldr	r3, [pc, #92]	; (800af2c <xTaskRemoveFromEventList+0xa4>)
 800aed0:	601a      	str	r2, [r3, #0]
 800aed2:	68bb      	ldr	r3, [r7, #8]
 800aed4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aed6:	0013      	movs	r3, r2
 800aed8:	009b      	lsls	r3, r3, #2
 800aeda:	189b      	adds	r3, r3, r2
 800aedc:	009b      	lsls	r3, r3, #2
 800aede:	4a14      	ldr	r2, [pc, #80]	; (800af30 <xTaskRemoveFromEventList+0xa8>)
 800aee0:	189a      	adds	r2, r3, r2
 800aee2:	68bb      	ldr	r3, [r7, #8]
 800aee4:	3304      	adds	r3, #4
 800aee6:	0019      	movs	r1, r3
 800aee8:	0010      	movs	r0, r2
 800aeea:	f7fe fed7 	bl	8009c9c <vListInsertEnd>
 800aeee:	e007      	b.n	800af00 <xTaskRemoveFromEventList+0x78>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800aef0:	68bb      	ldr	r3, [r7, #8]
 800aef2:	3318      	adds	r3, #24
 800aef4:	001a      	movs	r2, r3
 800aef6:	4b0f      	ldr	r3, [pc, #60]	; (800af34 <xTaskRemoveFromEventList+0xac>)
 800aef8:	0011      	movs	r1, r2
 800aefa:	0018      	movs	r0, r3
 800aefc:	f7fe fece 	bl	8009c9c <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800af00:	68bb      	ldr	r3, [r7, #8]
 800af02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af04:	4b0c      	ldr	r3, [pc, #48]	; (800af38 <xTaskRemoveFromEventList+0xb0>)
 800af06:	681b      	ldr	r3, [r3, #0]
 800af08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af0a:	429a      	cmp	r2, r3
 800af0c:	d905      	bls.n	800af1a <xTaskRemoveFromEventList+0x92>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800af0e:	2301      	movs	r3, #1
 800af10:	60fb      	str	r3, [r7, #12]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800af12:	4b0a      	ldr	r3, [pc, #40]	; (800af3c <xTaskRemoveFromEventList+0xb4>)
 800af14:	2201      	movs	r2, #1
 800af16:	601a      	str	r2, [r3, #0]
 800af18:	e001      	b.n	800af1e <xTaskRemoveFromEventList+0x96>
	}
	else
	{
		xReturn = pdFALSE;
 800af1a:	2300      	movs	r3, #0
 800af1c:	60fb      	str	r3, [r7, #12]
	}

	return xReturn;
 800af1e:	68fb      	ldr	r3, [r7, #12]
}
 800af20:	0018      	movs	r0, r3
 800af22:	46bd      	mov	sp, r7
 800af24:	b004      	add	sp, #16
 800af26:	bd80      	pop	{r7, pc}
 800af28:	20000c58 	.word	0x20000c58
 800af2c:	20000c38 	.word	0x20000c38
 800af30:	20000b34 	.word	0x20000b34
 800af34:	20000bf0 	.word	0x20000bf0
 800af38:	20000b30 	.word	0x20000b30
 800af3c:	20000c44 	.word	0x20000c44

0800af40 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800af40:	b580      	push	{r7, lr}
 800af42:	b082      	sub	sp, #8
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800af48:	4b05      	ldr	r3, [pc, #20]	; (800af60 <vTaskInternalSetTimeOutState+0x20>)
 800af4a:	681a      	ldr	r2, [r3, #0]
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800af50:	4b04      	ldr	r3, [pc, #16]	; (800af64 <vTaskInternalSetTimeOutState+0x24>)
 800af52:	681a      	ldr	r2, [r3, #0]
 800af54:	687b      	ldr	r3, [r7, #4]
 800af56:	605a      	str	r2, [r3, #4]
}
 800af58:	46c0      	nop			; (mov r8, r8)
 800af5a:	46bd      	mov	sp, r7
 800af5c:	b002      	add	sp, #8
 800af5e:	bd80      	pop	{r7, pc}
 800af60:	20000c48 	.word	0x20000c48
 800af64:	20000c34 	.word	0x20000c34

0800af68 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800af68:	b580      	push	{r7, lr}
 800af6a:	b086      	sub	sp, #24
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
 800af70:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d101      	bne.n	800af7c <xTaskCheckForTimeOut+0x14>
 800af78:	b672      	cpsid	i
 800af7a:	e7fe      	b.n	800af7a <xTaskCheckForTimeOut+0x12>
	configASSERT( pxTicksToWait );
 800af7c:	683b      	ldr	r3, [r7, #0]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d101      	bne.n	800af86 <xTaskCheckForTimeOut+0x1e>
 800af82:	b672      	cpsid	i
 800af84:	e7fe      	b.n	800af84 <xTaskCheckForTimeOut+0x1c>

	taskENTER_CRITICAL();
 800af86:	f000 ff3b 	bl	800be00 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800af8a:	4b1d      	ldr	r3, [pc, #116]	; (800b000 <xTaskCheckForTimeOut+0x98>)
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	613b      	str	r3, [r7, #16]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	685b      	ldr	r3, [r3, #4]
 800af94:	693a      	ldr	r2, [r7, #16]
 800af96:	1ad3      	subs	r3, r2, r3
 800af98:	60fb      	str	r3, [r7, #12]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800af9a:	683b      	ldr	r3, [r7, #0]
 800af9c:	681b      	ldr	r3, [r3, #0]
 800af9e:	3301      	adds	r3, #1
 800afa0:	d102      	bne.n	800afa8 <xTaskCheckForTimeOut+0x40>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800afa2:	2300      	movs	r3, #0
 800afa4:	617b      	str	r3, [r7, #20]
 800afa6:	e024      	b.n	800aff2 <xTaskCheckForTimeOut+0x8a>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	4b15      	ldr	r3, [pc, #84]	; (800b004 <xTaskCheckForTimeOut+0x9c>)
 800afae:	681b      	ldr	r3, [r3, #0]
 800afb0:	429a      	cmp	r2, r3
 800afb2:	d007      	beq.n	800afc4 <xTaskCheckForTimeOut+0x5c>
 800afb4:	687b      	ldr	r3, [r7, #4]
 800afb6:	685b      	ldr	r3, [r3, #4]
 800afb8:	693a      	ldr	r2, [r7, #16]
 800afba:	429a      	cmp	r2, r3
 800afbc:	d302      	bcc.n	800afc4 <xTaskCheckForTimeOut+0x5c>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800afbe:	2301      	movs	r3, #1
 800afc0:	617b      	str	r3, [r7, #20]
 800afc2:	e016      	b.n	800aff2 <xTaskCheckForTimeOut+0x8a>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800afc4:	683b      	ldr	r3, [r7, #0]
 800afc6:	681b      	ldr	r3, [r3, #0]
 800afc8:	68fa      	ldr	r2, [r7, #12]
 800afca:	429a      	cmp	r2, r3
 800afcc:	d20c      	bcs.n	800afe8 <xTaskCheckForTimeOut+0x80>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800afce:	683b      	ldr	r3, [r7, #0]
 800afd0:	681a      	ldr	r2, [r3, #0]
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	1ad2      	subs	r2, r2, r3
 800afd6:	683b      	ldr	r3, [r7, #0]
 800afd8:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800afda:	687b      	ldr	r3, [r7, #4]
 800afdc:	0018      	movs	r0, r3
 800afde:	f7ff ffaf 	bl	800af40 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800afe2:	2300      	movs	r3, #0
 800afe4:	617b      	str	r3, [r7, #20]
 800afe6:	e004      	b.n	800aff2 <xTaskCheckForTimeOut+0x8a>
		}
		else
		{
			*pxTicksToWait = 0;
 800afe8:	683b      	ldr	r3, [r7, #0]
 800afea:	2200      	movs	r2, #0
 800afec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800afee:	2301      	movs	r3, #1
 800aff0:	617b      	str	r3, [r7, #20]
		}
	}
	taskEXIT_CRITICAL();
 800aff2:	f000 ff17 	bl	800be24 <vPortExitCritical>

	return xReturn;
 800aff6:	697b      	ldr	r3, [r7, #20]
}
 800aff8:	0018      	movs	r0, r3
 800affa:	46bd      	mov	sp, r7
 800affc:	b006      	add	sp, #24
 800affe:	bd80      	pop	{r7, pc}
 800b000:	20000c34 	.word	0x20000c34
 800b004:	20000c48 	.word	0x20000c48

0800b008 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b008:	b580      	push	{r7, lr}
 800b00a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b00c:	4b02      	ldr	r3, [pc, #8]	; (800b018 <vTaskMissedYield+0x10>)
 800b00e:	2201      	movs	r2, #1
 800b010:	601a      	str	r2, [r3, #0]
}
 800b012:	46c0      	nop			; (mov r8, r8)
 800b014:	46bd      	mov	sp, r7
 800b016:	bd80      	pop	{r7, pc}
 800b018:	20000c44 	.word	0x20000c44

0800b01c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b01c:	b580      	push	{r7, lr}
 800b01e:	b082      	sub	sp, #8
 800b020:	af00      	add	r7, sp, #0
 800b022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b024:	f000 f84e 	bl	800b0c4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b028:	4b03      	ldr	r3, [pc, #12]	; (800b038 <prvIdleTask+0x1c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	2b01      	cmp	r3, #1
 800b02e:	d9f9      	bls.n	800b024 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b030:	f000 fed6 	bl	800bde0 <vPortYield>
		prvCheckTasksWaitingTermination();
 800b034:	e7f6      	b.n	800b024 <prvIdleTask+0x8>
 800b036:	46c0      	nop			; (mov r8, r8)
 800b038:	20000b34 	.word	0x20000b34

0800b03c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b03c:	b580      	push	{r7, lr}
 800b03e:	b082      	sub	sp, #8
 800b040:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b042:	2300      	movs	r3, #0
 800b044:	607b      	str	r3, [r7, #4]
 800b046:	e00c      	b.n	800b062 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b048:	687a      	ldr	r2, [r7, #4]
 800b04a:	0013      	movs	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	189b      	adds	r3, r3, r2
 800b050:	009b      	lsls	r3, r3, #2
 800b052:	4a14      	ldr	r2, [pc, #80]	; (800b0a4 <prvInitialiseTaskLists+0x68>)
 800b054:	189b      	adds	r3, r3, r2
 800b056:	0018      	movs	r0, r3
 800b058:	f7fe fdf7 	bl	8009c4a <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	3301      	adds	r3, #1
 800b060:	607b      	str	r3, [r7, #4]
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b06      	cmp	r3, #6
 800b066:	d9ef      	bls.n	800b048 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b068:	4b0f      	ldr	r3, [pc, #60]	; (800b0a8 <prvInitialiseTaskLists+0x6c>)
 800b06a:	0018      	movs	r0, r3
 800b06c:	f7fe fded 	bl	8009c4a <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b070:	4b0e      	ldr	r3, [pc, #56]	; (800b0ac <prvInitialiseTaskLists+0x70>)
 800b072:	0018      	movs	r0, r3
 800b074:	f7fe fde9 	bl	8009c4a <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b078:	4b0d      	ldr	r3, [pc, #52]	; (800b0b0 <prvInitialiseTaskLists+0x74>)
 800b07a:	0018      	movs	r0, r3
 800b07c:	f7fe fde5 	bl	8009c4a <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b080:	4b0c      	ldr	r3, [pc, #48]	; (800b0b4 <prvInitialiseTaskLists+0x78>)
 800b082:	0018      	movs	r0, r3
 800b084:	f7fe fde1 	bl	8009c4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b088:	4b0b      	ldr	r3, [pc, #44]	; (800b0b8 <prvInitialiseTaskLists+0x7c>)
 800b08a:	0018      	movs	r0, r3
 800b08c:	f7fe fddd 	bl	8009c4a <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b090:	4b0a      	ldr	r3, [pc, #40]	; (800b0bc <prvInitialiseTaskLists+0x80>)
 800b092:	4a05      	ldr	r2, [pc, #20]	; (800b0a8 <prvInitialiseTaskLists+0x6c>)
 800b094:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b096:	4b0a      	ldr	r3, [pc, #40]	; (800b0c0 <prvInitialiseTaskLists+0x84>)
 800b098:	4a04      	ldr	r2, [pc, #16]	; (800b0ac <prvInitialiseTaskLists+0x70>)
 800b09a:	601a      	str	r2, [r3, #0]
}
 800b09c:	46c0      	nop			; (mov r8, r8)
 800b09e:	46bd      	mov	sp, r7
 800b0a0:	b002      	add	sp, #8
 800b0a2:	bd80      	pop	{r7, pc}
 800b0a4:	20000b34 	.word	0x20000b34
 800b0a8:	20000bc0 	.word	0x20000bc0
 800b0ac:	20000bd4 	.word	0x20000bd4
 800b0b0:	20000bf0 	.word	0x20000bf0
 800b0b4:	20000c04 	.word	0x20000c04
 800b0b8:	20000c1c 	.word	0x20000c1c
 800b0bc:	20000be8 	.word	0x20000be8
 800b0c0:	20000bec 	.word	0x20000bec

0800b0c4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b0c4:	b580      	push	{r7, lr}
 800b0c6:	b082      	sub	sp, #8
 800b0c8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b0ca:	e01a      	b.n	800b102 <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 800b0cc:	f000 fe98 	bl	800be00 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b0d0:	4b10      	ldr	r3, [pc, #64]	; (800b114 <prvCheckTasksWaitingTermination+0x50>)
 800b0d2:	68db      	ldr	r3, [r3, #12]
 800b0d4:	68db      	ldr	r3, [r3, #12]
 800b0d6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	3304      	adds	r3, #4
 800b0dc:	0018      	movs	r0, r3
 800b0de:	f7fe fe35 	bl	8009d4c <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b0e2:	4b0d      	ldr	r3, [pc, #52]	; (800b118 <prvCheckTasksWaitingTermination+0x54>)
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	1e5a      	subs	r2, r3, #1
 800b0e8:	4b0b      	ldr	r3, [pc, #44]	; (800b118 <prvCheckTasksWaitingTermination+0x54>)
 800b0ea:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b0ec:	4b0b      	ldr	r3, [pc, #44]	; (800b11c <prvCheckTasksWaitingTermination+0x58>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	1e5a      	subs	r2, r3, #1
 800b0f2:	4b0a      	ldr	r3, [pc, #40]	; (800b11c <prvCheckTasksWaitingTermination+0x58>)
 800b0f4:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 800b0f6:	f000 fe95 	bl	800be24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b0fa:	687b      	ldr	r3, [r7, #4]
 800b0fc:	0018      	movs	r0, r3
 800b0fe:	f000 f80f 	bl	800b120 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b102:	4b06      	ldr	r3, [pc, #24]	; (800b11c <prvCheckTasksWaitingTermination+0x58>)
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	2b00      	cmp	r3, #0
 800b108:	d1e0      	bne.n	800b0cc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b10a:	46c0      	nop			; (mov r8, r8)
 800b10c:	46c0      	nop			; (mov r8, r8)
 800b10e:	46bd      	mov	sp, r7
 800b110:	b002      	add	sp, #8
 800b112:	bd80      	pop	{r7, pc}
 800b114:	20000c04 	.word	0x20000c04
 800b118:	20000c30 	.word	0x20000c30
 800b11c:	20000c18 	.word	0x20000c18

0800b120 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b120:	b580      	push	{r7, lr}
 800b122:	b082      	sub	sp, #8
 800b124:	af00      	add	r7, sp, #0
 800b126:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800b128:	687b      	ldr	r3, [r7, #4]
 800b12a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b12c:	0018      	movs	r0, r3
 800b12e:	f000 ffab 	bl	800c088 <vPortFree>
			vPortFree( pxTCB );
 800b132:	687b      	ldr	r3, [r7, #4]
 800b134:	0018      	movs	r0, r3
 800b136:	f000 ffa7 	bl	800c088 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b13a:	46c0      	nop			; (mov r8, r8)
 800b13c:	46bd      	mov	sp, r7
 800b13e:	b002      	add	sp, #8
 800b140:	bd80      	pop	{r7, pc}
	...

0800b144 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b144:	b580      	push	{r7, lr}
 800b146:	b082      	sub	sp, #8
 800b148:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b14a:	4b0b      	ldr	r3, [pc, #44]	; (800b178 <prvResetNextTaskUnblockTime+0x34>)
 800b14c:	681b      	ldr	r3, [r3, #0]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	2b00      	cmp	r3, #0
 800b152:	d104      	bne.n	800b15e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b154:	4b09      	ldr	r3, [pc, #36]	; (800b17c <prvResetNextTaskUnblockTime+0x38>)
 800b156:	2201      	movs	r2, #1
 800b158:	4252      	negs	r2, r2
 800b15a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b15c:	e008      	b.n	800b170 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b15e:	4b06      	ldr	r3, [pc, #24]	; (800b178 <prvResetNextTaskUnblockTime+0x34>)
 800b160:	681b      	ldr	r3, [r3, #0]
 800b162:	68db      	ldr	r3, [r3, #12]
 800b164:	68db      	ldr	r3, [r3, #12]
 800b166:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	685a      	ldr	r2, [r3, #4]
 800b16c:	4b03      	ldr	r3, [pc, #12]	; (800b17c <prvResetNextTaskUnblockTime+0x38>)
 800b16e:	601a      	str	r2, [r3, #0]
}
 800b170:	46c0      	nop			; (mov r8, r8)
 800b172:	46bd      	mov	sp, r7
 800b174:	b002      	add	sp, #8
 800b176:	bd80      	pop	{r7, pc}
 800b178:	20000be8 	.word	0x20000be8
 800b17c:	20000c50 	.word	0x20000c50

0800b180 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b180:	b580      	push	{r7, lr}
 800b182:	b082      	sub	sp, #8
 800b184:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b186:	4b0a      	ldr	r3, [pc, #40]	; (800b1b0 <xTaskGetSchedulerState+0x30>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d102      	bne.n	800b194 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b18e:	2301      	movs	r3, #1
 800b190:	607b      	str	r3, [r7, #4]
 800b192:	e008      	b.n	800b1a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b194:	4b07      	ldr	r3, [pc, #28]	; (800b1b4 <xTaskGetSchedulerState+0x34>)
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	2b00      	cmp	r3, #0
 800b19a:	d102      	bne.n	800b1a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b19c:	2302      	movs	r3, #2
 800b19e:	607b      	str	r3, [r7, #4]
 800b1a0:	e001      	b.n	800b1a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b1a6:	687b      	ldr	r3, [r7, #4]
	}
 800b1a8:	0018      	movs	r0, r3
 800b1aa:	46bd      	mov	sp, r7
 800b1ac:	b002      	add	sp, #8
 800b1ae:	bd80      	pop	{r7, pc}
 800b1b0:	20000c3c 	.word	0x20000c3c
 800b1b4:	20000c58 	.word	0x20000c58

0800b1b8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b1b8:	b580      	push	{r7, lr}
 800b1ba:	b084      	sub	sp, #16
 800b1bc:	af00      	add	r7, sp, #0
 800b1be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b1c4:	2300      	movs	r3, #0
 800b1c6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b1c8:	687b      	ldr	r3, [r7, #4]
 800b1ca:	2b00      	cmp	r3, #0
 800b1cc:	d051      	beq.n	800b272 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b1ce:	68bb      	ldr	r3, [r7, #8]
 800b1d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1d2:	4b2a      	ldr	r3, [pc, #168]	; (800b27c <xTaskPriorityInherit+0xc4>)
 800b1d4:	681b      	ldr	r3, [r3, #0]
 800b1d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1d8:	429a      	cmp	r2, r3
 800b1da:	d241      	bcs.n	800b260 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b1dc:	68bb      	ldr	r3, [r7, #8]
 800b1de:	699b      	ldr	r3, [r3, #24]
 800b1e0:	2b00      	cmp	r3, #0
 800b1e2:	db06      	blt.n	800b1f2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b1e4:	4b25      	ldr	r3, [pc, #148]	; (800b27c <xTaskPriorityInherit+0xc4>)
 800b1e6:	681b      	ldr	r3, [r3, #0]
 800b1e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b1ea:	2207      	movs	r2, #7
 800b1ec:	1ad2      	subs	r2, r2, r3
 800b1ee:	68bb      	ldr	r3, [r7, #8]
 800b1f0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	6959      	ldr	r1, [r3, #20]
 800b1f6:	68bb      	ldr	r3, [r7, #8]
 800b1f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b1fa:	0013      	movs	r3, r2
 800b1fc:	009b      	lsls	r3, r3, #2
 800b1fe:	189b      	adds	r3, r3, r2
 800b200:	009b      	lsls	r3, r3, #2
 800b202:	4a1f      	ldr	r2, [pc, #124]	; (800b280 <xTaskPriorityInherit+0xc8>)
 800b204:	189b      	adds	r3, r3, r2
 800b206:	4299      	cmp	r1, r3
 800b208:	d122      	bne.n	800b250 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b20a:	68bb      	ldr	r3, [r7, #8]
 800b20c:	3304      	adds	r3, #4
 800b20e:	0018      	movs	r0, r3
 800b210:	f7fe fd9c 	bl	8009d4c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b214:	4b19      	ldr	r3, [pc, #100]	; (800b27c <xTaskPriorityInherit+0xc4>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b21a:	68bb      	ldr	r3, [r7, #8]
 800b21c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b21e:	68bb      	ldr	r3, [r7, #8]
 800b220:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b222:	4b18      	ldr	r3, [pc, #96]	; (800b284 <xTaskPriorityInherit+0xcc>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	429a      	cmp	r2, r3
 800b228:	d903      	bls.n	800b232 <xTaskPriorityInherit+0x7a>
 800b22a:	68bb      	ldr	r3, [r7, #8]
 800b22c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b22e:	4b15      	ldr	r3, [pc, #84]	; (800b284 <xTaskPriorityInherit+0xcc>)
 800b230:	601a      	str	r2, [r3, #0]
 800b232:	68bb      	ldr	r3, [r7, #8]
 800b234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b236:	0013      	movs	r3, r2
 800b238:	009b      	lsls	r3, r3, #2
 800b23a:	189b      	adds	r3, r3, r2
 800b23c:	009b      	lsls	r3, r3, #2
 800b23e:	4a10      	ldr	r2, [pc, #64]	; (800b280 <xTaskPriorityInherit+0xc8>)
 800b240:	189a      	adds	r2, r3, r2
 800b242:	68bb      	ldr	r3, [r7, #8]
 800b244:	3304      	adds	r3, #4
 800b246:	0019      	movs	r1, r3
 800b248:	0010      	movs	r0, r2
 800b24a:	f7fe fd27 	bl	8009c9c <vListInsertEnd>
 800b24e:	e004      	b.n	800b25a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b250:	4b0a      	ldr	r3, [pc, #40]	; (800b27c <xTaskPriorityInherit+0xc4>)
 800b252:	681b      	ldr	r3, [r3, #0]
 800b254:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b256:	68bb      	ldr	r3, [r7, #8]
 800b258:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b25a:	2301      	movs	r3, #1
 800b25c:	60fb      	str	r3, [r7, #12]
 800b25e:	e008      	b.n	800b272 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b260:	68bb      	ldr	r3, [r7, #8]
 800b262:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b264:	4b05      	ldr	r3, [pc, #20]	; (800b27c <xTaskPriorityInherit+0xc4>)
 800b266:	681b      	ldr	r3, [r3, #0]
 800b268:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b26a:	429a      	cmp	r2, r3
 800b26c:	d201      	bcs.n	800b272 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b26e:	2301      	movs	r3, #1
 800b270:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b272:	68fb      	ldr	r3, [r7, #12]
	}
 800b274:	0018      	movs	r0, r3
 800b276:	46bd      	mov	sp, r7
 800b278:	b004      	add	sp, #16
 800b27a:	bd80      	pop	{r7, pc}
 800b27c:	20000b30 	.word	0x20000b30
 800b280:	20000b34 	.word	0x20000b34
 800b284:	20000c38 	.word	0x20000c38

0800b288 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b288:	b580      	push	{r7, lr}
 800b28a:	b084      	sub	sp, #16
 800b28c:	af00      	add	r7, sp, #0
 800b28e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b290:	687b      	ldr	r3, [r7, #4]
 800b292:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b294:	2300      	movs	r3, #0
 800b296:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d044      	beq.n	800b328 <xTaskPriorityDisinherit+0xa0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b29e:	4b25      	ldr	r3, [pc, #148]	; (800b334 <xTaskPriorityDisinherit+0xac>)
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	68ba      	ldr	r2, [r7, #8]
 800b2a4:	429a      	cmp	r2, r3
 800b2a6:	d001      	beq.n	800b2ac <xTaskPriorityDisinherit+0x24>
 800b2a8:	b672      	cpsid	i
 800b2aa:	e7fe      	b.n	800b2aa <xTaskPriorityDisinherit+0x22>
			configASSERT( pxTCB->uxMutexesHeld );
 800b2ac:	68bb      	ldr	r3, [r7, #8]
 800b2ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d101      	bne.n	800b2b8 <xTaskPriorityDisinherit+0x30>
 800b2b4:	b672      	cpsid	i
 800b2b6:	e7fe      	b.n	800b2b6 <xTaskPriorityDisinherit+0x2e>
			( pxTCB->uxMutexesHeld )--;
 800b2b8:	68bb      	ldr	r3, [r7, #8]
 800b2ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2bc:	1e5a      	subs	r2, r3, #1
 800b2be:	68bb      	ldr	r3, [r7, #8]
 800b2c0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b2c2:	68bb      	ldr	r3, [r7, #8]
 800b2c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2c6:	68bb      	ldr	r3, [r7, #8]
 800b2c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b2ca:	429a      	cmp	r2, r3
 800b2cc:	d02c      	beq.n	800b328 <xTaskPriorityDisinherit+0xa0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b2ce:	68bb      	ldr	r3, [r7, #8]
 800b2d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b2d2:	2b00      	cmp	r3, #0
 800b2d4:	d128      	bne.n	800b328 <xTaskPriorityDisinherit+0xa0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2d6:	68bb      	ldr	r3, [r7, #8]
 800b2d8:	3304      	adds	r3, #4
 800b2da:	0018      	movs	r0, r3
 800b2dc:	f7fe fd36 	bl	8009d4c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b2e0:	68bb      	ldr	r3, [r7, #8]
 800b2e2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b2e4:	68bb      	ldr	r3, [r7, #8]
 800b2e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b2e8:	68bb      	ldr	r3, [r7, #8]
 800b2ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b2ec:	2207      	movs	r2, #7
 800b2ee:	1ad2      	subs	r2, r2, r3
 800b2f0:	68bb      	ldr	r3, [r7, #8]
 800b2f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b2f4:	68bb      	ldr	r3, [r7, #8]
 800b2f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b2f8:	4b0f      	ldr	r3, [pc, #60]	; (800b338 <xTaskPriorityDisinherit+0xb0>)
 800b2fa:	681b      	ldr	r3, [r3, #0]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d903      	bls.n	800b308 <xTaskPriorityDisinherit+0x80>
 800b300:	68bb      	ldr	r3, [r7, #8]
 800b302:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b304:	4b0c      	ldr	r3, [pc, #48]	; (800b338 <xTaskPriorityDisinherit+0xb0>)
 800b306:	601a      	str	r2, [r3, #0]
 800b308:	68bb      	ldr	r3, [r7, #8]
 800b30a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b30c:	0013      	movs	r3, r2
 800b30e:	009b      	lsls	r3, r3, #2
 800b310:	189b      	adds	r3, r3, r2
 800b312:	009b      	lsls	r3, r3, #2
 800b314:	4a09      	ldr	r2, [pc, #36]	; (800b33c <xTaskPriorityDisinherit+0xb4>)
 800b316:	189a      	adds	r2, r3, r2
 800b318:	68bb      	ldr	r3, [r7, #8]
 800b31a:	3304      	adds	r3, #4
 800b31c:	0019      	movs	r1, r3
 800b31e:	0010      	movs	r0, r2
 800b320:	f7fe fcbc 	bl	8009c9c <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b324:	2301      	movs	r3, #1
 800b326:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b328:	68fb      	ldr	r3, [r7, #12]
	}
 800b32a:	0018      	movs	r0, r3
 800b32c:	46bd      	mov	sp, r7
 800b32e:	b004      	add	sp, #16
 800b330:	bd80      	pop	{r7, pc}
 800b332:	46c0      	nop			; (mov r8, r8)
 800b334:	20000b30 	.word	0x20000b30
 800b338:	20000c38 	.word	0x20000c38
 800b33c:	20000b34 	.word	0x20000b34

0800b340 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b340:	b580      	push	{r7, lr}
 800b342:	b086      	sub	sp, #24
 800b344:	af00      	add	r7, sp, #0
 800b346:	6078      	str	r0, [r7, #4]
 800b348:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	613b      	str	r3, [r7, #16]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b34e:	2301      	movs	r3, #1
 800b350:	60fb      	str	r3, [r7, #12]

		if( pxMutexHolder != NULL )
 800b352:	687b      	ldr	r3, [r7, #4]
 800b354:	2b00      	cmp	r3, #0
 800b356:	d058      	beq.n	800b40a <vTaskPriorityDisinheritAfterTimeout+0xca>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b358:	693b      	ldr	r3, [r7, #16]
 800b35a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b35c:	2b00      	cmp	r3, #0
 800b35e:	d101      	bne.n	800b364 <vTaskPriorityDisinheritAfterTimeout+0x24>
 800b360:	b672      	cpsid	i
 800b362:	e7fe      	b.n	800b362 <vTaskPriorityDisinheritAfterTimeout+0x22>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b364:	693b      	ldr	r3, [r7, #16]
 800b366:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b368:	683a      	ldr	r2, [r7, #0]
 800b36a:	429a      	cmp	r2, r3
 800b36c:	d902      	bls.n	800b374 <vTaskPriorityDisinheritAfterTimeout+0x34>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b36e:	683b      	ldr	r3, [r7, #0]
 800b370:	617b      	str	r3, [r7, #20]
 800b372:	e002      	b.n	800b37a <vTaskPriorityDisinheritAfterTimeout+0x3a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b374:	693b      	ldr	r3, [r7, #16]
 800b376:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800b378:	617b      	str	r3, [r7, #20]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b37a:	693b      	ldr	r3, [r7, #16]
 800b37c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b37e:	697a      	ldr	r2, [r7, #20]
 800b380:	429a      	cmp	r2, r3
 800b382:	d042      	beq.n	800b40a <vTaskPriorityDisinheritAfterTimeout+0xca>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b384:	693b      	ldr	r3, [r7, #16]
 800b386:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800b388:	68fa      	ldr	r2, [r7, #12]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d13d      	bne.n	800b40a <vTaskPriorityDisinheritAfterTimeout+0xca>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b38e:	4b21      	ldr	r3, [pc, #132]	; (800b414 <vTaskPriorityDisinheritAfterTimeout+0xd4>)
 800b390:	681b      	ldr	r3, [r3, #0]
 800b392:	693a      	ldr	r2, [r7, #16]
 800b394:	429a      	cmp	r2, r3
 800b396:	d101      	bne.n	800b39c <vTaskPriorityDisinheritAfterTimeout+0x5c>
 800b398:	b672      	cpsid	i
 800b39a:	e7fe      	b.n	800b39a <vTaskPriorityDisinheritAfterTimeout+0x5a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b39c:	693b      	ldr	r3, [r7, #16]
 800b39e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b3a0:	60bb      	str	r3, [r7, #8]
					pxTCB->uxPriority = uxPriorityToUse;
 800b3a2:	693b      	ldr	r3, [r7, #16]
 800b3a4:	697a      	ldr	r2, [r7, #20]
 800b3a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b3a8:	693b      	ldr	r3, [r7, #16]
 800b3aa:	699b      	ldr	r3, [r3, #24]
 800b3ac:	2b00      	cmp	r3, #0
 800b3ae:	db04      	blt.n	800b3ba <vTaskPriorityDisinheritAfterTimeout+0x7a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b3b0:	697b      	ldr	r3, [r7, #20]
 800b3b2:	2207      	movs	r2, #7
 800b3b4:	1ad2      	subs	r2, r2, r3
 800b3b6:	693b      	ldr	r3, [r7, #16]
 800b3b8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b3ba:	693b      	ldr	r3, [r7, #16]
 800b3bc:	6959      	ldr	r1, [r3, #20]
 800b3be:	68ba      	ldr	r2, [r7, #8]
 800b3c0:	0013      	movs	r3, r2
 800b3c2:	009b      	lsls	r3, r3, #2
 800b3c4:	189b      	adds	r3, r3, r2
 800b3c6:	009b      	lsls	r3, r3, #2
 800b3c8:	4a13      	ldr	r2, [pc, #76]	; (800b418 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800b3ca:	189b      	adds	r3, r3, r2
 800b3cc:	4299      	cmp	r1, r3
 800b3ce:	d11c      	bne.n	800b40a <vTaskPriorityDisinheritAfterTimeout+0xca>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b3d0:	693b      	ldr	r3, [r7, #16]
 800b3d2:	3304      	adds	r3, #4
 800b3d4:	0018      	movs	r0, r3
 800b3d6:	f7fe fcb9 	bl	8009d4c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b3da:	693b      	ldr	r3, [r7, #16]
 800b3dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3de:	4b0f      	ldr	r3, [pc, #60]	; (800b41c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800b3e0:	681b      	ldr	r3, [r3, #0]
 800b3e2:	429a      	cmp	r2, r3
 800b3e4:	d903      	bls.n	800b3ee <vTaskPriorityDisinheritAfterTimeout+0xae>
 800b3e6:	693b      	ldr	r3, [r7, #16]
 800b3e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3ea:	4b0c      	ldr	r3, [pc, #48]	; (800b41c <vTaskPriorityDisinheritAfterTimeout+0xdc>)
 800b3ec:	601a      	str	r2, [r3, #0]
 800b3ee:	693b      	ldr	r3, [r7, #16]
 800b3f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b3f2:	0013      	movs	r3, r2
 800b3f4:	009b      	lsls	r3, r3, #2
 800b3f6:	189b      	adds	r3, r3, r2
 800b3f8:	009b      	lsls	r3, r3, #2
 800b3fa:	4a07      	ldr	r2, [pc, #28]	; (800b418 <vTaskPriorityDisinheritAfterTimeout+0xd8>)
 800b3fc:	189a      	adds	r2, r3, r2
 800b3fe:	693b      	ldr	r3, [r7, #16]
 800b400:	3304      	adds	r3, #4
 800b402:	0019      	movs	r1, r3
 800b404:	0010      	movs	r0, r2
 800b406:	f7fe fc49 	bl	8009c9c <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b40a:	46c0      	nop			; (mov r8, r8)
 800b40c:	46bd      	mov	sp, r7
 800b40e:	b006      	add	sp, #24
 800b410:	bd80      	pop	{r7, pc}
 800b412:	46c0      	nop			; (mov r8, r8)
 800b414:	20000b30 	.word	0x20000b30
 800b418:	20000b34 	.word	0x20000b34
 800b41c:	20000c38 	.word	0x20000c38

0800b420 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b420:	b580      	push	{r7, lr}
 800b422:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b424:	4b06      	ldr	r3, [pc, #24]	; (800b440 <pvTaskIncrementMutexHeldCount+0x20>)
 800b426:	681b      	ldr	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d004      	beq.n	800b436 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b42c:	4b04      	ldr	r3, [pc, #16]	; (800b440 <pvTaskIncrementMutexHeldCount+0x20>)
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b432:	3201      	adds	r2, #1
 800b434:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 800b436:	4b02      	ldr	r3, [pc, #8]	; (800b440 <pvTaskIncrementMutexHeldCount+0x20>)
 800b438:	681b      	ldr	r3, [r3, #0]
	}
 800b43a:	0018      	movs	r0, r3
 800b43c:	46bd      	mov	sp, r7
 800b43e:	bd80      	pop	{r7, pc}
 800b440:	20000b30 	.word	0x20000b30

0800b444 <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800b444:	b580      	push	{r7, lr}
 800b446:	b084      	sub	sp, #16
 800b448:	af00      	add	r7, sp, #0
 800b44a:	6078      	str	r0, [r7, #4]
 800b44c:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 800b44e:	f000 fcd7 	bl	800be00 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800b452:	4b1c      	ldr	r3, [pc, #112]	; (800b4c4 <ulTaskNotifyTake+0x80>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b458:	2b00      	cmp	r3, #0
 800b45a:	d10e      	bne.n	800b47a <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800b45c:	4b19      	ldr	r3, [pc, #100]	; (800b4c4 <ulTaskNotifyTake+0x80>)
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	2250      	movs	r2, #80	; 0x50
 800b462:	2101      	movs	r1, #1
 800b464:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d006      	beq.n	800b47a <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b46c:	683b      	ldr	r3, [r7, #0]
 800b46e:	2101      	movs	r1, #1
 800b470:	0018      	movs	r0, r3
 800b472:	f000 f8a1 	bl	800b5b8 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800b476:	f000 fcb3 	bl	800bde0 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800b47a:	f000 fcd3 	bl	800be24 <vPortExitCritical>

		taskENTER_CRITICAL();
 800b47e:	f000 fcbf 	bl	800be00 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800b482:	4b10      	ldr	r3, [pc, #64]	; (800b4c4 <ulTaskNotifyTake+0x80>)
 800b484:	681b      	ldr	r3, [r3, #0]
 800b486:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b488:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 800b48a:	68fb      	ldr	r3, [r7, #12]
 800b48c:	2b00      	cmp	r3, #0
 800b48e:	d00c      	beq.n	800b4aa <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d004      	beq.n	800b4a0 <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 800b496:	4b0b      	ldr	r3, [pc, #44]	; (800b4c4 <ulTaskNotifyTake+0x80>)
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2200      	movs	r2, #0
 800b49c:	64da      	str	r2, [r3, #76]	; 0x4c
 800b49e:	e004      	b.n	800b4aa <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 800b4a0:	4b08      	ldr	r3, [pc, #32]	; (800b4c4 <ulTaskNotifyTake+0x80>)
 800b4a2:	681b      	ldr	r3, [r3, #0]
 800b4a4:	68fa      	ldr	r2, [r7, #12]
 800b4a6:	3a01      	subs	r2, #1
 800b4a8:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b4aa:	4b06      	ldr	r3, [pc, #24]	; (800b4c4 <ulTaskNotifyTake+0x80>)
 800b4ac:	681b      	ldr	r3, [r3, #0]
 800b4ae:	2250      	movs	r2, #80	; 0x50
 800b4b0:	2100      	movs	r1, #0
 800b4b2:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 800b4b4:	f000 fcb6 	bl	800be24 <vPortExitCritical>

		return ulReturn;
 800b4b8:	68fb      	ldr	r3, [r7, #12]
	}
 800b4ba:	0018      	movs	r0, r3
 800b4bc:	46bd      	mov	sp, r7
 800b4be:	b004      	add	sp, #16
 800b4c0:	bd80      	pop	{r7, pc}
 800b4c2:	46c0      	nop			; (mov r8, r8)
 800b4c4:	20000b30 	.word	0x20000b30

0800b4c8 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800b4c8:	b580      	push	{r7, lr}
 800b4ca:	b086      	sub	sp, #24
 800b4cc:	af00      	add	r7, sp, #0
 800b4ce:	6078      	str	r0, [r7, #4]
 800b4d0:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 800b4d2:	687b      	ldr	r3, [r7, #4]
 800b4d4:	2b00      	cmp	r3, #0
 800b4d6:	d101      	bne.n	800b4dc <vTaskNotifyGiveFromISR+0x14>
 800b4d8:	b672      	cpsid	i
 800b4da:	e7fe      	b.n	800b4da <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800b4e0:	f000 fcb8 	bl	800be54 <ulSetInterruptMaskFromISR>
 800b4e4:	0003      	movs	r3, r0
 800b4e6:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 800b4e8:	200f      	movs	r0, #15
 800b4ea:	183b      	adds	r3, r7, r0
 800b4ec:	697a      	ldr	r2, [r7, #20]
 800b4ee:	2150      	movs	r1, #80	; 0x50
 800b4f0:	5c52      	ldrb	r2, [r2, r1]
 800b4f2:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800b4f4:	697b      	ldr	r3, [r7, #20]
 800b4f6:	2250      	movs	r2, #80	; 0x50
 800b4f8:	2102      	movs	r1, #2
 800b4fa:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 800b4fc:	697b      	ldr	r3, [r7, #20]
 800b4fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b500:	1c5a      	adds	r2, r3, #1
 800b502:	697b      	ldr	r3, [r7, #20]
 800b504:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800b506:	183b      	adds	r3, r7, r0
 800b508:	781b      	ldrb	r3, [r3, #0]
 800b50a:	2b01      	cmp	r3, #1
 800b50c:	d13f      	bne.n	800b58e <vTaskNotifyGiveFromISR+0xc6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800b50e:	697b      	ldr	r3, [r7, #20]
 800b510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b512:	2b00      	cmp	r3, #0
 800b514:	d001      	beq.n	800b51a <vTaskNotifyGiveFromISR+0x52>
 800b516:	b672      	cpsid	i
 800b518:	e7fe      	b.n	800b518 <vTaskNotifyGiveFromISR+0x50>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b51a:	4b21      	ldr	r3, [pc, #132]	; (800b5a0 <vTaskNotifyGiveFromISR+0xd8>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d11d      	bne.n	800b55e <vTaskNotifyGiveFromISR+0x96>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	3304      	adds	r3, #4
 800b526:	0018      	movs	r0, r3
 800b528:	f7fe fc10 	bl	8009d4c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b52c:	697b      	ldr	r3, [r7, #20]
 800b52e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b530:	4b1c      	ldr	r3, [pc, #112]	; (800b5a4 <vTaskNotifyGiveFromISR+0xdc>)
 800b532:	681b      	ldr	r3, [r3, #0]
 800b534:	429a      	cmp	r2, r3
 800b536:	d903      	bls.n	800b540 <vTaskNotifyGiveFromISR+0x78>
 800b538:	697b      	ldr	r3, [r7, #20]
 800b53a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b53c:	4b19      	ldr	r3, [pc, #100]	; (800b5a4 <vTaskNotifyGiveFromISR+0xdc>)
 800b53e:	601a      	str	r2, [r3, #0]
 800b540:	697b      	ldr	r3, [r7, #20]
 800b542:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b544:	0013      	movs	r3, r2
 800b546:	009b      	lsls	r3, r3, #2
 800b548:	189b      	adds	r3, r3, r2
 800b54a:	009b      	lsls	r3, r3, #2
 800b54c:	4a16      	ldr	r2, [pc, #88]	; (800b5a8 <vTaskNotifyGiveFromISR+0xe0>)
 800b54e:	189a      	adds	r2, r3, r2
 800b550:	697b      	ldr	r3, [r7, #20]
 800b552:	3304      	adds	r3, #4
 800b554:	0019      	movs	r1, r3
 800b556:	0010      	movs	r0, r2
 800b558:	f7fe fba0 	bl	8009c9c <vListInsertEnd>
 800b55c:	e007      	b.n	800b56e <vTaskNotifyGiveFromISR+0xa6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 800b55e:	697b      	ldr	r3, [r7, #20]
 800b560:	3318      	adds	r3, #24
 800b562:	001a      	movs	r2, r3
 800b564:	4b11      	ldr	r3, [pc, #68]	; (800b5ac <vTaskNotifyGiveFromISR+0xe4>)
 800b566:	0011      	movs	r1, r2
 800b568:	0018      	movs	r0, r3
 800b56a:	f7fe fb97 	bl	8009c9c <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b56e:	697b      	ldr	r3, [r7, #20]
 800b570:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b572:	4b0f      	ldr	r3, [pc, #60]	; (800b5b0 <vTaskNotifyGiveFromISR+0xe8>)
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b578:	429a      	cmp	r2, r3
 800b57a:	d908      	bls.n	800b58e <vTaskNotifyGiveFromISR+0xc6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 800b57c:	683b      	ldr	r3, [r7, #0]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d002      	beq.n	800b588 <vTaskNotifyGiveFromISR+0xc0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800b582:	683b      	ldr	r3, [r7, #0]
 800b584:	2201      	movs	r2, #1
 800b586:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 800b588:	4b0a      	ldr	r3, [pc, #40]	; (800b5b4 <vTaskNotifyGiveFromISR+0xec>)
 800b58a:	2201      	movs	r2, #1
 800b58c:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 800b58e:	693b      	ldr	r3, [r7, #16]
 800b590:	0018      	movs	r0, r3
 800b592:	f000 fc65 	bl	800be60 <vClearInterruptMaskFromISR>
	}
 800b596:	46c0      	nop			; (mov r8, r8)
 800b598:	46bd      	mov	sp, r7
 800b59a:	b006      	add	sp, #24
 800b59c:	bd80      	pop	{r7, pc}
 800b59e:	46c0      	nop			; (mov r8, r8)
 800b5a0:	20000c58 	.word	0x20000c58
 800b5a4:	20000c38 	.word	0x20000c38
 800b5a8:	20000b34 	.word	0x20000b34
 800b5ac:	20000bf0 	.word	0x20000bf0
 800b5b0:	20000b30 	.word	0x20000b30
 800b5b4:	20000c44 	.word	0x20000c44

0800b5b8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b5b8:	b580      	push	{r7, lr}
 800b5ba:	b084      	sub	sp, #16
 800b5bc:	af00      	add	r7, sp, #0
 800b5be:	6078      	str	r0, [r7, #4]
 800b5c0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b5c2:	4b21      	ldr	r3, [pc, #132]	; (800b648 <prvAddCurrentTaskToDelayedList+0x90>)
 800b5c4:	681b      	ldr	r3, [r3, #0]
 800b5c6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b5c8:	4b20      	ldr	r3, [pc, #128]	; (800b64c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5ca:	681b      	ldr	r3, [r3, #0]
 800b5cc:	3304      	adds	r3, #4
 800b5ce:	0018      	movs	r0, r3
 800b5d0:	f7fe fbbc 	bl	8009d4c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3301      	adds	r3, #1
 800b5d8:	d10b      	bne.n	800b5f2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b5da:	683b      	ldr	r3, [r7, #0]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	d008      	beq.n	800b5f2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b5e0:	4b1a      	ldr	r3, [pc, #104]	; (800b64c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5e2:	681b      	ldr	r3, [r3, #0]
 800b5e4:	1d1a      	adds	r2, r3, #4
 800b5e6:	4b1a      	ldr	r3, [pc, #104]	; (800b650 <prvAddCurrentTaskToDelayedList+0x98>)
 800b5e8:	0011      	movs	r1, r2
 800b5ea:	0018      	movs	r0, r3
 800b5ec:	f7fe fb56 	bl	8009c9c <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b5f0:	e026      	b.n	800b640 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b5f2:	68fa      	ldr	r2, [r7, #12]
 800b5f4:	687b      	ldr	r3, [r7, #4]
 800b5f6:	18d3      	adds	r3, r2, r3
 800b5f8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b5fa:	4b14      	ldr	r3, [pc, #80]	; (800b64c <prvAddCurrentTaskToDelayedList+0x94>)
 800b5fc:	681b      	ldr	r3, [r3, #0]
 800b5fe:	68ba      	ldr	r2, [r7, #8]
 800b600:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b602:	68ba      	ldr	r2, [r7, #8]
 800b604:	68fb      	ldr	r3, [r7, #12]
 800b606:	429a      	cmp	r2, r3
 800b608:	d209      	bcs.n	800b61e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b60a:	4b12      	ldr	r3, [pc, #72]	; (800b654 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b60c:	681a      	ldr	r2, [r3, #0]
 800b60e:	4b0f      	ldr	r3, [pc, #60]	; (800b64c <prvAddCurrentTaskToDelayedList+0x94>)
 800b610:	681b      	ldr	r3, [r3, #0]
 800b612:	3304      	adds	r3, #4
 800b614:	0019      	movs	r1, r3
 800b616:	0010      	movs	r0, r2
 800b618:	f7fe fb62 	bl	8009ce0 <vListInsert>
}
 800b61c:	e010      	b.n	800b640 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b61e:	4b0e      	ldr	r3, [pc, #56]	; (800b658 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b620:	681a      	ldr	r2, [r3, #0]
 800b622:	4b0a      	ldr	r3, [pc, #40]	; (800b64c <prvAddCurrentTaskToDelayedList+0x94>)
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	3304      	adds	r3, #4
 800b628:	0019      	movs	r1, r3
 800b62a:	0010      	movs	r0, r2
 800b62c:	f7fe fb58 	bl	8009ce0 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b630:	4b0a      	ldr	r3, [pc, #40]	; (800b65c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	68ba      	ldr	r2, [r7, #8]
 800b636:	429a      	cmp	r2, r3
 800b638:	d202      	bcs.n	800b640 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b63a:	4b08      	ldr	r3, [pc, #32]	; (800b65c <prvAddCurrentTaskToDelayedList+0xa4>)
 800b63c:	68ba      	ldr	r2, [r7, #8]
 800b63e:	601a      	str	r2, [r3, #0]
}
 800b640:	46c0      	nop			; (mov r8, r8)
 800b642:	46bd      	mov	sp, r7
 800b644:	b004      	add	sp, #16
 800b646:	bd80      	pop	{r7, pc}
 800b648:	20000c34 	.word	0x20000c34
 800b64c:	20000b30 	.word	0x20000b30
 800b650:	20000c1c 	.word	0x20000c1c
 800b654:	20000bec 	.word	0x20000bec
 800b658:	20000be8 	.word	0x20000be8
 800b65c:	20000c50 	.word	0x20000c50

0800b660 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b660:	b580      	push	{r7, lr}
 800b662:	b084      	sub	sp, #16
 800b664:	af02      	add	r7, sp, #8
BaseType_t xReturn = pdFAIL;
 800b666:	2300      	movs	r3, #0
 800b668:	607b      	str	r3, [r7, #4]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b66a:	f000 faf5 	bl	800bc58 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b66e:	4b0d      	ldr	r3, [pc, #52]	; (800b6a4 <xTimerCreateTimerTask+0x44>)
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d00c      	beq.n	800b690 <xTimerCreateTimerTask+0x30>
				xReturn = pdPASS;
			}
		}
		#else
		{
			xReturn = xTaskCreate(	prvTimerTask,
 800b676:	2380      	movs	r3, #128	; 0x80
 800b678:	005a      	lsls	r2, r3, #1
 800b67a:	490b      	ldr	r1, [pc, #44]	; (800b6a8 <xTimerCreateTimerTask+0x48>)
 800b67c:	480b      	ldr	r0, [pc, #44]	; (800b6ac <xTimerCreateTimerTask+0x4c>)
 800b67e:	4b0c      	ldr	r3, [pc, #48]	; (800b6b0 <xTimerCreateTimerTask+0x50>)
 800b680:	9301      	str	r3, [sp, #4]
 800b682:	2302      	movs	r3, #2
 800b684:	9300      	str	r3, [sp, #0]
 800b686:	2300      	movs	r3, #0
 800b688:	f7ff f881 	bl	800a78e <xTaskCreate>
 800b68c:	0003      	movs	r3, r0
 800b68e:	607b      	str	r3, [r7, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b690:	687b      	ldr	r3, [r7, #4]
 800b692:	2b00      	cmp	r3, #0
 800b694:	d101      	bne.n	800b69a <xTimerCreateTimerTask+0x3a>
 800b696:	b672      	cpsid	i
 800b698:	e7fe      	b.n	800b698 <xTimerCreateTimerTask+0x38>
	return xReturn;
 800b69a:	687b      	ldr	r3, [r7, #4]
}
 800b69c:	0018      	movs	r0, r3
 800b69e:	46bd      	mov	sp, r7
 800b6a0:	b002      	add	sp, #8
 800b6a2:	bd80      	pop	{r7, pc}
 800b6a4:	20000c8c 	.word	0x20000c8c
 800b6a8:	08011074 	.word	0x08011074
 800b6ac:	0800b87d 	.word	0x0800b87d
 800b6b0:	20000c90 	.word	0x20000c90

0800b6b4 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 800b6b4:	b590      	push	{r4, r7, lr}
 800b6b6:	b089      	sub	sp, #36	; 0x24
 800b6b8:	af02      	add	r7, sp, #8
 800b6ba:	60f8      	str	r0, [r7, #12]
 800b6bc:	60b9      	str	r1, [r7, #8]
 800b6be:	607a      	str	r2, [r7, #4]
 800b6c0:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 800b6c2:	2028      	movs	r0, #40	; 0x28
 800b6c4:	f000 fc34 	bl	800bf30 <pvPortMalloc>
 800b6c8:	0003      	movs	r3, r0
 800b6ca:	617b      	str	r3, [r7, #20]

		if( pxNewTimer != NULL )
 800b6cc:	697b      	ldr	r3, [r7, #20]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	d00e      	beq.n	800b6f0 <xTimerCreate+0x3c>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 800b6d2:	697b      	ldr	r3, [r7, #20]
 800b6d4:	2224      	movs	r2, #36	; 0x24
 800b6d6:	2100      	movs	r1, #0
 800b6d8:	5499      	strb	r1, [r3, r2]
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 800b6da:	683c      	ldr	r4, [r7, #0]
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	68b9      	ldr	r1, [r7, #8]
 800b6e0:	68f8      	ldr	r0, [r7, #12]
 800b6e2:	697b      	ldr	r3, [r7, #20]
 800b6e4:	9301      	str	r3, [sp, #4]
 800b6e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b6e8:	9300      	str	r3, [sp, #0]
 800b6ea:	0023      	movs	r3, r4
 800b6ec:	f000 f805 	bl	800b6fa <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 800b6f0:	697b      	ldr	r3, [r7, #20]
	}
 800b6f2:	0018      	movs	r0, r3
 800b6f4:	46bd      	mov	sp, r7
 800b6f6:	b007      	add	sp, #28
 800b6f8:	bd90      	pop	{r4, r7, pc}

0800b6fa <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 800b6fa:	b580      	push	{r7, lr}
 800b6fc:	b084      	sub	sp, #16
 800b6fe:	af00      	add	r7, sp, #0
 800b700:	60f8      	str	r0, [r7, #12]
 800b702:	60b9      	str	r1, [r7, #8]
 800b704:	607a      	str	r2, [r7, #4]
 800b706:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 800b708:	68bb      	ldr	r3, [r7, #8]
 800b70a:	2b00      	cmp	r3, #0
 800b70c:	d101      	bne.n	800b712 <prvInitialiseNewTimer+0x18>
 800b70e:	b672      	cpsid	i
 800b710:	e7fe      	b.n	800b710 <prvInitialiseNewTimer+0x16>

	if( pxNewTimer != NULL )
 800b712:	69fb      	ldr	r3, [r7, #28]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d01e      	beq.n	800b756 <prvInitialiseNewTimer+0x5c>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 800b718:	f000 fa9e 	bl	800bc58 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 800b71c:	69fb      	ldr	r3, [r7, #28]
 800b71e:	68fa      	ldr	r2, [r7, #12]
 800b720:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800b722:	69fb      	ldr	r3, [r7, #28]
 800b724:	68ba      	ldr	r2, [r7, #8]
 800b726:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 800b728:	69fb      	ldr	r3, [r7, #28]
 800b72a:	683a      	ldr	r2, [r7, #0]
 800b72c:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 800b72e:	69fb      	ldr	r3, [r7, #28]
 800b730:	69ba      	ldr	r2, [r7, #24]
 800b732:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800b734:	69fb      	ldr	r3, [r7, #28]
 800b736:	3304      	adds	r3, #4
 800b738:	0018      	movs	r0, r3
 800b73a:	f7fe faa4 	bl	8009c86 <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 800b73e:	687b      	ldr	r3, [r7, #4]
 800b740:	2b00      	cmp	r3, #0
 800b742:	d008      	beq.n	800b756 <prvInitialiseNewTimer+0x5c>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800b744:	69fb      	ldr	r3, [r7, #28]
 800b746:	2224      	movs	r2, #36	; 0x24
 800b748:	5c9b      	ldrb	r3, [r3, r2]
 800b74a:	2204      	movs	r2, #4
 800b74c:	4313      	orrs	r3, r2
 800b74e:	b2d9      	uxtb	r1, r3
 800b750:	69fb      	ldr	r3, [r7, #28]
 800b752:	2224      	movs	r2, #36	; 0x24
 800b754:	5499      	strb	r1, [r3, r2]
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 800b756:	46c0      	nop			; (mov r8, r8)
 800b758:	46bd      	mov	sp, r7
 800b75a:	b004      	add	sp, #16
 800b75c:	bd80      	pop	{r7, pc}
	...

0800b760 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b760:	b590      	push	{r4, r7, lr}
 800b762:	b089      	sub	sp, #36	; 0x24
 800b764:	af00      	add	r7, sp, #0
 800b766:	60f8      	str	r0, [r7, #12]
 800b768:	60b9      	str	r1, [r7, #8]
 800b76a:	607a      	str	r2, [r7, #4]
 800b76c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b76e:	2300      	movs	r3, #0
 800b770:	61fb      	str	r3, [r7, #28]
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	2b00      	cmp	r3, #0
 800b776:	d101      	bne.n	800b77c <xTimerGenericCommand+0x1c>
 800b778:	b672      	cpsid	i
 800b77a:	e7fe      	b.n	800b77a <xTimerGenericCommand+0x1a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b77c:	4b1c      	ldr	r3, [pc, #112]	; (800b7f0 <xTimerGenericCommand+0x90>)
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	2b00      	cmp	r3, #0
 800b782:	d030      	beq.n	800b7e6 <xTimerGenericCommand+0x86>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b784:	2410      	movs	r4, #16
 800b786:	193b      	adds	r3, r7, r4
 800b788:	68ba      	ldr	r2, [r7, #8]
 800b78a:	601a      	str	r2, [r3, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b78c:	193b      	adds	r3, r7, r4
 800b78e:	687a      	ldr	r2, [r7, #4]
 800b790:	605a      	str	r2, [r3, #4]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b792:	193b      	adds	r3, r7, r4
 800b794:	68fa      	ldr	r2, [r7, #12]
 800b796:	609a      	str	r2, [r3, #8]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b798:	68bb      	ldr	r3, [r7, #8]
 800b79a:	2b05      	cmp	r3, #5
 800b79c:	dc19      	bgt.n	800b7d2 <xTimerGenericCommand+0x72>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b79e:	f7ff fcef 	bl	800b180 <xTaskGetSchedulerState>
 800b7a2:	0003      	movs	r3, r0
 800b7a4:	2b02      	cmp	r3, #2
 800b7a6:	d109      	bne.n	800b7bc <xTimerGenericCommand+0x5c>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b7a8:	4b11      	ldr	r3, [pc, #68]	; (800b7f0 <xTimerGenericCommand+0x90>)
 800b7aa:	6818      	ldr	r0, [r3, #0]
 800b7ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b7ae:	1939      	adds	r1, r7, r4
 800b7b0:	2300      	movs	r3, #0
 800b7b2:	f7fe fb97 	bl	8009ee4 <xQueueGenericSend>
 800b7b6:	0003      	movs	r3, r0
 800b7b8:	61fb      	str	r3, [r7, #28]
 800b7ba:	e014      	b.n	800b7e6 <xTimerGenericCommand+0x86>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b7bc:	4b0c      	ldr	r3, [pc, #48]	; (800b7f0 <xTimerGenericCommand+0x90>)
 800b7be:	6818      	ldr	r0, [r3, #0]
 800b7c0:	2310      	movs	r3, #16
 800b7c2:	18f9      	adds	r1, r7, r3
 800b7c4:	2300      	movs	r3, #0
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	f7fe fb8c 	bl	8009ee4 <xQueueGenericSend>
 800b7cc:	0003      	movs	r3, r0
 800b7ce:	61fb      	str	r3, [r7, #28]
 800b7d0:	e009      	b.n	800b7e6 <xTimerGenericCommand+0x86>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b7d2:	4b07      	ldr	r3, [pc, #28]	; (800b7f0 <xTimerGenericCommand+0x90>)
 800b7d4:	6818      	ldr	r0, [r3, #0]
 800b7d6:	683a      	ldr	r2, [r7, #0]
 800b7d8:	2310      	movs	r3, #16
 800b7da:	18f9      	adds	r1, r7, r3
 800b7dc:	2300      	movs	r3, #0
 800b7de:	f7fe fc45 	bl	800a06c <xQueueGenericSendFromISR>
 800b7e2:	0003      	movs	r3, r0
 800b7e4:	61fb      	str	r3, [r7, #28]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b7e6:	69fb      	ldr	r3, [r7, #28]
}
 800b7e8:	0018      	movs	r0, r3
 800b7ea:	46bd      	mov	sp, r7
 800b7ec:	b009      	add	sp, #36	; 0x24
 800b7ee:	bd90      	pop	{r4, r7, pc}
 800b7f0:	20000c8c 	.word	0x20000c8c

0800b7f4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b7f4:	b580      	push	{r7, lr}
 800b7f6:	b086      	sub	sp, #24
 800b7f8:	af02      	add	r7, sp, #8
 800b7fa:	6078      	str	r0, [r7, #4]
 800b7fc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b7fe:	4b1e      	ldr	r3, [pc, #120]	; (800b878 <prvProcessExpiredTimer+0x84>)
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	68db      	ldr	r3, [r3, #12]
 800b804:	68db      	ldr	r3, [r3, #12]
 800b806:	60fb      	str	r3, [r7, #12]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b808:	68fb      	ldr	r3, [r7, #12]
 800b80a:	3304      	adds	r3, #4
 800b80c:	0018      	movs	r0, r3
 800b80e:	f7fe fa9d 	bl	8009d4c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	2224      	movs	r2, #36	; 0x24
 800b816:	5c9b      	ldrb	r3, [r3, r2]
 800b818:	001a      	movs	r2, r3
 800b81a:	2304      	movs	r3, #4
 800b81c:	4013      	ands	r3, r2
 800b81e:	d019      	beq.n	800b854 <prvProcessExpiredTimer+0x60>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b820:	68fb      	ldr	r3, [r7, #12]
 800b822:	699a      	ldr	r2, [r3, #24]
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	18d1      	adds	r1, r2, r3
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	683a      	ldr	r2, [r7, #0]
 800b82c:	68f8      	ldr	r0, [r7, #12]
 800b82e:	f000 f8c3 	bl	800b9b8 <prvInsertTimerInActiveList>
 800b832:	1e03      	subs	r3, r0, #0
 800b834:	d017      	beq.n	800b866 <prvProcessExpiredTimer+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	68f8      	ldr	r0, [r7, #12]
 800b83a:	2300      	movs	r3, #0
 800b83c:	9300      	str	r3, [sp, #0]
 800b83e:	2300      	movs	r3, #0
 800b840:	2100      	movs	r1, #0
 800b842:	f7ff ff8d 	bl	800b760 <xTimerGenericCommand>
 800b846:	0003      	movs	r3, r0
 800b848:	60bb      	str	r3, [r7, #8]
			configASSERT( xResult );
 800b84a:	68bb      	ldr	r3, [r7, #8]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d10a      	bne.n	800b866 <prvProcessExpiredTimer+0x72>
 800b850:	b672      	cpsid	i
 800b852:	e7fe      	b.n	800b852 <prvProcessExpiredTimer+0x5e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2224      	movs	r2, #36	; 0x24
 800b858:	5c9b      	ldrb	r3, [r3, r2]
 800b85a:	2201      	movs	r2, #1
 800b85c:	4393      	bics	r3, r2
 800b85e:	b2d9      	uxtb	r1, r3
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	2224      	movs	r2, #36	; 0x24
 800b864:	5499      	strb	r1, [r3, r2]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b866:	68fb      	ldr	r3, [r7, #12]
 800b868:	6a1b      	ldr	r3, [r3, #32]
 800b86a:	68fa      	ldr	r2, [r7, #12]
 800b86c:	0010      	movs	r0, r2
 800b86e:	4798      	blx	r3
}
 800b870:	46c0      	nop			; (mov r8, r8)
 800b872:	46bd      	mov	sp, r7
 800b874:	b004      	add	sp, #16
 800b876:	bd80      	pop	{r7, pc}
 800b878:	20000c84 	.word	0x20000c84

0800b87c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b87c:	b580      	push	{r7, lr}
 800b87e:	b084      	sub	sp, #16
 800b880:	af00      	add	r7, sp, #0
 800b882:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b884:	2308      	movs	r3, #8
 800b886:	18fb      	adds	r3, r7, r3
 800b888:	0018      	movs	r0, r3
 800b88a:	f000 f853 	bl	800b934 <prvGetNextExpireTime>
 800b88e:	0003      	movs	r3, r0
 800b890:	60fb      	str	r3, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	68fb      	ldr	r3, [r7, #12]
 800b896:	0011      	movs	r1, r2
 800b898:	0018      	movs	r0, r3
 800b89a:	f000 f803 	bl	800b8a4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b89e:	f000 f8cd 	bl	800ba3c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b8a2:	e7ef      	b.n	800b884 <prvTimerTask+0x8>

0800b8a4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b084      	sub	sp, #16
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	6078      	str	r0, [r7, #4]
 800b8ac:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b8ae:	f7ff f8ff 	bl	800aab0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b8b2:	2308      	movs	r3, #8
 800b8b4:	18fb      	adds	r3, r7, r3
 800b8b6:	0018      	movs	r0, r3
 800b8b8:	f000 f85e 	bl	800b978 <prvSampleTimeNow>
 800b8bc:	0003      	movs	r3, r0
 800b8be:	60fb      	str	r3, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b8c0:	68bb      	ldr	r3, [r7, #8]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d12b      	bne.n	800b91e <prvProcessTimerOrBlockTask+0x7a>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b8c6:	683b      	ldr	r3, [r7, #0]
 800b8c8:	2b00      	cmp	r3, #0
 800b8ca:	d10c      	bne.n	800b8e6 <prvProcessTimerOrBlockTask+0x42>
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	429a      	cmp	r2, r3
 800b8d2:	d808      	bhi.n	800b8e6 <prvProcessTimerOrBlockTask+0x42>
			{
				( void ) xTaskResumeAll();
 800b8d4:	f7ff f8f8 	bl	800aac8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b8d8:	68fa      	ldr	r2, [r7, #12]
 800b8da:	687b      	ldr	r3, [r7, #4]
 800b8dc:	0011      	movs	r1, r2
 800b8de:	0018      	movs	r0, r3
 800b8e0:	f7ff ff88 	bl	800b7f4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b8e4:	e01d      	b.n	800b922 <prvProcessTimerOrBlockTask+0x7e>
				if( xListWasEmpty != pdFALSE )
 800b8e6:	683b      	ldr	r3, [r7, #0]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d008      	beq.n	800b8fe <prvProcessTimerOrBlockTask+0x5a>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b8ec:	4b0f      	ldr	r3, [pc, #60]	; (800b92c <prvProcessTimerOrBlockTask+0x88>)
 800b8ee:	681b      	ldr	r3, [r3, #0]
 800b8f0:	681b      	ldr	r3, [r3, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d101      	bne.n	800b8fa <prvProcessTimerOrBlockTask+0x56>
 800b8f6:	2301      	movs	r3, #1
 800b8f8:	e000      	b.n	800b8fc <prvProcessTimerOrBlockTask+0x58>
 800b8fa:	2300      	movs	r3, #0
 800b8fc:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b8fe:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <prvProcessTimerOrBlockTask+0x8c>)
 800b900:	6818      	ldr	r0, [r3, #0]
 800b902:	687a      	ldr	r2, [r7, #4]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	1ad3      	subs	r3, r2, r3
 800b908:	683a      	ldr	r2, [r7, #0]
 800b90a:	0019      	movs	r1, r3
 800b90c:	f7fe ff0c 	bl	800a728 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b910:	f7ff f8da 	bl	800aac8 <xTaskResumeAll>
 800b914:	1e03      	subs	r3, r0, #0
 800b916:	d104      	bne.n	800b922 <prvProcessTimerOrBlockTask+0x7e>
					portYIELD_WITHIN_API();
 800b918:	f000 fa62 	bl	800bde0 <vPortYield>
}
 800b91c:	e001      	b.n	800b922 <prvProcessTimerOrBlockTask+0x7e>
			( void ) xTaskResumeAll();
 800b91e:	f7ff f8d3 	bl	800aac8 <xTaskResumeAll>
}
 800b922:	46c0      	nop			; (mov r8, r8)
 800b924:	46bd      	mov	sp, r7
 800b926:	b004      	add	sp, #16
 800b928:	bd80      	pop	{r7, pc}
 800b92a:	46c0      	nop			; (mov r8, r8)
 800b92c:	20000c88 	.word	0x20000c88
 800b930:	20000c8c 	.word	0x20000c8c

0800b934 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b934:	b580      	push	{r7, lr}
 800b936:	b084      	sub	sp, #16
 800b938:	af00      	add	r7, sp, #0
 800b93a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b93c:	4b0d      	ldr	r3, [pc, #52]	; (800b974 <prvGetNextExpireTime+0x40>)
 800b93e:	681b      	ldr	r3, [r3, #0]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	2b00      	cmp	r3, #0
 800b944:	d101      	bne.n	800b94a <prvGetNextExpireTime+0x16>
 800b946:	2201      	movs	r2, #1
 800b948:	e000      	b.n	800b94c <prvGetNextExpireTime+0x18>
 800b94a:	2200      	movs	r2, #0
 800b94c:	687b      	ldr	r3, [r7, #4]
 800b94e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	2b00      	cmp	r3, #0
 800b956:	d105      	bne.n	800b964 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b958:	4b06      	ldr	r3, [pc, #24]	; (800b974 <prvGetNextExpireTime+0x40>)
 800b95a:	681b      	ldr	r3, [r3, #0]
 800b95c:	68db      	ldr	r3, [r3, #12]
 800b95e:	681b      	ldr	r3, [r3, #0]
 800b960:	60fb      	str	r3, [r7, #12]
 800b962:	e001      	b.n	800b968 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b964:	2300      	movs	r3, #0
 800b966:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b968:	68fb      	ldr	r3, [r7, #12]
}
 800b96a:	0018      	movs	r0, r3
 800b96c:	46bd      	mov	sp, r7
 800b96e:	b004      	add	sp, #16
 800b970:	bd80      	pop	{r7, pc}
 800b972:	46c0      	nop			; (mov r8, r8)
 800b974:	20000c84 	.word	0x20000c84

0800b978 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b978:	b580      	push	{r7, lr}
 800b97a:	b084      	sub	sp, #16
 800b97c:	af00      	add	r7, sp, #0
 800b97e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b980:	f7ff f92e 	bl	800abe0 <xTaskGetTickCount>
 800b984:	0003      	movs	r3, r0
 800b986:	60fb      	str	r3, [r7, #12]

	if( xTimeNow < xLastTime )
 800b988:	4b0a      	ldr	r3, [pc, #40]	; (800b9b4 <prvSampleTimeNow+0x3c>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	68fa      	ldr	r2, [r7, #12]
 800b98e:	429a      	cmp	r2, r3
 800b990:	d205      	bcs.n	800b99e <prvSampleTimeNow+0x26>
	{
		prvSwitchTimerLists();
 800b992:	f000 f903 	bl	800bb9c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b996:	687b      	ldr	r3, [r7, #4]
 800b998:	2201      	movs	r2, #1
 800b99a:	601a      	str	r2, [r3, #0]
 800b99c:	e002      	b.n	800b9a4 <prvSampleTimeNow+0x2c>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b99e:	687b      	ldr	r3, [r7, #4]
 800b9a0:	2200      	movs	r2, #0
 800b9a2:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b9a4:	4b03      	ldr	r3, [pc, #12]	; (800b9b4 <prvSampleTimeNow+0x3c>)
 800b9a6:	68fa      	ldr	r2, [r7, #12]
 800b9a8:	601a      	str	r2, [r3, #0]

	return xTimeNow;
 800b9aa:	68fb      	ldr	r3, [r7, #12]
}
 800b9ac:	0018      	movs	r0, r3
 800b9ae:	46bd      	mov	sp, r7
 800b9b0:	b004      	add	sp, #16
 800b9b2:	bd80      	pop	{r7, pc}
 800b9b4:	20000c94 	.word	0x20000c94

0800b9b8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b086      	sub	sp, #24
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	60f8      	str	r0, [r7, #12]
 800b9c0:	60b9      	str	r1, [r7, #8]
 800b9c2:	607a      	str	r2, [r7, #4]
 800b9c4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b9c6:	2300      	movs	r3, #0
 800b9c8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	68ba      	ldr	r2, [r7, #8]
 800b9ce:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b9d0:	68fb      	ldr	r3, [r7, #12]
 800b9d2:	68fa      	ldr	r2, [r7, #12]
 800b9d4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b9d6:	68ba      	ldr	r2, [r7, #8]
 800b9d8:	687b      	ldr	r3, [r7, #4]
 800b9da:	429a      	cmp	r2, r3
 800b9dc:	d812      	bhi.n	800ba04 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b9de:	687a      	ldr	r2, [r7, #4]
 800b9e0:	683b      	ldr	r3, [r7, #0]
 800b9e2:	1ad2      	subs	r2, r2, r3
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	699b      	ldr	r3, [r3, #24]
 800b9e8:	429a      	cmp	r2, r3
 800b9ea:	d302      	bcc.n	800b9f2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b9ec:	2301      	movs	r3, #1
 800b9ee:	617b      	str	r3, [r7, #20]
 800b9f0:	e01b      	b.n	800ba2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b9f2:	4b10      	ldr	r3, [pc, #64]	; (800ba34 <prvInsertTimerInActiveList+0x7c>)
 800b9f4:	681a      	ldr	r2, [r3, #0]
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	3304      	adds	r3, #4
 800b9fa:	0019      	movs	r1, r3
 800b9fc:	0010      	movs	r0, r2
 800b9fe:	f7fe f96f 	bl	8009ce0 <vListInsert>
 800ba02:	e012      	b.n	800ba2a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ba04:	687a      	ldr	r2, [r7, #4]
 800ba06:	683b      	ldr	r3, [r7, #0]
 800ba08:	429a      	cmp	r2, r3
 800ba0a:	d206      	bcs.n	800ba1a <prvInsertTimerInActiveList+0x62>
 800ba0c:	68ba      	ldr	r2, [r7, #8]
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	429a      	cmp	r2, r3
 800ba12:	d302      	bcc.n	800ba1a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ba14:	2301      	movs	r3, #1
 800ba16:	617b      	str	r3, [r7, #20]
 800ba18:	e007      	b.n	800ba2a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ba1a:	4b07      	ldr	r3, [pc, #28]	; (800ba38 <prvInsertTimerInActiveList+0x80>)
 800ba1c:	681a      	ldr	r2, [r3, #0]
 800ba1e:	68fb      	ldr	r3, [r7, #12]
 800ba20:	3304      	adds	r3, #4
 800ba22:	0019      	movs	r1, r3
 800ba24:	0010      	movs	r0, r2
 800ba26:	f7fe f95b 	bl	8009ce0 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ba2a:	697b      	ldr	r3, [r7, #20]
}
 800ba2c:	0018      	movs	r0, r3
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	b006      	add	sp, #24
 800ba32:	bd80      	pop	{r7, pc}
 800ba34:	20000c88 	.word	0x20000c88
 800ba38:	20000c84 	.word	0x20000c84

0800ba3c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ba3c:	b590      	push	{r4, r7, lr}
 800ba3e:	b08b      	sub	sp, #44	; 0x2c
 800ba40:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ba42:	e097      	b.n	800bb74 <prvProcessReceivedCommands+0x138>
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ba44:	2208      	movs	r2, #8
 800ba46:	18bb      	adds	r3, r7, r2
 800ba48:	681b      	ldr	r3, [r3, #0]
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	da00      	bge.n	800ba50 <prvProcessReceivedCommands+0x14>
 800ba4e:	e091      	b.n	800bb74 <prvProcessReceivedCommands+0x138>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ba50:	18bb      	adds	r3, r7, r2
 800ba52:	689b      	ldr	r3, [r3, #8]
 800ba54:	61fb      	str	r3, [r7, #28]

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ba56:	69fb      	ldr	r3, [r7, #28]
 800ba58:	695b      	ldr	r3, [r3, #20]
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d004      	beq.n	800ba68 <prvProcessReceivedCommands+0x2c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ba5e:	69fb      	ldr	r3, [r7, #28]
 800ba60:	3304      	adds	r3, #4
 800ba62:	0018      	movs	r0, r3
 800ba64:	f7fe f972 	bl	8009d4c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ba68:	1d3b      	adds	r3, r7, #4
 800ba6a:	0018      	movs	r0, r3
 800ba6c:	f7ff ff84 	bl	800b978 <prvSampleTimeNow>
 800ba70:	0003      	movs	r3, r0
 800ba72:	61bb      	str	r3, [r7, #24]

			switch( xMessage.xMessageID )
 800ba74:	2308      	movs	r3, #8
 800ba76:	18fb      	adds	r3, r7, r3
 800ba78:	681b      	ldr	r3, [r3, #0]
 800ba7a:	2b09      	cmp	r3, #9
 800ba7c:	d900      	bls.n	800ba80 <prvProcessReceivedCommands+0x44>
 800ba7e:	e078      	b.n	800bb72 <prvProcessReceivedCommands+0x136>
 800ba80:	009a      	lsls	r2, r3, #2
 800ba82:	4b44      	ldr	r3, [pc, #272]	; (800bb94 <prvProcessReceivedCommands+0x158>)
 800ba84:	18d3      	adds	r3, r2, r3
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	469f      	mov	pc, r3
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ba8a:	69fb      	ldr	r3, [r7, #28]
 800ba8c:	2224      	movs	r2, #36	; 0x24
 800ba8e:	5c9b      	ldrb	r3, [r3, r2]
 800ba90:	2201      	movs	r2, #1
 800ba92:	4313      	orrs	r3, r2
 800ba94:	b2d9      	uxtb	r1, r3
 800ba96:	69fb      	ldr	r3, [r7, #28]
 800ba98:	2224      	movs	r2, #36	; 0x24
 800ba9a:	5499      	strb	r1, [r3, r2]
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ba9c:	2408      	movs	r4, #8
 800ba9e:	193b      	adds	r3, r7, r4
 800baa0:	685a      	ldr	r2, [r3, #4]
 800baa2:	69fb      	ldr	r3, [r7, #28]
 800baa4:	699b      	ldr	r3, [r3, #24]
 800baa6:	18d1      	adds	r1, r2, r3
 800baa8:	193b      	adds	r3, r7, r4
 800baaa:	685b      	ldr	r3, [r3, #4]
 800baac:	69ba      	ldr	r2, [r7, #24]
 800baae:	69f8      	ldr	r0, [r7, #28]
 800bab0:	f7ff ff82 	bl	800b9b8 <prvInsertTimerInActiveList>
 800bab4:	1e03      	subs	r3, r0, #0
 800bab6:	d05d      	beq.n	800bb74 <prvProcessReceivedCommands+0x138>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bab8:	69fb      	ldr	r3, [r7, #28]
 800baba:	6a1b      	ldr	r3, [r3, #32]
 800babc:	69fa      	ldr	r2, [r7, #28]
 800babe:	0010      	movs	r0, r2
 800bac0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bac2:	69fb      	ldr	r3, [r7, #28]
 800bac4:	2224      	movs	r2, #36	; 0x24
 800bac6:	5c9b      	ldrb	r3, [r3, r2]
 800bac8:	001a      	movs	r2, r3
 800baca:	2304      	movs	r3, #4
 800bacc:	4013      	ands	r3, r2
 800bace:	d051      	beq.n	800bb74 <prvProcessReceivedCommands+0x138>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bad0:	193b      	adds	r3, r7, r4
 800bad2:	685a      	ldr	r2, [r3, #4]
 800bad4:	69fb      	ldr	r3, [r7, #28]
 800bad6:	699b      	ldr	r3, [r3, #24]
 800bad8:	18d2      	adds	r2, r2, r3
 800bada:	69f8      	ldr	r0, [r7, #28]
 800badc:	2300      	movs	r3, #0
 800bade:	9300      	str	r3, [sp, #0]
 800bae0:	2300      	movs	r3, #0
 800bae2:	2100      	movs	r1, #0
 800bae4:	f7ff fe3c 	bl	800b760 <xTimerGenericCommand>
 800bae8:	0003      	movs	r3, r0
 800baea:	617b      	str	r3, [r7, #20]
							configASSERT( xResult );
 800baec:	697b      	ldr	r3, [r7, #20]
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d140      	bne.n	800bb74 <prvProcessReceivedCommands+0x138>
 800baf2:	b672      	cpsid	i
 800baf4:	e7fe      	b.n	800baf4 <prvProcessReceivedCommands+0xb8>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800baf6:	69fb      	ldr	r3, [r7, #28]
 800baf8:	2224      	movs	r2, #36	; 0x24
 800bafa:	5c9b      	ldrb	r3, [r3, r2]
 800bafc:	2201      	movs	r2, #1
 800bafe:	4393      	bics	r3, r2
 800bb00:	b2d9      	uxtb	r1, r3
 800bb02:	69fb      	ldr	r3, [r7, #28]
 800bb04:	2224      	movs	r2, #36	; 0x24
 800bb06:	5499      	strb	r1, [r3, r2]
					break;
 800bb08:	e034      	b.n	800bb74 <prvProcessReceivedCommands+0x138>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bb0a:	69fb      	ldr	r3, [r7, #28]
 800bb0c:	2224      	movs	r2, #36	; 0x24
 800bb0e:	5c9b      	ldrb	r3, [r3, r2]
 800bb10:	2201      	movs	r2, #1
 800bb12:	4313      	orrs	r3, r2
 800bb14:	b2d9      	uxtb	r1, r3
 800bb16:	69fb      	ldr	r3, [r7, #28]
 800bb18:	2224      	movs	r2, #36	; 0x24
 800bb1a:	5499      	strb	r1, [r3, r2]
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800bb1c:	2308      	movs	r3, #8
 800bb1e:	18fb      	adds	r3, r7, r3
 800bb20:	685a      	ldr	r2, [r3, #4]
 800bb22:	69fb      	ldr	r3, [r7, #28]
 800bb24:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bb26:	69fb      	ldr	r3, [r7, #28]
 800bb28:	699b      	ldr	r3, [r3, #24]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d101      	bne.n	800bb32 <prvProcessReceivedCommands+0xf6>
 800bb2e:	b672      	cpsid	i
 800bb30:	e7fe      	b.n	800bb30 <prvProcessReceivedCommands+0xf4>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bb32:	69fb      	ldr	r3, [r7, #28]
 800bb34:	699a      	ldr	r2, [r3, #24]
 800bb36:	69bb      	ldr	r3, [r7, #24]
 800bb38:	18d1      	adds	r1, r2, r3
 800bb3a:	69bb      	ldr	r3, [r7, #24]
 800bb3c:	69ba      	ldr	r2, [r7, #24]
 800bb3e:	69f8      	ldr	r0, [r7, #28]
 800bb40:	f7ff ff3a 	bl	800b9b8 <prvInsertTimerInActiveList>
					break;
 800bb44:	e016      	b.n	800bb74 <prvProcessReceivedCommands+0x138>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bb46:	69fb      	ldr	r3, [r7, #28]
 800bb48:	2224      	movs	r2, #36	; 0x24
 800bb4a:	5c9b      	ldrb	r3, [r3, r2]
 800bb4c:	001a      	movs	r2, r3
 800bb4e:	2302      	movs	r3, #2
 800bb50:	4013      	ands	r3, r2
 800bb52:	d104      	bne.n	800bb5e <prvProcessReceivedCommands+0x122>
						{
							vPortFree( pxTimer );
 800bb54:	69fb      	ldr	r3, [r7, #28]
 800bb56:	0018      	movs	r0, r3
 800bb58:	f000 fa96 	bl	800c088 <vPortFree>
 800bb5c:	e00a      	b.n	800bb74 <prvProcessReceivedCommands+0x138>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bb5e:	69fb      	ldr	r3, [r7, #28]
 800bb60:	2224      	movs	r2, #36	; 0x24
 800bb62:	5c9b      	ldrb	r3, [r3, r2]
 800bb64:	2201      	movs	r2, #1
 800bb66:	4393      	bics	r3, r2
 800bb68:	b2d9      	uxtb	r1, r3
 800bb6a:	69fb      	ldr	r3, [r7, #28]
 800bb6c:	2224      	movs	r2, #36	; 0x24
 800bb6e:	5499      	strb	r1, [r3, r2]
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bb70:	e000      	b.n	800bb74 <prvProcessReceivedCommands+0x138>

				default	:
					/* Don't expect to get here. */
					break;
 800bb72:	46c0      	nop			; (mov r8, r8)
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bb74:	4b08      	ldr	r3, [pc, #32]	; (800bb98 <prvProcessReceivedCommands+0x15c>)
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	2208      	movs	r2, #8
 800bb7a:	18b9      	adds	r1, r7, r2
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	0018      	movs	r0, r3
 800bb80:	f7fe fae8 	bl	800a154 <xQueueReceive>
 800bb84:	1e03      	subs	r3, r0, #0
 800bb86:	d000      	beq.n	800bb8a <prvProcessReceivedCommands+0x14e>
 800bb88:	e75c      	b.n	800ba44 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800bb8a:	46c0      	nop			; (mov r8, r8)
 800bb8c:	46c0      	nop			; (mov r8, r8)
 800bb8e:	46bd      	mov	sp, r7
 800bb90:	b009      	add	sp, #36	; 0x24
 800bb92:	bd90      	pop	{r4, r7, pc}
 800bb94:	080113dc 	.word	0x080113dc
 800bb98:	20000c8c 	.word	0x20000c8c

0800bb9c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bb9c:	b580      	push	{r7, lr}
 800bb9e:	b088      	sub	sp, #32
 800bba0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bba2:	e041      	b.n	800bc28 <prvSwitchTimerLists+0x8c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bba4:	4b2a      	ldr	r3, [pc, #168]	; (800bc50 <prvSwitchTimerLists+0xb4>)
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	68db      	ldr	r3, [r3, #12]
 800bbaa:	681b      	ldr	r3, [r3, #0]
 800bbac:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bbae:	4b28      	ldr	r3, [pc, #160]	; (800bc50 <prvSwitchTimerLists+0xb4>)
 800bbb0:	681b      	ldr	r3, [r3, #0]
 800bbb2:	68db      	ldr	r3, [r3, #12]
 800bbb4:	68db      	ldr	r3, [r3, #12]
 800bbb6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bbb8:	68fb      	ldr	r3, [r7, #12]
 800bbba:	3304      	adds	r3, #4
 800bbbc:	0018      	movs	r0, r3
 800bbbe:	f7fe f8c5 	bl	8009d4c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbc2:	68fb      	ldr	r3, [r7, #12]
 800bbc4:	6a1b      	ldr	r3, [r3, #32]
 800bbc6:	68fa      	ldr	r2, [r7, #12]
 800bbc8:	0010      	movs	r0, r2
 800bbca:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	2224      	movs	r2, #36	; 0x24
 800bbd0:	5c9b      	ldrb	r3, [r3, r2]
 800bbd2:	001a      	movs	r2, r3
 800bbd4:	2304      	movs	r3, #4
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	d026      	beq.n	800bc28 <prvSwitchTimerLists+0x8c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	699b      	ldr	r3, [r3, #24]
 800bbde:	693a      	ldr	r2, [r7, #16]
 800bbe0:	18d3      	adds	r3, r2, r3
 800bbe2:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bbe4:	68ba      	ldr	r2, [r7, #8]
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d90e      	bls.n	800bc0a <prvSwitchTimerLists+0x6e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bbec:	68fb      	ldr	r3, [r7, #12]
 800bbee:	68ba      	ldr	r2, [r7, #8]
 800bbf0:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bbf2:	68fb      	ldr	r3, [r7, #12]
 800bbf4:	68fa      	ldr	r2, [r7, #12]
 800bbf6:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bbf8:	4b15      	ldr	r3, [pc, #84]	; (800bc50 <prvSwitchTimerLists+0xb4>)
 800bbfa:	681a      	ldr	r2, [r3, #0]
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	3304      	adds	r3, #4
 800bc00:	0019      	movs	r1, r3
 800bc02:	0010      	movs	r0, r2
 800bc04:	f7fe f86c 	bl	8009ce0 <vListInsert>
 800bc08:	e00e      	b.n	800bc28 <prvSwitchTimerLists+0x8c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bc0a:	693a      	ldr	r2, [r7, #16]
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	2300      	movs	r3, #0
 800bc10:	9300      	str	r3, [sp, #0]
 800bc12:	2300      	movs	r3, #0
 800bc14:	2100      	movs	r1, #0
 800bc16:	f7ff fda3 	bl	800b760 <xTimerGenericCommand>
 800bc1a:	0003      	movs	r3, r0
 800bc1c:	607b      	str	r3, [r7, #4]
				configASSERT( xResult );
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	2b00      	cmp	r3, #0
 800bc22:	d101      	bne.n	800bc28 <prvSwitchTimerLists+0x8c>
 800bc24:	b672      	cpsid	i
 800bc26:	e7fe      	b.n	800bc26 <prvSwitchTimerLists+0x8a>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bc28:	4b09      	ldr	r3, [pc, #36]	; (800bc50 <prvSwitchTimerLists+0xb4>)
 800bc2a:	681b      	ldr	r3, [r3, #0]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d1b8      	bne.n	800bba4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800bc32:	4b07      	ldr	r3, [pc, #28]	; (800bc50 <prvSwitchTimerLists+0xb4>)
 800bc34:	681b      	ldr	r3, [r3, #0]
 800bc36:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800bc38:	4b06      	ldr	r3, [pc, #24]	; (800bc54 <prvSwitchTimerLists+0xb8>)
 800bc3a:	681a      	ldr	r2, [r3, #0]
 800bc3c:	4b04      	ldr	r3, [pc, #16]	; (800bc50 <prvSwitchTimerLists+0xb4>)
 800bc3e:	601a      	str	r2, [r3, #0]
	pxOverflowTimerList = pxTemp;
 800bc40:	4b04      	ldr	r3, [pc, #16]	; (800bc54 <prvSwitchTimerLists+0xb8>)
 800bc42:	697a      	ldr	r2, [r7, #20]
 800bc44:	601a      	str	r2, [r3, #0]
}
 800bc46:	46c0      	nop			; (mov r8, r8)
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	b006      	add	sp, #24
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	46c0      	nop			; (mov r8, r8)
 800bc50:	20000c84 	.word	0x20000c84
 800bc54:	20000c88 	.word	0x20000c88

0800bc58 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800bc58:	b580      	push	{r7, lr}
 800bc5a:	af00      	add	r7, sp, #0
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800bc5c:	f000 f8d0 	bl	800be00 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800bc60:	4b14      	ldr	r3, [pc, #80]	; (800bcb4 <prvCheckForValidListAndQueue+0x5c>)
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d120      	bne.n	800bcaa <prvCheckForValidListAndQueue+0x52>
		{
			vListInitialise( &xActiveTimerList1 );
 800bc68:	4b13      	ldr	r3, [pc, #76]	; (800bcb8 <prvCheckForValidListAndQueue+0x60>)
 800bc6a:	0018      	movs	r0, r3
 800bc6c:	f7fd ffed 	bl	8009c4a <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800bc70:	4b12      	ldr	r3, [pc, #72]	; (800bcbc <prvCheckForValidListAndQueue+0x64>)
 800bc72:	0018      	movs	r0, r3
 800bc74:	f7fd ffe9 	bl	8009c4a <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800bc78:	4b11      	ldr	r3, [pc, #68]	; (800bcc0 <prvCheckForValidListAndQueue+0x68>)
 800bc7a:	4a0f      	ldr	r2, [pc, #60]	; (800bcb8 <prvCheckForValidListAndQueue+0x60>)
 800bc7c:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800bc7e:	4b11      	ldr	r3, [pc, #68]	; (800bcc4 <prvCheckForValidListAndQueue+0x6c>)
 800bc80:	4a0e      	ldr	r2, [pc, #56]	; (800bcbc <prvCheckForValidListAndQueue+0x64>)
 800bc82:	601a      	str	r2, [r3, #0]

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
			}
			#else
			{
				xTimerQueue = xQueueCreate( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, sizeof( DaemonTaskMessage_t ) );
 800bc84:	2200      	movs	r2, #0
 800bc86:	210c      	movs	r1, #12
 800bc88:	200a      	movs	r0, #10
 800bc8a:	f7fe f8db 	bl	8009e44 <xQueueGenericCreate>
 800bc8e:	0002      	movs	r2, r0
 800bc90:	4b08      	ldr	r3, [pc, #32]	; (800bcb4 <prvCheckForValidListAndQueue+0x5c>)
 800bc92:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800bc94:	4b07      	ldr	r3, [pc, #28]	; (800bcb4 <prvCheckForValidListAndQueue+0x5c>)
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	2b00      	cmp	r3, #0
 800bc9a:	d006      	beq.n	800bcaa <prvCheckForValidListAndQueue+0x52>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800bc9c:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <prvCheckForValidListAndQueue+0x5c>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a09      	ldr	r2, [pc, #36]	; (800bcc8 <prvCheckForValidListAndQueue+0x70>)
 800bca2:	0011      	movs	r1, r2
 800bca4:	0018      	movs	r0, r3
 800bca6:	f7fe fd17 	bl	800a6d8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800bcaa:	f000 f8bb 	bl	800be24 <vPortExitCritical>
}
 800bcae:	46c0      	nop			; (mov r8, r8)
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}
 800bcb4:	20000c8c 	.word	0x20000c8c
 800bcb8:	20000c5c 	.word	0x20000c5c
 800bcbc:	20000c70 	.word	0x20000c70
 800bcc0:	20000c84 	.word	0x20000c84
 800bcc4:	20000c88 	.word	0x20000c88
 800bcc8:	0801107c 	.word	0x0801107c

0800bccc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800bccc:	b580      	push	{r7, lr}
 800bcce:	b084      	sub	sp, #16
 800bcd0:	af00      	add	r7, sp, #0
 800bcd2:	60f8      	str	r0, [r7, #12]
 800bcd4:	60b9      	str	r1, [r7, #8]
 800bcd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3b04      	subs	r3, #4
 800bcdc:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800bcde:	68fb      	ldr	r3, [r7, #12]
 800bce0:	2280      	movs	r2, #128	; 0x80
 800bce2:	0452      	lsls	r2, r2, #17
 800bce4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bce6:	68fb      	ldr	r3, [r7, #12]
 800bce8:	3b04      	subs	r3, #4
 800bcea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 800bcec:	68ba      	ldr	r2, [r7, #8]
 800bcee:	68fb      	ldr	r3, [r7, #12]
 800bcf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800bcf2:	68fb      	ldr	r3, [r7, #12]
 800bcf4:	3b04      	subs	r3, #4
 800bcf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800bcf8:	4a08      	ldr	r2, [pc, #32]	; (800bd1c <pxPortInitialiseStack+0x50>)
 800bcfa:	68fb      	ldr	r3, [r7, #12]
 800bcfc:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	3b14      	subs	r3, #20
 800bd02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800bd04:	687a      	ldr	r2, [r7, #4]
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 800bd0a:	68fb      	ldr	r3, [r7, #12]
 800bd0c:	3b20      	subs	r3, #32
 800bd0e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800bd10:	68fb      	ldr	r3, [r7, #12]
}
 800bd12:	0018      	movs	r0, r3
 800bd14:	46bd      	mov	sp, r7
 800bd16:	b004      	add	sp, #16
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	46c0      	nop			; (mov r8, r8)
 800bd1c:	0800bd21 	.word	0x0800bd21

0800bd20 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b082      	sub	sp, #8
 800bd24:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800bd26:	2300      	movs	r3, #0
 800bd28:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800bd2a:	4b08      	ldr	r3, [pc, #32]	; (800bd4c <prvTaskExitError+0x2c>)
 800bd2c:	681b      	ldr	r3, [r3, #0]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	d001      	beq.n	800bd36 <prvTaskExitError+0x16>
 800bd32:	b672      	cpsid	i
 800bd34:	e7fe      	b.n	800bd34 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 800bd36:	b672      	cpsid	i
	while( ulDummy == 0 )
 800bd38:	46c0      	nop			; (mov r8, r8)
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	d0fc      	beq.n	800bd3a <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bd40:	46c0      	nop			; (mov r8, r8)
 800bd42:	46c0      	nop			; (mov r8, r8)
 800bd44:	46bd      	mov	sp, r7
 800bd46:	b002      	add	sp, #8
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	46c0      	nop			; (mov r8, r8)
 800bd4c:	20000018 	.word	0x20000018

0800bd50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 800bd50:	b580      	push	{r7, lr}
 800bd52:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 800bd54:	46c0      	nop			; (mov r8, r8)
 800bd56:	46bd      	mov	sp, r7
 800bd58:	bd80      	pop	{r7, pc}
 800bd5a:	0000      	movs	r0, r0
 800bd5c:	0000      	movs	r0, r0
	...

0800bd60 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 800bd60:	4a0b      	ldr	r2, [pc, #44]	; (800bd90 <pxCurrentTCBConst2>)
 800bd62:	6813      	ldr	r3, [r2, #0]
 800bd64:	6818      	ldr	r0, [r3, #0]
 800bd66:	3020      	adds	r0, #32
 800bd68:	f380 8809 	msr	PSP, r0
 800bd6c:	2002      	movs	r0, #2
 800bd6e:	f380 8814 	msr	CONTROL, r0
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 800bd78:	46ae      	mov	lr, r5
 800bd7a:	bc08      	pop	{r3}
 800bd7c:	bc04      	pop	{r2}
 800bd7e:	b662      	cpsie	i
 800bd80:	4718      	bx	r3
 800bd82:	46c0      	nop			; (mov r8, r8)
 800bd84:	46c0      	nop			; (mov r8, r8)
 800bd86:	46c0      	nop			; (mov r8, r8)
 800bd88:	46c0      	nop			; (mov r8, r8)
 800bd8a:	46c0      	nop			; (mov r8, r8)
 800bd8c:	46c0      	nop			; (mov r8, r8)
 800bd8e:	46c0      	nop			; (mov r8, r8)

0800bd90 <pxCurrentTCBConst2>:
 800bd90:	20000b30 	.word	0x20000b30
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 800bd94:	46c0      	nop			; (mov r8, r8)
 800bd96:	46c0      	nop			; (mov r8, r8)

0800bd98 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bd9c:	4b0e      	ldr	r3, [pc, #56]	; (800bdd8 <xPortStartScheduler+0x40>)
 800bd9e:	681a      	ldr	r2, [r3, #0]
 800bda0:	4b0d      	ldr	r3, [pc, #52]	; (800bdd8 <xPortStartScheduler+0x40>)
 800bda2:	21ff      	movs	r1, #255	; 0xff
 800bda4:	0409      	lsls	r1, r1, #16
 800bda6:	430a      	orrs	r2, r1
 800bda8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bdaa:	4b0b      	ldr	r3, [pc, #44]	; (800bdd8 <xPortStartScheduler+0x40>)
 800bdac:	681a      	ldr	r2, [r3, #0]
 800bdae:	4b0a      	ldr	r3, [pc, #40]	; (800bdd8 <xPortStartScheduler+0x40>)
 800bdb0:	21ff      	movs	r1, #255	; 0xff
 800bdb2:	0609      	lsls	r1, r1, #24
 800bdb4:	430a      	orrs	r2, r1
 800bdb6:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bdb8:	f000 f898 	bl	800beec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bdbc:	4b07      	ldr	r3, [pc, #28]	; (800bddc <xPortStartScheduler+0x44>)
 800bdbe:	2200      	movs	r2, #0
 800bdc0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 800bdc2:	f7ff ffcd 	bl	800bd60 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bdc6:	f7fe ffc9 	bl	800ad5c <vTaskSwitchContext>
	prvTaskExitError();
 800bdca:	f7ff ffa9 	bl	800bd20 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bdce:	2300      	movs	r3, #0
}
 800bdd0:	0018      	movs	r0, r3
 800bdd2:	46bd      	mov	sp, r7
 800bdd4:	bd80      	pop	{r7, pc}
 800bdd6:	46c0      	nop			; (mov r8, r8)
 800bdd8:	e000ed20 	.word	0xe000ed20
 800bddc:	20000018 	.word	0x20000018

0800bde0 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 800bde0:	b580      	push	{r7, lr}
 800bde2:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bde4:	4b05      	ldr	r3, [pc, #20]	; (800bdfc <vPortYield+0x1c>)
 800bde6:	2280      	movs	r2, #128	; 0x80
 800bde8:	0552      	lsls	r2, r2, #21
 800bdea:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800bdec:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800bdf0:	f3bf 8f6f 	isb	sy
}
 800bdf4:	46c0      	nop			; (mov r8, r8)
 800bdf6:	46bd      	mov	sp, r7
 800bdf8:	bd80      	pop	{r7, pc}
 800bdfa:	46c0      	nop			; (mov r8, r8)
 800bdfc:	e000ed04 	.word	0xe000ed04

0800be00 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800be00:	b580      	push	{r7, lr}
 800be02:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 800be04:	b672      	cpsid	i
	uxCriticalNesting++;
 800be06:	4b06      	ldr	r3, [pc, #24]	; (800be20 <vPortEnterCritical+0x20>)
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	1c5a      	adds	r2, r3, #1
 800be0c:	4b04      	ldr	r3, [pc, #16]	; (800be20 <vPortEnterCritical+0x20>)
 800be0e:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 800be10:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 800be14:	f3bf 8f6f 	isb	sy
}
 800be18:	46c0      	nop			; (mov r8, r8)
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}
 800be1e:	46c0      	nop			; (mov r8, r8)
 800be20:	20000018 	.word	0x20000018

0800be24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800be24:	b580      	push	{r7, lr}
 800be26:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800be28:	4b09      	ldr	r3, [pc, #36]	; (800be50 <vPortExitCritical+0x2c>)
 800be2a:	681b      	ldr	r3, [r3, #0]
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d101      	bne.n	800be34 <vPortExitCritical+0x10>
 800be30:	b672      	cpsid	i
 800be32:	e7fe      	b.n	800be32 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 800be34:	4b06      	ldr	r3, [pc, #24]	; (800be50 <vPortExitCritical+0x2c>)
 800be36:	681b      	ldr	r3, [r3, #0]
 800be38:	1e5a      	subs	r2, r3, #1
 800be3a:	4b05      	ldr	r3, [pc, #20]	; (800be50 <vPortExitCritical+0x2c>)
 800be3c:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 800be3e:	4b04      	ldr	r3, [pc, #16]	; (800be50 <vPortExitCritical+0x2c>)
 800be40:	681b      	ldr	r3, [r3, #0]
 800be42:	2b00      	cmp	r3, #0
 800be44:	d100      	bne.n	800be48 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 800be46:	b662      	cpsie	i
	}
}
 800be48:	46c0      	nop			; (mov r8, r8)
 800be4a:	46bd      	mov	sp, r7
 800be4c:	bd80      	pop	{r7, pc}
 800be4e:	46c0      	nop			; (mov r8, r8)
 800be50:	20000018 	.word	0x20000018

0800be54 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 800be54:	f3ef 8010 	mrs	r0, PRIMASK
 800be58:	b672      	cpsid	i
 800be5a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800be5c:	46c0      	nop			; (mov r8, r8)
 800be5e:	0018      	movs	r0, r3

0800be60 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 800be60:	f380 8810 	msr	PRIMASK, r0
 800be64:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800be66:	46c0      	nop			; (mov r8, r8)
	...

0800be70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800be70:	f3ef 8009 	mrs	r0, PSP
 800be74:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <pxCurrentTCBConst>)
 800be76:	681a      	ldr	r2, [r3, #0]
 800be78:	3820      	subs	r0, #32
 800be7a:	6010      	str	r0, [r2, #0]
 800be7c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800be7e:	4644      	mov	r4, r8
 800be80:	464d      	mov	r5, r9
 800be82:	4656      	mov	r6, sl
 800be84:	465f      	mov	r7, fp
 800be86:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800be88:	b508      	push	{r3, lr}
 800be8a:	b672      	cpsid	i
 800be8c:	f7fe ff66 	bl	800ad5c <vTaskSwitchContext>
 800be90:	b662      	cpsie	i
 800be92:	bc0c      	pop	{r2, r3}
 800be94:	6811      	ldr	r1, [r2, #0]
 800be96:	6808      	ldr	r0, [r1, #0]
 800be98:	3010      	adds	r0, #16
 800be9a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800be9c:	46a0      	mov	r8, r4
 800be9e:	46a9      	mov	r9, r5
 800bea0:	46b2      	mov	sl, r6
 800bea2:	46bb      	mov	fp, r7
 800bea4:	f380 8809 	msr	PSP, r0
 800bea8:	3820      	subs	r0, #32
 800beaa:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800beac:	4718      	bx	r3
 800beae:	46c0      	nop			; (mov r8, r8)

0800beb0 <pxCurrentTCBConst>:
 800beb0:	20000b30 	.word	0x20000b30
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 800beb4:	46c0      	nop			; (mov r8, r8)
 800beb6:	46c0      	nop			; (mov r8, r8)

0800beb8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b082      	sub	sp, #8
 800bebc:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800bebe:	f7ff ffc9 	bl	800be54 <ulSetInterruptMaskFromISR>
 800bec2:	0003      	movs	r3, r0
 800bec4:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bec6:	f7fe fe99 	bl	800abfc <xTaskIncrementTick>
 800beca:	1e03      	subs	r3, r0, #0
 800becc:	d003      	beq.n	800bed6 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bece:	4b06      	ldr	r3, [pc, #24]	; (800bee8 <SysTick_Handler+0x30>)
 800bed0:	2280      	movs	r2, #128	; 0x80
 800bed2:	0552      	lsls	r2, r2, #21
 800bed4:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 800bed6:	687b      	ldr	r3, [r7, #4]
 800bed8:	0018      	movs	r0, r3
 800beda:	f7ff ffc1 	bl	800be60 <vClearInterruptMaskFromISR>
}
 800bede:	46c0      	nop			; (mov r8, r8)
 800bee0:	46bd      	mov	sp, r7
 800bee2:	b002      	add	sp, #8
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	46c0      	nop			; (mov r8, r8)
 800bee8:	e000ed04 	.word	0xe000ed04

0800beec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bef0:	4b0b      	ldr	r3, [pc, #44]	; (800bf20 <vPortSetupTimerInterrupt+0x34>)
 800bef2:	2200      	movs	r2, #0
 800bef4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bef6:	4b0b      	ldr	r3, [pc, #44]	; (800bf24 <vPortSetupTimerInterrupt+0x38>)
 800bef8:	2200      	movs	r2, #0
 800befa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800befc:	4b0a      	ldr	r3, [pc, #40]	; (800bf28 <vPortSetupTimerInterrupt+0x3c>)
 800befe:	681b      	ldr	r3, [r3, #0]
 800bf00:	22fa      	movs	r2, #250	; 0xfa
 800bf02:	0091      	lsls	r1, r2, #2
 800bf04:	0018      	movs	r0, r3
 800bf06:	f7f4 f925 	bl	8000154 <__udivsi3>
 800bf0a:	0003      	movs	r3, r0
 800bf0c:	001a      	movs	r2, r3
 800bf0e:	4b07      	ldr	r3, [pc, #28]	; (800bf2c <vPortSetupTimerInterrupt+0x40>)
 800bf10:	3a01      	subs	r2, #1
 800bf12:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 800bf14:	4b02      	ldr	r3, [pc, #8]	; (800bf20 <vPortSetupTimerInterrupt+0x34>)
 800bf16:	2207      	movs	r2, #7
 800bf18:	601a      	str	r2, [r3, #0]
}
 800bf1a:	46c0      	nop			; (mov r8, r8)
 800bf1c:	46bd      	mov	sp, r7
 800bf1e:	bd80      	pop	{r7, pc}
 800bf20:	e000e010 	.word	0xe000e010
 800bf24:	e000e018 	.word	0xe000e018
 800bf28:	2000000c 	.word	0x2000000c
 800bf2c:	e000e014 	.word	0xe000e014

0800bf30 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800bf30:	b580      	push	{r7, lr}
 800bf32:	b086      	sub	sp, #24
 800bf34:	af00      	add	r7, sp, #0
 800bf36:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bf38:	2300      	movs	r3, #0
 800bf3a:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 800bf3c:	f7fe fdb8 	bl	800aab0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bf40:	4b4b      	ldr	r3, [pc, #300]	; (800c070 <pvPortMalloc+0x140>)
 800bf42:	681b      	ldr	r3, [r3, #0]
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d101      	bne.n	800bf4c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bf48:	f000 f8ec 	bl	800c124 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bf4c:	4b49      	ldr	r3, [pc, #292]	; (800c074 <pvPortMalloc+0x144>)
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	687a      	ldr	r2, [r7, #4]
 800bf52:	4013      	ands	r3, r2
 800bf54:	d000      	beq.n	800bf58 <pvPortMalloc+0x28>
 800bf56:	e07e      	b.n	800c056 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d012      	beq.n	800bf84 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 800bf5e:	2208      	movs	r2, #8
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	189b      	adds	r3, r3, r2
 800bf64:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bf66:	687b      	ldr	r3, [r7, #4]
 800bf68:	2207      	movs	r2, #7
 800bf6a:	4013      	ands	r3, r2
 800bf6c:	d00a      	beq.n	800bf84 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2207      	movs	r2, #7
 800bf72:	4393      	bics	r3, r2
 800bf74:	3308      	adds	r3, #8
 800bf76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	2207      	movs	r2, #7
 800bf7c:	4013      	ands	r3, r2
 800bf7e:	d001      	beq.n	800bf84 <pvPortMalloc+0x54>
 800bf80:	b672      	cpsid	i
 800bf82:	e7fe      	b.n	800bf82 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	2b00      	cmp	r3, #0
 800bf88:	d065      	beq.n	800c056 <pvPortMalloc+0x126>
 800bf8a:	4b3b      	ldr	r3, [pc, #236]	; (800c078 <pvPortMalloc+0x148>)
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	687a      	ldr	r2, [r7, #4]
 800bf90:	429a      	cmp	r2, r3
 800bf92:	d860      	bhi.n	800c056 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf94:	4b39      	ldr	r3, [pc, #228]	; (800c07c <pvPortMalloc+0x14c>)
 800bf96:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 800bf98:	4b38      	ldr	r3, [pc, #224]	; (800c07c <pvPortMalloc+0x14c>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf9e:	e004      	b.n	800bfaa <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 800bfa0:	697b      	ldr	r3, [r7, #20]
 800bfa2:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bfa4:	697b      	ldr	r3, [r7, #20]
 800bfa6:	681b      	ldr	r3, [r3, #0]
 800bfa8:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bfaa:	697b      	ldr	r3, [r7, #20]
 800bfac:	685b      	ldr	r3, [r3, #4]
 800bfae:	687a      	ldr	r2, [r7, #4]
 800bfb0:	429a      	cmp	r2, r3
 800bfb2:	d903      	bls.n	800bfbc <pvPortMalloc+0x8c>
 800bfb4:	697b      	ldr	r3, [r7, #20]
 800bfb6:	681b      	ldr	r3, [r3, #0]
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1f1      	bne.n	800bfa0 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bfbc:	4b2c      	ldr	r3, [pc, #176]	; (800c070 <pvPortMalloc+0x140>)
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	697a      	ldr	r2, [r7, #20]
 800bfc2:	429a      	cmp	r2, r3
 800bfc4:	d047      	beq.n	800c056 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bfc6:	693b      	ldr	r3, [r7, #16]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	2208      	movs	r2, #8
 800bfcc:	189b      	adds	r3, r3, r2
 800bfce:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bfd0:	697b      	ldr	r3, [r7, #20]
 800bfd2:	681a      	ldr	r2, [r3, #0]
 800bfd4:	693b      	ldr	r3, [r7, #16]
 800bfd6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	685a      	ldr	r2, [r3, #4]
 800bfdc:	687b      	ldr	r3, [r7, #4]
 800bfde:	1ad2      	subs	r2, r2, r3
 800bfe0:	2308      	movs	r3, #8
 800bfe2:	005b      	lsls	r3, r3, #1
 800bfe4:	429a      	cmp	r2, r3
 800bfe6:	d916      	bls.n	800c016 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bfe8:	697a      	ldr	r2, [r7, #20]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	18d3      	adds	r3, r2, r3
 800bfee:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bff0:	68bb      	ldr	r3, [r7, #8]
 800bff2:	2207      	movs	r2, #7
 800bff4:	4013      	ands	r3, r2
 800bff6:	d001      	beq.n	800bffc <pvPortMalloc+0xcc>
 800bff8:	b672      	cpsid	i
 800bffa:	e7fe      	b.n	800bffa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bffc:	697b      	ldr	r3, [r7, #20]
 800bffe:	685a      	ldr	r2, [r3, #4]
 800c000:	687b      	ldr	r3, [r7, #4]
 800c002:	1ad2      	subs	r2, r2, r3
 800c004:	68bb      	ldr	r3, [r7, #8]
 800c006:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c008:	697b      	ldr	r3, [r7, #20]
 800c00a:	687a      	ldr	r2, [r7, #4]
 800c00c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c00e:	68bb      	ldr	r3, [r7, #8]
 800c010:	0018      	movs	r0, r3
 800c012:	f000 f8e7 	bl	800c1e4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c016:	4b18      	ldr	r3, [pc, #96]	; (800c078 <pvPortMalloc+0x148>)
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	697b      	ldr	r3, [r7, #20]
 800c01c:	685b      	ldr	r3, [r3, #4]
 800c01e:	1ad2      	subs	r2, r2, r3
 800c020:	4b15      	ldr	r3, [pc, #84]	; (800c078 <pvPortMalloc+0x148>)
 800c022:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c024:	4b14      	ldr	r3, [pc, #80]	; (800c078 <pvPortMalloc+0x148>)
 800c026:	681a      	ldr	r2, [r3, #0]
 800c028:	4b15      	ldr	r3, [pc, #84]	; (800c080 <pvPortMalloc+0x150>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d203      	bcs.n	800c038 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c030:	4b11      	ldr	r3, [pc, #68]	; (800c078 <pvPortMalloc+0x148>)
 800c032:	681a      	ldr	r2, [r3, #0]
 800c034:	4b12      	ldr	r3, [pc, #72]	; (800c080 <pvPortMalloc+0x150>)
 800c036:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	685a      	ldr	r2, [r3, #4]
 800c03c:	4b0d      	ldr	r3, [pc, #52]	; (800c074 <pvPortMalloc+0x144>)
 800c03e:	681b      	ldr	r3, [r3, #0]
 800c040:	431a      	orrs	r2, r3
 800c042:	697b      	ldr	r3, [r7, #20]
 800c044:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c046:	697b      	ldr	r3, [r7, #20]
 800c048:	2200      	movs	r2, #0
 800c04a:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c04c:	4b0d      	ldr	r3, [pc, #52]	; (800c084 <pvPortMalloc+0x154>)
 800c04e:	681b      	ldr	r3, [r3, #0]
 800c050:	1c5a      	adds	r2, r3, #1
 800c052:	4b0c      	ldr	r3, [pc, #48]	; (800c084 <pvPortMalloc+0x154>)
 800c054:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c056:	f7fe fd37 	bl	800aac8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c05a:	68fb      	ldr	r3, [r7, #12]
 800c05c:	2207      	movs	r2, #7
 800c05e:	4013      	ands	r3, r2
 800c060:	d001      	beq.n	800c066 <pvPortMalloc+0x136>
 800c062:	b672      	cpsid	i
 800c064:	e7fe      	b.n	800c064 <pvPortMalloc+0x134>
	return pvReturn;
 800c066:	68fb      	ldr	r3, [r7, #12]
}
 800c068:	0018      	movs	r0, r3
 800c06a:	46bd      	mov	sp, r7
 800c06c:	b006      	add	sp, #24
 800c06e:	bd80      	pop	{r7, pc}
 800c070:	20003b80 	.word	0x20003b80
 800c074:	20003b94 	.word	0x20003b94
 800c078:	20003b84 	.word	0x20003b84
 800c07c:	20003b78 	.word	0x20003b78
 800c080:	20003b88 	.word	0x20003b88
 800c084:	20003b8c 	.word	0x20003b8c

0800c088 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c088:	b580      	push	{r7, lr}
 800c08a:	b084      	sub	sp, #16
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	2b00      	cmp	r3, #0
 800c098:	d03a      	beq.n	800c110 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c09a:	2308      	movs	r3, #8
 800c09c:	425b      	negs	r3, r3
 800c09e:	68fa      	ldr	r2, [r7, #12]
 800c0a0:	18d3      	adds	r3, r2, r3
 800c0a2:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c0a4:	68fb      	ldr	r3, [r7, #12]
 800c0a6:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c0a8:	68bb      	ldr	r3, [r7, #8]
 800c0aa:	685a      	ldr	r2, [r3, #4]
 800c0ac:	4b1a      	ldr	r3, [pc, #104]	; (800c118 <vPortFree+0x90>)
 800c0ae:	681b      	ldr	r3, [r3, #0]
 800c0b0:	4013      	ands	r3, r2
 800c0b2:	d101      	bne.n	800c0b8 <vPortFree+0x30>
 800c0b4:	b672      	cpsid	i
 800c0b6:	e7fe      	b.n	800c0b6 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c0b8:	68bb      	ldr	r3, [r7, #8]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d001      	beq.n	800c0c4 <vPortFree+0x3c>
 800c0c0:	b672      	cpsid	i
 800c0c2:	e7fe      	b.n	800c0c2 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0c4:	68bb      	ldr	r3, [r7, #8]
 800c0c6:	685a      	ldr	r2, [r3, #4]
 800c0c8:	4b13      	ldr	r3, [pc, #76]	; (800c118 <vPortFree+0x90>)
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	4013      	ands	r3, r2
 800c0ce:	d01f      	beq.n	800c110 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0d0:	68bb      	ldr	r3, [r7, #8]
 800c0d2:	681b      	ldr	r3, [r3, #0]
 800c0d4:	2b00      	cmp	r3, #0
 800c0d6:	d11b      	bne.n	800c110 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0d8:	68bb      	ldr	r3, [r7, #8]
 800c0da:	685a      	ldr	r2, [r3, #4]
 800c0dc:	4b0e      	ldr	r3, [pc, #56]	; (800c118 <vPortFree+0x90>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	43db      	mvns	r3, r3
 800c0e2:	401a      	ands	r2, r3
 800c0e4:	68bb      	ldr	r3, [r7, #8]
 800c0e6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0e8:	f7fe fce2 	bl	800aab0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	685a      	ldr	r2, [r3, #4]
 800c0f0:	4b0a      	ldr	r3, [pc, #40]	; (800c11c <vPortFree+0x94>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	18d2      	adds	r2, r2, r3
 800c0f6:	4b09      	ldr	r3, [pc, #36]	; (800c11c <vPortFree+0x94>)
 800c0f8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0fa:	68bb      	ldr	r3, [r7, #8]
 800c0fc:	0018      	movs	r0, r3
 800c0fe:	f000 f871 	bl	800c1e4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c102:	4b07      	ldr	r3, [pc, #28]	; (800c120 <vPortFree+0x98>)
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	4b05      	ldr	r3, [pc, #20]	; (800c120 <vPortFree+0x98>)
 800c10a:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 800c10c:	f7fe fcdc 	bl	800aac8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c110:	46c0      	nop			; (mov r8, r8)
 800c112:	46bd      	mov	sp, r7
 800c114:	b004      	add	sp, #16
 800c116:	bd80      	pop	{r7, pc}
 800c118:	20003b94 	.word	0x20003b94
 800c11c:	20003b84 	.word	0x20003b84
 800c120:	20003b90 	.word	0x20003b90

0800c124 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c124:	b580      	push	{r7, lr}
 800c126:	b084      	sub	sp, #16
 800c128:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c12a:	4b27      	ldr	r3, [pc, #156]	; (800c1c8 <prvHeapInit+0xa4>)
 800c12c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c12e:	4b27      	ldr	r3, [pc, #156]	; (800c1cc <prvHeapInit+0xa8>)
 800c130:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c132:	68fb      	ldr	r3, [r7, #12]
 800c134:	2207      	movs	r2, #7
 800c136:	4013      	ands	r3, r2
 800c138:	d00c      	beq.n	800c154 <prvHeapInit+0x30>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c13a:	68fb      	ldr	r3, [r7, #12]
 800c13c:	3307      	adds	r3, #7
 800c13e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c140:	68fb      	ldr	r3, [r7, #12]
 800c142:	2207      	movs	r2, #7
 800c144:	4393      	bics	r3, r2
 800c146:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c148:	68ba      	ldr	r2, [r7, #8]
 800c14a:	68fb      	ldr	r3, [r7, #12]
 800c14c:	1ad2      	subs	r2, r2, r3
 800c14e:	4b1f      	ldr	r3, [pc, #124]	; (800c1cc <prvHeapInit+0xa8>)
 800c150:	18d3      	adds	r3, r2, r3
 800c152:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c154:	68fb      	ldr	r3, [r7, #12]
 800c156:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c158:	4b1d      	ldr	r3, [pc, #116]	; (800c1d0 <prvHeapInit+0xac>)
 800c15a:	687a      	ldr	r2, [r7, #4]
 800c15c:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c15e:	4b1c      	ldr	r3, [pc, #112]	; (800c1d0 <prvHeapInit+0xac>)
 800c160:	2200      	movs	r2, #0
 800c162:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	68ba      	ldr	r2, [r7, #8]
 800c168:	18d3      	adds	r3, r2, r3
 800c16a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c16c:	2208      	movs	r2, #8
 800c16e:	68fb      	ldr	r3, [r7, #12]
 800c170:	1a9b      	subs	r3, r3, r2
 800c172:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c174:	68fb      	ldr	r3, [r7, #12]
 800c176:	2207      	movs	r2, #7
 800c178:	4393      	bics	r3, r2
 800c17a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c17c:	68fa      	ldr	r2, [r7, #12]
 800c17e:	4b15      	ldr	r3, [pc, #84]	; (800c1d4 <prvHeapInit+0xb0>)
 800c180:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 800c182:	4b14      	ldr	r3, [pc, #80]	; (800c1d4 <prvHeapInit+0xb0>)
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	2200      	movs	r2, #0
 800c188:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c18a:	4b12      	ldr	r3, [pc, #72]	; (800c1d4 <prvHeapInit+0xb0>)
 800c18c:	681b      	ldr	r3, [r3, #0]
 800c18e:	2200      	movs	r2, #0
 800c190:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	68fa      	ldr	r2, [r7, #12]
 800c19a:	1ad2      	subs	r2, r2, r3
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c1a0:	4b0c      	ldr	r3, [pc, #48]	; (800c1d4 <prvHeapInit+0xb0>)
 800c1a2:	681a      	ldr	r2, [r3, #0]
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1a8:	683b      	ldr	r3, [r7, #0]
 800c1aa:	685a      	ldr	r2, [r3, #4]
 800c1ac:	4b0a      	ldr	r3, [pc, #40]	; (800c1d8 <prvHeapInit+0xb4>)
 800c1ae:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1b0:	683b      	ldr	r3, [r7, #0]
 800c1b2:	685a      	ldr	r2, [r3, #4]
 800c1b4:	4b09      	ldr	r3, [pc, #36]	; (800c1dc <prvHeapInit+0xb8>)
 800c1b6:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c1b8:	4b09      	ldr	r3, [pc, #36]	; (800c1e0 <prvHeapInit+0xbc>)
 800c1ba:	2280      	movs	r2, #128	; 0x80
 800c1bc:	0612      	lsls	r2, r2, #24
 800c1be:	601a      	str	r2, [r3, #0]
}
 800c1c0:	46c0      	nop			; (mov r8, r8)
 800c1c2:	46bd      	mov	sp, r7
 800c1c4:	b004      	add	sp, #16
 800c1c6:	bd80      	pop	{r7, pc}
 800c1c8:	00002ee0 	.word	0x00002ee0
 800c1cc:	20000c98 	.word	0x20000c98
 800c1d0:	20003b78 	.word	0x20003b78
 800c1d4:	20003b80 	.word	0x20003b80
 800c1d8:	20003b88 	.word	0x20003b88
 800c1dc:	20003b84 	.word	0x20003b84
 800c1e0:	20003b94 	.word	0x20003b94

0800c1e4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1e4:	b580      	push	{r7, lr}
 800c1e6:	b084      	sub	sp, #16
 800c1e8:	af00      	add	r7, sp, #0
 800c1ea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1ec:	4b27      	ldr	r3, [pc, #156]	; (800c28c <prvInsertBlockIntoFreeList+0xa8>)
 800c1ee:	60fb      	str	r3, [r7, #12]
 800c1f0:	e002      	b.n	800c1f8 <prvInsertBlockIntoFreeList+0x14>
 800c1f2:	68fb      	ldr	r3, [r7, #12]
 800c1f4:	681b      	ldr	r3, [r3, #0]
 800c1f6:	60fb      	str	r3, [r7, #12]
 800c1f8:	68fb      	ldr	r3, [r7, #12]
 800c1fa:	681b      	ldr	r3, [r3, #0]
 800c1fc:	687a      	ldr	r2, [r7, #4]
 800c1fe:	429a      	cmp	r2, r3
 800c200:	d8f7      	bhi.n	800c1f2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c202:	68fb      	ldr	r3, [r7, #12]
 800c204:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	685b      	ldr	r3, [r3, #4]
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	18d3      	adds	r3, r2, r3
 800c20e:	687a      	ldr	r2, [r7, #4]
 800c210:	429a      	cmp	r2, r3
 800c212:	d108      	bne.n	800c226 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c214:	68fb      	ldr	r3, [r7, #12]
 800c216:	685a      	ldr	r2, [r3, #4]
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	685b      	ldr	r3, [r3, #4]
 800c21c:	18d2      	adds	r2, r2, r3
 800c21e:	68fb      	ldr	r3, [r7, #12]
 800c220:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c222:	68fb      	ldr	r3, [r7, #12]
 800c224:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c226:	687b      	ldr	r3, [r7, #4]
 800c228:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	685b      	ldr	r3, [r3, #4]
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	18d2      	adds	r2, r2, r3
 800c232:	68fb      	ldr	r3, [r7, #12]
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d118      	bne.n	800c26c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c23a:	68fb      	ldr	r3, [r7, #12]
 800c23c:	681a      	ldr	r2, [r3, #0]
 800c23e:	4b14      	ldr	r3, [pc, #80]	; (800c290 <prvInsertBlockIntoFreeList+0xac>)
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	429a      	cmp	r2, r3
 800c244:	d00d      	beq.n	800c262 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	685a      	ldr	r2, [r3, #4]
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	685b      	ldr	r3, [r3, #4]
 800c250:	18d2      	adds	r2, r2, r3
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c256:	68fb      	ldr	r3, [r7, #12]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	681a      	ldr	r2, [r3, #0]
 800c25c:	687b      	ldr	r3, [r7, #4]
 800c25e:	601a      	str	r2, [r3, #0]
 800c260:	e008      	b.n	800c274 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c262:	4b0b      	ldr	r3, [pc, #44]	; (800c290 <prvInsertBlockIntoFreeList+0xac>)
 800c264:	681a      	ldr	r2, [r3, #0]
 800c266:	687b      	ldr	r3, [r7, #4]
 800c268:	601a      	str	r2, [r3, #0]
 800c26a:	e003      	b.n	800c274 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c26c:	68fb      	ldr	r3, [r7, #12]
 800c26e:	681a      	ldr	r2, [r3, #0]
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c274:	68fa      	ldr	r2, [r7, #12]
 800c276:	687b      	ldr	r3, [r7, #4]
 800c278:	429a      	cmp	r2, r3
 800c27a:	d002      	beq.n	800c282 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c27c:	68fb      	ldr	r3, [r7, #12]
 800c27e:	687a      	ldr	r2, [r7, #4]
 800c280:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c282:	46c0      	nop			; (mov r8, r8)
 800c284:	46bd      	mov	sp, r7
 800c286:	b004      	add	sp, #16
 800c288:	bd80      	pop	{r7, pc}
 800c28a:	46c0      	nop			; (mov r8, r8)
 800c28c:	20003b78 	.word	0x20003b78
 800c290:	20003b80 	.word	0x20003b80

0800c294 <atof>:
 800c294:	b510      	push	{r4, lr}
 800c296:	2100      	movs	r1, #0
 800c298:	f000 ff2c 	bl	800d0f4 <strtod>
 800c29c:	bd10      	pop	{r4, pc}

0800c29e <atoi>:
 800c29e:	b510      	push	{r4, lr}
 800c2a0:	220a      	movs	r2, #10
 800c2a2:	2100      	movs	r1, #0
 800c2a4:	f000 ffba 	bl	800d21c <strtol>
 800c2a8:	bd10      	pop	{r4, pc}
	...

0800c2ac <malloc>:
 800c2ac:	b510      	push	{r4, lr}
 800c2ae:	4b03      	ldr	r3, [pc, #12]	; (800c2bc <malloc+0x10>)
 800c2b0:	0001      	movs	r1, r0
 800c2b2:	6818      	ldr	r0, [r3, #0]
 800c2b4:	f000 f830 	bl	800c318 <_malloc_r>
 800c2b8:	bd10      	pop	{r4, pc}
 800c2ba:	46c0      	nop			; (mov r8, r8)
 800c2bc:	200001e0 	.word	0x200001e0

0800c2c0 <free>:
 800c2c0:	b510      	push	{r4, lr}
 800c2c2:	4b03      	ldr	r3, [pc, #12]	; (800c2d0 <free+0x10>)
 800c2c4:	0001      	movs	r1, r0
 800c2c6:	6818      	ldr	r0, [r3, #0]
 800c2c8:	f002 fd98 	bl	800edfc <_free_r>
 800c2cc:	bd10      	pop	{r4, pc}
 800c2ce:	46c0      	nop			; (mov r8, r8)
 800c2d0:	200001e0 	.word	0x200001e0

0800c2d4 <sbrk_aligned>:
 800c2d4:	b570      	push	{r4, r5, r6, lr}
 800c2d6:	4e0f      	ldr	r6, [pc, #60]	; (800c314 <sbrk_aligned+0x40>)
 800c2d8:	000d      	movs	r5, r1
 800c2da:	6831      	ldr	r1, [r6, #0]
 800c2dc:	0004      	movs	r4, r0
 800c2de:	2900      	cmp	r1, #0
 800c2e0:	d102      	bne.n	800c2e8 <sbrk_aligned+0x14>
 800c2e2:	f001 fe59 	bl	800df98 <_sbrk_r>
 800c2e6:	6030      	str	r0, [r6, #0]
 800c2e8:	0029      	movs	r1, r5
 800c2ea:	0020      	movs	r0, r4
 800c2ec:	f001 fe54 	bl	800df98 <_sbrk_r>
 800c2f0:	1c43      	adds	r3, r0, #1
 800c2f2:	d00a      	beq.n	800c30a <sbrk_aligned+0x36>
 800c2f4:	2303      	movs	r3, #3
 800c2f6:	1cc5      	adds	r5, r0, #3
 800c2f8:	439d      	bics	r5, r3
 800c2fa:	42a8      	cmp	r0, r5
 800c2fc:	d007      	beq.n	800c30e <sbrk_aligned+0x3a>
 800c2fe:	1a29      	subs	r1, r5, r0
 800c300:	0020      	movs	r0, r4
 800c302:	f001 fe49 	bl	800df98 <_sbrk_r>
 800c306:	3001      	adds	r0, #1
 800c308:	d101      	bne.n	800c30e <sbrk_aligned+0x3a>
 800c30a:	2501      	movs	r5, #1
 800c30c:	426d      	negs	r5, r5
 800c30e:	0028      	movs	r0, r5
 800c310:	bd70      	pop	{r4, r5, r6, pc}
 800c312:	46c0      	nop			; (mov r8, r8)
 800c314:	20003b9c 	.word	0x20003b9c

0800c318 <_malloc_r>:
 800c318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c31a:	2203      	movs	r2, #3
 800c31c:	1ccb      	adds	r3, r1, #3
 800c31e:	4393      	bics	r3, r2
 800c320:	3308      	adds	r3, #8
 800c322:	0006      	movs	r6, r0
 800c324:	001f      	movs	r7, r3
 800c326:	2b0c      	cmp	r3, #12
 800c328:	d238      	bcs.n	800c39c <_malloc_r+0x84>
 800c32a:	270c      	movs	r7, #12
 800c32c:	42b9      	cmp	r1, r7
 800c32e:	d837      	bhi.n	800c3a0 <_malloc_r+0x88>
 800c330:	0030      	movs	r0, r6
 800c332:	f000 f873 	bl	800c41c <__malloc_lock>
 800c336:	4b38      	ldr	r3, [pc, #224]	; (800c418 <_malloc_r+0x100>)
 800c338:	9300      	str	r3, [sp, #0]
 800c33a:	681b      	ldr	r3, [r3, #0]
 800c33c:	001c      	movs	r4, r3
 800c33e:	2c00      	cmp	r4, #0
 800c340:	d133      	bne.n	800c3aa <_malloc_r+0x92>
 800c342:	0039      	movs	r1, r7
 800c344:	0030      	movs	r0, r6
 800c346:	f7ff ffc5 	bl	800c2d4 <sbrk_aligned>
 800c34a:	0004      	movs	r4, r0
 800c34c:	1c43      	adds	r3, r0, #1
 800c34e:	d15e      	bne.n	800c40e <_malloc_r+0xf6>
 800c350:	9b00      	ldr	r3, [sp, #0]
 800c352:	681c      	ldr	r4, [r3, #0]
 800c354:	0025      	movs	r5, r4
 800c356:	2d00      	cmp	r5, #0
 800c358:	d14e      	bne.n	800c3f8 <_malloc_r+0xe0>
 800c35a:	2c00      	cmp	r4, #0
 800c35c:	d051      	beq.n	800c402 <_malloc_r+0xea>
 800c35e:	6823      	ldr	r3, [r4, #0]
 800c360:	0029      	movs	r1, r5
 800c362:	18e3      	adds	r3, r4, r3
 800c364:	0030      	movs	r0, r6
 800c366:	9301      	str	r3, [sp, #4]
 800c368:	f001 fe16 	bl	800df98 <_sbrk_r>
 800c36c:	9b01      	ldr	r3, [sp, #4]
 800c36e:	4283      	cmp	r3, r0
 800c370:	d147      	bne.n	800c402 <_malloc_r+0xea>
 800c372:	6823      	ldr	r3, [r4, #0]
 800c374:	0030      	movs	r0, r6
 800c376:	1aff      	subs	r7, r7, r3
 800c378:	0039      	movs	r1, r7
 800c37a:	f7ff ffab 	bl	800c2d4 <sbrk_aligned>
 800c37e:	3001      	adds	r0, #1
 800c380:	d03f      	beq.n	800c402 <_malloc_r+0xea>
 800c382:	6823      	ldr	r3, [r4, #0]
 800c384:	19db      	adds	r3, r3, r7
 800c386:	6023      	str	r3, [r4, #0]
 800c388:	9b00      	ldr	r3, [sp, #0]
 800c38a:	681b      	ldr	r3, [r3, #0]
 800c38c:	2b00      	cmp	r3, #0
 800c38e:	d040      	beq.n	800c412 <_malloc_r+0xfa>
 800c390:	685a      	ldr	r2, [r3, #4]
 800c392:	42a2      	cmp	r2, r4
 800c394:	d133      	bne.n	800c3fe <_malloc_r+0xe6>
 800c396:	2200      	movs	r2, #0
 800c398:	605a      	str	r2, [r3, #4]
 800c39a:	e014      	b.n	800c3c6 <_malloc_r+0xae>
 800c39c:	2b00      	cmp	r3, #0
 800c39e:	dac5      	bge.n	800c32c <_malloc_r+0x14>
 800c3a0:	230c      	movs	r3, #12
 800c3a2:	2500      	movs	r5, #0
 800c3a4:	6033      	str	r3, [r6, #0]
 800c3a6:	0028      	movs	r0, r5
 800c3a8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c3aa:	6821      	ldr	r1, [r4, #0]
 800c3ac:	1bc9      	subs	r1, r1, r7
 800c3ae:	d420      	bmi.n	800c3f2 <_malloc_r+0xda>
 800c3b0:	290b      	cmp	r1, #11
 800c3b2:	d918      	bls.n	800c3e6 <_malloc_r+0xce>
 800c3b4:	19e2      	adds	r2, r4, r7
 800c3b6:	6027      	str	r7, [r4, #0]
 800c3b8:	42a3      	cmp	r3, r4
 800c3ba:	d112      	bne.n	800c3e2 <_malloc_r+0xca>
 800c3bc:	9b00      	ldr	r3, [sp, #0]
 800c3be:	601a      	str	r2, [r3, #0]
 800c3c0:	6863      	ldr	r3, [r4, #4]
 800c3c2:	6011      	str	r1, [r2, #0]
 800c3c4:	6053      	str	r3, [r2, #4]
 800c3c6:	0030      	movs	r0, r6
 800c3c8:	0025      	movs	r5, r4
 800c3ca:	f000 f82f 	bl	800c42c <__malloc_unlock>
 800c3ce:	2207      	movs	r2, #7
 800c3d0:	350b      	adds	r5, #11
 800c3d2:	1d23      	adds	r3, r4, #4
 800c3d4:	4395      	bics	r5, r2
 800c3d6:	1aea      	subs	r2, r5, r3
 800c3d8:	429d      	cmp	r5, r3
 800c3da:	d0e4      	beq.n	800c3a6 <_malloc_r+0x8e>
 800c3dc:	1b5b      	subs	r3, r3, r5
 800c3de:	50a3      	str	r3, [r4, r2]
 800c3e0:	e7e1      	b.n	800c3a6 <_malloc_r+0x8e>
 800c3e2:	605a      	str	r2, [r3, #4]
 800c3e4:	e7ec      	b.n	800c3c0 <_malloc_r+0xa8>
 800c3e6:	6862      	ldr	r2, [r4, #4]
 800c3e8:	42a3      	cmp	r3, r4
 800c3ea:	d1d5      	bne.n	800c398 <_malloc_r+0x80>
 800c3ec:	9b00      	ldr	r3, [sp, #0]
 800c3ee:	601a      	str	r2, [r3, #0]
 800c3f0:	e7e9      	b.n	800c3c6 <_malloc_r+0xae>
 800c3f2:	0023      	movs	r3, r4
 800c3f4:	6864      	ldr	r4, [r4, #4]
 800c3f6:	e7a2      	b.n	800c33e <_malloc_r+0x26>
 800c3f8:	002c      	movs	r4, r5
 800c3fa:	686d      	ldr	r5, [r5, #4]
 800c3fc:	e7ab      	b.n	800c356 <_malloc_r+0x3e>
 800c3fe:	0013      	movs	r3, r2
 800c400:	e7c4      	b.n	800c38c <_malloc_r+0x74>
 800c402:	230c      	movs	r3, #12
 800c404:	0030      	movs	r0, r6
 800c406:	6033      	str	r3, [r6, #0]
 800c408:	f000 f810 	bl	800c42c <__malloc_unlock>
 800c40c:	e7cb      	b.n	800c3a6 <_malloc_r+0x8e>
 800c40e:	6027      	str	r7, [r4, #0]
 800c410:	e7d9      	b.n	800c3c6 <_malloc_r+0xae>
 800c412:	605b      	str	r3, [r3, #4]
 800c414:	deff      	udf	#255	; 0xff
 800c416:	46c0      	nop			; (mov r8, r8)
 800c418:	20003b98 	.word	0x20003b98

0800c41c <__malloc_lock>:
 800c41c:	b510      	push	{r4, lr}
 800c41e:	4802      	ldr	r0, [pc, #8]	; (800c428 <__malloc_lock+0xc>)
 800c420:	f001 fe0b 	bl	800e03a <__retarget_lock_acquire_recursive>
 800c424:	bd10      	pop	{r4, pc}
 800c426:	46c0      	nop			; (mov r8, r8)
 800c428:	20003ce0 	.word	0x20003ce0

0800c42c <__malloc_unlock>:
 800c42c:	b510      	push	{r4, lr}
 800c42e:	4802      	ldr	r0, [pc, #8]	; (800c438 <__malloc_unlock+0xc>)
 800c430:	f001 fe04 	bl	800e03c <__retarget_lock_release_recursive>
 800c434:	bd10      	pop	{r4, pc}
 800c436:	46c0      	nop			; (mov r8, r8)
 800c438:	20003ce0 	.word	0x20003ce0

0800c43c <realloc>:
 800c43c:	b510      	push	{r4, lr}
 800c43e:	4b03      	ldr	r3, [pc, #12]	; (800c44c <realloc+0x10>)
 800c440:	000a      	movs	r2, r1
 800c442:	0001      	movs	r1, r0
 800c444:	6818      	ldr	r0, [r3, #0]
 800c446:	f000 f803 	bl	800c450 <_realloc_r>
 800c44a:	bd10      	pop	{r4, pc}
 800c44c:	200001e0 	.word	0x200001e0

0800c450 <_realloc_r>:
 800c450:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c452:	0007      	movs	r7, r0
 800c454:	000e      	movs	r6, r1
 800c456:	0014      	movs	r4, r2
 800c458:	2900      	cmp	r1, #0
 800c45a:	d105      	bne.n	800c468 <_realloc_r+0x18>
 800c45c:	0011      	movs	r1, r2
 800c45e:	f7ff ff5b 	bl	800c318 <_malloc_r>
 800c462:	0005      	movs	r5, r0
 800c464:	0028      	movs	r0, r5
 800c466:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c468:	2a00      	cmp	r2, #0
 800c46a:	d103      	bne.n	800c474 <_realloc_r+0x24>
 800c46c:	f002 fcc6 	bl	800edfc <_free_r>
 800c470:	0025      	movs	r5, r4
 800c472:	e7f7      	b.n	800c464 <_realloc_r+0x14>
 800c474:	f003 fd35 	bl	800fee2 <_malloc_usable_size_r>
 800c478:	9001      	str	r0, [sp, #4]
 800c47a:	4284      	cmp	r4, r0
 800c47c:	d803      	bhi.n	800c486 <_realloc_r+0x36>
 800c47e:	0035      	movs	r5, r6
 800c480:	0843      	lsrs	r3, r0, #1
 800c482:	42a3      	cmp	r3, r4
 800c484:	d3ee      	bcc.n	800c464 <_realloc_r+0x14>
 800c486:	0021      	movs	r1, r4
 800c488:	0038      	movs	r0, r7
 800c48a:	f7ff ff45 	bl	800c318 <_malloc_r>
 800c48e:	1e05      	subs	r5, r0, #0
 800c490:	d0e8      	beq.n	800c464 <_realloc_r+0x14>
 800c492:	9b01      	ldr	r3, [sp, #4]
 800c494:	0022      	movs	r2, r4
 800c496:	429c      	cmp	r4, r3
 800c498:	d900      	bls.n	800c49c <_realloc_r+0x4c>
 800c49a:	001a      	movs	r2, r3
 800c49c:	0031      	movs	r1, r6
 800c49e:	0028      	movs	r0, r5
 800c4a0:	f001 fde0 	bl	800e064 <memcpy>
 800c4a4:	0031      	movs	r1, r6
 800c4a6:	0038      	movs	r0, r7
 800c4a8:	f002 fca8 	bl	800edfc <_free_r>
 800c4ac:	e7da      	b.n	800c464 <_realloc_r+0x14>
	...

0800c4b0 <sulp>:
 800c4b0:	b570      	push	{r4, r5, r6, lr}
 800c4b2:	0016      	movs	r6, r2
 800c4b4:	000d      	movs	r5, r1
 800c4b6:	f003 fbdf 	bl	800fc78 <__ulp>
 800c4ba:	2e00      	cmp	r6, #0
 800c4bc:	d00d      	beq.n	800c4da <sulp+0x2a>
 800c4be:	236b      	movs	r3, #107	; 0x6b
 800c4c0:	006a      	lsls	r2, r5, #1
 800c4c2:	0d52      	lsrs	r2, r2, #21
 800c4c4:	1a9b      	subs	r3, r3, r2
 800c4c6:	2b00      	cmp	r3, #0
 800c4c8:	dd07      	ble.n	800c4da <sulp+0x2a>
 800c4ca:	2400      	movs	r4, #0
 800c4cc:	4a03      	ldr	r2, [pc, #12]	; (800c4dc <sulp+0x2c>)
 800c4ce:	051b      	lsls	r3, r3, #20
 800c4d0:	189d      	adds	r5, r3, r2
 800c4d2:	002b      	movs	r3, r5
 800c4d4:	0022      	movs	r2, r4
 800c4d6:	f7f5 f8bd 	bl	8001654 <__aeabi_dmul>
 800c4da:	bd70      	pop	{r4, r5, r6, pc}
 800c4dc:	3ff00000 	.word	0x3ff00000

0800c4e0 <_strtod_l>:
 800c4e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c4e2:	b0a1      	sub	sp, #132	; 0x84
 800c4e4:	9219      	str	r2, [sp, #100]	; 0x64
 800c4e6:	2200      	movs	r2, #0
 800c4e8:	2600      	movs	r6, #0
 800c4ea:	2700      	movs	r7, #0
 800c4ec:	9004      	str	r0, [sp, #16]
 800c4ee:	9107      	str	r1, [sp, #28]
 800c4f0:	921c      	str	r2, [sp, #112]	; 0x70
 800c4f2:	911b      	str	r1, [sp, #108]	; 0x6c
 800c4f4:	780a      	ldrb	r2, [r1, #0]
 800c4f6:	2a2b      	cmp	r2, #43	; 0x2b
 800c4f8:	d055      	beq.n	800c5a6 <_strtod_l+0xc6>
 800c4fa:	d841      	bhi.n	800c580 <_strtod_l+0xa0>
 800c4fc:	2a0d      	cmp	r2, #13
 800c4fe:	d83b      	bhi.n	800c578 <_strtod_l+0x98>
 800c500:	2a08      	cmp	r2, #8
 800c502:	d83b      	bhi.n	800c57c <_strtod_l+0x9c>
 800c504:	2a00      	cmp	r2, #0
 800c506:	d044      	beq.n	800c592 <_strtod_l+0xb2>
 800c508:	2200      	movs	r2, #0
 800c50a:	920f      	str	r2, [sp, #60]	; 0x3c
 800c50c:	2100      	movs	r1, #0
 800c50e:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800c510:	9109      	str	r1, [sp, #36]	; 0x24
 800c512:	782a      	ldrb	r2, [r5, #0]
 800c514:	2a30      	cmp	r2, #48	; 0x30
 800c516:	d000      	beq.n	800c51a <_strtod_l+0x3a>
 800c518:	e085      	b.n	800c626 <_strtod_l+0x146>
 800c51a:	786a      	ldrb	r2, [r5, #1]
 800c51c:	3120      	adds	r1, #32
 800c51e:	438a      	bics	r2, r1
 800c520:	2a58      	cmp	r2, #88	; 0x58
 800c522:	d000      	beq.n	800c526 <_strtod_l+0x46>
 800c524:	e075      	b.n	800c612 <_strtod_l+0x132>
 800c526:	9302      	str	r3, [sp, #8]
 800c528:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c52a:	4a97      	ldr	r2, [pc, #604]	; (800c788 <_strtod_l+0x2a8>)
 800c52c:	9301      	str	r3, [sp, #4]
 800c52e:	ab1c      	add	r3, sp, #112	; 0x70
 800c530:	9300      	str	r3, [sp, #0]
 800c532:	9804      	ldr	r0, [sp, #16]
 800c534:	ab1d      	add	r3, sp, #116	; 0x74
 800c536:	a91b      	add	r1, sp, #108	; 0x6c
 800c538:	f002 fd14 	bl	800ef64 <__gethex>
 800c53c:	230f      	movs	r3, #15
 800c53e:	0002      	movs	r2, r0
 800c540:	401a      	ands	r2, r3
 800c542:	0004      	movs	r4, r0
 800c544:	9205      	str	r2, [sp, #20]
 800c546:	4218      	tst	r0, r3
 800c548:	d005      	beq.n	800c556 <_strtod_l+0x76>
 800c54a:	2a06      	cmp	r2, #6
 800c54c:	d12d      	bne.n	800c5aa <_strtod_l+0xca>
 800c54e:	1c6b      	adds	r3, r5, #1
 800c550:	931b      	str	r3, [sp, #108]	; 0x6c
 800c552:	2300      	movs	r3, #0
 800c554:	930f      	str	r3, [sp, #60]	; 0x3c
 800c556:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c558:	2b00      	cmp	r3, #0
 800c55a:	d002      	beq.n	800c562 <_strtod_l+0x82>
 800c55c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c55e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800c560:	6013      	str	r3, [r2, #0]
 800c562:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c564:	2b00      	cmp	r3, #0
 800c566:	d01b      	beq.n	800c5a0 <_strtod_l+0xc0>
 800c568:	2380      	movs	r3, #128	; 0x80
 800c56a:	0032      	movs	r2, r6
 800c56c:	061b      	lsls	r3, r3, #24
 800c56e:	18fb      	adds	r3, r7, r3
 800c570:	0010      	movs	r0, r2
 800c572:	0019      	movs	r1, r3
 800c574:	b021      	add	sp, #132	; 0x84
 800c576:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c578:	2a20      	cmp	r2, #32
 800c57a:	d1c5      	bne.n	800c508 <_strtod_l+0x28>
 800c57c:	3101      	adds	r1, #1
 800c57e:	e7b8      	b.n	800c4f2 <_strtod_l+0x12>
 800c580:	2a2d      	cmp	r2, #45	; 0x2d
 800c582:	d1c1      	bne.n	800c508 <_strtod_l+0x28>
 800c584:	3a2c      	subs	r2, #44	; 0x2c
 800c586:	920f      	str	r2, [sp, #60]	; 0x3c
 800c588:	1c4a      	adds	r2, r1, #1
 800c58a:	921b      	str	r2, [sp, #108]	; 0x6c
 800c58c:	784a      	ldrb	r2, [r1, #1]
 800c58e:	2a00      	cmp	r2, #0
 800c590:	d1bc      	bne.n	800c50c <_strtod_l+0x2c>
 800c592:	9b07      	ldr	r3, [sp, #28]
 800c594:	931b      	str	r3, [sp, #108]	; 0x6c
 800c596:	2300      	movs	r3, #0
 800c598:	930f      	str	r3, [sp, #60]	; 0x3c
 800c59a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d1dd      	bne.n	800c55c <_strtod_l+0x7c>
 800c5a0:	0032      	movs	r2, r6
 800c5a2:	003b      	movs	r3, r7
 800c5a4:	e7e4      	b.n	800c570 <_strtod_l+0x90>
 800c5a6:	2200      	movs	r2, #0
 800c5a8:	e7ed      	b.n	800c586 <_strtod_l+0xa6>
 800c5aa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800c5ac:	2a00      	cmp	r2, #0
 800c5ae:	d007      	beq.n	800c5c0 <_strtod_l+0xe0>
 800c5b0:	2135      	movs	r1, #53	; 0x35
 800c5b2:	a81e      	add	r0, sp, #120	; 0x78
 800c5b4:	f003 fc51 	bl	800fe5a <__copybits>
 800c5b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c5ba:	9804      	ldr	r0, [sp, #16]
 800c5bc:	f003 f81a 	bl	800f5f4 <_Bfree>
 800c5c0:	9805      	ldr	r0, [sp, #20]
 800c5c2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800c5c4:	3801      	subs	r0, #1
 800c5c6:	2804      	cmp	r0, #4
 800c5c8:	d806      	bhi.n	800c5d8 <_strtod_l+0xf8>
 800c5ca:	f7f3 fdaf 	bl	800012c <__gnu_thumb1_case_uqi>
 800c5ce:	0312      	.short	0x0312
 800c5d0:	1e1c      	.short	0x1e1c
 800c5d2:	12          	.byte	0x12
 800c5d3:	00          	.byte	0x00
 800c5d4:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c5d6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800c5d8:	05e4      	lsls	r4, r4, #23
 800c5da:	d502      	bpl.n	800c5e2 <_strtod_l+0x102>
 800c5dc:	2380      	movs	r3, #128	; 0x80
 800c5de:	061b      	lsls	r3, r3, #24
 800c5e0:	431f      	orrs	r7, r3
 800c5e2:	4b6a      	ldr	r3, [pc, #424]	; (800c78c <_strtod_l+0x2ac>)
 800c5e4:	423b      	tst	r3, r7
 800c5e6:	d1b6      	bne.n	800c556 <_strtod_l+0x76>
 800c5e8:	f001 fcfc 	bl	800dfe4 <__errno>
 800c5ec:	2322      	movs	r3, #34	; 0x22
 800c5ee:	6003      	str	r3, [r0, #0]
 800c5f0:	e7b1      	b.n	800c556 <_strtod_l+0x76>
 800c5f2:	4967      	ldr	r1, [pc, #412]	; (800c790 <_strtod_l+0x2b0>)
 800c5f4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800c5f6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c5f8:	400a      	ands	r2, r1
 800c5fa:	4966      	ldr	r1, [pc, #408]	; (800c794 <_strtod_l+0x2b4>)
 800c5fc:	185b      	adds	r3, r3, r1
 800c5fe:	051b      	lsls	r3, r3, #20
 800c600:	431a      	orrs	r2, r3
 800c602:	0017      	movs	r7, r2
 800c604:	e7e8      	b.n	800c5d8 <_strtod_l+0xf8>
 800c606:	4f61      	ldr	r7, [pc, #388]	; (800c78c <_strtod_l+0x2ac>)
 800c608:	e7e6      	b.n	800c5d8 <_strtod_l+0xf8>
 800c60a:	2601      	movs	r6, #1
 800c60c:	4f62      	ldr	r7, [pc, #392]	; (800c798 <_strtod_l+0x2b8>)
 800c60e:	4276      	negs	r6, r6
 800c610:	e7e2      	b.n	800c5d8 <_strtod_l+0xf8>
 800c612:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c614:	1c5a      	adds	r2, r3, #1
 800c616:	921b      	str	r2, [sp, #108]	; 0x6c
 800c618:	785b      	ldrb	r3, [r3, #1]
 800c61a:	2b30      	cmp	r3, #48	; 0x30
 800c61c:	d0f9      	beq.n	800c612 <_strtod_l+0x132>
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d099      	beq.n	800c556 <_strtod_l+0x76>
 800c622:	2301      	movs	r3, #1
 800c624:	9309      	str	r3, [sp, #36]	; 0x24
 800c626:	2500      	movs	r5, #0
 800c628:	220a      	movs	r2, #10
 800c62a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c62c:	950d      	str	r5, [sp, #52]	; 0x34
 800c62e:	9310      	str	r3, [sp, #64]	; 0x40
 800c630:	9508      	str	r5, [sp, #32]
 800c632:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800c634:	7804      	ldrb	r4, [r0, #0]
 800c636:	0023      	movs	r3, r4
 800c638:	3b30      	subs	r3, #48	; 0x30
 800c63a:	b2d9      	uxtb	r1, r3
 800c63c:	2909      	cmp	r1, #9
 800c63e:	d927      	bls.n	800c690 <_strtod_l+0x1b0>
 800c640:	2201      	movs	r2, #1
 800c642:	4956      	ldr	r1, [pc, #344]	; (800c79c <_strtod_l+0x2bc>)
 800c644:	f001 fbca 	bl	800dddc <strncmp>
 800c648:	2800      	cmp	r0, #0
 800c64a:	d031      	beq.n	800c6b0 <_strtod_l+0x1d0>
 800c64c:	2000      	movs	r0, #0
 800c64e:	0023      	movs	r3, r4
 800c650:	4684      	mov	ip, r0
 800c652:	9a08      	ldr	r2, [sp, #32]
 800c654:	900c      	str	r0, [sp, #48]	; 0x30
 800c656:	9205      	str	r2, [sp, #20]
 800c658:	2220      	movs	r2, #32
 800c65a:	0019      	movs	r1, r3
 800c65c:	4391      	bics	r1, r2
 800c65e:	000a      	movs	r2, r1
 800c660:	2100      	movs	r1, #0
 800c662:	9106      	str	r1, [sp, #24]
 800c664:	2a45      	cmp	r2, #69	; 0x45
 800c666:	d000      	beq.n	800c66a <_strtod_l+0x18a>
 800c668:	e0c2      	b.n	800c7f0 <_strtod_l+0x310>
 800c66a:	9b05      	ldr	r3, [sp, #20]
 800c66c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c66e:	4303      	orrs	r3, r0
 800c670:	4313      	orrs	r3, r2
 800c672:	428b      	cmp	r3, r1
 800c674:	d08d      	beq.n	800c592 <_strtod_l+0xb2>
 800c676:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c678:	9307      	str	r3, [sp, #28]
 800c67a:	3301      	adds	r3, #1
 800c67c:	931b      	str	r3, [sp, #108]	; 0x6c
 800c67e:	9b07      	ldr	r3, [sp, #28]
 800c680:	785b      	ldrb	r3, [r3, #1]
 800c682:	2b2b      	cmp	r3, #43	; 0x2b
 800c684:	d071      	beq.n	800c76a <_strtod_l+0x28a>
 800c686:	000c      	movs	r4, r1
 800c688:	2b2d      	cmp	r3, #45	; 0x2d
 800c68a:	d174      	bne.n	800c776 <_strtod_l+0x296>
 800c68c:	2401      	movs	r4, #1
 800c68e:	e06d      	b.n	800c76c <_strtod_l+0x28c>
 800c690:	9908      	ldr	r1, [sp, #32]
 800c692:	2908      	cmp	r1, #8
 800c694:	dc09      	bgt.n	800c6aa <_strtod_l+0x1ca>
 800c696:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c698:	4351      	muls	r1, r2
 800c69a:	185b      	adds	r3, r3, r1
 800c69c:	930d      	str	r3, [sp, #52]	; 0x34
 800c69e:	9b08      	ldr	r3, [sp, #32]
 800c6a0:	3001      	adds	r0, #1
 800c6a2:	3301      	adds	r3, #1
 800c6a4:	9308      	str	r3, [sp, #32]
 800c6a6:	901b      	str	r0, [sp, #108]	; 0x6c
 800c6a8:	e7c3      	b.n	800c632 <_strtod_l+0x152>
 800c6aa:	4355      	muls	r5, r2
 800c6ac:	195d      	adds	r5, r3, r5
 800c6ae:	e7f6      	b.n	800c69e <_strtod_l+0x1be>
 800c6b0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6b2:	1c5a      	adds	r2, r3, #1
 800c6b4:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6b6:	9a08      	ldr	r2, [sp, #32]
 800c6b8:	785b      	ldrb	r3, [r3, #1]
 800c6ba:	2a00      	cmp	r2, #0
 800c6bc:	d03a      	beq.n	800c734 <_strtod_l+0x254>
 800c6be:	900c      	str	r0, [sp, #48]	; 0x30
 800c6c0:	9205      	str	r2, [sp, #20]
 800c6c2:	001a      	movs	r2, r3
 800c6c4:	3a30      	subs	r2, #48	; 0x30
 800c6c6:	2a09      	cmp	r2, #9
 800c6c8:	d912      	bls.n	800c6f0 <_strtod_l+0x210>
 800c6ca:	2201      	movs	r2, #1
 800c6cc:	4694      	mov	ip, r2
 800c6ce:	e7c3      	b.n	800c658 <_strtod_l+0x178>
 800c6d0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c6d2:	3001      	adds	r0, #1
 800c6d4:	1c5a      	adds	r2, r3, #1
 800c6d6:	921b      	str	r2, [sp, #108]	; 0x6c
 800c6d8:	785b      	ldrb	r3, [r3, #1]
 800c6da:	2b30      	cmp	r3, #48	; 0x30
 800c6dc:	d0f8      	beq.n	800c6d0 <_strtod_l+0x1f0>
 800c6de:	001a      	movs	r2, r3
 800c6e0:	3a31      	subs	r2, #49	; 0x31
 800c6e2:	2a08      	cmp	r2, #8
 800c6e4:	d83c      	bhi.n	800c760 <_strtod_l+0x280>
 800c6e6:	900c      	str	r0, [sp, #48]	; 0x30
 800c6e8:	2000      	movs	r0, #0
 800c6ea:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800c6ec:	9005      	str	r0, [sp, #20]
 800c6ee:	9210      	str	r2, [sp, #64]	; 0x40
 800c6f0:	001a      	movs	r2, r3
 800c6f2:	1c41      	adds	r1, r0, #1
 800c6f4:	3a30      	subs	r2, #48	; 0x30
 800c6f6:	2b30      	cmp	r3, #48	; 0x30
 800c6f8:	d016      	beq.n	800c728 <_strtod_l+0x248>
 800c6fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c6fc:	185b      	adds	r3, r3, r1
 800c6fe:	930c      	str	r3, [sp, #48]	; 0x30
 800c700:	9b05      	ldr	r3, [sp, #20]
 800c702:	210a      	movs	r1, #10
 800c704:	469c      	mov	ip, r3
 800c706:	4484      	add	ip, r0
 800c708:	4563      	cmp	r3, ip
 800c70a:	d115      	bne.n	800c738 <_strtod_l+0x258>
 800c70c:	9905      	ldr	r1, [sp, #20]
 800c70e:	9b05      	ldr	r3, [sp, #20]
 800c710:	3101      	adds	r1, #1
 800c712:	1809      	adds	r1, r1, r0
 800c714:	181b      	adds	r3, r3, r0
 800c716:	9105      	str	r1, [sp, #20]
 800c718:	2b08      	cmp	r3, #8
 800c71a:	dc19      	bgt.n	800c750 <_strtod_l+0x270>
 800c71c:	230a      	movs	r3, #10
 800c71e:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c720:	434b      	muls	r3, r1
 800c722:	2100      	movs	r1, #0
 800c724:	18d3      	adds	r3, r2, r3
 800c726:	930d      	str	r3, [sp, #52]	; 0x34
 800c728:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c72a:	0008      	movs	r0, r1
 800c72c:	1c5a      	adds	r2, r3, #1
 800c72e:	921b      	str	r2, [sp, #108]	; 0x6c
 800c730:	785b      	ldrb	r3, [r3, #1]
 800c732:	e7c6      	b.n	800c6c2 <_strtod_l+0x1e2>
 800c734:	9808      	ldr	r0, [sp, #32]
 800c736:	e7d0      	b.n	800c6da <_strtod_l+0x1fa>
 800c738:	1c5c      	adds	r4, r3, #1
 800c73a:	2b08      	cmp	r3, #8
 800c73c:	dc04      	bgt.n	800c748 <_strtod_l+0x268>
 800c73e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c740:	434b      	muls	r3, r1
 800c742:	930d      	str	r3, [sp, #52]	; 0x34
 800c744:	0023      	movs	r3, r4
 800c746:	e7df      	b.n	800c708 <_strtod_l+0x228>
 800c748:	2c10      	cmp	r4, #16
 800c74a:	dcfb      	bgt.n	800c744 <_strtod_l+0x264>
 800c74c:	434d      	muls	r5, r1
 800c74e:	e7f9      	b.n	800c744 <_strtod_l+0x264>
 800c750:	9b05      	ldr	r3, [sp, #20]
 800c752:	2100      	movs	r1, #0
 800c754:	2b10      	cmp	r3, #16
 800c756:	dce7      	bgt.n	800c728 <_strtod_l+0x248>
 800c758:	230a      	movs	r3, #10
 800c75a:	435d      	muls	r5, r3
 800c75c:	1955      	adds	r5, r2, r5
 800c75e:	e7e3      	b.n	800c728 <_strtod_l+0x248>
 800c760:	2200      	movs	r2, #0
 800c762:	920c      	str	r2, [sp, #48]	; 0x30
 800c764:	9205      	str	r2, [sp, #20]
 800c766:	3201      	adds	r2, #1
 800c768:	e7b0      	b.n	800c6cc <_strtod_l+0x1ec>
 800c76a:	2400      	movs	r4, #0
 800c76c:	9b07      	ldr	r3, [sp, #28]
 800c76e:	3302      	adds	r3, #2
 800c770:	931b      	str	r3, [sp, #108]	; 0x6c
 800c772:	9b07      	ldr	r3, [sp, #28]
 800c774:	789b      	ldrb	r3, [r3, #2]
 800c776:	001a      	movs	r2, r3
 800c778:	3a30      	subs	r2, #48	; 0x30
 800c77a:	2a09      	cmp	r2, #9
 800c77c:	d914      	bls.n	800c7a8 <_strtod_l+0x2c8>
 800c77e:	9a07      	ldr	r2, [sp, #28]
 800c780:	921b      	str	r2, [sp, #108]	; 0x6c
 800c782:	2200      	movs	r2, #0
 800c784:	e033      	b.n	800c7ee <_strtod_l+0x30e>
 800c786:	46c0      	nop			; (mov r8, r8)
 800c788:	08011408 	.word	0x08011408
 800c78c:	7ff00000 	.word	0x7ff00000
 800c790:	ffefffff 	.word	0xffefffff
 800c794:	00000433 	.word	0x00000433
 800c798:	7fffffff 	.word	0x7fffffff
 800c79c:	08011404 	.word	0x08011404
 800c7a0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7a2:	1c5a      	adds	r2, r3, #1
 800c7a4:	921b      	str	r2, [sp, #108]	; 0x6c
 800c7a6:	785b      	ldrb	r3, [r3, #1]
 800c7a8:	2b30      	cmp	r3, #48	; 0x30
 800c7aa:	d0f9      	beq.n	800c7a0 <_strtod_l+0x2c0>
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	9206      	str	r2, [sp, #24]
 800c7b0:	001a      	movs	r2, r3
 800c7b2:	3a31      	subs	r2, #49	; 0x31
 800c7b4:	2a08      	cmp	r2, #8
 800c7b6:	d81b      	bhi.n	800c7f0 <_strtod_l+0x310>
 800c7b8:	3b30      	subs	r3, #48	; 0x30
 800c7ba:	930e      	str	r3, [sp, #56]	; 0x38
 800c7bc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7be:	9306      	str	r3, [sp, #24]
 800c7c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c7c2:	1c59      	adds	r1, r3, #1
 800c7c4:	911b      	str	r1, [sp, #108]	; 0x6c
 800c7c6:	785b      	ldrb	r3, [r3, #1]
 800c7c8:	001a      	movs	r2, r3
 800c7ca:	3a30      	subs	r2, #48	; 0x30
 800c7cc:	2a09      	cmp	r2, #9
 800c7ce:	d93a      	bls.n	800c846 <_strtod_l+0x366>
 800c7d0:	9a06      	ldr	r2, [sp, #24]
 800c7d2:	1a8a      	subs	r2, r1, r2
 800c7d4:	49b2      	ldr	r1, [pc, #712]	; (800caa0 <_strtod_l+0x5c0>)
 800c7d6:	9106      	str	r1, [sp, #24]
 800c7d8:	2a08      	cmp	r2, #8
 800c7da:	dc04      	bgt.n	800c7e6 <_strtod_l+0x306>
 800c7dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c7de:	9206      	str	r2, [sp, #24]
 800c7e0:	428a      	cmp	r2, r1
 800c7e2:	dd00      	ble.n	800c7e6 <_strtod_l+0x306>
 800c7e4:	9106      	str	r1, [sp, #24]
 800c7e6:	2c00      	cmp	r4, #0
 800c7e8:	d002      	beq.n	800c7f0 <_strtod_l+0x310>
 800c7ea:	9a06      	ldr	r2, [sp, #24]
 800c7ec:	4252      	negs	r2, r2
 800c7ee:	9206      	str	r2, [sp, #24]
 800c7f0:	9a05      	ldr	r2, [sp, #20]
 800c7f2:	2a00      	cmp	r2, #0
 800c7f4:	d14d      	bne.n	800c892 <_strtod_l+0x3b2>
 800c7f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c7f8:	4310      	orrs	r0, r2
 800c7fa:	d000      	beq.n	800c7fe <_strtod_l+0x31e>
 800c7fc:	e6ab      	b.n	800c556 <_strtod_l+0x76>
 800c7fe:	4662      	mov	r2, ip
 800c800:	2a00      	cmp	r2, #0
 800c802:	d000      	beq.n	800c806 <_strtod_l+0x326>
 800c804:	e6c5      	b.n	800c592 <_strtod_l+0xb2>
 800c806:	2b69      	cmp	r3, #105	; 0x69
 800c808:	d027      	beq.n	800c85a <_strtod_l+0x37a>
 800c80a:	dc23      	bgt.n	800c854 <_strtod_l+0x374>
 800c80c:	2b49      	cmp	r3, #73	; 0x49
 800c80e:	d024      	beq.n	800c85a <_strtod_l+0x37a>
 800c810:	2b4e      	cmp	r3, #78	; 0x4e
 800c812:	d000      	beq.n	800c816 <_strtod_l+0x336>
 800c814:	e6bd      	b.n	800c592 <_strtod_l+0xb2>
 800c816:	49a3      	ldr	r1, [pc, #652]	; (800caa4 <_strtod_l+0x5c4>)
 800c818:	a81b      	add	r0, sp, #108	; 0x6c
 800c81a:	f002 fdd9 	bl	800f3d0 <__match>
 800c81e:	2800      	cmp	r0, #0
 800c820:	d100      	bne.n	800c824 <_strtod_l+0x344>
 800c822:	e6b6      	b.n	800c592 <_strtod_l+0xb2>
 800c824:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	2b28      	cmp	r3, #40	; 0x28
 800c82a:	d12c      	bne.n	800c886 <_strtod_l+0x3a6>
 800c82c:	499e      	ldr	r1, [pc, #632]	; (800caa8 <_strtod_l+0x5c8>)
 800c82e:	aa1e      	add	r2, sp, #120	; 0x78
 800c830:	a81b      	add	r0, sp, #108	; 0x6c
 800c832:	f002 fde1 	bl	800f3f8 <__hexnan>
 800c836:	2805      	cmp	r0, #5
 800c838:	d125      	bne.n	800c886 <_strtod_l+0x3a6>
 800c83a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800c83c:	4a9b      	ldr	r2, [pc, #620]	; (800caac <_strtod_l+0x5cc>)
 800c83e:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800c840:	431a      	orrs	r2, r3
 800c842:	0017      	movs	r7, r2
 800c844:	e687      	b.n	800c556 <_strtod_l+0x76>
 800c846:	220a      	movs	r2, #10
 800c848:	990e      	ldr	r1, [sp, #56]	; 0x38
 800c84a:	434a      	muls	r2, r1
 800c84c:	18d2      	adds	r2, r2, r3
 800c84e:	3a30      	subs	r2, #48	; 0x30
 800c850:	920e      	str	r2, [sp, #56]	; 0x38
 800c852:	e7b5      	b.n	800c7c0 <_strtod_l+0x2e0>
 800c854:	2b6e      	cmp	r3, #110	; 0x6e
 800c856:	d0de      	beq.n	800c816 <_strtod_l+0x336>
 800c858:	e69b      	b.n	800c592 <_strtod_l+0xb2>
 800c85a:	4995      	ldr	r1, [pc, #596]	; (800cab0 <_strtod_l+0x5d0>)
 800c85c:	a81b      	add	r0, sp, #108	; 0x6c
 800c85e:	f002 fdb7 	bl	800f3d0 <__match>
 800c862:	2800      	cmp	r0, #0
 800c864:	d100      	bne.n	800c868 <_strtod_l+0x388>
 800c866:	e694      	b.n	800c592 <_strtod_l+0xb2>
 800c868:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c86a:	4992      	ldr	r1, [pc, #584]	; (800cab4 <_strtod_l+0x5d4>)
 800c86c:	3b01      	subs	r3, #1
 800c86e:	a81b      	add	r0, sp, #108	; 0x6c
 800c870:	931b      	str	r3, [sp, #108]	; 0x6c
 800c872:	f002 fdad 	bl	800f3d0 <__match>
 800c876:	2800      	cmp	r0, #0
 800c878:	d102      	bne.n	800c880 <_strtod_l+0x3a0>
 800c87a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800c87c:	3301      	adds	r3, #1
 800c87e:	931b      	str	r3, [sp, #108]	; 0x6c
 800c880:	2600      	movs	r6, #0
 800c882:	4f8a      	ldr	r7, [pc, #552]	; (800caac <_strtod_l+0x5cc>)
 800c884:	e667      	b.n	800c556 <_strtod_l+0x76>
 800c886:	488c      	ldr	r0, [pc, #560]	; (800cab8 <_strtod_l+0x5d8>)
 800c888:	f001 fbf6 	bl	800e078 <nan>
 800c88c:	0006      	movs	r6, r0
 800c88e:	000f      	movs	r7, r1
 800c890:	e661      	b.n	800c556 <_strtod_l+0x76>
 800c892:	9b06      	ldr	r3, [sp, #24]
 800c894:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c896:	1a9b      	subs	r3, r3, r2
 800c898:	9309      	str	r3, [sp, #36]	; 0x24
 800c89a:	9b08      	ldr	r3, [sp, #32]
 800c89c:	2b00      	cmp	r3, #0
 800c89e:	d101      	bne.n	800c8a4 <_strtod_l+0x3c4>
 800c8a0:	9b05      	ldr	r3, [sp, #20]
 800c8a2:	9308      	str	r3, [sp, #32]
 800c8a4:	9c05      	ldr	r4, [sp, #20]
 800c8a6:	2c10      	cmp	r4, #16
 800c8a8:	dd00      	ble.n	800c8ac <_strtod_l+0x3cc>
 800c8aa:	2410      	movs	r4, #16
 800c8ac:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c8ae:	f7f5 fd99 	bl	80023e4 <__aeabi_ui2d>
 800c8b2:	9b05      	ldr	r3, [sp, #20]
 800c8b4:	0006      	movs	r6, r0
 800c8b6:	000f      	movs	r7, r1
 800c8b8:	2b09      	cmp	r3, #9
 800c8ba:	dd15      	ble.n	800c8e8 <_strtod_l+0x408>
 800c8bc:	0022      	movs	r2, r4
 800c8be:	4b7f      	ldr	r3, [pc, #508]	; (800cabc <_strtod_l+0x5dc>)
 800c8c0:	3a09      	subs	r2, #9
 800c8c2:	00d2      	lsls	r2, r2, #3
 800c8c4:	189b      	adds	r3, r3, r2
 800c8c6:	681a      	ldr	r2, [r3, #0]
 800c8c8:	685b      	ldr	r3, [r3, #4]
 800c8ca:	f7f4 fec3 	bl	8001654 <__aeabi_dmul>
 800c8ce:	0006      	movs	r6, r0
 800c8d0:	0028      	movs	r0, r5
 800c8d2:	000f      	movs	r7, r1
 800c8d4:	f7f5 fd86 	bl	80023e4 <__aeabi_ui2d>
 800c8d8:	0002      	movs	r2, r0
 800c8da:	000b      	movs	r3, r1
 800c8dc:	0030      	movs	r0, r6
 800c8de:	0039      	movs	r1, r7
 800c8e0:	f7f3 ff5e 	bl	80007a0 <__aeabi_dadd>
 800c8e4:	0006      	movs	r6, r0
 800c8e6:	000f      	movs	r7, r1
 800c8e8:	9b05      	ldr	r3, [sp, #20]
 800c8ea:	2b0f      	cmp	r3, #15
 800c8ec:	dc39      	bgt.n	800c962 <_strtod_l+0x482>
 800c8ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d100      	bne.n	800c8f6 <_strtod_l+0x416>
 800c8f4:	e62f      	b.n	800c556 <_strtod_l+0x76>
 800c8f6:	dd24      	ble.n	800c942 <_strtod_l+0x462>
 800c8f8:	2b16      	cmp	r3, #22
 800c8fa:	dc09      	bgt.n	800c910 <_strtod_l+0x430>
 800c8fc:	496f      	ldr	r1, [pc, #444]	; (800cabc <_strtod_l+0x5dc>)
 800c8fe:	00db      	lsls	r3, r3, #3
 800c900:	18c9      	adds	r1, r1, r3
 800c902:	0032      	movs	r2, r6
 800c904:	6808      	ldr	r0, [r1, #0]
 800c906:	6849      	ldr	r1, [r1, #4]
 800c908:	003b      	movs	r3, r7
 800c90a:	f7f4 fea3 	bl	8001654 <__aeabi_dmul>
 800c90e:	e7bd      	b.n	800c88c <_strtod_l+0x3ac>
 800c910:	2325      	movs	r3, #37	; 0x25
 800c912:	9a05      	ldr	r2, [sp, #20]
 800c914:	1a9b      	subs	r3, r3, r2
 800c916:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c918:	4293      	cmp	r3, r2
 800c91a:	db22      	blt.n	800c962 <_strtod_l+0x482>
 800c91c:	240f      	movs	r4, #15
 800c91e:	9b05      	ldr	r3, [sp, #20]
 800c920:	4d66      	ldr	r5, [pc, #408]	; (800cabc <_strtod_l+0x5dc>)
 800c922:	1ae4      	subs	r4, r4, r3
 800c924:	00e1      	lsls	r1, r4, #3
 800c926:	1869      	adds	r1, r5, r1
 800c928:	0032      	movs	r2, r6
 800c92a:	6808      	ldr	r0, [r1, #0]
 800c92c:	6849      	ldr	r1, [r1, #4]
 800c92e:	003b      	movs	r3, r7
 800c930:	f7f4 fe90 	bl	8001654 <__aeabi_dmul>
 800c934:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c936:	1b1c      	subs	r4, r3, r4
 800c938:	00e4      	lsls	r4, r4, #3
 800c93a:	192d      	adds	r5, r5, r4
 800c93c:	682a      	ldr	r2, [r5, #0]
 800c93e:	686b      	ldr	r3, [r5, #4]
 800c940:	e7e3      	b.n	800c90a <_strtod_l+0x42a>
 800c942:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c944:	3316      	adds	r3, #22
 800c946:	db0c      	blt.n	800c962 <_strtod_l+0x482>
 800c948:	9906      	ldr	r1, [sp, #24]
 800c94a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800c94c:	4b5b      	ldr	r3, [pc, #364]	; (800cabc <_strtod_l+0x5dc>)
 800c94e:	1a52      	subs	r2, r2, r1
 800c950:	00d2      	lsls	r2, r2, #3
 800c952:	189b      	adds	r3, r3, r2
 800c954:	0030      	movs	r0, r6
 800c956:	681a      	ldr	r2, [r3, #0]
 800c958:	685b      	ldr	r3, [r3, #4]
 800c95a:	0039      	movs	r1, r7
 800c95c:	f7f4 fa80 	bl	8000e60 <__aeabi_ddiv>
 800c960:	e794      	b.n	800c88c <_strtod_l+0x3ac>
 800c962:	9b05      	ldr	r3, [sp, #20]
 800c964:	1b1c      	subs	r4, r3, r4
 800c966:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c968:	18e4      	adds	r4, r4, r3
 800c96a:	2c00      	cmp	r4, #0
 800c96c:	dd72      	ble.n	800ca54 <_strtod_l+0x574>
 800c96e:	220f      	movs	r2, #15
 800c970:	0023      	movs	r3, r4
 800c972:	4013      	ands	r3, r2
 800c974:	4214      	tst	r4, r2
 800c976:	d00a      	beq.n	800c98e <_strtod_l+0x4ae>
 800c978:	4950      	ldr	r1, [pc, #320]	; (800cabc <_strtod_l+0x5dc>)
 800c97a:	00db      	lsls	r3, r3, #3
 800c97c:	18c9      	adds	r1, r1, r3
 800c97e:	0032      	movs	r2, r6
 800c980:	6808      	ldr	r0, [r1, #0]
 800c982:	6849      	ldr	r1, [r1, #4]
 800c984:	003b      	movs	r3, r7
 800c986:	f7f4 fe65 	bl	8001654 <__aeabi_dmul>
 800c98a:	0006      	movs	r6, r0
 800c98c:	000f      	movs	r7, r1
 800c98e:	230f      	movs	r3, #15
 800c990:	439c      	bics	r4, r3
 800c992:	d04a      	beq.n	800ca2a <_strtod_l+0x54a>
 800c994:	3326      	adds	r3, #38	; 0x26
 800c996:	33ff      	adds	r3, #255	; 0xff
 800c998:	429c      	cmp	r4, r3
 800c99a:	dd22      	ble.n	800c9e2 <_strtod_l+0x502>
 800c99c:	2300      	movs	r3, #0
 800c99e:	9305      	str	r3, [sp, #20]
 800c9a0:	9306      	str	r3, [sp, #24]
 800c9a2:	930d      	str	r3, [sp, #52]	; 0x34
 800c9a4:	9308      	str	r3, [sp, #32]
 800c9a6:	2322      	movs	r3, #34	; 0x22
 800c9a8:	2600      	movs	r6, #0
 800c9aa:	9a04      	ldr	r2, [sp, #16]
 800c9ac:	4f3f      	ldr	r7, [pc, #252]	; (800caac <_strtod_l+0x5cc>)
 800c9ae:	6013      	str	r3, [r2, #0]
 800c9b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c9b2:	42b3      	cmp	r3, r6
 800c9b4:	d100      	bne.n	800c9b8 <_strtod_l+0x4d8>
 800c9b6:	e5ce      	b.n	800c556 <_strtod_l+0x76>
 800c9b8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800c9ba:	9804      	ldr	r0, [sp, #16]
 800c9bc:	f002 fe1a 	bl	800f5f4 <_Bfree>
 800c9c0:	9908      	ldr	r1, [sp, #32]
 800c9c2:	9804      	ldr	r0, [sp, #16]
 800c9c4:	f002 fe16 	bl	800f5f4 <_Bfree>
 800c9c8:	9906      	ldr	r1, [sp, #24]
 800c9ca:	9804      	ldr	r0, [sp, #16]
 800c9cc:	f002 fe12 	bl	800f5f4 <_Bfree>
 800c9d0:	990d      	ldr	r1, [sp, #52]	; 0x34
 800c9d2:	9804      	ldr	r0, [sp, #16]
 800c9d4:	f002 fe0e 	bl	800f5f4 <_Bfree>
 800c9d8:	9905      	ldr	r1, [sp, #20]
 800c9da:	9804      	ldr	r0, [sp, #16]
 800c9dc:	f002 fe0a 	bl	800f5f4 <_Bfree>
 800c9e0:	e5b9      	b.n	800c556 <_strtod_l+0x76>
 800c9e2:	2300      	movs	r3, #0
 800c9e4:	0030      	movs	r0, r6
 800c9e6:	0039      	movs	r1, r7
 800c9e8:	4d35      	ldr	r5, [pc, #212]	; (800cac0 <_strtod_l+0x5e0>)
 800c9ea:	1124      	asrs	r4, r4, #4
 800c9ec:	9307      	str	r3, [sp, #28]
 800c9ee:	2c01      	cmp	r4, #1
 800c9f0:	dc1e      	bgt.n	800ca30 <_strtod_l+0x550>
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d001      	beq.n	800c9fa <_strtod_l+0x51a>
 800c9f6:	0006      	movs	r6, r0
 800c9f8:	000f      	movs	r7, r1
 800c9fa:	4b32      	ldr	r3, [pc, #200]	; (800cac4 <_strtod_l+0x5e4>)
 800c9fc:	9a07      	ldr	r2, [sp, #28]
 800c9fe:	18ff      	adds	r7, r7, r3
 800ca00:	4b2f      	ldr	r3, [pc, #188]	; (800cac0 <_strtod_l+0x5e0>)
 800ca02:	00d2      	lsls	r2, r2, #3
 800ca04:	189d      	adds	r5, r3, r2
 800ca06:	6828      	ldr	r0, [r5, #0]
 800ca08:	6869      	ldr	r1, [r5, #4]
 800ca0a:	0032      	movs	r2, r6
 800ca0c:	003b      	movs	r3, r7
 800ca0e:	f7f4 fe21 	bl	8001654 <__aeabi_dmul>
 800ca12:	4b26      	ldr	r3, [pc, #152]	; (800caac <_strtod_l+0x5cc>)
 800ca14:	4a2c      	ldr	r2, [pc, #176]	; (800cac8 <_strtod_l+0x5e8>)
 800ca16:	0006      	movs	r6, r0
 800ca18:	400b      	ands	r3, r1
 800ca1a:	4293      	cmp	r3, r2
 800ca1c:	d8be      	bhi.n	800c99c <_strtod_l+0x4bc>
 800ca1e:	4a2b      	ldr	r2, [pc, #172]	; (800cacc <_strtod_l+0x5ec>)
 800ca20:	4293      	cmp	r3, r2
 800ca22:	d913      	bls.n	800ca4c <_strtod_l+0x56c>
 800ca24:	2601      	movs	r6, #1
 800ca26:	4f2a      	ldr	r7, [pc, #168]	; (800cad0 <_strtod_l+0x5f0>)
 800ca28:	4276      	negs	r6, r6
 800ca2a:	2300      	movs	r3, #0
 800ca2c:	9307      	str	r3, [sp, #28]
 800ca2e:	e088      	b.n	800cb42 <_strtod_l+0x662>
 800ca30:	2201      	movs	r2, #1
 800ca32:	4214      	tst	r4, r2
 800ca34:	d004      	beq.n	800ca40 <_strtod_l+0x560>
 800ca36:	682a      	ldr	r2, [r5, #0]
 800ca38:	686b      	ldr	r3, [r5, #4]
 800ca3a:	f7f4 fe0b 	bl	8001654 <__aeabi_dmul>
 800ca3e:	2301      	movs	r3, #1
 800ca40:	9a07      	ldr	r2, [sp, #28]
 800ca42:	1064      	asrs	r4, r4, #1
 800ca44:	3201      	adds	r2, #1
 800ca46:	9207      	str	r2, [sp, #28]
 800ca48:	3508      	adds	r5, #8
 800ca4a:	e7d0      	b.n	800c9ee <_strtod_l+0x50e>
 800ca4c:	23d4      	movs	r3, #212	; 0xd4
 800ca4e:	049b      	lsls	r3, r3, #18
 800ca50:	18cf      	adds	r7, r1, r3
 800ca52:	e7ea      	b.n	800ca2a <_strtod_l+0x54a>
 800ca54:	2c00      	cmp	r4, #0
 800ca56:	d0e8      	beq.n	800ca2a <_strtod_l+0x54a>
 800ca58:	4264      	negs	r4, r4
 800ca5a:	230f      	movs	r3, #15
 800ca5c:	0022      	movs	r2, r4
 800ca5e:	401a      	ands	r2, r3
 800ca60:	421c      	tst	r4, r3
 800ca62:	d00a      	beq.n	800ca7a <_strtod_l+0x59a>
 800ca64:	4b15      	ldr	r3, [pc, #84]	; (800cabc <_strtod_l+0x5dc>)
 800ca66:	00d2      	lsls	r2, r2, #3
 800ca68:	189b      	adds	r3, r3, r2
 800ca6a:	0030      	movs	r0, r6
 800ca6c:	681a      	ldr	r2, [r3, #0]
 800ca6e:	685b      	ldr	r3, [r3, #4]
 800ca70:	0039      	movs	r1, r7
 800ca72:	f7f4 f9f5 	bl	8000e60 <__aeabi_ddiv>
 800ca76:	0006      	movs	r6, r0
 800ca78:	000f      	movs	r7, r1
 800ca7a:	1124      	asrs	r4, r4, #4
 800ca7c:	d0d5      	beq.n	800ca2a <_strtod_l+0x54a>
 800ca7e:	2c1f      	cmp	r4, #31
 800ca80:	dd28      	ble.n	800cad4 <_strtod_l+0x5f4>
 800ca82:	2300      	movs	r3, #0
 800ca84:	9305      	str	r3, [sp, #20]
 800ca86:	9306      	str	r3, [sp, #24]
 800ca88:	930d      	str	r3, [sp, #52]	; 0x34
 800ca8a:	9308      	str	r3, [sp, #32]
 800ca8c:	2322      	movs	r3, #34	; 0x22
 800ca8e:	9a04      	ldr	r2, [sp, #16]
 800ca90:	2600      	movs	r6, #0
 800ca92:	6013      	str	r3, [r2, #0]
 800ca94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ca96:	2700      	movs	r7, #0
 800ca98:	2b00      	cmp	r3, #0
 800ca9a:	d18d      	bne.n	800c9b8 <_strtod_l+0x4d8>
 800ca9c:	e55b      	b.n	800c556 <_strtod_l+0x76>
 800ca9e:	46c0      	nop			; (mov r8, r8)
 800caa0:	00004e1f 	.word	0x00004e1f
 800caa4:	08011566 	.word	0x08011566
 800caa8:	0801141c 	.word	0x0801141c
 800caac:	7ff00000 	.word	0x7ff00000
 800cab0:	0801155e 	.word	0x0801155e
 800cab4:	08011645 	.word	0x08011645
 800cab8:	08011641 	.word	0x08011641
 800cabc:	080117a0 	.word	0x080117a0
 800cac0:	08011778 	.word	0x08011778
 800cac4:	fcb00000 	.word	0xfcb00000
 800cac8:	7ca00000 	.word	0x7ca00000
 800cacc:	7c900000 	.word	0x7c900000
 800cad0:	7fefffff 	.word	0x7fefffff
 800cad4:	2310      	movs	r3, #16
 800cad6:	0022      	movs	r2, r4
 800cad8:	401a      	ands	r2, r3
 800cada:	9207      	str	r2, [sp, #28]
 800cadc:	421c      	tst	r4, r3
 800cade:	d001      	beq.n	800cae4 <_strtod_l+0x604>
 800cae0:	335a      	adds	r3, #90	; 0x5a
 800cae2:	9307      	str	r3, [sp, #28]
 800cae4:	0030      	movs	r0, r6
 800cae6:	0039      	movs	r1, r7
 800cae8:	2300      	movs	r3, #0
 800caea:	4dc4      	ldr	r5, [pc, #784]	; (800cdfc <_strtod_l+0x91c>)
 800caec:	2201      	movs	r2, #1
 800caee:	4214      	tst	r4, r2
 800caf0:	d004      	beq.n	800cafc <_strtod_l+0x61c>
 800caf2:	682a      	ldr	r2, [r5, #0]
 800caf4:	686b      	ldr	r3, [r5, #4]
 800caf6:	f7f4 fdad 	bl	8001654 <__aeabi_dmul>
 800cafa:	2301      	movs	r3, #1
 800cafc:	1064      	asrs	r4, r4, #1
 800cafe:	3508      	adds	r5, #8
 800cb00:	2c00      	cmp	r4, #0
 800cb02:	d1f3      	bne.n	800caec <_strtod_l+0x60c>
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d001      	beq.n	800cb0c <_strtod_l+0x62c>
 800cb08:	0006      	movs	r6, r0
 800cb0a:	000f      	movs	r7, r1
 800cb0c:	9b07      	ldr	r3, [sp, #28]
 800cb0e:	2b00      	cmp	r3, #0
 800cb10:	d00f      	beq.n	800cb32 <_strtod_l+0x652>
 800cb12:	236b      	movs	r3, #107	; 0x6b
 800cb14:	007a      	lsls	r2, r7, #1
 800cb16:	0d52      	lsrs	r2, r2, #21
 800cb18:	0039      	movs	r1, r7
 800cb1a:	1a9b      	subs	r3, r3, r2
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	dd08      	ble.n	800cb32 <_strtod_l+0x652>
 800cb20:	2b1f      	cmp	r3, #31
 800cb22:	dc00      	bgt.n	800cb26 <_strtod_l+0x646>
 800cb24:	e121      	b.n	800cd6a <_strtod_l+0x88a>
 800cb26:	2600      	movs	r6, #0
 800cb28:	2b34      	cmp	r3, #52	; 0x34
 800cb2a:	dc00      	bgt.n	800cb2e <_strtod_l+0x64e>
 800cb2c:	e116      	b.n	800cd5c <_strtod_l+0x87c>
 800cb2e:	27dc      	movs	r7, #220	; 0xdc
 800cb30:	04bf      	lsls	r7, r7, #18
 800cb32:	2200      	movs	r2, #0
 800cb34:	2300      	movs	r3, #0
 800cb36:	0030      	movs	r0, r6
 800cb38:	0039      	movs	r1, r7
 800cb3a:	f7f3 fc91 	bl	8000460 <__aeabi_dcmpeq>
 800cb3e:	2800      	cmp	r0, #0
 800cb40:	d19f      	bne.n	800ca82 <_strtod_l+0x5a2>
 800cb42:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb44:	9a08      	ldr	r2, [sp, #32]
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	9910      	ldr	r1, [sp, #64]	; 0x40
 800cb4a:	9b05      	ldr	r3, [sp, #20]
 800cb4c:	9804      	ldr	r0, [sp, #16]
 800cb4e:	f002 fdb9 	bl	800f6c4 <__s2b>
 800cb52:	900d      	str	r0, [sp, #52]	; 0x34
 800cb54:	2800      	cmp	r0, #0
 800cb56:	d100      	bne.n	800cb5a <_strtod_l+0x67a>
 800cb58:	e720      	b.n	800c99c <_strtod_l+0x4bc>
 800cb5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb5c:	9906      	ldr	r1, [sp, #24]
 800cb5e:	17da      	asrs	r2, r3, #31
 800cb60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cb62:	1a5b      	subs	r3, r3, r1
 800cb64:	401a      	ands	r2, r3
 800cb66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cb68:	9215      	str	r2, [sp, #84]	; 0x54
 800cb6a:	43db      	mvns	r3, r3
 800cb6c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cb6e:	17db      	asrs	r3, r3, #31
 800cb70:	401a      	ands	r2, r3
 800cb72:	2300      	movs	r3, #0
 800cb74:	9218      	str	r2, [sp, #96]	; 0x60
 800cb76:	9305      	str	r3, [sp, #20]
 800cb78:	9306      	str	r3, [sp, #24]
 800cb7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb7c:	9804      	ldr	r0, [sp, #16]
 800cb7e:	6859      	ldr	r1, [r3, #4]
 800cb80:	f002 fcf4 	bl	800f56c <_Balloc>
 800cb84:	9008      	str	r0, [sp, #32]
 800cb86:	2800      	cmp	r0, #0
 800cb88:	d100      	bne.n	800cb8c <_strtod_l+0x6ac>
 800cb8a:	e70c      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cb8c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cb8e:	300c      	adds	r0, #12
 800cb90:	0019      	movs	r1, r3
 800cb92:	691a      	ldr	r2, [r3, #16]
 800cb94:	310c      	adds	r1, #12
 800cb96:	3202      	adds	r2, #2
 800cb98:	0092      	lsls	r2, r2, #2
 800cb9a:	f001 fa63 	bl	800e064 <memcpy>
 800cb9e:	ab1e      	add	r3, sp, #120	; 0x78
 800cba0:	9301      	str	r3, [sp, #4]
 800cba2:	ab1d      	add	r3, sp, #116	; 0x74
 800cba4:	9300      	str	r3, [sp, #0]
 800cba6:	0032      	movs	r2, r6
 800cba8:	003b      	movs	r3, r7
 800cbaa:	9804      	ldr	r0, [sp, #16]
 800cbac:	9610      	str	r6, [sp, #64]	; 0x40
 800cbae:	9711      	str	r7, [sp, #68]	; 0x44
 800cbb0:	f003 f8ca 	bl	800fd48 <__d2b>
 800cbb4:	901c      	str	r0, [sp, #112]	; 0x70
 800cbb6:	2800      	cmp	r0, #0
 800cbb8:	d100      	bne.n	800cbbc <_strtod_l+0x6dc>
 800cbba:	e6f4      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cbbc:	2101      	movs	r1, #1
 800cbbe:	9804      	ldr	r0, [sp, #16]
 800cbc0:	f002 fe14 	bl	800f7ec <__i2b>
 800cbc4:	9006      	str	r0, [sp, #24]
 800cbc6:	2800      	cmp	r0, #0
 800cbc8:	d100      	bne.n	800cbcc <_strtod_l+0x6ec>
 800cbca:	e6ec      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cbcc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800cbce:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cbd0:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800cbd2:	1ad4      	subs	r4, r2, r3
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	db01      	blt.n	800cbdc <_strtod_l+0x6fc>
 800cbd8:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800cbda:	195d      	adds	r5, r3, r5
 800cbdc:	9907      	ldr	r1, [sp, #28]
 800cbde:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800cbe0:	1a5b      	subs	r3, r3, r1
 800cbe2:	2136      	movs	r1, #54	; 0x36
 800cbe4:	189b      	adds	r3, r3, r2
 800cbe6:	1a8a      	subs	r2, r1, r2
 800cbe8:	4985      	ldr	r1, [pc, #532]	; (800ce00 <_strtod_l+0x920>)
 800cbea:	2001      	movs	r0, #1
 800cbec:	468c      	mov	ip, r1
 800cbee:	2100      	movs	r1, #0
 800cbf0:	3b01      	subs	r3, #1
 800cbf2:	9114      	str	r1, [sp, #80]	; 0x50
 800cbf4:	9012      	str	r0, [sp, #72]	; 0x48
 800cbf6:	4563      	cmp	r3, ip
 800cbf8:	da07      	bge.n	800cc0a <_strtod_l+0x72a>
 800cbfa:	4661      	mov	r1, ip
 800cbfc:	1ac9      	subs	r1, r1, r3
 800cbfe:	1a52      	subs	r2, r2, r1
 800cc00:	291f      	cmp	r1, #31
 800cc02:	dd00      	ble.n	800cc06 <_strtod_l+0x726>
 800cc04:	e0b6      	b.n	800cd74 <_strtod_l+0x894>
 800cc06:	4088      	lsls	r0, r1
 800cc08:	9012      	str	r0, [sp, #72]	; 0x48
 800cc0a:	18ab      	adds	r3, r5, r2
 800cc0c:	930c      	str	r3, [sp, #48]	; 0x30
 800cc0e:	18a4      	adds	r4, r4, r2
 800cc10:	9b07      	ldr	r3, [sp, #28]
 800cc12:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc14:	191c      	adds	r4, r3, r4
 800cc16:	002b      	movs	r3, r5
 800cc18:	4295      	cmp	r5, r2
 800cc1a:	dd00      	ble.n	800cc1e <_strtod_l+0x73e>
 800cc1c:	0013      	movs	r3, r2
 800cc1e:	42a3      	cmp	r3, r4
 800cc20:	dd00      	ble.n	800cc24 <_strtod_l+0x744>
 800cc22:	0023      	movs	r3, r4
 800cc24:	2b00      	cmp	r3, #0
 800cc26:	dd04      	ble.n	800cc32 <_strtod_l+0x752>
 800cc28:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cc2a:	1ae4      	subs	r4, r4, r3
 800cc2c:	1ad2      	subs	r2, r2, r3
 800cc2e:	920c      	str	r2, [sp, #48]	; 0x30
 800cc30:	1aed      	subs	r5, r5, r3
 800cc32:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	dd17      	ble.n	800cc68 <_strtod_l+0x788>
 800cc38:	001a      	movs	r2, r3
 800cc3a:	9906      	ldr	r1, [sp, #24]
 800cc3c:	9804      	ldr	r0, [sp, #16]
 800cc3e:	f002 fe9d 	bl	800f97c <__pow5mult>
 800cc42:	9006      	str	r0, [sp, #24]
 800cc44:	2800      	cmp	r0, #0
 800cc46:	d100      	bne.n	800cc4a <_strtod_l+0x76a>
 800cc48:	e6ad      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cc4a:	0001      	movs	r1, r0
 800cc4c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800cc4e:	9804      	ldr	r0, [sp, #16]
 800cc50:	f002 fde4 	bl	800f81c <__multiply>
 800cc54:	900e      	str	r0, [sp, #56]	; 0x38
 800cc56:	2800      	cmp	r0, #0
 800cc58:	d100      	bne.n	800cc5c <_strtod_l+0x77c>
 800cc5a:	e6a4      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cc5c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cc5e:	9804      	ldr	r0, [sp, #16]
 800cc60:	f002 fcc8 	bl	800f5f4 <_Bfree>
 800cc64:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cc66:	931c      	str	r3, [sp, #112]	; 0x70
 800cc68:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	dd00      	ble.n	800cc70 <_strtod_l+0x790>
 800cc6e:	e087      	b.n	800cd80 <_strtod_l+0x8a0>
 800cc70:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc72:	2b00      	cmp	r3, #0
 800cc74:	dd08      	ble.n	800cc88 <_strtod_l+0x7a8>
 800cc76:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800cc78:	9908      	ldr	r1, [sp, #32]
 800cc7a:	9804      	ldr	r0, [sp, #16]
 800cc7c:	f002 fe7e 	bl	800f97c <__pow5mult>
 800cc80:	9008      	str	r0, [sp, #32]
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d100      	bne.n	800cc88 <_strtod_l+0x7a8>
 800cc86:	e68e      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cc88:	2c00      	cmp	r4, #0
 800cc8a:	dd08      	ble.n	800cc9e <_strtod_l+0x7be>
 800cc8c:	0022      	movs	r2, r4
 800cc8e:	9908      	ldr	r1, [sp, #32]
 800cc90:	9804      	ldr	r0, [sp, #16]
 800cc92:	f002 fecf 	bl	800fa34 <__lshift>
 800cc96:	9008      	str	r0, [sp, #32]
 800cc98:	2800      	cmp	r0, #0
 800cc9a:	d100      	bne.n	800cc9e <_strtod_l+0x7be>
 800cc9c:	e683      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cc9e:	2d00      	cmp	r5, #0
 800cca0:	dd08      	ble.n	800ccb4 <_strtod_l+0x7d4>
 800cca2:	002a      	movs	r2, r5
 800cca4:	9906      	ldr	r1, [sp, #24]
 800cca6:	9804      	ldr	r0, [sp, #16]
 800cca8:	f002 fec4 	bl	800fa34 <__lshift>
 800ccac:	9006      	str	r0, [sp, #24]
 800ccae:	2800      	cmp	r0, #0
 800ccb0:	d100      	bne.n	800ccb4 <_strtod_l+0x7d4>
 800ccb2:	e678      	b.n	800c9a6 <_strtod_l+0x4c6>
 800ccb4:	9a08      	ldr	r2, [sp, #32]
 800ccb6:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ccb8:	9804      	ldr	r0, [sp, #16]
 800ccba:	f002 ff45 	bl	800fb48 <__mdiff>
 800ccbe:	9005      	str	r0, [sp, #20]
 800ccc0:	2800      	cmp	r0, #0
 800ccc2:	d100      	bne.n	800ccc6 <_strtod_l+0x7e6>
 800ccc4:	e66f      	b.n	800c9a6 <_strtod_l+0x4c6>
 800ccc6:	2200      	movs	r2, #0
 800ccc8:	68c3      	ldr	r3, [r0, #12]
 800ccca:	9906      	ldr	r1, [sp, #24]
 800cccc:	60c2      	str	r2, [r0, #12]
 800ccce:	930c      	str	r3, [sp, #48]	; 0x30
 800ccd0:	f002 ff1e 	bl	800fb10 <__mcmp>
 800ccd4:	2800      	cmp	r0, #0
 800ccd6:	da5d      	bge.n	800cd94 <_strtod_l+0x8b4>
 800ccd8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ccda:	4333      	orrs	r3, r6
 800ccdc:	d000      	beq.n	800cce0 <_strtod_l+0x800>
 800ccde:	e088      	b.n	800cdf2 <_strtod_l+0x912>
 800cce0:	033b      	lsls	r3, r7, #12
 800cce2:	d000      	beq.n	800cce6 <_strtod_l+0x806>
 800cce4:	e085      	b.n	800cdf2 <_strtod_l+0x912>
 800cce6:	22d6      	movs	r2, #214	; 0xd6
 800cce8:	4b46      	ldr	r3, [pc, #280]	; (800ce04 <_strtod_l+0x924>)
 800ccea:	04d2      	lsls	r2, r2, #19
 800ccec:	403b      	ands	r3, r7
 800ccee:	4293      	cmp	r3, r2
 800ccf0:	d97f      	bls.n	800cdf2 <_strtod_l+0x912>
 800ccf2:	9b05      	ldr	r3, [sp, #20]
 800ccf4:	695b      	ldr	r3, [r3, #20]
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d103      	bne.n	800cd02 <_strtod_l+0x822>
 800ccfa:	9b05      	ldr	r3, [sp, #20]
 800ccfc:	691b      	ldr	r3, [r3, #16]
 800ccfe:	2b01      	cmp	r3, #1
 800cd00:	dd77      	ble.n	800cdf2 <_strtod_l+0x912>
 800cd02:	9905      	ldr	r1, [sp, #20]
 800cd04:	2201      	movs	r2, #1
 800cd06:	9804      	ldr	r0, [sp, #16]
 800cd08:	f002 fe94 	bl	800fa34 <__lshift>
 800cd0c:	9906      	ldr	r1, [sp, #24]
 800cd0e:	9005      	str	r0, [sp, #20]
 800cd10:	f002 fefe 	bl	800fb10 <__mcmp>
 800cd14:	2800      	cmp	r0, #0
 800cd16:	dd6c      	ble.n	800cdf2 <_strtod_l+0x912>
 800cd18:	9907      	ldr	r1, [sp, #28]
 800cd1a:	003b      	movs	r3, r7
 800cd1c:	4a39      	ldr	r2, [pc, #228]	; (800ce04 <_strtod_l+0x924>)
 800cd1e:	2900      	cmp	r1, #0
 800cd20:	d100      	bne.n	800cd24 <_strtod_l+0x844>
 800cd22:	e094      	b.n	800ce4e <_strtod_l+0x96e>
 800cd24:	0011      	movs	r1, r2
 800cd26:	20d6      	movs	r0, #214	; 0xd6
 800cd28:	4039      	ands	r1, r7
 800cd2a:	04c0      	lsls	r0, r0, #19
 800cd2c:	4281      	cmp	r1, r0
 800cd2e:	dd00      	ble.n	800cd32 <_strtod_l+0x852>
 800cd30:	e08d      	b.n	800ce4e <_strtod_l+0x96e>
 800cd32:	23dc      	movs	r3, #220	; 0xdc
 800cd34:	049b      	lsls	r3, r3, #18
 800cd36:	4299      	cmp	r1, r3
 800cd38:	dc00      	bgt.n	800cd3c <_strtod_l+0x85c>
 800cd3a:	e6a7      	b.n	800ca8c <_strtod_l+0x5ac>
 800cd3c:	0030      	movs	r0, r6
 800cd3e:	0039      	movs	r1, r7
 800cd40:	4b31      	ldr	r3, [pc, #196]	; (800ce08 <_strtod_l+0x928>)
 800cd42:	2200      	movs	r2, #0
 800cd44:	f7f4 fc86 	bl	8001654 <__aeabi_dmul>
 800cd48:	4b2e      	ldr	r3, [pc, #184]	; (800ce04 <_strtod_l+0x924>)
 800cd4a:	0006      	movs	r6, r0
 800cd4c:	000f      	movs	r7, r1
 800cd4e:	420b      	tst	r3, r1
 800cd50:	d000      	beq.n	800cd54 <_strtod_l+0x874>
 800cd52:	e631      	b.n	800c9b8 <_strtod_l+0x4d8>
 800cd54:	2322      	movs	r3, #34	; 0x22
 800cd56:	9a04      	ldr	r2, [sp, #16]
 800cd58:	6013      	str	r3, [r2, #0]
 800cd5a:	e62d      	b.n	800c9b8 <_strtod_l+0x4d8>
 800cd5c:	234b      	movs	r3, #75	; 0x4b
 800cd5e:	1a9a      	subs	r2, r3, r2
 800cd60:	3b4c      	subs	r3, #76	; 0x4c
 800cd62:	4093      	lsls	r3, r2
 800cd64:	4019      	ands	r1, r3
 800cd66:	000f      	movs	r7, r1
 800cd68:	e6e3      	b.n	800cb32 <_strtod_l+0x652>
 800cd6a:	2201      	movs	r2, #1
 800cd6c:	4252      	negs	r2, r2
 800cd6e:	409a      	lsls	r2, r3
 800cd70:	4016      	ands	r6, r2
 800cd72:	e6de      	b.n	800cb32 <_strtod_l+0x652>
 800cd74:	4925      	ldr	r1, [pc, #148]	; (800ce0c <_strtod_l+0x92c>)
 800cd76:	1acb      	subs	r3, r1, r3
 800cd78:	0001      	movs	r1, r0
 800cd7a:	4099      	lsls	r1, r3
 800cd7c:	9114      	str	r1, [sp, #80]	; 0x50
 800cd7e:	e743      	b.n	800cc08 <_strtod_l+0x728>
 800cd80:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd82:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cd84:	9804      	ldr	r0, [sp, #16]
 800cd86:	f002 fe55 	bl	800fa34 <__lshift>
 800cd8a:	901c      	str	r0, [sp, #112]	; 0x70
 800cd8c:	2800      	cmp	r0, #0
 800cd8e:	d000      	beq.n	800cd92 <_strtod_l+0x8b2>
 800cd90:	e76e      	b.n	800cc70 <_strtod_l+0x790>
 800cd92:	e608      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cd94:	970e      	str	r7, [sp, #56]	; 0x38
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d177      	bne.n	800ce8a <_strtod_l+0x9aa>
 800cd9a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cd9c:	033b      	lsls	r3, r7, #12
 800cd9e:	0b1b      	lsrs	r3, r3, #12
 800cda0:	2a00      	cmp	r2, #0
 800cda2:	d039      	beq.n	800ce18 <_strtod_l+0x938>
 800cda4:	4a1a      	ldr	r2, [pc, #104]	; (800ce10 <_strtod_l+0x930>)
 800cda6:	4293      	cmp	r3, r2
 800cda8:	d139      	bne.n	800ce1e <_strtod_l+0x93e>
 800cdaa:	2101      	movs	r1, #1
 800cdac:	9b07      	ldr	r3, [sp, #28]
 800cdae:	4249      	negs	r1, r1
 800cdb0:	0032      	movs	r2, r6
 800cdb2:	0008      	movs	r0, r1
 800cdb4:	2b00      	cmp	r3, #0
 800cdb6:	d00b      	beq.n	800cdd0 <_strtod_l+0x8f0>
 800cdb8:	24d4      	movs	r4, #212	; 0xd4
 800cdba:	4b12      	ldr	r3, [pc, #72]	; (800ce04 <_strtod_l+0x924>)
 800cdbc:	0008      	movs	r0, r1
 800cdbe:	403b      	ands	r3, r7
 800cdc0:	04e4      	lsls	r4, r4, #19
 800cdc2:	42a3      	cmp	r3, r4
 800cdc4:	d804      	bhi.n	800cdd0 <_strtod_l+0x8f0>
 800cdc6:	306c      	adds	r0, #108	; 0x6c
 800cdc8:	0d1b      	lsrs	r3, r3, #20
 800cdca:	1ac3      	subs	r3, r0, r3
 800cdcc:	4099      	lsls	r1, r3
 800cdce:	0008      	movs	r0, r1
 800cdd0:	4282      	cmp	r2, r0
 800cdd2:	d124      	bne.n	800ce1e <_strtod_l+0x93e>
 800cdd4:	4b0f      	ldr	r3, [pc, #60]	; (800ce14 <_strtod_l+0x934>)
 800cdd6:	990e      	ldr	r1, [sp, #56]	; 0x38
 800cdd8:	4299      	cmp	r1, r3
 800cdda:	d102      	bne.n	800cde2 <_strtod_l+0x902>
 800cddc:	3201      	adds	r2, #1
 800cdde:	d100      	bne.n	800cde2 <_strtod_l+0x902>
 800cde0:	e5e1      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cde2:	4b08      	ldr	r3, [pc, #32]	; (800ce04 <_strtod_l+0x924>)
 800cde4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cde6:	2600      	movs	r6, #0
 800cde8:	401a      	ands	r2, r3
 800cdea:	0013      	movs	r3, r2
 800cdec:	2280      	movs	r2, #128	; 0x80
 800cdee:	0352      	lsls	r2, r2, #13
 800cdf0:	189f      	adds	r7, r3, r2
 800cdf2:	9b07      	ldr	r3, [sp, #28]
 800cdf4:	2b00      	cmp	r3, #0
 800cdf6:	d1a1      	bne.n	800cd3c <_strtod_l+0x85c>
 800cdf8:	e5de      	b.n	800c9b8 <_strtod_l+0x4d8>
 800cdfa:	46c0      	nop			; (mov r8, r8)
 800cdfc:	08011430 	.word	0x08011430
 800ce00:	fffffc02 	.word	0xfffffc02
 800ce04:	7ff00000 	.word	0x7ff00000
 800ce08:	39500000 	.word	0x39500000
 800ce0c:	fffffbe2 	.word	0xfffffbe2
 800ce10:	000fffff 	.word	0x000fffff
 800ce14:	7fefffff 	.word	0x7fefffff
 800ce18:	4333      	orrs	r3, r6
 800ce1a:	d100      	bne.n	800ce1e <_strtod_l+0x93e>
 800ce1c:	e77c      	b.n	800cd18 <_strtod_l+0x838>
 800ce1e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ce20:	2b00      	cmp	r3, #0
 800ce22:	d01d      	beq.n	800ce60 <_strtod_l+0x980>
 800ce24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce26:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ce28:	4213      	tst	r3, r2
 800ce2a:	d0e2      	beq.n	800cdf2 <_strtod_l+0x912>
 800ce2c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ce2e:	0030      	movs	r0, r6
 800ce30:	0039      	movs	r1, r7
 800ce32:	9a07      	ldr	r2, [sp, #28]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d017      	beq.n	800ce68 <_strtod_l+0x988>
 800ce38:	f7ff fb3a 	bl	800c4b0 <sulp>
 800ce3c:	0002      	movs	r2, r0
 800ce3e:	000b      	movs	r3, r1
 800ce40:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce42:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce44:	f7f3 fcac 	bl	80007a0 <__aeabi_dadd>
 800ce48:	0006      	movs	r6, r0
 800ce4a:	000f      	movs	r7, r1
 800ce4c:	e7d1      	b.n	800cdf2 <_strtod_l+0x912>
 800ce4e:	2601      	movs	r6, #1
 800ce50:	4013      	ands	r3, r2
 800ce52:	4a98      	ldr	r2, [pc, #608]	; (800d0b4 <_strtod_l+0xbd4>)
 800ce54:	4276      	negs	r6, r6
 800ce56:	189b      	adds	r3, r3, r2
 800ce58:	4a97      	ldr	r2, [pc, #604]	; (800d0b8 <_strtod_l+0xbd8>)
 800ce5a:	431a      	orrs	r2, r3
 800ce5c:	0017      	movs	r7, r2
 800ce5e:	e7c8      	b.n	800cdf2 <_strtod_l+0x912>
 800ce60:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800ce62:	4233      	tst	r3, r6
 800ce64:	d0c5      	beq.n	800cdf2 <_strtod_l+0x912>
 800ce66:	e7e1      	b.n	800ce2c <_strtod_l+0x94c>
 800ce68:	f7ff fb22 	bl	800c4b0 <sulp>
 800ce6c:	0002      	movs	r2, r0
 800ce6e:	000b      	movs	r3, r1
 800ce70:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ce72:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ce74:	f7f4 feb0 	bl	8001bd8 <__aeabi_dsub>
 800ce78:	2200      	movs	r2, #0
 800ce7a:	2300      	movs	r3, #0
 800ce7c:	0006      	movs	r6, r0
 800ce7e:	000f      	movs	r7, r1
 800ce80:	f7f3 faee 	bl	8000460 <__aeabi_dcmpeq>
 800ce84:	2800      	cmp	r0, #0
 800ce86:	d0b4      	beq.n	800cdf2 <_strtod_l+0x912>
 800ce88:	e600      	b.n	800ca8c <_strtod_l+0x5ac>
 800ce8a:	9906      	ldr	r1, [sp, #24]
 800ce8c:	9805      	ldr	r0, [sp, #20]
 800ce8e:	f002 ffbb 	bl	800fe08 <__ratio>
 800ce92:	2380      	movs	r3, #128	; 0x80
 800ce94:	2200      	movs	r2, #0
 800ce96:	05db      	lsls	r3, r3, #23
 800ce98:	0004      	movs	r4, r0
 800ce9a:	000d      	movs	r5, r1
 800ce9c:	f7f3 faf0 	bl	8000480 <__aeabi_dcmple>
 800cea0:	2800      	cmp	r0, #0
 800cea2:	d06d      	beq.n	800cf80 <_strtod_l+0xaa0>
 800cea4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800cea6:	2b00      	cmp	r3, #0
 800cea8:	d000      	beq.n	800ceac <_strtod_l+0x9cc>
 800ceaa:	e07e      	b.n	800cfaa <_strtod_l+0xaca>
 800ceac:	2e00      	cmp	r6, #0
 800ceae:	d158      	bne.n	800cf62 <_strtod_l+0xa82>
 800ceb0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ceb2:	031b      	lsls	r3, r3, #12
 800ceb4:	d000      	beq.n	800ceb8 <_strtod_l+0x9d8>
 800ceb6:	e07f      	b.n	800cfb8 <_strtod_l+0xad8>
 800ceb8:	2200      	movs	r2, #0
 800ceba:	0020      	movs	r0, r4
 800cebc:	0029      	movs	r1, r5
 800cebe:	4b7f      	ldr	r3, [pc, #508]	; (800d0bc <_strtod_l+0xbdc>)
 800cec0:	f7f3 fad4 	bl	800046c <__aeabi_dcmplt>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d158      	bne.n	800cf7a <_strtod_l+0xa9a>
 800cec8:	0020      	movs	r0, r4
 800ceca:	0029      	movs	r1, r5
 800cecc:	2200      	movs	r2, #0
 800cece:	4b7c      	ldr	r3, [pc, #496]	; (800d0c0 <_strtod_l+0xbe0>)
 800ced0:	f7f4 fbc0 	bl	8001654 <__aeabi_dmul>
 800ced4:	0004      	movs	r4, r0
 800ced6:	000d      	movs	r5, r1
 800ced8:	2380      	movs	r3, #128	; 0x80
 800ceda:	061b      	lsls	r3, r3, #24
 800cedc:	940a      	str	r4, [sp, #40]	; 0x28
 800cede:	18eb      	adds	r3, r5, r3
 800cee0:	930b      	str	r3, [sp, #44]	; 0x2c
 800cee2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cee4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cee6:	9212      	str	r2, [sp, #72]	; 0x48
 800cee8:	9313      	str	r3, [sp, #76]	; 0x4c
 800ceea:	4a76      	ldr	r2, [pc, #472]	; (800d0c4 <_strtod_l+0xbe4>)
 800ceec:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ceee:	4013      	ands	r3, r2
 800cef0:	9314      	str	r3, [sp, #80]	; 0x50
 800cef2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cef4:	4b74      	ldr	r3, [pc, #464]	; (800d0c8 <_strtod_l+0xbe8>)
 800cef6:	429a      	cmp	r2, r3
 800cef8:	d000      	beq.n	800cefc <_strtod_l+0xa1c>
 800cefa:	e091      	b.n	800d020 <_strtod_l+0xb40>
 800cefc:	4a73      	ldr	r2, [pc, #460]	; (800d0cc <_strtod_l+0xbec>)
 800cefe:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf00:	4694      	mov	ip, r2
 800cf02:	4463      	add	r3, ip
 800cf04:	001f      	movs	r7, r3
 800cf06:	0030      	movs	r0, r6
 800cf08:	0019      	movs	r1, r3
 800cf0a:	f002 feb5 	bl	800fc78 <__ulp>
 800cf0e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800cf10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cf12:	f7f4 fb9f 	bl	8001654 <__aeabi_dmul>
 800cf16:	0032      	movs	r2, r6
 800cf18:	003b      	movs	r3, r7
 800cf1a:	f7f3 fc41 	bl	80007a0 <__aeabi_dadd>
 800cf1e:	4a69      	ldr	r2, [pc, #420]	; (800d0c4 <_strtod_l+0xbe4>)
 800cf20:	4b6b      	ldr	r3, [pc, #428]	; (800d0d0 <_strtod_l+0xbf0>)
 800cf22:	0006      	movs	r6, r0
 800cf24:	400a      	ands	r2, r1
 800cf26:	429a      	cmp	r2, r3
 800cf28:	d949      	bls.n	800cfbe <_strtod_l+0xade>
 800cf2a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800cf2c:	4b69      	ldr	r3, [pc, #420]	; (800d0d4 <_strtod_l+0xbf4>)
 800cf2e:	429a      	cmp	r2, r3
 800cf30:	d103      	bne.n	800cf3a <_strtod_l+0xa5a>
 800cf32:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cf34:	3301      	adds	r3, #1
 800cf36:	d100      	bne.n	800cf3a <_strtod_l+0xa5a>
 800cf38:	e535      	b.n	800c9a6 <_strtod_l+0x4c6>
 800cf3a:	2601      	movs	r6, #1
 800cf3c:	4f65      	ldr	r7, [pc, #404]	; (800d0d4 <_strtod_l+0xbf4>)
 800cf3e:	4276      	negs	r6, r6
 800cf40:	991c      	ldr	r1, [sp, #112]	; 0x70
 800cf42:	9804      	ldr	r0, [sp, #16]
 800cf44:	f002 fb56 	bl	800f5f4 <_Bfree>
 800cf48:	9908      	ldr	r1, [sp, #32]
 800cf4a:	9804      	ldr	r0, [sp, #16]
 800cf4c:	f002 fb52 	bl	800f5f4 <_Bfree>
 800cf50:	9906      	ldr	r1, [sp, #24]
 800cf52:	9804      	ldr	r0, [sp, #16]
 800cf54:	f002 fb4e 	bl	800f5f4 <_Bfree>
 800cf58:	9905      	ldr	r1, [sp, #20]
 800cf5a:	9804      	ldr	r0, [sp, #16]
 800cf5c:	f002 fb4a 	bl	800f5f4 <_Bfree>
 800cf60:	e60b      	b.n	800cb7a <_strtod_l+0x69a>
 800cf62:	2e01      	cmp	r6, #1
 800cf64:	d103      	bne.n	800cf6e <_strtod_l+0xa8e>
 800cf66:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	d100      	bne.n	800cf6e <_strtod_l+0xa8e>
 800cf6c:	e58e      	b.n	800ca8c <_strtod_l+0x5ac>
 800cf6e:	2300      	movs	r3, #0
 800cf70:	4c59      	ldr	r4, [pc, #356]	; (800d0d8 <_strtod_l+0xbf8>)
 800cf72:	930a      	str	r3, [sp, #40]	; 0x28
 800cf74:	940b      	str	r4, [sp, #44]	; 0x2c
 800cf76:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cf78:	e01c      	b.n	800cfb4 <_strtod_l+0xad4>
 800cf7a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800cf7c:	4d50      	ldr	r5, [pc, #320]	; (800d0c0 <_strtod_l+0xbe0>)
 800cf7e:	e7ab      	b.n	800ced8 <_strtod_l+0x9f8>
 800cf80:	2200      	movs	r2, #0
 800cf82:	0020      	movs	r0, r4
 800cf84:	0029      	movs	r1, r5
 800cf86:	4b4e      	ldr	r3, [pc, #312]	; (800d0c0 <_strtod_l+0xbe0>)
 800cf88:	f7f4 fb64 	bl	8001654 <__aeabi_dmul>
 800cf8c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cf8e:	0004      	movs	r4, r0
 800cf90:	000b      	movs	r3, r1
 800cf92:	000d      	movs	r5, r1
 800cf94:	2a00      	cmp	r2, #0
 800cf96:	d104      	bne.n	800cfa2 <_strtod_l+0xac2>
 800cf98:	2280      	movs	r2, #128	; 0x80
 800cf9a:	0612      	lsls	r2, r2, #24
 800cf9c:	900a      	str	r0, [sp, #40]	; 0x28
 800cf9e:	188b      	adds	r3, r1, r2
 800cfa0:	e79e      	b.n	800cee0 <_strtod_l+0xa00>
 800cfa2:	0002      	movs	r2, r0
 800cfa4:	920a      	str	r2, [sp, #40]	; 0x28
 800cfa6:	930b      	str	r3, [sp, #44]	; 0x2c
 800cfa8:	e79b      	b.n	800cee2 <_strtod_l+0xa02>
 800cfaa:	2300      	movs	r3, #0
 800cfac:	4c43      	ldr	r4, [pc, #268]	; (800d0bc <_strtod_l+0xbdc>)
 800cfae:	930a      	str	r3, [sp, #40]	; 0x28
 800cfb0:	940b      	str	r4, [sp, #44]	; 0x2c
 800cfb2:	2400      	movs	r4, #0
 800cfb4:	4d41      	ldr	r5, [pc, #260]	; (800d0bc <_strtod_l+0xbdc>)
 800cfb6:	e794      	b.n	800cee2 <_strtod_l+0xa02>
 800cfb8:	2300      	movs	r3, #0
 800cfba:	4c47      	ldr	r4, [pc, #284]	; (800d0d8 <_strtod_l+0xbf8>)
 800cfbc:	e7f7      	b.n	800cfae <_strtod_l+0xace>
 800cfbe:	23d4      	movs	r3, #212	; 0xd4
 800cfc0:	049b      	lsls	r3, r3, #18
 800cfc2:	18cf      	adds	r7, r1, r3
 800cfc4:	9b07      	ldr	r3, [sp, #28]
 800cfc6:	970e      	str	r7, [sp, #56]	; 0x38
 800cfc8:	2b00      	cmp	r3, #0
 800cfca:	d1b9      	bne.n	800cf40 <_strtod_l+0xa60>
 800cfcc:	4b3d      	ldr	r3, [pc, #244]	; (800d0c4 <_strtod_l+0xbe4>)
 800cfce:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cfd0:	403b      	ands	r3, r7
 800cfd2:	429a      	cmp	r2, r3
 800cfd4:	d1b4      	bne.n	800cf40 <_strtod_l+0xa60>
 800cfd6:	0020      	movs	r0, r4
 800cfd8:	0029      	movs	r1, r5
 800cfda:	f7f3 faad 	bl	8000538 <__aeabi_d2lz>
 800cfde:	f7f3 fae7 	bl	80005b0 <__aeabi_l2d>
 800cfe2:	0002      	movs	r2, r0
 800cfe4:	000b      	movs	r3, r1
 800cfe6:	0020      	movs	r0, r4
 800cfe8:	0029      	movs	r1, r5
 800cfea:	f7f4 fdf5 	bl	8001bd8 <__aeabi_dsub>
 800cfee:	033b      	lsls	r3, r7, #12
 800cff0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cff2:	0b1b      	lsrs	r3, r3, #12
 800cff4:	4333      	orrs	r3, r6
 800cff6:	4313      	orrs	r3, r2
 800cff8:	0004      	movs	r4, r0
 800cffa:	000d      	movs	r5, r1
 800cffc:	4a37      	ldr	r2, [pc, #220]	; (800d0dc <_strtod_l+0xbfc>)
 800cffe:	2b00      	cmp	r3, #0
 800d000:	d054      	beq.n	800d0ac <_strtod_l+0xbcc>
 800d002:	4b37      	ldr	r3, [pc, #220]	; (800d0e0 <_strtod_l+0xc00>)
 800d004:	f7f3 fa32 	bl	800046c <__aeabi_dcmplt>
 800d008:	2800      	cmp	r0, #0
 800d00a:	d000      	beq.n	800d00e <_strtod_l+0xb2e>
 800d00c:	e4d4      	b.n	800c9b8 <_strtod_l+0x4d8>
 800d00e:	0020      	movs	r0, r4
 800d010:	0029      	movs	r1, r5
 800d012:	4a34      	ldr	r2, [pc, #208]	; (800d0e4 <_strtod_l+0xc04>)
 800d014:	4b2a      	ldr	r3, [pc, #168]	; (800d0c0 <_strtod_l+0xbe0>)
 800d016:	f7f3 fa3d 	bl	8000494 <__aeabi_dcmpgt>
 800d01a:	2800      	cmp	r0, #0
 800d01c:	d090      	beq.n	800cf40 <_strtod_l+0xa60>
 800d01e:	e4cb      	b.n	800c9b8 <_strtod_l+0x4d8>
 800d020:	9b07      	ldr	r3, [sp, #28]
 800d022:	2b00      	cmp	r3, #0
 800d024:	d02b      	beq.n	800d07e <_strtod_l+0xb9e>
 800d026:	23d4      	movs	r3, #212	; 0xd4
 800d028:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d02a:	04db      	lsls	r3, r3, #19
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d826      	bhi.n	800d07e <_strtod_l+0xb9e>
 800d030:	0020      	movs	r0, r4
 800d032:	0029      	movs	r1, r5
 800d034:	4a2c      	ldr	r2, [pc, #176]	; (800d0e8 <_strtod_l+0xc08>)
 800d036:	4b2d      	ldr	r3, [pc, #180]	; (800d0ec <_strtod_l+0xc0c>)
 800d038:	f7f3 fa22 	bl	8000480 <__aeabi_dcmple>
 800d03c:	2800      	cmp	r0, #0
 800d03e:	d017      	beq.n	800d070 <_strtod_l+0xb90>
 800d040:	0020      	movs	r0, r4
 800d042:	0029      	movs	r1, r5
 800d044:	f7f3 fa5a 	bl	80004fc <__aeabi_d2uiz>
 800d048:	2800      	cmp	r0, #0
 800d04a:	d100      	bne.n	800d04e <_strtod_l+0xb6e>
 800d04c:	3001      	adds	r0, #1
 800d04e:	f7f5 f9c9 	bl	80023e4 <__aeabi_ui2d>
 800d052:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d054:	0004      	movs	r4, r0
 800d056:	000b      	movs	r3, r1
 800d058:	000d      	movs	r5, r1
 800d05a:	2a00      	cmp	r2, #0
 800d05c:	d122      	bne.n	800d0a4 <_strtod_l+0xbc4>
 800d05e:	2280      	movs	r2, #128	; 0x80
 800d060:	0612      	lsls	r2, r2, #24
 800d062:	188b      	adds	r3, r1, r2
 800d064:	9016      	str	r0, [sp, #88]	; 0x58
 800d066:	9317      	str	r3, [sp, #92]	; 0x5c
 800d068:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800d06a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800d06c:	9212      	str	r2, [sp, #72]	; 0x48
 800d06e:	9313      	str	r3, [sp, #76]	; 0x4c
 800d070:	22d6      	movs	r2, #214	; 0xd6
 800d072:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d074:	04d2      	lsls	r2, r2, #19
 800d076:	189b      	adds	r3, r3, r2
 800d078:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d07a:	1a9b      	subs	r3, r3, r2
 800d07c:	9313      	str	r3, [sp, #76]	; 0x4c
 800d07e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800d080:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d082:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d084:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800d086:	f002 fdf7 	bl	800fc78 <__ulp>
 800d08a:	0002      	movs	r2, r0
 800d08c:	000b      	movs	r3, r1
 800d08e:	0030      	movs	r0, r6
 800d090:	0039      	movs	r1, r7
 800d092:	f7f4 fadf 	bl	8001654 <__aeabi_dmul>
 800d096:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d098:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d09a:	f7f3 fb81 	bl	80007a0 <__aeabi_dadd>
 800d09e:	0006      	movs	r6, r0
 800d0a0:	000f      	movs	r7, r1
 800d0a2:	e78f      	b.n	800cfc4 <_strtod_l+0xae4>
 800d0a4:	0002      	movs	r2, r0
 800d0a6:	9216      	str	r2, [sp, #88]	; 0x58
 800d0a8:	9317      	str	r3, [sp, #92]	; 0x5c
 800d0aa:	e7dd      	b.n	800d068 <_strtod_l+0xb88>
 800d0ac:	4b10      	ldr	r3, [pc, #64]	; (800d0f0 <_strtod_l+0xc10>)
 800d0ae:	f7f3 f9dd 	bl	800046c <__aeabi_dcmplt>
 800d0b2:	e7b2      	b.n	800d01a <_strtod_l+0xb3a>
 800d0b4:	fff00000 	.word	0xfff00000
 800d0b8:	000fffff 	.word	0x000fffff
 800d0bc:	3ff00000 	.word	0x3ff00000
 800d0c0:	3fe00000 	.word	0x3fe00000
 800d0c4:	7ff00000 	.word	0x7ff00000
 800d0c8:	7fe00000 	.word	0x7fe00000
 800d0cc:	fcb00000 	.word	0xfcb00000
 800d0d0:	7c9fffff 	.word	0x7c9fffff
 800d0d4:	7fefffff 	.word	0x7fefffff
 800d0d8:	bff00000 	.word	0xbff00000
 800d0dc:	94a03595 	.word	0x94a03595
 800d0e0:	3fdfffff 	.word	0x3fdfffff
 800d0e4:	35afe535 	.word	0x35afe535
 800d0e8:	ffc00000 	.word	0xffc00000
 800d0ec:	41dfffff 	.word	0x41dfffff
 800d0f0:	3fcfffff 	.word	0x3fcfffff

0800d0f4 <strtod>:
 800d0f4:	b510      	push	{r4, lr}
 800d0f6:	4c04      	ldr	r4, [pc, #16]	; (800d108 <strtod+0x14>)
 800d0f8:	000a      	movs	r2, r1
 800d0fa:	0001      	movs	r1, r0
 800d0fc:	4b03      	ldr	r3, [pc, #12]	; (800d10c <strtod+0x18>)
 800d0fe:	6820      	ldr	r0, [r4, #0]
 800d100:	f7ff f9ee 	bl	800c4e0 <_strtod_l>
 800d104:	bd10      	pop	{r4, pc}
 800d106:	46c0      	nop			; (mov r8, r8)
 800d108:	200001e0 	.word	0x200001e0
 800d10c:	20000028 	.word	0x20000028

0800d110 <_strtol_l.constprop.0>:
 800d110:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d112:	b087      	sub	sp, #28
 800d114:	001e      	movs	r6, r3
 800d116:	9005      	str	r0, [sp, #20]
 800d118:	9101      	str	r1, [sp, #4]
 800d11a:	9202      	str	r2, [sp, #8]
 800d11c:	2b01      	cmp	r3, #1
 800d11e:	d048      	beq.n	800d1b2 <_strtol_l.constprop.0+0xa2>
 800d120:	000b      	movs	r3, r1
 800d122:	2e24      	cmp	r6, #36	; 0x24
 800d124:	d845      	bhi.n	800d1b2 <_strtol_l.constprop.0+0xa2>
 800d126:	4a3b      	ldr	r2, [pc, #236]	; (800d214 <_strtol_l.constprop.0+0x104>)
 800d128:	2108      	movs	r1, #8
 800d12a:	4694      	mov	ip, r2
 800d12c:	001a      	movs	r2, r3
 800d12e:	4660      	mov	r0, ip
 800d130:	7814      	ldrb	r4, [r2, #0]
 800d132:	3301      	adds	r3, #1
 800d134:	5d00      	ldrb	r0, [r0, r4]
 800d136:	001d      	movs	r5, r3
 800d138:	0007      	movs	r7, r0
 800d13a:	400f      	ands	r7, r1
 800d13c:	4208      	tst	r0, r1
 800d13e:	d1f5      	bne.n	800d12c <_strtol_l.constprop.0+0x1c>
 800d140:	2c2d      	cmp	r4, #45	; 0x2d
 800d142:	d13d      	bne.n	800d1c0 <_strtol_l.constprop.0+0xb0>
 800d144:	2701      	movs	r7, #1
 800d146:	781c      	ldrb	r4, [r3, #0]
 800d148:	1c95      	adds	r5, r2, #2
 800d14a:	2e00      	cmp	r6, #0
 800d14c:	d05e      	beq.n	800d20c <_strtol_l.constprop.0+0xfc>
 800d14e:	2e10      	cmp	r6, #16
 800d150:	d109      	bne.n	800d166 <_strtol_l.constprop.0+0x56>
 800d152:	2c30      	cmp	r4, #48	; 0x30
 800d154:	d107      	bne.n	800d166 <_strtol_l.constprop.0+0x56>
 800d156:	2220      	movs	r2, #32
 800d158:	782b      	ldrb	r3, [r5, #0]
 800d15a:	4393      	bics	r3, r2
 800d15c:	2b58      	cmp	r3, #88	; 0x58
 800d15e:	d150      	bne.n	800d202 <_strtol_l.constprop.0+0xf2>
 800d160:	2610      	movs	r6, #16
 800d162:	786c      	ldrb	r4, [r5, #1]
 800d164:	3502      	adds	r5, #2
 800d166:	4b2c      	ldr	r3, [pc, #176]	; (800d218 <_strtol_l.constprop.0+0x108>)
 800d168:	0031      	movs	r1, r6
 800d16a:	18fb      	adds	r3, r7, r3
 800d16c:	0018      	movs	r0, r3
 800d16e:	9303      	str	r3, [sp, #12]
 800d170:	f7f3 f876 	bl	8000260 <__aeabi_uidivmod>
 800d174:	2200      	movs	r2, #0
 800d176:	9104      	str	r1, [sp, #16]
 800d178:	2101      	movs	r1, #1
 800d17a:	4684      	mov	ip, r0
 800d17c:	0010      	movs	r0, r2
 800d17e:	4249      	negs	r1, r1
 800d180:	0023      	movs	r3, r4
 800d182:	3b30      	subs	r3, #48	; 0x30
 800d184:	2b09      	cmp	r3, #9
 800d186:	d903      	bls.n	800d190 <_strtol_l.constprop.0+0x80>
 800d188:	3b11      	subs	r3, #17
 800d18a:	2b19      	cmp	r3, #25
 800d18c:	d81d      	bhi.n	800d1ca <_strtol_l.constprop.0+0xba>
 800d18e:	330a      	adds	r3, #10
 800d190:	429e      	cmp	r6, r3
 800d192:	dd1e      	ble.n	800d1d2 <_strtol_l.constprop.0+0xc2>
 800d194:	1c54      	adds	r4, r2, #1
 800d196:	d009      	beq.n	800d1ac <_strtol_l.constprop.0+0x9c>
 800d198:	000a      	movs	r2, r1
 800d19a:	4584      	cmp	ip, r0
 800d19c:	d306      	bcc.n	800d1ac <_strtol_l.constprop.0+0x9c>
 800d19e:	d102      	bne.n	800d1a6 <_strtol_l.constprop.0+0x96>
 800d1a0:	9c04      	ldr	r4, [sp, #16]
 800d1a2:	429c      	cmp	r4, r3
 800d1a4:	db02      	blt.n	800d1ac <_strtol_l.constprop.0+0x9c>
 800d1a6:	2201      	movs	r2, #1
 800d1a8:	4370      	muls	r0, r6
 800d1aa:	1818      	adds	r0, r3, r0
 800d1ac:	782c      	ldrb	r4, [r5, #0]
 800d1ae:	3501      	adds	r5, #1
 800d1b0:	e7e6      	b.n	800d180 <_strtol_l.constprop.0+0x70>
 800d1b2:	f000 ff17 	bl	800dfe4 <__errno>
 800d1b6:	2316      	movs	r3, #22
 800d1b8:	6003      	str	r3, [r0, #0]
 800d1ba:	2000      	movs	r0, #0
 800d1bc:	b007      	add	sp, #28
 800d1be:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d1c0:	2c2b      	cmp	r4, #43	; 0x2b
 800d1c2:	d1c2      	bne.n	800d14a <_strtol_l.constprop.0+0x3a>
 800d1c4:	781c      	ldrb	r4, [r3, #0]
 800d1c6:	1c95      	adds	r5, r2, #2
 800d1c8:	e7bf      	b.n	800d14a <_strtol_l.constprop.0+0x3a>
 800d1ca:	0023      	movs	r3, r4
 800d1cc:	3b61      	subs	r3, #97	; 0x61
 800d1ce:	2b19      	cmp	r3, #25
 800d1d0:	d9dd      	bls.n	800d18e <_strtol_l.constprop.0+0x7e>
 800d1d2:	1c53      	adds	r3, r2, #1
 800d1d4:	d109      	bne.n	800d1ea <_strtol_l.constprop.0+0xda>
 800d1d6:	2322      	movs	r3, #34	; 0x22
 800d1d8:	9a05      	ldr	r2, [sp, #20]
 800d1da:	9803      	ldr	r0, [sp, #12]
 800d1dc:	6013      	str	r3, [r2, #0]
 800d1de:	9b02      	ldr	r3, [sp, #8]
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	d0eb      	beq.n	800d1bc <_strtol_l.constprop.0+0xac>
 800d1e4:	1e6b      	subs	r3, r5, #1
 800d1e6:	9301      	str	r3, [sp, #4]
 800d1e8:	e007      	b.n	800d1fa <_strtol_l.constprop.0+0xea>
 800d1ea:	2f00      	cmp	r7, #0
 800d1ec:	d000      	beq.n	800d1f0 <_strtol_l.constprop.0+0xe0>
 800d1ee:	4240      	negs	r0, r0
 800d1f0:	9b02      	ldr	r3, [sp, #8]
 800d1f2:	2b00      	cmp	r3, #0
 800d1f4:	d0e2      	beq.n	800d1bc <_strtol_l.constprop.0+0xac>
 800d1f6:	2a00      	cmp	r2, #0
 800d1f8:	d1f4      	bne.n	800d1e4 <_strtol_l.constprop.0+0xd4>
 800d1fa:	9b02      	ldr	r3, [sp, #8]
 800d1fc:	9a01      	ldr	r2, [sp, #4]
 800d1fe:	601a      	str	r2, [r3, #0]
 800d200:	e7dc      	b.n	800d1bc <_strtol_l.constprop.0+0xac>
 800d202:	2430      	movs	r4, #48	; 0x30
 800d204:	2e00      	cmp	r6, #0
 800d206:	d1ae      	bne.n	800d166 <_strtol_l.constprop.0+0x56>
 800d208:	3608      	adds	r6, #8
 800d20a:	e7ac      	b.n	800d166 <_strtol_l.constprop.0+0x56>
 800d20c:	2c30      	cmp	r4, #48	; 0x30
 800d20e:	d0a2      	beq.n	800d156 <_strtol_l.constprop.0+0x46>
 800d210:	260a      	movs	r6, #10
 800d212:	e7a8      	b.n	800d166 <_strtol_l.constprop.0+0x56>
 800d214:	08011459 	.word	0x08011459
 800d218:	7fffffff 	.word	0x7fffffff

0800d21c <strtol>:
 800d21c:	b510      	push	{r4, lr}
 800d21e:	4c04      	ldr	r4, [pc, #16]	; (800d230 <strtol+0x14>)
 800d220:	0013      	movs	r3, r2
 800d222:	000a      	movs	r2, r1
 800d224:	0001      	movs	r1, r0
 800d226:	6820      	ldr	r0, [r4, #0]
 800d228:	f7ff ff72 	bl	800d110 <_strtol_l.constprop.0>
 800d22c:	bd10      	pop	{r4, pc}
 800d22e:	46c0      	nop			; (mov r8, r8)
 800d230:	200001e0 	.word	0x200001e0

0800d234 <__cvt>:
 800d234:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d236:	001e      	movs	r6, r3
 800d238:	2300      	movs	r3, #0
 800d23a:	0014      	movs	r4, r2
 800d23c:	b08b      	sub	sp, #44	; 0x2c
 800d23e:	429e      	cmp	r6, r3
 800d240:	da04      	bge.n	800d24c <__cvt+0x18>
 800d242:	2180      	movs	r1, #128	; 0x80
 800d244:	0609      	lsls	r1, r1, #24
 800d246:	1873      	adds	r3, r6, r1
 800d248:	001e      	movs	r6, r3
 800d24a:	232d      	movs	r3, #45	; 0x2d
 800d24c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d24e:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800d250:	7013      	strb	r3, [r2, #0]
 800d252:	2320      	movs	r3, #32
 800d254:	2203      	movs	r2, #3
 800d256:	439f      	bics	r7, r3
 800d258:	2f46      	cmp	r7, #70	; 0x46
 800d25a:	d007      	beq.n	800d26c <__cvt+0x38>
 800d25c:	003b      	movs	r3, r7
 800d25e:	3b45      	subs	r3, #69	; 0x45
 800d260:	4259      	negs	r1, r3
 800d262:	414b      	adcs	r3, r1
 800d264:	9910      	ldr	r1, [sp, #64]	; 0x40
 800d266:	3a01      	subs	r2, #1
 800d268:	18cb      	adds	r3, r1, r3
 800d26a:	9310      	str	r3, [sp, #64]	; 0x40
 800d26c:	ab09      	add	r3, sp, #36	; 0x24
 800d26e:	9304      	str	r3, [sp, #16]
 800d270:	ab08      	add	r3, sp, #32
 800d272:	9303      	str	r3, [sp, #12]
 800d274:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d276:	9200      	str	r2, [sp, #0]
 800d278:	9302      	str	r3, [sp, #8]
 800d27a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d27c:	0022      	movs	r2, r4
 800d27e:	9301      	str	r3, [sp, #4]
 800d280:	0033      	movs	r3, r6
 800d282:	f000 ffad 	bl	800e1e0 <_dtoa_r>
 800d286:	0005      	movs	r5, r0
 800d288:	2f47      	cmp	r7, #71	; 0x47
 800d28a:	d102      	bne.n	800d292 <__cvt+0x5e>
 800d28c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d28e:	07db      	lsls	r3, r3, #31
 800d290:	d528      	bpl.n	800d2e4 <__cvt+0xb0>
 800d292:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d294:	18eb      	adds	r3, r5, r3
 800d296:	9307      	str	r3, [sp, #28]
 800d298:	2f46      	cmp	r7, #70	; 0x46
 800d29a:	d114      	bne.n	800d2c6 <__cvt+0x92>
 800d29c:	782b      	ldrb	r3, [r5, #0]
 800d29e:	2b30      	cmp	r3, #48	; 0x30
 800d2a0:	d10c      	bne.n	800d2bc <__cvt+0x88>
 800d2a2:	2200      	movs	r2, #0
 800d2a4:	2300      	movs	r3, #0
 800d2a6:	0020      	movs	r0, r4
 800d2a8:	0031      	movs	r1, r6
 800d2aa:	f7f3 f8d9 	bl	8000460 <__aeabi_dcmpeq>
 800d2ae:	2800      	cmp	r0, #0
 800d2b0:	d104      	bne.n	800d2bc <__cvt+0x88>
 800d2b2:	2301      	movs	r3, #1
 800d2b4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800d2b6:	1a9b      	subs	r3, r3, r2
 800d2b8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d2ba:	6013      	str	r3, [r2, #0]
 800d2bc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d2be:	9a07      	ldr	r2, [sp, #28]
 800d2c0:	681b      	ldr	r3, [r3, #0]
 800d2c2:	18d3      	adds	r3, r2, r3
 800d2c4:	9307      	str	r3, [sp, #28]
 800d2c6:	2200      	movs	r2, #0
 800d2c8:	2300      	movs	r3, #0
 800d2ca:	0020      	movs	r0, r4
 800d2cc:	0031      	movs	r1, r6
 800d2ce:	f7f3 f8c7 	bl	8000460 <__aeabi_dcmpeq>
 800d2d2:	2800      	cmp	r0, #0
 800d2d4:	d001      	beq.n	800d2da <__cvt+0xa6>
 800d2d6:	9b07      	ldr	r3, [sp, #28]
 800d2d8:	9309      	str	r3, [sp, #36]	; 0x24
 800d2da:	2230      	movs	r2, #48	; 0x30
 800d2dc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2de:	9907      	ldr	r1, [sp, #28]
 800d2e0:	428b      	cmp	r3, r1
 800d2e2:	d306      	bcc.n	800d2f2 <__cvt+0xbe>
 800d2e4:	0028      	movs	r0, r5
 800d2e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2e8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800d2ea:	1b5b      	subs	r3, r3, r5
 800d2ec:	6013      	str	r3, [r2, #0]
 800d2ee:	b00b      	add	sp, #44	; 0x2c
 800d2f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d2f2:	1c59      	adds	r1, r3, #1
 800d2f4:	9109      	str	r1, [sp, #36]	; 0x24
 800d2f6:	701a      	strb	r2, [r3, #0]
 800d2f8:	e7f0      	b.n	800d2dc <__cvt+0xa8>

0800d2fa <__exponent>:
 800d2fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2fc:	1c83      	adds	r3, r0, #2
 800d2fe:	b087      	sub	sp, #28
 800d300:	9303      	str	r3, [sp, #12]
 800d302:	0005      	movs	r5, r0
 800d304:	000c      	movs	r4, r1
 800d306:	232b      	movs	r3, #43	; 0x2b
 800d308:	7002      	strb	r2, [r0, #0]
 800d30a:	2900      	cmp	r1, #0
 800d30c:	da01      	bge.n	800d312 <__exponent+0x18>
 800d30e:	424c      	negs	r4, r1
 800d310:	3302      	adds	r3, #2
 800d312:	706b      	strb	r3, [r5, #1]
 800d314:	2c09      	cmp	r4, #9
 800d316:	dd2f      	ble.n	800d378 <__exponent+0x7e>
 800d318:	270a      	movs	r7, #10
 800d31a:	ab04      	add	r3, sp, #16
 800d31c:	1dde      	adds	r6, r3, #7
 800d31e:	0020      	movs	r0, r4
 800d320:	0039      	movs	r1, r7
 800d322:	9601      	str	r6, [sp, #4]
 800d324:	f7f3 f886 	bl	8000434 <__aeabi_idivmod>
 800d328:	3e01      	subs	r6, #1
 800d32a:	3130      	adds	r1, #48	; 0x30
 800d32c:	0020      	movs	r0, r4
 800d32e:	7031      	strb	r1, [r6, #0]
 800d330:	0039      	movs	r1, r7
 800d332:	9402      	str	r4, [sp, #8]
 800d334:	f7f2 ff98 	bl	8000268 <__divsi3>
 800d338:	9b02      	ldr	r3, [sp, #8]
 800d33a:	0004      	movs	r4, r0
 800d33c:	2b63      	cmp	r3, #99	; 0x63
 800d33e:	dcee      	bgt.n	800d31e <__exponent+0x24>
 800d340:	9b01      	ldr	r3, [sp, #4]
 800d342:	3430      	adds	r4, #48	; 0x30
 800d344:	1e9a      	subs	r2, r3, #2
 800d346:	0013      	movs	r3, r2
 800d348:	9903      	ldr	r1, [sp, #12]
 800d34a:	7014      	strb	r4, [r2, #0]
 800d34c:	a804      	add	r0, sp, #16
 800d34e:	3007      	adds	r0, #7
 800d350:	4298      	cmp	r0, r3
 800d352:	d80c      	bhi.n	800d36e <__exponent+0x74>
 800d354:	2300      	movs	r3, #0
 800d356:	4282      	cmp	r2, r0
 800d358:	d804      	bhi.n	800d364 <__exponent+0x6a>
 800d35a:	aa04      	add	r2, sp, #16
 800d35c:	3309      	adds	r3, #9
 800d35e:	189b      	adds	r3, r3, r2
 800d360:	9a01      	ldr	r2, [sp, #4]
 800d362:	1a9b      	subs	r3, r3, r2
 800d364:	9a03      	ldr	r2, [sp, #12]
 800d366:	18d3      	adds	r3, r2, r3
 800d368:	1b58      	subs	r0, r3, r5
 800d36a:	b007      	add	sp, #28
 800d36c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d36e:	7818      	ldrb	r0, [r3, #0]
 800d370:	3301      	adds	r3, #1
 800d372:	7008      	strb	r0, [r1, #0]
 800d374:	3101      	adds	r1, #1
 800d376:	e7e9      	b.n	800d34c <__exponent+0x52>
 800d378:	2330      	movs	r3, #48	; 0x30
 800d37a:	3430      	adds	r4, #48	; 0x30
 800d37c:	70ab      	strb	r3, [r5, #2]
 800d37e:	70ec      	strb	r4, [r5, #3]
 800d380:	1d2b      	adds	r3, r5, #4
 800d382:	e7f1      	b.n	800d368 <__exponent+0x6e>

0800d384 <_printf_float>:
 800d384:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d386:	b095      	sub	sp, #84	; 0x54
 800d388:	000c      	movs	r4, r1
 800d38a:	9208      	str	r2, [sp, #32]
 800d38c:	9d1a      	ldr	r5, [sp, #104]	; 0x68
 800d38e:	9309      	str	r3, [sp, #36]	; 0x24
 800d390:	0007      	movs	r7, r0
 800d392:	f000 fdc3 	bl	800df1c <_localeconv_r>
 800d396:	6803      	ldr	r3, [r0, #0]
 800d398:	0018      	movs	r0, r3
 800d39a:	930c      	str	r3, [sp, #48]	; 0x30
 800d39c:	f7f2 febe 	bl	800011c <strlen>
 800d3a0:	2300      	movs	r3, #0
 800d3a2:	9312      	str	r3, [sp, #72]	; 0x48
 800d3a4:	7e23      	ldrb	r3, [r4, #24]
 800d3a6:	2207      	movs	r2, #7
 800d3a8:	930a      	str	r3, [sp, #40]	; 0x28
 800d3aa:	6823      	ldr	r3, [r4, #0]
 800d3ac:	900d      	str	r0, [sp, #52]	; 0x34
 800d3ae:	930b      	str	r3, [sp, #44]	; 0x2c
 800d3b0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800d3b2:	682b      	ldr	r3, [r5, #0]
 800d3b4:	05c9      	lsls	r1, r1, #23
 800d3b6:	d547      	bpl.n	800d448 <_printf_float+0xc4>
 800d3b8:	189b      	adds	r3, r3, r2
 800d3ba:	4393      	bics	r3, r2
 800d3bc:	001a      	movs	r2, r3
 800d3be:	3208      	adds	r2, #8
 800d3c0:	602a      	str	r2, [r5, #0]
 800d3c2:	681e      	ldr	r6, [r3, #0]
 800d3c4:	685d      	ldr	r5, [r3, #4]
 800d3c6:	0032      	movs	r2, r6
 800d3c8:	002b      	movs	r3, r5
 800d3ca:	64a2      	str	r2, [r4, #72]	; 0x48
 800d3cc:	64e3      	str	r3, [r4, #76]	; 0x4c
 800d3ce:	2201      	movs	r2, #1
 800d3d0:	006b      	lsls	r3, r5, #1
 800d3d2:	085b      	lsrs	r3, r3, #1
 800d3d4:	930e      	str	r3, [sp, #56]	; 0x38
 800d3d6:	0030      	movs	r0, r6
 800d3d8:	4bab      	ldr	r3, [pc, #684]	; (800d688 <_printf_float+0x304>)
 800d3da:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d3dc:	4252      	negs	r2, r2
 800d3de:	f7f4 ff7d 	bl	80022dc <__aeabi_dcmpun>
 800d3e2:	2800      	cmp	r0, #0
 800d3e4:	d132      	bne.n	800d44c <_printf_float+0xc8>
 800d3e6:	2201      	movs	r2, #1
 800d3e8:	0030      	movs	r0, r6
 800d3ea:	4ba7      	ldr	r3, [pc, #668]	; (800d688 <_printf_float+0x304>)
 800d3ec:	990e      	ldr	r1, [sp, #56]	; 0x38
 800d3ee:	4252      	negs	r2, r2
 800d3f0:	f7f3 f846 	bl	8000480 <__aeabi_dcmple>
 800d3f4:	2800      	cmp	r0, #0
 800d3f6:	d129      	bne.n	800d44c <_printf_float+0xc8>
 800d3f8:	2200      	movs	r2, #0
 800d3fa:	2300      	movs	r3, #0
 800d3fc:	0030      	movs	r0, r6
 800d3fe:	0029      	movs	r1, r5
 800d400:	f7f3 f834 	bl	800046c <__aeabi_dcmplt>
 800d404:	2800      	cmp	r0, #0
 800d406:	d003      	beq.n	800d410 <_printf_float+0x8c>
 800d408:	0023      	movs	r3, r4
 800d40a:	222d      	movs	r2, #45	; 0x2d
 800d40c:	3343      	adds	r3, #67	; 0x43
 800d40e:	701a      	strb	r2, [r3, #0]
 800d410:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d412:	4d9e      	ldr	r5, [pc, #632]	; (800d68c <_printf_float+0x308>)
 800d414:	2b47      	cmp	r3, #71	; 0x47
 800d416:	d900      	bls.n	800d41a <_printf_float+0x96>
 800d418:	4d9d      	ldr	r5, [pc, #628]	; (800d690 <_printf_float+0x30c>)
 800d41a:	2303      	movs	r3, #3
 800d41c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d41e:	6123      	str	r3, [r4, #16]
 800d420:	3301      	adds	r3, #1
 800d422:	439a      	bics	r2, r3
 800d424:	2300      	movs	r3, #0
 800d426:	6022      	str	r2, [r4, #0]
 800d428:	930b      	str	r3, [sp, #44]	; 0x2c
 800d42a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d42c:	0021      	movs	r1, r4
 800d42e:	9300      	str	r3, [sp, #0]
 800d430:	0038      	movs	r0, r7
 800d432:	9b08      	ldr	r3, [sp, #32]
 800d434:	aa13      	add	r2, sp, #76	; 0x4c
 800d436:	f000 f9fb 	bl	800d830 <_printf_common>
 800d43a:	3001      	adds	r0, #1
 800d43c:	d000      	beq.n	800d440 <_printf_float+0xbc>
 800d43e:	e0a3      	b.n	800d588 <_printf_float+0x204>
 800d440:	2001      	movs	r0, #1
 800d442:	4240      	negs	r0, r0
 800d444:	b015      	add	sp, #84	; 0x54
 800d446:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d448:	3307      	adds	r3, #7
 800d44a:	e7b6      	b.n	800d3ba <_printf_float+0x36>
 800d44c:	0032      	movs	r2, r6
 800d44e:	002b      	movs	r3, r5
 800d450:	0030      	movs	r0, r6
 800d452:	0029      	movs	r1, r5
 800d454:	f7f4 ff42 	bl	80022dc <__aeabi_dcmpun>
 800d458:	2800      	cmp	r0, #0
 800d45a:	d00b      	beq.n	800d474 <_printf_float+0xf0>
 800d45c:	2d00      	cmp	r5, #0
 800d45e:	da03      	bge.n	800d468 <_printf_float+0xe4>
 800d460:	0023      	movs	r3, r4
 800d462:	222d      	movs	r2, #45	; 0x2d
 800d464:	3343      	adds	r3, #67	; 0x43
 800d466:	701a      	strb	r2, [r3, #0]
 800d468:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d46a:	4d8a      	ldr	r5, [pc, #552]	; (800d694 <_printf_float+0x310>)
 800d46c:	2b47      	cmp	r3, #71	; 0x47
 800d46e:	d9d4      	bls.n	800d41a <_printf_float+0x96>
 800d470:	4d89      	ldr	r5, [pc, #548]	; (800d698 <_printf_float+0x314>)
 800d472:	e7d2      	b.n	800d41a <_printf_float+0x96>
 800d474:	2220      	movs	r2, #32
 800d476:	990a      	ldr	r1, [sp, #40]	; 0x28
 800d478:	6863      	ldr	r3, [r4, #4]
 800d47a:	4391      	bics	r1, r2
 800d47c:	910e      	str	r1, [sp, #56]	; 0x38
 800d47e:	1c5a      	adds	r2, r3, #1
 800d480:	d14a      	bne.n	800d518 <_printf_float+0x194>
 800d482:	3307      	adds	r3, #7
 800d484:	6063      	str	r3, [r4, #4]
 800d486:	2380      	movs	r3, #128	; 0x80
 800d488:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d48a:	00db      	lsls	r3, r3, #3
 800d48c:	4313      	orrs	r3, r2
 800d48e:	2200      	movs	r2, #0
 800d490:	9206      	str	r2, [sp, #24]
 800d492:	aa12      	add	r2, sp, #72	; 0x48
 800d494:	9205      	str	r2, [sp, #20]
 800d496:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d498:	6023      	str	r3, [r4, #0]
 800d49a:	9204      	str	r2, [sp, #16]
 800d49c:	aa11      	add	r2, sp, #68	; 0x44
 800d49e:	9203      	str	r2, [sp, #12]
 800d4a0:	2223      	movs	r2, #35	; 0x23
 800d4a2:	a908      	add	r1, sp, #32
 800d4a4:	9301      	str	r3, [sp, #4]
 800d4a6:	6863      	ldr	r3, [r4, #4]
 800d4a8:	1852      	adds	r2, r2, r1
 800d4aa:	9202      	str	r2, [sp, #8]
 800d4ac:	9300      	str	r3, [sp, #0]
 800d4ae:	0032      	movs	r2, r6
 800d4b0:	002b      	movs	r3, r5
 800d4b2:	0038      	movs	r0, r7
 800d4b4:	f7ff febe 	bl	800d234 <__cvt>
 800d4b8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d4ba:	0005      	movs	r5, r0
 800d4bc:	2b47      	cmp	r3, #71	; 0x47
 800d4be:	d109      	bne.n	800d4d4 <_printf_float+0x150>
 800d4c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d4c2:	1cda      	adds	r2, r3, #3
 800d4c4:	db02      	blt.n	800d4cc <_printf_float+0x148>
 800d4c6:	6862      	ldr	r2, [r4, #4]
 800d4c8:	4293      	cmp	r3, r2
 800d4ca:	dd49      	ble.n	800d560 <_printf_float+0x1dc>
 800d4cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4ce:	3b02      	subs	r3, #2
 800d4d0:	b2db      	uxtb	r3, r3
 800d4d2:	930a      	str	r3, [sp, #40]	; 0x28
 800d4d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d4d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d4d8:	2b65      	cmp	r3, #101	; 0x65
 800d4da:	d824      	bhi.n	800d526 <_printf_float+0x1a2>
 800d4dc:	0020      	movs	r0, r4
 800d4de:	001a      	movs	r2, r3
 800d4e0:	3901      	subs	r1, #1
 800d4e2:	3050      	adds	r0, #80	; 0x50
 800d4e4:	9111      	str	r1, [sp, #68]	; 0x44
 800d4e6:	f7ff ff08 	bl	800d2fa <__exponent>
 800d4ea:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d4ec:	900b      	str	r0, [sp, #44]	; 0x2c
 800d4ee:	1813      	adds	r3, r2, r0
 800d4f0:	6123      	str	r3, [r4, #16]
 800d4f2:	2a01      	cmp	r2, #1
 800d4f4:	dc02      	bgt.n	800d4fc <_printf_float+0x178>
 800d4f6:	6822      	ldr	r2, [r4, #0]
 800d4f8:	07d2      	lsls	r2, r2, #31
 800d4fa:	d501      	bpl.n	800d500 <_printf_float+0x17c>
 800d4fc:	3301      	adds	r3, #1
 800d4fe:	6123      	str	r3, [r4, #16]
 800d500:	2323      	movs	r3, #35	; 0x23
 800d502:	aa08      	add	r2, sp, #32
 800d504:	189b      	adds	r3, r3, r2
 800d506:	781b      	ldrb	r3, [r3, #0]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	d100      	bne.n	800d50e <_printf_float+0x18a>
 800d50c:	e78d      	b.n	800d42a <_printf_float+0xa6>
 800d50e:	0023      	movs	r3, r4
 800d510:	222d      	movs	r2, #45	; 0x2d
 800d512:	3343      	adds	r3, #67	; 0x43
 800d514:	701a      	strb	r2, [r3, #0]
 800d516:	e788      	b.n	800d42a <_printf_float+0xa6>
 800d518:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d51a:	2a47      	cmp	r2, #71	; 0x47
 800d51c:	d1b3      	bne.n	800d486 <_printf_float+0x102>
 800d51e:	2b00      	cmp	r3, #0
 800d520:	d1b1      	bne.n	800d486 <_printf_float+0x102>
 800d522:	3301      	adds	r3, #1
 800d524:	e7ae      	b.n	800d484 <_printf_float+0x100>
 800d526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d528:	2b66      	cmp	r3, #102	; 0x66
 800d52a:	d11b      	bne.n	800d564 <_printf_float+0x1e0>
 800d52c:	6863      	ldr	r3, [r4, #4]
 800d52e:	2900      	cmp	r1, #0
 800d530:	dd09      	ble.n	800d546 <_printf_float+0x1c2>
 800d532:	6121      	str	r1, [r4, #16]
 800d534:	2b00      	cmp	r3, #0
 800d536:	d102      	bne.n	800d53e <_printf_float+0x1ba>
 800d538:	6822      	ldr	r2, [r4, #0]
 800d53a:	07d2      	lsls	r2, r2, #31
 800d53c:	d50b      	bpl.n	800d556 <_printf_float+0x1d2>
 800d53e:	3301      	adds	r3, #1
 800d540:	185b      	adds	r3, r3, r1
 800d542:	6123      	str	r3, [r4, #16]
 800d544:	e007      	b.n	800d556 <_printf_float+0x1d2>
 800d546:	2b00      	cmp	r3, #0
 800d548:	d103      	bne.n	800d552 <_printf_float+0x1ce>
 800d54a:	2201      	movs	r2, #1
 800d54c:	6821      	ldr	r1, [r4, #0]
 800d54e:	4211      	tst	r1, r2
 800d550:	d000      	beq.n	800d554 <_printf_float+0x1d0>
 800d552:	1c9a      	adds	r2, r3, #2
 800d554:	6122      	str	r2, [r4, #16]
 800d556:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d558:	65a3      	str	r3, [r4, #88]	; 0x58
 800d55a:	2300      	movs	r3, #0
 800d55c:	930b      	str	r3, [sp, #44]	; 0x2c
 800d55e:	e7cf      	b.n	800d500 <_printf_float+0x17c>
 800d560:	2367      	movs	r3, #103	; 0x67
 800d562:	930a      	str	r3, [sp, #40]	; 0x28
 800d564:	9911      	ldr	r1, [sp, #68]	; 0x44
 800d566:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d568:	4299      	cmp	r1, r3
 800d56a:	db06      	blt.n	800d57a <_printf_float+0x1f6>
 800d56c:	6823      	ldr	r3, [r4, #0]
 800d56e:	6121      	str	r1, [r4, #16]
 800d570:	07db      	lsls	r3, r3, #31
 800d572:	d5f0      	bpl.n	800d556 <_printf_float+0x1d2>
 800d574:	3101      	adds	r1, #1
 800d576:	6121      	str	r1, [r4, #16]
 800d578:	e7ed      	b.n	800d556 <_printf_float+0x1d2>
 800d57a:	2201      	movs	r2, #1
 800d57c:	2900      	cmp	r1, #0
 800d57e:	dc01      	bgt.n	800d584 <_printf_float+0x200>
 800d580:	1892      	adds	r2, r2, r2
 800d582:	1a52      	subs	r2, r2, r1
 800d584:	189b      	adds	r3, r3, r2
 800d586:	e7dc      	b.n	800d542 <_printf_float+0x1be>
 800d588:	6822      	ldr	r2, [r4, #0]
 800d58a:	0553      	lsls	r3, r2, #21
 800d58c:	d408      	bmi.n	800d5a0 <_printf_float+0x21c>
 800d58e:	6923      	ldr	r3, [r4, #16]
 800d590:	002a      	movs	r2, r5
 800d592:	0038      	movs	r0, r7
 800d594:	9908      	ldr	r1, [sp, #32]
 800d596:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d598:	47a8      	blx	r5
 800d59a:	3001      	adds	r0, #1
 800d59c:	d12a      	bne.n	800d5f4 <_printf_float+0x270>
 800d59e:	e74f      	b.n	800d440 <_printf_float+0xbc>
 800d5a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d5a2:	2b65      	cmp	r3, #101	; 0x65
 800d5a4:	d800      	bhi.n	800d5a8 <_printf_float+0x224>
 800d5a6:	e0ec      	b.n	800d782 <_printf_float+0x3fe>
 800d5a8:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d5aa:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d5ac:	2200      	movs	r2, #0
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	f7f2 ff56 	bl	8000460 <__aeabi_dcmpeq>
 800d5b4:	2800      	cmp	r0, #0
 800d5b6:	d034      	beq.n	800d622 <_printf_float+0x29e>
 800d5b8:	2301      	movs	r3, #1
 800d5ba:	0038      	movs	r0, r7
 800d5bc:	4a37      	ldr	r2, [pc, #220]	; (800d69c <_printf_float+0x318>)
 800d5be:	9908      	ldr	r1, [sp, #32]
 800d5c0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d5c2:	47a8      	blx	r5
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	d100      	bne.n	800d5ca <_printf_float+0x246>
 800d5c8:	e73a      	b.n	800d440 <_printf_float+0xbc>
 800d5ca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d5cc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5ce:	429a      	cmp	r2, r3
 800d5d0:	db02      	blt.n	800d5d8 <_printf_float+0x254>
 800d5d2:	6823      	ldr	r3, [r4, #0]
 800d5d4:	07db      	lsls	r3, r3, #31
 800d5d6:	d50d      	bpl.n	800d5f4 <_printf_float+0x270>
 800d5d8:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d5da:	0038      	movs	r0, r7
 800d5dc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d5de:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d5e0:	9908      	ldr	r1, [sp, #32]
 800d5e2:	47a8      	blx	r5
 800d5e4:	2500      	movs	r5, #0
 800d5e6:	3001      	adds	r0, #1
 800d5e8:	d100      	bne.n	800d5ec <_printf_float+0x268>
 800d5ea:	e729      	b.n	800d440 <_printf_float+0xbc>
 800d5ec:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d5ee:	3b01      	subs	r3, #1
 800d5f0:	42ab      	cmp	r3, r5
 800d5f2:	dc0a      	bgt.n	800d60a <_printf_float+0x286>
 800d5f4:	6823      	ldr	r3, [r4, #0]
 800d5f6:	079b      	lsls	r3, r3, #30
 800d5f8:	d500      	bpl.n	800d5fc <_printf_float+0x278>
 800d5fa:	e116      	b.n	800d82a <_printf_float+0x4a6>
 800d5fc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800d5fe:	68e0      	ldr	r0, [r4, #12]
 800d600:	4298      	cmp	r0, r3
 800d602:	db00      	blt.n	800d606 <_printf_float+0x282>
 800d604:	e71e      	b.n	800d444 <_printf_float+0xc0>
 800d606:	0018      	movs	r0, r3
 800d608:	e71c      	b.n	800d444 <_printf_float+0xc0>
 800d60a:	0022      	movs	r2, r4
 800d60c:	2301      	movs	r3, #1
 800d60e:	0038      	movs	r0, r7
 800d610:	9908      	ldr	r1, [sp, #32]
 800d612:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d614:	321a      	adds	r2, #26
 800d616:	47b0      	blx	r6
 800d618:	3001      	adds	r0, #1
 800d61a:	d100      	bne.n	800d61e <_printf_float+0x29a>
 800d61c:	e710      	b.n	800d440 <_printf_float+0xbc>
 800d61e:	3501      	adds	r5, #1
 800d620:	e7e4      	b.n	800d5ec <_printf_float+0x268>
 800d622:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d624:	2b00      	cmp	r3, #0
 800d626:	dc3b      	bgt.n	800d6a0 <_printf_float+0x31c>
 800d628:	2301      	movs	r3, #1
 800d62a:	0038      	movs	r0, r7
 800d62c:	4a1b      	ldr	r2, [pc, #108]	; (800d69c <_printf_float+0x318>)
 800d62e:	9908      	ldr	r1, [sp, #32]
 800d630:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d632:	47b0      	blx	r6
 800d634:	3001      	adds	r0, #1
 800d636:	d100      	bne.n	800d63a <_printf_float+0x2b6>
 800d638:	e702      	b.n	800d440 <_printf_float+0xbc>
 800d63a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d63c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d63e:	4313      	orrs	r3, r2
 800d640:	d102      	bne.n	800d648 <_printf_float+0x2c4>
 800d642:	6823      	ldr	r3, [r4, #0]
 800d644:	07db      	lsls	r3, r3, #31
 800d646:	d5d5      	bpl.n	800d5f4 <_printf_float+0x270>
 800d648:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d64a:	0038      	movs	r0, r7
 800d64c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d64e:	9908      	ldr	r1, [sp, #32]
 800d650:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d652:	47b0      	blx	r6
 800d654:	2300      	movs	r3, #0
 800d656:	3001      	adds	r0, #1
 800d658:	d100      	bne.n	800d65c <_printf_float+0x2d8>
 800d65a:	e6f1      	b.n	800d440 <_printf_float+0xbc>
 800d65c:	930a      	str	r3, [sp, #40]	; 0x28
 800d65e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800d660:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d662:	425b      	negs	r3, r3
 800d664:	4293      	cmp	r3, r2
 800d666:	dc01      	bgt.n	800d66c <_printf_float+0x2e8>
 800d668:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d66a:	e791      	b.n	800d590 <_printf_float+0x20c>
 800d66c:	0022      	movs	r2, r4
 800d66e:	2301      	movs	r3, #1
 800d670:	0038      	movs	r0, r7
 800d672:	9908      	ldr	r1, [sp, #32]
 800d674:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d676:	321a      	adds	r2, #26
 800d678:	47b0      	blx	r6
 800d67a:	3001      	adds	r0, #1
 800d67c:	d100      	bne.n	800d680 <_printf_float+0x2fc>
 800d67e:	e6df      	b.n	800d440 <_printf_float+0xbc>
 800d680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d682:	3301      	adds	r3, #1
 800d684:	e7ea      	b.n	800d65c <_printf_float+0x2d8>
 800d686:	46c0      	nop			; (mov r8, r8)
 800d688:	7fefffff 	.word	0x7fefffff
 800d68c:	08011559 	.word	0x08011559
 800d690:	0801155d 	.word	0x0801155d
 800d694:	08011561 	.word	0x08011561
 800d698:	08011565 	.word	0x08011565
 800d69c:	08011569 	.word	0x08011569
 800d6a0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800d6a2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6a4:	920a      	str	r2, [sp, #40]	; 0x28
 800d6a6:	429a      	cmp	r2, r3
 800d6a8:	dd00      	ble.n	800d6ac <_printf_float+0x328>
 800d6aa:	930a      	str	r3, [sp, #40]	; 0x28
 800d6ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6ae:	2b00      	cmp	r3, #0
 800d6b0:	dc3d      	bgt.n	800d72e <_printf_float+0x3aa>
 800d6b2:	2300      	movs	r3, #0
 800d6b4:	930e      	str	r3, [sp, #56]	; 0x38
 800d6b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d6b8:	43db      	mvns	r3, r3
 800d6ba:	17db      	asrs	r3, r3, #31
 800d6bc:	930f      	str	r3, [sp, #60]	; 0x3c
 800d6be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800d6c0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d6c2:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6c4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800d6c6:	4013      	ands	r3, r2
 800d6c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d6ca:	1ad3      	subs	r3, r2, r3
 800d6cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d6ce:	4293      	cmp	r3, r2
 800d6d0:	dc36      	bgt.n	800d740 <_printf_float+0x3bc>
 800d6d2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6d4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d6d6:	429a      	cmp	r2, r3
 800d6d8:	db40      	blt.n	800d75c <_printf_float+0x3d8>
 800d6da:	6823      	ldr	r3, [r4, #0]
 800d6dc:	07db      	lsls	r3, r3, #31
 800d6de:	d43d      	bmi.n	800d75c <_printf_float+0x3d8>
 800d6e0:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800d6e2:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d6e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d6e6:	1af3      	subs	r3, r6, r3
 800d6e8:	1ab6      	subs	r6, r6, r2
 800d6ea:	429e      	cmp	r6, r3
 800d6ec:	dd00      	ble.n	800d6f0 <_printf_float+0x36c>
 800d6ee:	001e      	movs	r6, r3
 800d6f0:	2e00      	cmp	r6, #0
 800d6f2:	dc3c      	bgt.n	800d76e <_printf_float+0x3ea>
 800d6f4:	2300      	movs	r3, #0
 800d6f6:	930a      	str	r3, [sp, #40]	; 0x28
 800d6f8:	43f3      	mvns	r3, r6
 800d6fa:	17db      	asrs	r3, r3, #31
 800d6fc:	930b      	str	r3, [sp, #44]	; 0x2c
 800d6fe:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800d700:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d702:	1a9b      	subs	r3, r3, r2
 800d704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800d706:	4032      	ands	r2, r6
 800d708:	1a9b      	subs	r3, r3, r2
 800d70a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800d70c:	4293      	cmp	r3, r2
 800d70e:	dc00      	bgt.n	800d712 <_printf_float+0x38e>
 800d710:	e770      	b.n	800d5f4 <_printf_float+0x270>
 800d712:	0022      	movs	r2, r4
 800d714:	2301      	movs	r3, #1
 800d716:	0038      	movs	r0, r7
 800d718:	9908      	ldr	r1, [sp, #32]
 800d71a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d71c:	321a      	adds	r2, #26
 800d71e:	47a8      	blx	r5
 800d720:	3001      	adds	r0, #1
 800d722:	d100      	bne.n	800d726 <_printf_float+0x3a2>
 800d724:	e68c      	b.n	800d440 <_printf_float+0xbc>
 800d726:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d728:	3301      	adds	r3, #1
 800d72a:	930a      	str	r3, [sp, #40]	; 0x28
 800d72c:	e7e7      	b.n	800d6fe <_printf_float+0x37a>
 800d72e:	002a      	movs	r2, r5
 800d730:	0038      	movs	r0, r7
 800d732:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d734:	9908      	ldr	r1, [sp, #32]
 800d736:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d738:	47b0      	blx	r6
 800d73a:	3001      	adds	r0, #1
 800d73c:	d1b9      	bne.n	800d6b2 <_printf_float+0x32e>
 800d73e:	e67f      	b.n	800d440 <_printf_float+0xbc>
 800d740:	0022      	movs	r2, r4
 800d742:	2301      	movs	r3, #1
 800d744:	0038      	movs	r0, r7
 800d746:	9908      	ldr	r1, [sp, #32]
 800d748:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d74a:	321a      	adds	r2, #26
 800d74c:	47b0      	blx	r6
 800d74e:	3001      	adds	r0, #1
 800d750:	d100      	bne.n	800d754 <_printf_float+0x3d0>
 800d752:	e675      	b.n	800d440 <_printf_float+0xbc>
 800d754:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800d756:	3301      	adds	r3, #1
 800d758:	930e      	str	r3, [sp, #56]	; 0x38
 800d75a:	e7b0      	b.n	800d6be <_printf_float+0x33a>
 800d75c:	0038      	movs	r0, r7
 800d75e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d760:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d762:	9908      	ldr	r1, [sp, #32]
 800d764:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d766:	47b0      	blx	r6
 800d768:	3001      	adds	r0, #1
 800d76a:	d1b9      	bne.n	800d6e0 <_printf_float+0x35c>
 800d76c:	e668      	b.n	800d440 <_printf_float+0xbc>
 800d76e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d770:	0038      	movs	r0, r7
 800d772:	18ea      	adds	r2, r5, r3
 800d774:	9908      	ldr	r1, [sp, #32]
 800d776:	0033      	movs	r3, r6
 800d778:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d77a:	47a8      	blx	r5
 800d77c:	3001      	adds	r0, #1
 800d77e:	d1b9      	bne.n	800d6f4 <_printf_float+0x370>
 800d780:	e65e      	b.n	800d440 <_printf_float+0xbc>
 800d782:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d784:	2b01      	cmp	r3, #1
 800d786:	dc02      	bgt.n	800d78e <_printf_float+0x40a>
 800d788:	2301      	movs	r3, #1
 800d78a:	421a      	tst	r2, r3
 800d78c:	d03a      	beq.n	800d804 <_printf_float+0x480>
 800d78e:	2301      	movs	r3, #1
 800d790:	002a      	movs	r2, r5
 800d792:	0038      	movs	r0, r7
 800d794:	9908      	ldr	r1, [sp, #32]
 800d796:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d798:	47b0      	blx	r6
 800d79a:	3001      	adds	r0, #1
 800d79c:	d100      	bne.n	800d7a0 <_printf_float+0x41c>
 800d79e:	e64f      	b.n	800d440 <_printf_float+0xbc>
 800d7a0:	0038      	movs	r0, r7
 800d7a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d7a4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800d7a6:	9908      	ldr	r1, [sp, #32]
 800d7a8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d7aa:	47b0      	blx	r6
 800d7ac:	3001      	adds	r0, #1
 800d7ae:	d100      	bne.n	800d7b2 <_printf_float+0x42e>
 800d7b0:	e646      	b.n	800d440 <_printf_float+0xbc>
 800d7b2:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 800d7b4:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 800d7b6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d7b8:	2200      	movs	r2, #0
 800d7ba:	001e      	movs	r6, r3
 800d7bc:	2300      	movs	r3, #0
 800d7be:	f7f2 fe4f 	bl	8000460 <__aeabi_dcmpeq>
 800d7c2:	2800      	cmp	r0, #0
 800d7c4:	d11c      	bne.n	800d800 <_printf_float+0x47c>
 800d7c6:	0033      	movs	r3, r6
 800d7c8:	1c6a      	adds	r2, r5, #1
 800d7ca:	3b01      	subs	r3, #1
 800d7cc:	0038      	movs	r0, r7
 800d7ce:	9908      	ldr	r1, [sp, #32]
 800d7d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800d7d2:	47a8      	blx	r5
 800d7d4:	3001      	adds	r0, #1
 800d7d6:	d10f      	bne.n	800d7f8 <_printf_float+0x474>
 800d7d8:	e632      	b.n	800d440 <_printf_float+0xbc>
 800d7da:	0022      	movs	r2, r4
 800d7dc:	2301      	movs	r3, #1
 800d7de:	0038      	movs	r0, r7
 800d7e0:	9908      	ldr	r1, [sp, #32]
 800d7e2:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d7e4:	321a      	adds	r2, #26
 800d7e6:	47b0      	blx	r6
 800d7e8:	3001      	adds	r0, #1
 800d7ea:	d100      	bne.n	800d7ee <_printf_float+0x46a>
 800d7ec:	e628      	b.n	800d440 <_printf_float+0xbc>
 800d7ee:	3501      	adds	r5, #1
 800d7f0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800d7f2:	3b01      	subs	r3, #1
 800d7f4:	42ab      	cmp	r3, r5
 800d7f6:	dcf0      	bgt.n	800d7da <_printf_float+0x456>
 800d7f8:	0022      	movs	r2, r4
 800d7fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d7fc:	3250      	adds	r2, #80	; 0x50
 800d7fe:	e6c8      	b.n	800d592 <_printf_float+0x20e>
 800d800:	2500      	movs	r5, #0
 800d802:	e7f5      	b.n	800d7f0 <_printf_float+0x46c>
 800d804:	002a      	movs	r2, r5
 800d806:	e7e1      	b.n	800d7cc <_printf_float+0x448>
 800d808:	0022      	movs	r2, r4
 800d80a:	2301      	movs	r3, #1
 800d80c:	0038      	movs	r0, r7
 800d80e:	9908      	ldr	r1, [sp, #32]
 800d810:	9e09      	ldr	r6, [sp, #36]	; 0x24
 800d812:	3219      	adds	r2, #25
 800d814:	47b0      	blx	r6
 800d816:	3001      	adds	r0, #1
 800d818:	d100      	bne.n	800d81c <_printf_float+0x498>
 800d81a:	e611      	b.n	800d440 <_printf_float+0xbc>
 800d81c:	3501      	adds	r5, #1
 800d81e:	68e3      	ldr	r3, [r4, #12]
 800d820:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800d822:	1a9b      	subs	r3, r3, r2
 800d824:	42ab      	cmp	r3, r5
 800d826:	dcef      	bgt.n	800d808 <_printf_float+0x484>
 800d828:	e6e8      	b.n	800d5fc <_printf_float+0x278>
 800d82a:	2500      	movs	r5, #0
 800d82c:	e7f7      	b.n	800d81e <_printf_float+0x49a>
 800d82e:	46c0      	nop			; (mov r8, r8)

0800d830 <_printf_common>:
 800d830:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d832:	0016      	movs	r6, r2
 800d834:	9301      	str	r3, [sp, #4]
 800d836:	688a      	ldr	r2, [r1, #8]
 800d838:	690b      	ldr	r3, [r1, #16]
 800d83a:	000c      	movs	r4, r1
 800d83c:	9000      	str	r0, [sp, #0]
 800d83e:	4293      	cmp	r3, r2
 800d840:	da00      	bge.n	800d844 <_printf_common+0x14>
 800d842:	0013      	movs	r3, r2
 800d844:	0022      	movs	r2, r4
 800d846:	6033      	str	r3, [r6, #0]
 800d848:	3243      	adds	r2, #67	; 0x43
 800d84a:	7812      	ldrb	r2, [r2, #0]
 800d84c:	2a00      	cmp	r2, #0
 800d84e:	d001      	beq.n	800d854 <_printf_common+0x24>
 800d850:	3301      	adds	r3, #1
 800d852:	6033      	str	r3, [r6, #0]
 800d854:	6823      	ldr	r3, [r4, #0]
 800d856:	069b      	lsls	r3, r3, #26
 800d858:	d502      	bpl.n	800d860 <_printf_common+0x30>
 800d85a:	6833      	ldr	r3, [r6, #0]
 800d85c:	3302      	adds	r3, #2
 800d85e:	6033      	str	r3, [r6, #0]
 800d860:	6822      	ldr	r2, [r4, #0]
 800d862:	2306      	movs	r3, #6
 800d864:	0015      	movs	r5, r2
 800d866:	401d      	ands	r5, r3
 800d868:	421a      	tst	r2, r3
 800d86a:	d027      	beq.n	800d8bc <_printf_common+0x8c>
 800d86c:	0023      	movs	r3, r4
 800d86e:	3343      	adds	r3, #67	; 0x43
 800d870:	781b      	ldrb	r3, [r3, #0]
 800d872:	1e5a      	subs	r2, r3, #1
 800d874:	4193      	sbcs	r3, r2
 800d876:	6822      	ldr	r2, [r4, #0]
 800d878:	0692      	lsls	r2, r2, #26
 800d87a:	d430      	bmi.n	800d8de <_printf_common+0xae>
 800d87c:	0022      	movs	r2, r4
 800d87e:	9901      	ldr	r1, [sp, #4]
 800d880:	9800      	ldr	r0, [sp, #0]
 800d882:	9d08      	ldr	r5, [sp, #32]
 800d884:	3243      	adds	r2, #67	; 0x43
 800d886:	47a8      	blx	r5
 800d888:	3001      	adds	r0, #1
 800d88a:	d025      	beq.n	800d8d8 <_printf_common+0xa8>
 800d88c:	2206      	movs	r2, #6
 800d88e:	6823      	ldr	r3, [r4, #0]
 800d890:	2500      	movs	r5, #0
 800d892:	4013      	ands	r3, r2
 800d894:	2b04      	cmp	r3, #4
 800d896:	d105      	bne.n	800d8a4 <_printf_common+0x74>
 800d898:	6833      	ldr	r3, [r6, #0]
 800d89a:	68e5      	ldr	r5, [r4, #12]
 800d89c:	1aed      	subs	r5, r5, r3
 800d89e:	43eb      	mvns	r3, r5
 800d8a0:	17db      	asrs	r3, r3, #31
 800d8a2:	401d      	ands	r5, r3
 800d8a4:	68a3      	ldr	r3, [r4, #8]
 800d8a6:	6922      	ldr	r2, [r4, #16]
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	dd01      	ble.n	800d8b0 <_printf_common+0x80>
 800d8ac:	1a9b      	subs	r3, r3, r2
 800d8ae:	18ed      	adds	r5, r5, r3
 800d8b0:	2600      	movs	r6, #0
 800d8b2:	42b5      	cmp	r5, r6
 800d8b4:	d120      	bne.n	800d8f8 <_printf_common+0xc8>
 800d8b6:	2000      	movs	r0, #0
 800d8b8:	e010      	b.n	800d8dc <_printf_common+0xac>
 800d8ba:	3501      	adds	r5, #1
 800d8bc:	68e3      	ldr	r3, [r4, #12]
 800d8be:	6832      	ldr	r2, [r6, #0]
 800d8c0:	1a9b      	subs	r3, r3, r2
 800d8c2:	42ab      	cmp	r3, r5
 800d8c4:	ddd2      	ble.n	800d86c <_printf_common+0x3c>
 800d8c6:	0022      	movs	r2, r4
 800d8c8:	2301      	movs	r3, #1
 800d8ca:	9901      	ldr	r1, [sp, #4]
 800d8cc:	9800      	ldr	r0, [sp, #0]
 800d8ce:	9f08      	ldr	r7, [sp, #32]
 800d8d0:	3219      	adds	r2, #25
 800d8d2:	47b8      	blx	r7
 800d8d4:	3001      	adds	r0, #1
 800d8d6:	d1f0      	bne.n	800d8ba <_printf_common+0x8a>
 800d8d8:	2001      	movs	r0, #1
 800d8da:	4240      	negs	r0, r0
 800d8dc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800d8de:	2030      	movs	r0, #48	; 0x30
 800d8e0:	18e1      	adds	r1, r4, r3
 800d8e2:	3143      	adds	r1, #67	; 0x43
 800d8e4:	7008      	strb	r0, [r1, #0]
 800d8e6:	0021      	movs	r1, r4
 800d8e8:	1c5a      	adds	r2, r3, #1
 800d8ea:	3145      	adds	r1, #69	; 0x45
 800d8ec:	7809      	ldrb	r1, [r1, #0]
 800d8ee:	18a2      	adds	r2, r4, r2
 800d8f0:	3243      	adds	r2, #67	; 0x43
 800d8f2:	3302      	adds	r3, #2
 800d8f4:	7011      	strb	r1, [r2, #0]
 800d8f6:	e7c1      	b.n	800d87c <_printf_common+0x4c>
 800d8f8:	0022      	movs	r2, r4
 800d8fa:	2301      	movs	r3, #1
 800d8fc:	9901      	ldr	r1, [sp, #4]
 800d8fe:	9800      	ldr	r0, [sp, #0]
 800d900:	9f08      	ldr	r7, [sp, #32]
 800d902:	321a      	adds	r2, #26
 800d904:	47b8      	blx	r7
 800d906:	3001      	adds	r0, #1
 800d908:	d0e6      	beq.n	800d8d8 <_printf_common+0xa8>
 800d90a:	3601      	adds	r6, #1
 800d90c:	e7d1      	b.n	800d8b2 <_printf_common+0x82>
	...

0800d910 <_printf_i>:
 800d910:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d912:	b08b      	sub	sp, #44	; 0x2c
 800d914:	9206      	str	r2, [sp, #24]
 800d916:	000a      	movs	r2, r1
 800d918:	3243      	adds	r2, #67	; 0x43
 800d91a:	9307      	str	r3, [sp, #28]
 800d91c:	9005      	str	r0, [sp, #20]
 800d91e:	9204      	str	r2, [sp, #16]
 800d920:	7e0a      	ldrb	r2, [r1, #24]
 800d922:	000c      	movs	r4, r1
 800d924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d926:	2a78      	cmp	r2, #120	; 0x78
 800d928:	d809      	bhi.n	800d93e <_printf_i+0x2e>
 800d92a:	2a62      	cmp	r2, #98	; 0x62
 800d92c:	d80b      	bhi.n	800d946 <_printf_i+0x36>
 800d92e:	2a00      	cmp	r2, #0
 800d930:	d100      	bne.n	800d934 <_printf_i+0x24>
 800d932:	e0be      	b.n	800dab2 <_printf_i+0x1a2>
 800d934:	497c      	ldr	r1, [pc, #496]	; (800db28 <_printf_i+0x218>)
 800d936:	9103      	str	r1, [sp, #12]
 800d938:	2a58      	cmp	r2, #88	; 0x58
 800d93a:	d100      	bne.n	800d93e <_printf_i+0x2e>
 800d93c:	e093      	b.n	800da66 <_printf_i+0x156>
 800d93e:	0026      	movs	r6, r4
 800d940:	3642      	adds	r6, #66	; 0x42
 800d942:	7032      	strb	r2, [r6, #0]
 800d944:	e022      	b.n	800d98c <_printf_i+0x7c>
 800d946:	0010      	movs	r0, r2
 800d948:	3863      	subs	r0, #99	; 0x63
 800d94a:	2815      	cmp	r0, #21
 800d94c:	d8f7      	bhi.n	800d93e <_printf_i+0x2e>
 800d94e:	f7f2 fbf7 	bl	8000140 <__gnu_thumb1_case_shi>
 800d952:	0016      	.short	0x0016
 800d954:	fff6001f 	.word	0xfff6001f
 800d958:	fff6fff6 	.word	0xfff6fff6
 800d95c:	001ffff6 	.word	0x001ffff6
 800d960:	fff6fff6 	.word	0xfff6fff6
 800d964:	fff6fff6 	.word	0xfff6fff6
 800d968:	003600a3 	.word	0x003600a3
 800d96c:	fff60083 	.word	0xfff60083
 800d970:	00b4fff6 	.word	0x00b4fff6
 800d974:	0036fff6 	.word	0x0036fff6
 800d978:	fff6fff6 	.word	0xfff6fff6
 800d97c:	0087      	.short	0x0087
 800d97e:	0026      	movs	r6, r4
 800d980:	681a      	ldr	r2, [r3, #0]
 800d982:	3642      	adds	r6, #66	; 0x42
 800d984:	1d11      	adds	r1, r2, #4
 800d986:	6019      	str	r1, [r3, #0]
 800d988:	6813      	ldr	r3, [r2, #0]
 800d98a:	7033      	strb	r3, [r6, #0]
 800d98c:	2301      	movs	r3, #1
 800d98e:	e0a2      	b.n	800dad6 <_printf_i+0x1c6>
 800d990:	6818      	ldr	r0, [r3, #0]
 800d992:	6809      	ldr	r1, [r1, #0]
 800d994:	1d02      	adds	r2, r0, #4
 800d996:	060d      	lsls	r5, r1, #24
 800d998:	d50b      	bpl.n	800d9b2 <_printf_i+0xa2>
 800d99a:	6805      	ldr	r5, [r0, #0]
 800d99c:	601a      	str	r2, [r3, #0]
 800d99e:	2d00      	cmp	r5, #0
 800d9a0:	da03      	bge.n	800d9aa <_printf_i+0x9a>
 800d9a2:	232d      	movs	r3, #45	; 0x2d
 800d9a4:	9a04      	ldr	r2, [sp, #16]
 800d9a6:	426d      	negs	r5, r5
 800d9a8:	7013      	strb	r3, [r2, #0]
 800d9aa:	4b5f      	ldr	r3, [pc, #380]	; (800db28 <_printf_i+0x218>)
 800d9ac:	270a      	movs	r7, #10
 800d9ae:	9303      	str	r3, [sp, #12]
 800d9b0:	e01b      	b.n	800d9ea <_printf_i+0xda>
 800d9b2:	6805      	ldr	r5, [r0, #0]
 800d9b4:	601a      	str	r2, [r3, #0]
 800d9b6:	0649      	lsls	r1, r1, #25
 800d9b8:	d5f1      	bpl.n	800d99e <_printf_i+0x8e>
 800d9ba:	b22d      	sxth	r5, r5
 800d9bc:	e7ef      	b.n	800d99e <_printf_i+0x8e>
 800d9be:	680d      	ldr	r5, [r1, #0]
 800d9c0:	6819      	ldr	r1, [r3, #0]
 800d9c2:	1d08      	adds	r0, r1, #4
 800d9c4:	6018      	str	r0, [r3, #0]
 800d9c6:	062e      	lsls	r6, r5, #24
 800d9c8:	d501      	bpl.n	800d9ce <_printf_i+0xbe>
 800d9ca:	680d      	ldr	r5, [r1, #0]
 800d9cc:	e003      	b.n	800d9d6 <_printf_i+0xc6>
 800d9ce:	066d      	lsls	r5, r5, #25
 800d9d0:	d5fb      	bpl.n	800d9ca <_printf_i+0xba>
 800d9d2:	680d      	ldr	r5, [r1, #0]
 800d9d4:	b2ad      	uxth	r5, r5
 800d9d6:	4b54      	ldr	r3, [pc, #336]	; (800db28 <_printf_i+0x218>)
 800d9d8:	2708      	movs	r7, #8
 800d9da:	9303      	str	r3, [sp, #12]
 800d9dc:	2a6f      	cmp	r2, #111	; 0x6f
 800d9de:	d000      	beq.n	800d9e2 <_printf_i+0xd2>
 800d9e0:	3702      	adds	r7, #2
 800d9e2:	0023      	movs	r3, r4
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	3343      	adds	r3, #67	; 0x43
 800d9e8:	701a      	strb	r2, [r3, #0]
 800d9ea:	6863      	ldr	r3, [r4, #4]
 800d9ec:	60a3      	str	r3, [r4, #8]
 800d9ee:	2b00      	cmp	r3, #0
 800d9f0:	db03      	blt.n	800d9fa <_printf_i+0xea>
 800d9f2:	2104      	movs	r1, #4
 800d9f4:	6822      	ldr	r2, [r4, #0]
 800d9f6:	438a      	bics	r2, r1
 800d9f8:	6022      	str	r2, [r4, #0]
 800d9fa:	2d00      	cmp	r5, #0
 800d9fc:	d102      	bne.n	800da04 <_printf_i+0xf4>
 800d9fe:	9e04      	ldr	r6, [sp, #16]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00c      	beq.n	800da1e <_printf_i+0x10e>
 800da04:	9e04      	ldr	r6, [sp, #16]
 800da06:	0028      	movs	r0, r5
 800da08:	0039      	movs	r1, r7
 800da0a:	f7f2 fc29 	bl	8000260 <__aeabi_uidivmod>
 800da0e:	9b03      	ldr	r3, [sp, #12]
 800da10:	3e01      	subs	r6, #1
 800da12:	5c5b      	ldrb	r3, [r3, r1]
 800da14:	7033      	strb	r3, [r6, #0]
 800da16:	002b      	movs	r3, r5
 800da18:	0005      	movs	r5, r0
 800da1a:	429f      	cmp	r7, r3
 800da1c:	d9f3      	bls.n	800da06 <_printf_i+0xf6>
 800da1e:	2f08      	cmp	r7, #8
 800da20:	d109      	bne.n	800da36 <_printf_i+0x126>
 800da22:	6823      	ldr	r3, [r4, #0]
 800da24:	07db      	lsls	r3, r3, #31
 800da26:	d506      	bpl.n	800da36 <_printf_i+0x126>
 800da28:	6862      	ldr	r2, [r4, #4]
 800da2a:	6923      	ldr	r3, [r4, #16]
 800da2c:	429a      	cmp	r2, r3
 800da2e:	dc02      	bgt.n	800da36 <_printf_i+0x126>
 800da30:	2330      	movs	r3, #48	; 0x30
 800da32:	3e01      	subs	r6, #1
 800da34:	7033      	strb	r3, [r6, #0]
 800da36:	9b04      	ldr	r3, [sp, #16]
 800da38:	1b9b      	subs	r3, r3, r6
 800da3a:	6123      	str	r3, [r4, #16]
 800da3c:	9b07      	ldr	r3, [sp, #28]
 800da3e:	0021      	movs	r1, r4
 800da40:	9300      	str	r3, [sp, #0]
 800da42:	9805      	ldr	r0, [sp, #20]
 800da44:	9b06      	ldr	r3, [sp, #24]
 800da46:	aa09      	add	r2, sp, #36	; 0x24
 800da48:	f7ff fef2 	bl	800d830 <_printf_common>
 800da4c:	3001      	adds	r0, #1
 800da4e:	d147      	bne.n	800dae0 <_printf_i+0x1d0>
 800da50:	2001      	movs	r0, #1
 800da52:	4240      	negs	r0, r0
 800da54:	b00b      	add	sp, #44	; 0x2c
 800da56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da58:	2220      	movs	r2, #32
 800da5a:	6809      	ldr	r1, [r1, #0]
 800da5c:	430a      	orrs	r2, r1
 800da5e:	6022      	str	r2, [r4, #0]
 800da60:	2278      	movs	r2, #120	; 0x78
 800da62:	4932      	ldr	r1, [pc, #200]	; (800db2c <_printf_i+0x21c>)
 800da64:	9103      	str	r1, [sp, #12]
 800da66:	0021      	movs	r1, r4
 800da68:	3145      	adds	r1, #69	; 0x45
 800da6a:	700a      	strb	r2, [r1, #0]
 800da6c:	6819      	ldr	r1, [r3, #0]
 800da6e:	6822      	ldr	r2, [r4, #0]
 800da70:	c920      	ldmia	r1!, {r5}
 800da72:	0610      	lsls	r0, r2, #24
 800da74:	d402      	bmi.n	800da7c <_printf_i+0x16c>
 800da76:	0650      	lsls	r0, r2, #25
 800da78:	d500      	bpl.n	800da7c <_printf_i+0x16c>
 800da7a:	b2ad      	uxth	r5, r5
 800da7c:	6019      	str	r1, [r3, #0]
 800da7e:	07d3      	lsls	r3, r2, #31
 800da80:	d502      	bpl.n	800da88 <_printf_i+0x178>
 800da82:	2320      	movs	r3, #32
 800da84:	4313      	orrs	r3, r2
 800da86:	6023      	str	r3, [r4, #0]
 800da88:	2710      	movs	r7, #16
 800da8a:	2d00      	cmp	r5, #0
 800da8c:	d1a9      	bne.n	800d9e2 <_printf_i+0xd2>
 800da8e:	2220      	movs	r2, #32
 800da90:	6823      	ldr	r3, [r4, #0]
 800da92:	4393      	bics	r3, r2
 800da94:	6023      	str	r3, [r4, #0]
 800da96:	e7a4      	b.n	800d9e2 <_printf_i+0xd2>
 800da98:	681a      	ldr	r2, [r3, #0]
 800da9a:	680d      	ldr	r5, [r1, #0]
 800da9c:	1d10      	adds	r0, r2, #4
 800da9e:	6949      	ldr	r1, [r1, #20]
 800daa0:	6018      	str	r0, [r3, #0]
 800daa2:	6813      	ldr	r3, [r2, #0]
 800daa4:	062e      	lsls	r6, r5, #24
 800daa6:	d501      	bpl.n	800daac <_printf_i+0x19c>
 800daa8:	6019      	str	r1, [r3, #0]
 800daaa:	e002      	b.n	800dab2 <_printf_i+0x1a2>
 800daac:	066d      	lsls	r5, r5, #25
 800daae:	d5fb      	bpl.n	800daa8 <_printf_i+0x198>
 800dab0:	8019      	strh	r1, [r3, #0]
 800dab2:	2300      	movs	r3, #0
 800dab4:	9e04      	ldr	r6, [sp, #16]
 800dab6:	6123      	str	r3, [r4, #16]
 800dab8:	e7c0      	b.n	800da3c <_printf_i+0x12c>
 800daba:	681a      	ldr	r2, [r3, #0]
 800dabc:	1d11      	adds	r1, r2, #4
 800dabe:	6019      	str	r1, [r3, #0]
 800dac0:	6816      	ldr	r6, [r2, #0]
 800dac2:	2100      	movs	r1, #0
 800dac4:	0030      	movs	r0, r6
 800dac6:	6862      	ldr	r2, [r4, #4]
 800dac8:	f000 fac1 	bl	800e04e <memchr>
 800dacc:	2800      	cmp	r0, #0
 800dace:	d001      	beq.n	800dad4 <_printf_i+0x1c4>
 800dad0:	1b80      	subs	r0, r0, r6
 800dad2:	6060      	str	r0, [r4, #4]
 800dad4:	6863      	ldr	r3, [r4, #4]
 800dad6:	6123      	str	r3, [r4, #16]
 800dad8:	2300      	movs	r3, #0
 800dada:	9a04      	ldr	r2, [sp, #16]
 800dadc:	7013      	strb	r3, [r2, #0]
 800dade:	e7ad      	b.n	800da3c <_printf_i+0x12c>
 800dae0:	0032      	movs	r2, r6
 800dae2:	6923      	ldr	r3, [r4, #16]
 800dae4:	9906      	ldr	r1, [sp, #24]
 800dae6:	9805      	ldr	r0, [sp, #20]
 800dae8:	9d07      	ldr	r5, [sp, #28]
 800daea:	47a8      	blx	r5
 800daec:	3001      	adds	r0, #1
 800daee:	d0af      	beq.n	800da50 <_printf_i+0x140>
 800daf0:	6823      	ldr	r3, [r4, #0]
 800daf2:	079b      	lsls	r3, r3, #30
 800daf4:	d415      	bmi.n	800db22 <_printf_i+0x212>
 800daf6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800daf8:	68e0      	ldr	r0, [r4, #12]
 800dafa:	4298      	cmp	r0, r3
 800dafc:	daaa      	bge.n	800da54 <_printf_i+0x144>
 800dafe:	0018      	movs	r0, r3
 800db00:	e7a8      	b.n	800da54 <_printf_i+0x144>
 800db02:	0022      	movs	r2, r4
 800db04:	2301      	movs	r3, #1
 800db06:	9906      	ldr	r1, [sp, #24]
 800db08:	9805      	ldr	r0, [sp, #20]
 800db0a:	9e07      	ldr	r6, [sp, #28]
 800db0c:	3219      	adds	r2, #25
 800db0e:	47b0      	blx	r6
 800db10:	3001      	adds	r0, #1
 800db12:	d09d      	beq.n	800da50 <_printf_i+0x140>
 800db14:	3501      	adds	r5, #1
 800db16:	68e3      	ldr	r3, [r4, #12]
 800db18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db1a:	1a9b      	subs	r3, r3, r2
 800db1c:	42ab      	cmp	r3, r5
 800db1e:	dcf0      	bgt.n	800db02 <_printf_i+0x1f2>
 800db20:	e7e9      	b.n	800daf6 <_printf_i+0x1e6>
 800db22:	2500      	movs	r5, #0
 800db24:	e7f7      	b.n	800db16 <_printf_i+0x206>
 800db26:	46c0      	nop			; (mov r8, r8)
 800db28:	0801156b 	.word	0x0801156b
 800db2c:	0801157c 	.word	0x0801157c

0800db30 <std>:
 800db30:	2300      	movs	r3, #0
 800db32:	b510      	push	{r4, lr}
 800db34:	0004      	movs	r4, r0
 800db36:	6003      	str	r3, [r0, #0]
 800db38:	6043      	str	r3, [r0, #4]
 800db3a:	6083      	str	r3, [r0, #8]
 800db3c:	8181      	strh	r1, [r0, #12]
 800db3e:	6643      	str	r3, [r0, #100]	; 0x64
 800db40:	81c2      	strh	r2, [r0, #14]
 800db42:	6103      	str	r3, [r0, #16]
 800db44:	6143      	str	r3, [r0, #20]
 800db46:	6183      	str	r3, [r0, #24]
 800db48:	0019      	movs	r1, r3
 800db4a:	2208      	movs	r2, #8
 800db4c:	305c      	adds	r0, #92	; 0x5c
 800db4e:	f000 f92f 	bl	800ddb0 <memset>
 800db52:	4b0b      	ldr	r3, [pc, #44]	; (800db80 <std+0x50>)
 800db54:	6224      	str	r4, [r4, #32]
 800db56:	6263      	str	r3, [r4, #36]	; 0x24
 800db58:	4b0a      	ldr	r3, [pc, #40]	; (800db84 <std+0x54>)
 800db5a:	62a3      	str	r3, [r4, #40]	; 0x28
 800db5c:	4b0a      	ldr	r3, [pc, #40]	; (800db88 <std+0x58>)
 800db5e:	62e3      	str	r3, [r4, #44]	; 0x2c
 800db60:	4b0a      	ldr	r3, [pc, #40]	; (800db8c <std+0x5c>)
 800db62:	6323      	str	r3, [r4, #48]	; 0x30
 800db64:	4b0a      	ldr	r3, [pc, #40]	; (800db90 <std+0x60>)
 800db66:	429c      	cmp	r4, r3
 800db68:	d005      	beq.n	800db76 <std+0x46>
 800db6a:	4b0a      	ldr	r3, [pc, #40]	; (800db94 <std+0x64>)
 800db6c:	429c      	cmp	r4, r3
 800db6e:	d002      	beq.n	800db76 <std+0x46>
 800db70:	4b09      	ldr	r3, [pc, #36]	; (800db98 <std+0x68>)
 800db72:	429c      	cmp	r4, r3
 800db74:	d103      	bne.n	800db7e <std+0x4e>
 800db76:	0020      	movs	r0, r4
 800db78:	3058      	adds	r0, #88	; 0x58
 800db7a:	f000 fa5d 	bl	800e038 <__retarget_lock_init_recursive>
 800db7e:	bd10      	pop	{r4, pc}
 800db80:	0800dd19 	.word	0x0800dd19
 800db84:	0800dd41 	.word	0x0800dd41
 800db88:	0800dd79 	.word	0x0800dd79
 800db8c:	0800dda5 	.word	0x0800dda5
 800db90:	20003ba0 	.word	0x20003ba0
 800db94:	20003c08 	.word	0x20003c08
 800db98:	20003c70 	.word	0x20003c70

0800db9c <stdio_exit_handler>:
 800db9c:	b510      	push	{r4, lr}
 800db9e:	4a03      	ldr	r2, [pc, #12]	; (800dbac <stdio_exit_handler+0x10>)
 800dba0:	4903      	ldr	r1, [pc, #12]	; (800dbb0 <stdio_exit_handler+0x14>)
 800dba2:	4804      	ldr	r0, [pc, #16]	; (800dbb4 <stdio_exit_handler+0x18>)
 800dba4:	f000 f86c 	bl	800dc80 <_fwalk_sglue>
 800dba8:	bd10      	pop	{r4, pc}
 800dbaa:	46c0      	nop			; (mov r8, r8)
 800dbac:	2000001c 	.word	0x2000001c
 800dbb0:	0801056d 	.word	0x0801056d
 800dbb4:	20000194 	.word	0x20000194

0800dbb8 <cleanup_stdio>:
 800dbb8:	6841      	ldr	r1, [r0, #4]
 800dbba:	4b0b      	ldr	r3, [pc, #44]	; (800dbe8 <cleanup_stdio+0x30>)
 800dbbc:	b510      	push	{r4, lr}
 800dbbe:	0004      	movs	r4, r0
 800dbc0:	4299      	cmp	r1, r3
 800dbc2:	d001      	beq.n	800dbc8 <cleanup_stdio+0x10>
 800dbc4:	f002 fcd2 	bl	801056c <_fflush_r>
 800dbc8:	68a1      	ldr	r1, [r4, #8]
 800dbca:	4b08      	ldr	r3, [pc, #32]	; (800dbec <cleanup_stdio+0x34>)
 800dbcc:	4299      	cmp	r1, r3
 800dbce:	d002      	beq.n	800dbd6 <cleanup_stdio+0x1e>
 800dbd0:	0020      	movs	r0, r4
 800dbd2:	f002 fccb 	bl	801056c <_fflush_r>
 800dbd6:	68e1      	ldr	r1, [r4, #12]
 800dbd8:	4b05      	ldr	r3, [pc, #20]	; (800dbf0 <cleanup_stdio+0x38>)
 800dbda:	4299      	cmp	r1, r3
 800dbdc:	d002      	beq.n	800dbe4 <cleanup_stdio+0x2c>
 800dbde:	0020      	movs	r0, r4
 800dbe0:	f002 fcc4 	bl	801056c <_fflush_r>
 800dbe4:	bd10      	pop	{r4, pc}
 800dbe6:	46c0      	nop			; (mov r8, r8)
 800dbe8:	20003ba0 	.word	0x20003ba0
 800dbec:	20003c08 	.word	0x20003c08
 800dbf0:	20003c70 	.word	0x20003c70

0800dbf4 <global_stdio_init.part.0>:
 800dbf4:	b510      	push	{r4, lr}
 800dbf6:	4b09      	ldr	r3, [pc, #36]	; (800dc1c <global_stdio_init.part.0+0x28>)
 800dbf8:	4a09      	ldr	r2, [pc, #36]	; (800dc20 <global_stdio_init.part.0+0x2c>)
 800dbfa:	2104      	movs	r1, #4
 800dbfc:	601a      	str	r2, [r3, #0]
 800dbfe:	4809      	ldr	r0, [pc, #36]	; (800dc24 <global_stdio_init.part.0+0x30>)
 800dc00:	2200      	movs	r2, #0
 800dc02:	f7ff ff95 	bl	800db30 <std>
 800dc06:	2201      	movs	r2, #1
 800dc08:	2109      	movs	r1, #9
 800dc0a:	4807      	ldr	r0, [pc, #28]	; (800dc28 <global_stdio_init.part.0+0x34>)
 800dc0c:	f7ff ff90 	bl	800db30 <std>
 800dc10:	2202      	movs	r2, #2
 800dc12:	2112      	movs	r1, #18
 800dc14:	4805      	ldr	r0, [pc, #20]	; (800dc2c <global_stdio_init.part.0+0x38>)
 800dc16:	f7ff ff8b 	bl	800db30 <std>
 800dc1a:	bd10      	pop	{r4, pc}
 800dc1c:	20003cd8 	.word	0x20003cd8
 800dc20:	0800db9d 	.word	0x0800db9d
 800dc24:	20003ba0 	.word	0x20003ba0
 800dc28:	20003c08 	.word	0x20003c08
 800dc2c:	20003c70 	.word	0x20003c70

0800dc30 <__sfp_lock_acquire>:
 800dc30:	b510      	push	{r4, lr}
 800dc32:	4802      	ldr	r0, [pc, #8]	; (800dc3c <__sfp_lock_acquire+0xc>)
 800dc34:	f000 fa01 	bl	800e03a <__retarget_lock_acquire_recursive>
 800dc38:	bd10      	pop	{r4, pc}
 800dc3a:	46c0      	nop			; (mov r8, r8)
 800dc3c:	20003ce1 	.word	0x20003ce1

0800dc40 <__sfp_lock_release>:
 800dc40:	b510      	push	{r4, lr}
 800dc42:	4802      	ldr	r0, [pc, #8]	; (800dc4c <__sfp_lock_release+0xc>)
 800dc44:	f000 f9fa 	bl	800e03c <__retarget_lock_release_recursive>
 800dc48:	bd10      	pop	{r4, pc}
 800dc4a:	46c0      	nop			; (mov r8, r8)
 800dc4c:	20003ce1 	.word	0x20003ce1

0800dc50 <__sinit>:
 800dc50:	b510      	push	{r4, lr}
 800dc52:	0004      	movs	r4, r0
 800dc54:	f7ff ffec 	bl	800dc30 <__sfp_lock_acquire>
 800dc58:	6a23      	ldr	r3, [r4, #32]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	d002      	beq.n	800dc64 <__sinit+0x14>
 800dc5e:	f7ff ffef 	bl	800dc40 <__sfp_lock_release>
 800dc62:	bd10      	pop	{r4, pc}
 800dc64:	4b04      	ldr	r3, [pc, #16]	; (800dc78 <__sinit+0x28>)
 800dc66:	6223      	str	r3, [r4, #32]
 800dc68:	4b04      	ldr	r3, [pc, #16]	; (800dc7c <__sinit+0x2c>)
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	2b00      	cmp	r3, #0
 800dc6e:	d1f6      	bne.n	800dc5e <__sinit+0xe>
 800dc70:	f7ff ffc0 	bl	800dbf4 <global_stdio_init.part.0>
 800dc74:	e7f3      	b.n	800dc5e <__sinit+0xe>
 800dc76:	46c0      	nop			; (mov r8, r8)
 800dc78:	0800dbb9 	.word	0x0800dbb9
 800dc7c:	20003cd8 	.word	0x20003cd8

0800dc80 <_fwalk_sglue>:
 800dc80:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800dc82:	0014      	movs	r4, r2
 800dc84:	2600      	movs	r6, #0
 800dc86:	9000      	str	r0, [sp, #0]
 800dc88:	9101      	str	r1, [sp, #4]
 800dc8a:	68a5      	ldr	r5, [r4, #8]
 800dc8c:	6867      	ldr	r7, [r4, #4]
 800dc8e:	3f01      	subs	r7, #1
 800dc90:	d504      	bpl.n	800dc9c <_fwalk_sglue+0x1c>
 800dc92:	6824      	ldr	r4, [r4, #0]
 800dc94:	2c00      	cmp	r4, #0
 800dc96:	d1f8      	bne.n	800dc8a <_fwalk_sglue+0xa>
 800dc98:	0030      	movs	r0, r6
 800dc9a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800dc9c:	89ab      	ldrh	r3, [r5, #12]
 800dc9e:	2b01      	cmp	r3, #1
 800dca0:	d908      	bls.n	800dcb4 <_fwalk_sglue+0x34>
 800dca2:	220e      	movs	r2, #14
 800dca4:	5eab      	ldrsh	r3, [r5, r2]
 800dca6:	3301      	adds	r3, #1
 800dca8:	d004      	beq.n	800dcb4 <_fwalk_sglue+0x34>
 800dcaa:	0029      	movs	r1, r5
 800dcac:	9800      	ldr	r0, [sp, #0]
 800dcae:	9b01      	ldr	r3, [sp, #4]
 800dcb0:	4798      	blx	r3
 800dcb2:	4306      	orrs	r6, r0
 800dcb4:	3568      	adds	r5, #104	; 0x68
 800dcb6:	e7ea      	b.n	800dc8e <_fwalk_sglue+0xe>

0800dcb8 <iprintf>:
 800dcb8:	b40f      	push	{r0, r1, r2, r3}
 800dcba:	b507      	push	{r0, r1, r2, lr}
 800dcbc:	4905      	ldr	r1, [pc, #20]	; (800dcd4 <iprintf+0x1c>)
 800dcbe:	ab04      	add	r3, sp, #16
 800dcc0:	6808      	ldr	r0, [r1, #0]
 800dcc2:	cb04      	ldmia	r3!, {r2}
 800dcc4:	6881      	ldr	r1, [r0, #8]
 800dcc6:	9301      	str	r3, [sp, #4]
 800dcc8:	f002 faaa 	bl	8010220 <_vfiprintf_r>
 800dccc:	b003      	add	sp, #12
 800dcce:	bc08      	pop	{r3}
 800dcd0:	b004      	add	sp, #16
 800dcd2:	4718      	bx	r3
 800dcd4:	200001e0 	.word	0x200001e0

0800dcd8 <siprintf>:
 800dcd8:	b40e      	push	{r1, r2, r3}
 800dcda:	b500      	push	{lr}
 800dcdc:	490b      	ldr	r1, [pc, #44]	; (800dd0c <siprintf+0x34>)
 800dcde:	b09c      	sub	sp, #112	; 0x70
 800dce0:	ab1d      	add	r3, sp, #116	; 0x74
 800dce2:	9002      	str	r0, [sp, #8]
 800dce4:	9006      	str	r0, [sp, #24]
 800dce6:	9107      	str	r1, [sp, #28]
 800dce8:	9104      	str	r1, [sp, #16]
 800dcea:	4809      	ldr	r0, [pc, #36]	; (800dd10 <siprintf+0x38>)
 800dcec:	4909      	ldr	r1, [pc, #36]	; (800dd14 <siprintf+0x3c>)
 800dcee:	cb04      	ldmia	r3!, {r2}
 800dcf0:	9105      	str	r1, [sp, #20]
 800dcf2:	6800      	ldr	r0, [r0, #0]
 800dcf4:	a902      	add	r1, sp, #8
 800dcf6:	9301      	str	r3, [sp, #4]
 800dcf8:	f002 f96a 	bl	800ffd0 <_svfiprintf_r>
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	9b02      	ldr	r3, [sp, #8]
 800dd00:	701a      	strb	r2, [r3, #0]
 800dd02:	b01c      	add	sp, #112	; 0x70
 800dd04:	bc08      	pop	{r3}
 800dd06:	b003      	add	sp, #12
 800dd08:	4718      	bx	r3
 800dd0a:	46c0      	nop			; (mov r8, r8)
 800dd0c:	7fffffff 	.word	0x7fffffff
 800dd10:	200001e0 	.word	0x200001e0
 800dd14:	ffff0208 	.word	0xffff0208

0800dd18 <__sread>:
 800dd18:	b570      	push	{r4, r5, r6, lr}
 800dd1a:	000c      	movs	r4, r1
 800dd1c:	250e      	movs	r5, #14
 800dd1e:	5f49      	ldrsh	r1, [r1, r5]
 800dd20:	f000 f926 	bl	800df70 <_read_r>
 800dd24:	2800      	cmp	r0, #0
 800dd26:	db03      	blt.n	800dd30 <__sread+0x18>
 800dd28:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800dd2a:	181b      	adds	r3, r3, r0
 800dd2c:	6563      	str	r3, [r4, #84]	; 0x54
 800dd2e:	bd70      	pop	{r4, r5, r6, pc}
 800dd30:	89a3      	ldrh	r3, [r4, #12]
 800dd32:	4a02      	ldr	r2, [pc, #8]	; (800dd3c <__sread+0x24>)
 800dd34:	4013      	ands	r3, r2
 800dd36:	81a3      	strh	r3, [r4, #12]
 800dd38:	e7f9      	b.n	800dd2e <__sread+0x16>
 800dd3a:	46c0      	nop			; (mov r8, r8)
 800dd3c:	ffffefff 	.word	0xffffefff

0800dd40 <__swrite>:
 800dd40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd42:	001f      	movs	r7, r3
 800dd44:	898b      	ldrh	r3, [r1, #12]
 800dd46:	0005      	movs	r5, r0
 800dd48:	000c      	movs	r4, r1
 800dd4a:	0016      	movs	r6, r2
 800dd4c:	05db      	lsls	r3, r3, #23
 800dd4e:	d505      	bpl.n	800dd5c <__swrite+0x1c>
 800dd50:	230e      	movs	r3, #14
 800dd52:	5ec9      	ldrsh	r1, [r1, r3]
 800dd54:	2200      	movs	r2, #0
 800dd56:	2302      	movs	r3, #2
 800dd58:	f000 f8f6 	bl	800df48 <_lseek_r>
 800dd5c:	89a3      	ldrh	r3, [r4, #12]
 800dd5e:	4a05      	ldr	r2, [pc, #20]	; (800dd74 <__swrite+0x34>)
 800dd60:	0028      	movs	r0, r5
 800dd62:	4013      	ands	r3, r2
 800dd64:	81a3      	strh	r3, [r4, #12]
 800dd66:	0032      	movs	r2, r6
 800dd68:	230e      	movs	r3, #14
 800dd6a:	5ee1      	ldrsh	r1, [r4, r3]
 800dd6c:	003b      	movs	r3, r7
 800dd6e:	f000 f925 	bl	800dfbc <_write_r>
 800dd72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800dd74:	ffffefff 	.word	0xffffefff

0800dd78 <__sseek>:
 800dd78:	b570      	push	{r4, r5, r6, lr}
 800dd7a:	000c      	movs	r4, r1
 800dd7c:	250e      	movs	r5, #14
 800dd7e:	5f49      	ldrsh	r1, [r1, r5]
 800dd80:	f000 f8e2 	bl	800df48 <_lseek_r>
 800dd84:	89a3      	ldrh	r3, [r4, #12]
 800dd86:	1c42      	adds	r2, r0, #1
 800dd88:	d103      	bne.n	800dd92 <__sseek+0x1a>
 800dd8a:	4a05      	ldr	r2, [pc, #20]	; (800dda0 <__sseek+0x28>)
 800dd8c:	4013      	ands	r3, r2
 800dd8e:	81a3      	strh	r3, [r4, #12]
 800dd90:	bd70      	pop	{r4, r5, r6, pc}
 800dd92:	2280      	movs	r2, #128	; 0x80
 800dd94:	0152      	lsls	r2, r2, #5
 800dd96:	4313      	orrs	r3, r2
 800dd98:	81a3      	strh	r3, [r4, #12]
 800dd9a:	6560      	str	r0, [r4, #84]	; 0x54
 800dd9c:	e7f8      	b.n	800dd90 <__sseek+0x18>
 800dd9e:	46c0      	nop			; (mov r8, r8)
 800dda0:	ffffefff 	.word	0xffffefff

0800dda4 <__sclose>:
 800dda4:	b510      	push	{r4, lr}
 800dda6:	230e      	movs	r3, #14
 800dda8:	5ec9      	ldrsh	r1, [r1, r3]
 800ddaa:	f000 f8bb 	bl	800df24 <_close_r>
 800ddae:	bd10      	pop	{r4, pc}

0800ddb0 <memset>:
 800ddb0:	0003      	movs	r3, r0
 800ddb2:	1882      	adds	r2, r0, r2
 800ddb4:	4293      	cmp	r3, r2
 800ddb6:	d100      	bne.n	800ddba <memset+0xa>
 800ddb8:	4770      	bx	lr
 800ddba:	7019      	strb	r1, [r3, #0]
 800ddbc:	3301      	adds	r3, #1
 800ddbe:	e7f9      	b.n	800ddb4 <memset+0x4>

0800ddc0 <strchr>:
 800ddc0:	b2c9      	uxtb	r1, r1
 800ddc2:	7803      	ldrb	r3, [r0, #0]
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d004      	beq.n	800ddd2 <strchr+0x12>
 800ddc8:	428b      	cmp	r3, r1
 800ddca:	d100      	bne.n	800ddce <strchr+0xe>
 800ddcc:	4770      	bx	lr
 800ddce:	3001      	adds	r0, #1
 800ddd0:	e7f7      	b.n	800ddc2 <strchr+0x2>
 800ddd2:	424b      	negs	r3, r1
 800ddd4:	4159      	adcs	r1, r3
 800ddd6:	4249      	negs	r1, r1
 800ddd8:	4008      	ands	r0, r1
 800ddda:	e7f7      	b.n	800ddcc <strchr+0xc>

0800dddc <strncmp>:
 800dddc:	b530      	push	{r4, r5, lr}
 800ddde:	0005      	movs	r5, r0
 800dde0:	1e10      	subs	r0, r2, #0
 800dde2:	d00b      	beq.n	800ddfc <strncmp+0x20>
 800dde4:	2400      	movs	r4, #0
 800dde6:	3a01      	subs	r2, #1
 800dde8:	5d2b      	ldrb	r3, [r5, r4]
 800ddea:	5d08      	ldrb	r0, [r1, r4]
 800ddec:	4283      	cmp	r3, r0
 800ddee:	d104      	bne.n	800ddfa <strncmp+0x1e>
 800ddf0:	42a2      	cmp	r2, r4
 800ddf2:	d002      	beq.n	800ddfa <strncmp+0x1e>
 800ddf4:	3401      	adds	r4, #1
 800ddf6:	2b00      	cmp	r3, #0
 800ddf8:	d1f6      	bne.n	800dde8 <strncmp+0xc>
 800ddfa:	1a18      	subs	r0, r3, r0
 800ddfc:	bd30      	pop	{r4, r5, pc}

0800ddfe <strncpy>:
 800ddfe:	0003      	movs	r3, r0
 800de00:	b530      	push	{r4, r5, lr}
 800de02:	001d      	movs	r5, r3
 800de04:	2a00      	cmp	r2, #0
 800de06:	d006      	beq.n	800de16 <strncpy+0x18>
 800de08:	780c      	ldrb	r4, [r1, #0]
 800de0a:	3a01      	subs	r2, #1
 800de0c:	3301      	adds	r3, #1
 800de0e:	702c      	strb	r4, [r5, #0]
 800de10:	3101      	adds	r1, #1
 800de12:	2c00      	cmp	r4, #0
 800de14:	d1f5      	bne.n	800de02 <strncpy+0x4>
 800de16:	2100      	movs	r1, #0
 800de18:	189a      	adds	r2, r3, r2
 800de1a:	4293      	cmp	r3, r2
 800de1c:	d100      	bne.n	800de20 <strncpy+0x22>
 800de1e:	bd30      	pop	{r4, r5, pc}
 800de20:	7019      	strb	r1, [r3, #0]
 800de22:	3301      	adds	r3, #1
 800de24:	e7f9      	b.n	800de1a <strncpy+0x1c>
	...

0800de28 <strtok>:
 800de28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de2a:	4b16      	ldr	r3, [pc, #88]	; (800de84 <strtok+0x5c>)
 800de2c:	0005      	movs	r5, r0
 800de2e:	681f      	ldr	r7, [r3, #0]
 800de30:	000e      	movs	r6, r1
 800de32:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800de34:	2c00      	cmp	r4, #0
 800de36:	d11d      	bne.n	800de74 <strtok+0x4c>
 800de38:	2050      	movs	r0, #80	; 0x50
 800de3a:	f7fe fa37 	bl	800c2ac <malloc>
 800de3e:	1e02      	subs	r2, r0, #0
 800de40:	6478      	str	r0, [r7, #68]	; 0x44
 800de42:	d104      	bne.n	800de4e <strtok+0x26>
 800de44:	215b      	movs	r1, #91	; 0x5b
 800de46:	4b10      	ldr	r3, [pc, #64]	; (800de88 <strtok+0x60>)
 800de48:	4810      	ldr	r0, [pc, #64]	; (800de8c <strtok+0x64>)
 800de4a:	f000 f91b 	bl	800e084 <__assert_func>
 800de4e:	6004      	str	r4, [r0, #0]
 800de50:	6044      	str	r4, [r0, #4]
 800de52:	6084      	str	r4, [r0, #8]
 800de54:	60c4      	str	r4, [r0, #12]
 800de56:	6104      	str	r4, [r0, #16]
 800de58:	6144      	str	r4, [r0, #20]
 800de5a:	6184      	str	r4, [r0, #24]
 800de5c:	6284      	str	r4, [r0, #40]	; 0x28
 800de5e:	62c4      	str	r4, [r0, #44]	; 0x2c
 800de60:	6304      	str	r4, [r0, #48]	; 0x30
 800de62:	6344      	str	r4, [r0, #52]	; 0x34
 800de64:	6384      	str	r4, [r0, #56]	; 0x38
 800de66:	63c4      	str	r4, [r0, #60]	; 0x3c
 800de68:	6404      	str	r4, [r0, #64]	; 0x40
 800de6a:	6444      	str	r4, [r0, #68]	; 0x44
 800de6c:	6484      	str	r4, [r0, #72]	; 0x48
 800de6e:	64c4      	str	r4, [r0, #76]	; 0x4c
 800de70:	7704      	strb	r4, [r0, #28]
 800de72:	6244      	str	r4, [r0, #36]	; 0x24
 800de74:	0031      	movs	r1, r6
 800de76:	0028      	movs	r0, r5
 800de78:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800de7a:	2301      	movs	r3, #1
 800de7c:	f000 f808 	bl	800de90 <__strtok_r>
 800de80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de82:	46c0      	nop			; (mov r8, r8)
 800de84:	200001e0 	.word	0x200001e0
 800de88:	0801158d 	.word	0x0801158d
 800de8c:	080115a4 	.word	0x080115a4

0800de90 <__strtok_r>:
 800de90:	b5f0      	push	{r4, r5, r6, r7, lr}
 800de92:	2800      	cmp	r0, #0
 800de94:	d102      	bne.n	800de9c <__strtok_r+0xc>
 800de96:	6810      	ldr	r0, [r2, #0]
 800de98:	2800      	cmp	r0, #0
 800de9a:	d013      	beq.n	800dec4 <__strtok_r+0x34>
 800de9c:	0004      	movs	r4, r0
 800de9e:	0020      	movs	r0, r4
 800dea0:	000e      	movs	r6, r1
 800dea2:	7805      	ldrb	r5, [r0, #0]
 800dea4:	3401      	adds	r4, #1
 800dea6:	7837      	ldrb	r7, [r6, #0]
 800dea8:	2f00      	cmp	r7, #0
 800deaa:	d104      	bne.n	800deb6 <__strtok_r+0x26>
 800deac:	2d00      	cmp	r5, #0
 800deae:	d10f      	bne.n	800ded0 <__strtok_r+0x40>
 800deb0:	0028      	movs	r0, r5
 800deb2:	6015      	str	r5, [r2, #0]
 800deb4:	e006      	b.n	800dec4 <__strtok_r+0x34>
 800deb6:	3601      	adds	r6, #1
 800deb8:	42bd      	cmp	r5, r7
 800deba:	d1f4      	bne.n	800dea6 <__strtok_r+0x16>
 800debc:	2b00      	cmp	r3, #0
 800debe:	d1ee      	bne.n	800de9e <__strtok_r+0xe>
 800dec0:	6014      	str	r4, [r2, #0]
 800dec2:	7003      	strb	r3, [r0, #0]
 800dec4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800dec6:	002f      	movs	r7, r5
 800dec8:	e00f      	b.n	800deea <__strtok_r+0x5a>
 800deca:	3301      	adds	r3, #1
 800decc:	2e00      	cmp	r6, #0
 800dece:	d104      	bne.n	800deda <__strtok_r+0x4a>
 800ded0:	0023      	movs	r3, r4
 800ded2:	3401      	adds	r4, #1
 800ded4:	781d      	ldrb	r5, [r3, #0]
 800ded6:	0027      	movs	r7, r4
 800ded8:	000b      	movs	r3, r1
 800deda:	781e      	ldrb	r6, [r3, #0]
 800dedc:	42b5      	cmp	r5, r6
 800dede:	d1f4      	bne.n	800deca <__strtok_r+0x3a>
 800dee0:	2d00      	cmp	r5, #0
 800dee2:	d0f0      	beq.n	800dec6 <__strtok_r+0x36>
 800dee4:	2300      	movs	r3, #0
 800dee6:	3c01      	subs	r4, #1
 800dee8:	7023      	strb	r3, [r4, #0]
 800deea:	6017      	str	r7, [r2, #0]
 800deec:	e7ea      	b.n	800dec4 <__strtok_r+0x34>

0800deee <strstr>:
 800deee:	780a      	ldrb	r2, [r1, #0]
 800def0:	b530      	push	{r4, r5, lr}
 800def2:	2a00      	cmp	r2, #0
 800def4:	d10c      	bne.n	800df10 <strstr+0x22>
 800def6:	bd30      	pop	{r4, r5, pc}
 800def8:	429a      	cmp	r2, r3
 800defa:	d108      	bne.n	800df0e <strstr+0x20>
 800defc:	2301      	movs	r3, #1
 800defe:	5ccc      	ldrb	r4, [r1, r3]
 800df00:	2c00      	cmp	r4, #0
 800df02:	d0f8      	beq.n	800def6 <strstr+0x8>
 800df04:	5cc5      	ldrb	r5, [r0, r3]
 800df06:	42a5      	cmp	r5, r4
 800df08:	d101      	bne.n	800df0e <strstr+0x20>
 800df0a:	3301      	adds	r3, #1
 800df0c:	e7f7      	b.n	800defe <strstr+0x10>
 800df0e:	3001      	adds	r0, #1
 800df10:	7803      	ldrb	r3, [r0, #0]
 800df12:	2b00      	cmp	r3, #0
 800df14:	d1f0      	bne.n	800def8 <strstr+0xa>
 800df16:	0018      	movs	r0, r3
 800df18:	e7ed      	b.n	800def6 <strstr+0x8>
	...

0800df1c <_localeconv_r>:
 800df1c:	4800      	ldr	r0, [pc, #0]	; (800df20 <_localeconv_r+0x4>)
 800df1e:	4770      	bx	lr
 800df20:	20000118 	.word	0x20000118

0800df24 <_close_r>:
 800df24:	2300      	movs	r3, #0
 800df26:	b570      	push	{r4, r5, r6, lr}
 800df28:	4d06      	ldr	r5, [pc, #24]	; (800df44 <_close_r+0x20>)
 800df2a:	0004      	movs	r4, r0
 800df2c:	0008      	movs	r0, r1
 800df2e:	602b      	str	r3, [r5, #0]
 800df30:	f7f7 ff5d 	bl	8005dee <_close>
 800df34:	1c43      	adds	r3, r0, #1
 800df36:	d103      	bne.n	800df40 <_close_r+0x1c>
 800df38:	682b      	ldr	r3, [r5, #0]
 800df3a:	2b00      	cmp	r3, #0
 800df3c:	d000      	beq.n	800df40 <_close_r+0x1c>
 800df3e:	6023      	str	r3, [r4, #0]
 800df40:	bd70      	pop	{r4, r5, r6, pc}
 800df42:	46c0      	nop			; (mov r8, r8)
 800df44:	20003cdc 	.word	0x20003cdc

0800df48 <_lseek_r>:
 800df48:	b570      	push	{r4, r5, r6, lr}
 800df4a:	0004      	movs	r4, r0
 800df4c:	0008      	movs	r0, r1
 800df4e:	0011      	movs	r1, r2
 800df50:	001a      	movs	r2, r3
 800df52:	2300      	movs	r3, #0
 800df54:	4d05      	ldr	r5, [pc, #20]	; (800df6c <_lseek_r+0x24>)
 800df56:	602b      	str	r3, [r5, #0]
 800df58:	f7f7 ff6a 	bl	8005e30 <_lseek>
 800df5c:	1c43      	adds	r3, r0, #1
 800df5e:	d103      	bne.n	800df68 <_lseek_r+0x20>
 800df60:	682b      	ldr	r3, [r5, #0]
 800df62:	2b00      	cmp	r3, #0
 800df64:	d000      	beq.n	800df68 <_lseek_r+0x20>
 800df66:	6023      	str	r3, [r4, #0]
 800df68:	bd70      	pop	{r4, r5, r6, pc}
 800df6a:	46c0      	nop			; (mov r8, r8)
 800df6c:	20003cdc 	.word	0x20003cdc

0800df70 <_read_r>:
 800df70:	b570      	push	{r4, r5, r6, lr}
 800df72:	0004      	movs	r4, r0
 800df74:	0008      	movs	r0, r1
 800df76:	0011      	movs	r1, r2
 800df78:	001a      	movs	r2, r3
 800df7a:	2300      	movs	r3, #0
 800df7c:	4d05      	ldr	r5, [pc, #20]	; (800df94 <_read_r+0x24>)
 800df7e:	602b      	str	r3, [r5, #0]
 800df80:	f7f7 fefc 	bl	8005d7c <_read>
 800df84:	1c43      	adds	r3, r0, #1
 800df86:	d103      	bne.n	800df90 <_read_r+0x20>
 800df88:	682b      	ldr	r3, [r5, #0]
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d000      	beq.n	800df90 <_read_r+0x20>
 800df8e:	6023      	str	r3, [r4, #0]
 800df90:	bd70      	pop	{r4, r5, r6, pc}
 800df92:	46c0      	nop			; (mov r8, r8)
 800df94:	20003cdc 	.word	0x20003cdc

0800df98 <_sbrk_r>:
 800df98:	2300      	movs	r3, #0
 800df9a:	b570      	push	{r4, r5, r6, lr}
 800df9c:	4d06      	ldr	r5, [pc, #24]	; (800dfb8 <_sbrk_r+0x20>)
 800df9e:	0004      	movs	r4, r0
 800dfa0:	0008      	movs	r0, r1
 800dfa2:	602b      	str	r3, [r5, #0]
 800dfa4:	f7f7 ff50 	bl	8005e48 <_sbrk>
 800dfa8:	1c43      	adds	r3, r0, #1
 800dfaa:	d103      	bne.n	800dfb4 <_sbrk_r+0x1c>
 800dfac:	682b      	ldr	r3, [r5, #0]
 800dfae:	2b00      	cmp	r3, #0
 800dfb0:	d000      	beq.n	800dfb4 <_sbrk_r+0x1c>
 800dfb2:	6023      	str	r3, [r4, #0]
 800dfb4:	bd70      	pop	{r4, r5, r6, pc}
 800dfb6:	46c0      	nop			; (mov r8, r8)
 800dfb8:	20003cdc 	.word	0x20003cdc

0800dfbc <_write_r>:
 800dfbc:	b570      	push	{r4, r5, r6, lr}
 800dfbe:	0004      	movs	r4, r0
 800dfc0:	0008      	movs	r0, r1
 800dfc2:	0011      	movs	r1, r2
 800dfc4:	001a      	movs	r2, r3
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	4d05      	ldr	r5, [pc, #20]	; (800dfe0 <_write_r+0x24>)
 800dfca:	602b      	str	r3, [r5, #0]
 800dfcc:	f7f7 fef3 	bl	8005db6 <_write>
 800dfd0:	1c43      	adds	r3, r0, #1
 800dfd2:	d103      	bne.n	800dfdc <_write_r+0x20>
 800dfd4:	682b      	ldr	r3, [r5, #0]
 800dfd6:	2b00      	cmp	r3, #0
 800dfd8:	d000      	beq.n	800dfdc <_write_r+0x20>
 800dfda:	6023      	str	r3, [r4, #0]
 800dfdc:	bd70      	pop	{r4, r5, r6, pc}
 800dfde:	46c0      	nop			; (mov r8, r8)
 800dfe0:	20003cdc 	.word	0x20003cdc

0800dfe4 <__errno>:
 800dfe4:	4b01      	ldr	r3, [pc, #4]	; (800dfec <__errno+0x8>)
 800dfe6:	6818      	ldr	r0, [r3, #0]
 800dfe8:	4770      	bx	lr
 800dfea:	46c0      	nop			; (mov r8, r8)
 800dfec:	200001e0 	.word	0x200001e0

0800dff0 <__libc_init_array>:
 800dff0:	b570      	push	{r4, r5, r6, lr}
 800dff2:	2600      	movs	r6, #0
 800dff4:	4c0c      	ldr	r4, [pc, #48]	; (800e028 <__libc_init_array+0x38>)
 800dff6:	4d0d      	ldr	r5, [pc, #52]	; (800e02c <__libc_init_array+0x3c>)
 800dff8:	1b64      	subs	r4, r4, r5
 800dffa:	10a4      	asrs	r4, r4, #2
 800dffc:	42a6      	cmp	r6, r4
 800dffe:	d109      	bne.n	800e014 <__libc_init_array+0x24>
 800e000:	2600      	movs	r6, #0
 800e002:	f002 fcb1 	bl	8010968 <_init>
 800e006:	4c0a      	ldr	r4, [pc, #40]	; (800e030 <__libc_init_array+0x40>)
 800e008:	4d0a      	ldr	r5, [pc, #40]	; (800e034 <__libc_init_array+0x44>)
 800e00a:	1b64      	subs	r4, r4, r5
 800e00c:	10a4      	asrs	r4, r4, #2
 800e00e:	42a6      	cmp	r6, r4
 800e010:	d105      	bne.n	800e01e <__libc_init_array+0x2e>
 800e012:	bd70      	pop	{r4, r5, r6, pc}
 800e014:	00b3      	lsls	r3, r6, #2
 800e016:	58eb      	ldr	r3, [r5, r3]
 800e018:	4798      	blx	r3
 800e01a:	3601      	adds	r6, #1
 800e01c:	e7ee      	b.n	800dffc <__libc_init_array+0xc>
 800e01e:	00b3      	lsls	r3, r6, #2
 800e020:	58eb      	ldr	r3, [r5, r3]
 800e022:	4798      	blx	r3
 800e024:	3601      	adds	r6, #1
 800e026:	e7f2      	b.n	800e00e <__libc_init_array+0x1e>
 800e028:	08011890 	.word	0x08011890
 800e02c:	08011890 	.word	0x08011890
 800e030:	08011894 	.word	0x08011894
 800e034:	08011890 	.word	0x08011890

0800e038 <__retarget_lock_init_recursive>:
 800e038:	4770      	bx	lr

0800e03a <__retarget_lock_acquire_recursive>:
 800e03a:	4770      	bx	lr

0800e03c <__retarget_lock_release_recursive>:
 800e03c:	4770      	bx	lr

0800e03e <strcpy>:
 800e03e:	0003      	movs	r3, r0
 800e040:	780a      	ldrb	r2, [r1, #0]
 800e042:	3101      	adds	r1, #1
 800e044:	701a      	strb	r2, [r3, #0]
 800e046:	3301      	adds	r3, #1
 800e048:	2a00      	cmp	r2, #0
 800e04a:	d1f9      	bne.n	800e040 <strcpy+0x2>
 800e04c:	4770      	bx	lr

0800e04e <memchr>:
 800e04e:	b2c9      	uxtb	r1, r1
 800e050:	1882      	adds	r2, r0, r2
 800e052:	4290      	cmp	r0, r2
 800e054:	d101      	bne.n	800e05a <memchr+0xc>
 800e056:	2000      	movs	r0, #0
 800e058:	4770      	bx	lr
 800e05a:	7803      	ldrb	r3, [r0, #0]
 800e05c:	428b      	cmp	r3, r1
 800e05e:	d0fb      	beq.n	800e058 <memchr+0xa>
 800e060:	3001      	adds	r0, #1
 800e062:	e7f6      	b.n	800e052 <memchr+0x4>

0800e064 <memcpy>:
 800e064:	2300      	movs	r3, #0
 800e066:	b510      	push	{r4, lr}
 800e068:	429a      	cmp	r2, r3
 800e06a:	d100      	bne.n	800e06e <memcpy+0xa>
 800e06c:	bd10      	pop	{r4, pc}
 800e06e:	5ccc      	ldrb	r4, [r1, r3]
 800e070:	54c4      	strb	r4, [r0, r3]
 800e072:	3301      	adds	r3, #1
 800e074:	e7f8      	b.n	800e068 <memcpy+0x4>
	...

0800e078 <nan>:
 800e078:	2000      	movs	r0, #0
 800e07a:	4901      	ldr	r1, [pc, #4]	; (800e080 <nan+0x8>)
 800e07c:	4770      	bx	lr
 800e07e:	46c0      	nop			; (mov r8, r8)
 800e080:	7ff80000 	.word	0x7ff80000

0800e084 <__assert_func>:
 800e084:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e086:	0014      	movs	r4, r2
 800e088:	001a      	movs	r2, r3
 800e08a:	4b09      	ldr	r3, [pc, #36]	; (800e0b0 <__assert_func+0x2c>)
 800e08c:	0005      	movs	r5, r0
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	000e      	movs	r6, r1
 800e092:	68d8      	ldr	r0, [r3, #12]
 800e094:	4b07      	ldr	r3, [pc, #28]	; (800e0b4 <__assert_func+0x30>)
 800e096:	2c00      	cmp	r4, #0
 800e098:	d101      	bne.n	800e09e <__assert_func+0x1a>
 800e09a:	4b07      	ldr	r3, [pc, #28]	; (800e0b8 <__assert_func+0x34>)
 800e09c:	001c      	movs	r4, r3
 800e09e:	4907      	ldr	r1, [pc, #28]	; (800e0bc <__assert_func+0x38>)
 800e0a0:	9301      	str	r3, [sp, #4]
 800e0a2:	9402      	str	r4, [sp, #8]
 800e0a4:	002b      	movs	r3, r5
 800e0a6:	9600      	str	r6, [sp, #0]
 800e0a8:	f002 fa8c 	bl	80105c4 <fiprintf>
 800e0ac:	f002 fb53 	bl	8010756 <abort>
 800e0b0:	200001e0 	.word	0x200001e0
 800e0b4:	08011606 	.word	0x08011606
 800e0b8:	08011641 	.word	0x08011641
 800e0bc:	08011613 	.word	0x08011613

0800e0c0 <quorem>:
 800e0c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e0c2:	6902      	ldr	r2, [r0, #16]
 800e0c4:	690b      	ldr	r3, [r1, #16]
 800e0c6:	b089      	sub	sp, #36	; 0x24
 800e0c8:	0007      	movs	r7, r0
 800e0ca:	9104      	str	r1, [sp, #16]
 800e0cc:	2000      	movs	r0, #0
 800e0ce:	429a      	cmp	r2, r3
 800e0d0:	db69      	blt.n	800e1a6 <quorem+0xe6>
 800e0d2:	3b01      	subs	r3, #1
 800e0d4:	009c      	lsls	r4, r3, #2
 800e0d6:	9301      	str	r3, [sp, #4]
 800e0d8:	000b      	movs	r3, r1
 800e0da:	3314      	adds	r3, #20
 800e0dc:	9306      	str	r3, [sp, #24]
 800e0de:	191b      	adds	r3, r3, r4
 800e0e0:	9305      	str	r3, [sp, #20]
 800e0e2:	003b      	movs	r3, r7
 800e0e4:	3314      	adds	r3, #20
 800e0e6:	9303      	str	r3, [sp, #12]
 800e0e8:	191c      	adds	r4, r3, r4
 800e0ea:	9b05      	ldr	r3, [sp, #20]
 800e0ec:	6826      	ldr	r6, [r4, #0]
 800e0ee:	681d      	ldr	r5, [r3, #0]
 800e0f0:	0030      	movs	r0, r6
 800e0f2:	3501      	adds	r5, #1
 800e0f4:	0029      	movs	r1, r5
 800e0f6:	f7f2 f82d 	bl	8000154 <__udivsi3>
 800e0fa:	9002      	str	r0, [sp, #8]
 800e0fc:	42ae      	cmp	r6, r5
 800e0fe:	d329      	bcc.n	800e154 <quorem+0x94>
 800e100:	9b06      	ldr	r3, [sp, #24]
 800e102:	2600      	movs	r6, #0
 800e104:	469c      	mov	ip, r3
 800e106:	9d03      	ldr	r5, [sp, #12]
 800e108:	9606      	str	r6, [sp, #24]
 800e10a:	4662      	mov	r2, ip
 800e10c:	ca08      	ldmia	r2!, {r3}
 800e10e:	6828      	ldr	r0, [r5, #0]
 800e110:	4694      	mov	ip, r2
 800e112:	9a02      	ldr	r2, [sp, #8]
 800e114:	b299      	uxth	r1, r3
 800e116:	4351      	muls	r1, r2
 800e118:	0c1b      	lsrs	r3, r3, #16
 800e11a:	4353      	muls	r3, r2
 800e11c:	1989      	adds	r1, r1, r6
 800e11e:	0c0a      	lsrs	r2, r1, #16
 800e120:	189b      	adds	r3, r3, r2
 800e122:	9307      	str	r3, [sp, #28]
 800e124:	0c1e      	lsrs	r6, r3, #16
 800e126:	9b06      	ldr	r3, [sp, #24]
 800e128:	b282      	uxth	r2, r0
 800e12a:	18d2      	adds	r2, r2, r3
 800e12c:	466b      	mov	r3, sp
 800e12e:	b289      	uxth	r1, r1
 800e130:	8b9b      	ldrh	r3, [r3, #28]
 800e132:	1a52      	subs	r2, r2, r1
 800e134:	0c01      	lsrs	r1, r0, #16
 800e136:	1ac9      	subs	r1, r1, r3
 800e138:	1413      	asrs	r3, r2, #16
 800e13a:	18cb      	adds	r3, r1, r3
 800e13c:	1419      	asrs	r1, r3, #16
 800e13e:	b292      	uxth	r2, r2
 800e140:	041b      	lsls	r3, r3, #16
 800e142:	4313      	orrs	r3, r2
 800e144:	c508      	stmia	r5!, {r3}
 800e146:	9b05      	ldr	r3, [sp, #20]
 800e148:	9106      	str	r1, [sp, #24]
 800e14a:	4563      	cmp	r3, ip
 800e14c:	d2dd      	bcs.n	800e10a <quorem+0x4a>
 800e14e:	6823      	ldr	r3, [r4, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d030      	beq.n	800e1b6 <quorem+0xf6>
 800e154:	0038      	movs	r0, r7
 800e156:	9904      	ldr	r1, [sp, #16]
 800e158:	f001 fcda 	bl	800fb10 <__mcmp>
 800e15c:	2800      	cmp	r0, #0
 800e15e:	db21      	blt.n	800e1a4 <quorem+0xe4>
 800e160:	0038      	movs	r0, r7
 800e162:	2600      	movs	r6, #0
 800e164:	9b02      	ldr	r3, [sp, #8]
 800e166:	9c04      	ldr	r4, [sp, #16]
 800e168:	3301      	adds	r3, #1
 800e16a:	9302      	str	r3, [sp, #8]
 800e16c:	3014      	adds	r0, #20
 800e16e:	3414      	adds	r4, #20
 800e170:	6803      	ldr	r3, [r0, #0]
 800e172:	cc02      	ldmia	r4!, {r1}
 800e174:	b29d      	uxth	r5, r3
 800e176:	19ad      	adds	r5, r5, r6
 800e178:	b28a      	uxth	r2, r1
 800e17a:	1aaa      	subs	r2, r5, r2
 800e17c:	0c09      	lsrs	r1, r1, #16
 800e17e:	0c1b      	lsrs	r3, r3, #16
 800e180:	1a5b      	subs	r3, r3, r1
 800e182:	1411      	asrs	r1, r2, #16
 800e184:	185b      	adds	r3, r3, r1
 800e186:	141e      	asrs	r6, r3, #16
 800e188:	b292      	uxth	r2, r2
 800e18a:	041b      	lsls	r3, r3, #16
 800e18c:	4313      	orrs	r3, r2
 800e18e:	c008      	stmia	r0!, {r3}
 800e190:	9b05      	ldr	r3, [sp, #20]
 800e192:	42a3      	cmp	r3, r4
 800e194:	d2ec      	bcs.n	800e170 <quorem+0xb0>
 800e196:	9b01      	ldr	r3, [sp, #4]
 800e198:	9a03      	ldr	r2, [sp, #12]
 800e19a:	009b      	lsls	r3, r3, #2
 800e19c:	18d3      	adds	r3, r2, r3
 800e19e:	681a      	ldr	r2, [r3, #0]
 800e1a0:	2a00      	cmp	r2, #0
 800e1a2:	d015      	beq.n	800e1d0 <quorem+0x110>
 800e1a4:	9802      	ldr	r0, [sp, #8]
 800e1a6:	b009      	add	sp, #36	; 0x24
 800e1a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e1aa:	6823      	ldr	r3, [r4, #0]
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d106      	bne.n	800e1be <quorem+0xfe>
 800e1b0:	9b01      	ldr	r3, [sp, #4]
 800e1b2:	3b01      	subs	r3, #1
 800e1b4:	9301      	str	r3, [sp, #4]
 800e1b6:	9b03      	ldr	r3, [sp, #12]
 800e1b8:	3c04      	subs	r4, #4
 800e1ba:	42a3      	cmp	r3, r4
 800e1bc:	d3f5      	bcc.n	800e1aa <quorem+0xea>
 800e1be:	9b01      	ldr	r3, [sp, #4]
 800e1c0:	613b      	str	r3, [r7, #16]
 800e1c2:	e7c7      	b.n	800e154 <quorem+0x94>
 800e1c4:	681a      	ldr	r2, [r3, #0]
 800e1c6:	2a00      	cmp	r2, #0
 800e1c8:	d106      	bne.n	800e1d8 <quorem+0x118>
 800e1ca:	9a01      	ldr	r2, [sp, #4]
 800e1cc:	3a01      	subs	r2, #1
 800e1ce:	9201      	str	r2, [sp, #4]
 800e1d0:	9a03      	ldr	r2, [sp, #12]
 800e1d2:	3b04      	subs	r3, #4
 800e1d4:	429a      	cmp	r2, r3
 800e1d6:	d3f5      	bcc.n	800e1c4 <quorem+0x104>
 800e1d8:	9b01      	ldr	r3, [sp, #4]
 800e1da:	613b      	str	r3, [r7, #16]
 800e1dc:	e7e2      	b.n	800e1a4 <quorem+0xe4>
	...

0800e1e0 <_dtoa_r>:
 800e1e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e1e2:	0014      	movs	r4, r2
 800e1e4:	001d      	movs	r5, r3
 800e1e6:	69c6      	ldr	r6, [r0, #28]
 800e1e8:	b09d      	sub	sp, #116	; 0x74
 800e1ea:	9408      	str	r4, [sp, #32]
 800e1ec:	9509      	str	r5, [sp, #36]	; 0x24
 800e1ee:	9f25      	ldr	r7, [sp, #148]	; 0x94
 800e1f0:	9004      	str	r0, [sp, #16]
 800e1f2:	2e00      	cmp	r6, #0
 800e1f4:	d10f      	bne.n	800e216 <_dtoa_r+0x36>
 800e1f6:	2010      	movs	r0, #16
 800e1f8:	f7fe f858 	bl	800c2ac <malloc>
 800e1fc:	9b04      	ldr	r3, [sp, #16]
 800e1fe:	1e02      	subs	r2, r0, #0
 800e200:	61d8      	str	r0, [r3, #28]
 800e202:	d104      	bne.n	800e20e <_dtoa_r+0x2e>
 800e204:	21ef      	movs	r1, #239	; 0xef
 800e206:	4bc6      	ldr	r3, [pc, #792]	; (800e520 <_dtoa_r+0x340>)
 800e208:	48c6      	ldr	r0, [pc, #792]	; (800e524 <_dtoa_r+0x344>)
 800e20a:	f7ff ff3b 	bl	800e084 <__assert_func>
 800e20e:	6046      	str	r6, [r0, #4]
 800e210:	6086      	str	r6, [r0, #8]
 800e212:	6006      	str	r6, [r0, #0]
 800e214:	60c6      	str	r6, [r0, #12]
 800e216:	9b04      	ldr	r3, [sp, #16]
 800e218:	69db      	ldr	r3, [r3, #28]
 800e21a:	6819      	ldr	r1, [r3, #0]
 800e21c:	2900      	cmp	r1, #0
 800e21e:	d00b      	beq.n	800e238 <_dtoa_r+0x58>
 800e220:	685a      	ldr	r2, [r3, #4]
 800e222:	2301      	movs	r3, #1
 800e224:	4093      	lsls	r3, r2
 800e226:	604a      	str	r2, [r1, #4]
 800e228:	608b      	str	r3, [r1, #8]
 800e22a:	9804      	ldr	r0, [sp, #16]
 800e22c:	f001 f9e2 	bl	800f5f4 <_Bfree>
 800e230:	2200      	movs	r2, #0
 800e232:	9b04      	ldr	r3, [sp, #16]
 800e234:	69db      	ldr	r3, [r3, #28]
 800e236:	601a      	str	r2, [r3, #0]
 800e238:	2d00      	cmp	r5, #0
 800e23a:	da1e      	bge.n	800e27a <_dtoa_r+0x9a>
 800e23c:	2301      	movs	r3, #1
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	006b      	lsls	r3, r5, #1
 800e242:	085b      	lsrs	r3, r3, #1
 800e244:	9309      	str	r3, [sp, #36]	; 0x24
 800e246:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e248:	4bb7      	ldr	r3, [pc, #732]	; (800e528 <_dtoa_r+0x348>)
 800e24a:	4ab7      	ldr	r2, [pc, #732]	; (800e528 <_dtoa_r+0x348>)
 800e24c:	403b      	ands	r3, r7
 800e24e:	4293      	cmp	r3, r2
 800e250:	d116      	bne.n	800e280 <_dtoa_r+0xa0>
 800e252:	4bb6      	ldr	r3, [pc, #728]	; (800e52c <_dtoa_r+0x34c>)
 800e254:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e256:	6013      	str	r3, [r2, #0]
 800e258:	033b      	lsls	r3, r7, #12
 800e25a:	0b1b      	lsrs	r3, r3, #12
 800e25c:	4323      	orrs	r3, r4
 800e25e:	d101      	bne.n	800e264 <_dtoa_r+0x84>
 800e260:	f000 fdb5 	bl	800edce <_dtoa_r+0xbee>
 800e264:	4bb2      	ldr	r3, [pc, #712]	; (800e530 <_dtoa_r+0x350>)
 800e266:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e268:	9306      	str	r3, [sp, #24]
 800e26a:	2a00      	cmp	r2, #0
 800e26c:	d002      	beq.n	800e274 <_dtoa_r+0x94>
 800e26e:	4bb1      	ldr	r3, [pc, #708]	; (800e534 <_dtoa_r+0x354>)
 800e270:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800e272:	6013      	str	r3, [r2, #0]
 800e274:	9806      	ldr	r0, [sp, #24]
 800e276:	b01d      	add	sp, #116	; 0x74
 800e278:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e27a:	2300      	movs	r3, #0
 800e27c:	603b      	str	r3, [r7, #0]
 800e27e:	e7e2      	b.n	800e246 <_dtoa_r+0x66>
 800e280:	9a08      	ldr	r2, [sp, #32]
 800e282:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e284:	9210      	str	r2, [sp, #64]	; 0x40
 800e286:	9311      	str	r3, [sp, #68]	; 0x44
 800e288:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e28a:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e28c:	2200      	movs	r2, #0
 800e28e:	2300      	movs	r3, #0
 800e290:	f7f2 f8e6 	bl	8000460 <__aeabi_dcmpeq>
 800e294:	1e06      	subs	r6, r0, #0
 800e296:	d009      	beq.n	800e2ac <_dtoa_r+0xcc>
 800e298:	2301      	movs	r3, #1
 800e29a:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e29c:	6013      	str	r3, [r2, #0]
 800e29e:	4ba6      	ldr	r3, [pc, #664]	; (800e538 <_dtoa_r+0x358>)
 800e2a0:	9306      	str	r3, [sp, #24]
 800e2a2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e2a4:	2b00      	cmp	r3, #0
 800e2a6:	d0e5      	beq.n	800e274 <_dtoa_r+0x94>
 800e2a8:	4ba4      	ldr	r3, [pc, #656]	; (800e53c <_dtoa_r+0x35c>)
 800e2aa:	e7e1      	b.n	800e270 <_dtoa_r+0x90>
 800e2ac:	ab1a      	add	r3, sp, #104	; 0x68
 800e2ae:	9301      	str	r3, [sp, #4]
 800e2b0:	ab1b      	add	r3, sp, #108	; 0x6c
 800e2b2:	9300      	str	r3, [sp, #0]
 800e2b4:	9804      	ldr	r0, [sp, #16]
 800e2b6:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800e2b8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2ba:	f001 fd45 	bl	800fd48 <__d2b>
 800e2be:	007a      	lsls	r2, r7, #1
 800e2c0:	9005      	str	r0, [sp, #20]
 800e2c2:	0d52      	lsrs	r2, r2, #21
 800e2c4:	d100      	bne.n	800e2c8 <_dtoa_r+0xe8>
 800e2c6:	e07b      	b.n	800e3c0 <_dtoa_r+0x1e0>
 800e2c8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800e2ca:	9617      	str	r6, [sp, #92]	; 0x5c
 800e2cc:	0319      	lsls	r1, r3, #12
 800e2ce:	4b9c      	ldr	r3, [pc, #624]	; (800e540 <_dtoa_r+0x360>)
 800e2d0:	0b09      	lsrs	r1, r1, #12
 800e2d2:	430b      	orrs	r3, r1
 800e2d4:	499b      	ldr	r1, [pc, #620]	; (800e544 <_dtoa_r+0x364>)
 800e2d6:	1857      	adds	r7, r2, r1
 800e2d8:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e2da:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e2dc:	0019      	movs	r1, r3
 800e2de:	2200      	movs	r2, #0
 800e2e0:	4b99      	ldr	r3, [pc, #612]	; (800e548 <_dtoa_r+0x368>)
 800e2e2:	f7f3 fc79 	bl	8001bd8 <__aeabi_dsub>
 800e2e6:	4a99      	ldr	r2, [pc, #612]	; (800e54c <_dtoa_r+0x36c>)
 800e2e8:	4b99      	ldr	r3, [pc, #612]	; (800e550 <_dtoa_r+0x370>)
 800e2ea:	f7f3 f9b3 	bl	8001654 <__aeabi_dmul>
 800e2ee:	4a99      	ldr	r2, [pc, #612]	; (800e554 <_dtoa_r+0x374>)
 800e2f0:	4b99      	ldr	r3, [pc, #612]	; (800e558 <_dtoa_r+0x378>)
 800e2f2:	f7f2 fa55 	bl	80007a0 <__aeabi_dadd>
 800e2f6:	0004      	movs	r4, r0
 800e2f8:	0038      	movs	r0, r7
 800e2fa:	000d      	movs	r5, r1
 800e2fc:	f7f4 f842 	bl	8002384 <__aeabi_i2d>
 800e300:	4a96      	ldr	r2, [pc, #600]	; (800e55c <_dtoa_r+0x37c>)
 800e302:	4b97      	ldr	r3, [pc, #604]	; (800e560 <_dtoa_r+0x380>)
 800e304:	f7f3 f9a6 	bl	8001654 <__aeabi_dmul>
 800e308:	0002      	movs	r2, r0
 800e30a:	000b      	movs	r3, r1
 800e30c:	0020      	movs	r0, r4
 800e30e:	0029      	movs	r1, r5
 800e310:	f7f2 fa46 	bl	80007a0 <__aeabi_dadd>
 800e314:	0004      	movs	r4, r0
 800e316:	000d      	movs	r5, r1
 800e318:	f7f3 fffe 	bl	8002318 <__aeabi_d2iz>
 800e31c:	2200      	movs	r2, #0
 800e31e:	9003      	str	r0, [sp, #12]
 800e320:	2300      	movs	r3, #0
 800e322:	0020      	movs	r0, r4
 800e324:	0029      	movs	r1, r5
 800e326:	f7f2 f8a1 	bl	800046c <__aeabi_dcmplt>
 800e32a:	2800      	cmp	r0, #0
 800e32c:	d00b      	beq.n	800e346 <_dtoa_r+0x166>
 800e32e:	9803      	ldr	r0, [sp, #12]
 800e330:	f7f4 f828 	bl	8002384 <__aeabi_i2d>
 800e334:	002b      	movs	r3, r5
 800e336:	0022      	movs	r2, r4
 800e338:	f7f2 f892 	bl	8000460 <__aeabi_dcmpeq>
 800e33c:	4243      	negs	r3, r0
 800e33e:	4158      	adcs	r0, r3
 800e340:	9b03      	ldr	r3, [sp, #12]
 800e342:	1a1b      	subs	r3, r3, r0
 800e344:	9303      	str	r3, [sp, #12]
 800e346:	2301      	movs	r3, #1
 800e348:	9316      	str	r3, [sp, #88]	; 0x58
 800e34a:	9b03      	ldr	r3, [sp, #12]
 800e34c:	2b16      	cmp	r3, #22
 800e34e:	d810      	bhi.n	800e372 <_dtoa_r+0x192>
 800e350:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e352:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e354:	9a03      	ldr	r2, [sp, #12]
 800e356:	4b83      	ldr	r3, [pc, #524]	; (800e564 <_dtoa_r+0x384>)
 800e358:	00d2      	lsls	r2, r2, #3
 800e35a:	189b      	adds	r3, r3, r2
 800e35c:	681a      	ldr	r2, [r3, #0]
 800e35e:	685b      	ldr	r3, [r3, #4]
 800e360:	f7f2 f884 	bl	800046c <__aeabi_dcmplt>
 800e364:	2800      	cmp	r0, #0
 800e366:	d047      	beq.n	800e3f8 <_dtoa_r+0x218>
 800e368:	9b03      	ldr	r3, [sp, #12]
 800e36a:	3b01      	subs	r3, #1
 800e36c:	9303      	str	r3, [sp, #12]
 800e36e:	2300      	movs	r3, #0
 800e370:	9316      	str	r3, [sp, #88]	; 0x58
 800e372:	2200      	movs	r2, #0
 800e374:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 800e376:	920a      	str	r2, [sp, #40]	; 0x28
 800e378:	1bdb      	subs	r3, r3, r7
 800e37a:	1e5a      	subs	r2, r3, #1
 800e37c:	d53e      	bpl.n	800e3fc <_dtoa_r+0x21c>
 800e37e:	2201      	movs	r2, #1
 800e380:	1ad3      	subs	r3, r2, r3
 800e382:	930a      	str	r3, [sp, #40]	; 0x28
 800e384:	2300      	movs	r3, #0
 800e386:	930c      	str	r3, [sp, #48]	; 0x30
 800e388:	9b03      	ldr	r3, [sp, #12]
 800e38a:	2b00      	cmp	r3, #0
 800e38c:	db38      	blt.n	800e400 <_dtoa_r+0x220>
 800e38e:	9a03      	ldr	r2, [sp, #12]
 800e390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e392:	4694      	mov	ip, r2
 800e394:	4463      	add	r3, ip
 800e396:	930c      	str	r3, [sp, #48]	; 0x30
 800e398:	2300      	movs	r3, #0
 800e39a:	9213      	str	r2, [sp, #76]	; 0x4c
 800e39c:	930d      	str	r3, [sp, #52]	; 0x34
 800e39e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e3a0:	2401      	movs	r4, #1
 800e3a2:	2b09      	cmp	r3, #9
 800e3a4:	d867      	bhi.n	800e476 <_dtoa_r+0x296>
 800e3a6:	2b05      	cmp	r3, #5
 800e3a8:	dd02      	ble.n	800e3b0 <_dtoa_r+0x1d0>
 800e3aa:	2400      	movs	r4, #0
 800e3ac:	3b04      	subs	r3, #4
 800e3ae:	9322      	str	r3, [sp, #136]	; 0x88
 800e3b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800e3b2:	1e98      	subs	r0, r3, #2
 800e3b4:	2803      	cmp	r0, #3
 800e3b6:	d867      	bhi.n	800e488 <_dtoa_r+0x2a8>
 800e3b8:	f7f1 feb8 	bl	800012c <__gnu_thumb1_case_uqi>
 800e3bc:	5b383a2b 	.word	0x5b383a2b
 800e3c0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e3c2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 800e3c4:	18f6      	adds	r6, r6, r3
 800e3c6:	4b68      	ldr	r3, [pc, #416]	; (800e568 <_dtoa_r+0x388>)
 800e3c8:	18f2      	adds	r2, r6, r3
 800e3ca:	2a20      	cmp	r2, #32
 800e3cc:	dd0f      	ble.n	800e3ee <_dtoa_r+0x20e>
 800e3ce:	2340      	movs	r3, #64	; 0x40
 800e3d0:	1a9b      	subs	r3, r3, r2
 800e3d2:	409f      	lsls	r7, r3
 800e3d4:	4b65      	ldr	r3, [pc, #404]	; (800e56c <_dtoa_r+0x38c>)
 800e3d6:	0038      	movs	r0, r7
 800e3d8:	18f3      	adds	r3, r6, r3
 800e3da:	40dc      	lsrs	r4, r3
 800e3dc:	4320      	orrs	r0, r4
 800e3de:	f7f4 f801 	bl	80023e4 <__aeabi_ui2d>
 800e3e2:	2201      	movs	r2, #1
 800e3e4:	4b62      	ldr	r3, [pc, #392]	; (800e570 <_dtoa_r+0x390>)
 800e3e6:	1e77      	subs	r7, r6, #1
 800e3e8:	18cb      	adds	r3, r1, r3
 800e3ea:	9217      	str	r2, [sp, #92]	; 0x5c
 800e3ec:	e776      	b.n	800e2dc <_dtoa_r+0xfc>
 800e3ee:	2320      	movs	r3, #32
 800e3f0:	0020      	movs	r0, r4
 800e3f2:	1a9b      	subs	r3, r3, r2
 800e3f4:	4098      	lsls	r0, r3
 800e3f6:	e7f2      	b.n	800e3de <_dtoa_r+0x1fe>
 800e3f8:	9016      	str	r0, [sp, #88]	; 0x58
 800e3fa:	e7ba      	b.n	800e372 <_dtoa_r+0x192>
 800e3fc:	920c      	str	r2, [sp, #48]	; 0x30
 800e3fe:	e7c3      	b.n	800e388 <_dtoa_r+0x1a8>
 800e400:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e402:	9a03      	ldr	r2, [sp, #12]
 800e404:	1a9b      	subs	r3, r3, r2
 800e406:	930a      	str	r3, [sp, #40]	; 0x28
 800e408:	4253      	negs	r3, r2
 800e40a:	930d      	str	r3, [sp, #52]	; 0x34
 800e40c:	2300      	movs	r3, #0
 800e40e:	9313      	str	r3, [sp, #76]	; 0x4c
 800e410:	e7c5      	b.n	800e39e <_dtoa_r+0x1be>
 800e412:	2300      	movs	r3, #0
 800e414:	930f      	str	r3, [sp, #60]	; 0x3c
 800e416:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e418:	930b      	str	r3, [sp, #44]	; 0x2c
 800e41a:	9307      	str	r3, [sp, #28]
 800e41c:	2b00      	cmp	r3, #0
 800e41e:	dc13      	bgt.n	800e448 <_dtoa_r+0x268>
 800e420:	2301      	movs	r3, #1
 800e422:	001a      	movs	r2, r3
 800e424:	930b      	str	r3, [sp, #44]	; 0x2c
 800e426:	9307      	str	r3, [sp, #28]
 800e428:	9223      	str	r2, [sp, #140]	; 0x8c
 800e42a:	e00d      	b.n	800e448 <_dtoa_r+0x268>
 800e42c:	2301      	movs	r3, #1
 800e42e:	e7f1      	b.n	800e414 <_dtoa_r+0x234>
 800e430:	2300      	movs	r3, #0
 800e432:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 800e434:	930f      	str	r3, [sp, #60]	; 0x3c
 800e436:	4694      	mov	ip, r2
 800e438:	9b03      	ldr	r3, [sp, #12]
 800e43a:	4463      	add	r3, ip
 800e43c:	930b      	str	r3, [sp, #44]	; 0x2c
 800e43e:	3301      	adds	r3, #1
 800e440:	9307      	str	r3, [sp, #28]
 800e442:	2b00      	cmp	r3, #0
 800e444:	dc00      	bgt.n	800e448 <_dtoa_r+0x268>
 800e446:	2301      	movs	r3, #1
 800e448:	9a04      	ldr	r2, [sp, #16]
 800e44a:	2100      	movs	r1, #0
 800e44c:	69d0      	ldr	r0, [r2, #28]
 800e44e:	2204      	movs	r2, #4
 800e450:	0015      	movs	r5, r2
 800e452:	3514      	adds	r5, #20
 800e454:	429d      	cmp	r5, r3
 800e456:	d91b      	bls.n	800e490 <_dtoa_r+0x2b0>
 800e458:	6041      	str	r1, [r0, #4]
 800e45a:	9804      	ldr	r0, [sp, #16]
 800e45c:	f001 f886 	bl	800f56c <_Balloc>
 800e460:	9006      	str	r0, [sp, #24]
 800e462:	2800      	cmp	r0, #0
 800e464:	d117      	bne.n	800e496 <_dtoa_r+0x2b6>
 800e466:	21b0      	movs	r1, #176	; 0xb0
 800e468:	4b42      	ldr	r3, [pc, #264]	; (800e574 <_dtoa_r+0x394>)
 800e46a:	482e      	ldr	r0, [pc, #184]	; (800e524 <_dtoa_r+0x344>)
 800e46c:	9a06      	ldr	r2, [sp, #24]
 800e46e:	31ff      	adds	r1, #255	; 0xff
 800e470:	e6cb      	b.n	800e20a <_dtoa_r+0x2a>
 800e472:	2301      	movs	r3, #1
 800e474:	e7dd      	b.n	800e432 <_dtoa_r+0x252>
 800e476:	2300      	movs	r3, #0
 800e478:	940f      	str	r4, [sp, #60]	; 0x3c
 800e47a:	9322      	str	r3, [sp, #136]	; 0x88
 800e47c:	3b01      	subs	r3, #1
 800e47e:	930b      	str	r3, [sp, #44]	; 0x2c
 800e480:	9307      	str	r3, [sp, #28]
 800e482:	2200      	movs	r2, #0
 800e484:	3313      	adds	r3, #19
 800e486:	e7cf      	b.n	800e428 <_dtoa_r+0x248>
 800e488:	2301      	movs	r3, #1
 800e48a:	930f      	str	r3, [sp, #60]	; 0x3c
 800e48c:	3b02      	subs	r3, #2
 800e48e:	e7f6      	b.n	800e47e <_dtoa_r+0x29e>
 800e490:	3101      	adds	r1, #1
 800e492:	0052      	lsls	r2, r2, #1
 800e494:	e7dc      	b.n	800e450 <_dtoa_r+0x270>
 800e496:	9b04      	ldr	r3, [sp, #16]
 800e498:	9a06      	ldr	r2, [sp, #24]
 800e49a:	69db      	ldr	r3, [r3, #28]
 800e49c:	601a      	str	r2, [r3, #0]
 800e49e:	9b07      	ldr	r3, [sp, #28]
 800e4a0:	2b0e      	cmp	r3, #14
 800e4a2:	d900      	bls.n	800e4a6 <_dtoa_r+0x2c6>
 800e4a4:	e0e5      	b.n	800e672 <_dtoa_r+0x492>
 800e4a6:	2c00      	cmp	r4, #0
 800e4a8:	d100      	bne.n	800e4ac <_dtoa_r+0x2cc>
 800e4aa:	e0e2      	b.n	800e672 <_dtoa_r+0x492>
 800e4ac:	9b03      	ldr	r3, [sp, #12]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	dd64      	ble.n	800e57c <_dtoa_r+0x39c>
 800e4b2:	210f      	movs	r1, #15
 800e4b4:	9a03      	ldr	r2, [sp, #12]
 800e4b6:	4b2b      	ldr	r3, [pc, #172]	; (800e564 <_dtoa_r+0x384>)
 800e4b8:	400a      	ands	r2, r1
 800e4ba:	00d2      	lsls	r2, r2, #3
 800e4bc:	189b      	adds	r3, r3, r2
 800e4be:	681e      	ldr	r6, [r3, #0]
 800e4c0:	685f      	ldr	r7, [r3, #4]
 800e4c2:	9b03      	ldr	r3, [sp, #12]
 800e4c4:	2402      	movs	r4, #2
 800e4c6:	111d      	asrs	r5, r3, #4
 800e4c8:	05db      	lsls	r3, r3, #23
 800e4ca:	d50a      	bpl.n	800e4e2 <_dtoa_r+0x302>
 800e4cc:	4b2a      	ldr	r3, [pc, #168]	; (800e578 <_dtoa_r+0x398>)
 800e4ce:	400d      	ands	r5, r1
 800e4d0:	6a1a      	ldr	r2, [r3, #32]
 800e4d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e4d4:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e4d6:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e4d8:	f7f2 fcc2 	bl	8000e60 <__aeabi_ddiv>
 800e4dc:	9008      	str	r0, [sp, #32]
 800e4de:	9109      	str	r1, [sp, #36]	; 0x24
 800e4e0:	3401      	adds	r4, #1
 800e4e2:	4b25      	ldr	r3, [pc, #148]	; (800e578 <_dtoa_r+0x398>)
 800e4e4:	930e      	str	r3, [sp, #56]	; 0x38
 800e4e6:	2d00      	cmp	r5, #0
 800e4e8:	d108      	bne.n	800e4fc <_dtoa_r+0x31c>
 800e4ea:	9808      	ldr	r0, [sp, #32]
 800e4ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800e4ee:	0032      	movs	r2, r6
 800e4f0:	003b      	movs	r3, r7
 800e4f2:	f7f2 fcb5 	bl	8000e60 <__aeabi_ddiv>
 800e4f6:	9008      	str	r0, [sp, #32]
 800e4f8:	9109      	str	r1, [sp, #36]	; 0x24
 800e4fa:	e05a      	b.n	800e5b2 <_dtoa_r+0x3d2>
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	421d      	tst	r5, r3
 800e500:	d009      	beq.n	800e516 <_dtoa_r+0x336>
 800e502:	18e4      	adds	r4, r4, r3
 800e504:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e506:	0030      	movs	r0, r6
 800e508:	681a      	ldr	r2, [r3, #0]
 800e50a:	685b      	ldr	r3, [r3, #4]
 800e50c:	0039      	movs	r1, r7
 800e50e:	f7f3 f8a1 	bl	8001654 <__aeabi_dmul>
 800e512:	0006      	movs	r6, r0
 800e514:	000f      	movs	r7, r1
 800e516:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e518:	106d      	asrs	r5, r5, #1
 800e51a:	3308      	adds	r3, #8
 800e51c:	e7e2      	b.n	800e4e4 <_dtoa_r+0x304>
 800e51e:	46c0      	nop			; (mov r8, r8)
 800e520:	0801158d 	.word	0x0801158d
 800e524:	0801164f 	.word	0x0801164f
 800e528:	7ff00000 	.word	0x7ff00000
 800e52c:	0000270f 	.word	0x0000270f
 800e530:	0801164b 	.word	0x0801164b
 800e534:	0801164e 	.word	0x0801164e
 800e538:	08011569 	.word	0x08011569
 800e53c:	0801156a 	.word	0x0801156a
 800e540:	3ff00000 	.word	0x3ff00000
 800e544:	fffffc01 	.word	0xfffffc01
 800e548:	3ff80000 	.word	0x3ff80000
 800e54c:	636f4361 	.word	0x636f4361
 800e550:	3fd287a7 	.word	0x3fd287a7
 800e554:	8b60c8b3 	.word	0x8b60c8b3
 800e558:	3fc68a28 	.word	0x3fc68a28
 800e55c:	509f79fb 	.word	0x509f79fb
 800e560:	3fd34413 	.word	0x3fd34413
 800e564:	080117a0 	.word	0x080117a0
 800e568:	00000432 	.word	0x00000432
 800e56c:	00000412 	.word	0x00000412
 800e570:	fe100000 	.word	0xfe100000
 800e574:	080116a7 	.word	0x080116a7
 800e578:	08011778 	.word	0x08011778
 800e57c:	9b03      	ldr	r3, [sp, #12]
 800e57e:	2402      	movs	r4, #2
 800e580:	2b00      	cmp	r3, #0
 800e582:	d016      	beq.n	800e5b2 <_dtoa_r+0x3d2>
 800e584:	9810      	ldr	r0, [sp, #64]	; 0x40
 800e586:	9911      	ldr	r1, [sp, #68]	; 0x44
 800e588:	220f      	movs	r2, #15
 800e58a:	425d      	negs	r5, r3
 800e58c:	402a      	ands	r2, r5
 800e58e:	4bdd      	ldr	r3, [pc, #884]	; (800e904 <_dtoa_r+0x724>)
 800e590:	00d2      	lsls	r2, r2, #3
 800e592:	189b      	adds	r3, r3, r2
 800e594:	681a      	ldr	r2, [r3, #0]
 800e596:	685b      	ldr	r3, [r3, #4]
 800e598:	f7f3 f85c 	bl	8001654 <__aeabi_dmul>
 800e59c:	2701      	movs	r7, #1
 800e59e:	2300      	movs	r3, #0
 800e5a0:	9008      	str	r0, [sp, #32]
 800e5a2:	9109      	str	r1, [sp, #36]	; 0x24
 800e5a4:	4ed8      	ldr	r6, [pc, #864]	; (800e908 <_dtoa_r+0x728>)
 800e5a6:	112d      	asrs	r5, r5, #4
 800e5a8:	2d00      	cmp	r5, #0
 800e5aa:	d000      	beq.n	800e5ae <_dtoa_r+0x3ce>
 800e5ac:	e091      	b.n	800e6d2 <_dtoa_r+0x4f2>
 800e5ae:	2b00      	cmp	r3, #0
 800e5b0:	d1a1      	bne.n	800e4f6 <_dtoa_r+0x316>
 800e5b2:	9e08      	ldr	r6, [sp, #32]
 800e5b4:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e5b6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d100      	bne.n	800e5be <_dtoa_r+0x3de>
 800e5bc:	e094      	b.n	800e6e8 <_dtoa_r+0x508>
 800e5be:	2200      	movs	r2, #0
 800e5c0:	0030      	movs	r0, r6
 800e5c2:	0039      	movs	r1, r7
 800e5c4:	4bd1      	ldr	r3, [pc, #836]	; (800e90c <_dtoa_r+0x72c>)
 800e5c6:	f7f1 ff51 	bl	800046c <__aeabi_dcmplt>
 800e5ca:	2800      	cmp	r0, #0
 800e5cc:	d100      	bne.n	800e5d0 <_dtoa_r+0x3f0>
 800e5ce:	e08b      	b.n	800e6e8 <_dtoa_r+0x508>
 800e5d0:	9b07      	ldr	r3, [sp, #28]
 800e5d2:	2b00      	cmp	r3, #0
 800e5d4:	d100      	bne.n	800e5d8 <_dtoa_r+0x3f8>
 800e5d6:	e087      	b.n	800e6e8 <_dtoa_r+0x508>
 800e5d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5da:	2b00      	cmp	r3, #0
 800e5dc:	dd45      	ble.n	800e66a <_dtoa_r+0x48a>
 800e5de:	9b03      	ldr	r3, [sp, #12]
 800e5e0:	2200      	movs	r2, #0
 800e5e2:	3b01      	subs	r3, #1
 800e5e4:	930e      	str	r3, [sp, #56]	; 0x38
 800e5e6:	0030      	movs	r0, r6
 800e5e8:	4bc9      	ldr	r3, [pc, #804]	; (800e910 <_dtoa_r+0x730>)
 800e5ea:	0039      	movs	r1, r7
 800e5ec:	f7f3 f832 	bl	8001654 <__aeabi_dmul>
 800e5f0:	9008      	str	r0, [sp, #32]
 800e5f2:	9109      	str	r1, [sp, #36]	; 0x24
 800e5f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800e5f6:	3401      	adds	r4, #1
 800e5f8:	0020      	movs	r0, r4
 800e5fa:	9e08      	ldr	r6, [sp, #32]
 800e5fc:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800e5fe:	9312      	str	r3, [sp, #72]	; 0x48
 800e600:	f7f3 fec0 	bl	8002384 <__aeabi_i2d>
 800e604:	0032      	movs	r2, r6
 800e606:	003b      	movs	r3, r7
 800e608:	f7f3 f824 	bl	8001654 <__aeabi_dmul>
 800e60c:	2200      	movs	r2, #0
 800e60e:	4bc1      	ldr	r3, [pc, #772]	; (800e914 <_dtoa_r+0x734>)
 800e610:	f7f2 f8c6 	bl	80007a0 <__aeabi_dadd>
 800e614:	4ac0      	ldr	r2, [pc, #768]	; (800e918 <_dtoa_r+0x738>)
 800e616:	9014      	str	r0, [sp, #80]	; 0x50
 800e618:	9115      	str	r1, [sp, #84]	; 0x54
 800e61a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e61c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800e61e:	4694      	mov	ip, r2
 800e620:	9308      	str	r3, [sp, #32]
 800e622:	9409      	str	r4, [sp, #36]	; 0x24
 800e624:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e626:	4463      	add	r3, ip
 800e628:	9318      	str	r3, [sp, #96]	; 0x60
 800e62a:	9309      	str	r3, [sp, #36]	; 0x24
 800e62c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e62e:	2b00      	cmp	r3, #0
 800e630:	d15e      	bne.n	800e6f0 <_dtoa_r+0x510>
 800e632:	2200      	movs	r2, #0
 800e634:	4bb9      	ldr	r3, [pc, #740]	; (800e91c <_dtoa_r+0x73c>)
 800e636:	0030      	movs	r0, r6
 800e638:	0039      	movs	r1, r7
 800e63a:	f7f3 facd 	bl	8001bd8 <__aeabi_dsub>
 800e63e:	9a08      	ldr	r2, [sp, #32]
 800e640:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e642:	0004      	movs	r4, r0
 800e644:	000d      	movs	r5, r1
 800e646:	f7f1 ff25 	bl	8000494 <__aeabi_dcmpgt>
 800e64a:	2800      	cmp	r0, #0
 800e64c:	d000      	beq.n	800e650 <_dtoa_r+0x470>
 800e64e:	e2b3      	b.n	800ebb8 <_dtoa_r+0x9d8>
 800e650:	48b3      	ldr	r0, [pc, #716]	; (800e920 <_dtoa_r+0x740>)
 800e652:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e654:	4684      	mov	ip, r0
 800e656:	4461      	add	r1, ip
 800e658:	000b      	movs	r3, r1
 800e65a:	0020      	movs	r0, r4
 800e65c:	0029      	movs	r1, r5
 800e65e:	9a08      	ldr	r2, [sp, #32]
 800e660:	f7f1 ff04 	bl	800046c <__aeabi_dcmplt>
 800e664:	2800      	cmp	r0, #0
 800e666:	d000      	beq.n	800e66a <_dtoa_r+0x48a>
 800e668:	e2a3      	b.n	800ebb2 <_dtoa_r+0x9d2>
 800e66a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800e66c:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800e66e:	9308      	str	r3, [sp, #32]
 800e670:	9409      	str	r4, [sp, #36]	; 0x24
 800e672:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e674:	2b00      	cmp	r3, #0
 800e676:	da00      	bge.n	800e67a <_dtoa_r+0x49a>
 800e678:	e179      	b.n	800e96e <_dtoa_r+0x78e>
 800e67a:	9a03      	ldr	r2, [sp, #12]
 800e67c:	2a0e      	cmp	r2, #14
 800e67e:	dd00      	ble.n	800e682 <_dtoa_r+0x4a2>
 800e680:	e175      	b.n	800e96e <_dtoa_r+0x78e>
 800e682:	4ba0      	ldr	r3, [pc, #640]	; (800e904 <_dtoa_r+0x724>)
 800e684:	00d2      	lsls	r2, r2, #3
 800e686:	189b      	adds	r3, r3, r2
 800e688:	681e      	ldr	r6, [r3, #0]
 800e68a:	685f      	ldr	r7, [r3, #4]
 800e68c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800e68e:	2b00      	cmp	r3, #0
 800e690:	db00      	blt.n	800e694 <_dtoa_r+0x4b4>
 800e692:	e0e5      	b.n	800e860 <_dtoa_r+0x680>
 800e694:	9b07      	ldr	r3, [sp, #28]
 800e696:	2b00      	cmp	r3, #0
 800e698:	dd00      	ble.n	800e69c <_dtoa_r+0x4bc>
 800e69a:	e0e1      	b.n	800e860 <_dtoa_r+0x680>
 800e69c:	d000      	beq.n	800e6a0 <_dtoa_r+0x4c0>
 800e69e:	e288      	b.n	800ebb2 <_dtoa_r+0x9d2>
 800e6a0:	2200      	movs	r2, #0
 800e6a2:	0030      	movs	r0, r6
 800e6a4:	0039      	movs	r1, r7
 800e6a6:	4b9d      	ldr	r3, [pc, #628]	; (800e91c <_dtoa_r+0x73c>)
 800e6a8:	f7f2 ffd4 	bl	8001654 <__aeabi_dmul>
 800e6ac:	9a08      	ldr	r2, [sp, #32]
 800e6ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e6b0:	f7f1 fefa 	bl	80004a8 <__aeabi_dcmpge>
 800e6b4:	9e07      	ldr	r6, [sp, #28]
 800e6b6:	0037      	movs	r7, r6
 800e6b8:	2800      	cmp	r0, #0
 800e6ba:	d000      	beq.n	800e6be <_dtoa_r+0x4de>
 800e6bc:	e25f      	b.n	800eb7e <_dtoa_r+0x99e>
 800e6be:	9b06      	ldr	r3, [sp, #24]
 800e6c0:	9a06      	ldr	r2, [sp, #24]
 800e6c2:	3301      	adds	r3, #1
 800e6c4:	9308      	str	r3, [sp, #32]
 800e6c6:	2331      	movs	r3, #49	; 0x31
 800e6c8:	7013      	strb	r3, [r2, #0]
 800e6ca:	9b03      	ldr	r3, [sp, #12]
 800e6cc:	3301      	adds	r3, #1
 800e6ce:	9303      	str	r3, [sp, #12]
 800e6d0:	e25a      	b.n	800eb88 <_dtoa_r+0x9a8>
 800e6d2:	423d      	tst	r5, r7
 800e6d4:	d005      	beq.n	800e6e2 <_dtoa_r+0x502>
 800e6d6:	6832      	ldr	r2, [r6, #0]
 800e6d8:	6873      	ldr	r3, [r6, #4]
 800e6da:	f7f2 ffbb 	bl	8001654 <__aeabi_dmul>
 800e6de:	003b      	movs	r3, r7
 800e6e0:	3401      	adds	r4, #1
 800e6e2:	106d      	asrs	r5, r5, #1
 800e6e4:	3608      	adds	r6, #8
 800e6e6:	e75f      	b.n	800e5a8 <_dtoa_r+0x3c8>
 800e6e8:	9b03      	ldr	r3, [sp, #12]
 800e6ea:	930e      	str	r3, [sp, #56]	; 0x38
 800e6ec:	9b07      	ldr	r3, [sp, #28]
 800e6ee:	e783      	b.n	800e5f8 <_dtoa_r+0x418>
 800e6f0:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800e6f2:	4b84      	ldr	r3, [pc, #528]	; (800e904 <_dtoa_r+0x724>)
 800e6f4:	3a01      	subs	r2, #1
 800e6f6:	00d2      	lsls	r2, r2, #3
 800e6f8:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800e6fa:	189b      	adds	r3, r3, r2
 800e6fc:	9c08      	ldr	r4, [sp, #32]
 800e6fe:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e700:	681a      	ldr	r2, [r3, #0]
 800e702:	685b      	ldr	r3, [r3, #4]
 800e704:	2900      	cmp	r1, #0
 800e706:	d051      	beq.n	800e7ac <_dtoa_r+0x5cc>
 800e708:	2000      	movs	r0, #0
 800e70a:	4986      	ldr	r1, [pc, #536]	; (800e924 <_dtoa_r+0x744>)
 800e70c:	f7f2 fba8 	bl	8000e60 <__aeabi_ddiv>
 800e710:	0022      	movs	r2, r4
 800e712:	002b      	movs	r3, r5
 800e714:	f7f3 fa60 	bl	8001bd8 <__aeabi_dsub>
 800e718:	9a06      	ldr	r2, [sp, #24]
 800e71a:	0004      	movs	r4, r0
 800e71c:	4694      	mov	ip, r2
 800e71e:	000d      	movs	r5, r1
 800e720:	9b06      	ldr	r3, [sp, #24]
 800e722:	9314      	str	r3, [sp, #80]	; 0x50
 800e724:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e726:	4463      	add	r3, ip
 800e728:	9318      	str	r3, [sp, #96]	; 0x60
 800e72a:	0039      	movs	r1, r7
 800e72c:	0030      	movs	r0, r6
 800e72e:	f7f3 fdf3 	bl	8002318 <__aeabi_d2iz>
 800e732:	9012      	str	r0, [sp, #72]	; 0x48
 800e734:	f7f3 fe26 	bl	8002384 <__aeabi_i2d>
 800e738:	0002      	movs	r2, r0
 800e73a:	000b      	movs	r3, r1
 800e73c:	0030      	movs	r0, r6
 800e73e:	0039      	movs	r1, r7
 800e740:	f7f3 fa4a 	bl	8001bd8 <__aeabi_dsub>
 800e744:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800e746:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e748:	3301      	adds	r3, #1
 800e74a:	9308      	str	r3, [sp, #32]
 800e74c:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e74e:	0006      	movs	r6, r0
 800e750:	3330      	adds	r3, #48	; 0x30
 800e752:	7013      	strb	r3, [r2, #0]
 800e754:	0022      	movs	r2, r4
 800e756:	002b      	movs	r3, r5
 800e758:	000f      	movs	r7, r1
 800e75a:	f7f1 fe87 	bl	800046c <__aeabi_dcmplt>
 800e75e:	2800      	cmp	r0, #0
 800e760:	d174      	bne.n	800e84c <_dtoa_r+0x66c>
 800e762:	0032      	movs	r2, r6
 800e764:	003b      	movs	r3, r7
 800e766:	2000      	movs	r0, #0
 800e768:	4968      	ldr	r1, [pc, #416]	; (800e90c <_dtoa_r+0x72c>)
 800e76a:	f7f3 fa35 	bl	8001bd8 <__aeabi_dsub>
 800e76e:	0022      	movs	r2, r4
 800e770:	002b      	movs	r3, r5
 800e772:	f7f1 fe7b 	bl	800046c <__aeabi_dcmplt>
 800e776:	2800      	cmp	r0, #0
 800e778:	d000      	beq.n	800e77c <_dtoa_r+0x59c>
 800e77a:	e0d7      	b.n	800e92c <_dtoa_r+0x74c>
 800e77c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800e77e:	9a08      	ldr	r2, [sp, #32]
 800e780:	4293      	cmp	r3, r2
 800e782:	d100      	bne.n	800e786 <_dtoa_r+0x5a6>
 800e784:	e771      	b.n	800e66a <_dtoa_r+0x48a>
 800e786:	2200      	movs	r2, #0
 800e788:	0020      	movs	r0, r4
 800e78a:	0029      	movs	r1, r5
 800e78c:	4b60      	ldr	r3, [pc, #384]	; (800e910 <_dtoa_r+0x730>)
 800e78e:	f7f2 ff61 	bl	8001654 <__aeabi_dmul>
 800e792:	4b5f      	ldr	r3, [pc, #380]	; (800e910 <_dtoa_r+0x730>)
 800e794:	0004      	movs	r4, r0
 800e796:	000d      	movs	r5, r1
 800e798:	0030      	movs	r0, r6
 800e79a:	0039      	movs	r1, r7
 800e79c:	2200      	movs	r2, #0
 800e79e:	f7f2 ff59 	bl	8001654 <__aeabi_dmul>
 800e7a2:	9b08      	ldr	r3, [sp, #32]
 800e7a4:	0006      	movs	r6, r0
 800e7a6:	000f      	movs	r7, r1
 800e7a8:	9314      	str	r3, [sp, #80]	; 0x50
 800e7aa:	e7be      	b.n	800e72a <_dtoa_r+0x54a>
 800e7ac:	0020      	movs	r0, r4
 800e7ae:	0029      	movs	r1, r5
 800e7b0:	f7f2 ff50 	bl	8001654 <__aeabi_dmul>
 800e7b4:	9a06      	ldr	r2, [sp, #24]
 800e7b6:	9b06      	ldr	r3, [sp, #24]
 800e7b8:	4694      	mov	ip, r2
 800e7ba:	9308      	str	r3, [sp, #32]
 800e7bc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7be:	9014      	str	r0, [sp, #80]	; 0x50
 800e7c0:	9115      	str	r1, [sp, #84]	; 0x54
 800e7c2:	4463      	add	r3, ip
 800e7c4:	9319      	str	r3, [sp, #100]	; 0x64
 800e7c6:	0030      	movs	r0, r6
 800e7c8:	0039      	movs	r1, r7
 800e7ca:	f7f3 fda5 	bl	8002318 <__aeabi_d2iz>
 800e7ce:	9018      	str	r0, [sp, #96]	; 0x60
 800e7d0:	f7f3 fdd8 	bl	8002384 <__aeabi_i2d>
 800e7d4:	0002      	movs	r2, r0
 800e7d6:	000b      	movs	r3, r1
 800e7d8:	0030      	movs	r0, r6
 800e7da:	0039      	movs	r1, r7
 800e7dc:	f7f3 f9fc 	bl	8001bd8 <__aeabi_dsub>
 800e7e0:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800e7e2:	9b08      	ldr	r3, [sp, #32]
 800e7e4:	3630      	adds	r6, #48	; 0x30
 800e7e6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800e7e8:	701e      	strb	r6, [r3, #0]
 800e7ea:	3301      	adds	r3, #1
 800e7ec:	0004      	movs	r4, r0
 800e7ee:	000d      	movs	r5, r1
 800e7f0:	9308      	str	r3, [sp, #32]
 800e7f2:	4293      	cmp	r3, r2
 800e7f4:	d12d      	bne.n	800e852 <_dtoa_r+0x672>
 800e7f6:	9814      	ldr	r0, [sp, #80]	; 0x50
 800e7f8:	9915      	ldr	r1, [sp, #84]	; 0x54
 800e7fa:	9a06      	ldr	r2, [sp, #24]
 800e7fc:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800e7fe:	4694      	mov	ip, r2
 800e800:	4463      	add	r3, ip
 800e802:	2200      	movs	r2, #0
 800e804:	9308      	str	r3, [sp, #32]
 800e806:	4b47      	ldr	r3, [pc, #284]	; (800e924 <_dtoa_r+0x744>)
 800e808:	f7f1 ffca 	bl	80007a0 <__aeabi_dadd>
 800e80c:	0002      	movs	r2, r0
 800e80e:	000b      	movs	r3, r1
 800e810:	0020      	movs	r0, r4
 800e812:	0029      	movs	r1, r5
 800e814:	f7f1 fe3e 	bl	8000494 <__aeabi_dcmpgt>
 800e818:	2800      	cmp	r0, #0
 800e81a:	d000      	beq.n	800e81e <_dtoa_r+0x63e>
 800e81c:	e086      	b.n	800e92c <_dtoa_r+0x74c>
 800e81e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800e820:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800e822:	2000      	movs	r0, #0
 800e824:	493f      	ldr	r1, [pc, #252]	; (800e924 <_dtoa_r+0x744>)
 800e826:	f7f3 f9d7 	bl	8001bd8 <__aeabi_dsub>
 800e82a:	0002      	movs	r2, r0
 800e82c:	000b      	movs	r3, r1
 800e82e:	0020      	movs	r0, r4
 800e830:	0029      	movs	r1, r5
 800e832:	f7f1 fe1b 	bl	800046c <__aeabi_dcmplt>
 800e836:	2800      	cmp	r0, #0
 800e838:	d100      	bne.n	800e83c <_dtoa_r+0x65c>
 800e83a:	e716      	b.n	800e66a <_dtoa_r+0x48a>
 800e83c:	9b08      	ldr	r3, [sp, #32]
 800e83e:	001a      	movs	r2, r3
 800e840:	3a01      	subs	r2, #1
 800e842:	9208      	str	r2, [sp, #32]
 800e844:	7812      	ldrb	r2, [r2, #0]
 800e846:	2a30      	cmp	r2, #48	; 0x30
 800e848:	d0f8      	beq.n	800e83c <_dtoa_r+0x65c>
 800e84a:	9308      	str	r3, [sp, #32]
 800e84c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800e84e:	9303      	str	r3, [sp, #12]
 800e850:	e046      	b.n	800e8e0 <_dtoa_r+0x700>
 800e852:	2200      	movs	r2, #0
 800e854:	4b2e      	ldr	r3, [pc, #184]	; (800e910 <_dtoa_r+0x730>)
 800e856:	f7f2 fefd 	bl	8001654 <__aeabi_dmul>
 800e85a:	0006      	movs	r6, r0
 800e85c:	000f      	movs	r7, r1
 800e85e:	e7b2      	b.n	800e7c6 <_dtoa_r+0x5e6>
 800e860:	9b06      	ldr	r3, [sp, #24]
 800e862:	9a06      	ldr	r2, [sp, #24]
 800e864:	930a      	str	r3, [sp, #40]	; 0x28
 800e866:	9b07      	ldr	r3, [sp, #28]
 800e868:	9c08      	ldr	r4, [sp, #32]
 800e86a:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800e86c:	3b01      	subs	r3, #1
 800e86e:	189b      	adds	r3, r3, r2
 800e870:	930b      	str	r3, [sp, #44]	; 0x2c
 800e872:	0032      	movs	r2, r6
 800e874:	003b      	movs	r3, r7
 800e876:	0020      	movs	r0, r4
 800e878:	0029      	movs	r1, r5
 800e87a:	f7f2 faf1 	bl	8000e60 <__aeabi_ddiv>
 800e87e:	f7f3 fd4b 	bl	8002318 <__aeabi_d2iz>
 800e882:	9007      	str	r0, [sp, #28]
 800e884:	f7f3 fd7e 	bl	8002384 <__aeabi_i2d>
 800e888:	0032      	movs	r2, r6
 800e88a:	003b      	movs	r3, r7
 800e88c:	f7f2 fee2 	bl	8001654 <__aeabi_dmul>
 800e890:	0002      	movs	r2, r0
 800e892:	000b      	movs	r3, r1
 800e894:	0020      	movs	r0, r4
 800e896:	0029      	movs	r1, r5
 800e898:	f7f3 f99e 	bl	8001bd8 <__aeabi_dsub>
 800e89c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800e89e:	001a      	movs	r2, r3
 800e8a0:	3201      	adds	r2, #1
 800e8a2:	920a      	str	r2, [sp, #40]	; 0x28
 800e8a4:	9208      	str	r2, [sp, #32]
 800e8a6:	9a07      	ldr	r2, [sp, #28]
 800e8a8:	3230      	adds	r2, #48	; 0x30
 800e8aa:	701a      	strb	r2, [r3, #0]
 800e8ac:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800e8ae:	429a      	cmp	r2, r3
 800e8b0:	d14f      	bne.n	800e952 <_dtoa_r+0x772>
 800e8b2:	0002      	movs	r2, r0
 800e8b4:	000b      	movs	r3, r1
 800e8b6:	f7f1 ff73 	bl	80007a0 <__aeabi_dadd>
 800e8ba:	0032      	movs	r2, r6
 800e8bc:	003b      	movs	r3, r7
 800e8be:	0004      	movs	r4, r0
 800e8c0:	000d      	movs	r5, r1
 800e8c2:	f7f1 fde7 	bl	8000494 <__aeabi_dcmpgt>
 800e8c6:	2800      	cmp	r0, #0
 800e8c8:	d12e      	bne.n	800e928 <_dtoa_r+0x748>
 800e8ca:	0032      	movs	r2, r6
 800e8cc:	003b      	movs	r3, r7
 800e8ce:	0020      	movs	r0, r4
 800e8d0:	0029      	movs	r1, r5
 800e8d2:	f7f1 fdc5 	bl	8000460 <__aeabi_dcmpeq>
 800e8d6:	2800      	cmp	r0, #0
 800e8d8:	d002      	beq.n	800e8e0 <_dtoa_r+0x700>
 800e8da:	9b07      	ldr	r3, [sp, #28]
 800e8dc:	07de      	lsls	r6, r3, #31
 800e8de:	d423      	bmi.n	800e928 <_dtoa_r+0x748>
 800e8e0:	9905      	ldr	r1, [sp, #20]
 800e8e2:	9804      	ldr	r0, [sp, #16]
 800e8e4:	f000 fe86 	bl	800f5f4 <_Bfree>
 800e8e8:	2300      	movs	r3, #0
 800e8ea:	9a08      	ldr	r2, [sp, #32]
 800e8ec:	7013      	strb	r3, [r2, #0]
 800e8ee:	9b03      	ldr	r3, [sp, #12]
 800e8f0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800e8f2:	3301      	adds	r3, #1
 800e8f4:	6013      	str	r3, [r2, #0]
 800e8f6:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800e8f8:	2b00      	cmp	r3, #0
 800e8fa:	d100      	bne.n	800e8fe <_dtoa_r+0x71e>
 800e8fc:	e4ba      	b.n	800e274 <_dtoa_r+0x94>
 800e8fe:	9a08      	ldr	r2, [sp, #32]
 800e900:	601a      	str	r2, [r3, #0]
 800e902:	e4b7      	b.n	800e274 <_dtoa_r+0x94>
 800e904:	080117a0 	.word	0x080117a0
 800e908:	08011778 	.word	0x08011778
 800e90c:	3ff00000 	.word	0x3ff00000
 800e910:	40240000 	.word	0x40240000
 800e914:	401c0000 	.word	0x401c0000
 800e918:	fcc00000 	.word	0xfcc00000
 800e91c:	40140000 	.word	0x40140000
 800e920:	7cc00000 	.word	0x7cc00000
 800e924:	3fe00000 	.word	0x3fe00000
 800e928:	9b03      	ldr	r3, [sp, #12]
 800e92a:	930e      	str	r3, [sp, #56]	; 0x38
 800e92c:	9b08      	ldr	r3, [sp, #32]
 800e92e:	9308      	str	r3, [sp, #32]
 800e930:	3b01      	subs	r3, #1
 800e932:	781a      	ldrb	r2, [r3, #0]
 800e934:	2a39      	cmp	r2, #57	; 0x39
 800e936:	d108      	bne.n	800e94a <_dtoa_r+0x76a>
 800e938:	9a06      	ldr	r2, [sp, #24]
 800e93a:	429a      	cmp	r2, r3
 800e93c:	d1f7      	bne.n	800e92e <_dtoa_r+0x74e>
 800e93e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800e940:	9906      	ldr	r1, [sp, #24]
 800e942:	3201      	adds	r2, #1
 800e944:	920e      	str	r2, [sp, #56]	; 0x38
 800e946:	2230      	movs	r2, #48	; 0x30
 800e948:	700a      	strb	r2, [r1, #0]
 800e94a:	781a      	ldrb	r2, [r3, #0]
 800e94c:	3201      	adds	r2, #1
 800e94e:	701a      	strb	r2, [r3, #0]
 800e950:	e77c      	b.n	800e84c <_dtoa_r+0x66c>
 800e952:	2200      	movs	r2, #0
 800e954:	4ba9      	ldr	r3, [pc, #676]	; (800ebfc <_dtoa_r+0xa1c>)
 800e956:	f7f2 fe7d 	bl	8001654 <__aeabi_dmul>
 800e95a:	2200      	movs	r2, #0
 800e95c:	2300      	movs	r3, #0
 800e95e:	0004      	movs	r4, r0
 800e960:	000d      	movs	r5, r1
 800e962:	f7f1 fd7d 	bl	8000460 <__aeabi_dcmpeq>
 800e966:	2800      	cmp	r0, #0
 800e968:	d100      	bne.n	800e96c <_dtoa_r+0x78c>
 800e96a:	e782      	b.n	800e872 <_dtoa_r+0x692>
 800e96c:	e7b8      	b.n	800e8e0 <_dtoa_r+0x700>
 800e96e:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 800e970:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800e972:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800e974:	2f00      	cmp	r7, #0
 800e976:	d012      	beq.n	800e99e <_dtoa_r+0x7be>
 800e978:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800e97a:	2a01      	cmp	r2, #1
 800e97c:	dc6e      	bgt.n	800ea5c <_dtoa_r+0x87c>
 800e97e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800e980:	2a00      	cmp	r2, #0
 800e982:	d065      	beq.n	800ea50 <_dtoa_r+0x870>
 800e984:	4a9e      	ldr	r2, [pc, #632]	; (800ec00 <_dtoa_r+0xa20>)
 800e986:	189b      	adds	r3, r3, r2
 800e988:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e98a:	2101      	movs	r1, #1
 800e98c:	18d2      	adds	r2, r2, r3
 800e98e:	920a      	str	r2, [sp, #40]	; 0x28
 800e990:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e992:	9804      	ldr	r0, [sp, #16]
 800e994:	18d3      	adds	r3, r2, r3
 800e996:	930c      	str	r3, [sp, #48]	; 0x30
 800e998:	f000 ff28 	bl	800f7ec <__i2b>
 800e99c:	0007      	movs	r7, r0
 800e99e:	2c00      	cmp	r4, #0
 800e9a0:	d00e      	beq.n	800e9c0 <_dtoa_r+0x7e0>
 800e9a2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800e9a4:	2b00      	cmp	r3, #0
 800e9a6:	dd0b      	ble.n	800e9c0 <_dtoa_r+0x7e0>
 800e9a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9aa:	0023      	movs	r3, r4
 800e9ac:	4294      	cmp	r4, r2
 800e9ae:	dd00      	ble.n	800e9b2 <_dtoa_r+0x7d2>
 800e9b0:	0013      	movs	r3, r2
 800e9b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800e9b4:	1ae4      	subs	r4, r4, r3
 800e9b6:	1ad2      	subs	r2, r2, r3
 800e9b8:	920a      	str	r2, [sp, #40]	; 0x28
 800e9ba:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800e9bc:	1ad3      	subs	r3, r2, r3
 800e9be:	930c      	str	r3, [sp, #48]	; 0x30
 800e9c0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d01e      	beq.n	800ea04 <_dtoa_r+0x824>
 800e9c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800e9c8:	2b00      	cmp	r3, #0
 800e9ca:	d05c      	beq.n	800ea86 <_dtoa_r+0x8a6>
 800e9cc:	2d00      	cmp	r5, #0
 800e9ce:	dd10      	ble.n	800e9f2 <_dtoa_r+0x812>
 800e9d0:	0039      	movs	r1, r7
 800e9d2:	002a      	movs	r2, r5
 800e9d4:	9804      	ldr	r0, [sp, #16]
 800e9d6:	f000 ffd1 	bl	800f97c <__pow5mult>
 800e9da:	9a05      	ldr	r2, [sp, #20]
 800e9dc:	0001      	movs	r1, r0
 800e9de:	0007      	movs	r7, r0
 800e9e0:	9804      	ldr	r0, [sp, #16]
 800e9e2:	f000 ff1b 	bl	800f81c <__multiply>
 800e9e6:	0006      	movs	r6, r0
 800e9e8:	9905      	ldr	r1, [sp, #20]
 800e9ea:	9804      	ldr	r0, [sp, #16]
 800e9ec:	f000 fe02 	bl	800f5f4 <_Bfree>
 800e9f0:	9605      	str	r6, [sp, #20]
 800e9f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e9f4:	1b5a      	subs	r2, r3, r5
 800e9f6:	42ab      	cmp	r3, r5
 800e9f8:	d004      	beq.n	800ea04 <_dtoa_r+0x824>
 800e9fa:	9905      	ldr	r1, [sp, #20]
 800e9fc:	9804      	ldr	r0, [sp, #16]
 800e9fe:	f000 ffbd 	bl	800f97c <__pow5mult>
 800ea02:	9005      	str	r0, [sp, #20]
 800ea04:	2101      	movs	r1, #1
 800ea06:	9804      	ldr	r0, [sp, #16]
 800ea08:	f000 fef0 	bl	800f7ec <__i2b>
 800ea0c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea0e:	0006      	movs	r6, r0
 800ea10:	2b00      	cmp	r3, #0
 800ea12:	dd3a      	ble.n	800ea8a <_dtoa_r+0x8aa>
 800ea14:	001a      	movs	r2, r3
 800ea16:	0001      	movs	r1, r0
 800ea18:	9804      	ldr	r0, [sp, #16]
 800ea1a:	f000 ffaf 	bl	800f97c <__pow5mult>
 800ea1e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ea20:	0006      	movs	r6, r0
 800ea22:	2500      	movs	r5, #0
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	dc38      	bgt.n	800ea9a <_dtoa_r+0x8ba>
 800ea28:	2500      	movs	r5, #0
 800ea2a:	9b08      	ldr	r3, [sp, #32]
 800ea2c:	42ab      	cmp	r3, r5
 800ea2e:	d130      	bne.n	800ea92 <_dtoa_r+0x8b2>
 800ea30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea32:	031b      	lsls	r3, r3, #12
 800ea34:	42ab      	cmp	r3, r5
 800ea36:	d12c      	bne.n	800ea92 <_dtoa_r+0x8b2>
 800ea38:	4b72      	ldr	r3, [pc, #456]	; (800ec04 <_dtoa_r+0xa24>)
 800ea3a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ea3c:	4213      	tst	r3, r2
 800ea3e:	d028      	beq.n	800ea92 <_dtoa_r+0x8b2>
 800ea40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ea42:	3501      	adds	r5, #1
 800ea44:	3301      	adds	r3, #1
 800ea46:	930a      	str	r3, [sp, #40]	; 0x28
 800ea48:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ea4a:	3301      	adds	r3, #1
 800ea4c:	930c      	str	r3, [sp, #48]	; 0x30
 800ea4e:	e020      	b.n	800ea92 <_dtoa_r+0x8b2>
 800ea50:	2336      	movs	r3, #54	; 0x36
 800ea52:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800ea54:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 800ea56:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ea58:	1a9b      	subs	r3, r3, r2
 800ea5a:	e795      	b.n	800e988 <_dtoa_r+0x7a8>
 800ea5c:	9b07      	ldr	r3, [sp, #28]
 800ea5e:	1e5d      	subs	r5, r3, #1
 800ea60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea62:	42ab      	cmp	r3, r5
 800ea64:	db07      	blt.n	800ea76 <_dtoa_r+0x896>
 800ea66:	1b5d      	subs	r5, r3, r5
 800ea68:	9b07      	ldr	r3, [sp, #28]
 800ea6a:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	da8b      	bge.n	800e988 <_dtoa_r+0x7a8>
 800ea70:	1ae4      	subs	r4, r4, r3
 800ea72:	2300      	movs	r3, #0
 800ea74:	e788      	b.n	800e988 <_dtoa_r+0x7a8>
 800ea76:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ea78:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ea7a:	1aeb      	subs	r3, r5, r3
 800ea7c:	18d3      	adds	r3, r2, r3
 800ea7e:	950d      	str	r5, [sp, #52]	; 0x34
 800ea80:	9313      	str	r3, [sp, #76]	; 0x4c
 800ea82:	2500      	movs	r5, #0
 800ea84:	e7f0      	b.n	800ea68 <_dtoa_r+0x888>
 800ea86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ea88:	e7b7      	b.n	800e9fa <_dtoa_r+0x81a>
 800ea8a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ea8c:	2500      	movs	r5, #0
 800ea8e:	2b01      	cmp	r3, #1
 800ea90:	ddca      	ble.n	800ea28 <_dtoa_r+0x848>
 800ea92:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ea94:	2001      	movs	r0, #1
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	d008      	beq.n	800eaac <_dtoa_r+0x8cc>
 800ea9a:	6933      	ldr	r3, [r6, #16]
 800ea9c:	3303      	adds	r3, #3
 800ea9e:	009b      	lsls	r3, r3, #2
 800eaa0:	18f3      	adds	r3, r6, r3
 800eaa2:	6858      	ldr	r0, [r3, #4]
 800eaa4:	f000 fe5a 	bl	800f75c <__hi0bits>
 800eaa8:	2320      	movs	r3, #32
 800eaaa:	1a18      	subs	r0, r3, r0
 800eaac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaae:	1818      	adds	r0, r3, r0
 800eab0:	0002      	movs	r2, r0
 800eab2:	231f      	movs	r3, #31
 800eab4:	401a      	ands	r2, r3
 800eab6:	4218      	tst	r0, r3
 800eab8:	d047      	beq.n	800eb4a <_dtoa_r+0x96a>
 800eaba:	3301      	adds	r3, #1
 800eabc:	1a9b      	subs	r3, r3, r2
 800eabe:	2b04      	cmp	r3, #4
 800eac0:	dd3f      	ble.n	800eb42 <_dtoa_r+0x962>
 800eac2:	231c      	movs	r3, #28
 800eac4:	1a9b      	subs	r3, r3, r2
 800eac6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800eac8:	18e4      	adds	r4, r4, r3
 800eaca:	18d2      	adds	r2, r2, r3
 800eacc:	920a      	str	r2, [sp, #40]	; 0x28
 800eace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ead0:	18d3      	adds	r3, r2, r3
 800ead2:	930c      	str	r3, [sp, #48]	; 0x30
 800ead4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	dd05      	ble.n	800eae6 <_dtoa_r+0x906>
 800eada:	001a      	movs	r2, r3
 800eadc:	9905      	ldr	r1, [sp, #20]
 800eade:	9804      	ldr	r0, [sp, #16]
 800eae0:	f000 ffa8 	bl	800fa34 <__lshift>
 800eae4:	9005      	str	r0, [sp, #20]
 800eae6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eae8:	2b00      	cmp	r3, #0
 800eaea:	dd05      	ble.n	800eaf8 <_dtoa_r+0x918>
 800eaec:	0031      	movs	r1, r6
 800eaee:	001a      	movs	r2, r3
 800eaf0:	9804      	ldr	r0, [sp, #16]
 800eaf2:	f000 ff9f 	bl	800fa34 <__lshift>
 800eaf6:	0006      	movs	r6, r0
 800eaf8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d027      	beq.n	800eb4e <_dtoa_r+0x96e>
 800eafe:	0031      	movs	r1, r6
 800eb00:	9805      	ldr	r0, [sp, #20]
 800eb02:	f001 f805 	bl	800fb10 <__mcmp>
 800eb06:	2800      	cmp	r0, #0
 800eb08:	da21      	bge.n	800eb4e <_dtoa_r+0x96e>
 800eb0a:	9b03      	ldr	r3, [sp, #12]
 800eb0c:	220a      	movs	r2, #10
 800eb0e:	3b01      	subs	r3, #1
 800eb10:	9303      	str	r3, [sp, #12]
 800eb12:	9905      	ldr	r1, [sp, #20]
 800eb14:	2300      	movs	r3, #0
 800eb16:	9804      	ldr	r0, [sp, #16]
 800eb18:	f000 fd90 	bl	800f63c <__multadd>
 800eb1c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eb1e:	9005      	str	r0, [sp, #20]
 800eb20:	2b00      	cmp	r3, #0
 800eb22:	d100      	bne.n	800eb26 <_dtoa_r+0x946>
 800eb24:	e15d      	b.n	800ede2 <_dtoa_r+0xc02>
 800eb26:	2300      	movs	r3, #0
 800eb28:	0039      	movs	r1, r7
 800eb2a:	220a      	movs	r2, #10
 800eb2c:	9804      	ldr	r0, [sp, #16]
 800eb2e:	f000 fd85 	bl	800f63c <__multadd>
 800eb32:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb34:	0007      	movs	r7, r0
 800eb36:	2b00      	cmp	r3, #0
 800eb38:	dc49      	bgt.n	800ebce <_dtoa_r+0x9ee>
 800eb3a:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eb3c:	2b02      	cmp	r3, #2
 800eb3e:	dc0e      	bgt.n	800eb5e <_dtoa_r+0x97e>
 800eb40:	e045      	b.n	800ebce <_dtoa_r+0x9ee>
 800eb42:	2b04      	cmp	r3, #4
 800eb44:	d0c6      	beq.n	800ead4 <_dtoa_r+0x8f4>
 800eb46:	331c      	adds	r3, #28
 800eb48:	e7bd      	b.n	800eac6 <_dtoa_r+0x8e6>
 800eb4a:	0013      	movs	r3, r2
 800eb4c:	e7fb      	b.n	800eb46 <_dtoa_r+0x966>
 800eb4e:	9b07      	ldr	r3, [sp, #28]
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	dc36      	bgt.n	800ebc2 <_dtoa_r+0x9e2>
 800eb54:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800eb56:	2b02      	cmp	r3, #2
 800eb58:	dd33      	ble.n	800ebc2 <_dtoa_r+0x9e2>
 800eb5a:	9b07      	ldr	r3, [sp, #28]
 800eb5c:	930b      	str	r3, [sp, #44]	; 0x2c
 800eb5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d10c      	bne.n	800eb7e <_dtoa_r+0x99e>
 800eb64:	0031      	movs	r1, r6
 800eb66:	2205      	movs	r2, #5
 800eb68:	9804      	ldr	r0, [sp, #16]
 800eb6a:	f000 fd67 	bl	800f63c <__multadd>
 800eb6e:	0006      	movs	r6, r0
 800eb70:	0001      	movs	r1, r0
 800eb72:	9805      	ldr	r0, [sp, #20]
 800eb74:	f000 ffcc 	bl	800fb10 <__mcmp>
 800eb78:	2800      	cmp	r0, #0
 800eb7a:	dd00      	ble.n	800eb7e <_dtoa_r+0x99e>
 800eb7c:	e59f      	b.n	800e6be <_dtoa_r+0x4de>
 800eb7e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800eb80:	43db      	mvns	r3, r3
 800eb82:	9303      	str	r3, [sp, #12]
 800eb84:	9b06      	ldr	r3, [sp, #24]
 800eb86:	9308      	str	r3, [sp, #32]
 800eb88:	2500      	movs	r5, #0
 800eb8a:	0031      	movs	r1, r6
 800eb8c:	9804      	ldr	r0, [sp, #16]
 800eb8e:	f000 fd31 	bl	800f5f4 <_Bfree>
 800eb92:	2f00      	cmp	r7, #0
 800eb94:	d100      	bne.n	800eb98 <_dtoa_r+0x9b8>
 800eb96:	e6a3      	b.n	800e8e0 <_dtoa_r+0x700>
 800eb98:	2d00      	cmp	r5, #0
 800eb9a:	d005      	beq.n	800eba8 <_dtoa_r+0x9c8>
 800eb9c:	42bd      	cmp	r5, r7
 800eb9e:	d003      	beq.n	800eba8 <_dtoa_r+0x9c8>
 800eba0:	0029      	movs	r1, r5
 800eba2:	9804      	ldr	r0, [sp, #16]
 800eba4:	f000 fd26 	bl	800f5f4 <_Bfree>
 800eba8:	0039      	movs	r1, r7
 800ebaa:	9804      	ldr	r0, [sp, #16]
 800ebac:	f000 fd22 	bl	800f5f4 <_Bfree>
 800ebb0:	e696      	b.n	800e8e0 <_dtoa_r+0x700>
 800ebb2:	2600      	movs	r6, #0
 800ebb4:	0037      	movs	r7, r6
 800ebb6:	e7e2      	b.n	800eb7e <_dtoa_r+0x99e>
 800ebb8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ebba:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ebbc:	9303      	str	r3, [sp, #12]
 800ebbe:	0037      	movs	r7, r6
 800ebc0:	e57d      	b.n	800e6be <_dtoa_r+0x4de>
 800ebc2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ebc4:	2b00      	cmp	r3, #0
 800ebc6:	d100      	bne.n	800ebca <_dtoa_r+0x9ea>
 800ebc8:	e0c3      	b.n	800ed52 <_dtoa_r+0xb72>
 800ebca:	9b07      	ldr	r3, [sp, #28]
 800ebcc:	930b      	str	r3, [sp, #44]	; 0x2c
 800ebce:	2c00      	cmp	r4, #0
 800ebd0:	dd05      	ble.n	800ebde <_dtoa_r+0x9fe>
 800ebd2:	0039      	movs	r1, r7
 800ebd4:	0022      	movs	r2, r4
 800ebd6:	9804      	ldr	r0, [sp, #16]
 800ebd8:	f000 ff2c 	bl	800fa34 <__lshift>
 800ebdc:	0007      	movs	r7, r0
 800ebde:	0038      	movs	r0, r7
 800ebe0:	2d00      	cmp	r5, #0
 800ebe2:	d024      	beq.n	800ec2e <_dtoa_r+0xa4e>
 800ebe4:	6879      	ldr	r1, [r7, #4]
 800ebe6:	9804      	ldr	r0, [sp, #16]
 800ebe8:	f000 fcc0 	bl	800f56c <_Balloc>
 800ebec:	1e04      	subs	r4, r0, #0
 800ebee:	d111      	bne.n	800ec14 <_dtoa_r+0xa34>
 800ebf0:	0022      	movs	r2, r4
 800ebf2:	4b05      	ldr	r3, [pc, #20]	; (800ec08 <_dtoa_r+0xa28>)
 800ebf4:	4805      	ldr	r0, [pc, #20]	; (800ec0c <_dtoa_r+0xa2c>)
 800ebf6:	4906      	ldr	r1, [pc, #24]	; (800ec10 <_dtoa_r+0xa30>)
 800ebf8:	f7ff fb07 	bl	800e20a <_dtoa_r+0x2a>
 800ebfc:	40240000 	.word	0x40240000
 800ec00:	00000433 	.word	0x00000433
 800ec04:	7ff00000 	.word	0x7ff00000
 800ec08:	080116a7 	.word	0x080116a7
 800ec0c:	0801164f 	.word	0x0801164f
 800ec10:	000002ef 	.word	0x000002ef
 800ec14:	0039      	movs	r1, r7
 800ec16:	693a      	ldr	r2, [r7, #16]
 800ec18:	310c      	adds	r1, #12
 800ec1a:	3202      	adds	r2, #2
 800ec1c:	0092      	lsls	r2, r2, #2
 800ec1e:	300c      	adds	r0, #12
 800ec20:	f7ff fa20 	bl	800e064 <memcpy>
 800ec24:	2201      	movs	r2, #1
 800ec26:	0021      	movs	r1, r4
 800ec28:	9804      	ldr	r0, [sp, #16]
 800ec2a:	f000 ff03 	bl	800fa34 <__lshift>
 800ec2e:	9b06      	ldr	r3, [sp, #24]
 800ec30:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ec32:	9307      	str	r3, [sp, #28]
 800ec34:	3b01      	subs	r3, #1
 800ec36:	189b      	adds	r3, r3, r2
 800ec38:	2201      	movs	r2, #1
 800ec3a:	003d      	movs	r5, r7
 800ec3c:	0007      	movs	r7, r0
 800ec3e:	930e      	str	r3, [sp, #56]	; 0x38
 800ec40:	9b08      	ldr	r3, [sp, #32]
 800ec42:	4013      	ands	r3, r2
 800ec44:	930d      	str	r3, [sp, #52]	; 0x34
 800ec46:	0031      	movs	r1, r6
 800ec48:	9805      	ldr	r0, [sp, #20]
 800ec4a:	f7ff fa39 	bl	800e0c0 <quorem>
 800ec4e:	0029      	movs	r1, r5
 800ec50:	0004      	movs	r4, r0
 800ec52:	900b      	str	r0, [sp, #44]	; 0x2c
 800ec54:	9805      	ldr	r0, [sp, #20]
 800ec56:	f000 ff5b 	bl	800fb10 <__mcmp>
 800ec5a:	003a      	movs	r2, r7
 800ec5c:	900c      	str	r0, [sp, #48]	; 0x30
 800ec5e:	0031      	movs	r1, r6
 800ec60:	9804      	ldr	r0, [sp, #16]
 800ec62:	f000 ff71 	bl	800fb48 <__mdiff>
 800ec66:	2201      	movs	r2, #1
 800ec68:	68c3      	ldr	r3, [r0, #12]
 800ec6a:	3430      	adds	r4, #48	; 0x30
 800ec6c:	9008      	str	r0, [sp, #32]
 800ec6e:	920a      	str	r2, [sp, #40]	; 0x28
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d104      	bne.n	800ec7e <_dtoa_r+0xa9e>
 800ec74:	0001      	movs	r1, r0
 800ec76:	9805      	ldr	r0, [sp, #20]
 800ec78:	f000 ff4a 	bl	800fb10 <__mcmp>
 800ec7c:	900a      	str	r0, [sp, #40]	; 0x28
 800ec7e:	9908      	ldr	r1, [sp, #32]
 800ec80:	9804      	ldr	r0, [sp, #16]
 800ec82:	f000 fcb7 	bl	800f5f4 <_Bfree>
 800ec86:	9b07      	ldr	r3, [sp, #28]
 800ec88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	9308      	str	r3, [sp, #32]
 800ec8e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800ec90:	4313      	orrs	r3, r2
 800ec92:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ec94:	4313      	orrs	r3, r2
 800ec96:	d109      	bne.n	800ecac <_dtoa_r+0xacc>
 800ec98:	2c39      	cmp	r4, #57	; 0x39
 800ec9a:	d022      	beq.n	800ece2 <_dtoa_r+0xb02>
 800ec9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ec9e:	2b00      	cmp	r3, #0
 800eca0:	dd01      	ble.n	800eca6 <_dtoa_r+0xac6>
 800eca2:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800eca4:	3431      	adds	r4, #49	; 0x31
 800eca6:	9b07      	ldr	r3, [sp, #28]
 800eca8:	701c      	strb	r4, [r3, #0]
 800ecaa:	e76e      	b.n	800eb8a <_dtoa_r+0x9aa>
 800ecac:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecae:	2b00      	cmp	r3, #0
 800ecb0:	db04      	blt.n	800ecbc <_dtoa_r+0xadc>
 800ecb2:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ecb4:	4313      	orrs	r3, r2
 800ecb6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ecb8:	4313      	orrs	r3, r2
 800ecba:	d11e      	bne.n	800ecfa <_dtoa_r+0xb1a>
 800ecbc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecbe:	2b00      	cmp	r3, #0
 800ecc0:	ddf1      	ble.n	800eca6 <_dtoa_r+0xac6>
 800ecc2:	9905      	ldr	r1, [sp, #20]
 800ecc4:	2201      	movs	r2, #1
 800ecc6:	9804      	ldr	r0, [sp, #16]
 800ecc8:	f000 feb4 	bl	800fa34 <__lshift>
 800eccc:	0031      	movs	r1, r6
 800ecce:	9005      	str	r0, [sp, #20]
 800ecd0:	f000 ff1e 	bl	800fb10 <__mcmp>
 800ecd4:	2800      	cmp	r0, #0
 800ecd6:	dc02      	bgt.n	800ecde <_dtoa_r+0xafe>
 800ecd8:	d1e5      	bne.n	800eca6 <_dtoa_r+0xac6>
 800ecda:	07e3      	lsls	r3, r4, #31
 800ecdc:	d5e3      	bpl.n	800eca6 <_dtoa_r+0xac6>
 800ecde:	2c39      	cmp	r4, #57	; 0x39
 800ece0:	d1df      	bne.n	800eca2 <_dtoa_r+0xac2>
 800ece2:	2339      	movs	r3, #57	; 0x39
 800ece4:	9a07      	ldr	r2, [sp, #28]
 800ece6:	7013      	strb	r3, [r2, #0]
 800ece8:	9b08      	ldr	r3, [sp, #32]
 800ecea:	9308      	str	r3, [sp, #32]
 800ecec:	3b01      	subs	r3, #1
 800ecee:	781a      	ldrb	r2, [r3, #0]
 800ecf0:	2a39      	cmp	r2, #57	; 0x39
 800ecf2:	d063      	beq.n	800edbc <_dtoa_r+0xbdc>
 800ecf4:	3201      	adds	r2, #1
 800ecf6:	701a      	strb	r2, [r3, #0]
 800ecf8:	e747      	b.n	800eb8a <_dtoa_r+0x9aa>
 800ecfa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ecfc:	2b00      	cmp	r3, #0
 800ecfe:	dd03      	ble.n	800ed08 <_dtoa_r+0xb28>
 800ed00:	2c39      	cmp	r4, #57	; 0x39
 800ed02:	d0ee      	beq.n	800ece2 <_dtoa_r+0xb02>
 800ed04:	3401      	adds	r4, #1
 800ed06:	e7ce      	b.n	800eca6 <_dtoa_r+0xac6>
 800ed08:	9b07      	ldr	r3, [sp, #28]
 800ed0a:	9a07      	ldr	r2, [sp, #28]
 800ed0c:	701c      	strb	r4, [r3, #0]
 800ed0e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ed10:	4293      	cmp	r3, r2
 800ed12:	d03e      	beq.n	800ed92 <_dtoa_r+0xbb2>
 800ed14:	2300      	movs	r3, #0
 800ed16:	220a      	movs	r2, #10
 800ed18:	9905      	ldr	r1, [sp, #20]
 800ed1a:	9804      	ldr	r0, [sp, #16]
 800ed1c:	f000 fc8e 	bl	800f63c <__multadd>
 800ed20:	2300      	movs	r3, #0
 800ed22:	9005      	str	r0, [sp, #20]
 800ed24:	220a      	movs	r2, #10
 800ed26:	0029      	movs	r1, r5
 800ed28:	9804      	ldr	r0, [sp, #16]
 800ed2a:	42bd      	cmp	r5, r7
 800ed2c:	d106      	bne.n	800ed3c <_dtoa_r+0xb5c>
 800ed2e:	f000 fc85 	bl	800f63c <__multadd>
 800ed32:	0005      	movs	r5, r0
 800ed34:	0007      	movs	r7, r0
 800ed36:	9b08      	ldr	r3, [sp, #32]
 800ed38:	9307      	str	r3, [sp, #28]
 800ed3a:	e784      	b.n	800ec46 <_dtoa_r+0xa66>
 800ed3c:	f000 fc7e 	bl	800f63c <__multadd>
 800ed40:	0039      	movs	r1, r7
 800ed42:	0005      	movs	r5, r0
 800ed44:	2300      	movs	r3, #0
 800ed46:	220a      	movs	r2, #10
 800ed48:	9804      	ldr	r0, [sp, #16]
 800ed4a:	f000 fc77 	bl	800f63c <__multadd>
 800ed4e:	0007      	movs	r7, r0
 800ed50:	e7f1      	b.n	800ed36 <_dtoa_r+0xb56>
 800ed52:	9b07      	ldr	r3, [sp, #28]
 800ed54:	930b      	str	r3, [sp, #44]	; 0x2c
 800ed56:	2500      	movs	r5, #0
 800ed58:	0031      	movs	r1, r6
 800ed5a:	9805      	ldr	r0, [sp, #20]
 800ed5c:	f7ff f9b0 	bl	800e0c0 <quorem>
 800ed60:	9b06      	ldr	r3, [sp, #24]
 800ed62:	3030      	adds	r0, #48	; 0x30
 800ed64:	5558      	strb	r0, [r3, r5]
 800ed66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ed68:	3501      	adds	r5, #1
 800ed6a:	0004      	movs	r4, r0
 800ed6c:	42ab      	cmp	r3, r5
 800ed6e:	dd07      	ble.n	800ed80 <_dtoa_r+0xba0>
 800ed70:	2300      	movs	r3, #0
 800ed72:	220a      	movs	r2, #10
 800ed74:	9905      	ldr	r1, [sp, #20]
 800ed76:	9804      	ldr	r0, [sp, #16]
 800ed78:	f000 fc60 	bl	800f63c <__multadd>
 800ed7c:	9005      	str	r0, [sp, #20]
 800ed7e:	e7eb      	b.n	800ed58 <_dtoa_r+0xb78>
 800ed80:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ed82:	2301      	movs	r3, #1
 800ed84:	2a00      	cmp	r2, #0
 800ed86:	dd00      	ble.n	800ed8a <_dtoa_r+0xbaa>
 800ed88:	0013      	movs	r3, r2
 800ed8a:	2500      	movs	r5, #0
 800ed8c:	9a06      	ldr	r2, [sp, #24]
 800ed8e:	18d3      	adds	r3, r2, r3
 800ed90:	9308      	str	r3, [sp, #32]
 800ed92:	9905      	ldr	r1, [sp, #20]
 800ed94:	2201      	movs	r2, #1
 800ed96:	9804      	ldr	r0, [sp, #16]
 800ed98:	f000 fe4c 	bl	800fa34 <__lshift>
 800ed9c:	0031      	movs	r1, r6
 800ed9e:	9005      	str	r0, [sp, #20]
 800eda0:	f000 feb6 	bl	800fb10 <__mcmp>
 800eda4:	2800      	cmp	r0, #0
 800eda6:	dc9f      	bgt.n	800ece8 <_dtoa_r+0xb08>
 800eda8:	d101      	bne.n	800edae <_dtoa_r+0xbce>
 800edaa:	07e4      	lsls	r4, r4, #31
 800edac:	d49c      	bmi.n	800ece8 <_dtoa_r+0xb08>
 800edae:	9b08      	ldr	r3, [sp, #32]
 800edb0:	9308      	str	r3, [sp, #32]
 800edb2:	3b01      	subs	r3, #1
 800edb4:	781a      	ldrb	r2, [r3, #0]
 800edb6:	2a30      	cmp	r2, #48	; 0x30
 800edb8:	d0fa      	beq.n	800edb0 <_dtoa_r+0xbd0>
 800edba:	e6e6      	b.n	800eb8a <_dtoa_r+0x9aa>
 800edbc:	9a06      	ldr	r2, [sp, #24]
 800edbe:	429a      	cmp	r2, r3
 800edc0:	d193      	bne.n	800ecea <_dtoa_r+0xb0a>
 800edc2:	9b03      	ldr	r3, [sp, #12]
 800edc4:	3301      	adds	r3, #1
 800edc6:	9303      	str	r3, [sp, #12]
 800edc8:	2331      	movs	r3, #49	; 0x31
 800edca:	7013      	strb	r3, [r2, #0]
 800edcc:	e6dd      	b.n	800eb8a <_dtoa_r+0x9aa>
 800edce:	4b09      	ldr	r3, [pc, #36]	; (800edf4 <_dtoa_r+0xc14>)
 800edd0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800edd2:	9306      	str	r3, [sp, #24]
 800edd4:	4b08      	ldr	r3, [pc, #32]	; (800edf8 <_dtoa_r+0xc18>)
 800edd6:	2a00      	cmp	r2, #0
 800edd8:	d001      	beq.n	800edde <_dtoa_r+0xbfe>
 800edda:	f7ff fa49 	bl	800e270 <_dtoa_r+0x90>
 800edde:	f7ff fa49 	bl	800e274 <_dtoa_r+0x94>
 800ede2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ede4:	2b00      	cmp	r3, #0
 800ede6:	dcb6      	bgt.n	800ed56 <_dtoa_r+0xb76>
 800ede8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800edea:	2b02      	cmp	r3, #2
 800edec:	dd00      	ble.n	800edf0 <_dtoa_r+0xc10>
 800edee:	e6b6      	b.n	800eb5e <_dtoa_r+0x97e>
 800edf0:	e7b1      	b.n	800ed56 <_dtoa_r+0xb76>
 800edf2:	46c0      	nop			; (mov r8, r8)
 800edf4:	08011642 	.word	0x08011642
 800edf8:	0801164a 	.word	0x0801164a

0800edfc <_free_r>:
 800edfc:	b570      	push	{r4, r5, r6, lr}
 800edfe:	0005      	movs	r5, r0
 800ee00:	2900      	cmp	r1, #0
 800ee02:	d010      	beq.n	800ee26 <_free_r+0x2a>
 800ee04:	1f0c      	subs	r4, r1, #4
 800ee06:	6823      	ldr	r3, [r4, #0]
 800ee08:	2b00      	cmp	r3, #0
 800ee0a:	da00      	bge.n	800ee0e <_free_r+0x12>
 800ee0c:	18e4      	adds	r4, r4, r3
 800ee0e:	0028      	movs	r0, r5
 800ee10:	f7fd fb04 	bl	800c41c <__malloc_lock>
 800ee14:	4a1d      	ldr	r2, [pc, #116]	; (800ee8c <_free_r+0x90>)
 800ee16:	6813      	ldr	r3, [r2, #0]
 800ee18:	2b00      	cmp	r3, #0
 800ee1a:	d105      	bne.n	800ee28 <_free_r+0x2c>
 800ee1c:	6063      	str	r3, [r4, #4]
 800ee1e:	6014      	str	r4, [r2, #0]
 800ee20:	0028      	movs	r0, r5
 800ee22:	f7fd fb03 	bl	800c42c <__malloc_unlock>
 800ee26:	bd70      	pop	{r4, r5, r6, pc}
 800ee28:	42a3      	cmp	r3, r4
 800ee2a:	d908      	bls.n	800ee3e <_free_r+0x42>
 800ee2c:	6820      	ldr	r0, [r4, #0]
 800ee2e:	1821      	adds	r1, r4, r0
 800ee30:	428b      	cmp	r3, r1
 800ee32:	d1f3      	bne.n	800ee1c <_free_r+0x20>
 800ee34:	6819      	ldr	r1, [r3, #0]
 800ee36:	685b      	ldr	r3, [r3, #4]
 800ee38:	1809      	adds	r1, r1, r0
 800ee3a:	6021      	str	r1, [r4, #0]
 800ee3c:	e7ee      	b.n	800ee1c <_free_r+0x20>
 800ee3e:	001a      	movs	r2, r3
 800ee40:	685b      	ldr	r3, [r3, #4]
 800ee42:	2b00      	cmp	r3, #0
 800ee44:	d001      	beq.n	800ee4a <_free_r+0x4e>
 800ee46:	42a3      	cmp	r3, r4
 800ee48:	d9f9      	bls.n	800ee3e <_free_r+0x42>
 800ee4a:	6811      	ldr	r1, [r2, #0]
 800ee4c:	1850      	adds	r0, r2, r1
 800ee4e:	42a0      	cmp	r0, r4
 800ee50:	d10b      	bne.n	800ee6a <_free_r+0x6e>
 800ee52:	6820      	ldr	r0, [r4, #0]
 800ee54:	1809      	adds	r1, r1, r0
 800ee56:	1850      	adds	r0, r2, r1
 800ee58:	6011      	str	r1, [r2, #0]
 800ee5a:	4283      	cmp	r3, r0
 800ee5c:	d1e0      	bne.n	800ee20 <_free_r+0x24>
 800ee5e:	6818      	ldr	r0, [r3, #0]
 800ee60:	685b      	ldr	r3, [r3, #4]
 800ee62:	1841      	adds	r1, r0, r1
 800ee64:	6011      	str	r1, [r2, #0]
 800ee66:	6053      	str	r3, [r2, #4]
 800ee68:	e7da      	b.n	800ee20 <_free_r+0x24>
 800ee6a:	42a0      	cmp	r0, r4
 800ee6c:	d902      	bls.n	800ee74 <_free_r+0x78>
 800ee6e:	230c      	movs	r3, #12
 800ee70:	602b      	str	r3, [r5, #0]
 800ee72:	e7d5      	b.n	800ee20 <_free_r+0x24>
 800ee74:	6820      	ldr	r0, [r4, #0]
 800ee76:	1821      	adds	r1, r4, r0
 800ee78:	428b      	cmp	r3, r1
 800ee7a:	d103      	bne.n	800ee84 <_free_r+0x88>
 800ee7c:	6819      	ldr	r1, [r3, #0]
 800ee7e:	685b      	ldr	r3, [r3, #4]
 800ee80:	1809      	adds	r1, r1, r0
 800ee82:	6021      	str	r1, [r4, #0]
 800ee84:	6063      	str	r3, [r4, #4]
 800ee86:	6054      	str	r4, [r2, #4]
 800ee88:	e7ca      	b.n	800ee20 <_free_r+0x24>
 800ee8a:	46c0      	nop			; (mov r8, r8)
 800ee8c:	20003b98 	.word	0x20003b98

0800ee90 <rshift>:
 800ee90:	0002      	movs	r2, r0
 800ee92:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ee94:	6904      	ldr	r4, [r0, #16]
 800ee96:	114b      	asrs	r3, r1, #5
 800ee98:	b085      	sub	sp, #20
 800ee9a:	3214      	adds	r2, #20
 800ee9c:	9302      	str	r3, [sp, #8]
 800ee9e:	114d      	asrs	r5, r1, #5
 800eea0:	0013      	movs	r3, r2
 800eea2:	42ac      	cmp	r4, r5
 800eea4:	dd32      	ble.n	800ef0c <rshift+0x7c>
 800eea6:	261f      	movs	r6, #31
 800eea8:	000f      	movs	r7, r1
 800eeaa:	114b      	asrs	r3, r1, #5
 800eeac:	009b      	lsls	r3, r3, #2
 800eeae:	00a5      	lsls	r5, r4, #2
 800eeb0:	18d3      	adds	r3, r2, r3
 800eeb2:	4037      	ands	r7, r6
 800eeb4:	1955      	adds	r5, r2, r5
 800eeb6:	9300      	str	r3, [sp, #0]
 800eeb8:	9701      	str	r7, [sp, #4]
 800eeba:	4231      	tst	r1, r6
 800eebc:	d10d      	bne.n	800eeda <rshift+0x4a>
 800eebe:	0016      	movs	r6, r2
 800eec0:	0019      	movs	r1, r3
 800eec2:	428d      	cmp	r5, r1
 800eec4:	d836      	bhi.n	800ef34 <rshift+0xa4>
 800eec6:	9900      	ldr	r1, [sp, #0]
 800eec8:	2300      	movs	r3, #0
 800eeca:	3903      	subs	r1, #3
 800eecc:	428d      	cmp	r5, r1
 800eece:	d302      	bcc.n	800eed6 <rshift+0x46>
 800eed0:	9b02      	ldr	r3, [sp, #8]
 800eed2:	1ae4      	subs	r4, r4, r3
 800eed4:	00a3      	lsls	r3, r4, #2
 800eed6:	18d3      	adds	r3, r2, r3
 800eed8:	e018      	b.n	800ef0c <rshift+0x7c>
 800eeda:	2120      	movs	r1, #32
 800eedc:	9e01      	ldr	r6, [sp, #4]
 800eede:	9f01      	ldr	r7, [sp, #4]
 800eee0:	1b89      	subs	r1, r1, r6
 800eee2:	9e00      	ldr	r6, [sp, #0]
 800eee4:	9103      	str	r1, [sp, #12]
 800eee6:	ce02      	ldmia	r6!, {r1}
 800eee8:	4694      	mov	ip, r2
 800eeea:	40f9      	lsrs	r1, r7
 800eeec:	42b5      	cmp	r5, r6
 800eeee:	d816      	bhi.n	800ef1e <rshift+0x8e>
 800eef0:	9e00      	ldr	r6, [sp, #0]
 800eef2:	2300      	movs	r3, #0
 800eef4:	3601      	adds	r6, #1
 800eef6:	42b5      	cmp	r5, r6
 800eef8:	d303      	bcc.n	800ef02 <rshift+0x72>
 800eefa:	9b02      	ldr	r3, [sp, #8]
 800eefc:	1ae3      	subs	r3, r4, r3
 800eefe:	009b      	lsls	r3, r3, #2
 800ef00:	3b04      	subs	r3, #4
 800ef02:	18d3      	adds	r3, r2, r3
 800ef04:	6019      	str	r1, [r3, #0]
 800ef06:	2900      	cmp	r1, #0
 800ef08:	d000      	beq.n	800ef0c <rshift+0x7c>
 800ef0a:	3304      	adds	r3, #4
 800ef0c:	1a99      	subs	r1, r3, r2
 800ef0e:	1089      	asrs	r1, r1, #2
 800ef10:	6101      	str	r1, [r0, #16]
 800ef12:	4293      	cmp	r3, r2
 800ef14:	d101      	bne.n	800ef1a <rshift+0x8a>
 800ef16:	2300      	movs	r3, #0
 800ef18:	6143      	str	r3, [r0, #20]
 800ef1a:	b005      	add	sp, #20
 800ef1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ef1e:	6837      	ldr	r7, [r6, #0]
 800ef20:	9b03      	ldr	r3, [sp, #12]
 800ef22:	409f      	lsls	r7, r3
 800ef24:	430f      	orrs	r7, r1
 800ef26:	4661      	mov	r1, ip
 800ef28:	c180      	stmia	r1!, {r7}
 800ef2a:	468c      	mov	ip, r1
 800ef2c:	9b01      	ldr	r3, [sp, #4]
 800ef2e:	ce02      	ldmia	r6!, {r1}
 800ef30:	40d9      	lsrs	r1, r3
 800ef32:	e7db      	b.n	800eeec <rshift+0x5c>
 800ef34:	c980      	ldmia	r1!, {r7}
 800ef36:	c680      	stmia	r6!, {r7}
 800ef38:	e7c3      	b.n	800eec2 <rshift+0x32>

0800ef3a <__hexdig_fun>:
 800ef3a:	0002      	movs	r2, r0
 800ef3c:	3a30      	subs	r2, #48	; 0x30
 800ef3e:	0003      	movs	r3, r0
 800ef40:	2a09      	cmp	r2, #9
 800ef42:	d802      	bhi.n	800ef4a <__hexdig_fun+0x10>
 800ef44:	3b20      	subs	r3, #32
 800ef46:	b2d8      	uxtb	r0, r3
 800ef48:	4770      	bx	lr
 800ef4a:	0002      	movs	r2, r0
 800ef4c:	3a61      	subs	r2, #97	; 0x61
 800ef4e:	2a05      	cmp	r2, #5
 800ef50:	d801      	bhi.n	800ef56 <__hexdig_fun+0x1c>
 800ef52:	3b47      	subs	r3, #71	; 0x47
 800ef54:	e7f7      	b.n	800ef46 <__hexdig_fun+0xc>
 800ef56:	001a      	movs	r2, r3
 800ef58:	3a41      	subs	r2, #65	; 0x41
 800ef5a:	2000      	movs	r0, #0
 800ef5c:	2a05      	cmp	r2, #5
 800ef5e:	d8f3      	bhi.n	800ef48 <__hexdig_fun+0xe>
 800ef60:	3b27      	subs	r3, #39	; 0x27
 800ef62:	e7f0      	b.n	800ef46 <__hexdig_fun+0xc>

0800ef64 <__gethex>:
 800ef64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ef66:	b089      	sub	sp, #36	; 0x24
 800ef68:	9307      	str	r3, [sp, #28]
 800ef6a:	2302      	movs	r3, #2
 800ef6c:	9201      	str	r2, [sp, #4]
 800ef6e:	680a      	ldr	r2, [r1, #0]
 800ef70:	425b      	negs	r3, r3
 800ef72:	9003      	str	r0, [sp, #12]
 800ef74:	9106      	str	r1, [sp, #24]
 800ef76:	1c96      	adds	r6, r2, #2
 800ef78:	1a9b      	subs	r3, r3, r2
 800ef7a:	199a      	adds	r2, r3, r6
 800ef7c:	9600      	str	r6, [sp, #0]
 800ef7e:	9205      	str	r2, [sp, #20]
 800ef80:	9a00      	ldr	r2, [sp, #0]
 800ef82:	3601      	adds	r6, #1
 800ef84:	7810      	ldrb	r0, [r2, #0]
 800ef86:	2830      	cmp	r0, #48	; 0x30
 800ef88:	d0f7      	beq.n	800ef7a <__gethex+0x16>
 800ef8a:	f7ff ffd6 	bl	800ef3a <__hexdig_fun>
 800ef8e:	2300      	movs	r3, #0
 800ef90:	001d      	movs	r5, r3
 800ef92:	9302      	str	r3, [sp, #8]
 800ef94:	4298      	cmp	r0, r3
 800ef96:	d11d      	bne.n	800efd4 <__gethex+0x70>
 800ef98:	2201      	movs	r2, #1
 800ef9a:	49a6      	ldr	r1, [pc, #664]	; (800f234 <__gethex+0x2d0>)
 800ef9c:	9800      	ldr	r0, [sp, #0]
 800ef9e:	f7fe ff1d 	bl	800dddc <strncmp>
 800efa2:	0007      	movs	r7, r0
 800efa4:	42a8      	cmp	r0, r5
 800efa6:	d169      	bne.n	800f07c <__gethex+0x118>
 800efa8:	9b00      	ldr	r3, [sp, #0]
 800efaa:	0034      	movs	r4, r6
 800efac:	7858      	ldrb	r0, [r3, #1]
 800efae:	f7ff ffc4 	bl	800ef3a <__hexdig_fun>
 800efb2:	2301      	movs	r3, #1
 800efb4:	9302      	str	r3, [sp, #8]
 800efb6:	42a8      	cmp	r0, r5
 800efb8:	d02f      	beq.n	800f01a <__gethex+0xb6>
 800efba:	9600      	str	r6, [sp, #0]
 800efbc:	9b00      	ldr	r3, [sp, #0]
 800efbe:	7818      	ldrb	r0, [r3, #0]
 800efc0:	2830      	cmp	r0, #48	; 0x30
 800efc2:	d009      	beq.n	800efd8 <__gethex+0x74>
 800efc4:	f7ff ffb9 	bl	800ef3a <__hexdig_fun>
 800efc8:	4242      	negs	r2, r0
 800efca:	4142      	adcs	r2, r0
 800efcc:	2301      	movs	r3, #1
 800efce:	0035      	movs	r5, r6
 800efd0:	9202      	str	r2, [sp, #8]
 800efd2:	9305      	str	r3, [sp, #20]
 800efd4:	9c00      	ldr	r4, [sp, #0]
 800efd6:	e004      	b.n	800efe2 <__gethex+0x7e>
 800efd8:	9b00      	ldr	r3, [sp, #0]
 800efda:	3301      	adds	r3, #1
 800efdc:	9300      	str	r3, [sp, #0]
 800efde:	e7ed      	b.n	800efbc <__gethex+0x58>
 800efe0:	3401      	adds	r4, #1
 800efe2:	7820      	ldrb	r0, [r4, #0]
 800efe4:	f7ff ffa9 	bl	800ef3a <__hexdig_fun>
 800efe8:	1e07      	subs	r7, r0, #0
 800efea:	d1f9      	bne.n	800efe0 <__gethex+0x7c>
 800efec:	2201      	movs	r2, #1
 800efee:	0020      	movs	r0, r4
 800eff0:	4990      	ldr	r1, [pc, #576]	; (800f234 <__gethex+0x2d0>)
 800eff2:	f7fe fef3 	bl	800dddc <strncmp>
 800eff6:	2800      	cmp	r0, #0
 800eff8:	d10d      	bne.n	800f016 <__gethex+0xb2>
 800effa:	2d00      	cmp	r5, #0
 800effc:	d106      	bne.n	800f00c <__gethex+0xa8>
 800effe:	3401      	adds	r4, #1
 800f000:	0025      	movs	r5, r4
 800f002:	7820      	ldrb	r0, [r4, #0]
 800f004:	f7ff ff99 	bl	800ef3a <__hexdig_fun>
 800f008:	2800      	cmp	r0, #0
 800f00a:	d102      	bne.n	800f012 <__gethex+0xae>
 800f00c:	1b2d      	subs	r5, r5, r4
 800f00e:	00af      	lsls	r7, r5, #2
 800f010:	e003      	b.n	800f01a <__gethex+0xb6>
 800f012:	3401      	adds	r4, #1
 800f014:	e7f5      	b.n	800f002 <__gethex+0x9e>
 800f016:	2d00      	cmp	r5, #0
 800f018:	d1f8      	bne.n	800f00c <__gethex+0xa8>
 800f01a:	2220      	movs	r2, #32
 800f01c:	7823      	ldrb	r3, [r4, #0]
 800f01e:	0026      	movs	r6, r4
 800f020:	4393      	bics	r3, r2
 800f022:	2b50      	cmp	r3, #80	; 0x50
 800f024:	d11d      	bne.n	800f062 <__gethex+0xfe>
 800f026:	7863      	ldrb	r3, [r4, #1]
 800f028:	2b2b      	cmp	r3, #43	; 0x2b
 800f02a:	d02c      	beq.n	800f086 <__gethex+0x122>
 800f02c:	2b2d      	cmp	r3, #45	; 0x2d
 800f02e:	d02e      	beq.n	800f08e <__gethex+0x12a>
 800f030:	2300      	movs	r3, #0
 800f032:	1c66      	adds	r6, r4, #1
 800f034:	9304      	str	r3, [sp, #16]
 800f036:	7830      	ldrb	r0, [r6, #0]
 800f038:	f7ff ff7f 	bl	800ef3a <__hexdig_fun>
 800f03c:	1e43      	subs	r3, r0, #1
 800f03e:	b2db      	uxtb	r3, r3
 800f040:	2b18      	cmp	r3, #24
 800f042:	d82b      	bhi.n	800f09c <__gethex+0x138>
 800f044:	3810      	subs	r0, #16
 800f046:	0005      	movs	r5, r0
 800f048:	7870      	ldrb	r0, [r6, #1]
 800f04a:	f7ff ff76 	bl	800ef3a <__hexdig_fun>
 800f04e:	1e43      	subs	r3, r0, #1
 800f050:	b2db      	uxtb	r3, r3
 800f052:	3601      	adds	r6, #1
 800f054:	2b18      	cmp	r3, #24
 800f056:	d91c      	bls.n	800f092 <__gethex+0x12e>
 800f058:	9b04      	ldr	r3, [sp, #16]
 800f05a:	2b00      	cmp	r3, #0
 800f05c:	d000      	beq.n	800f060 <__gethex+0xfc>
 800f05e:	426d      	negs	r5, r5
 800f060:	197f      	adds	r7, r7, r5
 800f062:	9b06      	ldr	r3, [sp, #24]
 800f064:	601e      	str	r6, [r3, #0]
 800f066:	9b02      	ldr	r3, [sp, #8]
 800f068:	2b00      	cmp	r3, #0
 800f06a:	d019      	beq.n	800f0a0 <__gethex+0x13c>
 800f06c:	2600      	movs	r6, #0
 800f06e:	9b05      	ldr	r3, [sp, #20]
 800f070:	42b3      	cmp	r3, r6
 800f072:	d100      	bne.n	800f076 <__gethex+0x112>
 800f074:	3606      	adds	r6, #6
 800f076:	0030      	movs	r0, r6
 800f078:	b009      	add	sp, #36	; 0x24
 800f07a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f07c:	2301      	movs	r3, #1
 800f07e:	2700      	movs	r7, #0
 800f080:	9c00      	ldr	r4, [sp, #0]
 800f082:	9302      	str	r3, [sp, #8]
 800f084:	e7c9      	b.n	800f01a <__gethex+0xb6>
 800f086:	2300      	movs	r3, #0
 800f088:	9304      	str	r3, [sp, #16]
 800f08a:	1ca6      	adds	r6, r4, #2
 800f08c:	e7d3      	b.n	800f036 <__gethex+0xd2>
 800f08e:	2301      	movs	r3, #1
 800f090:	e7fa      	b.n	800f088 <__gethex+0x124>
 800f092:	230a      	movs	r3, #10
 800f094:	435d      	muls	r5, r3
 800f096:	182d      	adds	r5, r5, r0
 800f098:	3d10      	subs	r5, #16
 800f09a:	e7d5      	b.n	800f048 <__gethex+0xe4>
 800f09c:	0026      	movs	r6, r4
 800f09e:	e7e0      	b.n	800f062 <__gethex+0xfe>
 800f0a0:	9b00      	ldr	r3, [sp, #0]
 800f0a2:	9902      	ldr	r1, [sp, #8]
 800f0a4:	1ae3      	subs	r3, r4, r3
 800f0a6:	3b01      	subs	r3, #1
 800f0a8:	2b07      	cmp	r3, #7
 800f0aa:	dc0a      	bgt.n	800f0c2 <__gethex+0x15e>
 800f0ac:	9803      	ldr	r0, [sp, #12]
 800f0ae:	f000 fa5d 	bl	800f56c <_Balloc>
 800f0b2:	1e05      	subs	r5, r0, #0
 800f0b4:	d108      	bne.n	800f0c8 <__gethex+0x164>
 800f0b6:	002a      	movs	r2, r5
 800f0b8:	21e4      	movs	r1, #228	; 0xe4
 800f0ba:	4b5f      	ldr	r3, [pc, #380]	; (800f238 <__gethex+0x2d4>)
 800f0bc:	485f      	ldr	r0, [pc, #380]	; (800f23c <__gethex+0x2d8>)
 800f0be:	f7fe ffe1 	bl	800e084 <__assert_func>
 800f0c2:	3101      	adds	r1, #1
 800f0c4:	105b      	asrs	r3, r3, #1
 800f0c6:	e7ef      	b.n	800f0a8 <__gethex+0x144>
 800f0c8:	0003      	movs	r3, r0
 800f0ca:	3314      	adds	r3, #20
 800f0cc:	9302      	str	r3, [sp, #8]
 800f0ce:	9305      	str	r3, [sp, #20]
 800f0d0:	2300      	movs	r3, #0
 800f0d2:	001e      	movs	r6, r3
 800f0d4:	9304      	str	r3, [sp, #16]
 800f0d6:	9b00      	ldr	r3, [sp, #0]
 800f0d8:	42a3      	cmp	r3, r4
 800f0da:	d33f      	bcc.n	800f15c <__gethex+0x1f8>
 800f0dc:	9c05      	ldr	r4, [sp, #20]
 800f0de:	9b02      	ldr	r3, [sp, #8]
 800f0e0:	c440      	stmia	r4!, {r6}
 800f0e2:	1ae4      	subs	r4, r4, r3
 800f0e4:	10a4      	asrs	r4, r4, #2
 800f0e6:	0030      	movs	r0, r6
 800f0e8:	612c      	str	r4, [r5, #16]
 800f0ea:	f000 fb37 	bl	800f75c <__hi0bits>
 800f0ee:	9b01      	ldr	r3, [sp, #4]
 800f0f0:	0164      	lsls	r4, r4, #5
 800f0f2:	681b      	ldr	r3, [r3, #0]
 800f0f4:	1a26      	subs	r6, r4, r0
 800f0f6:	9300      	str	r3, [sp, #0]
 800f0f8:	429e      	cmp	r6, r3
 800f0fa:	dd51      	ble.n	800f1a0 <__gethex+0x23c>
 800f0fc:	1af6      	subs	r6, r6, r3
 800f0fe:	0031      	movs	r1, r6
 800f100:	0028      	movs	r0, r5
 800f102:	f000 fecb 	bl	800fe9c <__any_on>
 800f106:	1e04      	subs	r4, r0, #0
 800f108:	d016      	beq.n	800f138 <__gethex+0x1d4>
 800f10a:	2401      	movs	r4, #1
 800f10c:	231f      	movs	r3, #31
 800f10e:	0020      	movs	r0, r4
 800f110:	1e72      	subs	r2, r6, #1
 800f112:	4013      	ands	r3, r2
 800f114:	4098      	lsls	r0, r3
 800f116:	0003      	movs	r3, r0
 800f118:	1151      	asrs	r1, r2, #5
 800f11a:	9802      	ldr	r0, [sp, #8]
 800f11c:	0089      	lsls	r1, r1, #2
 800f11e:	5809      	ldr	r1, [r1, r0]
 800f120:	4219      	tst	r1, r3
 800f122:	d009      	beq.n	800f138 <__gethex+0x1d4>
 800f124:	42a2      	cmp	r2, r4
 800f126:	dd06      	ble.n	800f136 <__gethex+0x1d2>
 800f128:	0028      	movs	r0, r5
 800f12a:	1eb1      	subs	r1, r6, #2
 800f12c:	f000 feb6 	bl	800fe9c <__any_on>
 800f130:	3402      	adds	r4, #2
 800f132:	2800      	cmp	r0, #0
 800f134:	d100      	bne.n	800f138 <__gethex+0x1d4>
 800f136:	2402      	movs	r4, #2
 800f138:	0031      	movs	r1, r6
 800f13a:	0028      	movs	r0, r5
 800f13c:	f7ff fea8 	bl	800ee90 <rshift>
 800f140:	19bf      	adds	r7, r7, r6
 800f142:	9b01      	ldr	r3, [sp, #4]
 800f144:	689b      	ldr	r3, [r3, #8]
 800f146:	42bb      	cmp	r3, r7
 800f148:	da3a      	bge.n	800f1c0 <__gethex+0x25c>
 800f14a:	0029      	movs	r1, r5
 800f14c:	9803      	ldr	r0, [sp, #12]
 800f14e:	f000 fa51 	bl	800f5f4 <_Bfree>
 800f152:	2300      	movs	r3, #0
 800f154:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f156:	26a3      	movs	r6, #163	; 0xa3
 800f158:	6013      	str	r3, [r2, #0]
 800f15a:	e78c      	b.n	800f076 <__gethex+0x112>
 800f15c:	3c01      	subs	r4, #1
 800f15e:	7823      	ldrb	r3, [r4, #0]
 800f160:	2b2e      	cmp	r3, #46	; 0x2e
 800f162:	d012      	beq.n	800f18a <__gethex+0x226>
 800f164:	9b04      	ldr	r3, [sp, #16]
 800f166:	2b20      	cmp	r3, #32
 800f168:	d104      	bne.n	800f174 <__gethex+0x210>
 800f16a:	9b05      	ldr	r3, [sp, #20]
 800f16c:	c340      	stmia	r3!, {r6}
 800f16e:	2600      	movs	r6, #0
 800f170:	9305      	str	r3, [sp, #20]
 800f172:	9604      	str	r6, [sp, #16]
 800f174:	7820      	ldrb	r0, [r4, #0]
 800f176:	f7ff fee0 	bl	800ef3a <__hexdig_fun>
 800f17a:	230f      	movs	r3, #15
 800f17c:	4018      	ands	r0, r3
 800f17e:	9b04      	ldr	r3, [sp, #16]
 800f180:	4098      	lsls	r0, r3
 800f182:	3304      	adds	r3, #4
 800f184:	4306      	orrs	r6, r0
 800f186:	9304      	str	r3, [sp, #16]
 800f188:	e7a5      	b.n	800f0d6 <__gethex+0x172>
 800f18a:	9b00      	ldr	r3, [sp, #0]
 800f18c:	42a3      	cmp	r3, r4
 800f18e:	d8e9      	bhi.n	800f164 <__gethex+0x200>
 800f190:	2201      	movs	r2, #1
 800f192:	0020      	movs	r0, r4
 800f194:	4927      	ldr	r1, [pc, #156]	; (800f234 <__gethex+0x2d0>)
 800f196:	f7fe fe21 	bl	800dddc <strncmp>
 800f19a:	2800      	cmp	r0, #0
 800f19c:	d1e2      	bne.n	800f164 <__gethex+0x200>
 800f19e:	e79a      	b.n	800f0d6 <__gethex+0x172>
 800f1a0:	9b00      	ldr	r3, [sp, #0]
 800f1a2:	2400      	movs	r4, #0
 800f1a4:	429e      	cmp	r6, r3
 800f1a6:	dacc      	bge.n	800f142 <__gethex+0x1de>
 800f1a8:	1b9e      	subs	r6, r3, r6
 800f1aa:	0029      	movs	r1, r5
 800f1ac:	0032      	movs	r2, r6
 800f1ae:	9803      	ldr	r0, [sp, #12]
 800f1b0:	f000 fc40 	bl	800fa34 <__lshift>
 800f1b4:	0003      	movs	r3, r0
 800f1b6:	3314      	adds	r3, #20
 800f1b8:	0005      	movs	r5, r0
 800f1ba:	1bbf      	subs	r7, r7, r6
 800f1bc:	9302      	str	r3, [sp, #8]
 800f1be:	e7c0      	b.n	800f142 <__gethex+0x1de>
 800f1c0:	9b01      	ldr	r3, [sp, #4]
 800f1c2:	685e      	ldr	r6, [r3, #4]
 800f1c4:	42be      	cmp	r6, r7
 800f1c6:	dd70      	ble.n	800f2aa <__gethex+0x346>
 800f1c8:	9b00      	ldr	r3, [sp, #0]
 800f1ca:	1bf6      	subs	r6, r6, r7
 800f1cc:	42b3      	cmp	r3, r6
 800f1ce:	dc37      	bgt.n	800f240 <__gethex+0x2dc>
 800f1d0:	9b01      	ldr	r3, [sp, #4]
 800f1d2:	68db      	ldr	r3, [r3, #12]
 800f1d4:	2b02      	cmp	r3, #2
 800f1d6:	d024      	beq.n	800f222 <__gethex+0x2be>
 800f1d8:	2b03      	cmp	r3, #3
 800f1da:	d026      	beq.n	800f22a <__gethex+0x2c6>
 800f1dc:	2b01      	cmp	r3, #1
 800f1de:	d117      	bne.n	800f210 <__gethex+0x2ac>
 800f1e0:	9b00      	ldr	r3, [sp, #0]
 800f1e2:	42b3      	cmp	r3, r6
 800f1e4:	d114      	bne.n	800f210 <__gethex+0x2ac>
 800f1e6:	2b01      	cmp	r3, #1
 800f1e8:	d10b      	bne.n	800f202 <__gethex+0x29e>
 800f1ea:	9b01      	ldr	r3, [sp, #4]
 800f1ec:	9a07      	ldr	r2, [sp, #28]
 800f1ee:	685b      	ldr	r3, [r3, #4]
 800f1f0:	2662      	movs	r6, #98	; 0x62
 800f1f2:	6013      	str	r3, [r2, #0]
 800f1f4:	2301      	movs	r3, #1
 800f1f6:	9a02      	ldr	r2, [sp, #8]
 800f1f8:	612b      	str	r3, [r5, #16]
 800f1fa:	6013      	str	r3, [r2, #0]
 800f1fc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f1fe:	601d      	str	r5, [r3, #0]
 800f200:	e739      	b.n	800f076 <__gethex+0x112>
 800f202:	9900      	ldr	r1, [sp, #0]
 800f204:	0028      	movs	r0, r5
 800f206:	3901      	subs	r1, #1
 800f208:	f000 fe48 	bl	800fe9c <__any_on>
 800f20c:	2800      	cmp	r0, #0
 800f20e:	d1ec      	bne.n	800f1ea <__gethex+0x286>
 800f210:	0029      	movs	r1, r5
 800f212:	9803      	ldr	r0, [sp, #12]
 800f214:	f000 f9ee 	bl	800f5f4 <_Bfree>
 800f218:	2300      	movs	r3, #0
 800f21a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800f21c:	2650      	movs	r6, #80	; 0x50
 800f21e:	6013      	str	r3, [r2, #0]
 800f220:	e729      	b.n	800f076 <__gethex+0x112>
 800f222:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f224:	2b00      	cmp	r3, #0
 800f226:	d1f3      	bne.n	800f210 <__gethex+0x2ac>
 800f228:	e7df      	b.n	800f1ea <__gethex+0x286>
 800f22a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f22c:	2b00      	cmp	r3, #0
 800f22e:	d1dc      	bne.n	800f1ea <__gethex+0x286>
 800f230:	e7ee      	b.n	800f210 <__gethex+0x2ac>
 800f232:	46c0      	nop			; (mov r8, r8)
 800f234:	08011404 	.word	0x08011404
 800f238:	080116a7 	.word	0x080116a7
 800f23c:	080116b8 	.word	0x080116b8
 800f240:	1e77      	subs	r7, r6, #1
 800f242:	2c00      	cmp	r4, #0
 800f244:	d12f      	bne.n	800f2a6 <__gethex+0x342>
 800f246:	2f00      	cmp	r7, #0
 800f248:	d004      	beq.n	800f254 <__gethex+0x2f0>
 800f24a:	0039      	movs	r1, r7
 800f24c:	0028      	movs	r0, r5
 800f24e:	f000 fe25 	bl	800fe9c <__any_on>
 800f252:	0004      	movs	r4, r0
 800f254:	231f      	movs	r3, #31
 800f256:	117a      	asrs	r2, r7, #5
 800f258:	401f      	ands	r7, r3
 800f25a:	3b1e      	subs	r3, #30
 800f25c:	40bb      	lsls	r3, r7
 800f25e:	9902      	ldr	r1, [sp, #8]
 800f260:	0092      	lsls	r2, r2, #2
 800f262:	5852      	ldr	r2, [r2, r1]
 800f264:	421a      	tst	r2, r3
 800f266:	d001      	beq.n	800f26c <__gethex+0x308>
 800f268:	2302      	movs	r3, #2
 800f26a:	431c      	orrs	r4, r3
 800f26c:	9b00      	ldr	r3, [sp, #0]
 800f26e:	0031      	movs	r1, r6
 800f270:	1b9b      	subs	r3, r3, r6
 800f272:	2602      	movs	r6, #2
 800f274:	0028      	movs	r0, r5
 800f276:	9300      	str	r3, [sp, #0]
 800f278:	f7ff fe0a 	bl	800ee90 <rshift>
 800f27c:	9b01      	ldr	r3, [sp, #4]
 800f27e:	685f      	ldr	r7, [r3, #4]
 800f280:	2c00      	cmp	r4, #0
 800f282:	d041      	beq.n	800f308 <__gethex+0x3a4>
 800f284:	9b01      	ldr	r3, [sp, #4]
 800f286:	68db      	ldr	r3, [r3, #12]
 800f288:	2b02      	cmp	r3, #2
 800f28a:	d010      	beq.n	800f2ae <__gethex+0x34a>
 800f28c:	2b03      	cmp	r3, #3
 800f28e:	d012      	beq.n	800f2b6 <__gethex+0x352>
 800f290:	2b01      	cmp	r3, #1
 800f292:	d106      	bne.n	800f2a2 <__gethex+0x33e>
 800f294:	07a2      	lsls	r2, r4, #30
 800f296:	d504      	bpl.n	800f2a2 <__gethex+0x33e>
 800f298:	9a02      	ldr	r2, [sp, #8]
 800f29a:	6812      	ldr	r2, [r2, #0]
 800f29c:	4314      	orrs	r4, r2
 800f29e:	421c      	tst	r4, r3
 800f2a0:	d10c      	bne.n	800f2bc <__gethex+0x358>
 800f2a2:	2310      	movs	r3, #16
 800f2a4:	e02f      	b.n	800f306 <__gethex+0x3a2>
 800f2a6:	2401      	movs	r4, #1
 800f2a8:	e7d4      	b.n	800f254 <__gethex+0x2f0>
 800f2aa:	2601      	movs	r6, #1
 800f2ac:	e7e8      	b.n	800f280 <__gethex+0x31c>
 800f2ae:	2301      	movs	r3, #1
 800f2b0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800f2b2:	1a9b      	subs	r3, r3, r2
 800f2b4:	930f      	str	r3, [sp, #60]	; 0x3c
 800f2b6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d0f2      	beq.n	800f2a2 <__gethex+0x33e>
 800f2bc:	692b      	ldr	r3, [r5, #16]
 800f2be:	2000      	movs	r0, #0
 800f2c0:	9302      	str	r3, [sp, #8]
 800f2c2:	009b      	lsls	r3, r3, #2
 800f2c4:	9304      	str	r3, [sp, #16]
 800f2c6:	002b      	movs	r3, r5
 800f2c8:	9a04      	ldr	r2, [sp, #16]
 800f2ca:	3314      	adds	r3, #20
 800f2cc:	1899      	adds	r1, r3, r2
 800f2ce:	681a      	ldr	r2, [r3, #0]
 800f2d0:	1c54      	adds	r4, r2, #1
 800f2d2:	d01e      	beq.n	800f312 <__gethex+0x3ae>
 800f2d4:	3201      	adds	r2, #1
 800f2d6:	601a      	str	r2, [r3, #0]
 800f2d8:	002b      	movs	r3, r5
 800f2da:	3314      	adds	r3, #20
 800f2dc:	2e02      	cmp	r6, #2
 800f2de:	d141      	bne.n	800f364 <__gethex+0x400>
 800f2e0:	9a01      	ldr	r2, [sp, #4]
 800f2e2:	9900      	ldr	r1, [sp, #0]
 800f2e4:	6812      	ldr	r2, [r2, #0]
 800f2e6:	3a01      	subs	r2, #1
 800f2e8:	428a      	cmp	r2, r1
 800f2ea:	d10b      	bne.n	800f304 <__gethex+0x3a0>
 800f2ec:	221f      	movs	r2, #31
 800f2ee:	9800      	ldr	r0, [sp, #0]
 800f2f0:	1149      	asrs	r1, r1, #5
 800f2f2:	4002      	ands	r2, r0
 800f2f4:	2001      	movs	r0, #1
 800f2f6:	0004      	movs	r4, r0
 800f2f8:	4094      	lsls	r4, r2
 800f2fa:	0089      	lsls	r1, r1, #2
 800f2fc:	58cb      	ldr	r3, [r1, r3]
 800f2fe:	4223      	tst	r3, r4
 800f300:	d000      	beq.n	800f304 <__gethex+0x3a0>
 800f302:	2601      	movs	r6, #1
 800f304:	2320      	movs	r3, #32
 800f306:	431e      	orrs	r6, r3
 800f308:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800f30a:	601d      	str	r5, [r3, #0]
 800f30c:	9b07      	ldr	r3, [sp, #28]
 800f30e:	601f      	str	r7, [r3, #0]
 800f310:	e6b1      	b.n	800f076 <__gethex+0x112>
 800f312:	c301      	stmia	r3!, {r0}
 800f314:	4299      	cmp	r1, r3
 800f316:	d8da      	bhi.n	800f2ce <__gethex+0x36a>
 800f318:	68ab      	ldr	r3, [r5, #8]
 800f31a:	9a02      	ldr	r2, [sp, #8]
 800f31c:	429a      	cmp	r2, r3
 800f31e:	db18      	blt.n	800f352 <__gethex+0x3ee>
 800f320:	6869      	ldr	r1, [r5, #4]
 800f322:	9803      	ldr	r0, [sp, #12]
 800f324:	3101      	adds	r1, #1
 800f326:	f000 f921 	bl	800f56c <_Balloc>
 800f32a:	1e04      	subs	r4, r0, #0
 800f32c:	d104      	bne.n	800f338 <__gethex+0x3d4>
 800f32e:	0022      	movs	r2, r4
 800f330:	2184      	movs	r1, #132	; 0x84
 800f332:	4b1c      	ldr	r3, [pc, #112]	; (800f3a4 <__gethex+0x440>)
 800f334:	481c      	ldr	r0, [pc, #112]	; (800f3a8 <__gethex+0x444>)
 800f336:	e6c2      	b.n	800f0be <__gethex+0x15a>
 800f338:	0029      	movs	r1, r5
 800f33a:	692a      	ldr	r2, [r5, #16]
 800f33c:	310c      	adds	r1, #12
 800f33e:	3202      	adds	r2, #2
 800f340:	0092      	lsls	r2, r2, #2
 800f342:	300c      	adds	r0, #12
 800f344:	f7fe fe8e 	bl	800e064 <memcpy>
 800f348:	0029      	movs	r1, r5
 800f34a:	9803      	ldr	r0, [sp, #12]
 800f34c:	f000 f952 	bl	800f5f4 <_Bfree>
 800f350:	0025      	movs	r5, r4
 800f352:	692b      	ldr	r3, [r5, #16]
 800f354:	1c5a      	adds	r2, r3, #1
 800f356:	612a      	str	r2, [r5, #16]
 800f358:	2201      	movs	r2, #1
 800f35a:	3304      	adds	r3, #4
 800f35c:	009b      	lsls	r3, r3, #2
 800f35e:	18eb      	adds	r3, r5, r3
 800f360:	605a      	str	r2, [r3, #4]
 800f362:	e7b9      	b.n	800f2d8 <__gethex+0x374>
 800f364:	692a      	ldr	r2, [r5, #16]
 800f366:	9902      	ldr	r1, [sp, #8]
 800f368:	428a      	cmp	r2, r1
 800f36a:	dd09      	ble.n	800f380 <__gethex+0x41c>
 800f36c:	2101      	movs	r1, #1
 800f36e:	0028      	movs	r0, r5
 800f370:	f7ff fd8e 	bl	800ee90 <rshift>
 800f374:	9b01      	ldr	r3, [sp, #4]
 800f376:	3701      	adds	r7, #1
 800f378:	689b      	ldr	r3, [r3, #8]
 800f37a:	42bb      	cmp	r3, r7
 800f37c:	dac1      	bge.n	800f302 <__gethex+0x39e>
 800f37e:	e6e4      	b.n	800f14a <__gethex+0x1e6>
 800f380:	221f      	movs	r2, #31
 800f382:	9c00      	ldr	r4, [sp, #0]
 800f384:	9900      	ldr	r1, [sp, #0]
 800f386:	2601      	movs	r6, #1
 800f388:	4014      	ands	r4, r2
 800f38a:	4211      	tst	r1, r2
 800f38c:	d0ba      	beq.n	800f304 <__gethex+0x3a0>
 800f38e:	9a04      	ldr	r2, [sp, #16]
 800f390:	189b      	adds	r3, r3, r2
 800f392:	3b04      	subs	r3, #4
 800f394:	6818      	ldr	r0, [r3, #0]
 800f396:	f000 f9e1 	bl	800f75c <__hi0bits>
 800f39a:	2320      	movs	r3, #32
 800f39c:	1b1b      	subs	r3, r3, r4
 800f39e:	4298      	cmp	r0, r3
 800f3a0:	dbe4      	blt.n	800f36c <__gethex+0x408>
 800f3a2:	e7af      	b.n	800f304 <__gethex+0x3a0>
 800f3a4:	080116a7 	.word	0x080116a7
 800f3a8:	080116b8 	.word	0x080116b8

0800f3ac <L_shift>:
 800f3ac:	2308      	movs	r3, #8
 800f3ae:	b570      	push	{r4, r5, r6, lr}
 800f3b0:	2520      	movs	r5, #32
 800f3b2:	1a9a      	subs	r2, r3, r2
 800f3b4:	0092      	lsls	r2, r2, #2
 800f3b6:	1aad      	subs	r5, r5, r2
 800f3b8:	6843      	ldr	r3, [r0, #4]
 800f3ba:	6804      	ldr	r4, [r0, #0]
 800f3bc:	001e      	movs	r6, r3
 800f3be:	40ae      	lsls	r6, r5
 800f3c0:	40d3      	lsrs	r3, r2
 800f3c2:	4334      	orrs	r4, r6
 800f3c4:	6004      	str	r4, [r0, #0]
 800f3c6:	6043      	str	r3, [r0, #4]
 800f3c8:	3004      	adds	r0, #4
 800f3ca:	4288      	cmp	r0, r1
 800f3cc:	d3f4      	bcc.n	800f3b8 <L_shift+0xc>
 800f3ce:	bd70      	pop	{r4, r5, r6, pc}

0800f3d0 <__match>:
 800f3d0:	b530      	push	{r4, r5, lr}
 800f3d2:	6803      	ldr	r3, [r0, #0]
 800f3d4:	780c      	ldrb	r4, [r1, #0]
 800f3d6:	3301      	adds	r3, #1
 800f3d8:	2c00      	cmp	r4, #0
 800f3da:	d102      	bne.n	800f3e2 <__match+0x12>
 800f3dc:	6003      	str	r3, [r0, #0]
 800f3de:	2001      	movs	r0, #1
 800f3e0:	bd30      	pop	{r4, r5, pc}
 800f3e2:	781a      	ldrb	r2, [r3, #0]
 800f3e4:	0015      	movs	r5, r2
 800f3e6:	3d41      	subs	r5, #65	; 0x41
 800f3e8:	2d19      	cmp	r5, #25
 800f3ea:	d800      	bhi.n	800f3ee <__match+0x1e>
 800f3ec:	3220      	adds	r2, #32
 800f3ee:	3101      	adds	r1, #1
 800f3f0:	42a2      	cmp	r2, r4
 800f3f2:	d0ef      	beq.n	800f3d4 <__match+0x4>
 800f3f4:	2000      	movs	r0, #0
 800f3f6:	e7f3      	b.n	800f3e0 <__match+0x10>

0800f3f8 <__hexnan>:
 800f3f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f3fa:	680b      	ldr	r3, [r1, #0]
 800f3fc:	b08b      	sub	sp, #44	; 0x2c
 800f3fe:	9201      	str	r2, [sp, #4]
 800f400:	9901      	ldr	r1, [sp, #4]
 800f402:	115a      	asrs	r2, r3, #5
 800f404:	0092      	lsls	r2, r2, #2
 800f406:	188a      	adds	r2, r1, r2
 800f408:	9202      	str	r2, [sp, #8]
 800f40a:	0019      	movs	r1, r3
 800f40c:	221f      	movs	r2, #31
 800f40e:	4011      	ands	r1, r2
 800f410:	9008      	str	r0, [sp, #32]
 800f412:	9106      	str	r1, [sp, #24]
 800f414:	4213      	tst	r3, r2
 800f416:	d002      	beq.n	800f41e <__hexnan+0x26>
 800f418:	9b02      	ldr	r3, [sp, #8]
 800f41a:	3304      	adds	r3, #4
 800f41c:	9302      	str	r3, [sp, #8]
 800f41e:	9b02      	ldr	r3, [sp, #8]
 800f420:	2500      	movs	r5, #0
 800f422:	1f1f      	subs	r7, r3, #4
 800f424:	003e      	movs	r6, r7
 800f426:	003c      	movs	r4, r7
 800f428:	9b08      	ldr	r3, [sp, #32]
 800f42a:	603d      	str	r5, [r7, #0]
 800f42c:	681b      	ldr	r3, [r3, #0]
 800f42e:	9507      	str	r5, [sp, #28]
 800f430:	9305      	str	r3, [sp, #20]
 800f432:	9503      	str	r5, [sp, #12]
 800f434:	9b05      	ldr	r3, [sp, #20]
 800f436:	3301      	adds	r3, #1
 800f438:	9309      	str	r3, [sp, #36]	; 0x24
 800f43a:	9b05      	ldr	r3, [sp, #20]
 800f43c:	785b      	ldrb	r3, [r3, #1]
 800f43e:	9304      	str	r3, [sp, #16]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d028      	beq.n	800f496 <__hexnan+0x9e>
 800f444:	9804      	ldr	r0, [sp, #16]
 800f446:	f7ff fd78 	bl	800ef3a <__hexdig_fun>
 800f44a:	2800      	cmp	r0, #0
 800f44c:	d154      	bne.n	800f4f8 <__hexnan+0x100>
 800f44e:	9b04      	ldr	r3, [sp, #16]
 800f450:	2b20      	cmp	r3, #32
 800f452:	d819      	bhi.n	800f488 <__hexnan+0x90>
 800f454:	9b03      	ldr	r3, [sp, #12]
 800f456:	9a07      	ldr	r2, [sp, #28]
 800f458:	4293      	cmp	r3, r2
 800f45a:	dd12      	ble.n	800f482 <__hexnan+0x8a>
 800f45c:	42b4      	cmp	r4, r6
 800f45e:	d206      	bcs.n	800f46e <__hexnan+0x76>
 800f460:	2d07      	cmp	r5, #7
 800f462:	dc04      	bgt.n	800f46e <__hexnan+0x76>
 800f464:	002a      	movs	r2, r5
 800f466:	0031      	movs	r1, r6
 800f468:	0020      	movs	r0, r4
 800f46a:	f7ff ff9f 	bl	800f3ac <L_shift>
 800f46e:	9b01      	ldr	r3, [sp, #4]
 800f470:	2508      	movs	r5, #8
 800f472:	429c      	cmp	r4, r3
 800f474:	d905      	bls.n	800f482 <__hexnan+0x8a>
 800f476:	1f26      	subs	r6, r4, #4
 800f478:	2500      	movs	r5, #0
 800f47a:	0034      	movs	r4, r6
 800f47c:	9b03      	ldr	r3, [sp, #12]
 800f47e:	6035      	str	r5, [r6, #0]
 800f480:	9307      	str	r3, [sp, #28]
 800f482:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f484:	9305      	str	r3, [sp, #20]
 800f486:	e7d5      	b.n	800f434 <__hexnan+0x3c>
 800f488:	9b04      	ldr	r3, [sp, #16]
 800f48a:	2b29      	cmp	r3, #41	; 0x29
 800f48c:	d159      	bne.n	800f542 <__hexnan+0x14a>
 800f48e:	9b05      	ldr	r3, [sp, #20]
 800f490:	9a08      	ldr	r2, [sp, #32]
 800f492:	3302      	adds	r3, #2
 800f494:	6013      	str	r3, [r2, #0]
 800f496:	9b03      	ldr	r3, [sp, #12]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d052      	beq.n	800f542 <__hexnan+0x14a>
 800f49c:	42b4      	cmp	r4, r6
 800f49e:	d206      	bcs.n	800f4ae <__hexnan+0xb6>
 800f4a0:	2d07      	cmp	r5, #7
 800f4a2:	dc04      	bgt.n	800f4ae <__hexnan+0xb6>
 800f4a4:	002a      	movs	r2, r5
 800f4a6:	0031      	movs	r1, r6
 800f4a8:	0020      	movs	r0, r4
 800f4aa:	f7ff ff7f 	bl	800f3ac <L_shift>
 800f4ae:	9b01      	ldr	r3, [sp, #4]
 800f4b0:	429c      	cmp	r4, r3
 800f4b2:	d935      	bls.n	800f520 <__hexnan+0x128>
 800f4b4:	001a      	movs	r2, r3
 800f4b6:	0023      	movs	r3, r4
 800f4b8:	cb02      	ldmia	r3!, {r1}
 800f4ba:	c202      	stmia	r2!, {r1}
 800f4bc:	429f      	cmp	r7, r3
 800f4be:	d2fb      	bcs.n	800f4b8 <__hexnan+0xc0>
 800f4c0:	9b02      	ldr	r3, [sp, #8]
 800f4c2:	1c62      	adds	r2, r4, #1
 800f4c4:	1ed9      	subs	r1, r3, #3
 800f4c6:	2304      	movs	r3, #4
 800f4c8:	4291      	cmp	r1, r2
 800f4ca:	d305      	bcc.n	800f4d8 <__hexnan+0xe0>
 800f4cc:	9b02      	ldr	r3, [sp, #8]
 800f4ce:	3b04      	subs	r3, #4
 800f4d0:	1b1b      	subs	r3, r3, r4
 800f4d2:	089b      	lsrs	r3, r3, #2
 800f4d4:	3301      	adds	r3, #1
 800f4d6:	009b      	lsls	r3, r3, #2
 800f4d8:	9a01      	ldr	r2, [sp, #4]
 800f4da:	18d3      	adds	r3, r2, r3
 800f4dc:	2200      	movs	r2, #0
 800f4de:	c304      	stmia	r3!, {r2}
 800f4e0:	429f      	cmp	r7, r3
 800f4e2:	d2fc      	bcs.n	800f4de <__hexnan+0xe6>
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	2b00      	cmp	r3, #0
 800f4e8:	d104      	bne.n	800f4f4 <__hexnan+0xfc>
 800f4ea:	9b01      	ldr	r3, [sp, #4]
 800f4ec:	429f      	cmp	r7, r3
 800f4ee:	d126      	bne.n	800f53e <__hexnan+0x146>
 800f4f0:	2301      	movs	r3, #1
 800f4f2:	603b      	str	r3, [r7, #0]
 800f4f4:	2005      	movs	r0, #5
 800f4f6:	e025      	b.n	800f544 <__hexnan+0x14c>
 800f4f8:	9b03      	ldr	r3, [sp, #12]
 800f4fa:	3501      	adds	r5, #1
 800f4fc:	3301      	adds	r3, #1
 800f4fe:	9303      	str	r3, [sp, #12]
 800f500:	2d08      	cmp	r5, #8
 800f502:	dd06      	ble.n	800f512 <__hexnan+0x11a>
 800f504:	9b01      	ldr	r3, [sp, #4]
 800f506:	429c      	cmp	r4, r3
 800f508:	d9bb      	bls.n	800f482 <__hexnan+0x8a>
 800f50a:	2300      	movs	r3, #0
 800f50c:	2501      	movs	r5, #1
 800f50e:	3c04      	subs	r4, #4
 800f510:	6023      	str	r3, [r4, #0]
 800f512:	220f      	movs	r2, #15
 800f514:	6823      	ldr	r3, [r4, #0]
 800f516:	4010      	ands	r0, r2
 800f518:	011b      	lsls	r3, r3, #4
 800f51a:	4303      	orrs	r3, r0
 800f51c:	6023      	str	r3, [r4, #0]
 800f51e:	e7b0      	b.n	800f482 <__hexnan+0x8a>
 800f520:	9b06      	ldr	r3, [sp, #24]
 800f522:	2b00      	cmp	r3, #0
 800f524:	d0de      	beq.n	800f4e4 <__hexnan+0xec>
 800f526:	2320      	movs	r3, #32
 800f528:	9a06      	ldr	r2, [sp, #24]
 800f52a:	9902      	ldr	r1, [sp, #8]
 800f52c:	1a9b      	subs	r3, r3, r2
 800f52e:	2201      	movs	r2, #1
 800f530:	4252      	negs	r2, r2
 800f532:	40da      	lsrs	r2, r3
 800f534:	3904      	subs	r1, #4
 800f536:	680b      	ldr	r3, [r1, #0]
 800f538:	4013      	ands	r3, r2
 800f53a:	600b      	str	r3, [r1, #0]
 800f53c:	e7d2      	b.n	800f4e4 <__hexnan+0xec>
 800f53e:	3f04      	subs	r7, #4
 800f540:	e7d0      	b.n	800f4e4 <__hexnan+0xec>
 800f542:	2004      	movs	r0, #4
 800f544:	b00b      	add	sp, #44	; 0x2c
 800f546:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f548 <__ascii_mbtowc>:
 800f548:	b082      	sub	sp, #8
 800f54a:	2900      	cmp	r1, #0
 800f54c:	d100      	bne.n	800f550 <__ascii_mbtowc+0x8>
 800f54e:	a901      	add	r1, sp, #4
 800f550:	1e10      	subs	r0, r2, #0
 800f552:	d006      	beq.n	800f562 <__ascii_mbtowc+0x1a>
 800f554:	2b00      	cmp	r3, #0
 800f556:	d006      	beq.n	800f566 <__ascii_mbtowc+0x1e>
 800f558:	7813      	ldrb	r3, [r2, #0]
 800f55a:	600b      	str	r3, [r1, #0]
 800f55c:	7810      	ldrb	r0, [r2, #0]
 800f55e:	1e43      	subs	r3, r0, #1
 800f560:	4198      	sbcs	r0, r3
 800f562:	b002      	add	sp, #8
 800f564:	4770      	bx	lr
 800f566:	2002      	movs	r0, #2
 800f568:	4240      	negs	r0, r0
 800f56a:	e7fa      	b.n	800f562 <__ascii_mbtowc+0x1a>

0800f56c <_Balloc>:
 800f56c:	b570      	push	{r4, r5, r6, lr}
 800f56e:	69c5      	ldr	r5, [r0, #28]
 800f570:	0006      	movs	r6, r0
 800f572:	000c      	movs	r4, r1
 800f574:	2d00      	cmp	r5, #0
 800f576:	d10e      	bne.n	800f596 <_Balloc+0x2a>
 800f578:	2010      	movs	r0, #16
 800f57a:	f7fc fe97 	bl	800c2ac <malloc>
 800f57e:	1e02      	subs	r2, r0, #0
 800f580:	61f0      	str	r0, [r6, #28]
 800f582:	d104      	bne.n	800f58e <_Balloc+0x22>
 800f584:	216b      	movs	r1, #107	; 0x6b
 800f586:	4b19      	ldr	r3, [pc, #100]	; (800f5ec <_Balloc+0x80>)
 800f588:	4819      	ldr	r0, [pc, #100]	; (800f5f0 <_Balloc+0x84>)
 800f58a:	f7fe fd7b 	bl	800e084 <__assert_func>
 800f58e:	6045      	str	r5, [r0, #4]
 800f590:	6085      	str	r5, [r0, #8]
 800f592:	6005      	str	r5, [r0, #0]
 800f594:	60c5      	str	r5, [r0, #12]
 800f596:	69f5      	ldr	r5, [r6, #28]
 800f598:	68eb      	ldr	r3, [r5, #12]
 800f59a:	2b00      	cmp	r3, #0
 800f59c:	d013      	beq.n	800f5c6 <_Balloc+0x5a>
 800f59e:	69f3      	ldr	r3, [r6, #28]
 800f5a0:	00a2      	lsls	r2, r4, #2
 800f5a2:	68db      	ldr	r3, [r3, #12]
 800f5a4:	189b      	adds	r3, r3, r2
 800f5a6:	6818      	ldr	r0, [r3, #0]
 800f5a8:	2800      	cmp	r0, #0
 800f5aa:	d118      	bne.n	800f5de <_Balloc+0x72>
 800f5ac:	2101      	movs	r1, #1
 800f5ae:	000d      	movs	r5, r1
 800f5b0:	40a5      	lsls	r5, r4
 800f5b2:	1d6a      	adds	r2, r5, #5
 800f5b4:	0030      	movs	r0, r6
 800f5b6:	0092      	lsls	r2, r2, #2
 800f5b8:	f001 f8d4 	bl	8010764 <_calloc_r>
 800f5bc:	2800      	cmp	r0, #0
 800f5be:	d00c      	beq.n	800f5da <_Balloc+0x6e>
 800f5c0:	6044      	str	r4, [r0, #4]
 800f5c2:	6085      	str	r5, [r0, #8]
 800f5c4:	e00d      	b.n	800f5e2 <_Balloc+0x76>
 800f5c6:	2221      	movs	r2, #33	; 0x21
 800f5c8:	2104      	movs	r1, #4
 800f5ca:	0030      	movs	r0, r6
 800f5cc:	f001 f8ca 	bl	8010764 <_calloc_r>
 800f5d0:	69f3      	ldr	r3, [r6, #28]
 800f5d2:	60e8      	str	r0, [r5, #12]
 800f5d4:	68db      	ldr	r3, [r3, #12]
 800f5d6:	2b00      	cmp	r3, #0
 800f5d8:	d1e1      	bne.n	800f59e <_Balloc+0x32>
 800f5da:	2000      	movs	r0, #0
 800f5dc:	bd70      	pop	{r4, r5, r6, pc}
 800f5de:	6802      	ldr	r2, [r0, #0]
 800f5e0:	601a      	str	r2, [r3, #0]
 800f5e2:	2300      	movs	r3, #0
 800f5e4:	6103      	str	r3, [r0, #16]
 800f5e6:	60c3      	str	r3, [r0, #12]
 800f5e8:	e7f8      	b.n	800f5dc <_Balloc+0x70>
 800f5ea:	46c0      	nop			; (mov r8, r8)
 800f5ec:	0801158d 	.word	0x0801158d
 800f5f0:	08011718 	.word	0x08011718

0800f5f4 <_Bfree>:
 800f5f4:	b570      	push	{r4, r5, r6, lr}
 800f5f6:	69c6      	ldr	r6, [r0, #28]
 800f5f8:	0005      	movs	r5, r0
 800f5fa:	000c      	movs	r4, r1
 800f5fc:	2e00      	cmp	r6, #0
 800f5fe:	d10e      	bne.n	800f61e <_Bfree+0x2a>
 800f600:	2010      	movs	r0, #16
 800f602:	f7fc fe53 	bl	800c2ac <malloc>
 800f606:	1e02      	subs	r2, r0, #0
 800f608:	61e8      	str	r0, [r5, #28]
 800f60a:	d104      	bne.n	800f616 <_Bfree+0x22>
 800f60c:	218f      	movs	r1, #143	; 0x8f
 800f60e:	4b09      	ldr	r3, [pc, #36]	; (800f634 <_Bfree+0x40>)
 800f610:	4809      	ldr	r0, [pc, #36]	; (800f638 <_Bfree+0x44>)
 800f612:	f7fe fd37 	bl	800e084 <__assert_func>
 800f616:	6046      	str	r6, [r0, #4]
 800f618:	6086      	str	r6, [r0, #8]
 800f61a:	6006      	str	r6, [r0, #0]
 800f61c:	60c6      	str	r6, [r0, #12]
 800f61e:	2c00      	cmp	r4, #0
 800f620:	d007      	beq.n	800f632 <_Bfree+0x3e>
 800f622:	69eb      	ldr	r3, [r5, #28]
 800f624:	6862      	ldr	r2, [r4, #4]
 800f626:	68db      	ldr	r3, [r3, #12]
 800f628:	0092      	lsls	r2, r2, #2
 800f62a:	189b      	adds	r3, r3, r2
 800f62c:	681a      	ldr	r2, [r3, #0]
 800f62e:	6022      	str	r2, [r4, #0]
 800f630:	601c      	str	r4, [r3, #0]
 800f632:	bd70      	pop	{r4, r5, r6, pc}
 800f634:	0801158d 	.word	0x0801158d
 800f638:	08011718 	.word	0x08011718

0800f63c <__multadd>:
 800f63c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f63e:	000e      	movs	r6, r1
 800f640:	9001      	str	r0, [sp, #4]
 800f642:	000c      	movs	r4, r1
 800f644:	001d      	movs	r5, r3
 800f646:	2000      	movs	r0, #0
 800f648:	690f      	ldr	r7, [r1, #16]
 800f64a:	3614      	adds	r6, #20
 800f64c:	6833      	ldr	r3, [r6, #0]
 800f64e:	3001      	adds	r0, #1
 800f650:	b299      	uxth	r1, r3
 800f652:	4351      	muls	r1, r2
 800f654:	0c1b      	lsrs	r3, r3, #16
 800f656:	4353      	muls	r3, r2
 800f658:	1949      	adds	r1, r1, r5
 800f65a:	0c0d      	lsrs	r5, r1, #16
 800f65c:	195b      	adds	r3, r3, r5
 800f65e:	0c1d      	lsrs	r5, r3, #16
 800f660:	b289      	uxth	r1, r1
 800f662:	041b      	lsls	r3, r3, #16
 800f664:	185b      	adds	r3, r3, r1
 800f666:	c608      	stmia	r6!, {r3}
 800f668:	4287      	cmp	r7, r0
 800f66a:	dcef      	bgt.n	800f64c <__multadd+0x10>
 800f66c:	2d00      	cmp	r5, #0
 800f66e:	d022      	beq.n	800f6b6 <__multadd+0x7a>
 800f670:	68a3      	ldr	r3, [r4, #8]
 800f672:	42bb      	cmp	r3, r7
 800f674:	dc19      	bgt.n	800f6aa <__multadd+0x6e>
 800f676:	6861      	ldr	r1, [r4, #4]
 800f678:	9801      	ldr	r0, [sp, #4]
 800f67a:	3101      	adds	r1, #1
 800f67c:	f7ff ff76 	bl	800f56c <_Balloc>
 800f680:	1e06      	subs	r6, r0, #0
 800f682:	d105      	bne.n	800f690 <__multadd+0x54>
 800f684:	0032      	movs	r2, r6
 800f686:	21ba      	movs	r1, #186	; 0xba
 800f688:	4b0c      	ldr	r3, [pc, #48]	; (800f6bc <__multadd+0x80>)
 800f68a:	480d      	ldr	r0, [pc, #52]	; (800f6c0 <__multadd+0x84>)
 800f68c:	f7fe fcfa 	bl	800e084 <__assert_func>
 800f690:	0021      	movs	r1, r4
 800f692:	6922      	ldr	r2, [r4, #16]
 800f694:	310c      	adds	r1, #12
 800f696:	3202      	adds	r2, #2
 800f698:	0092      	lsls	r2, r2, #2
 800f69a:	300c      	adds	r0, #12
 800f69c:	f7fe fce2 	bl	800e064 <memcpy>
 800f6a0:	0021      	movs	r1, r4
 800f6a2:	9801      	ldr	r0, [sp, #4]
 800f6a4:	f7ff ffa6 	bl	800f5f4 <_Bfree>
 800f6a8:	0034      	movs	r4, r6
 800f6aa:	1d3b      	adds	r3, r7, #4
 800f6ac:	009b      	lsls	r3, r3, #2
 800f6ae:	18e3      	adds	r3, r4, r3
 800f6b0:	605d      	str	r5, [r3, #4]
 800f6b2:	1c7b      	adds	r3, r7, #1
 800f6b4:	6123      	str	r3, [r4, #16]
 800f6b6:	0020      	movs	r0, r4
 800f6b8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f6ba:	46c0      	nop			; (mov r8, r8)
 800f6bc:	080116a7 	.word	0x080116a7
 800f6c0:	08011718 	.word	0x08011718

0800f6c4 <__s2b>:
 800f6c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f6c6:	0006      	movs	r6, r0
 800f6c8:	0018      	movs	r0, r3
 800f6ca:	000c      	movs	r4, r1
 800f6cc:	3008      	adds	r0, #8
 800f6ce:	2109      	movs	r1, #9
 800f6d0:	9301      	str	r3, [sp, #4]
 800f6d2:	0015      	movs	r5, r2
 800f6d4:	f7f0 fdc8 	bl	8000268 <__divsi3>
 800f6d8:	2301      	movs	r3, #1
 800f6da:	2100      	movs	r1, #0
 800f6dc:	4283      	cmp	r3, r0
 800f6de:	db0a      	blt.n	800f6f6 <__s2b+0x32>
 800f6e0:	0030      	movs	r0, r6
 800f6e2:	f7ff ff43 	bl	800f56c <_Balloc>
 800f6e6:	1e01      	subs	r1, r0, #0
 800f6e8:	d108      	bne.n	800f6fc <__s2b+0x38>
 800f6ea:	000a      	movs	r2, r1
 800f6ec:	4b19      	ldr	r3, [pc, #100]	; (800f754 <__s2b+0x90>)
 800f6ee:	481a      	ldr	r0, [pc, #104]	; (800f758 <__s2b+0x94>)
 800f6f0:	31d3      	adds	r1, #211	; 0xd3
 800f6f2:	f7fe fcc7 	bl	800e084 <__assert_func>
 800f6f6:	005b      	lsls	r3, r3, #1
 800f6f8:	3101      	adds	r1, #1
 800f6fa:	e7ef      	b.n	800f6dc <__s2b+0x18>
 800f6fc:	9b08      	ldr	r3, [sp, #32]
 800f6fe:	6143      	str	r3, [r0, #20]
 800f700:	2301      	movs	r3, #1
 800f702:	6103      	str	r3, [r0, #16]
 800f704:	2d09      	cmp	r5, #9
 800f706:	dd18      	ble.n	800f73a <__s2b+0x76>
 800f708:	0023      	movs	r3, r4
 800f70a:	3309      	adds	r3, #9
 800f70c:	001f      	movs	r7, r3
 800f70e:	9300      	str	r3, [sp, #0]
 800f710:	1964      	adds	r4, r4, r5
 800f712:	783b      	ldrb	r3, [r7, #0]
 800f714:	220a      	movs	r2, #10
 800f716:	0030      	movs	r0, r6
 800f718:	3b30      	subs	r3, #48	; 0x30
 800f71a:	f7ff ff8f 	bl	800f63c <__multadd>
 800f71e:	3701      	adds	r7, #1
 800f720:	0001      	movs	r1, r0
 800f722:	42a7      	cmp	r7, r4
 800f724:	d1f5      	bne.n	800f712 <__s2b+0x4e>
 800f726:	002c      	movs	r4, r5
 800f728:	9b00      	ldr	r3, [sp, #0]
 800f72a:	3c08      	subs	r4, #8
 800f72c:	191c      	adds	r4, r3, r4
 800f72e:	002f      	movs	r7, r5
 800f730:	9b01      	ldr	r3, [sp, #4]
 800f732:	429f      	cmp	r7, r3
 800f734:	db04      	blt.n	800f740 <__s2b+0x7c>
 800f736:	0008      	movs	r0, r1
 800f738:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800f73a:	2509      	movs	r5, #9
 800f73c:	340a      	adds	r4, #10
 800f73e:	e7f6      	b.n	800f72e <__s2b+0x6a>
 800f740:	1b63      	subs	r3, r4, r5
 800f742:	5ddb      	ldrb	r3, [r3, r7]
 800f744:	220a      	movs	r2, #10
 800f746:	0030      	movs	r0, r6
 800f748:	3b30      	subs	r3, #48	; 0x30
 800f74a:	f7ff ff77 	bl	800f63c <__multadd>
 800f74e:	3701      	adds	r7, #1
 800f750:	0001      	movs	r1, r0
 800f752:	e7ed      	b.n	800f730 <__s2b+0x6c>
 800f754:	080116a7 	.word	0x080116a7
 800f758:	08011718 	.word	0x08011718

0800f75c <__hi0bits>:
 800f75c:	0003      	movs	r3, r0
 800f75e:	0c02      	lsrs	r2, r0, #16
 800f760:	2000      	movs	r0, #0
 800f762:	4282      	cmp	r2, r0
 800f764:	d101      	bne.n	800f76a <__hi0bits+0xe>
 800f766:	041b      	lsls	r3, r3, #16
 800f768:	3010      	adds	r0, #16
 800f76a:	0e1a      	lsrs	r2, r3, #24
 800f76c:	d101      	bne.n	800f772 <__hi0bits+0x16>
 800f76e:	3008      	adds	r0, #8
 800f770:	021b      	lsls	r3, r3, #8
 800f772:	0f1a      	lsrs	r2, r3, #28
 800f774:	d101      	bne.n	800f77a <__hi0bits+0x1e>
 800f776:	3004      	adds	r0, #4
 800f778:	011b      	lsls	r3, r3, #4
 800f77a:	0f9a      	lsrs	r2, r3, #30
 800f77c:	d101      	bne.n	800f782 <__hi0bits+0x26>
 800f77e:	3002      	adds	r0, #2
 800f780:	009b      	lsls	r3, r3, #2
 800f782:	2b00      	cmp	r3, #0
 800f784:	db03      	blt.n	800f78e <__hi0bits+0x32>
 800f786:	3001      	adds	r0, #1
 800f788:	005b      	lsls	r3, r3, #1
 800f78a:	d400      	bmi.n	800f78e <__hi0bits+0x32>
 800f78c:	2020      	movs	r0, #32
 800f78e:	4770      	bx	lr

0800f790 <__lo0bits>:
 800f790:	6803      	ldr	r3, [r0, #0]
 800f792:	0001      	movs	r1, r0
 800f794:	2207      	movs	r2, #7
 800f796:	0018      	movs	r0, r3
 800f798:	4010      	ands	r0, r2
 800f79a:	4213      	tst	r3, r2
 800f79c:	d00d      	beq.n	800f7ba <__lo0bits+0x2a>
 800f79e:	3a06      	subs	r2, #6
 800f7a0:	2000      	movs	r0, #0
 800f7a2:	4213      	tst	r3, r2
 800f7a4:	d105      	bne.n	800f7b2 <__lo0bits+0x22>
 800f7a6:	3002      	adds	r0, #2
 800f7a8:	4203      	tst	r3, r0
 800f7aa:	d003      	beq.n	800f7b4 <__lo0bits+0x24>
 800f7ac:	40d3      	lsrs	r3, r2
 800f7ae:	0010      	movs	r0, r2
 800f7b0:	600b      	str	r3, [r1, #0]
 800f7b2:	4770      	bx	lr
 800f7b4:	089b      	lsrs	r3, r3, #2
 800f7b6:	600b      	str	r3, [r1, #0]
 800f7b8:	e7fb      	b.n	800f7b2 <__lo0bits+0x22>
 800f7ba:	b29a      	uxth	r2, r3
 800f7bc:	2a00      	cmp	r2, #0
 800f7be:	d101      	bne.n	800f7c4 <__lo0bits+0x34>
 800f7c0:	2010      	movs	r0, #16
 800f7c2:	0c1b      	lsrs	r3, r3, #16
 800f7c4:	b2da      	uxtb	r2, r3
 800f7c6:	2a00      	cmp	r2, #0
 800f7c8:	d101      	bne.n	800f7ce <__lo0bits+0x3e>
 800f7ca:	3008      	adds	r0, #8
 800f7cc:	0a1b      	lsrs	r3, r3, #8
 800f7ce:	071a      	lsls	r2, r3, #28
 800f7d0:	d101      	bne.n	800f7d6 <__lo0bits+0x46>
 800f7d2:	3004      	adds	r0, #4
 800f7d4:	091b      	lsrs	r3, r3, #4
 800f7d6:	079a      	lsls	r2, r3, #30
 800f7d8:	d101      	bne.n	800f7de <__lo0bits+0x4e>
 800f7da:	3002      	adds	r0, #2
 800f7dc:	089b      	lsrs	r3, r3, #2
 800f7de:	07da      	lsls	r2, r3, #31
 800f7e0:	d4e9      	bmi.n	800f7b6 <__lo0bits+0x26>
 800f7e2:	3001      	adds	r0, #1
 800f7e4:	085b      	lsrs	r3, r3, #1
 800f7e6:	d1e6      	bne.n	800f7b6 <__lo0bits+0x26>
 800f7e8:	2020      	movs	r0, #32
 800f7ea:	e7e2      	b.n	800f7b2 <__lo0bits+0x22>

0800f7ec <__i2b>:
 800f7ec:	b510      	push	{r4, lr}
 800f7ee:	000c      	movs	r4, r1
 800f7f0:	2101      	movs	r1, #1
 800f7f2:	f7ff febb 	bl	800f56c <_Balloc>
 800f7f6:	2800      	cmp	r0, #0
 800f7f8:	d107      	bne.n	800f80a <__i2b+0x1e>
 800f7fa:	2146      	movs	r1, #70	; 0x46
 800f7fc:	4c05      	ldr	r4, [pc, #20]	; (800f814 <__i2b+0x28>)
 800f7fe:	0002      	movs	r2, r0
 800f800:	4b05      	ldr	r3, [pc, #20]	; (800f818 <__i2b+0x2c>)
 800f802:	0020      	movs	r0, r4
 800f804:	31ff      	adds	r1, #255	; 0xff
 800f806:	f7fe fc3d 	bl	800e084 <__assert_func>
 800f80a:	2301      	movs	r3, #1
 800f80c:	6144      	str	r4, [r0, #20]
 800f80e:	6103      	str	r3, [r0, #16]
 800f810:	bd10      	pop	{r4, pc}
 800f812:	46c0      	nop			; (mov r8, r8)
 800f814:	08011718 	.word	0x08011718
 800f818:	080116a7 	.word	0x080116a7

0800f81c <__multiply>:
 800f81c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f81e:	0015      	movs	r5, r2
 800f820:	690a      	ldr	r2, [r1, #16]
 800f822:	692b      	ldr	r3, [r5, #16]
 800f824:	000c      	movs	r4, r1
 800f826:	b08b      	sub	sp, #44	; 0x2c
 800f828:	429a      	cmp	r2, r3
 800f82a:	da01      	bge.n	800f830 <__multiply+0x14>
 800f82c:	002c      	movs	r4, r5
 800f82e:	000d      	movs	r5, r1
 800f830:	6927      	ldr	r7, [r4, #16]
 800f832:	692e      	ldr	r6, [r5, #16]
 800f834:	6861      	ldr	r1, [r4, #4]
 800f836:	19bb      	adds	r3, r7, r6
 800f838:	9303      	str	r3, [sp, #12]
 800f83a:	68a3      	ldr	r3, [r4, #8]
 800f83c:	19ba      	adds	r2, r7, r6
 800f83e:	4293      	cmp	r3, r2
 800f840:	da00      	bge.n	800f844 <__multiply+0x28>
 800f842:	3101      	adds	r1, #1
 800f844:	f7ff fe92 	bl	800f56c <_Balloc>
 800f848:	9002      	str	r0, [sp, #8]
 800f84a:	2800      	cmp	r0, #0
 800f84c:	d106      	bne.n	800f85c <__multiply+0x40>
 800f84e:	21b1      	movs	r1, #177	; 0xb1
 800f850:	4b48      	ldr	r3, [pc, #288]	; (800f974 <__multiply+0x158>)
 800f852:	4849      	ldr	r0, [pc, #292]	; (800f978 <__multiply+0x15c>)
 800f854:	9a02      	ldr	r2, [sp, #8]
 800f856:	0049      	lsls	r1, r1, #1
 800f858:	f7fe fc14 	bl	800e084 <__assert_func>
 800f85c:	9b02      	ldr	r3, [sp, #8]
 800f85e:	2200      	movs	r2, #0
 800f860:	3314      	adds	r3, #20
 800f862:	469c      	mov	ip, r3
 800f864:	19bb      	adds	r3, r7, r6
 800f866:	009b      	lsls	r3, r3, #2
 800f868:	4463      	add	r3, ip
 800f86a:	9304      	str	r3, [sp, #16]
 800f86c:	4663      	mov	r3, ip
 800f86e:	9904      	ldr	r1, [sp, #16]
 800f870:	428b      	cmp	r3, r1
 800f872:	d32a      	bcc.n	800f8ca <__multiply+0xae>
 800f874:	0023      	movs	r3, r4
 800f876:	00bf      	lsls	r7, r7, #2
 800f878:	3314      	adds	r3, #20
 800f87a:	3514      	adds	r5, #20
 800f87c:	9308      	str	r3, [sp, #32]
 800f87e:	00b6      	lsls	r6, r6, #2
 800f880:	19db      	adds	r3, r3, r7
 800f882:	9305      	str	r3, [sp, #20]
 800f884:	19ab      	adds	r3, r5, r6
 800f886:	9309      	str	r3, [sp, #36]	; 0x24
 800f888:	2304      	movs	r3, #4
 800f88a:	9306      	str	r3, [sp, #24]
 800f88c:	0023      	movs	r3, r4
 800f88e:	9a05      	ldr	r2, [sp, #20]
 800f890:	3315      	adds	r3, #21
 800f892:	9501      	str	r5, [sp, #4]
 800f894:	429a      	cmp	r2, r3
 800f896:	d305      	bcc.n	800f8a4 <__multiply+0x88>
 800f898:	1b13      	subs	r3, r2, r4
 800f89a:	3b15      	subs	r3, #21
 800f89c:	089b      	lsrs	r3, r3, #2
 800f89e:	3301      	adds	r3, #1
 800f8a0:	009b      	lsls	r3, r3, #2
 800f8a2:	9306      	str	r3, [sp, #24]
 800f8a4:	9b01      	ldr	r3, [sp, #4]
 800f8a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800f8a8:	4293      	cmp	r3, r2
 800f8aa:	d310      	bcc.n	800f8ce <__multiply+0xb2>
 800f8ac:	9b03      	ldr	r3, [sp, #12]
 800f8ae:	2b00      	cmp	r3, #0
 800f8b0:	dd05      	ble.n	800f8be <__multiply+0xa2>
 800f8b2:	9b04      	ldr	r3, [sp, #16]
 800f8b4:	3b04      	subs	r3, #4
 800f8b6:	9304      	str	r3, [sp, #16]
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	2b00      	cmp	r3, #0
 800f8bc:	d056      	beq.n	800f96c <__multiply+0x150>
 800f8be:	9b02      	ldr	r3, [sp, #8]
 800f8c0:	9a03      	ldr	r2, [sp, #12]
 800f8c2:	0018      	movs	r0, r3
 800f8c4:	611a      	str	r2, [r3, #16]
 800f8c6:	b00b      	add	sp, #44	; 0x2c
 800f8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8ca:	c304      	stmia	r3!, {r2}
 800f8cc:	e7cf      	b.n	800f86e <__multiply+0x52>
 800f8ce:	9b01      	ldr	r3, [sp, #4]
 800f8d0:	6818      	ldr	r0, [r3, #0]
 800f8d2:	b280      	uxth	r0, r0
 800f8d4:	2800      	cmp	r0, #0
 800f8d6:	d01e      	beq.n	800f916 <__multiply+0xfa>
 800f8d8:	4667      	mov	r7, ip
 800f8da:	2500      	movs	r5, #0
 800f8dc:	9e08      	ldr	r6, [sp, #32]
 800f8de:	ce02      	ldmia	r6!, {r1}
 800f8e0:	683b      	ldr	r3, [r7, #0]
 800f8e2:	9307      	str	r3, [sp, #28]
 800f8e4:	b28b      	uxth	r3, r1
 800f8e6:	4343      	muls	r3, r0
 800f8e8:	001a      	movs	r2, r3
 800f8ea:	466b      	mov	r3, sp
 800f8ec:	8b9b      	ldrh	r3, [r3, #28]
 800f8ee:	18d3      	adds	r3, r2, r3
 800f8f0:	195b      	adds	r3, r3, r5
 800f8f2:	0c0d      	lsrs	r5, r1, #16
 800f8f4:	4345      	muls	r5, r0
 800f8f6:	9a07      	ldr	r2, [sp, #28]
 800f8f8:	0c11      	lsrs	r1, r2, #16
 800f8fa:	1869      	adds	r1, r5, r1
 800f8fc:	0c1a      	lsrs	r2, r3, #16
 800f8fe:	188a      	adds	r2, r1, r2
 800f900:	b29b      	uxth	r3, r3
 800f902:	0c15      	lsrs	r5, r2, #16
 800f904:	0412      	lsls	r2, r2, #16
 800f906:	431a      	orrs	r2, r3
 800f908:	9b05      	ldr	r3, [sp, #20]
 800f90a:	c704      	stmia	r7!, {r2}
 800f90c:	42b3      	cmp	r3, r6
 800f90e:	d8e6      	bhi.n	800f8de <__multiply+0xc2>
 800f910:	4663      	mov	r3, ip
 800f912:	9a06      	ldr	r2, [sp, #24]
 800f914:	509d      	str	r5, [r3, r2]
 800f916:	9b01      	ldr	r3, [sp, #4]
 800f918:	6818      	ldr	r0, [r3, #0]
 800f91a:	0c00      	lsrs	r0, r0, #16
 800f91c:	d020      	beq.n	800f960 <__multiply+0x144>
 800f91e:	4663      	mov	r3, ip
 800f920:	0025      	movs	r5, r4
 800f922:	4661      	mov	r1, ip
 800f924:	2700      	movs	r7, #0
 800f926:	681b      	ldr	r3, [r3, #0]
 800f928:	3514      	adds	r5, #20
 800f92a:	682a      	ldr	r2, [r5, #0]
 800f92c:	680e      	ldr	r6, [r1, #0]
 800f92e:	b292      	uxth	r2, r2
 800f930:	4342      	muls	r2, r0
 800f932:	0c36      	lsrs	r6, r6, #16
 800f934:	1992      	adds	r2, r2, r6
 800f936:	19d2      	adds	r2, r2, r7
 800f938:	0416      	lsls	r6, r2, #16
 800f93a:	b29b      	uxth	r3, r3
 800f93c:	431e      	orrs	r6, r3
 800f93e:	600e      	str	r6, [r1, #0]
 800f940:	cd40      	ldmia	r5!, {r6}
 800f942:	684b      	ldr	r3, [r1, #4]
 800f944:	0c36      	lsrs	r6, r6, #16
 800f946:	4346      	muls	r6, r0
 800f948:	b29b      	uxth	r3, r3
 800f94a:	0c12      	lsrs	r2, r2, #16
 800f94c:	18f3      	adds	r3, r6, r3
 800f94e:	189b      	adds	r3, r3, r2
 800f950:	9a05      	ldr	r2, [sp, #20]
 800f952:	0c1f      	lsrs	r7, r3, #16
 800f954:	3104      	adds	r1, #4
 800f956:	42aa      	cmp	r2, r5
 800f958:	d8e7      	bhi.n	800f92a <__multiply+0x10e>
 800f95a:	4662      	mov	r2, ip
 800f95c:	9906      	ldr	r1, [sp, #24]
 800f95e:	5053      	str	r3, [r2, r1]
 800f960:	9b01      	ldr	r3, [sp, #4]
 800f962:	3304      	adds	r3, #4
 800f964:	9301      	str	r3, [sp, #4]
 800f966:	2304      	movs	r3, #4
 800f968:	449c      	add	ip, r3
 800f96a:	e79b      	b.n	800f8a4 <__multiply+0x88>
 800f96c:	9b03      	ldr	r3, [sp, #12]
 800f96e:	3b01      	subs	r3, #1
 800f970:	9303      	str	r3, [sp, #12]
 800f972:	e79b      	b.n	800f8ac <__multiply+0x90>
 800f974:	080116a7 	.word	0x080116a7
 800f978:	08011718 	.word	0x08011718

0800f97c <__pow5mult>:
 800f97c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f97e:	2303      	movs	r3, #3
 800f980:	0015      	movs	r5, r2
 800f982:	0007      	movs	r7, r0
 800f984:	000e      	movs	r6, r1
 800f986:	401a      	ands	r2, r3
 800f988:	421d      	tst	r5, r3
 800f98a:	d008      	beq.n	800f99e <__pow5mult+0x22>
 800f98c:	4925      	ldr	r1, [pc, #148]	; (800fa24 <__pow5mult+0xa8>)
 800f98e:	3a01      	subs	r2, #1
 800f990:	0092      	lsls	r2, r2, #2
 800f992:	5852      	ldr	r2, [r2, r1]
 800f994:	2300      	movs	r3, #0
 800f996:	0031      	movs	r1, r6
 800f998:	f7ff fe50 	bl	800f63c <__multadd>
 800f99c:	0006      	movs	r6, r0
 800f99e:	10ad      	asrs	r5, r5, #2
 800f9a0:	d03d      	beq.n	800fa1e <__pow5mult+0xa2>
 800f9a2:	69fc      	ldr	r4, [r7, #28]
 800f9a4:	2c00      	cmp	r4, #0
 800f9a6:	d10f      	bne.n	800f9c8 <__pow5mult+0x4c>
 800f9a8:	2010      	movs	r0, #16
 800f9aa:	f7fc fc7f 	bl	800c2ac <malloc>
 800f9ae:	1e02      	subs	r2, r0, #0
 800f9b0:	61f8      	str	r0, [r7, #28]
 800f9b2:	d105      	bne.n	800f9c0 <__pow5mult+0x44>
 800f9b4:	21b4      	movs	r1, #180	; 0xb4
 800f9b6:	4b1c      	ldr	r3, [pc, #112]	; (800fa28 <__pow5mult+0xac>)
 800f9b8:	481c      	ldr	r0, [pc, #112]	; (800fa2c <__pow5mult+0xb0>)
 800f9ba:	31ff      	adds	r1, #255	; 0xff
 800f9bc:	f7fe fb62 	bl	800e084 <__assert_func>
 800f9c0:	6044      	str	r4, [r0, #4]
 800f9c2:	6084      	str	r4, [r0, #8]
 800f9c4:	6004      	str	r4, [r0, #0]
 800f9c6:	60c4      	str	r4, [r0, #12]
 800f9c8:	69fb      	ldr	r3, [r7, #28]
 800f9ca:	689c      	ldr	r4, [r3, #8]
 800f9cc:	9301      	str	r3, [sp, #4]
 800f9ce:	2c00      	cmp	r4, #0
 800f9d0:	d108      	bne.n	800f9e4 <__pow5mult+0x68>
 800f9d2:	0038      	movs	r0, r7
 800f9d4:	4916      	ldr	r1, [pc, #88]	; (800fa30 <__pow5mult+0xb4>)
 800f9d6:	f7ff ff09 	bl	800f7ec <__i2b>
 800f9da:	9b01      	ldr	r3, [sp, #4]
 800f9dc:	0004      	movs	r4, r0
 800f9de:	6098      	str	r0, [r3, #8]
 800f9e0:	2300      	movs	r3, #0
 800f9e2:	6003      	str	r3, [r0, #0]
 800f9e4:	2301      	movs	r3, #1
 800f9e6:	421d      	tst	r5, r3
 800f9e8:	d00a      	beq.n	800fa00 <__pow5mult+0x84>
 800f9ea:	0031      	movs	r1, r6
 800f9ec:	0022      	movs	r2, r4
 800f9ee:	0038      	movs	r0, r7
 800f9f0:	f7ff ff14 	bl	800f81c <__multiply>
 800f9f4:	0031      	movs	r1, r6
 800f9f6:	9001      	str	r0, [sp, #4]
 800f9f8:	0038      	movs	r0, r7
 800f9fa:	f7ff fdfb 	bl	800f5f4 <_Bfree>
 800f9fe:	9e01      	ldr	r6, [sp, #4]
 800fa00:	106d      	asrs	r5, r5, #1
 800fa02:	d00c      	beq.n	800fa1e <__pow5mult+0xa2>
 800fa04:	6820      	ldr	r0, [r4, #0]
 800fa06:	2800      	cmp	r0, #0
 800fa08:	d107      	bne.n	800fa1a <__pow5mult+0x9e>
 800fa0a:	0022      	movs	r2, r4
 800fa0c:	0021      	movs	r1, r4
 800fa0e:	0038      	movs	r0, r7
 800fa10:	f7ff ff04 	bl	800f81c <__multiply>
 800fa14:	2300      	movs	r3, #0
 800fa16:	6020      	str	r0, [r4, #0]
 800fa18:	6003      	str	r3, [r0, #0]
 800fa1a:	0004      	movs	r4, r0
 800fa1c:	e7e2      	b.n	800f9e4 <__pow5mult+0x68>
 800fa1e:	0030      	movs	r0, r6
 800fa20:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fa22:	46c0      	nop			; (mov r8, r8)
 800fa24:	08011868 	.word	0x08011868
 800fa28:	0801158d 	.word	0x0801158d
 800fa2c:	08011718 	.word	0x08011718
 800fa30:	00000271 	.word	0x00000271

0800fa34 <__lshift>:
 800fa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa36:	000c      	movs	r4, r1
 800fa38:	0017      	movs	r7, r2
 800fa3a:	6923      	ldr	r3, [r4, #16]
 800fa3c:	1155      	asrs	r5, r2, #5
 800fa3e:	b087      	sub	sp, #28
 800fa40:	18eb      	adds	r3, r5, r3
 800fa42:	9302      	str	r3, [sp, #8]
 800fa44:	3301      	adds	r3, #1
 800fa46:	9301      	str	r3, [sp, #4]
 800fa48:	6849      	ldr	r1, [r1, #4]
 800fa4a:	68a3      	ldr	r3, [r4, #8]
 800fa4c:	9004      	str	r0, [sp, #16]
 800fa4e:	9a01      	ldr	r2, [sp, #4]
 800fa50:	4293      	cmp	r3, r2
 800fa52:	db10      	blt.n	800fa76 <__lshift+0x42>
 800fa54:	9804      	ldr	r0, [sp, #16]
 800fa56:	f7ff fd89 	bl	800f56c <_Balloc>
 800fa5a:	2300      	movs	r3, #0
 800fa5c:	0002      	movs	r2, r0
 800fa5e:	0006      	movs	r6, r0
 800fa60:	0019      	movs	r1, r3
 800fa62:	3214      	adds	r2, #20
 800fa64:	4298      	cmp	r0, r3
 800fa66:	d10c      	bne.n	800fa82 <__lshift+0x4e>
 800fa68:	31df      	adds	r1, #223	; 0xdf
 800fa6a:	0032      	movs	r2, r6
 800fa6c:	4b26      	ldr	r3, [pc, #152]	; (800fb08 <__lshift+0xd4>)
 800fa6e:	4827      	ldr	r0, [pc, #156]	; (800fb0c <__lshift+0xd8>)
 800fa70:	31ff      	adds	r1, #255	; 0xff
 800fa72:	f7fe fb07 	bl	800e084 <__assert_func>
 800fa76:	3101      	adds	r1, #1
 800fa78:	005b      	lsls	r3, r3, #1
 800fa7a:	e7e8      	b.n	800fa4e <__lshift+0x1a>
 800fa7c:	0098      	lsls	r0, r3, #2
 800fa7e:	5011      	str	r1, [r2, r0]
 800fa80:	3301      	adds	r3, #1
 800fa82:	42ab      	cmp	r3, r5
 800fa84:	dbfa      	blt.n	800fa7c <__lshift+0x48>
 800fa86:	43eb      	mvns	r3, r5
 800fa88:	17db      	asrs	r3, r3, #31
 800fa8a:	401d      	ands	r5, r3
 800fa8c:	211f      	movs	r1, #31
 800fa8e:	0023      	movs	r3, r4
 800fa90:	0038      	movs	r0, r7
 800fa92:	00ad      	lsls	r5, r5, #2
 800fa94:	1955      	adds	r5, r2, r5
 800fa96:	6922      	ldr	r2, [r4, #16]
 800fa98:	3314      	adds	r3, #20
 800fa9a:	0092      	lsls	r2, r2, #2
 800fa9c:	4008      	ands	r0, r1
 800fa9e:	4684      	mov	ip, r0
 800faa0:	189a      	adds	r2, r3, r2
 800faa2:	420f      	tst	r7, r1
 800faa4:	d02a      	beq.n	800fafc <__lshift+0xc8>
 800faa6:	3101      	adds	r1, #1
 800faa8:	1a09      	subs	r1, r1, r0
 800faaa:	9105      	str	r1, [sp, #20]
 800faac:	2100      	movs	r1, #0
 800faae:	9503      	str	r5, [sp, #12]
 800fab0:	4667      	mov	r7, ip
 800fab2:	6818      	ldr	r0, [r3, #0]
 800fab4:	40b8      	lsls	r0, r7
 800fab6:	4308      	orrs	r0, r1
 800fab8:	9903      	ldr	r1, [sp, #12]
 800faba:	c101      	stmia	r1!, {r0}
 800fabc:	9103      	str	r1, [sp, #12]
 800fabe:	9805      	ldr	r0, [sp, #20]
 800fac0:	cb02      	ldmia	r3!, {r1}
 800fac2:	40c1      	lsrs	r1, r0
 800fac4:	429a      	cmp	r2, r3
 800fac6:	d8f3      	bhi.n	800fab0 <__lshift+0x7c>
 800fac8:	0020      	movs	r0, r4
 800faca:	3015      	adds	r0, #21
 800facc:	2304      	movs	r3, #4
 800face:	4282      	cmp	r2, r0
 800fad0:	d304      	bcc.n	800fadc <__lshift+0xa8>
 800fad2:	1b13      	subs	r3, r2, r4
 800fad4:	3b15      	subs	r3, #21
 800fad6:	089b      	lsrs	r3, r3, #2
 800fad8:	3301      	adds	r3, #1
 800fada:	009b      	lsls	r3, r3, #2
 800fadc:	50e9      	str	r1, [r5, r3]
 800fade:	2900      	cmp	r1, #0
 800fae0:	d002      	beq.n	800fae8 <__lshift+0xb4>
 800fae2:	9b02      	ldr	r3, [sp, #8]
 800fae4:	3302      	adds	r3, #2
 800fae6:	9301      	str	r3, [sp, #4]
 800fae8:	9b01      	ldr	r3, [sp, #4]
 800faea:	9804      	ldr	r0, [sp, #16]
 800faec:	3b01      	subs	r3, #1
 800faee:	0021      	movs	r1, r4
 800faf0:	6133      	str	r3, [r6, #16]
 800faf2:	f7ff fd7f 	bl	800f5f4 <_Bfree>
 800faf6:	0030      	movs	r0, r6
 800faf8:	b007      	add	sp, #28
 800fafa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fafc:	cb02      	ldmia	r3!, {r1}
 800fafe:	c502      	stmia	r5!, {r1}
 800fb00:	429a      	cmp	r2, r3
 800fb02:	d8fb      	bhi.n	800fafc <__lshift+0xc8>
 800fb04:	e7f0      	b.n	800fae8 <__lshift+0xb4>
 800fb06:	46c0      	nop			; (mov r8, r8)
 800fb08:	080116a7 	.word	0x080116a7
 800fb0c:	08011718 	.word	0x08011718

0800fb10 <__mcmp>:
 800fb10:	b530      	push	{r4, r5, lr}
 800fb12:	690b      	ldr	r3, [r1, #16]
 800fb14:	6904      	ldr	r4, [r0, #16]
 800fb16:	0002      	movs	r2, r0
 800fb18:	1ae0      	subs	r0, r4, r3
 800fb1a:	429c      	cmp	r4, r3
 800fb1c:	d10e      	bne.n	800fb3c <__mcmp+0x2c>
 800fb1e:	3214      	adds	r2, #20
 800fb20:	009b      	lsls	r3, r3, #2
 800fb22:	3114      	adds	r1, #20
 800fb24:	0014      	movs	r4, r2
 800fb26:	18c9      	adds	r1, r1, r3
 800fb28:	18d2      	adds	r2, r2, r3
 800fb2a:	3a04      	subs	r2, #4
 800fb2c:	3904      	subs	r1, #4
 800fb2e:	6815      	ldr	r5, [r2, #0]
 800fb30:	680b      	ldr	r3, [r1, #0]
 800fb32:	429d      	cmp	r5, r3
 800fb34:	d003      	beq.n	800fb3e <__mcmp+0x2e>
 800fb36:	2001      	movs	r0, #1
 800fb38:	429d      	cmp	r5, r3
 800fb3a:	d303      	bcc.n	800fb44 <__mcmp+0x34>
 800fb3c:	bd30      	pop	{r4, r5, pc}
 800fb3e:	4294      	cmp	r4, r2
 800fb40:	d3f3      	bcc.n	800fb2a <__mcmp+0x1a>
 800fb42:	e7fb      	b.n	800fb3c <__mcmp+0x2c>
 800fb44:	4240      	negs	r0, r0
 800fb46:	e7f9      	b.n	800fb3c <__mcmp+0x2c>

0800fb48 <__mdiff>:
 800fb48:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fb4a:	000e      	movs	r6, r1
 800fb4c:	0007      	movs	r7, r0
 800fb4e:	0011      	movs	r1, r2
 800fb50:	0030      	movs	r0, r6
 800fb52:	b087      	sub	sp, #28
 800fb54:	0014      	movs	r4, r2
 800fb56:	f7ff ffdb 	bl	800fb10 <__mcmp>
 800fb5a:	1e05      	subs	r5, r0, #0
 800fb5c:	d110      	bne.n	800fb80 <__mdiff+0x38>
 800fb5e:	0001      	movs	r1, r0
 800fb60:	0038      	movs	r0, r7
 800fb62:	f7ff fd03 	bl	800f56c <_Balloc>
 800fb66:	1e02      	subs	r2, r0, #0
 800fb68:	d104      	bne.n	800fb74 <__mdiff+0x2c>
 800fb6a:	4b3f      	ldr	r3, [pc, #252]	; (800fc68 <__mdiff+0x120>)
 800fb6c:	483f      	ldr	r0, [pc, #252]	; (800fc6c <__mdiff+0x124>)
 800fb6e:	4940      	ldr	r1, [pc, #256]	; (800fc70 <__mdiff+0x128>)
 800fb70:	f7fe fa88 	bl	800e084 <__assert_func>
 800fb74:	2301      	movs	r3, #1
 800fb76:	6145      	str	r5, [r0, #20]
 800fb78:	6103      	str	r3, [r0, #16]
 800fb7a:	0010      	movs	r0, r2
 800fb7c:	b007      	add	sp, #28
 800fb7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb80:	2301      	movs	r3, #1
 800fb82:	9301      	str	r3, [sp, #4]
 800fb84:	2800      	cmp	r0, #0
 800fb86:	db04      	blt.n	800fb92 <__mdiff+0x4a>
 800fb88:	0023      	movs	r3, r4
 800fb8a:	0034      	movs	r4, r6
 800fb8c:	001e      	movs	r6, r3
 800fb8e:	2300      	movs	r3, #0
 800fb90:	9301      	str	r3, [sp, #4]
 800fb92:	0038      	movs	r0, r7
 800fb94:	6861      	ldr	r1, [r4, #4]
 800fb96:	f7ff fce9 	bl	800f56c <_Balloc>
 800fb9a:	1e02      	subs	r2, r0, #0
 800fb9c:	d103      	bne.n	800fba6 <__mdiff+0x5e>
 800fb9e:	4b32      	ldr	r3, [pc, #200]	; (800fc68 <__mdiff+0x120>)
 800fba0:	4832      	ldr	r0, [pc, #200]	; (800fc6c <__mdiff+0x124>)
 800fba2:	4934      	ldr	r1, [pc, #208]	; (800fc74 <__mdiff+0x12c>)
 800fba4:	e7e4      	b.n	800fb70 <__mdiff+0x28>
 800fba6:	9b01      	ldr	r3, [sp, #4]
 800fba8:	2700      	movs	r7, #0
 800fbaa:	60c3      	str	r3, [r0, #12]
 800fbac:	6920      	ldr	r0, [r4, #16]
 800fbae:	3414      	adds	r4, #20
 800fbb0:	0083      	lsls	r3, r0, #2
 800fbb2:	18e3      	adds	r3, r4, r3
 800fbb4:	0021      	movs	r1, r4
 800fbb6:	9401      	str	r4, [sp, #4]
 800fbb8:	0034      	movs	r4, r6
 800fbba:	9302      	str	r3, [sp, #8]
 800fbbc:	6933      	ldr	r3, [r6, #16]
 800fbbe:	3414      	adds	r4, #20
 800fbc0:	009b      	lsls	r3, r3, #2
 800fbc2:	18e3      	adds	r3, r4, r3
 800fbc4:	9303      	str	r3, [sp, #12]
 800fbc6:	0013      	movs	r3, r2
 800fbc8:	3314      	adds	r3, #20
 800fbca:	469c      	mov	ip, r3
 800fbcc:	9305      	str	r3, [sp, #20]
 800fbce:	9104      	str	r1, [sp, #16]
 800fbd0:	9b04      	ldr	r3, [sp, #16]
 800fbd2:	cc02      	ldmia	r4!, {r1}
 800fbd4:	cb20      	ldmia	r3!, {r5}
 800fbd6:	9304      	str	r3, [sp, #16]
 800fbd8:	b2ab      	uxth	r3, r5
 800fbda:	19df      	adds	r7, r3, r7
 800fbdc:	b28b      	uxth	r3, r1
 800fbde:	1afb      	subs	r3, r7, r3
 800fbe0:	0c09      	lsrs	r1, r1, #16
 800fbe2:	0c2d      	lsrs	r5, r5, #16
 800fbe4:	1a6d      	subs	r5, r5, r1
 800fbe6:	1419      	asrs	r1, r3, #16
 800fbe8:	1869      	adds	r1, r5, r1
 800fbea:	b29b      	uxth	r3, r3
 800fbec:	140f      	asrs	r7, r1, #16
 800fbee:	0409      	lsls	r1, r1, #16
 800fbf0:	4319      	orrs	r1, r3
 800fbf2:	4663      	mov	r3, ip
 800fbf4:	c302      	stmia	r3!, {r1}
 800fbf6:	469c      	mov	ip, r3
 800fbf8:	9b03      	ldr	r3, [sp, #12]
 800fbfa:	42a3      	cmp	r3, r4
 800fbfc:	d8e8      	bhi.n	800fbd0 <__mdiff+0x88>
 800fbfe:	0031      	movs	r1, r6
 800fc00:	9c03      	ldr	r4, [sp, #12]
 800fc02:	3115      	adds	r1, #21
 800fc04:	2304      	movs	r3, #4
 800fc06:	428c      	cmp	r4, r1
 800fc08:	d304      	bcc.n	800fc14 <__mdiff+0xcc>
 800fc0a:	1ba3      	subs	r3, r4, r6
 800fc0c:	3b15      	subs	r3, #21
 800fc0e:	089b      	lsrs	r3, r3, #2
 800fc10:	3301      	adds	r3, #1
 800fc12:	009b      	lsls	r3, r3, #2
 800fc14:	9901      	ldr	r1, [sp, #4]
 800fc16:	18cd      	adds	r5, r1, r3
 800fc18:	9905      	ldr	r1, [sp, #20]
 800fc1a:	002e      	movs	r6, r5
 800fc1c:	18cb      	adds	r3, r1, r3
 800fc1e:	469c      	mov	ip, r3
 800fc20:	9902      	ldr	r1, [sp, #8]
 800fc22:	428e      	cmp	r6, r1
 800fc24:	d310      	bcc.n	800fc48 <__mdiff+0x100>
 800fc26:	9e02      	ldr	r6, [sp, #8]
 800fc28:	1ee9      	subs	r1, r5, #3
 800fc2a:	2400      	movs	r4, #0
 800fc2c:	428e      	cmp	r6, r1
 800fc2e:	d304      	bcc.n	800fc3a <__mdiff+0xf2>
 800fc30:	0031      	movs	r1, r6
 800fc32:	3103      	adds	r1, #3
 800fc34:	1b49      	subs	r1, r1, r5
 800fc36:	0889      	lsrs	r1, r1, #2
 800fc38:	008c      	lsls	r4, r1, #2
 800fc3a:	191b      	adds	r3, r3, r4
 800fc3c:	3b04      	subs	r3, #4
 800fc3e:	6819      	ldr	r1, [r3, #0]
 800fc40:	2900      	cmp	r1, #0
 800fc42:	d00f      	beq.n	800fc64 <__mdiff+0x11c>
 800fc44:	6110      	str	r0, [r2, #16]
 800fc46:	e798      	b.n	800fb7a <__mdiff+0x32>
 800fc48:	ce02      	ldmia	r6!, {r1}
 800fc4a:	b28c      	uxth	r4, r1
 800fc4c:	19e4      	adds	r4, r4, r7
 800fc4e:	0c0f      	lsrs	r7, r1, #16
 800fc50:	1421      	asrs	r1, r4, #16
 800fc52:	1879      	adds	r1, r7, r1
 800fc54:	b2a4      	uxth	r4, r4
 800fc56:	140f      	asrs	r7, r1, #16
 800fc58:	0409      	lsls	r1, r1, #16
 800fc5a:	4321      	orrs	r1, r4
 800fc5c:	4664      	mov	r4, ip
 800fc5e:	c402      	stmia	r4!, {r1}
 800fc60:	46a4      	mov	ip, r4
 800fc62:	e7dd      	b.n	800fc20 <__mdiff+0xd8>
 800fc64:	3801      	subs	r0, #1
 800fc66:	e7e9      	b.n	800fc3c <__mdiff+0xf4>
 800fc68:	080116a7 	.word	0x080116a7
 800fc6c:	08011718 	.word	0x08011718
 800fc70:	00000237 	.word	0x00000237
 800fc74:	00000245 	.word	0x00000245

0800fc78 <__ulp>:
 800fc78:	2000      	movs	r0, #0
 800fc7a:	4b0b      	ldr	r3, [pc, #44]	; (800fca8 <__ulp+0x30>)
 800fc7c:	4019      	ands	r1, r3
 800fc7e:	4b0b      	ldr	r3, [pc, #44]	; (800fcac <__ulp+0x34>)
 800fc80:	18c9      	adds	r1, r1, r3
 800fc82:	4281      	cmp	r1, r0
 800fc84:	dc06      	bgt.n	800fc94 <__ulp+0x1c>
 800fc86:	4249      	negs	r1, r1
 800fc88:	150b      	asrs	r3, r1, #20
 800fc8a:	2b13      	cmp	r3, #19
 800fc8c:	dc03      	bgt.n	800fc96 <__ulp+0x1e>
 800fc8e:	2180      	movs	r1, #128	; 0x80
 800fc90:	0309      	lsls	r1, r1, #12
 800fc92:	4119      	asrs	r1, r3
 800fc94:	4770      	bx	lr
 800fc96:	3b14      	subs	r3, #20
 800fc98:	2001      	movs	r0, #1
 800fc9a:	2b1e      	cmp	r3, #30
 800fc9c:	dc02      	bgt.n	800fca4 <__ulp+0x2c>
 800fc9e:	2080      	movs	r0, #128	; 0x80
 800fca0:	0600      	lsls	r0, r0, #24
 800fca2:	40d8      	lsrs	r0, r3
 800fca4:	2100      	movs	r1, #0
 800fca6:	e7f5      	b.n	800fc94 <__ulp+0x1c>
 800fca8:	7ff00000 	.word	0x7ff00000
 800fcac:	fcc00000 	.word	0xfcc00000

0800fcb0 <__b2d>:
 800fcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fcb2:	0006      	movs	r6, r0
 800fcb4:	6903      	ldr	r3, [r0, #16]
 800fcb6:	3614      	adds	r6, #20
 800fcb8:	009b      	lsls	r3, r3, #2
 800fcba:	18f3      	adds	r3, r6, r3
 800fcbc:	1f1d      	subs	r5, r3, #4
 800fcbe:	682c      	ldr	r4, [r5, #0]
 800fcc0:	000f      	movs	r7, r1
 800fcc2:	0020      	movs	r0, r4
 800fcc4:	9301      	str	r3, [sp, #4]
 800fcc6:	f7ff fd49 	bl	800f75c <__hi0bits>
 800fcca:	2220      	movs	r2, #32
 800fccc:	1a12      	subs	r2, r2, r0
 800fcce:	603a      	str	r2, [r7, #0]
 800fcd0:	0003      	movs	r3, r0
 800fcd2:	4a1c      	ldr	r2, [pc, #112]	; (800fd44 <__b2d+0x94>)
 800fcd4:	280a      	cmp	r0, #10
 800fcd6:	dc15      	bgt.n	800fd04 <__b2d+0x54>
 800fcd8:	210b      	movs	r1, #11
 800fcda:	0027      	movs	r7, r4
 800fcdc:	1a09      	subs	r1, r1, r0
 800fcde:	40cf      	lsrs	r7, r1
 800fce0:	433a      	orrs	r2, r7
 800fce2:	468c      	mov	ip, r1
 800fce4:	0011      	movs	r1, r2
 800fce6:	2200      	movs	r2, #0
 800fce8:	42ae      	cmp	r6, r5
 800fcea:	d202      	bcs.n	800fcf2 <__b2d+0x42>
 800fcec:	9a01      	ldr	r2, [sp, #4]
 800fcee:	3a08      	subs	r2, #8
 800fcf0:	6812      	ldr	r2, [r2, #0]
 800fcf2:	3315      	adds	r3, #21
 800fcf4:	409c      	lsls	r4, r3
 800fcf6:	4663      	mov	r3, ip
 800fcf8:	0027      	movs	r7, r4
 800fcfa:	40da      	lsrs	r2, r3
 800fcfc:	4317      	orrs	r7, r2
 800fcfe:	0038      	movs	r0, r7
 800fd00:	b003      	add	sp, #12
 800fd02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fd04:	2700      	movs	r7, #0
 800fd06:	42ae      	cmp	r6, r5
 800fd08:	d202      	bcs.n	800fd10 <__b2d+0x60>
 800fd0a:	9d01      	ldr	r5, [sp, #4]
 800fd0c:	3d08      	subs	r5, #8
 800fd0e:	682f      	ldr	r7, [r5, #0]
 800fd10:	210b      	movs	r1, #11
 800fd12:	4249      	negs	r1, r1
 800fd14:	468c      	mov	ip, r1
 800fd16:	449c      	add	ip, r3
 800fd18:	2b0b      	cmp	r3, #11
 800fd1a:	d010      	beq.n	800fd3e <__b2d+0x8e>
 800fd1c:	4661      	mov	r1, ip
 800fd1e:	2320      	movs	r3, #32
 800fd20:	408c      	lsls	r4, r1
 800fd22:	1a5b      	subs	r3, r3, r1
 800fd24:	0039      	movs	r1, r7
 800fd26:	40d9      	lsrs	r1, r3
 800fd28:	430c      	orrs	r4, r1
 800fd2a:	4322      	orrs	r2, r4
 800fd2c:	0011      	movs	r1, r2
 800fd2e:	2200      	movs	r2, #0
 800fd30:	42b5      	cmp	r5, r6
 800fd32:	d901      	bls.n	800fd38 <__b2d+0x88>
 800fd34:	3d04      	subs	r5, #4
 800fd36:	682a      	ldr	r2, [r5, #0]
 800fd38:	4664      	mov	r4, ip
 800fd3a:	40a7      	lsls	r7, r4
 800fd3c:	e7dd      	b.n	800fcfa <__b2d+0x4a>
 800fd3e:	4322      	orrs	r2, r4
 800fd40:	0011      	movs	r1, r2
 800fd42:	e7dc      	b.n	800fcfe <__b2d+0x4e>
 800fd44:	3ff00000 	.word	0x3ff00000

0800fd48 <__d2b>:
 800fd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800fd4a:	2101      	movs	r1, #1
 800fd4c:	0014      	movs	r4, r2
 800fd4e:	001d      	movs	r5, r3
 800fd50:	9f08      	ldr	r7, [sp, #32]
 800fd52:	f7ff fc0b 	bl	800f56c <_Balloc>
 800fd56:	1e06      	subs	r6, r0, #0
 800fd58:	d105      	bne.n	800fd66 <__d2b+0x1e>
 800fd5a:	0032      	movs	r2, r6
 800fd5c:	4b24      	ldr	r3, [pc, #144]	; (800fdf0 <__d2b+0xa8>)
 800fd5e:	4825      	ldr	r0, [pc, #148]	; (800fdf4 <__d2b+0xac>)
 800fd60:	4925      	ldr	r1, [pc, #148]	; (800fdf8 <__d2b+0xb0>)
 800fd62:	f7fe f98f 	bl	800e084 <__assert_func>
 800fd66:	032b      	lsls	r3, r5, #12
 800fd68:	006d      	lsls	r5, r5, #1
 800fd6a:	0b1b      	lsrs	r3, r3, #12
 800fd6c:	0d6d      	lsrs	r5, r5, #21
 800fd6e:	d125      	bne.n	800fdbc <__d2b+0x74>
 800fd70:	9301      	str	r3, [sp, #4]
 800fd72:	2c00      	cmp	r4, #0
 800fd74:	d028      	beq.n	800fdc8 <__d2b+0x80>
 800fd76:	4668      	mov	r0, sp
 800fd78:	9400      	str	r4, [sp, #0]
 800fd7a:	f7ff fd09 	bl	800f790 <__lo0bits>
 800fd7e:	9b01      	ldr	r3, [sp, #4]
 800fd80:	9900      	ldr	r1, [sp, #0]
 800fd82:	2800      	cmp	r0, #0
 800fd84:	d01e      	beq.n	800fdc4 <__d2b+0x7c>
 800fd86:	2220      	movs	r2, #32
 800fd88:	001c      	movs	r4, r3
 800fd8a:	1a12      	subs	r2, r2, r0
 800fd8c:	4094      	lsls	r4, r2
 800fd8e:	0022      	movs	r2, r4
 800fd90:	40c3      	lsrs	r3, r0
 800fd92:	430a      	orrs	r2, r1
 800fd94:	6172      	str	r2, [r6, #20]
 800fd96:	9301      	str	r3, [sp, #4]
 800fd98:	9c01      	ldr	r4, [sp, #4]
 800fd9a:	61b4      	str	r4, [r6, #24]
 800fd9c:	1e63      	subs	r3, r4, #1
 800fd9e:	419c      	sbcs	r4, r3
 800fda0:	3401      	adds	r4, #1
 800fda2:	6134      	str	r4, [r6, #16]
 800fda4:	2d00      	cmp	r5, #0
 800fda6:	d017      	beq.n	800fdd8 <__d2b+0x90>
 800fda8:	2435      	movs	r4, #53	; 0x35
 800fdaa:	4b14      	ldr	r3, [pc, #80]	; (800fdfc <__d2b+0xb4>)
 800fdac:	18ed      	adds	r5, r5, r3
 800fdae:	182d      	adds	r5, r5, r0
 800fdb0:	603d      	str	r5, [r7, #0]
 800fdb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800fdb4:	1a24      	subs	r4, r4, r0
 800fdb6:	601c      	str	r4, [r3, #0]
 800fdb8:	0030      	movs	r0, r6
 800fdba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800fdbc:	2280      	movs	r2, #128	; 0x80
 800fdbe:	0352      	lsls	r2, r2, #13
 800fdc0:	4313      	orrs	r3, r2
 800fdc2:	e7d5      	b.n	800fd70 <__d2b+0x28>
 800fdc4:	6171      	str	r1, [r6, #20]
 800fdc6:	e7e7      	b.n	800fd98 <__d2b+0x50>
 800fdc8:	a801      	add	r0, sp, #4
 800fdca:	f7ff fce1 	bl	800f790 <__lo0bits>
 800fdce:	9b01      	ldr	r3, [sp, #4]
 800fdd0:	2401      	movs	r4, #1
 800fdd2:	6173      	str	r3, [r6, #20]
 800fdd4:	3020      	adds	r0, #32
 800fdd6:	e7e4      	b.n	800fda2 <__d2b+0x5a>
 800fdd8:	4b09      	ldr	r3, [pc, #36]	; (800fe00 <__d2b+0xb8>)
 800fdda:	18c0      	adds	r0, r0, r3
 800fddc:	4b09      	ldr	r3, [pc, #36]	; (800fe04 <__d2b+0xbc>)
 800fdde:	6038      	str	r0, [r7, #0]
 800fde0:	18e3      	adds	r3, r4, r3
 800fde2:	009b      	lsls	r3, r3, #2
 800fde4:	18f3      	adds	r3, r6, r3
 800fde6:	6958      	ldr	r0, [r3, #20]
 800fde8:	f7ff fcb8 	bl	800f75c <__hi0bits>
 800fdec:	0164      	lsls	r4, r4, #5
 800fdee:	e7e0      	b.n	800fdb2 <__d2b+0x6a>
 800fdf0:	080116a7 	.word	0x080116a7
 800fdf4:	08011718 	.word	0x08011718
 800fdf8:	0000030f 	.word	0x0000030f
 800fdfc:	fffffbcd 	.word	0xfffffbcd
 800fe00:	fffffbce 	.word	0xfffffbce
 800fe04:	3fffffff 	.word	0x3fffffff

0800fe08 <__ratio>:
 800fe08:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fe0a:	b087      	sub	sp, #28
 800fe0c:	000f      	movs	r7, r1
 800fe0e:	a904      	add	r1, sp, #16
 800fe10:	0006      	movs	r6, r0
 800fe12:	f7ff ff4d 	bl	800fcb0 <__b2d>
 800fe16:	9000      	str	r0, [sp, #0]
 800fe18:	9101      	str	r1, [sp, #4]
 800fe1a:	9c00      	ldr	r4, [sp, #0]
 800fe1c:	9d01      	ldr	r5, [sp, #4]
 800fe1e:	0038      	movs	r0, r7
 800fe20:	a905      	add	r1, sp, #20
 800fe22:	f7ff ff45 	bl	800fcb0 <__b2d>
 800fe26:	9002      	str	r0, [sp, #8]
 800fe28:	9103      	str	r1, [sp, #12]
 800fe2a:	9a02      	ldr	r2, [sp, #8]
 800fe2c:	9b03      	ldr	r3, [sp, #12]
 800fe2e:	6930      	ldr	r0, [r6, #16]
 800fe30:	6939      	ldr	r1, [r7, #16]
 800fe32:	9e04      	ldr	r6, [sp, #16]
 800fe34:	1a40      	subs	r0, r0, r1
 800fe36:	9905      	ldr	r1, [sp, #20]
 800fe38:	0140      	lsls	r0, r0, #5
 800fe3a:	1a71      	subs	r1, r6, r1
 800fe3c:	1841      	adds	r1, r0, r1
 800fe3e:	0508      	lsls	r0, r1, #20
 800fe40:	2900      	cmp	r1, #0
 800fe42:	dd07      	ble.n	800fe54 <__ratio+0x4c>
 800fe44:	9901      	ldr	r1, [sp, #4]
 800fe46:	1845      	adds	r5, r0, r1
 800fe48:	0020      	movs	r0, r4
 800fe4a:	0029      	movs	r1, r5
 800fe4c:	f7f1 f808 	bl	8000e60 <__aeabi_ddiv>
 800fe50:	b007      	add	sp, #28
 800fe52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fe54:	9903      	ldr	r1, [sp, #12]
 800fe56:	1a0b      	subs	r3, r1, r0
 800fe58:	e7f6      	b.n	800fe48 <__ratio+0x40>

0800fe5a <__copybits>:
 800fe5a:	b570      	push	{r4, r5, r6, lr}
 800fe5c:	0014      	movs	r4, r2
 800fe5e:	0005      	movs	r5, r0
 800fe60:	3901      	subs	r1, #1
 800fe62:	6913      	ldr	r3, [r2, #16]
 800fe64:	1149      	asrs	r1, r1, #5
 800fe66:	3101      	adds	r1, #1
 800fe68:	0089      	lsls	r1, r1, #2
 800fe6a:	3414      	adds	r4, #20
 800fe6c:	009b      	lsls	r3, r3, #2
 800fe6e:	1841      	adds	r1, r0, r1
 800fe70:	18e3      	adds	r3, r4, r3
 800fe72:	42a3      	cmp	r3, r4
 800fe74:	d80d      	bhi.n	800fe92 <__copybits+0x38>
 800fe76:	0014      	movs	r4, r2
 800fe78:	3411      	adds	r4, #17
 800fe7a:	2500      	movs	r5, #0
 800fe7c:	429c      	cmp	r4, r3
 800fe7e:	d803      	bhi.n	800fe88 <__copybits+0x2e>
 800fe80:	1a9b      	subs	r3, r3, r2
 800fe82:	3b11      	subs	r3, #17
 800fe84:	089b      	lsrs	r3, r3, #2
 800fe86:	009d      	lsls	r5, r3, #2
 800fe88:	2300      	movs	r3, #0
 800fe8a:	1940      	adds	r0, r0, r5
 800fe8c:	4281      	cmp	r1, r0
 800fe8e:	d803      	bhi.n	800fe98 <__copybits+0x3e>
 800fe90:	bd70      	pop	{r4, r5, r6, pc}
 800fe92:	cc40      	ldmia	r4!, {r6}
 800fe94:	c540      	stmia	r5!, {r6}
 800fe96:	e7ec      	b.n	800fe72 <__copybits+0x18>
 800fe98:	c008      	stmia	r0!, {r3}
 800fe9a:	e7f7      	b.n	800fe8c <__copybits+0x32>

0800fe9c <__any_on>:
 800fe9c:	0002      	movs	r2, r0
 800fe9e:	6900      	ldr	r0, [r0, #16]
 800fea0:	b510      	push	{r4, lr}
 800fea2:	3214      	adds	r2, #20
 800fea4:	114b      	asrs	r3, r1, #5
 800fea6:	4298      	cmp	r0, r3
 800fea8:	db13      	blt.n	800fed2 <__any_on+0x36>
 800feaa:	dd0c      	ble.n	800fec6 <__any_on+0x2a>
 800feac:	241f      	movs	r4, #31
 800feae:	0008      	movs	r0, r1
 800feb0:	4020      	ands	r0, r4
 800feb2:	4221      	tst	r1, r4
 800feb4:	d007      	beq.n	800fec6 <__any_on+0x2a>
 800feb6:	0099      	lsls	r1, r3, #2
 800feb8:	588c      	ldr	r4, [r1, r2]
 800feba:	0021      	movs	r1, r4
 800febc:	40c1      	lsrs	r1, r0
 800febe:	4081      	lsls	r1, r0
 800fec0:	2001      	movs	r0, #1
 800fec2:	428c      	cmp	r4, r1
 800fec4:	d104      	bne.n	800fed0 <__any_on+0x34>
 800fec6:	009b      	lsls	r3, r3, #2
 800fec8:	18d3      	adds	r3, r2, r3
 800feca:	4293      	cmp	r3, r2
 800fecc:	d803      	bhi.n	800fed6 <__any_on+0x3a>
 800fece:	2000      	movs	r0, #0
 800fed0:	bd10      	pop	{r4, pc}
 800fed2:	0003      	movs	r3, r0
 800fed4:	e7f7      	b.n	800fec6 <__any_on+0x2a>
 800fed6:	3b04      	subs	r3, #4
 800fed8:	6819      	ldr	r1, [r3, #0]
 800feda:	2900      	cmp	r1, #0
 800fedc:	d0f5      	beq.n	800feca <__any_on+0x2e>
 800fede:	2001      	movs	r0, #1
 800fee0:	e7f6      	b.n	800fed0 <__any_on+0x34>

0800fee2 <_malloc_usable_size_r>:
 800fee2:	1f0b      	subs	r3, r1, #4
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	1f18      	subs	r0, r3, #4
 800fee8:	2b00      	cmp	r3, #0
 800feea:	da01      	bge.n	800fef0 <_malloc_usable_size_r+0xe>
 800feec:	580b      	ldr	r3, [r1, r0]
 800feee:	18c0      	adds	r0, r0, r3
 800fef0:	4770      	bx	lr

0800fef2 <__ascii_wctomb>:
 800fef2:	0003      	movs	r3, r0
 800fef4:	1e08      	subs	r0, r1, #0
 800fef6:	d005      	beq.n	800ff04 <__ascii_wctomb+0x12>
 800fef8:	2aff      	cmp	r2, #255	; 0xff
 800fefa:	d904      	bls.n	800ff06 <__ascii_wctomb+0x14>
 800fefc:	228a      	movs	r2, #138	; 0x8a
 800fefe:	2001      	movs	r0, #1
 800ff00:	601a      	str	r2, [r3, #0]
 800ff02:	4240      	negs	r0, r0
 800ff04:	4770      	bx	lr
 800ff06:	2001      	movs	r0, #1
 800ff08:	700a      	strb	r2, [r1, #0]
 800ff0a:	e7fb      	b.n	800ff04 <__ascii_wctomb+0x12>

0800ff0c <__ssputs_r>:
 800ff0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ff0e:	b085      	sub	sp, #20
 800ff10:	9301      	str	r3, [sp, #4]
 800ff12:	9203      	str	r2, [sp, #12]
 800ff14:	688e      	ldr	r6, [r1, #8]
 800ff16:	9a01      	ldr	r2, [sp, #4]
 800ff18:	0007      	movs	r7, r0
 800ff1a:	000c      	movs	r4, r1
 800ff1c:	680b      	ldr	r3, [r1, #0]
 800ff1e:	4296      	cmp	r6, r2
 800ff20:	d831      	bhi.n	800ff86 <__ssputs_r+0x7a>
 800ff22:	898a      	ldrh	r2, [r1, #12]
 800ff24:	2190      	movs	r1, #144	; 0x90
 800ff26:	00c9      	lsls	r1, r1, #3
 800ff28:	420a      	tst	r2, r1
 800ff2a:	d029      	beq.n	800ff80 <__ssputs_r+0x74>
 800ff2c:	2003      	movs	r0, #3
 800ff2e:	6921      	ldr	r1, [r4, #16]
 800ff30:	1a5b      	subs	r3, r3, r1
 800ff32:	9302      	str	r3, [sp, #8]
 800ff34:	6963      	ldr	r3, [r4, #20]
 800ff36:	4343      	muls	r3, r0
 800ff38:	0fdd      	lsrs	r5, r3, #31
 800ff3a:	18ed      	adds	r5, r5, r3
 800ff3c:	9b01      	ldr	r3, [sp, #4]
 800ff3e:	9802      	ldr	r0, [sp, #8]
 800ff40:	3301      	adds	r3, #1
 800ff42:	181b      	adds	r3, r3, r0
 800ff44:	106d      	asrs	r5, r5, #1
 800ff46:	42ab      	cmp	r3, r5
 800ff48:	d900      	bls.n	800ff4c <__ssputs_r+0x40>
 800ff4a:	001d      	movs	r5, r3
 800ff4c:	0552      	lsls	r2, r2, #21
 800ff4e:	d529      	bpl.n	800ffa4 <__ssputs_r+0x98>
 800ff50:	0029      	movs	r1, r5
 800ff52:	0038      	movs	r0, r7
 800ff54:	f7fc f9e0 	bl	800c318 <_malloc_r>
 800ff58:	1e06      	subs	r6, r0, #0
 800ff5a:	d02d      	beq.n	800ffb8 <__ssputs_r+0xac>
 800ff5c:	9a02      	ldr	r2, [sp, #8]
 800ff5e:	6921      	ldr	r1, [r4, #16]
 800ff60:	f7fe f880 	bl	800e064 <memcpy>
 800ff64:	89a2      	ldrh	r2, [r4, #12]
 800ff66:	4b19      	ldr	r3, [pc, #100]	; (800ffcc <__ssputs_r+0xc0>)
 800ff68:	401a      	ands	r2, r3
 800ff6a:	2380      	movs	r3, #128	; 0x80
 800ff6c:	4313      	orrs	r3, r2
 800ff6e:	81a3      	strh	r3, [r4, #12]
 800ff70:	9b02      	ldr	r3, [sp, #8]
 800ff72:	6126      	str	r6, [r4, #16]
 800ff74:	18f6      	adds	r6, r6, r3
 800ff76:	6026      	str	r6, [r4, #0]
 800ff78:	6165      	str	r5, [r4, #20]
 800ff7a:	9e01      	ldr	r6, [sp, #4]
 800ff7c:	1aed      	subs	r5, r5, r3
 800ff7e:	60a5      	str	r5, [r4, #8]
 800ff80:	9b01      	ldr	r3, [sp, #4]
 800ff82:	429e      	cmp	r6, r3
 800ff84:	d900      	bls.n	800ff88 <__ssputs_r+0x7c>
 800ff86:	9e01      	ldr	r6, [sp, #4]
 800ff88:	0032      	movs	r2, r6
 800ff8a:	9903      	ldr	r1, [sp, #12]
 800ff8c:	6820      	ldr	r0, [r4, #0]
 800ff8e:	f000 fbcf 	bl	8010730 <memmove>
 800ff92:	2000      	movs	r0, #0
 800ff94:	68a3      	ldr	r3, [r4, #8]
 800ff96:	1b9b      	subs	r3, r3, r6
 800ff98:	60a3      	str	r3, [r4, #8]
 800ff9a:	6823      	ldr	r3, [r4, #0]
 800ff9c:	199b      	adds	r3, r3, r6
 800ff9e:	6023      	str	r3, [r4, #0]
 800ffa0:	b005      	add	sp, #20
 800ffa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ffa4:	002a      	movs	r2, r5
 800ffa6:	0038      	movs	r0, r7
 800ffa8:	f7fc fa52 	bl	800c450 <_realloc_r>
 800ffac:	1e06      	subs	r6, r0, #0
 800ffae:	d1df      	bne.n	800ff70 <__ssputs_r+0x64>
 800ffb0:	0038      	movs	r0, r7
 800ffb2:	6921      	ldr	r1, [r4, #16]
 800ffb4:	f7fe ff22 	bl	800edfc <_free_r>
 800ffb8:	230c      	movs	r3, #12
 800ffba:	2001      	movs	r0, #1
 800ffbc:	603b      	str	r3, [r7, #0]
 800ffbe:	89a2      	ldrh	r2, [r4, #12]
 800ffc0:	3334      	adds	r3, #52	; 0x34
 800ffc2:	4313      	orrs	r3, r2
 800ffc4:	81a3      	strh	r3, [r4, #12]
 800ffc6:	4240      	negs	r0, r0
 800ffc8:	e7ea      	b.n	800ffa0 <__ssputs_r+0x94>
 800ffca:	46c0      	nop			; (mov r8, r8)
 800ffcc:	fffffb7f 	.word	0xfffffb7f

0800ffd0 <_svfiprintf_r>:
 800ffd0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ffd2:	b0a1      	sub	sp, #132	; 0x84
 800ffd4:	9003      	str	r0, [sp, #12]
 800ffd6:	001d      	movs	r5, r3
 800ffd8:	898b      	ldrh	r3, [r1, #12]
 800ffda:	000f      	movs	r7, r1
 800ffdc:	0016      	movs	r6, r2
 800ffde:	061b      	lsls	r3, r3, #24
 800ffe0:	d511      	bpl.n	8010006 <_svfiprintf_r+0x36>
 800ffe2:	690b      	ldr	r3, [r1, #16]
 800ffe4:	2b00      	cmp	r3, #0
 800ffe6:	d10e      	bne.n	8010006 <_svfiprintf_r+0x36>
 800ffe8:	2140      	movs	r1, #64	; 0x40
 800ffea:	f7fc f995 	bl	800c318 <_malloc_r>
 800ffee:	6038      	str	r0, [r7, #0]
 800fff0:	6138      	str	r0, [r7, #16]
 800fff2:	2800      	cmp	r0, #0
 800fff4:	d105      	bne.n	8010002 <_svfiprintf_r+0x32>
 800fff6:	230c      	movs	r3, #12
 800fff8:	9a03      	ldr	r2, [sp, #12]
 800fffa:	3801      	subs	r0, #1
 800fffc:	6013      	str	r3, [r2, #0]
 800fffe:	b021      	add	sp, #132	; 0x84
 8010000:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010002:	2340      	movs	r3, #64	; 0x40
 8010004:	617b      	str	r3, [r7, #20]
 8010006:	2300      	movs	r3, #0
 8010008:	ac08      	add	r4, sp, #32
 801000a:	6163      	str	r3, [r4, #20]
 801000c:	3320      	adds	r3, #32
 801000e:	7663      	strb	r3, [r4, #25]
 8010010:	3310      	adds	r3, #16
 8010012:	76a3      	strb	r3, [r4, #26]
 8010014:	9507      	str	r5, [sp, #28]
 8010016:	0035      	movs	r5, r6
 8010018:	782b      	ldrb	r3, [r5, #0]
 801001a:	2b00      	cmp	r3, #0
 801001c:	d001      	beq.n	8010022 <_svfiprintf_r+0x52>
 801001e:	2b25      	cmp	r3, #37	; 0x25
 8010020:	d148      	bne.n	80100b4 <_svfiprintf_r+0xe4>
 8010022:	1bab      	subs	r3, r5, r6
 8010024:	9305      	str	r3, [sp, #20]
 8010026:	42b5      	cmp	r5, r6
 8010028:	d00b      	beq.n	8010042 <_svfiprintf_r+0x72>
 801002a:	0032      	movs	r2, r6
 801002c:	0039      	movs	r1, r7
 801002e:	9803      	ldr	r0, [sp, #12]
 8010030:	f7ff ff6c 	bl	800ff0c <__ssputs_r>
 8010034:	3001      	adds	r0, #1
 8010036:	d100      	bne.n	801003a <_svfiprintf_r+0x6a>
 8010038:	e0af      	b.n	801019a <_svfiprintf_r+0x1ca>
 801003a:	6963      	ldr	r3, [r4, #20]
 801003c:	9a05      	ldr	r2, [sp, #20]
 801003e:	189b      	adds	r3, r3, r2
 8010040:	6163      	str	r3, [r4, #20]
 8010042:	782b      	ldrb	r3, [r5, #0]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d100      	bne.n	801004a <_svfiprintf_r+0x7a>
 8010048:	e0a7      	b.n	801019a <_svfiprintf_r+0x1ca>
 801004a:	2201      	movs	r2, #1
 801004c:	2300      	movs	r3, #0
 801004e:	4252      	negs	r2, r2
 8010050:	6062      	str	r2, [r4, #4]
 8010052:	a904      	add	r1, sp, #16
 8010054:	3254      	adds	r2, #84	; 0x54
 8010056:	1852      	adds	r2, r2, r1
 8010058:	1c6e      	adds	r6, r5, #1
 801005a:	6023      	str	r3, [r4, #0]
 801005c:	60e3      	str	r3, [r4, #12]
 801005e:	60a3      	str	r3, [r4, #8]
 8010060:	7013      	strb	r3, [r2, #0]
 8010062:	65a3      	str	r3, [r4, #88]	; 0x58
 8010064:	4b55      	ldr	r3, [pc, #340]	; (80101bc <_svfiprintf_r+0x1ec>)
 8010066:	2205      	movs	r2, #5
 8010068:	0018      	movs	r0, r3
 801006a:	7831      	ldrb	r1, [r6, #0]
 801006c:	9305      	str	r3, [sp, #20]
 801006e:	f7fd ffee 	bl	800e04e <memchr>
 8010072:	1c75      	adds	r5, r6, #1
 8010074:	2800      	cmp	r0, #0
 8010076:	d11f      	bne.n	80100b8 <_svfiprintf_r+0xe8>
 8010078:	6822      	ldr	r2, [r4, #0]
 801007a:	06d3      	lsls	r3, r2, #27
 801007c:	d504      	bpl.n	8010088 <_svfiprintf_r+0xb8>
 801007e:	2353      	movs	r3, #83	; 0x53
 8010080:	a904      	add	r1, sp, #16
 8010082:	185b      	adds	r3, r3, r1
 8010084:	2120      	movs	r1, #32
 8010086:	7019      	strb	r1, [r3, #0]
 8010088:	0713      	lsls	r3, r2, #28
 801008a:	d504      	bpl.n	8010096 <_svfiprintf_r+0xc6>
 801008c:	2353      	movs	r3, #83	; 0x53
 801008e:	a904      	add	r1, sp, #16
 8010090:	185b      	adds	r3, r3, r1
 8010092:	212b      	movs	r1, #43	; 0x2b
 8010094:	7019      	strb	r1, [r3, #0]
 8010096:	7833      	ldrb	r3, [r6, #0]
 8010098:	2b2a      	cmp	r3, #42	; 0x2a
 801009a:	d016      	beq.n	80100ca <_svfiprintf_r+0xfa>
 801009c:	0035      	movs	r5, r6
 801009e:	2100      	movs	r1, #0
 80100a0:	200a      	movs	r0, #10
 80100a2:	68e3      	ldr	r3, [r4, #12]
 80100a4:	782a      	ldrb	r2, [r5, #0]
 80100a6:	1c6e      	adds	r6, r5, #1
 80100a8:	3a30      	subs	r2, #48	; 0x30
 80100aa:	2a09      	cmp	r2, #9
 80100ac:	d94e      	bls.n	801014c <_svfiprintf_r+0x17c>
 80100ae:	2900      	cmp	r1, #0
 80100b0:	d111      	bne.n	80100d6 <_svfiprintf_r+0x106>
 80100b2:	e017      	b.n	80100e4 <_svfiprintf_r+0x114>
 80100b4:	3501      	adds	r5, #1
 80100b6:	e7af      	b.n	8010018 <_svfiprintf_r+0x48>
 80100b8:	9b05      	ldr	r3, [sp, #20]
 80100ba:	6822      	ldr	r2, [r4, #0]
 80100bc:	1ac0      	subs	r0, r0, r3
 80100be:	2301      	movs	r3, #1
 80100c0:	4083      	lsls	r3, r0
 80100c2:	4313      	orrs	r3, r2
 80100c4:	002e      	movs	r6, r5
 80100c6:	6023      	str	r3, [r4, #0]
 80100c8:	e7cc      	b.n	8010064 <_svfiprintf_r+0x94>
 80100ca:	9b07      	ldr	r3, [sp, #28]
 80100cc:	1d19      	adds	r1, r3, #4
 80100ce:	681b      	ldr	r3, [r3, #0]
 80100d0:	9107      	str	r1, [sp, #28]
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	db01      	blt.n	80100da <_svfiprintf_r+0x10a>
 80100d6:	930b      	str	r3, [sp, #44]	; 0x2c
 80100d8:	e004      	b.n	80100e4 <_svfiprintf_r+0x114>
 80100da:	425b      	negs	r3, r3
 80100dc:	60e3      	str	r3, [r4, #12]
 80100de:	2302      	movs	r3, #2
 80100e0:	4313      	orrs	r3, r2
 80100e2:	6023      	str	r3, [r4, #0]
 80100e4:	782b      	ldrb	r3, [r5, #0]
 80100e6:	2b2e      	cmp	r3, #46	; 0x2e
 80100e8:	d10a      	bne.n	8010100 <_svfiprintf_r+0x130>
 80100ea:	786b      	ldrb	r3, [r5, #1]
 80100ec:	2b2a      	cmp	r3, #42	; 0x2a
 80100ee:	d135      	bne.n	801015c <_svfiprintf_r+0x18c>
 80100f0:	9b07      	ldr	r3, [sp, #28]
 80100f2:	3502      	adds	r5, #2
 80100f4:	1d1a      	adds	r2, r3, #4
 80100f6:	681b      	ldr	r3, [r3, #0]
 80100f8:	9207      	str	r2, [sp, #28]
 80100fa:	2b00      	cmp	r3, #0
 80100fc:	db2b      	blt.n	8010156 <_svfiprintf_r+0x186>
 80100fe:	9309      	str	r3, [sp, #36]	; 0x24
 8010100:	4e2f      	ldr	r6, [pc, #188]	; (80101c0 <_svfiprintf_r+0x1f0>)
 8010102:	2203      	movs	r2, #3
 8010104:	0030      	movs	r0, r6
 8010106:	7829      	ldrb	r1, [r5, #0]
 8010108:	f7fd ffa1 	bl	800e04e <memchr>
 801010c:	2800      	cmp	r0, #0
 801010e:	d006      	beq.n	801011e <_svfiprintf_r+0x14e>
 8010110:	2340      	movs	r3, #64	; 0x40
 8010112:	1b80      	subs	r0, r0, r6
 8010114:	4083      	lsls	r3, r0
 8010116:	6822      	ldr	r2, [r4, #0]
 8010118:	3501      	adds	r5, #1
 801011a:	4313      	orrs	r3, r2
 801011c:	6023      	str	r3, [r4, #0]
 801011e:	7829      	ldrb	r1, [r5, #0]
 8010120:	2206      	movs	r2, #6
 8010122:	4828      	ldr	r0, [pc, #160]	; (80101c4 <_svfiprintf_r+0x1f4>)
 8010124:	1c6e      	adds	r6, r5, #1
 8010126:	7621      	strb	r1, [r4, #24]
 8010128:	f7fd ff91 	bl	800e04e <memchr>
 801012c:	2800      	cmp	r0, #0
 801012e:	d03c      	beq.n	80101aa <_svfiprintf_r+0x1da>
 8010130:	4b25      	ldr	r3, [pc, #148]	; (80101c8 <_svfiprintf_r+0x1f8>)
 8010132:	2b00      	cmp	r3, #0
 8010134:	d125      	bne.n	8010182 <_svfiprintf_r+0x1b2>
 8010136:	2207      	movs	r2, #7
 8010138:	9b07      	ldr	r3, [sp, #28]
 801013a:	3307      	adds	r3, #7
 801013c:	4393      	bics	r3, r2
 801013e:	3308      	adds	r3, #8
 8010140:	9307      	str	r3, [sp, #28]
 8010142:	6963      	ldr	r3, [r4, #20]
 8010144:	9a04      	ldr	r2, [sp, #16]
 8010146:	189b      	adds	r3, r3, r2
 8010148:	6163      	str	r3, [r4, #20]
 801014a:	e764      	b.n	8010016 <_svfiprintf_r+0x46>
 801014c:	4343      	muls	r3, r0
 801014e:	0035      	movs	r5, r6
 8010150:	2101      	movs	r1, #1
 8010152:	189b      	adds	r3, r3, r2
 8010154:	e7a6      	b.n	80100a4 <_svfiprintf_r+0xd4>
 8010156:	2301      	movs	r3, #1
 8010158:	425b      	negs	r3, r3
 801015a:	e7d0      	b.n	80100fe <_svfiprintf_r+0x12e>
 801015c:	2300      	movs	r3, #0
 801015e:	200a      	movs	r0, #10
 8010160:	001a      	movs	r2, r3
 8010162:	3501      	adds	r5, #1
 8010164:	6063      	str	r3, [r4, #4]
 8010166:	7829      	ldrb	r1, [r5, #0]
 8010168:	1c6e      	adds	r6, r5, #1
 801016a:	3930      	subs	r1, #48	; 0x30
 801016c:	2909      	cmp	r1, #9
 801016e:	d903      	bls.n	8010178 <_svfiprintf_r+0x1a8>
 8010170:	2b00      	cmp	r3, #0
 8010172:	d0c5      	beq.n	8010100 <_svfiprintf_r+0x130>
 8010174:	9209      	str	r2, [sp, #36]	; 0x24
 8010176:	e7c3      	b.n	8010100 <_svfiprintf_r+0x130>
 8010178:	4342      	muls	r2, r0
 801017a:	0035      	movs	r5, r6
 801017c:	2301      	movs	r3, #1
 801017e:	1852      	adds	r2, r2, r1
 8010180:	e7f1      	b.n	8010166 <_svfiprintf_r+0x196>
 8010182:	aa07      	add	r2, sp, #28
 8010184:	9200      	str	r2, [sp, #0]
 8010186:	0021      	movs	r1, r4
 8010188:	003a      	movs	r2, r7
 801018a:	4b10      	ldr	r3, [pc, #64]	; (80101cc <_svfiprintf_r+0x1fc>)
 801018c:	9803      	ldr	r0, [sp, #12]
 801018e:	f7fd f8f9 	bl	800d384 <_printf_float>
 8010192:	9004      	str	r0, [sp, #16]
 8010194:	9b04      	ldr	r3, [sp, #16]
 8010196:	3301      	adds	r3, #1
 8010198:	d1d3      	bne.n	8010142 <_svfiprintf_r+0x172>
 801019a:	89bb      	ldrh	r3, [r7, #12]
 801019c:	980d      	ldr	r0, [sp, #52]	; 0x34
 801019e:	065b      	lsls	r3, r3, #25
 80101a0:	d400      	bmi.n	80101a4 <_svfiprintf_r+0x1d4>
 80101a2:	e72c      	b.n	800fffe <_svfiprintf_r+0x2e>
 80101a4:	2001      	movs	r0, #1
 80101a6:	4240      	negs	r0, r0
 80101a8:	e729      	b.n	800fffe <_svfiprintf_r+0x2e>
 80101aa:	aa07      	add	r2, sp, #28
 80101ac:	9200      	str	r2, [sp, #0]
 80101ae:	0021      	movs	r1, r4
 80101b0:	003a      	movs	r2, r7
 80101b2:	4b06      	ldr	r3, [pc, #24]	; (80101cc <_svfiprintf_r+0x1fc>)
 80101b4:	9803      	ldr	r0, [sp, #12]
 80101b6:	f7fd fbab 	bl	800d910 <_printf_i>
 80101ba:	e7ea      	b.n	8010192 <_svfiprintf_r+0x1c2>
 80101bc:	08011874 	.word	0x08011874
 80101c0:	0801187a 	.word	0x0801187a
 80101c4:	0801187e 	.word	0x0801187e
 80101c8:	0800d385 	.word	0x0800d385
 80101cc:	0800ff0d 	.word	0x0800ff0d

080101d0 <__sfputc_r>:
 80101d0:	6893      	ldr	r3, [r2, #8]
 80101d2:	b510      	push	{r4, lr}
 80101d4:	3b01      	subs	r3, #1
 80101d6:	6093      	str	r3, [r2, #8]
 80101d8:	2b00      	cmp	r3, #0
 80101da:	da04      	bge.n	80101e6 <__sfputc_r+0x16>
 80101dc:	6994      	ldr	r4, [r2, #24]
 80101de:	42a3      	cmp	r3, r4
 80101e0:	db07      	blt.n	80101f2 <__sfputc_r+0x22>
 80101e2:	290a      	cmp	r1, #10
 80101e4:	d005      	beq.n	80101f2 <__sfputc_r+0x22>
 80101e6:	6813      	ldr	r3, [r2, #0]
 80101e8:	1c58      	adds	r0, r3, #1
 80101ea:	6010      	str	r0, [r2, #0]
 80101ec:	7019      	strb	r1, [r3, #0]
 80101ee:	0008      	movs	r0, r1
 80101f0:	bd10      	pop	{r4, pc}
 80101f2:	f000 f9f7 	bl	80105e4 <__swbuf_r>
 80101f6:	0001      	movs	r1, r0
 80101f8:	e7f9      	b.n	80101ee <__sfputc_r+0x1e>

080101fa <__sfputs_r>:
 80101fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80101fc:	0006      	movs	r6, r0
 80101fe:	000f      	movs	r7, r1
 8010200:	0014      	movs	r4, r2
 8010202:	18d5      	adds	r5, r2, r3
 8010204:	42ac      	cmp	r4, r5
 8010206:	d101      	bne.n	801020c <__sfputs_r+0x12>
 8010208:	2000      	movs	r0, #0
 801020a:	e007      	b.n	801021c <__sfputs_r+0x22>
 801020c:	7821      	ldrb	r1, [r4, #0]
 801020e:	003a      	movs	r2, r7
 8010210:	0030      	movs	r0, r6
 8010212:	f7ff ffdd 	bl	80101d0 <__sfputc_r>
 8010216:	3401      	adds	r4, #1
 8010218:	1c43      	adds	r3, r0, #1
 801021a:	d1f3      	bne.n	8010204 <__sfputs_r+0xa>
 801021c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08010220 <_vfiprintf_r>:
 8010220:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010222:	b0a1      	sub	sp, #132	; 0x84
 8010224:	000f      	movs	r7, r1
 8010226:	0015      	movs	r5, r2
 8010228:	001e      	movs	r6, r3
 801022a:	9003      	str	r0, [sp, #12]
 801022c:	2800      	cmp	r0, #0
 801022e:	d004      	beq.n	801023a <_vfiprintf_r+0x1a>
 8010230:	6a03      	ldr	r3, [r0, #32]
 8010232:	2b00      	cmp	r3, #0
 8010234:	d101      	bne.n	801023a <_vfiprintf_r+0x1a>
 8010236:	f7fd fd0b 	bl	800dc50 <__sinit>
 801023a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 801023c:	07db      	lsls	r3, r3, #31
 801023e:	d405      	bmi.n	801024c <_vfiprintf_r+0x2c>
 8010240:	89bb      	ldrh	r3, [r7, #12]
 8010242:	059b      	lsls	r3, r3, #22
 8010244:	d402      	bmi.n	801024c <_vfiprintf_r+0x2c>
 8010246:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010248:	f7fd fef7 	bl	800e03a <__retarget_lock_acquire_recursive>
 801024c:	89bb      	ldrh	r3, [r7, #12]
 801024e:	071b      	lsls	r3, r3, #28
 8010250:	d502      	bpl.n	8010258 <_vfiprintf_r+0x38>
 8010252:	693b      	ldr	r3, [r7, #16]
 8010254:	2b00      	cmp	r3, #0
 8010256:	d113      	bne.n	8010280 <_vfiprintf_r+0x60>
 8010258:	0039      	movs	r1, r7
 801025a:	9803      	ldr	r0, [sp, #12]
 801025c:	f000 fa04 	bl	8010668 <__swsetup_r>
 8010260:	2800      	cmp	r0, #0
 8010262:	d00d      	beq.n	8010280 <_vfiprintf_r+0x60>
 8010264:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010266:	07db      	lsls	r3, r3, #31
 8010268:	d503      	bpl.n	8010272 <_vfiprintf_r+0x52>
 801026a:	2001      	movs	r0, #1
 801026c:	4240      	negs	r0, r0
 801026e:	b021      	add	sp, #132	; 0x84
 8010270:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010272:	89bb      	ldrh	r3, [r7, #12]
 8010274:	059b      	lsls	r3, r3, #22
 8010276:	d4f8      	bmi.n	801026a <_vfiprintf_r+0x4a>
 8010278:	6db8      	ldr	r0, [r7, #88]	; 0x58
 801027a:	f7fd fedf 	bl	800e03c <__retarget_lock_release_recursive>
 801027e:	e7f4      	b.n	801026a <_vfiprintf_r+0x4a>
 8010280:	2300      	movs	r3, #0
 8010282:	ac08      	add	r4, sp, #32
 8010284:	6163      	str	r3, [r4, #20]
 8010286:	3320      	adds	r3, #32
 8010288:	7663      	strb	r3, [r4, #25]
 801028a:	3310      	adds	r3, #16
 801028c:	76a3      	strb	r3, [r4, #26]
 801028e:	9607      	str	r6, [sp, #28]
 8010290:	002e      	movs	r6, r5
 8010292:	7833      	ldrb	r3, [r6, #0]
 8010294:	2b00      	cmp	r3, #0
 8010296:	d001      	beq.n	801029c <_vfiprintf_r+0x7c>
 8010298:	2b25      	cmp	r3, #37	; 0x25
 801029a:	d148      	bne.n	801032e <_vfiprintf_r+0x10e>
 801029c:	1b73      	subs	r3, r6, r5
 801029e:	9305      	str	r3, [sp, #20]
 80102a0:	42ae      	cmp	r6, r5
 80102a2:	d00b      	beq.n	80102bc <_vfiprintf_r+0x9c>
 80102a4:	002a      	movs	r2, r5
 80102a6:	0039      	movs	r1, r7
 80102a8:	9803      	ldr	r0, [sp, #12]
 80102aa:	f7ff ffa6 	bl	80101fa <__sfputs_r>
 80102ae:	3001      	adds	r0, #1
 80102b0:	d100      	bne.n	80102b4 <_vfiprintf_r+0x94>
 80102b2:	e0af      	b.n	8010414 <_vfiprintf_r+0x1f4>
 80102b4:	6963      	ldr	r3, [r4, #20]
 80102b6:	9a05      	ldr	r2, [sp, #20]
 80102b8:	189b      	adds	r3, r3, r2
 80102ba:	6163      	str	r3, [r4, #20]
 80102bc:	7833      	ldrb	r3, [r6, #0]
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d100      	bne.n	80102c4 <_vfiprintf_r+0xa4>
 80102c2:	e0a7      	b.n	8010414 <_vfiprintf_r+0x1f4>
 80102c4:	2201      	movs	r2, #1
 80102c6:	2300      	movs	r3, #0
 80102c8:	4252      	negs	r2, r2
 80102ca:	6062      	str	r2, [r4, #4]
 80102cc:	a904      	add	r1, sp, #16
 80102ce:	3254      	adds	r2, #84	; 0x54
 80102d0:	1852      	adds	r2, r2, r1
 80102d2:	1c75      	adds	r5, r6, #1
 80102d4:	6023      	str	r3, [r4, #0]
 80102d6:	60e3      	str	r3, [r4, #12]
 80102d8:	60a3      	str	r3, [r4, #8]
 80102da:	7013      	strb	r3, [r2, #0]
 80102dc:	65a3      	str	r3, [r4, #88]	; 0x58
 80102de:	4b59      	ldr	r3, [pc, #356]	; (8010444 <_vfiprintf_r+0x224>)
 80102e0:	2205      	movs	r2, #5
 80102e2:	0018      	movs	r0, r3
 80102e4:	7829      	ldrb	r1, [r5, #0]
 80102e6:	9305      	str	r3, [sp, #20]
 80102e8:	f7fd feb1 	bl	800e04e <memchr>
 80102ec:	1c6e      	adds	r6, r5, #1
 80102ee:	2800      	cmp	r0, #0
 80102f0:	d11f      	bne.n	8010332 <_vfiprintf_r+0x112>
 80102f2:	6822      	ldr	r2, [r4, #0]
 80102f4:	06d3      	lsls	r3, r2, #27
 80102f6:	d504      	bpl.n	8010302 <_vfiprintf_r+0xe2>
 80102f8:	2353      	movs	r3, #83	; 0x53
 80102fa:	a904      	add	r1, sp, #16
 80102fc:	185b      	adds	r3, r3, r1
 80102fe:	2120      	movs	r1, #32
 8010300:	7019      	strb	r1, [r3, #0]
 8010302:	0713      	lsls	r3, r2, #28
 8010304:	d504      	bpl.n	8010310 <_vfiprintf_r+0xf0>
 8010306:	2353      	movs	r3, #83	; 0x53
 8010308:	a904      	add	r1, sp, #16
 801030a:	185b      	adds	r3, r3, r1
 801030c:	212b      	movs	r1, #43	; 0x2b
 801030e:	7019      	strb	r1, [r3, #0]
 8010310:	782b      	ldrb	r3, [r5, #0]
 8010312:	2b2a      	cmp	r3, #42	; 0x2a
 8010314:	d016      	beq.n	8010344 <_vfiprintf_r+0x124>
 8010316:	002e      	movs	r6, r5
 8010318:	2100      	movs	r1, #0
 801031a:	200a      	movs	r0, #10
 801031c:	68e3      	ldr	r3, [r4, #12]
 801031e:	7832      	ldrb	r2, [r6, #0]
 8010320:	1c75      	adds	r5, r6, #1
 8010322:	3a30      	subs	r2, #48	; 0x30
 8010324:	2a09      	cmp	r2, #9
 8010326:	d94e      	bls.n	80103c6 <_vfiprintf_r+0x1a6>
 8010328:	2900      	cmp	r1, #0
 801032a:	d111      	bne.n	8010350 <_vfiprintf_r+0x130>
 801032c:	e017      	b.n	801035e <_vfiprintf_r+0x13e>
 801032e:	3601      	adds	r6, #1
 8010330:	e7af      	b.n	8010292 <_vfiprintf_r+0x72>
 8010332:	9b05      	ldr	r3, [sp, #20]
 8010334:	6822      	ldr	r2, [r4, #0]
 8010336:	1ac0      	subs	r0, r0, r3
 8010338:	2301      	movs	r3, #1
 801033a:	4083      	lsls	r3, r0
 801033c:	4313      	orrs	r3, r2
 801033e:	0035      	movs	r5, r6
 8010340:	6023      	str	r3, [r4, #0]
 8010342:	e7cc      	b.n	80102de <_vfiprintf_r+0xbe>
 8010344:	9b07      	ldr	r3, [sp, #28]
 8010346:	1d19      	adds	r1, r3, #4
 8010348:	681b      	ldr	r3, [r3, #0]
 801034a:	9107      	str	r1, [sp, #28]
 801034c:	2b00      	cmp	r3, #0
 801034e:	db01      	blt.n	8010354 <_vfiprintf_r+0x134>
 8010350:	930b      	str	r3, [sp, #44]	; 0x2c
 8010352:	e004      	b.n	801035e <_vfiprintf_r+0x13e>
 8010354:	425b      	negs	r3, r3
 8010356:	60e3      	str	r3, [r4, #12]
 8010358:	2302      	movs	r3, #2
 801035a:	4313      	orrs	r3, r2
 801035c:	6023      	str	r3, [r4, #0]
 801035e:	7833      	ldrb	r3, [r6, #0]
 8010360:	2b2e      	cmp	r3, #46	; 0x2e
 8010362:	d10a      	bne.n	801037a <_vfiprintf_r+0x15a>
 8010364:	7873      	ldrb	r3, [r6, #1]
 8010366:	2b2a      	cmp	r3, #42	; 0x2a
 8010368:	d135      	bne.n	80103d6 <_vfiprintf_r+0x1b6>
 801036a:	9b07      	ldr	r3, [sp, #28]
 801036c:	3602      	adds	r6, #2
 801036e:	1d1a      	adds	r2, r3, #4
 8010370:	681b      	ldr	r3, [r3, #0]
 8010372:	9207      	str	r2, [sp, #28]
 8010374:	2b00      	cmp	r3, #0
 8010376:	db2b      	blt.n	80103d0 <_vfiprintf_r+0x1b0>
 8010378:	9309      	str	r3, [sp, #36]	; 0x24
 801037a:	4d33      	ldr	r5, [pc, #204]	; (8010448 <_vfiprintf_r+0x228>)
 801037c:	2203      	movs	r2, #3
 801037e:	0028      	movs	r0, r5
 8010380:	7831      	ldrb	r1, [r6, #0]
 8010382:	f7fd fe64 	bl	800e04e <memchr>
 8010386:	2800      	cmp	r0, #0
 8010388:	d006      	beq.n	8010398 <_vfiprintf_r+0x178>
 801038a:	2340      	movs	r3, #64	; 0x40
 801038c:	1b40      	subs	r0, r0, r5
 801038e:	4083      	lsls	r3, r0
 8010390:	6822      	ldr	r2, [r4, #0]
 8010392:	3601      	adds	r6, #1
 8010394:	4313      	orrs	r3, r2
 8010396:	6023      	str	r3, [r4, #0]
 8010398:	7831      	ldrb	r1, [r6, #0]
 801039a:	2206      	movs	r2, #6
 801039c:	482b      	ldr	r0, [pc, #172]	; (801044c <_vfiprintf_r+0x22c>)
 801039e:	1c75      	adds	r5, r6, #1
 80103a0:	7621      	strb	r1, [r4, #24]
 80103a2:	f7fd fe54 	bl	800e04e <memchr>
 80103a6:	2800      	cmp	r0, #0
 80103a8:	d043      	beq.n	8010432 <_vfiprintf_r+0x212>
 80103aa:	4b29      	ldr	r3, [pc, #164]	; (8010450 <_vfiprintf_r+0x230>)
 80103ac:	2b00      	cmp	r3, #0
 80103ae:	d125      	bne.n	80103fc <_vfiprintf_r+0x1dc>
 80103b0:	2207      	movs	r2, #7
 80103b2:	9b07      	ldr	r3, [sp, #28]
 80103b4:	3307      	adds	r3, #7
 80103b6:	4393      	bics	r3, r2
 80103b8:	3308      	adds	r3, #8
 80103ba:	9307      	str	r3, [sp, #28]
 80103bc:	6963      	ldr	r3, [r4, #20]
 80103be:	9a04      	ldr	r2, [sp, #16]
 80103c0:	189b      	adds	r3, r3, r2
 80103c2:	6163      	str	r3, [r4, #20]
 80103c4:	e764      	b.n	8010290 <_vfiprintf_r+0x70>
 80103c6:	4343      	muls	r3, r0
 80103c8:	002e      	movs	r6, r5
 80103ca:	2101      	movs	r1, #1
 80103cc:	189b      	adds	r3, r3, r2
 80103ce:	e7a6      	b.n	801031e <_vfiprintf_r+0xfe>
 80103d0:	2301      	movs	r3, #1
 80103d2:	425b      	negs	r3, r3
 80103d4:	e7d0      	b.n	8010378 <_vfiprintf_r+0x158>
 80103d6:	2300      	movs	r3, #0
 80103d8:	200a      	movs	r0, #10
 80103da:	001a      	movs	r2, r3
 80103dc:	3601      	adds	r6, #1
 80103de:	6063      	str	r3, [r4, #4]
 80103e0:	7831      	ldrb	r1, [r6, #0]
 80103e2:	1c75      	adds	r5, r6, #1
 80103e4:	3930      	subs	r1, #48	; 0x30
 80103e6:	2909      	cmp	r1, #9
 80103e8:	d903      	bls.n	80103f2 <_vfiprintf_r+0x1d2>
 80103ea:	2b00      	cmp	r3, #0
 80103ec:	d0c5      	beq.n	801037a <_vfiprintf_r+0x15a>
 80103ee:	9209      	str	r2, [sp, #36]	; 0x24
 80103f0:	e7c3      	b.n	801037a <_vfiprintf_r+0x15a>
 80103f2:	4342      	muls	r2, r0
 80103f4:	002e      	movs	r6, r5
 80103f6:	2301      	movs	r3, #1
 80103f8:	1852      	adds	r2, r2, r1
 80103fa:	e7f1      	b.n	80103e0 <_vfiprintf_r+0x1c0>
 80103fc:	aa07      	add	r2, sp, #28
 80103fe:	9200      	str	r2, [sp, #0]
 8010400:	0021      	movs	r1, r4
 8010402:	003a      	movs	r2, r7
 8010404:	4b13      	ldr	r3, [pc, #76]	; (8010454 <_vfiprintf_r+0x234>)
 8010406:	9803      	ldr	r0, [sp, #12]
 8010408:	f7fc ffbc 	bl	800d384 <_printf_float>
 801040c:	9004      	str	r0, [sp, #16]
 801040e:	9b04      	ldr	r3, [sp, #16]
 8010410:	3301      	adds	r3, #1
 8010412:	d1d3      	bne.n	80103bc <_vfiprintf_r+0x19c>
 8010414:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8010416:	07db      	lsls	r3, r3, #31
 8010418:	d405      	bmi.n	8010426 <_vfiprintf_r+0x206>
 801041a:	89bb      	ldrh	r3, [r7, #12]
 801041c:	059b      	lsls	r3, r3, #22
 801041e:	d402      	bmi.n	8010426 <_vfiprintf_r+0x206>
 8010420:	6db8      	ldr	r0, [r7, #88]	; 0x58
 8010422:	f7fd fe0b 	bl	800e03c <__retarget_lock_release_recursive>
 8010426:	89bb      	ldrh	r3, [r7, #12]
 8010428:	065b      	lsls	r3, r3, #25
 801042a:	d500      	bpl.n	801042e <_vfiprintf_r+0x20e>
 801042c:	e71d      	b.n	801026a <_vfiprintf_r+0x4a>
 801042e:	980d      	ldr	r0, [sp, #52]	; 0x34
 8010430:	e71d      	b.n	801026e <_vfiprintf_r+0x4e>
 8010432:	aa07      	add	r2, sp, #28
 8010434:	9200      	str	r2, [sp, #0]
 8010436:	0021      	movs	r1, r4
 8010438:	003a      	movs	r2, r7
 801043a:	4b06      	ldr	r3, [pc, #24]	; (8010454 <_vfiprintf_r+0x234>)
 801043c:	9803      	ldr	r0, [sp, #12]
 801043e:	f7fd fa67 	bl	800d910 <_printf_i>
 8010442:	e7e3      	b.n	801040c <_vfiprintf_r+0x1ec>
 8010444:	08011874 	.word	0x08011874
 8010448:	0801187a 	.word	0x0801187a
 801044c:	0801187e 	.word	0x0801187e
 8010450:	0800d385 	.word	0x0800d385
 8010454:	080101fb 	.word	0x080101fb

08010458 <__sflush_r>:
 8010458:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801045a:	898b      	ldrh	r3, [r1, #12]
 801045c:	0005      	movs	r5, r0
 801045e:	000c      	movs	r4, r1
 8010460:	071a      	lsls	r2, r3, #28
 8010462:	d45c      	bmi.n	801051e <__sflush_r+0xc6>
 8010464:	684a      	ldr	r2, [r1, #4]
 8010466:	2a00      	cmp	r2, #0
 8010468:	dc04      	bgt.n	8010474 <__sflush_r+0x1c>
 801046a:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 801046c:	2a00      	cmp	r2, #0
 801046e:	dc01      	bgt.n	8010474 <__sflush_r+0x1c>
 8010470:	2000      	movs	r0, #0
 8010472:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8010474:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8010476:	2f00      	cmp	r7, #0
 8010478:	d0fa      	beq.n	8010470 <__sflush_r+0x18>
 801047a:	2200      	movs	r2, #0
 801047c:	2080      	movs	r0, #128	; 0x80
 801047e:	682e      	ldr	r6, [r5, #0]
 8010480:	602a      	str	r2, [r5, #0]
 8010482:	001a      	movs	r2, r3
 8010484:	0140      	lsls	r0, r0, #5
 8010486:	6a21      	ldr	r1, [r4, #32]
 8010488:	4002      	ands	r2, r0
 801048a:	4203      	tst	r3, r0
 801048c:	d034      	beq.n	80104f8 <__sflush_r+0xa0>
 801048e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8010490:	89a3      	ldrh	r3, [r4, #12]
 8010492:	075b      	lsls	r3, r3, #29
 8010494:	d506      	bpl.n	80104a4 <__sflush_r+0x4c>
 8010496:	6863      	ldr	r3, [r4, #4]
 8010498:	1ac0      	subs	r0, r0, r3
 801049a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801049c:	2b00      	cmp	r3, #0
 801049e:	d001      	beq.n	80104a4 <__sflush_r+0x4c>
 80104a0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80104a2:	1ac0      	subs	r0, r0, r3
 80104a4:	0002      	movs	r2, r0
 80104a6:	2300      	movs	r3, #0
 80104a8:	0028      	movs	r0, r5
 80104aa:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 80104ac:	6a21      	ldr	r1, [r4, #32]
 80104ae:	47b8      	blx	r7
 80104b0:	89a2      	ldrh	r2, [r4, #12]
 80104b2:	1c43      	adds	r3, r0, #1
 80104b4:	d106      	bne.n	80104c4 <__sflush_r+0x6c>
 80104b6:	6829      	ldr	r1, [r5, #0]
 80104b8:	291d      	cmp	r1, #29
 80104ba:	d82c      	bhi.n	8010516 <__sflush_r+0xbe>
 80104bc:	4b2a      	ldr	r3, [pc, #168]	; (8010568 <__sflush_r+0x110>)
 80104be:	410b      	asrs	r3, r1
 80104c0:	07db      	lsls	r3, r3, #31
 80104c2:	d428      	bmi.n	8010516 <__sflush_r+0xbe>
 80104c4:	2300      	movs	r3, #0
 80104c6:	6063      	str	r3, [r4, #4]
 80104c8:	6923      	ldr	r3, [r4, #16]
 80104ca:	6023      	str	r3, [r4, #0]
 80104cc:	04d2      	lsls	r2, r2, #19
 80104ce:	d505      	bpl.n	80104dc <__sflush_r+0x84>
 80104d0:	1c43      	adds	r3, r0, #1
 80104d2:	d102      	bne.n	80104da <__sflush_r+0x82>
 80104d4:	682b      	ldr	r3, [r5, #0]
 80104d6:	2b00      	cmp	r3, #0
 80104d8:	d100      	bne.n	80104dc <__sflush_r+0x84>
 80104da:	6560      	str	r0, [r4, #84]	; 0x54
 80104dc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80104de:	602e      	str	r6, [r5, #0]
 80104e0:	2900      	cmp	r1, #0
 80104e2:	d0c5      	beq.n	8010470 <__sflush_r+0x18>
 80104e4:	0023      	movs	r3, r4
 80104e6:	3344      	adds	r3, #68	; 0x44
 80104e8:	4299      	cmp	r1, r3
 80104ea:	d002      	beq.n	80104f2 <__sflush_r+0x9a>
 80104ec:	0028      	movs	r0, r5
 80104ee:	f7fe fc85 	bl	800edfc <_free_r>
 80104f2:	2000      	movs	r0, #0
 80104f4:	6360      	str	r0, [r4, #52]	; 0x34
 80104f6:	e7bc      	b.n	8010472 <__sflush_r+0x1a>
 80104f8:	2301      	movs	r3, #1
 80104fa:	0028      	movs	r0, r5
 80104fc:	47b8      	blx	r7
 80104fe:	1c43      	adds	r3, r0, #1
 8010500:	d1c6      	bne.n	8010490 <__sflush_r+0x38>
 8010502:	682b      	ldr	r3, [r5, #0]
 8010504:	2b00      	cmp	r3, #0
 8010506:	d0c3      	beq.n	8010490 <__sflush_r+0x38>
 8010508:	2b1d      	cmp	r3, #29
 801050a:	d001      	beq.n	8010510 <__sflush_r+0xb8>
 801050c:	2b16      	cmp	r3, #22
 801050e:	d101      	bne.n	8010514 <__sflush_r+0xbc>
 8010510:	602e      	str	r6, [r5, #0]
 8010512:	e7ad      	b.n	8010470 <__sflush_r+0x18>
 8010514:	89a2      	ldrh	r2, [r4, #12]
 8010516:	2340      	movs	r3, #64	; 0x40
 8010518:	4313      	orrs	r3, r2
 801051a:	81a3      	strh	r3, [r4, #12]
 801051c:	e7a9      	b.n	8010472 <__sflush_r+0x1a>
 801051e:	690e      	ldr	r6, [r1, #16]
 8010520:	2e00      	cmp	r6, #0
 8010522:	d0a5      	beq.n	8010470 <__sflush_r+0x18>
 8010524:	680f      	ldr	r7, [r1, #0]
 8010526:	600e      	str	r6, [r1, #0]
 8010528:	1bba      	subs	r2, r7, r6
 801052a:	9201      	str	r2, [sp, #4]
 801052c:	2200      	movs	r2, #0
 801052e:	079b      	lsls	r3, r3, #30
 8010530:	d100      	bne.n	8010534 <__sflush_r+0xdc>
 8010532:	694a      	ldr	r2, [r1, #20]
 8010534:	60a2      	str	r2, [r4, #8]
 8010536:	9b01      	ldr	r3, [sp, #4]
 8010538:	2b00      	cmp	r3, #0
 801053a:	dd99      	ble.n	8010470 <__sflush_r+0x18>
 801053c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801053e:	0032      	movs	r2, r6
 8010540:	001f      	movs	r7, r3
 8010542:	0028      	movs	r0, r5
 8010544:	9b01      	ldr	r3, [sp, #4]
 8010546:	6a21      	ldr	r1, [r4, #32]
 8010548:	47b8      	blx	r7
 801054a:	2800      	cmp	r0, #0
 801054c:	dc06      	bgt.n	801055c <__sflush_r+0x104>
 801054e:	2340      	movs	r3, #64	; 0x40
 8010550:	2001      	movs	r0, #1
 8010552:	89a2      	ldrh	r2, [r4, #12]
 8010554:	4240      	negs	r0, r0
 8010556:	4313      	orrs	r3, r2
 8010558:	81a3      	strh	r3, [r4, #12]
 801055a:	e78a      	b.n	8010472 <__sflush_r+0x1a>
 801055c:	9b01      	ldr	r3, [sp, #4]
 801055e:	1836      	adds	r6, r6, r0
 8010560:	1a1b      	subs	r3, r3, r0
 8010562:	9301      	str	r3, [sp, #4]
 8010564:	e7e7      	b.n	8010536 <__sflush_r+0xde>
 8010566:	46c0      	nop			; (mov r8, r8)
 8010568:	dfbffffe 	.word	0xdfbffffe

0801056c <_fflush_r>:
 801056c:	690b      	ldr	r3, [r1, #16]
 801056e:	b570      	push	{r4, r5, r6, lr}
 8010570:	0005      	movs	r5, r0
 8010572:	000c      	movs	r4, r1
 8010574:	2b00      	cmp	r3, #0
 8010576:	d102      	bne.n	801057e <_fflush_r+0x12>
 8010578:	2500      	movs	r5, #0
 801057a:	0028      	movs	r0, r5
 801057c:	bd70      	pop	{r4, r5, r6, pc}
 801057e:	2800      	cmp	r0, #0
 8010580:	d004      	beq.n	801058c <_fflush_r+0x20>
 8010582:	6a03      	ldr	r3, [r0, #32]
 8010584:	2b00      	cmp	r3, #0
 8010586:	d101      	bne.n	801058c <_fflush_r+0x20>
 8010588:	f7fd fb62 	bl	800dc50 <__sinit>
 801058c:	220c      	movs	r2, #12
 801058e:	5ea3      	ldrsh	r3, [r4, r2]
 8010590:	2b00      	cmp	r3, #0
 8010592:	d0f1      	beq.n	8010578 <_fflush_r+0xc>
 8010594:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8010596:	07d2      	lsls	r2, r2, #31
 8010598:	d404      	bmi.n	80105a4 <_fflush_r+0x38>
 801059a:	059b      	lsls	r3, r3, #22
 801059c:	d402      	bmi.n	80105a4 <_fflush_r+0x38>
 801059e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105a0:	f7fd fd4b 	bl	800e03a <__retarget_lock_acquire_recursive>
 80105a4:	0028      	movs	r0, r5
 80105a6:	0021      	movs	r1, r4
 80105a8:	f7ff ff56 	bl	8010458 <__sflush_r>
 80105ac:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80105ae:	0005      	movs	r5, r0
 80105b0:	07db      	lsls	r3, r3, #31
 80105b2:	d4e2      	bmi.n	801057a <_fflush_r+0xe>
 80105b4:	89a3      	ldrh	r3, [r4, #12]
 80105b6:	059b      	lsls	r3, r3, #22
 80105b8:	d4df      	bmi.n	801057a <_fflush_r+0xe>
 80105ba:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80105bc:	f7fd fd3e 	bl	800e03c <__retarget_lock_release_recursive>
 80105c0:	e7db      	b.n	801057a <_fflush_r+0xe>
	...

080105c4 <fiprintf>:
 80105c4:	b40e      	push	{r1, r2, r3}
 80105c6:	b517      	push	{r0, r1, r2, r4, lr}
 80105c8:	4c05      	ldr	r4, [pc, #20]	; (80105e0 <fiprintf+0x1c>)
 80105ca:	ab05      	add	r3, sp, #20
 80105cc:	cb04      	ldmia	r3!, {r2}
 80105ce:	0001      	movs	r1, r0
 80105d0:	6820      	ldr	r0, [r4, #0]
 80105d2:	9301      	str	r3, [sp, #4]
 80105d4:	f7ff fe24 	bl	8010220 <_vfiprintf_r>
 80105d8:	bc1e      	pop	{r1, r2, r3, r4}
 80105da:	bc08      	pop	{r3}
 80105dc:	b003      	add	sp, #12
 80105de:	4718      	bx	r3
 80105e0:	200001e0 	.word	0x200001e0

080105e4 <__swbuf_r>:
 80105e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80105e6:	0006      	movs	r6, r0
 80105e8:	000d      	movs	r5, r1
 80105ea:	0014      	movs	r4, r2
 80105ec:	2800      	cmp	r0, #0
 80105ee:	d004      	beq.n	80105fa <__swbuf_r+0x16>
 80105f0:	6a03      	ldr	r3, [r0, #32]
 80105f2:	2b00      	cmp	r3, #0
 80105f4:	d101      	bne.n	80105fa <__swbuf_r+0x16>
 80105f6:	f7fd fb2b 	bl	800dc50 <__sinit>
 80105fa:	69a3      	ldr	r3, [r4, #24]
 80105fc:	60a3      	str	r3, [r4, #8]
 80105fe:	89a3      	ldrh	r3, [r4, #12]
 8010600:	071b      	lsls	r3, r3, #28
 8010602:	d528      	bpl.n	8010656 <__swbuf_r+0x72>
 8010604:	6923      	ldr	r3, [r4, #16]
 8010606:	2b00      	cmp	r3, #0
 8010608:	d025      	beq.n	8010656 <__swbuf_r+0x72>
 801060a:	6923      	ldr	r3, [r4, #16]
 801060c:	6820      	ldr	r0, [r4, #0]
 801060e:	b2ef      	uxtb	r7, r5
 8010610:	1ac0      	subs	r0, r0, r3
 8010612:	6963      	ldr	r3, [r4, #20]
 8010614:	b2ed      	uxtb	r5, r5
 8010616:	4283      	cmp	r3, r0
 8010618:	dc05      	bgt.n	8010626 <__swbuf_r+0x42>
 801061a:	0021      	movs	r1, r4
 801061c:	0030      	movs	r0, r6
 801061e:	f7ff ffa5 	bl	801056c <_fflush_r>
 8010622:	2800      	cmp	r0, #0
 8010624:	d11d      	bne.n	8010662 <__swbuf_r+0x7e>
 8010626:	68a3      	ldr	r3, [r4, #8]
 8010628:	3001      	adds	r0, #1
 801062a:	3b01      	subs	r3, #1
 801062c:	60a3      	str	r3, [r4, #8]
 801062e:	6823      	ldr	r3, [r4, #0]
 8010630:	1c5a      	adds	r2, r3, #1
 8010632:	6022      	str	r2, [r4, #0]
 8010634:	701f      	strb	r7, [r3, #0]
 8010636:	6963      	ldr	r3, [r4, #20]
 8010638:	4283      	cmp	r3, r0
 801063a:	d004      	beq.n	8010646 <__swbuf_r+0x62>
 801063c:	89a3      	ldrh	r3, [r4, #12]
 801063e:	07db      	lsls	r3, r3, #31
 8010640:	d507      	bpl.n	8010652 <__swbuf_r+0x6e>
 8010642:	2d0a      	cmp	r5, #10
 8010644:	d105      	bne.n	8010652 <__swbuf_r+0x6e>
 8010646:	0021      	movs	r1, r4
 8010648:	0030      	movs	r0, r6
 801064a:	f7ff ff8f 	bl	801056c <_fflush_r>
 801064e:	2800      	cmp	r0, #0
 8010650:	d107      	bne.n	8010662 <__swbuf_r+0x7e>
 8010652:	0028      	movs	r0, r5
 8010654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010656:	0021      	movs	r1, r4
 8010658:	0030      	movs	r0, r6
 801065a:	f000 f805 	bl	8010668 <__swsetup_r>
 801065e:	2800      	cmp	r0, #0
 8010660:	d0d3      	beq.n	801060a <__swbuf_r+0x26>
 8010662:	2501      	movs	r5, #1
 8010664:	426d      	negs	r5, r5
 8010666:	e7f4      	b.n	8010652 <__swbuf_r+0x6e>

08010668 <__swsetup_r>:
 8010668:	4b30      	ldr	r3, [pc, #192]	; (801072c <__swsetup_r+0xc4>)
 801066a:	b570      	push	{r4, r5, r6, lr}
 801066c:	0005      	movs	r5, r0
 801066e:	6818      	ldr	r0, [r3, #0]
 8010670:	000c      	movs	r4, r1
 8010672:	2800      	cmp	r0, #0
 8010674:	d004      	beq.n	8010680 <__swsetup_r+0x18>
 8010676:	6a03      	ldr	r3, [r0, #32]
 8010678:	2b00      	cmp	r3, #0
 801067a:	d101      	bne.n	8010680 <__swsetup_r+0x18>
 801067c:	f7fd fae8 	bl	800dc50 <__sinit>
 8010680:	230c      	movs	r3, #12
 8010682:	5ee2      	ldrsh	r2, [r4, r3]
 8010684:	b293      	uxth	r3, r2
 8010686:	0711      	lsls	r1, r2, #28
 8010688:	d423      	bmi.n	80106d2 <__swsetup_r+0x6a>
 801068a:	06d9      	lsls	r1, r3, #27
 801068c:	d407      	bmi.n	801069e <__swsetup_r+0x36>
 801068e:	2309      	movs	r3, #9
 8010690:	2001      	movs	r0, #1
 8010692:	602b      	str	r3, [r5, #0]
 8010694:	3337      	adds	r3, #55	; 0x37
 8010696:	4313      	orrs	r3, r2
 8010698:	81a3      	strh	r3, [r4, #12]
 801069a:	4240      	negs	r0, r0
 801069c:	bd70      	pop	{r4, r5, r6, pc}
 801069e:	075b      	lsls	r3, r3, #29
 80106a0:	d513      	bpl.n	80106ca <__swsetup_r+0x62>
 80106a2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80106a4:	2900      	cmp	r1, #0
 80106a6:	d008      	beq.n	80106ba <__swsetup_r+0x52>
 80106a8:	0023      	movs	r3, r4
 80106aa:	3344      	adds	r3, #68	; 0x44
 80106ac:	4299      	cmp	r1, r3
 80106ae:	d002      	beq.n	80106b6 <__swsetup_r+0x4e>
 80106b0:	0028      	movs	r0, r5
 80106b2:	f7fe fba3 	bl	800edfc <_free_r>
 80106b6:	2300      	movs	r3, #0
 80106b8:	6363      	str	r3, [r4, #52]	; 0x34
 80106ba:	2224      	movs	r2, #36	; 0x24
 80106bc:	89a3      	ldrh	r3, [r4, #12]
 80106be:	4393      	bics	r3, r2
 80106c0:	81a3      	strh	r3, [r4, #12]
 80106c2:	2300      	movs	r3, #0
 80106c4:	6063      	str	r3, [r4, #4]
 80106c6:	6923      	ldr	r3, [r4, #16]
 80106c8:	6023      	str	r3, [r4, #0]
 80106ca:	2308      	movs	r3, #8
 80106cc:	89a2      	ldrh	r2, [r4, #12]
 80106ce:	4313      	orrs	r3, r2
 80106d0:	81a3      	strh	r3, [r4, #12]
 80106d2:	6923      	ldr	r3, [r4, #16]
 80106d4:	2b00      	cmp	r3, #0
 80106d6:	d10b      	bne.n	80106f0 <__swsetup_r+0x88>
 80106d8:	21a0      	movs	r1, #160	; 0xa0
 80106da:	2280      	movs	r2, #128	; 0x80
 80106dc:	89a3      	ldrh	r3, [r4, #12]
 80106de:	0089      	lsls	r1, r1, #2
 80106e0:	0092      	lsls	r2, r2, #2
 80106e2:	400b      	ands	r3, r1
 80106e4:	4293      	cmp	r3, r2
 80106e6:	d003      	beq.n	80106f0 <__swsetup_r+0x88>
 80106e8:	0021      	movs	r1, r4
 80106ea:	0028      	movs	r0, r5
 80106ec:	f000 f890 	bl	8010810 <__smakebuf_r>
 80106f0:	220c      	movs	r2, #12
 80106f2:	5ea3      	ldrsh	r3, [r4, r2]
 80106f4:	2001      	movs	r0, #1
 80106f6:	001a      	movs	r2, r3
 80106f8:	b299      	uxth	r1, r3
 80106fa:	4002      	ands	r2, r0
 80106fc:	4203      	tst	r3, r0
 80106fe:	d00f      	beq.n	8010720 <__swsetup_r+0xb8>
 8010700:	2200      	movs	r2, #0
 8010702:	60a2      	str	r2, [r4, #8]
 8010704:	6962      	ldr	r2, [r4, #20]
 8010706:	4252      	negs	r2, r2
 8010708:	61a2      	str	r2, [r4, #24]
 801070a:	2000      	movs	r0, #0
 801070c:	6922      	ldr	r2, [r4, #16]
 801070e:	4282      	cmp	r2, r0
 8010710:	d1c4      	bne.n	801069c <__swsetup_r+0x34>
 8010712:	0609      	lsls	r1, r1, #24
 8010714:	d5c2      	bpl.n	801069c <__swsetup_r+0x34>
 8010716:	2240      	movs	r2, #64	; 0x40
 8010718:	4313      	orrs	r3, r2
 801071a:	81a3      	strh	r3, [r4, #12]
 801071c:	3801      	subs	r0, #1
 801071e:	e7bd      	b.n	801069c <__swsetup_r+0x34>
 8010720:	0788      	lsls	r0, r1, #30
 8010722:	d400      	bmi.n	8010726 <__swsetup_r+0xbe>
 8010724:	6962      	ldr	r2, [r4, #20]
 8010726:	60a2      	str	r2, [r4, #8]
 8010728:	e7ef      	b.n	801070a <__swsetup_r+0xa2>
 801072a:	46c0      	nop			; (mov r8, r8)
 801072c:	200001e0 	.word	0x200001e0

08010730 <memmove>:
 8010730:	b510      	push	{r4, lr}
 8010732:	4288      	cmp	r0, r1
 8010734:	d902      	bls.n	801073c <memmove+0xc>
 8010736:	188b      	adds	r3, r1, r2
 8010738:	4298      	cmp	r0, r3
 801073a:	d303      	bcc.n	8010744 <memmove+0x14>
 801073c:	2300      	movs	r3, #0
 801073e:	e007      	b.n	8010750 <memmove+0x20>
 8010740:	5c8b      	ldrb	r3, [r1, r2]
 8010742:	5483      	strb	r3, [r0, r2]
 8010744:	3a01      	subs	r2, #1
 8010746:	d2fb      	bcs.n	8010740 <memmove+0x10>
 8010748:	bd10      	pop	{r4, pc}
 801074a:	5ccc      	ldrb	r4, [r1, r3]
 801074c:	54c4      	strb	r4, [r0, r3]
 801074e:	3301      	adds	r3, #1
 8010750:	429a      	cmp	r2, r3
 8010752:	d1fa      	bne.n	801074a <memmove+0x1a>
 8010754:	e7f8      	b.n	8010748 <memmove+0x18>

08010756 <abort>:
 8010756:	2006      	movs	r0, #6
 8010758:	b510      	push	{r4, lr}
 801075a:	f000 f8c1 	bl	80108e0 <raise>
 801075e:	2001      	movs	r0, #1
 8010760:	f7f5 fb00 	bl	8005d64 <_exit>

08010764 <_calloc_r>:
 8010764:	b570      	push	{r4, r5, r6, lr}
 8010766:	0c0b      	lsrs	r3, r1, #16
 8010768:	0c15      	lsrs	r5, r2, #16
 801076a:	2b00      	cmp	r3, #0
 801076c:	d11e      	bne.n	80107ac <_calloc_r+0x48>
 801076e:	2d00      	cmp	r5, #0
 8010770:	d10c      	bne.n	801078c <_calloc_r+0x28>
 8010772:	b289      	uxth	r1, r1
 8010774:	b294      	uxth	r4, r2
 8010776:	434c      	muls	r4, r1
 8010778:	0021      	movs	r1, r4
 801077a:	f7fb fdcd 	bl	800c318 <_malloc_r>
 801077e:	1e05      	subs	r5, r0, #0
 8010780:	d01b      	beq.n	80107ba <_calloc_r+0x56>
 8010782:	0022      	movs	r2, r4
 8010784:	2100      	movs	r1, #0
 8010786:	f7fd fb13 	bl	800ddb0 <memset>
 801078a:	e016      	b.n	80107ba <_calloc_r+0x56>
 801078c:	1c2b      	adds	r3, r5, #0
 801078e:	1c0c      	adds	r4, r1, #0
 8010790:	b289      	uxth	r1, r1
 8010792:	b292      	uxth	r2, r2
 8010794:	434a      	muls	r2, r1
 8010796:	b2a1      	uxth	r1, r4
 8010798:	b29c      	uxth	r4, r3
 801079a:	434c      	muls	r4, r1
 801079c:	0c13      	lsrs	r3, r2, #16
 801079e:	18e4      	adds	r4, r4, r3
 80107a0:	0c23      	lsrs	r3, r4, #16
 80107a2:	d107      	bne.n	80107b4 <_calloc_r+0x50>
 80107a4:	0424      	lsls	r4, r4, #16
 80107a6:	b292      	uxth	r2, r2
 80107a8:	4314      	orrs	r4, r2
 80107aa:	e7e5      	b.n	8010778 <_calloc_r+0x14>
 80107ac:	2d00      	cmp	r5, #0
 80107ae:	d101      	bne.n	80107b4 <_calloc_r+0x50>
 80107b0:	1c14      	adds	r4, r2, #0
 80107b2:	e7ed      	b.n	8010790 <_calloc_r+0x2c>
 80107b4:	230c      	movs	r3, #12
 80107b6:	2500      	movs	r5, #0
 80107b8:	6003      	str	r3, [r0, #0]
 80107ba:	0028      	movs	r0, r5
 80107bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080107c0 <__swhatbuf_r>:
 80107c0:	b570      	push	{r4, r5, r6, lr}
 80107c2:	000e      	movs	r6, r1
 80107c4:	001d      	movs	r5, r3
 80107c6:	230e      	movs	r3, #14
 80107c8:	5ec9      	ldrsh	r1, [r1, r3]
 80107ca:	0014      	movs	r4, r2
 80107cc:	b096      	sub	sp, #88	; 0x58
 80107ce:	2900      	cmp	r1, #0
 80107d0:	da0c      	bge.n	80107ec <__swhatbuf_r+0x2c>
 80107d2:	89b2      	ldrh	r2, [r6, #12]
 80107d4:	2380      	movs	r3, #128	; 0x80
 80107d6:	0011      	movs	r1, r2
 80107d8:	4019      	ands	r1, r3
 80107da:	421a      	tst	r2, r3
 80107dc:	d013      	beq.n	8010806 <__swhatbuf_r+0x46>
 80107de:	2100      	movs	r1, #0
 80107e0:	3b40      	subs	r3, #64	; 0x40
 80107e2:	2000      	movs	r0, #0
 80107e4:	6029      	str	r1, [r5, #0]
 80107e6:	6023      	str	r3, [r4, #0]
 80107e8:	b016      	add	sp, #88	; 0x58
 80107ea:	bd70      	pop	{r4, r5, r6, pc}
 80107ec:	466a      	mov	r2, sp
 80107ee:	f000 f881 	bl	80108f4 <_fstat_r>
 80107f2:	2800      	cmp	r0, #0
 80107f4:	dbed      	blt.n	80107d2 <__swhatbuf_r+0x12>
 80107f6:	23f0      	movs	r3, #240	; 0xf0
 80107f8:	9901      	ldr	r1, [sp, #4]
 80107fa:	021b      	lsls	r3, r3, #8
 80107fc:	4019      	ands	r1, r3
 80107fe:	4b03      	ldr	r3, [pc, #12]	; (801080c <__swhatbuf_r+0x4c>)
 8010800:	18c9      	adds	r1, r1, r3
 8010802:	424b      	negs	r3, r1
 8010804:	4159      	adcs	r1, r3
 8010806:	2380      	movs	r3, #128	; 0x80
 8010808:	00db      	lsls	r3, r3, #3
 801080a:	e7ea      	b.n	80107e2 <__swhatbuf_r+0x22>
 801080c:	ffffe000 	.word	0xffffe000

08010810 <__smakebuf_r>:
 8010810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8010812:	2602      	movs	r6, #2
 8010814:	898b      	ldrh	r3, [r1, #12]
 8010816:	0005      	movs	r5, r0
 8010818:	000c      	movs	r4, r1
 801081a:	4233      	tst	r3, r6
 801081c:	d006      	beq.n	801082c <__smakebuf_r+0x1c>
 801081e:	0023      	movs	r3, r4
 8010820:	3347      	adds	r3, #71	; 0x47
 8010822:	6023      	str	r3, [r4, #0]
 8010824:	6123      	str	r3, [r4, #16]
 8010826:	2301      	movs	r3, #1
 8010828:	6163      	str	r3, [r4, #20]
 801082a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 801082c:	466a      	mov	r2, sp
 801082e:	ab01      	add	r3, sp, #4
 8010830:	f7ff ffc6 	bl	80107c0 <__swhatbuf_r>
 8010834:	9900      	ldr	r1, [sp, #0]
 8010836:	0007      	movs	r7, r0
 8010838:	0028      	movs	r0, r5
 801083a:	f7fb fd6d 	bl	800c318 <_malloc_r>
 801083e:	2800      	cmp	r0, #0
 8010840:	d108      	bne.n	8010854 <__smakebuf_r+0x44>
 8010842:	220c      	movs	r2, #12
 8010844:	5ea3      	ldrsh	r3, [r4, r2]
 8010846:	059a      	lsls	r2, r3, #22
 8010848:	d4ef      	bmi.n	801082a <__smakebuf_r+0x1a>
 801084a:	2203      	movs	r2, #3
 801084c:	4393      	bics	r3, r2
 801084e:	431e      	orrs	r6, r3
 8010850:	81a6      	strh	r6, [r4, #12]
 8010852:	e7e4      	b.n	801081e <__smakebuf_r+0xe>
 8010854:	2380      	movs	r3, #128	; 0x80
 8010856:	89a2      	ldrh	r2, [r4, #12]
 8010858:	6020      	str	r0, [r4, #0]
 801085a:	4313      	orrs	r3, r2
 801085c:	81a3      	strh	r3, [r4, #12]
 801085e:	9b00      	ldr	r3, [sp, #0]
 8010860:	6120      	str	r0, [r4, #16]
 8010862:	6163      	str	r3, [r4, #20]
 8010864:	9b01      	ldr	r3, [sp, #4]
 8010866:	2b00      	cmp	r3, #0
 8010868:	d00c      	beq.n	8010884 <__smakebuf_r+0x74>
 801086a:	0028      	movs	r0, r5
 801086c:	230e      	movs	r3, #14
 801086e:	5ee1      	ldrsh	r1, [r4, r3]
 8010870:	f000 f852 	bl	8010918 <_isatty_r>
 8010874:	2800      	cmp	r0, #0
 8010876:	d005      	beq.n	8010884 <__smakebuf_r+0x74>
 8010878:	2303      	movs	r3, #3
 801087a:	89a2      	ldrh	r2, [r4, #12]
 801087c:	439a      	bics	r2, r3
 801087e:	3b02      	subs	r3, #2
 8010880:	4313      	orrs	r3, r2
 8010882:	81a3      	strh	r3, [r4, #12]
 8010884:	89a3      	ldrh	r3, [r4, #12]
 8010886:	433b      	orrs	r3, r7
 8010888:	81a3      	strh	r3, [r4, #12]
 801088a:	e7ce      	b.n	801082a <__smakebuf_r+0x1a>

0801088c <_raise_r>:
 801088c:	b570      	push	{r4, r5, r6, lr}
 801088e:	0004      	movs	r4, r0
 8010890:	000d      	movs	r5, r1
 8010892:	291f      	cmp	r1, #31
 8010894:	d904      	bls.n	80108a0 <_raise_r+0x14>
 8010896:	2316      	movs	r3, #22
 8010898:	6003      	str	r3, [r0, #0]
 801089a:	2001      	movs	r0, #1
 801089c:	4240      	negs	r0, r0
 801089e:	bd70      	pop	{r4, r5, r6, pc}
 80108a0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 80108a2:	2b00      	cmp	r3, #0
 80108a4:	d004      	beq.n	80108b0 <_raise_r+0x24>
 80108a6:	008a      	lsls	r2, r1, #2
 80108a8:	189b      	adds	r3, r3, r2
 80108aa:	681a      	ldr	r2, [r3, #0]
 80108ac:	2a00      	cmp	r2, #0
 80108ae:	d108      	bne.n	80108c2 <_raise_r+0x36>
 80108b0:	0020      	movs	r0, r4
 80108b2:	f000 f855 	bl	8010960 <_getpid_r>
 80108b6:	002a      	movs	r2, r5
 80108b8:	0001      	movs	r1, r0
 80108ba:	0020      	movs	r0, r4
 80108bc:	f000 f83e 	bl	801093c <_kill_r>
 80108c0:	e7ed      	b.n	801089e <_raise_r+0x12>
 80108c2:	2000      	movs	r0, #0
 80108c4:	2a01      	cmp	r2, #1
 80108c6:	d0ea      	beq.n	801089e <_raise_r+0x12>
 80108c8:	1c51      	adds	r1, r2, #1
 80108ca:	d103      	bne.n	80108d4 <_raise_r+0x48>
 80108cc:	2316      	movs	r3, #22
 80108ce:	3001      	adds	r0, #1
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	e7e4      	b.n	801089e <_raise_r+0x12>
 80108d4:	2400      	movs	r4, #0
 80108d6:	0028      	movs	r0, r5
 80108d8:	601c      	str	r4, [r3, #0]
 80108da:	4790      	blx	r2
 80108dc:	0020      	movs	r0, r4
 80108de:	e7de      	b.n	801089e <_raise_r+0x12>

080108e0 <raise>:
 80108e0:	b510      	push	{r4, lr}
 80108e2:	4b03      	ldr	r3, [pc, #12]	; (80108f0 <raise+0x10>)
 80108e4:	0001      	movs	r1, r0
 80108e6:	6818      	ldr	r0, [r3, #0]
 80108e8:	f7ff ffd0 	bl	801088c <_raise_r>
 80108ec:	bd10      	pop	{r4, pc}
 80108ee:	46c0      	nop			; (mov r8, r8)
 80108f0:	200001e0 	.word	0x200001e0

080108f4 <_fstat_r>:
 80108f4:	2300      	movs	r3, #0
 80108f6:	b570      	push	{r4, r5, r6, lr}
 80108f8:	4d06      	ldr	r5, [pc, #24]	; (8010914 <_fstat_r+0x20>)
 80108fa:	0004      	movs	r4, r0
 80108fc:	0008      	movs	r0, r1
 80108fe:	0011      	movs	r1, r2
 8010900:	602b      	str	r3, [r5, #0]
 8010902:	f7f5 fa7e 	bl	8005e02 <_fstat>
 8010906:	1c43      	adds	r3, r0, #1
 8010908:	d103      	bne.n	8010912 <_fstat_r+0x1e>
 801090a:	682b      	ldr	r3, [r5, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d000      	beq.n	8010912 <_fstat_r+0x1e>
 8010910:	6023      	str	r3, [r4, #0]
 8010912:	bd70      	pop	{r4, r5, r6, pc}
 8010914:	20003cdc 	.word	0x20003cdc

08010918 <_isatty_r>:
 8010918:	2300      	movs	r3, #0
 801091a:	b570      	push	{r4, r5, r6, lr}
 801091c:	4d06      	ldr	r5, [pc, #24]	; (8010938 <_isatty_r+0x20>)
 801091e:	0004      	movs	r4, r0
 8010920:	0008      	movs	r0, r1
 8010922:	602b      	str	r3, [r5, #0]
 8010924:	f7f5 fa7b 	bl	8005e1e <_isatty>
 8010928:	1c43      	adds	r3, r0, #1
 801092a:	d103      	bne.n	8010934 <_isatty_r+0x1c>
 801092c:	682b      	ldr	r3, [r5, #0]
 801092e:	2b00      	cmp	r3, #0
 8010930:	d000      	beq.n	8010934 <_isatty_r+0x1c>
 8010932:	6023      	str	r3, [r4, #0]
 8010934:	bd70      	pop	{r4, r5, r6, pc}
 8010936:	46c0      	nop			; (mov r8, r8)
 8010938:	20003cdc 	.word	0x20003cdc

0801093c <_kill_r>:
 801093c:	2300      	movs	r3, #0
 801093e:	b570      	push	{r4, r5, r6, lr}
 8010940:	4d06      	ldr	r5, [pc, #24]	; (801095c <_kill_r+0x20>)
 8010942:	0004      	movs	r4, r0
 8010944:	0008      	movs	r0, r1
 8010946:	0011      	movs	r1, r2
 8010948:	602b      	str	r3, [r5, #0]
 801094a:	f7f5 f9fb 	bl	8005d44 <_kill>
 801094e:	1c43      	adds	r3, r0, #1
 8010950:	d103      	bne.n	801095a <_kill_r+0x1e>
 8010952:	682b      	ldr	r3, [r5, #0]
 8010954:	2b00      	cmp	r3, #0
 8010956:	d000      	beq.n	801095a <_kill_r+0x1e>
 8010958:	6023      	str	r3, [r4, #0]
 801095a:	bd70      	pop	{r4, r5, r6, pc}
 801095c:	20003cdc 	.word	0x20003cdc

08010960 <_getpid_r>:
 8010960:	b510      	push	{r4, lr}
 8010962:	f7f5 f9e9 	bl	8005d38 <_getpid>
 8010966:	bd10      	pop	{r4, pc}

08010968 <_init>:
 8010968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801096a:	46c0      	nop			; (mov r8, r8)
 801096c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801096e:	bc08      	pop	{r3}
 8010970:	469e      	mov	lr, r3
 8010972:	4770      	bx	lr

08010974 <_fini>:
 8010974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010976:	46c0      	nop			; (mov r8, r8)
 8010978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801097a:	bc08      	pop	{r3}
 801097c:	469e      	mov	lr, r3
 801097e:	4770      	bx	lr
