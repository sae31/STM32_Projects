
STM32_Projects.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cfe0  080000c0  080000c0  000100c0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000d08  0800d0a0  0800d0a0  0001d0a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dda8  0800dda8  000201e4  2**0
                  CONTENTS
  4 .ARM          00000008  0800dda8  0800dda8  0001dda8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ddb0  0800ddb0  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ddb0  0800ddb0  0001ddb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ddb4  0800ddb4  0001ddb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  0800ddb8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001760  200001e8  0800df9c  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000700  20001948  0800df9c  00021948  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002020c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a6e8  00000000  00000000  0002024f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003edb  00000000  00000000  0003a937  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001890  00000000  00000000  0003e818  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000135d  00000000  00000000  000400a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c9e1  00000000  00000000  00041405  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001cab6  00000000  00000000  0005dde6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ae116  00000000  00000000  0007a89c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00006d4c  00000000  00000000  001289b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006a  00000000  00000000  0012f700  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	200001e8 	.word	0x200001e8
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0800d088 	.word	0x0800d088

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200001ec 	.word	0x200001ec
 8000104:	0800d088 	.word	0x0800d088

08000108 <strlen>:
 8000108:	2300      	movs	r3, #0
 800010a:	5cc2      	ldrb	r2, [r0, r3]
 800010c:	3301      	adds	r3, #1
 800010e:	2a00      	cmp	r2, #0
 8000110:	d1fb      	bne.n	800010a <strlen+0x2>
 8000112:	1e58      	subs	r0, r3, #1
 8000114:	4770      	bx	lr
	...

08000118 <__gnu_thumb1_case_uqi>:
 8000118:	b402      	push	{r1}
 800011a:	4671      	mov	r1, lr
 800011c:	0849      	lsrs	r1, r1, #1
 800011e:	0049      	lsls	r1, r1, #1
 8000120:	5c09      	ldrb	r1, [r1, r0]
 8000122:	0049      	lsls	r1, r1, #1
 8000124:	448e      	add	lr, r1
 8000126:	bc02      	pop	{r1}
 8000128:	4770      	bx	lr
 800012a:	46c0      	nop			; (mov r8, r8)

0800012c <__gnu_thumb1_case_shi>:
 800012c:	b403      	push	{r0, r1}
 800012e:	4671      	mov	r1, lr
 8000130:	0849      	lsrs	r1, r1, #1
 8000132:	0040      	lsls	r0, r0, #1
 8000134:	0049      	lsls	r1, r1, #1
 8000136:	5e09      	ldrsh	r1, [r1, r0]
 8000138:	0049      	lsls	r1, r1, #1
 800013a:	448e      	add	lr, r1
 800013c:	bc03      	pop	{r0, r1}
 800013e:	4770      	bx	lr

08000140 <__udivsi3>:
 8000140:	2200      	movs	r2, #0
 8000142:	0843      	lsrs	r3, r0, #1
 8000144:	428b      	cmp	r3, r1
 8000146:	d374      	bcc.n	8000232 <__udivsi3+0xf2>
 8000148:	0903      	lsrs	r3, r0, #4
 800014a:	428b      	cmp	r3, r1
 800014c:	d35f      	bcc.n	800020e <__udivsi3+0xce>
 800014e:	0a03      	lsrs	r3, r0, #8
 8000150:	428b      	cmp	r3, r1
 8000152:	d344      	bcc.n	80001de <__udivsi3+0x9e>
 8000154:	0b03      	lsrs	r3, r0, #12
 8000156:	428b      	cmp	r3, r1
 8000158:	d328      	bcc.n	80001ac <__udivsi3+0x6c>
 800015a:	0c03      	lsrs	r3, r0, #16
 800015c:	428b      	cmp	r3, r1
 800015e:	d30d      	bcc.n	800017c <__udivsi3+0x3c>
 8000160:	22ff      	movs	r2, #255	; 0xff
 8000162:	0209      	lsls	r1, r1, #8
 8000164:	ba12      	rev	r2, r2
 8000166:	0c03      	lsrs	r3, r0, #16
 8000168:	428b      	cmp	r3, r1
 800016a:	d302      	bcc.n	8000172 <__udivsi3+0x32>
 800016c:	1212      	asrs	r2, r2, #8
 800016e:	0209      	lsls	r1, r1, #8
 8000170:	d065      	beq.n	800023e <__udivsi3+0xfe>
 8000172:	0b03      	lsrs	r3, r0, #12
 8000174:	428b      	cmp	r3, r1
 8000176:	d319      	bcc.n	80001ac <__udivsi3+0x6c>
 8000178:	e000      	b.n	800017c <__udivsi3+0x3c>
 800017a:	0a09      	lsrs	r1, r1, #8
 800017c:	0bc3      	lsrs	r3, r0, #15
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x46>
 8000182:	03cb      	lsls	r3, r1, #15
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0b83      	lsrs	r3, r0, #14
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x52>
 800018e:	038b      	lsls	r3, r1, #14
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0b43      	lsrs	r3, r0, #13
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x5e>
 800019a:	034b      	lsls	r3, r1, #13
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	0b03      	lsrs	r3, r0, #12
 80001a2:	428b      	cmp	r3, r1
 80001a4:	d301      	bcc.n	80001aa <__udivsi3+0x6a>
 80001a6:	030b      	lsls	r3, r1, #12
 80001a8:	1ac0      	subs	r0, r0, r3
 80001aa:	4152      	adcs	r2, r2
 80001ac:	0ac3      	lsrs	r3, r0, #11
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d301      	bcc.n	80001b6 <__udivsi3+0x76>
 80001b2:	02cb      	lsls	r3, r1, #11
 80001b4:	1ac0      	subs	r0, r0, r3
 80001b6:	4152      	adcs	r2, r2
 80001b8:	0a83      	lsrs	r3, r0, #10
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d301      	bcc.n	80001c2 <__udivsi3+0x82>
 80001be:	028b      	lsls	r3, r1, #10
 80001c0:	1ac0      	subs	r0, r0, r3
 80001c2:	4152      	adcs	r2, r2
 80001c4:	0a43      	lsrs	r3, r0, #9
 80001c6:	428b      	cmp	r3, r1
 80001c8:	d301      	bcc.n	80001ce <__udivsi3+0x8e>
 80001ca:	024b      	lsls	r3, r1, #9
 80001cc:	1ac0      	subs	r0, r0, r3
 80001ce:	4152      	adcs	r2, r2
 80001d0:	0a03      	lsrs	r3, r0, #8
 80001d2:	428b      	cmp	r3, r1
 80001d4:	d301      	bcc.n	80001da <__udivsi3+0x9a>
 80001d6:	020b      	lsls	r3, r1, #8
 80001d8:	1ac0      	subs	r0, r0, r3
 80001da:	4152      	adcs	r2, r2
 80001dc:	d2cd      	bcs.n	800017a <__udivsi3+0x3a>
 80001de:	09c3      	lsrs	r3, r0, #7
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xa8>
 80001e4:	01cb      	lsls	r3, r1, #7
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0983      	lsrs	r3, r0, #6
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xb4>
 80001f0:	018b      	lsls	r3, r1, #6
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	0943      	lsrs	r3, r0, #5
 80001f8:	428b      	cmp	r3, r1
 80001fa:	d301      	bcc.n	8000200 <__udivsi3+0xc0>
 80001fc:	014b      	lsls	r3, r1, #5
 80001fe:	1ac0      	subs	r0, r0, r3
 8000200:	4152      	adcs	r2, r2
 8000202:	0903      	lsrs	r3, r0, #4
 8000204:	428b      	cmp	r3, r1
 8000206:	d301      	bcc.n	800020c <__udivsi3+0xcc>
 8000208:	010b      	lsls	r3, r1, #4
 800020a:	1ac0      	subs	r0, r0, r3
 800020c:	4152      	adcs	r2, r2
 800020e:	08c3      	lsrs	r3, r0, #3
 8000210:	428b      	cmp	r3, r1
 8000212:	d301      	bcc.n	8000218 <__udivsi3+0xd8>
 8000214:	00cb      	lsls	r3, r1, #3
 8000216:	1ac0      	subs	r0, r0, r3
 8000218:	4152      	adcs	r2, r2
 800021a:	0883      	lsrs	r3, r0, #2
 800021c:	428b      	cmp	r3, r1
 800021e:	d301      	bcc.n	8000224 <__udivsi3+0xe4>
 8000220:	008b      	lsls	r3, r1, #2
 8000222:	1ac0      	subs	r0, r0, r3
 8000224:	4152      	adcs	r2, r2
 8000226:	0843      	lsrs	r3, r0, #1
 8000228:	428b      	cmp	r3, r1
 800022a:	d301      	bcc.n	8000230 <__udivsi3+0xf0>
 800022c:	004b      	lsls	r3, r1, #1
 800022e:	1ac0      	subs	r0, r0, r3
 8000230:	4152      	adcs	r2, r2
 8000232:	1a41      	subs	r1, r0, r1
 8000234:	d200      	bcs.n	8000238 <__udivsi3+0xf8>
 8000236:	4601      	mov	r1, r0
 8000238:	4152      	adcs	r2, r2
 800023a:	4610      	mov	r0, r2
 800023c:	4770      	bx	lr
 800023e:	e7ff      	b.n	8000240 <__udivsi3+0x100>
 8000240:	b501      	push	{r0, lr}
 8000242:	2000      	movs	r0, #0
 8000244:	f000 f8f0 	bl	8000428 <__aeabi_idiv0>
 8000248:	bd02      	pop	{r1, pc}
 800024a:	46c0      	nop			; (mov r8, r8)

0800024c <__aeabi_uidivmod>:
 800024c:	2900      	cmp	r1, #0
 800024e:	d0f7      	beq.n	8000240 <__udivsi3+0x100>
 8000250:	e776      	b.n	8000140 <__udivsi3>
 8000252:	4770      	bx	lr

08000254 <__divsi3>:
 8000254:	4603      	mov	r3, r0
 8000256:	430b      	orrs	r3, r1
 8000258:	d47f      	bmi.n	800035a <__divsi3+0x106>
 800025a:	2200      	movs	r2, #0
 800025c:	0843      	lsrs	r3, r0, #1
 800025e:	428b      	cmp	r3, r1
 8000260:	d374      	bcc.n	800034c <__divsi3+0xf8>
 8000262:	0903      	lsrs	r3, r0, #4
 8000264:	428b      	cmp	r3, r1
 8000266:	d35f      	bcc.n	8000328 <__divsi3+0xd4>
 8000268:	0a03      	lsrs	r3, r0, #8
 800026a:	428b      	cmp	r3, r1
 800026c:	d344      	bcc.n	80002f8 <__divsi3+0xa4>
 800026e:	0b03      	lsrs	r3, r0, #12
 8000270:	428b      	cmp	r3, r1
 8000272:	d328      	bcc.n	80002c6 <__divsi3+0x72>
 8000274:	0c03      	lsrs	r3, r0, #16
 8000276:	428b      	cmp	r3, r1
 8000278:	d30d      	bcc.n	8000296 <__divsi3+0x42>
 800027a:	22ff      	movs	r2, #255	; 0xff
 800027c:	0209      	lsls	r1, r1, #8
 800027e:	ba12      	rev	r2, r2
 8000280:	0c03      	lsrs	r3, r0, #16
 8000282:	428b      	cmp	r3, r1
 8000284:	d302      	bcc.n	800028c <__divsi3+0x38>
 8000286:	1212      	asrs	r2, r2, #8
 8000288:	0209      	lsls	r1, r1, #8
 800028a:	d065      	beq.n	8000358 <__divsi3+0x104>
 800028c:	0b03      	lsrs	r3, r0, #12
 800028e:	428b      	cmp	r3, r1
 8000290:	d319      	bcc.n	80002c6 <__divsi3+0x72>
 8000292:	e000      	b.n	8000296 <__divsi3+0x42>
 8000294:	0a09      	lsrs	r1, r1, #8
 8000296:	0bc3      	lsrs	r3, r0, #15
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x4c>
 800029c:	03cb      	lsls	r3, r1, #15
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0b83      	lsrs	r3, r0, #14
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x58>
 80002a8:	038b      	lsls	r3, r1, #14
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0b43      	lsrs	r3, r0, #13
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0x64>
 80002b4:	034b      	lsls	r3, r1, #13
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	0b03      	lsrs	r3, r0, #12
 80002bc:	428b      	cmp	r3, r1
 80002be:	d301      	bcc.n	80002c4 <__divsi3+0x70>
 80002c0:	030b      	lsls	r3, r1, #12
 80002c2:	1ac0      	subs	r0, r0, r3
 80002c4:	4152      	adcs	r2, r2
 80002c6:	0ac3      	lsrs	r3, r0, #11
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d301      	bcc.n	80002d0 <__divsi3+0x7c>
 80002cc:	02cb      	lsls	r3, r1, #11
 80002ce:	1ac0      	subs	r0, r0, r3
 80002d0:	4152      	adcs	r2, r2
 80002d2:	0a83      	lsrs	r3, r0, #10
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d301      	bcc.n	80002dc <__divsi3+0x88>
 80002d8:	028b      	lsls	r3, r1, #10
 80002da:	1ac0      	subs	r0, r0, r3
 80002dc:	4152      	adcs	r2, r2
 80002de:	0a43      	lsrs	r3, r0, #9
 80002e0:	428b      	cmp	r3, r1
 80002e2:	d301      	bcc.n	80002e8 <__divsi3+0x94>
 80002e4:	024b      	lsls	r3, r1, #9
 80002e6:	1ac0      	subs	r0, r0, r3
 80002e8:	4152      	adcs	r2, r2
 80002ea:	0a03      	lsrs	r3, r0, #8
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d301      	bcc.n	80002f4 <__divsi3+0xa0>
 80002f0:	020b      	lsls	r3, r1, #8
 80002f2:	1ac0      	subs	r0, r0, r3
 80002f4:	4152      	adcs	r2, r2
 80002f6:	d2cd      	bcs.n	8000294 <__divsi3+0x40>
 80002f8:	09c3      	lsrs	r3, r0, #7
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xae>
 80002fe:	01cb      	lsls	r3, r1, #7
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0983      	lsrs	r3, r0, #6
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xba>
 800030a:	018b      	lsls	r3, r1, #6
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	0943      	lsrs	r3, r0, #5
 8000312:	428b      	cmp	r3, r1
 8000314:	d301      	bcc.n	800031a <__divsi3+0xc6>
 8000316:	014b      	lsls	r3, r1, #5
 8000318:	1ac0      	subs	r0, r0, r3
 800031a:	4152      	adcs	r2, r2
 800031c:	0903      	lsrs	r3, r0, #4
 800031e:	428b      	cmp	r3, r1
 8000320:	d301      	bcc.n	8000326 <__divsi3+0xd2>
 8000322:	010b      	lsls	r3, r1, #4
 8000324:	1ac0      	subs	r0, r0, r3
 8000326:	4152      	adcs	r2, r2
 8000328:	08c3      	lsrs	r3, r0, #3
 800032a:	428b      	cmp	r3, r1
 800032c:	d301      	bcc.n	8000332 <__divsi3+0xde>
 800032e:	00cb      	lsls	r3, r1, #3
 8000330:	1ac0      	subs	r0, r0, r3
 8000332:	4152      	adcs	r2, r2
 8000334:	0883      	lsrs	r3, r0, #2
 8000336:	428b      	cmp	r3, r1
 8000338:	d301      	bcc.n	800033e <__divsi3+0xea>
 800033a:	008b      	lsls	r3, r1, #2
 800033c:	1ac0      	subs	r0, r0, r3
 800033e:	4152      	adcs	r2, r2
 8000340:	0843      	lsrs	r3, r0, #1
 8000342:	428b      	cmp	r3, r1
 8000344:	d301      	bcc.n	800034a <__divsi3+0xf6>
 8000346:	004b      	lsls	r3, r1, #1
 8000348:	1ac0      	subs	r0, r0, r3
 800034a:	4152      	adcs	r2, r2
 800034c:	1a41      	subs	r1, r0, r1
 800034e:	d200      	bcs.n	8000352 <__divsi3+0xfe>
 8000350:	4601      	mov	r1, r0
 8000352:	4152      	adcs	r2, r2
 8000354:	4610      	mov	r0, r2
 8000356:	4770      	bx	lr
 8000358:	e05d      	b.n	8000416 <__divsi3+0x1c2>
 800035a:	0fca      	lsrs	r2, r1, #31
 800035c:	d000      	beq.n	8000360 <__divsi3+0x10c>
 800035e:	4249      	negs	r1, r1
 8000360:	1003      	asrs	r3, r0, #32
 8000362:	d300      	bcc.n	8000366 <__divsi3+0x112>
 8000364:	4240      	negs	r0, r0
 8000366:	4053      	eors	r3, r2
 8000368:	2200      	movs	r2, #0
 800036a:	469c      	mov	ip, r3
 800036c:	0903      	lsrs	r3, r0, #4
 800036e:	428b      	cmp	r3, r1
 8000370:	d32d      	bcc.n	80003ce <__divsi3+0x17a>
 8000372:	0a03      	lsrs	r3, r0, #8
 8000374:	428b      	cmp	r3, r1
 8000376:	d312      	bcc.n	800039e <__divsi3+0x14a>
 8000378:	22fc      	movs	r2, #252	; 0xfc
 800037a:	0189      	lsls	r1, r1, #6
 800037c:	ba12      	rev	r2, r2
 800037e:	0a03      	lsrs	r3, r0, #8
 8000380:	428b      	cmp	r3, r1
 8000382:	d30c      	bcc.n	800039e <__divsi3+0x14a>
 8000384:	0189      	lsls	r1, r1, #6
 8000386:	1192      	asrs	r2, r2, #6
 8000388:	428b      	cmp	r3, r1
 800038a:	d308      	bcc.n	800039e <__divsi3+0x14a>
 800038c:	0189      	lsls	r1, r1, #6
 800038e:	1192      	asrs	r2, r2, #6
 8000390:	428b      	cmp	r3, r1
 8000392:	d304      	bcc.n	800039e <__divsi3+0x14a>
 8000394:	0189      	lsls	r1, r1, #6
 8000396:	d03a      	beq.n	800040e <__divsi3+0x1ba>
 8000398:	1192      	asrs	r2, r2, #6
 800039a:	e000      	b.n	800039e <__divsi3+0x14a>
 800039c:	0989      	lsrs	r1, r1, #6
 800039e:	09c3      	lsrs	r3, r0, #7
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x154>
 80003a4:	01cb      	lsls	r3, r1, #7
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	0983      	lsrs	r3, r0, #6
 80003ac:	428b      	cmp	r3, r1
 80003ae:	d301      	bcc.n	80003b4 <__divsi3+0x160>
 80003b0:	018b      	lsls	r3, r1, #6
 80003b2:	1ac0      	subs	r0, r0, r3
 80003b4:	4152      	adcs	r2, r2
 80003b6:	0943      	lsrs	r3, r0, #5
 80003b8:	428b      	cmp	r3, r1
 80003ba:	d301      	bcc.n	80003c0 <__divsi3+0x16c>
 80003bc:	014b      	lsls	r3, r1, #5
 80003be:	1ac0      	subs	r0, r0, r3
 80003c0:	4152      	adcs	r2, r2
 80003c2:	0903      	lsrs	r3, r0, #4
 80003c4:	428b      	cmp	r3, r1
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x178>
 80003c8:	010b      	lsls	r3, r1, #4
 80003ca:	1ac0      	subs	r0, r0, r3
 80003cc:	4152      	adcs	r2, r2
 80003ce:	08c3      	lsrs	r3, r0, #3
 80003d0:	428b      	cmp	r3, r1
 80003d2:	d301      	bcc.n	80003d8 <__divsi3+0x184>
 80003d4:	00cb      	lsls	r3, r1, #3
 80003d6:	1ac0      	subs	r0, r0, r3
 80003d8:	4152      	adcs	r2, r2
 80003da:	0883      	lsrs	r3, r0, #2
 80003dc:	428b      	cmp	r3, r1
 80003de:	d301      	bcc.n	80003e4 <__divsi3+0x190>
 80003e0:	008b      	lsls	r3, r1, #2
 80003e2:	1ac0      	subs	r0, r0, r3
 80003e4:	4152      	adcs	r2, r2
 80003e6:	d2d9      	bcs.n	800039c <__divsi3+0x148>
 80003e8:	0843      	lsrs	r3, r0, #1
 80003ea:	428b      	cmp	r3, r1
 80003ec:	d301      	bcc.n	80003f2 <__divsi3+0x19e>
 80003ee:	004b      	lsls	r3, r1, #1
 80003f0:	1ac0      	subs	r0, r0, r3
 80003f2:	4152      	adcs	r2, r2
 80003f4:	1a41      	subs	r1, r0, r1
 80003f6:	d200      	bcs.n	80003fa <__divsi3+0x1a6>
 80003f8:	4601      	mov	r1, r0
 80003fa:	4663      	mov	r3, ip
 80003fc:	4152      	adcs	r2, r2
 80003fe:	105b      	asrs	r3, r3, #1
 8000400:	4610      	mov	r0, r2
 8000402:	d301      	bcc.n	8000408 <__divsi3+0x1b4>
 8000404:	4240      	negs	r0, r0
 8000406:	2b00      	cmp	r3, #0
 8000408:	d500      	bpl.n	800040c <__divsi3+0x1b8>
 800040a:	4249      	negs	r1, r1
 800040c:	4770      	bx	lr
 800040e:	4663      	mov	r3, ip
 8000410:	105b      	asrs	r3, r3, #1
 8000412:	d300      	bcc.n	8000416 <__divsi3+0x1c2>
 8000414:	4240      	negs	r0, r0
 8000416:	b501      	push	{r0, lr}
 8000418:	2000      	movs	r0, #0
 800041a:	f000 f805 	bl	8000428 <__aeabi_idiv0>
 800041e:	bd02      	pop	{r1, pc}

08000420 <__aeabi_idivmod>:
 8000420:	2900      	cmp	r1, #0
 8000422:	d0f8      	beq.n	8000416 <__divsi3+0x1c2>
 8000424:	e716      	b.n	8000254 <__divsi3>
 8000426:	4770      	bx	lr

08000428 <__aeabi_idiv0>:
 8000428:	4770      	bx	lr
 800042a:	46c0      	nop			; (mov r8, r8)

0800042c <__aeabi_cdrcmple>:
 800042c:	4684      	mov	ip, r0
 800042e:	0010      	movs	r0, r2
 8000430:	4662      	mov	r2, ip
 8000432:	468c      	mov	ip, r1
 8000434:	0019      	movs	r1, r3
 8000436:	4663      	mov	r3, ip
 8000438:	e000      	b.n	800043c <__aeabi_cdcmpeq>
 800043a:	46c0      	nop			; (mov r8, r8)

0800043c <__aeabi_cdcmpeq>:
 800043c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800043e:	f001 f89b 	bl	8001578 <__ledf2>
 8000442:	2800      	cmp	r0, #0
 8000444:	d401      	bmi.n	800044a <__aeabi_cdcmpeq+0xe>
 8000446:	2100      	movs	r1, #0
 8000448:	42c8      	cmn	r0, r1
 800044a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

0800044c <__aeabi_dcmpeq>:
 800044c:	b510      	push	{r4, lr}
 800044e:	f000 ffeb 	bl	8001428 <__eqdf2>
 8000452:	4240      	negs	r0, r0
 8000454:	3001      	adds	r0, #1
 8000456:	bd10      	pop	{r4, pc}

08000458 <__aeabi_dcmplt>:
 8000458:	b510      	push	{r4, lr}
 800045a:	f001 f88d 	bl	8001578 <__ledf2>
 800045e:	2800      	cmp	r0, #0
 8000460:	db01      	blt.n	8000466 <__aeabi_dcmplt+0xe>
 8000462:	2000      	movs	r0, #0
 8000464:	bd10      	pop	{r4, pc}
 8000466:	2001      	movs	r0, #1
 8000468:	bd10      	pop	{r4, pc}
 800046a:	46c0      	nop			; (mov r8, r8)

0800046c <__aeabi_dcmple>:
 800046c:	b510      	push	{r4, lr}
 800046e:	f001 f883 	bl	8001578 <__ledf2>
 8000472:	2800      	cmp	r0, #0
 8000474:	dd01      	ble.n	800047a <__aeabi_dcmple+0xe>
 8000476:	2000      	movs	r0, #0
 8000478:	bd10      	pop	{r4, pc}
 800047a:	2001      	movs	r0, #1
 800047c:	bd10      	pop	{r4, pc}
 800047e:	46c0      	nop			; (mov r8, r8)

08000480 <__aeabi_dcmpgt>:
 8000480:	b510      	push	{r4, lr}
 8000482:	f001 f813 	bl	80014ac <__gedf2>
 8000486:	2800      	cmp	r0, #0
 8000488:	dc01      	bgt.n	800048e <__aeabi_dcmpgt+0xe>
 800048a:	2000      	movs	r0, #0
 800048c:	bd10      	pop	{r4, pc}
 800048e:	2001      	movs	r0, #1
 8000490:	bd10      	pop	{r4, pc}
 8000492:	46c0      	nop			; (mov r8, r8)

08000494 <__aeabi_dcmpge>:
 8000494:	b510      	push	{r4, lr}
 8000496:	f001 f809 	bl	80014ac <__gedf2>
 800049a:	2800      	cmp	r0, #0
 800049c:	da01      	bge.n	80004a2 <__aeabi_dcmpge+0xe>
 800049e:	2000      	movs	r0, #0
 80004a0:	bd10      	pop	{r4, pc}
 80004a2:	2001      	movs	r0, #1
 80004a4:	bd10      	pop	{r4, pc}
 80004a6:	46c0      	nop			; (mov r8, r8)

080004a8 <__aeabi_uldivmod>:
 80004a8:	2b00      	cmp	r3, #0
 80004aa:	d111      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004ac:	2a00      	cmp	r2, #0
 80004ae:	d10f      	bne.n	80004d0 <__aeabi_uldivmod+0x28>
 80004b0:	2900      	cmp	r1, #0
 80004b2:	d100      	bne.n	80004b6 <__aeabi_uldivmod+0xe>
 80004b4:	2800      	cmp	r0, #0
 80004b6:	d002      	beq.n	80004be <__aeabi_uldivmod+0x16>
 80004b8:	2100      	movs	r1, #0
 80004ba:	43c9      	mvns	r1, r1
 80004bc:	0008      	movs	r0, r1
 80004be:	b407      	push	{r0, r1, r2}
 80004c0:	4802      	ldr	r0, [pc, #8]	; (80004cc <__aeabi_uldivmod+0x24>)
 80004c2:	a102      	add	r1, pc, #8	; (adr r1, 80004cc <__aeabi_uldivmod+0x24>)
 80004c4:	1840      	adds	r0, r0, r1
 80004c6:	9002      	str	r0, [sp, #8]
 80004c8:	bd03      	pop	{r0, r1, pc}
 80004ca:	46c0      	nop			; (mov r8, r8)
 80004cc:	ffffff5d 	.word	0xffffff5d
 80004d0:	b403      	push	{r0, r1}
 80004d2:	4668      	mov	r0, sp
 80004d4:	b501      	push	{r0, lr}
 80004d6:	9802      	ldr	r0, [sp, #8]
 80004d8:	f000 f88c 	bl	80005f4 <__udivmoddi4>
 80004dc:	9b01      	ldr	r3, [sp, #4]
 80004de:	469e      	mov	lr, r3
 80004e0:	b002      	add	sp, #8
 80004e2:	bc0c      	pop	{r2, r3}
 80004e4:	4770      	bx	lr
 80004e6:	46c0      	nop			; (mov r8, r8)

080004e8 <__aeabi_d2uiz>:
 80004e8:	b570      	push	{r4, r5, r6, lr}
 80004ea:	2200      	movs	r2, #0
 80004ec:	4b0c      	ldr	r3, [pc, #48]	; (8000520 <__aeabi_d2uiz+0x38>)
 80004ee:	0004      	movs	r4, r0
 80004f0:	000d      	movs	r5, r1
 80004f2:	f7ff ffcf 	bl	8000494 <__aeabi_dcmpge>
 80004f6:	2800      	cmp	r0, #0
 80004f8:	d104      	bne.n	8000504 <__aeabi_d2uiz+0x1c>
 80004fa:	0020      	movs	r0, r4
 80004fc:	0029      	movs	r1, r5
 80004fe:	f001 ff01 	bl	8002304 <__aeabi_d2iz>
 8000502:	bd70      	pop	{r4, r5, r6, pc}
 8000504:	4b06      	ldr	r3, [pc, #24]	; (8000520 <__aeabi_d2uiz+0x38>)
 8000506:	2200      	movs	r2, #0
 8000508:	0020      	movs	r0, r4
 800050a:	0029      	movs	r1, r5
 800050c:	f001 fb5a 	bl	8001bc4 <__aeabi_dsub>
 8000510:	f001 fef8 	bl	8002304 <__aeabi_d2iz>
 8000514:	2380      	movs	r3, #128	; 0x80
 8000516:	061b      	lsls	r3, r3, #24
 8000518:	469c      	mov	ip, r3
 800051a:	4460      	add	r0, ip
 800051c:	e7f1      	b.n	8000502 <__aeabi_d2uiz+0x1a>
 800051e:	46c0      	nop			; (mov r8, r8)
 8000520:	41e00000 	.word	0x41e00000

08000524 <__aeabi_d2lz>:
 8000524:	b570      	push	{r4, r5, r6, lr}
 8000526:	0005      	movs	r5, r0
 8000528:	000c      	movs	r4, r1
 800052a:	2200      	movs	r2, #0
 800052c:	2300      	movs	r3, #0
 800052e:	0028      	movs	r0, r5
 8000530:	0021      	movs	r1, r4
 8000532:	f7ff ff91 	bl	8000458 <__aeabi_dcmplt>
 8000536:	2800      	cmp	r0, #0
 8000538:	d108      	bne.n	800054c <__aeabi_d2lz+0x28>
 800053a:	0028      	movs	r0, r5
 800053c:	0021      	movs	r1, r4
 800053e:	f000 f80f 	bl	8000560 <__aeabi_d2ulz>
 8000542:	0002      	movs	r2, r0
 8000544:	000b      	movs	r3, r1
 8000546:	0010      	movs	r0, r2
 8000548:	0019      	movs	r1, r3
 800054a:	bd70      	pop	{r4, r5, r6, pc}
 800054c:	2380      	movs	r3, #128	; 0x80
 800054e:	061b      	lsls	r3, r3, #24
 8000550:	18e1      	adds	r1, r4, r3
 8000552:	0028      	movs	r0, r5
 8000554:	f000 f804 	bl	8000560 <__aeabi_d2ulz>
 8000558:	2300      	movs	r3, #0
 800055a:	4242      	negs	r2, r0
 800055c:	418b      	sbcs	r3, r1
 800055e:	e7f2      	b.n	8000546 <__aeabi_d2lz+0x22>

08000560 <__aeabi_d2ulz>:
 8000560:	b570      	push	{r4, r5, r6, lr}
 8000562:	2200      	movs	r2, #0
 8000564:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <__aeabi_d2ulz+0x34>)
 8000566:	000d      	movs	r5, r1
 8000568:	0004      	movs	r4, r0
 800056a:	f001 f869 	bl	8001640 <__aeabi_dmul>
 800056e:	f7ff ffbb 	bl	80004e8 <__aeabi_d2uiz>
 8000572:	0006      	movs	r6, r0
 8000574:	f001 ff2c 	bl	80023d0 <__aeabi_ui2d>
 8000578:	2200      	movs	r2, #0
 800057a:	4b07      	ldr	r3, [pc, #28]	; (8000598 <__aeabi_d2ulz+0x38>)
 800057c:	f001 f860 	bl	8001640 <__aeabi_dmul>
 8000580:	0002      	movs	r2, r0
 8000582:	000b      	movs	r3, r1
 8000584:	0020      	movs	r0, r4
 8000586:	0029      	movs	r1, r5
 8000588:	f001 fb1c 	bl	8001bc4 <__aeabi_dsub>
 800058c:	f7ff ffac 	bl	80004e8 <__aeabi_d2uiz>
 8000590:	0031      	movs	r1, r6
 8000592:	bd70      	pop	{r4, r5, r6, pc}
 8000594:	3df00000 	.word	0x3df00000
 8000598:	41f00000 	.word	0x41f00000

0800059c <__aeabi_l2d>:
 800059c:	b570      	push	{r4, r5, r6, lr}
 800059e:	0006      	movs	r6, r0
 80005a0:	0008      	movs	r0, r1
 80005a2:	f001 fee5 	bl	8002370 <__aeabi_i2d>
 80005a6:	2200      	movs	r2, #0
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <__aeabi_l2d+0x28>)
 80005aa:	f001 f849 	bl	8001640 <__aeabi_dmul>
 80005ae:	000d      	movs	r5, r1
 80005b0:	0004      	movs	r4, r0
 80005b2:	0030      	movs	r0, r6
 80005b4:	f001 ff0c 	bl	80023d0 <__aeabi_ui2d>
 80005b8:	002b      	movs	r3, r5
 80005ba:	0022      	movs	r2, r4
 80005bc:	f000 f8e6 	bl	800078c <__aeabi_dadd>
 80005c0:	bd70      	pop	{r4, r5, r6, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	41f00000 	.word	0x41f00000

080005c8 <__aeabi_ul2d>:
 80005c8:	b570      	push	{r4, r5, r6, lr}
 80005ca:	0006      	movs	r6, r0
 80005cc:	0008      	movs	r0, r1
 80005ce:	f001 feff 	bl	80023d0 <__aeabi_ui2d>
 80005d2:	2200      	movs	r2, #0
 80005d4:	4b06      	ldr	r3, [pc, #24]	; (80005f0 <__aeabi_ul2d+0x28>)
 80005d6:	f001 f833 	bl	8001640 <__aeabi_dmul>
 80005da:	000d      	movs	r5, r1
 80005dc:	0004      	movs	r4, r0
 80005de:	0030      	movs	r0, r6
 80005e0:	f001 fef6 	bl	80023d0 <__aeabi_ui2d>
 80005e4:	002b      	movs	r3, r5
 80005e6:	0022      	movs	r2, r4
 80005e8:	f000 f8d0 	bl	800078c <__aeabi_dadd>
 80005ec:	bd70      	pop	{r4, r5, r6, pc}
 80005ee:	46c0      	nop			; (mov r8, r8)
 80005f0:	41f00000 	.word	0x41f00000

080005f4 <__udivmoddi4>:
 80005f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005f6:	4657      	mov	r7, sl
 80005f8:	464e      	mov	r6, r9
 80005fa:	4645      	mov	r5, r8
 80005fc:	46de      	mov	lr, fp
 80005fe:	b5e0      	push	{r5, r6, r7, lr}
 8000600:	0004      	movs	r4, r0
 8000602:	000d      	movs	r5, r1
 8000604:	4692      	mov	sl, r2
 8000606:	4699      	mov	r9, r3
 8000608:	b083      	sub	sp, #12
 800060a:	428b      	cmp	r3, r1
 800060c:	d830      	bhi.n	8000670 <__udivmoddi4+0x7c>
 800060e:	d02d      	beq.n	800066c <__udivmoddi4+0x78>
 8000610:	4649      	mov	r1, r9
 8000612:	4650      	mov	r0, sl
 8000614:	f001 ff20 	bl	8002458 <__clzdi2>
 8000618:	0029      	movs	r1, r5
 800061a:	0006      	movs	r6, r0
 800061c:	0020      	movs	r0, r4
 800061e:	f001 ff1b 	bl	8002458 <__clzdi2>
 8000622:	1a33      	subs	r3, r6, r0
 8000624:	4698      	mov	r8, r3
 8000626:	3b20      	subs	r3, #32
 8000628:	d434      	bmi.n	8000694 <__udivmoddi4+0xa0>
 800062a:	469b      	mov	fp, r3
 800062c:	4653      	mov	r3, sl
 800062e:	465a      	mov	r2, fp
 8000630:	4093      	lsls	r3, r2
 8000632:	4642      	mov	r2, r8
 8000634:	001f      	movs	r7, r3
 8000636:	4653      	mov	r3, sl
 8000638:	4093      	lsls	r3, r2
 800063a:	001e      	movs	r6, r3
 800063c:	42af      	cmp	r7, r5
 800063e:	d83b      	bhi.n	80006b8 <__udivmoddi4+0xc4>
 8000640:	42af      	cmp	r7, r5
 8000642:	d100      	bne.n	8000646 <__udivmoddi4+0x52>
 8000644:	e079      	b.n	800073a <__udivmoddi4+0x146>
 8000646:	465b      	mov	r3, fp
 8000648:	1ba4      	subs	r4, r4, r6
 800064a:	41bd      	sbcs	r5, r7
 800064c:	2b00      	cmp	r3, #0
 800064e:	da00      	bge.n	8000652 <__udivmoddi4+0x5e>
 8000650:	e076      	b.n	8000740 <__udivmoddi4+0x14c>
 8000652:	2200      	movs	r2, #0
 8000654:	2300      	movs	r3, #0
 8000656:	9200      	str	r2, [sp, #0]
 8000658:	9301      	str	r3, [sp, #4]
 800065a:	2301      	movs	r3, #1
 800065c:	465a      	mov	r2, fp
 800065e:	4093      	lsls	r3, r2
 8000660:	9301      	str	r3, [sp, #4]
 8000662:	2301      	movs	r3, #1
 8000664:	4642      	mov	r2, r8
 8000666:	4093      	lsls	r3, r2
 8000668:	9300      	str	r3, [sp, #0]
 800066a:	e029      	b.n	80006c0 <__udivmoddi4+0xcc>
 800066c:	4282      	cmp	r2, r0
 800066e:	d9cf      	bls.n	8000610 <__udivmoddi4+0x1c>
 8000670:	2200      	movs	r2, #0
 8000672:	2300      	movs	r3, #0
 8000674:	9200      	str	r2, [sp, #0]
 8000676:	9301      	str	r3, [sp, #4]
 8000678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800067a:	2b00      	cmp	r3, #0
 800067c:	d001      	beq.n	8000682 <__udivmoddi4+0x8e>
 800067e:	601c      	str	r4, [r3, #0]
 8000680:	605d      	str	r5, [r3, #4]
 8000682:	9800      	ldr	r0, [sp, #0]
 8000684:	9901      	ldr	r1, [sp, #4]
 8000686:	b003      	add	sp, #12
 8000688:	bcf0      	pop	{r4, r5, r6, r7}
 800068a:	46bb      	mov	fp, r7
 800068c:	46b2      	mov	sl, r6
 800068e:	46a9      	mov	r9, r5
 8000690:	46a0      	mov	r8, r4
 8000692:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000694:	4642      	mov	r2, r8
 8000696:	469b      	mov	fp, r3
 8000698:	2320      	movs	r3, #32
 800069a:	1a9b      	subs	r3, r3, r2
 800069c:	4652      	mov	r2, sl
 800069e:	40da      	lsrs	r2, r3
 80006a0:	4641      	mov	r1, r8
 80006a2:	0013      	movs	r3, r2
 80006a4:	464a      	mov	r2, r9
 80006a6:	408a      	lsls	r2, r1
 80006a8:	0017      	movs	r7, r2
 80006aa:	4642      	mov	r2, r8
 80006ac:	431f      	orrs	r7, r3
 80006ae:	4653      	mov	r3, sl
 80006b0:	4093      	lsls	r3, r2
 80006b2:	001e      	movs	r6, r3
 80006b4:	42af      	cmp	r7, r5
 80006b6:	d9c3      	bls.n	8000640 <__udivmoddi4+0x4c>
 80006b8:	2200      	movs	r2, #0
 80006ba:	2300      	movs	r3, #0
 80006bc:	9200      	str	r2, [sp, #0]
 80006be:	9301      	str	r3, [sp, #4]
 80006c0:	4643      	mov	r3, r8
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d0d8      	beq.n	8000678 <__udivmoddi4+0x84>
 80006c6:	07fb      	lsls	r3, r7, #31
 80006c8:	0872      	lsrs	r2, r6, #1
 80006ca:	431a      	orrs	r2, r3
 80006cc:	4646      	mov	r6, r8
 80006ce:	087b      	lsrs	r3, r7, #1
 80006d0:	e00e      	b.n	80006f0 <__udivmoddi4+0xfc>
 80006d2:	42ab      	cmp	r3, r5
 80006d4:	d101      	bne.n	80006da <__udivmoddi4+0xe6>
 80006d6:	42a2      	cmp	r2, r4
 80006d8:	d80c      	bhi.n	80006f4 <__udivmoddi4+0x100>
 80006da:	1aa4      	subs	r4, r4, r2
 80006dc:	419d      	sbcs	r5, r3
 80006de:	2001      	movs	r0, #1
 80006e0:	1924      	adds	r4, r4, r4
 80006e2:	416d      	adcs	r5, r5
 80006e4:	2100      	movs	r1, #0
 80006e6:	3e01      	subs	r6, #1
 80006e8:	1824      	adds	r4, r4, r0
 80006ea:	414d      	adcs	r5, r1
 80006ec:	2e00      	cmp	r6, #0
 80006ee:	d006      	beq.n	80006fe <__udivmoddi4+0x10a>
 80006f0:	42ab      	cmp	r3, r5
 80006f2:	d9ee      	bls.n	80006d2 <__udivmoddi4+0xde>
 80006f4:	3e01      	subs	r6, #1
 80006f6:	1924      	adds	r4, r4, r4
 80006f8:	416d      	adcs	r5, r5
 80006fa:	2e00      	cmp	r6, #0
 80006fc:	d1f8      	bne.n	80006f0 <__udivmoddi4+0xfc>
 80006fe:	9800      	ldr	r0, [sp, #0]
 8000700:	9901      	ldr	r1, [sp, #4]
 8000702:	465b      	mov	r3, fp
 8000704:	1900      	adds	r0, r0, r4
 8000706:	4169      	adcs	r1, r5
 8000708:	2b00      	cmp	r3, #0
 800070a:	db24      	blt.n	8000756 <__udivmoddi4+0x162>
 800070c:	002b      	movs	r3, r5
 800070e:	465a      	mov	r2, fp
 8000710:	4644      	mov	r4, r8
 8000712:	40d3      	lsrs	r3, r2
 8000714:	002a      	movs	r2, r5
 8000716:	40e2      	lsrs	r2, r4
 8000718:	001c      	movs	r4, r3
 800071a:	465b      	mov	r3, fp
 800071c:	0015      	movs	r5, r2
 800071e:	2b00      	cmp	r3, #0
 8000720:	db2a      	blt.n	8000778 <__udivmoddi4+0x184>
 8000722:	0026      	movs	r6, r4
 8000724:	409e      	lsls	r6, r3
 8000726:	0033      	movs	r3, r6
 8000728:	0026      	movs	r6, r4
 800072a:	4647      	mov	r7, r8
 800072c:	40be      	lsls	r6, r7
 800072e:	0032      	movs	r2, r6
 8000730:	1a80      	subs	r0, r0, r2
 8000732:	4199      	sbcs	r1, r3
 8000734:	9000      	str	r0, [sp, #0]
 8000736:	9101      	str	r1, [sp, #4]
 8000738:	e79e      	b.n	8000678 <__udivmoddi4+0x84>
 800073a:	42a3      	cmp	r3, r4
 800073c:	d8bc      	bhi.n	80006b8 <__udivmoddi4+0xc4>
 800073e:	e782      	b.n	8000646 <__udivmoddi4+0x52>
 8000740:	4642      	mov	r2, r8
 8000742:	2320      	movs	r3, #32
 8000744:	2100      	movs	r1, #0
 8000746:	1a9b      	subs	r3, r3, r2
 8000748:	2200      	movs	r2, #0
 800074a:	9100      	str	r1, [sp, #0]
 800074c:	9201      	str	r2, [sp, #4]
 800074e:	2201      	movs	r2, #1
 8000750:	40da      	lsrs	r2, r3
 8000752:	9201      	str	r2, [sp, #4]
 8000754:	e785      	b.n	8000662 <__udivmoddi4+0x6e>
 8000756:	4642      	mov	r2, r8
 8000758:	2320      	movs	r3, #32
 800075a:	1a9b      	subs	r3, r3, r2
 800075c:	002a      	movs	r2, r5
 800075e:	4646      	mov	r6, r8
 8000760:	409a      	lsls	r2, r3
 8000762:	0023      	movs	r3, r4
 8000764:	40f3      	lsrs	r3, r6
 8000766:	4644      	mov	r4, r8
 8000768:	4313      	orrs	r3, r2
 800076a:	002a      	movs	r2, r5
 800076c:	40e2      	lsrs	r2, r4
 800076e:	001c      	movs	r4, r3
 8000770:	465b      	mov	r3, fp
 8000772:	0015      	movs	r5, r2
 8000774:	2b00      	cmp	r3, #0
 8000776:	dad4      	bge.n	8000722 <__udivmoddi4+0x12e>
 8000778:	4642      	mov	r2, r8
 800077a:	002f      	movs	r7, r5
 800077c:	2320      	movs	r3, #32
 800077e:	0026      	movs	r6, r4
 8000780:	4097      	lsls	r7, r2
 8000782:	1a9b      	subs	r3, r3, r2
 8000784:	40de      	lsrs	r6, r3
 8000786:	003b      	movs	r3, r7
 8000788:	4333      	orrs	r3, r6
 800078a:	e7cd      	b.n	8000728 <__udivmoddi4+0x134>

0800078c <__aeabi_dadd>:
 800078c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800078e:	464f      	mov	r7, r9
 8000790:	4646      	mov	r6, r8
 8000792:	46d6      	mov	lr, sl
 8000794:	0004      	movs	r4, r0
 8000796:	b5c0      	push	{r6, r7, lr}
 8000798:	001f      	movs	r7, r3
 800079a:	030b      	lsls	r3, r1, #12
 800079c:	0010      	movs	r0, r2
 800079e:	004e      	lsls	r6, r1, #1
 80007a0:	0a5b      	lsrs	r3, r3, #9
 80007a2:	0fcd      	lsrs	r5, r1, #31
 80007a4:	0f61      	lsrs	r1, r4, #29
 80007a6:	007a      	lsls	r2, r7, #1
 80007a8:	4319      	orrs	r1, r3
 80007aa:	00e3      	lsls	r3, r4, #3
 80007ac:	033c      	lsls	r4, r7, #12
 80007ae:	0fff      	lsrs	r7, r7, #31
 80007b0:	46bc      	mov	ip, r7
 80007b2:	0a64      	lsrs	r4, r4, #9
 80007b4:	0f47      	lsrs	r7, r0, #29
 80007b6:	4327      	orrs	r7, r4
 80007b8:	0d76      	lsrs	r6, r6, #21
 80007ba:	0d52      	lsrs	r2, r2, #21
 80007bc:	00c0      	lsls	r0, r0, #3
 80007be:	46b9      	mov	r9, r7
 80007c0:	4680      	mov	r8, r0
 80007c2:	1ab7      	subs	r7, r6, r2
 80007c4:	4565      	cmp	r5, ip
 80007c6:	d100      	bne.n	80007ca <__aeabi_dadd+0x3e>
 80007c8:	e09b      	b.n	8000902 <__aeabi_dadd+0x176>
 80007ca:	2f00      	cmp	r7, #0
 80007cc:	dc00      	bgt.n	80007d0 <__aeabi_dadd+0x44>
 80007ce:	e084      	b.n	80008da <__aeabi_dadd+0x14e>
 80007d0:	2a00      	cmp	r2, #0
 80007d2:	d100      	bne.n	80007d6 <__aeabi_dadd+0x4a>
 80007d4:	e0be      	b.n	8000954 <__aeabi_dadd+0x1c8>
 80007d6:	4ac8      	ldr	r2, [pc, #800]	; (8000af8 <__aeabi_dadd+0x36c>)
 80007d8:	4296      	cmp	r6, r2
 80007da:	d100      	bne.n	80007de <__aeabi_dadd+0x52>
 80007dc:	e124      	b.n	8000a28 <__aeabi_dadd+0x29c>
 80007de:	2280      	movs	r2, #128	; 0x80
 80007e0:	464c      	mov	r4, r9
 80007e2:	0412      	lsls	r2, r2, #16
 80007e4:	4314      	orrs	r4, r2
 80007e6:	46a1      	mov	r9, r4
 80007e8:	2f38      	cmp	r7, #56	; 0x38
 80007ea:	dd00      	ble.n	80007ee <__aeabi_dadd+0x62>
 80007ec:	e167      	b.n	8000abe <__aeabi_dadd+0x332>
 80007ee:	2f1f      	cmp	r7, #31
 80007f0:	dd00      	ble.n	80007f4 <__aeabi_dadd+0x68>
 80007f2:	e1d6      	b.n	8000ba2 <__aeabi_dadd+0x416>
 80007f4:	2220      	movs	r2, #32
 80007f6:	464c      	mov	r4, r9
 80007f8:	1bd2      	subs	r2, r2, r7
 80007fa:	4094      	lsls	r4, r2
 80007fc:	46a2      	mov	sl, r4
 80007fe:	4644      	mov	r4, r8
 8000800:	40fc      	lsrs	r4, r7
 8000802:	0020      	movs	r0, r4
 8000804:	4654      	mov	r4, sl
 8000806:	4304      	orrs	r4, r0
 8000808:	4640      	mov	r0, r8
 800080a:	4090      	lsls	r0, r2
 800080c:	1e42      	subs	r2, r0, #1
 800080e:	4190      	sbcs	r0, r2
 8000810:	464a      	mov	r2, r9
 8000812:	40fa      	lsrs	r2, r7
 8000814:	4304      	orrs	r4, r0
 8000816:	1a89      	subs	r1, r1, r2
 8000818:	1b1c      	subs	r4, r3, r4
 800081a:	42a3      	cmp	r3, r4
 800081c:	4192      	sbcs	r2, r2
 800081e:	4252      	negs	r2, r2
 8000820:	1a8b      	subs	r3, r1, r2
 8000822:	469a      	mov	sl, r3
 8000824:	4653      	mov	r3, sl
 8000826:	021b      	lsls	r3, r3, #8
 8000828:	d400      	bmi.n	800082c <__aeabi_dadd+0xa0>
 800082a:	e0d4      	b.n	80009d6 <__aeabi_dadd+0x24a>
 800082c:	4653      	mov	r3, sl
 800082e:	025a      	lsls	r2, r3, #9
 8000830:	0a53      	lsrs	r3, r2, #9
 8000832:	469a      	mov	sl, r3
 8000834:	4653      	mov	r3, sl
 8000836:	2b00      	cmp	r3, #0
 8000838:	d100      	bne.n	800083c <__aeabi_dadd+0xb0>
 800083a:	e104      	b.n	8000a46 <__aeabi_dadd+0x2ba>
 800083c:	4650      	mov	r0, sl
 800083e:	f001 fded 	bl	800241c <__clzsi2>
 8000842:	0003      	movs	r3, r0
 8000844:	3b08      	subs	r3, #8
 8000846:	2220      	movs	r2, #32
 8000848:	0020      	movs	r0, r4
 800084a:	1ad2      	subs	r2, r2, r3
 800084c:	4651      	mov	r1, sl
 800084e:	40d0      	lsrs	r0, r2
 8000850:	4099      	lsls	r1, r3
 8000852:	0002      	movs	r2, r0
 8000854:	409c      	lsls	r4, r3
 8000856:	430a      	orrs	r2, r1
 8000858:	42b3      	cmp	r3, r6
 800085a:	da00      	bge.n	800085e <__aeabi_dadd+0xd2>
 800085c:	e102      	b.n	8000a64 <__aeabi_dadd+0x2d8>
 800085e:	1b9b      	subs	r3, r3, r6
 8000860:	1c59      	adds	r1, r3, #1
 8000862:	291f      	cmp	r1, #31
 8000864:	dd00      	ble.n	8000868 <__aeabi_dadd+0xdc>
 8000866:	e0a7      	b.n	80009b8 <__aeabi_dadd+0x22c>
 8000868:	2320      	movs	r3, #32
 800086a:	0010      	movs	r0, r2
 800086c:	0026      	movs	r6, r4
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	409c      	lsls	r4, r3
 8000872:	4098      	lsls	r0, r3
 8000874:	40ce      	lsrs	r6, r1
 8000876:	40ca      	lsrs	r2, r1
 8000878:	1e63      	subs	r3, r4, #1
 800087a:	419c      	sbcs	r4, r3
 800087c:	4330      	orrs	r0, r6
 800087e:	4692      	mov	sl, r2
 8000880:	2600      	movs	r6, #0
 8000882:	4304      	orrs	r4, r0
 8000884:	0763      	lsls	r3, r4, #29
 8000886:	d009      	beq.n	800089c <__aeabi_dadd+0x110>
 8000888:	230f      	movs	r3, #15
 800088a:	4023      	ands	r3, r4
 800088c:	2b04      	cmp	r3, #4
 800088e:	d005      	beq.n	800089c <__aeabi_dadd+0x110>
 8000890:	1d23      	adds	r3, r4, #4
 8000892:	42a3      	cmp	r3, r4
 8000894:	41a4      	sbcs	r4, r4
 8000896:	4264      	negs	r4, r4
 8000898:	44a2      	add	sl, r4
 800089a:	001c      	movs	r4, r3
 800089c:	4653      	mov	r3, sl
 800089e:	021b      	lsls	r3, r3, #8
 80008a0:	d400      	bmi.n	80008a4 <__aeabi_dadd+0x118>
 80008a2:	e09b      	b.n	80009dc <__aeabi_dadd+0x250>
 80008a4:	4b94      	ldr	r3, [pc, #592]	; (8000af8 <__aeabi_dadd+0x36c>)
 80008a6:	3601      	adds	r6, #1
 80008a8:	429e      	cmp	r6, r3
 80008aa:	d100      	bne.n	80008ae <__aeabi_dadd+0x122>
 80008ac:	e0b8      	b.n	8000a20 <__aeabi_dadd+0x294>
 80008ae:	4653      	mov	r3, sl
 80008b0:	4992      	ldr	r1, [pc, #584]	; (8000afc <__aeabi_dadd+0x370>)
 80008b2:	08e4      	lsrs	r4, r4, #3
 80008b4:	400b      	ands	r3, r1
 80008b6:	0019      	movs	r1, r3
 80008b8:	075b      	lsls	r3, r3, #29
 80008ba:	4323      	orrs	r3, r4
 80008bc:	0572      	lsls	r2, r6, #21
 80008be:	024c      	lsls	r4, r1, #9
 80008c0:	0b24      	lsrs	r4, r4, #12
 80008c2:	0d52      	lsrs	r2, r2, #21
 80008c4:	0512      	lsls	r2, r2, #20
 80008c6:	07ed      	lsls	r5, r5, #31
 80008c8:	4322      	orrs	r2, r4
 80008ca:	432a      	orrs	r2, r5
 80008cc:	0018      	movs	r0, r3
 80008ce:	0011      	movs	r1, r2
 80008d0:	bce0      	pop	{r5, r6, r7}
 80008d2:	46ba      	mov	sl, r7
 80008d4:	46b1      	mov	r9, r6
 80008d6:	46a8      	mov	r8, r5
 80008d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008da:	2f00      	cmp	r7, #0
 80008dc:	d048      	beq.n	8000970 <__aeabi_dadd+0x1e4>
 80008de:	1b97      	subs	r7, r2, r6
 80008e0:	2e00      	cmp	r6, #0
 80008e2:	d000      	beq.n	80008e6 <__aeabi_dadd+0x15a>
 80008e4:	e10e      	b.n	8000b04 <__aeabi_dadd+0x378>
 80008e6:	000c      	movs	r4, r1
 80008e8:	431c      	orrs	r4, r3
 80008ea:	d100      	bne.n	80008ee <__aeabi_dadd+0x162>
 80008ec:	e1b7      	b.n	8000c5e <__aeabi_dadd+0x4d2>
 80008ee:	1e7c      	subs	r4, r7, #1
 80008f0:	2f01      	cmp	r7, #1
 80008f2:	d100      	bne.n	80008f6 <__aeabi_dadd+0x16a>
 80008f4:	e226      	b.n	8000d44 <__aeabi_dadd+0x5b8>
 80008f6:	4d80      	ldr	r5, [pc, #512]	; (8000af8 <__aeabi_dadd+0x36c>)
 80008f8:	42af      	cmp	r7, r5
 80008fa:	d100      	bne.n	80008fe <__aeabi_dadd+0x172>
 80008fc:	e1d5      	b.n	8000caa <__aeabi_dadd+0x51e>
 80008fe:	0027      	movs	r7, r4
 8000900:	e107      	b.n	8000b12 <__aeabi_dadd+0x386>
 8000902:	2f00      	cmp	r7, #0
 8000904:	dc00      	bgt.n	8000908 <__aeabi_dadd+0x17c>
 8000906:	e0b2      	b.n	8000a6e <__aeabi_dadd+0x2e2>
 8000908:	2a00      	cmp	r2, #0
 800090a:	d047      	beq.n	800099c <__aeabi_dadd+0x210>
 800090c:	4a7a      	ldr	r2, [pc, #488]	; (8000af8 <__aeabi_dadd+0x36c>)
 800090e:	4296      	cmp	r6, r2
 8000910:	d100      	bne.n	8000914 <__aeabi_dadd+0x188>
 8000912:	e089      	b.n	8000a28 <__aeabi_dadd+0x29c>
 8000914:	2280      	movs	r2, #128	; 0x80
 8000916:	464c      	mov	r4, r9
 8000918:	0412      	lsls	r2, r2, #16
 800091a:	4314      	orrs	r4, r2
 800091c:	46a1      	mov	r9, r4
 800091e:	2f38      	cmp	r7, #56	; 0x38
 8000920:	dc6b      	bgt.n	80009fa <__aeabi_dadd+0x26e>
 8000922:	2f1f      	cmp	r7, #31
 8000924:	dc00      	bgt.n	8000928 <__aeabi_dadd+0x19c>
 8000926:	e16e      	b.n	8000c06 <__aeabi_dadd+0x47a>
 8000928:	003a      	movs	r2, r7
 800092a:	4648      	mov	r0, r9
 800092c:	3a20      	subs	r2, #32
 800092e:	40d0      	lsrs	r0, r2
 8000930:	4684      	mov	ip, r0
 8000932:	2f20      	cmp	r7, #32
 8000934:	d007      	beq.n	8000946 <__aeabi_dadd+0x1ba>
 8000936:	2240      	movs	r2, #64	; 0x40
 8000938:	4648      	mov	r0, r9
 800093a:	1bd2      	subs	r2, r2, r7
 800093c:	4090      	lsls	r0, r2
 800093e:	0002      	movs	r2, r0
 8000940:	4640      	mov	r0, r8
 8000942:	4310      	orrs	r0, r2
 8000944:	4680      	mov	r8, r0
 8000946:	4640      	mov	r0, r8
 8000948:	1e42      	subs	r2, r0, #1
 800094a:	4190      	sbcs	r0, r2
 800094c:	4662      	mov	r2, ip
 800094e:	0004      	movs	r4, r0
 8000950:	4314      	orrs	r4, r2
 8000952:	e057      	b.n	8000a04 <__aeabi_dadd+0x278>
 8000954:	464a      	mov	r2, r9
 8000956:	4302      	orrs	r2, r0
 8000958:	d100      	bne.n	800095c <__aeabi_dadd+0x1d0>
 800095a:	e103      	b.n	8000b64 <__aeabi_dadd+0x3d8>
 800095c:	1e7a      	subs	r2, r7, #1
 800095e:	2f01      	cmp	r7, #1
 8000960:	d100      	bne.n	8000964 <__aeabi_dadd+0x1d8>
 8000962:	e193      	b.n	8000c8c <__aeabi_dadd+0x500>
 8000964:	4c64      	ldr	r4, [pc, #400]	; (8000af8 <__aeabi_dadd+0x36c>)
 8000966:	42a7      	cmp	r7, r4
 8000968:	d100      	bne.n	800096c <__aeabi_dadd+0x1e0>
 800096a:	e18a      	b.n	8000c82 <__aeabi_dadd+0x4f6>
 800096c:	0017      	movs	r7, r2
 800096e:	e73b      	b.n	80007e8 <__aeabi_dadd+0x5c>
 8000970:	4c63      	ldr	r4, [pc, #396]	; (8000b00 <__aeabi_dadd+0x374>)
 8000972:	1c72      	adds	r2, r6, #1
 8000974:	4222      	tst	r2, r4
 8000976:	d000      	beq.n	800097a <__aeabi_dadd+0x1ee>
 8000978:	e0e0      	b.n	8000b3c <__aeabi_dadd+0x3b0>
 800097a:	000a      	movs	r2, r1
 800097c:	431a      	orrs	r2, r3
 800097e:	2e00      	cmp	r6, #0
 8000980:	d000      	beq.n	8000984 <__aeabi_dadd+0x1f8>
 8000982:	e174      	b.n	8000c6e <__aeabi_dadd+0x4e2>
 8000984:	2a00      	cmp	r2, #0
 8000986:	d100      	bne.n	800098a <__aeabi_dadd+0x1fe>
 8000988:	e1d0      	b.n	8000d2c <__aeabi_dadd+0x5a0>
 800098a:	464a      	mov	r2, r9
 800098c:	4302      	orrs	r2, r0
 800098e:	d000      	beq.n	8000992 <__aeabi_dadd+0x206>
 8000990:	e1e3      	b.n	8000d5a <__aeabi_dadd+0x5ce>
 8000992:	074a      	lsls	r2, r1, #29
 8000994:	08db      	lsrs	r3, r3, #3
 8000996:	4313      	orrs	r3, r2
 8000998:	08c9      	lsrs	r1, r1, #3
 800099a:	e029      	b.n	80009f0 <__aeabi_dadd+0x264>
 800099c:	464a      	mov	r2, r9
 800099e:	4302      	orrs	r2, r0
 80009a0:	d100      	bne.n	80009a4 <__aeabi_dadd+0x218>
 80009a2:	e17d      	b.n	8000ca0 <__aeabi_dadd+0x514>
 80009a4:	1e7a      	subs	r2, r7, #1
 80009a6:	2f01      	cmp	r7, #1
 80009a8:	d100      	bne.n	80009ac <__aeabi_dadd+0x220>
 80009aa:	e0e0      	b.n	8000b6e <__aeabi_dadd+0x3e2>
 80009ac:	4c52      	ldr	r4, [pc, #328]	; (8000af8 <__aeabi_dadd+0x36c>)
 80009ae:	42a7      	cmp	r7, r4
 80009b0:	d100      	bne.n	80009b4 <__aeabi_dadd+0x228>
 80009b2:	e166      	b.n	8000c82 <__aeabi_dadd+0x4f6>
 80009b4:	0017      	movs	r7, r2
 80009b6:	e7b2      	b.n	800091e <__aeabi_dadd+0x192>
 80009b8:	0010      	movs	r0, r2
 80009ba:	3b1f      	subs	r3, #31
 80009bc:	40d8      	lsrs	r0, r3
 80009be:	2920      	cmp	r1, #32
 80009c0:	d003      	beq.n	80009ca <__aeabi_dadd+0x23e>
 80009c2:	2340      	movs	r3, #64	; 0x40
 80009c4:	1a5b      	subs	r3, r3, r1
 80009c6:	409a      	lsls	r2, r3
 80009c8:	4314      	orrs	r4, r2
 80009ca:	1e63      	subs	r3, r4, #1
 80009cc:	419c      	sbcs	r4, r3
 80009ce:	2300      	movs	r3, #0
 80009d0:	2600      	movs	r6, #0
 80009d2:	469a      	mov	sl, r3
 80009d4:	4304      	orrs	r4, r0
 80009d6:	0763      	lsls	r3, r4, #29
 80009d8:	d000      	beq.n	80009dc <__aeabi_dadd+0x250>
 80009da:	e755      	b.n	8000888 <__aeabi_dadd+0xfc>
 80009dc:	4652      	mov	r2, sl
 80009de:	08e3      	lsrs	r3, r4, #3
 80009e0:	0752      	lsls	r2, r2, #29
 80009e2:	4313      	orrs	r3, r2
 80009e4:	4652      	mov	r2, sl
 80009e6:	0037      	movs	r7, r6
 80009e8:	08d1      	lsrs	r1, r2, #3
 80009ea:	4a43      	ldr	r2, [pc, #268]	; (8000af8 <__aeabi_dadd+0x36c>)
 80009ec:	4297      	cmp	r7, r2
 80009ee:	d01f      	beq.n	8000a30 <__aeabi_dadd+0x2a4>
 80009f0:	0309      	lsls	r1, r1, #12
 80009f2:	057a      	lsls	r2, r7, #21
 80009f4:	0b0c      	lsrs	r4, r1, #12
 80009f6:	0d52      	lsrs	r2, r2, #21
 80009f8:	e764      	b.n	80008c4 <__aeabi_dadd+0x138>
 80009fa:	4642      	mov	r2, r8
 80009fc:	464c      	mov	r4, r9
 80009fe:	4314      	orrs	r4, r2
 8000a00:	1e62      	subs	r2, r4, #1
 8000a02:	4194      	sbcs	r4, r2
 8000a04:	18e4      	adds	r4, r4, r3
 8000a06:	429c      	cmp	r4, r3
 8000a08:	4192      	sbcs	r2, r2
 8000a0a:	4252      	negs	r2, r2
 8000a0c:	4692      	mov	sl, r2
 8000a0e:	448a      	add	sl, r1
 8000a10:	4653      	mov	r3, sl
 8000a12:	021b      	lsls	r3, r3, #8
 8000a14:	d5df      	bpl.n	80009d6 <__aeabi_dadd+0x24a>
 8000a16:	4b38      	ldr	r3, [pc, #224]	; (8000af8 <__aeabi_dadd+0x36c>)
 8000a18:	3601      	adds	r6, #1
 8000a1a:	429e      	cmp	r6, r3
 8000a1c:	d000      	beq.n	8000a20 <__aeabi_dadd+0x294>
 8000a1e:	e0b3      	b.n	8000b88 <__aeabi_dadd+0x3fc>
 8000a20:	0032      	movs	r2, r6
 8000a22:	2400      	movs	r4, #0
 8000a24:	2300      	movs	r3, #0
 8000a26:	e74d      	b.n	80008c4 <__aeabi_dadd+0x138>
 8000a28:	074a      	lsls	r2, r1, #29
 8000a2a:	08db      	lsrs	r3, r3, #3
 8000a2c:	4313      	orrs	r3, r2
 8000a2e:	08c9      	lsrs	r1, r1, #3
 8000a30:	001a      	movs	r2, r3
 8000a32:	430a      	orrs	r2, r1
 8000a34:	d100      	bne.n	8000a38 <__aeabi_dadd+0x2ac>
 8000a36:	e200      	b.n	8000e3a <__aeabi_dadd+0x6ae>
 8000a38:	2480      	movs	r4, #128	; 0x80
 8000a3a:	0324      	lsls	r4, r4, #12
 8000a3c:	430c      	orrs	r4, r1
 8000a3e:	0324      	lsls	r4, r4, #12
 8000a40:	4a2d      	ldr	r2, [pc, #180]	; (8000af8 <__aeabi_dadd+0x36c>)
 8000a42:	0b24      	lsrs	r4, r4, #12
 8000a44:	e73e      	b.n	80008c4 <__aeabi_dadd+0x138>
 8000a46:	0020      	movs	r0, r4
 8000a48:	f001 fce8 	bl	800241c <__clzsi2>
 8000a4c:	0003      	movs	r3, r0
 8000a4e:	3318      	adds	r3, #24
 8000a50:	2b1f      	cmp	r3, #31
 8000a52:	dc00      	bgt.n	8000a56 <__aeabi_dadd+0x2ca>
 8000a54:	e6f7      	b.n	8000846 <__aeabi_dadd+0xba>
 8000a56:	0022      	movs	r2, r4
 8000a58:	3808      	subs	r0, #8
 8000a5a:	4082      	lsls	r2, r0
 8000a5c:	2400      	movs	r4, #0
 8000a5e:	42b3      	cmp	r3, r6
 8000a60:	db00      	blt.n	8000a64 <__aeabi_dadd+0x2d8>
 8000a62:	e6fc      	b.n	800085e <__aeabi_dadd+0xd2>
 8000a64:	1af6      	subs	r6, r6, r3
 8000a66:	4b25      	ldr	r3, [pc, #148]	; (8000afc <__aeabi_dadd+0x370>)
 8000a68:	401a      	ands	r2, r3
 8000a6a:	4692      	mov	sl, r2
 8000a6c:	e70a      	b.n	8000884 <__aeabi_dadd+0xf8>
 8000a6e:	2f00      	cmp	r7, #0
 8000a70:	d02b      	beq.n	8000aca <__aeabi_dadd+0x33e>
 8000a72:	1b97      	subs	r7, r2, r6
 8000a74:	2e00      	cmp	r6, #0
 8000a76:	d100      	bne.n	8000a7a <__aeabi_dadd+0x2ee>
 8000a78:	e0b8      	b.n	8000bec <__aeabi_dadd+0x460>
 8000a7a:	4c1f      	ldr	r4, [pc, #124]	; (8000af8 <__aeabi_dadd+0x36c>)
 8000a7c:	42a2      	cmp	r2, r4
 8000a7e:	d100      	bne.n	8000a82 <__aeabi_dadd+0x2f6>
 8000a80:	e11c      	b.n	8000cbc <__aeabi_dadd+0x530>
 8000a82:	2480      	movs	r4, #128	; 0x80
 8000a84:	0424      	lsls	r4, r4, #16
 8000a86:	4321      	orrs	r1, r4
 8000a88:	2f38      	cmp	r7, #56	; 0x38
 8000a8a:	dd00      	ble.n	8000a8e <__aeabi_dadd+0x302>
 8000a8c:	e11e      	b.n	8000ccc <__aeabi_dadd+0x540>
 8000a8e:	2f1f      	cmp	r7, #31
 8000a90:	dd00      	ble.n	8000a94 <__aeabi_dadd+0x308>
 8000a92:	e19e      	b.n	8000dd2 <__aeabi_dadd+0x646>
 8000a94:	2620      	movs	r6, #32
 8000a96:	000c      	movs	r4, r1
 8000a98:	1bf6      	subs	r6, r6, r7
 8000a9a:	0018      	movs	r0, r3
 8000a9c:	40b3      	lsls	r3, r6
 8000a9e:	40b4      	lsls	r4, r6
 8000aa0:	40f8      	lsrs	r0, r7
 8000aa2:	1e5e      	subs	r6, r3, #1
 8000aa4:	41b3      	sbcs	r3, r6
 8000aa6:	40f9      	lsrs	r1, r7
 8000aa8:	4304      	orrs	r4, r0
 8000aaa:	431c      	orrs	r4, r3
 8000aac:	4489      	add	r9, r1
 8000aae:	4444      	add	r4, r8
 8000ab0:	4544      	cmp	r4, r8
 8000ab2:	419b      	sbcs	r3, r3
 8000ab4:	425b      	negs	r3, r3
 8000ab6:	444b      	add	r3, r9
 8000ab8:	469a      	mov	sl, r3
 8000aba:	0016      	movs	r6, r2
 8000abc:	e7a8      	b.n	8000a10 <__aeabi_dadd+0x284>
 8000abe:	4642      	mov	r2, r8
 8000ac0:	464c      	mov	r4, r9
 8000ac2:	4314      	orrs	r4, r2
 8000ac4:	1e62      	subs	r2, r4, #1
 8000ac6:	4194      	sbcs	r4, r2
 8000ac8:	e6a6      	b.n	8000818 <__aeabi_dadd+0x8c>
 8000aca:	4c0d      	ldr	r4, [pc, #52]	; (8000b00 <__aeabi_dadd+0x374>)
 8000acc:	1c72      	adds	r2, r6, #1
 8000ace:	4222      	tst	r2, r4
 8000ad0:	d000      	beq.n	8000ad4 <__aeabi_dadd+0x348>
 8000ad2:	e0a8      	b.n	8000c26 <__aeabi_dadd+0x49a>
 8000ad4:	000a      	movs	r2, r1
 8000ad6:	431a      	orrs	r2, r3
 8000ad8:	2e00      	cmp	r6, #0
 8000ada:	d000      	beq.n	8000ade <__aeabi_dadd+0x352>
 8000adc:	e10a      	b.n	8000cf4 <__aeabi_dadd+0x568>
 8000ade:	2a00      	cmp	r2, #0
 8000ae0:	d100      	bne.n	8000ae4 <__aeabi_dadd+0x358>
 8000ae2:	e15e      	b.n	8000da2 <__aeabi_dadd+0x616>
 8000ae4:	464a      	mov	r2, r9
 8000ae6:	4302      	orrs	r2, r0
 8000ae8:	d000      	beq.n	8000aec <__aeabi_dadd+0x360>
 8000aea:	e161      	b.n	8000db0 <__aeabi_dadd+0x624>
 8000aec:	074a      	lsls	r2, r1, #29
 8000aee:	08db      	lsrs	r3, r3, #3
 8000af0:	4313      	orrs	r3, r2
 8000af2:	08c9      	lsrs	r1, r1, #3
 8000af4:	e77c      	b.n	80009f0 <__aeabi_dadd+0x264>
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	000007ff 	.word	0x000007ff
 8000afc:	ff7fffff 	.word	0xff7fffff
 8000b00:	000007fe 	.word	0x000007fe
 8000b04:	4ccf      	ldr	r4, [pc, #828]	; (8000e44 <__aeabi_dadd+0x6b8>)
 8000b06:	42a2      	cmp	r2, r4
 8000b08:	d100      	bne.n	8000b0c <__aeabi_dadd+0x380>
 8000b0a:	e0ce      	b.n	8000caa <__aeabi_dadd+0x51e>
 8000b0c:	2480      	movs	r4, #128	; 0x80
 8000b0e:	0424      	lsls	r4, r4, #16
 8000b10:	4321      	orrs	r1, r4
 8000b12:	2f38      	cmp	r7, #56	; 0x38
 8000b14:	dc5b      	bgt.n	8000bce <__aeabi_dadd+0x442>
 8000b16:	2f1f      	cmp	r7, #31
 8000b18:	dd00      	ble.n	8000b1c <__aeabi_dadd+0x390>
 8000b1a:	e0dc      	b.n	8000cd6 <__aeabi_dadd+0x54a>
 8000b1c:	2520      	movs	r5, #32
 8000b1e:	000c      	movs	r4, r1
 8000b20:	1bed      	subs	r5, r5, r7
 8000b22:	001e      	movs	r6, r3
 8000b24:	40ab      	lsls	r3, r5
 8000b26:	40ac      	lsls	r4, r5
 8000b28:	40fe      	lsrs	r6, r7
 8000b2a:	1e5d      	subs	r5, r3, #1
 8000b2c:	41ab      	sbcs	r3, r5
 8000b2e:	4334      	orrs	r4, r6
 8000b30:	40f9      	lsrs	r1, r7
 8000b32:	431c      	orrs	r4, r3
 8000b34:	464b      	mov	r3, r9
 8000b36:	1a5b      	subs	r3, r3, r1
 8000b38:	4699      	mov	r9, r3
 8000b3a:	e04c      	b.n	8000bd6 <__aeabi_dadd+0x44a>
 8000b3c:	464a      	mov	r2, r9
 8000b3e:	1a1c      	subs	r4, r3, r0
 8000b40:	1a88      	subs	r0, r1, r2
 8000b42:	42a3      	cmp	r3, r4
 8000b44:	4192      	sbcs	r2, r2
 8000b46:	4252      	negs	r2, r2
 8000b48:	4692      	mov	sl, r2
 8000b4a:	0002      	movs	r2, r0
 8000b4c:	4650      	mov	r0, sl
 8000b4e:	1a12      	subs	r2, r2, r0
 8000b50:	4692      	mov	sl, r2
 8000b52:	0212      	lsls	r2, r2, #8
 8000b54:	d478      	bmi.n	8000c48 <__aeabi_dadd+0x4bc>
 8000b56:	4653      	mov	r3, sl
 8000b58:	4323      	orrs	r3, r4
 8000b5a:	d000      	beq.n	8000b5e <__aeabi_dadd+0x3d2>
 8000b5c:	e66a      	b.n	8000834 <__aeabi_dadd+0xa8>
 8000b5e:	2100      	movs	r1, #0
 8000b60:	2500      	movs	r5, #0
 8000b62:	e745      	b.n	80009f0 <__aeabi_dadd+0x264>
 8000b64:	074a      	lsls	r2, r1, #29
 8000b66:	08db      	lsrs	r3, r3, #3
 8000b68:	4313      	orrs	r3, r2
 8000b6a:	08c9      	lsrs	r1, r1, #3
 8000b6c:	e73d      	b.n	80009ea <__aeabi_dadd+0x25e>
 8000b6e:	181c      	adds	r4, r3, r0
 8000b70:	429c      	cmp	r4, r3
 8000b72:	419b      	sbcs	r3, r3
 8000b74:	4449      	add	r1, r9
 8000b76:	468a      	mov	sl, r1
 8000b78:	425b      	negs	r3, r3
 8000b7a:	449a      	add	sl, r3
 8000b7c:	4653      	mov	r3, sl
 8000b7e:	2601      	movs	r6, #1
 8000b80:	021b      	lsls	r3, r3, #8
 8000b82:	d400      	bmi.n	8000b86 <__aeabi_dadd+0x3fa>
 8000b84:	e727      	b.n	80009d6 <__aeabi_dadd+0x24a>
 8000b86:	2602      	movs	r6, #2
 8000b88:	4652      	mov	r2, sl
 8000b8a:	4baf      	ldr	r3, [pc, #700]	; (8000e48 <__aeabi_dadd+0x6bc>)
 8000b8c:	2101      	movs	r1, #1
 8000b8e:	401a      	ands	r2, r3
 8000b90:	0013      	movs	r3, r2
 8000b92:	4021      	ands	r1, r4
 8000b94:	0862      	lsrs	r2, r4, #1
 8000b96:	430a      	orrs	r2, r1
 8000b98:	07dc      	lsls	r4, r3, #31
 8000b9a:	085b      	lsrs	r3, r3, #1
 8000b9c:	469a      	mov	sl, r3
 8000b9e:	4314      	orrs	r4, r2
 8000ba0:	e670      	b.n	8000884 <__aeabi_dadd+0xf8>
 8000ba2:	003a      	movs	r2, r7
 8000ba4:	464c      	mov	r4, r9
 8000ba6:	3a20      	subs	r2, #32
 8000ba8:	40d4      	lsrs	r4, r2
 8000baa:	46a4      	mov	ip, r4
 8000bac:	2f20      	cmp	r7, #32
 8000bae:	d007      	beq.n	8000bc0 <__aeabi_dadd+0x434>
 8000bb0:	2240      	movs	r2, #64	; 0x40
 8000bb2:	4648      	mov	r0, r9
 8000bb4:	1bd2      	subs	r2, r2, r7
 8000bb6:	4090      	lsls	r0, r2
 8000bb8:	0002      	movs	r2, r0
 8000bba:	4640      	mov	r0, r8
 8000bbc:	4310      	orrs	r0, r2
 8000bbe:	4680      	mov	r8, r0
 8000bc0:	4640      	mov	r0, r8
 8000bc2:	1e42      	subs	r2, r0, #1
 8000bc4:	4190      	sbcs	r0, r2
 8000bc6:	4662      	mov	r2, ip
 8000bc8:	0004      	movs	r4, r0
 8000bca:	4314      	orrs	r4, r2
 8000bcc:	e624      	b.n	8000818 <__aeabi_dadd+0x8c>
 8000bce:	4319      	orrs	r1, r3
 8000bd0:	000c      	movs	r4, r1
 8000bd2:	1e63      	subs	r3, r4, #1
 8000bd4:	419c      	sbcs	r4, r3
 8000bd6:	4643      	mov	r3, r8
 8000bd8:	1b1c      	subs	r4, r3, r4
 8000bda:	45a0      	cmp	r8, r4
 8000bdc:	419b      	sbcs	r3, r3
 8000bde:	4649      	mov	r1, r9
 8000be0:	425b      	negs	r3, r3
 8000be2:	1acb      	subs	r3, r1, r3
 8000be4:	469a      	mov	sl, r3
 8000be6:	4665      	mov	r5, ip
 8000be8:	0016      	movs	r6, r2
 8000bea:	e61b      	b.n	8000824 <__aeabi_dadd+0x98>
 8000bec:	000c      	movs	r4, r1
 8000bee:	431c      	orrs	r4, r3
 8000bf0:	d100      	bne.n	8000bf4 <__aeabi_dadd+0x468>
 8000bf2:	e0c7      	b.n	8000d84 <__aeabi_dadd+0x5f8>
 8000bf4:	1e7c      	subs	r4, r7, #1
 8000bf6:	2f01      	cmp	r7, #1
 8000bf8:	d100      	bne.n	8000bfc <__aeabi_dadd+0x470>
 8000bfa:	e0f9      	b.n	8000df0 <__aeabi_dadd+0x664>
 8000bfc:	4e91      	ldr	r6, [pc, #580]	; (8000e44 <__aeabi_dadd+0x6b8>)
 8000bfe:	42b7      	cmp	r7, r6
 8000c00:	d05c      	beq.n	8000cbc <__aeabi_dadd+0x530>
 8000c02:	0027      	movs	r7, r4
 8000c04:	e740      	b.n	8000a88 <__aeabi_dadd+0x2fc>
 8000c06:	2220      	movs	r2, #32
 8000c08:	464c      	mov	r4, r9
 8000c0a:	4640      	mov	r0, r8
 8000c0c:	1bd2      	subs	r2, r2, r7
 8000c0e:	4094      	lsls	r4, r2
 8000c10:	40f8      	lsrs	r0, r7
 8000c12:	4304      	orrs	r4, r0
 8000c14:	4640      	mov	r0, r8
 8000c16:	4090      	lsls	r0, r2
 8000c18:	1e42      	subs	r2, r0, #1
 8000c1a:	4190      	sbcs	r0, r2
 8000c1c:	464a      	mov	r2, r9
 8000c1e:	40fa      	lsrs	r2, r7
 8000c20:	4304      	orrs	r4, r0
 8000c22:	1889      	adds	r1, r1, r2
 8000c24:	e6ee      	b.n	8000a04 <__aeabi_dadd+0x278>
 8000c26:	4c87      	ldr	r4, [pc, #540]	; (8000e44 <__aeabi_dadd+0x6b8>)
 8000c28:	42a2      	cmp	r2, r4
 8000c2a:	d100      	bne.n	8000c2e <__aeabi_dadd+0x4a2>
 8000c2c:	e6f9      	b.n	8000a22 <__aeabi_dadd+0x296>
 8000c2e:	1818      	adds	r0, r3, r0
 8000c30:	4298      	cmp	r0, r3
 8000c32:	419b      	sbcs	r3, r3
 8000c34:	4449      	add	r1, r9
 8000c36:	425b      	negs	r3, r3
 8000c38:	18cb      	adds	r3, r1, r3
 8000c3a:	07dc      	lsls	r4, r3, #31
 8000c3c:	0840      	lsrs	r0, r0, #1
 8000c3e:	085b      	lsrs	r3, r3, #1
 8000c40:	469a      	mov	sl, r3
 8000c42:	0016      	movs	r6, r2
 8000c44:	4304      	orrs	r4, r0
 8000c46:	e6c6      	b.n	80009d6 <__aeabi_dadd+0x24a>
 8000c48:	4642      	mov	r2, r8
 8000c4a:	1ad4      	subs	r4, r2, r3
 8000c4c:	45a0      	cmp	r8, r4
 8000c4e:	4180      	sbcs	r0, r0
 8000c50:	464b      	mov	r3, r9
 8000c52:	4240      	negs	r0, r0
 8000c54:	1a59      	subs	r1, r3, r1
 8000c56:	1a0b      	subs	r3, r1, r0
 8000c58:	469a      	mov	sl, r3
 8000c5a:	4665      	mov	r5, ip
 8000c5c:	e5ea      	b.n	8000834 <__aeabi_dadd+0xa8>
 8000c5e:	464b      	mov	r3, r9
 8000c60:	464a      	mov	r2, r9
 8000c62:	08c0      	lsrs	r0, r0, #3
 8000c64:	075b      	lsls	r3, r3, #29
 8000c66:	4665      	mov	r5, ip
 8000c68:	4303      	orrs	r3, r0
 8000c6a:	08d1      	lsrs	r1, r2, #3
 8000c6c:	e6bd      	b.n	80009ea <__aeabi_dadd+0x25e>
 8000c6e:	2a00      	cmp	r2, #0
 8000c70:	d000      	beq.n	8000c74 <__aeabi_dadd+0x4e8>
 8000c72:	e08e      	b.n	8000d92 <__aeabi_dadd+0x606>
 8000c74:	464b      	mov	r3, r9
 8000c76:	4303      	orrs	r3, r0
 8000c78:	d117      	bne.n	8000caa <__aeabi_dadd+0x51e>
 8000c7a:	2180      	movs	r1, #128	; 0x80
 8000c7c:	2500      	movs	r5, #0
 8000c7e:	0309      	lsls	r1, r1, #12
 8000c80:	e6da      	b.n	8000a38 <__aeabi_dadd+0x2ac>
 8000c82:	074a      	lsls	r2, r1, #29
 8000c84:	08db      	lsrs	r3, r3, #3
 8000c86:	4313      	orrs	r3, r2
 8000c88:	08c9      	lsrs	r1, r1, #3
 8000c8a:	e6d1      	b.n	8000a30 <__aeabi_dadd+0x2a4>
 8000c8c:	1a1c      	subs	r4, r3, r0
 8000c8e:	464a      	mov	r2, r9
 8000c90:	42a3      	cmp	r3, r4
 8000c92:	419b      	sbcs	r3, r3
 8000c94:	1a89      	subs	r1, r1, r2
 8000c96:	425b      	negs	r3, r3
 8000c98:	1acb      	subs	r3, r1, r3
 8000c9a:	469a      	mov	sl, r3
 8000c9c:	2601      	movs	r6, #1
 8000c9e:	e5c1      	b.n	8000824 <__aeabi_dadd+0x98>
 8000ca0:	074a      	lsls	r2, r1, #29
 8000ca2:	08db      	lsrs	r3, r3, #3
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	08c9      	lsrs	r1, r1, #3
 8000ca8:	e69f      	b.n	80009ea <__aeabi_dadd+0x25e>
 8000caa:	4643      	mov	r3, r8
 8000cac:	08d8      	lsrs	r0, r3, #3
 8000cae:	464b      	mov	r3, r9
 8000cb0:	464a      	mov	r2, r9
 8000cb2:	075b      	lsls	r3, r3, #29
 8000cb4:	4665      	mov	r5, ip
 8000cb6:	4303      	orrs	r3, r0
 8000cb8:	08d1      	lsrs	r1, r2, #3
 8000cba:	e6b9      	b.n	8000a30 <__aeabi_dadd+0x2a4>
 8000cbc:	4643      	mov	r3, r8
 8000cbe:	08d8      	lsrs	r0, r3, #3
 8000cc0:	464b      	mov	r3, r9
 8000cc2:	464a      	mov	r2, r9
 8000cc4:	075b      	lsls	r3, r3, #29
 8000cc6:	4303      	orrs	r3, r0
 8000cc8:	08d1      	lsrs	r1, r2, #3
 8000cca:	e6b1      	b.n	8000a30 <__aeabi_dadd+0x2a4>
 8000ccc:	4319      	orrs	r1, r3
 8000cce:	000c      	movs	r4, r1
 8000cd0:	1e63      	subs	r3, r4, #1
 8000cd2:	419c      	sbcs	r4, r3
 8000cd4:	e6eb      	b.n	8000aae <__aeabi_dadd+0x322>
 8000cd6:	003c      	movs	r4, r7
 8000cd8:	000d      	movs	r5, r1
 8000cda:	3c20      	subs	r4, #32
 8000cdc:	40e5      	lsrs	r5, r4
 8000cde:	2f20      	cmp	r7, #32
 8000ce0:	d003      	beq.n	8000cea <__aeabi_dadd+0x55e>
 8000ce2:	2440      	movs	r4, #64	; 0x40
 8000ce4:	1be4      	subs	r4, r4, r7
 8000ce6:	40a1      	lsls	r1, r4
 8000ce8:	430b      	orrs	r3, r1
 8000cea:	001c      	movs	r4, r3
 8000cec:	1e63      	subs	r3, r4, #1
 8000cee:	419c      	sbcs	r4, r3
 8000cf0:	432c      	orrs	r4, r5
 8000cf2:	e770      	b.n	8000bd6 <__aeabi_dadd+0x44a>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	d0e1      	beq.n	8000cbc <__aeabi_dadd+0x530>
 8000cf8:	464a      	mov	r2, r9
 8000cfa:	4302      	orrs	r2, r0
 8000cfc:	d0c1      	beq.n	8000c82 <__aeabi_dadd+0x4f6>
 8000cfe:	074a      	lsls	r2, r1, #29
 8000d00:	08db      	lsrs	r3, r3, #3
 8000d02:	4313      	orrs	r3, r2
 8000d04:	2280      	movs	r2, #128	; 0x80
 8000d06:	08c9      	lsrs	r1, r1, #3
 8000d08:	0312      	lsls	r2, r2, #12
 8000d0a:	4211      	tst	r1, r2
 8000d0c:	d008      	beq.n	8000d20 <__aeabi_dadd+0x594>
 8000d0e:	4648      	mov	r0, r9
 8000d10:	08c4      	lsrs	r4, r0, #3
 8000d12:	4214      	tst	r4, r2
 8000d14:	d104      	bne.n	8000d20 <__aeabi_dadd+0x594>
 8000d16:	4643      	mov	r3, r8
 8000d18:	0021      	movs	r1, r4
 8000d1a:	08db      	lsrs	r3, r3, #3
 8000d1c:	0742      	lsls	r2, r0, #29
 8000d1e:	4313      	orrs	r3, r2
 8000d20:	0f5a      	lsrs	r2, r3, #29
 8000d22:	00db      	lsls	r3, r3, #3
 8000d24:	0752      	lsls	r2, r2, #29
 8000d26:	08db      	lsrs	r3, r3, #3
 8000d28:	4313      	orrs	r3, r2
 8000d2a:	e681      	b.n	8000a30 <__aeabi_dadd+0x2a4>
 8000d2c:	464b      	mov	r3, r9
 8000d2e:	4303      	orrs	r3, r0
 8000d30:	d100      	bne.n	8000d34 <__aeabi_dadd+0x5a8>
 8000d32:	e714      	b.n	8000b5e <__aeabi_dadd+0x3d2>
 8000d34:	464b      	mov	r3, r9
 8000d36:	464a      	mov	r2, r9
 8000d38:	08c0      	lsrs	r0, r0, #3
 8000d3a:	075b      	lsls	r3, r3, #29
 8000d3c:	4665      	mov	r5, ip
 8000d3e:	4303      	orrs	r3, r0
 8000d40:	08d1      	lsrs	r1, r2, #3
 8000d42:	e655      	b.n	80009f0 <__aeabi_dadd+0x264>
 8000d44:	1ac4      	subs	r4, r0, r3
 8000d46:	45a0      	cmp	r8, r4
 8000d48:	4180      	sbcs	r0, r0
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	4240      	negs	r0, r0
 8000d4e:	1a59      	subs	r1, r3, r1
 8000d50:	1a0b      	subs	r3, r1, r0
 8000d52:	469a      	mov	sl, r3
 8000d54:	4665      	mov	r5, ip
 8000d56:	2601      	movs	r6, #1
 8000d58:	e564      	b.n	8000824 <__aeabi_dadd+0x98>
 8000d5a:	1a1c      	subs	r4, r3, r0
 8000d5c:	464a      	mov	r2, r9
 8000d5e:	42a3      	cmp	r3, r4
 8000d60:	4180      	sbcs	r0, r0
 8000d62:	1a8a      	subs	r2, r1, r2
 8000d64:	4240      	negs	r0, r0
 8000d66:	1a12      	subs	r2, r2, r0
 8000d68:	4692      	mov	sl, r2
 8000d6a:	0212      	lsls	r2, r2, #8
 8000d6c:	d549      	bpl.n	8000e02 <__aeabi_dadd+0x676>
 8000d6e:	4642      	mov	r2, r8
 8000d70:	1ad4      	subs	r4, r2, r3
 8000d72:	45a0      	cmp	r8, r4
 8000d74:	4180      	sbcs	r0, r0
 8000d76:	464b      	mov	r3, r9
 8000d78:	4240      	negs	r0, r0
 8000d7a:	1a59      	subs	r1, r3, r1
 8000d7c:	1a0b      	subs	r3, r1, r0
 8000d7e:	469a      	mov	sl, r3
 8000d80:	4665      	mov	r5, ip
 8000d82:	e57f      	b.n	8000884 <__aeabi_dadd+0xf8>
 8000d84:	464b      	mov	r3, r9
 8000d86:	464a      	mov	r2, r9
 8000d88:	08c0      	lsrs	r0, r0, #3
 8000d8a:	075b      	lsls	r3, r3, #29
 8000d8c:	4303      	orrs	r3, r0
 8000d8e:	08d1      	lsrs	r1, r2, #3
 8000d90:	e62b      	b.n	80009ea <__aeabi_dadd+0x25e>
 8000d92:	464a      	mov	r2, r9
 8000d94:	08db      	lsrs	r3, r3, #3
 8000d96:	4302      	orrs	r2, r0
 8000d98:	d138      	bne.n	8000e0c <__aeabi_dadd+0x680>
 8000d9a:	074a      	lsls	r2, r1, #29
 8000d9c:	4313      	orrs	r3, r2
 8000d9e:	08c9      	lsrs	r1, r1, #3
 8000da0:	e646      	b.n	8000a30 <__aeabi_dadd+0x2a4>
 8000da2:	464b      	mov	r3, r9
 8000da4:	464a      	mov	r2, r9
 8000da6:	08c0      	lsrs	r0, r0, #3
 8000da8:	075b      	lsls	r3, r3, #29
 8000daa:	4303      	orrs	r3, r0
 8000dac:	08d1      	lsrs	r1, r2, #3
 8000dae:	e61f      	b.n	80009f0 <__aeabi_dadd+0x264>
 8000db0:	181c      	adds	r4, r3, r0
 8000db2:	429c      	cmp	r4, r3
 8000db4:	419b      	sbcs	r3, r3
 8000db6:	4449      	add	r1, r9
 8000db8:	468a      	mov	sl, r1
 8000dba:	425b      	negs	r3, r3
 8000dbc:	449a      	add	sl, r3
 8000dbe:	4653      	mov	r3, sl
 8000dc0:	021b      	lsls	r3, r3, #8
 8000dc2:	d400      	bmi.n	8000dc6 <__aeabi_dadd+0x63a>
 8000dc4:	e607      	b.n	80009d6 <__aeabi_dadd+0x24a>
 8000dc6:	4652      	mov	r2, sl
 8000dc8:	4b1f      	ldr	r3, [pc, #124]	; (8000e48 <__aeabi_dadd+0x6bc>)
 8000dca:	2601      	movs	r6, #1
 8000dcc:	401a      	ands	r2, r3
 8000dce:	4692      	mov	sl, r2
 8000dd0:	e601      	b.n	80009d6 <__aeabi_dadd+0x24a>
 8000dd2:	003c      	movs	r4, r7
 8000dd4:	000e      	movs	r6, r1
 8000dd6:	3c20      	subs	r4, #32
 8000dd8:	40e6      	lsrs	r6, r4
 8000dda:	2f20      	cmp	r7, #32
 8000ddc:	d003      	beq.n	8000de6 <__aeabi_dadd+0x65a>
 8000dde:	2440      	movs	r4, #64	; 0x40
 8000de0:	1be4      	subs	r4, r4, r7
 8000de2:	40a1      	lsls	r1, r4
 8000de4:	430b      	orrs	r3, r1
 8000de6:	001c      	movs	r4, r3
 8000de8:	1e63      	subs	r3, r4, #1
 8000dea:	419c      	sbcs	r4, r3
 8000dec:	4334      	orrs	r4, r6
 8000dee:	e65e      	b.n	8000aae <__aeabi_dadd+0x322>
 8000df0:	4443      	add	r3, r8
 8000df2:	4283      	cmp	r3, r0
 8000df4:	4180      	sbcs	r0, r0
 8000df6:	4449      	add	r1, r9
 8000df8:	468a      	mov	sl, r1
 8000dfa:	4240      	negs	r0, r0
 8000dfc:	001c      	movs	r4, r3
 8000dfe:	4482      	add	sl, r0
 8000e00:	e6bc      	b.n	8000b7c <__aeabi_dadd+0x3f0>
 8000e02:	4653      	mov	r3, sl
 8000e04:	4323      	orrs	r3, r4
 8000e06:	d100      	bne.n	8000e0a <__aeabi_dadd+0x67e>
 8000e08:	e6a9      	b.n	8000b5e <__aeabi_dadd+0x3d2>
 8000e0a:	e5e4      	b.n	80009d6 <__aeabi_dadd+0x24a>
 8000e0c:	074a      	lsls	r2, r1, #29
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	2280      	movs	r2, #128	; 0x80
 8000e12:	08c9      	lsrs	r1, r1, #3
 8000e14:	0312      	lsls	r2, r2, #12
 8000e16:	4211      	tst	r1, r2
 8000e18:	d009      	beq.n	8000e2e <__aeabi_dadd+0x6a2>
 8000e1a:	4648      	mov	r0, r9
 8000e1c:	08c4      	lsrs	r4, r0, #3
 8000e1e:	4214      	tst	r4, r2
 8000e20:	d105      	bne.n	8000e2e <__aeabi_dadd+0x6a2>
 8000e22:	4643      	mov	r3, r8
 8000e24:	4665      	mov	r5, ip
 8000e26:	0021      	movs	r1, r4
 8000e28:	08db      	lsrs	r3, r3, #3
 8000e2a:	0742      	lsls	r2, r0, #29
 8000e2c:	4313      	orrs	r3, r2
 8000e2e:	0f5a      	lsrs	r2, r3, #29
 8000e30:	00db      	lsls	r3, r3, #3
 8000e32:	08db      	lsrs	r3, r3, #3
 8000e34:	0752      	lsls	r2, r2, #29
 8000e36:	4313      	orrs	r3, r2
 8000e38:	e5fa      	b.n	8000a30 <__aeabi_dadd+0x2a4>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	4a01      	ldr	r2, [pc, #4]	; (8000e44 <__aeabi_dadd+0x6b8>)
 8000e3e:	001c      	movs	r4, r3
 8000e40:	e540      	b.n	80008c4 <__aeabi_dadd+0x138>
 8000e42:	46c0      	nop			; (mov r8, r8)
 8000e44:	000007ff 	.word	0x000007ff
 8000e48:	ff7fffff 	.word	0xff7fffff

08000e4c <__aeabi_ddiv>:
 8000e4c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000e4e:	4657      	mov	r7, sl
 8000e50:	464e      	mov	r6, r9
 8000e52:	4645      	mov	r5, r8
 8000e54:	46de      	mov	lr, fp
 8000e56:	b5e0      	push	{r5, r6, r7, lr}
 8000e58:	030c      	lsls	r4, r1, #12
 8000e5a:	001f      	movs	r7, r3
 8000e5c:	004b      	lsls	r3, r1, #1
 8000e5e:	4681      	mov	r9, r0
 8000e60:	4692      	mov	sl, r2
 8000e62:	0005      	movs	r5, r0
 8000e64:	b085      	sub	sp, #20
 8000e66:	0b24      	lsrs	r4, r4, #12
 8000e68:	0d5b      	lsrs	r3, r3, #21
 8000e6a:	0fce      	lsrs	r6, r1, #31
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d100      	bne.n	8000e72 <__aeabi_ddiv+0x26>
 8000e70:	e152      	b.n	8001118 <__aeabi_ddiv+0x2cc>
 8000e72:	4ad2      	ldr	r2, [pc, #840]	; (80011bc <__aeabi_ddiv+0x370>)
 8000e74:	4293      	cmp	r3, r2
 8000e76:	d100      	bne.n	8000e7a <__aeabi_ddiv+0x2e>
 8000e78:	e16e      	b.n	8001158 <__aeabi_ddiv+0x30c>
 8000e7a:	0f42      	lsrs	r2, r0, #29
 8000e7c:	00e4      	lsls	r4, r4, #3
 8000e7e:	4314      	orrs	r4, r2
 8000e80:	2280      	movs	r2, #128	; 0x80
 8000e82:	0412      	lsls	r2, r2, #16
 8000e84:	4322      	orrs	r2, r4
 8000e86:	4690      	mov	r8, r2
 8000e88:	4acd      	ldr	r2, [pc, #820]	; (80011c0 <__aeabi_ddiv+0x374>)
 8000e8a:	00c5      	lsls	r5, r0, #3
 8000e8c:	4693      	mov	fp, r2
 8000e8e:	449b      	add	fp, r3
 8000e90:	2300      	movs	r3, #0
 8000e92:	4699      	mov	r9, r3
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	033c      	lsls	r4, r7, #12
 8000e98:	007b      	lsls	r3, r7, #1
 8000e9a:	4650      	mov	r0, sl
 8000e9c:	0b24      	lsrs	r4, r4, #12
 8000e9e:	0d5b      	lsrs	r3, r3, #21
 8000ea0:	0fff      	lsrs	r7, r7, #31
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d100      	bne.n	8000ea8 <__aeabi_ddiv+0x5c>
 8000ea6:	e11a      	b.n	80010de <__aeabi_ddiv+0x292>
 8000ea8:	4ac4      	ldr	r2, [pc, #784]	; (80011bc <__aeabi_ddiv+0x370>)
 8000eaa:	4293      	cmp	r3, r2
 8000eac:	d100      	bne.n	8000eb0 <__aeabi_ddiv+0x64>
 8000eae:	e15e      	b.n	800116e <__aeabi_ddiv+0x322>
 8000eb0:	0f42      	lsrs	r2, r0, #29
 8000eb2:	00e4      	lsls	r4, r4, #3
 8000eb4:	4322      	orrs	r2, r4
 8000eb6:	2480      	movs	r4, #128	; 0x80
 8000eb8:	0424      	lsls	r4, r4, #16
 8000eba:	4314      	orrs	r4, r2
 8000ebc:	4ac0      	ldr	r2, [pc, #768]	; (80011c0 <__aeabi_ddiv+0x374>)
 8000ebe:	00c1      	lsls	r1, r0, #3
 8000ec0:	4694      	mov	ip, r2
 8000ec2:	465a      	mov	r2, fp
 8000ec4:	4463      	add	r3, ip
 8000ec6:	1ad3      	subs	r3, r2, r3
 8000ec8:	469b      	mov	fp, r3
 8000eca:	2000      	movs	r0, #0
 8000ecc:	0033      	movs	r3, r6
 8000ece:	407b      	eors	r3, r7
 8000ed0:	469a      	mov	sl, r3
 8000ed2:	464b      	mov	r3, r9
 8000ed4:	2b0f      	cmp	r3, #15
 8000ed6:	d827      	bhi.n	8000f28 <__aeabi_ddiv+0xdc>
 8000ed8:	4aba      	ldr	r2, [pc, #744]	; (80011c4 <__aeabi_ddiv+0x378>)
 8000eda:	009b      	lsls	r3, r3, #2
 8000edc:	58d3      	ldr	r3, [r2, r3]
 8000ede:	469f      	mov	pc, r3
 8000ee0:	46b2      	mov	sl, r6
 8000ee2:	9b00      	ldr	r3, [sp, #0]
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d016      	beq.n	8000f16 <__aeabi_ddiv+0xca>
 8000ee8:	2b03      	cmp	r3, #3
 8000eea:	d100      	bne.n	8000eee <__aeabi_ddiv+0xa2>
 8000eec:	e287      	b.n	80013fe <__aeabi_ddiv+0x5b2>
 8000eee:	2b01      	cmp	r3, #1
 8000ef0:	d000      	beq.n	8000ef4 <__aeabi_ddiv+0xa8>
 8000ef2:	e0d5      	b.n	80010a0 <__aeabi_ddiv+0x254>
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	2500      	movs	r5, #0
 8000efa:	051b      	lsls	r3, r3, #20
 8000efc:	4313      	orrs	r3, r2
 8000efe:	4652      	mov	r2, sl
 8000f00:	07d2      	lsls	r2, r2, #31
 8000f02:	4313      	orrs	r3, r2
 8000f04:	0028      	movs	r0, r5
 8000f06:	0019      	movs	r1, r3
 8000f08:	b005      	add	sp, #20
 8000f0a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f0c:	46bb      	mov	fp, r7
 8000f0e:	46b2      	mov	sl, r6
 8000f10:	46a9      	mov	r9, r5
 8000f12:	46a0      	mov	r8, r4
 8000f14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000f16:	2200      	movs	r2, #0
 8000f18:	2500      	movs	r5, #0
 8000f1a:	4ba8      	ldr	r3, [pc, #672]	; (80011bc <__aeabi_ddiv+0x370>)
 8000f1c:	e7ed      	b.n	8000efa <__aeabi_ddiv+0xae>
 8000f1e:	46ba      	mov	sl, r7
 8000f20:	46a0      	mov	r8, r4
 8000f22:	000d      	movs	r5, r1
 8000f24:	9000      	str	r0, [sp, #0]
 8000f26:	e7dc      	b.n	8000ee2 <__aeabi_ddiv+0x96>
 8000f28:	4544      	cmp	r4, r8
 8000f2a:	d200      	bcs.n	8000f2e <__aeabi_ddiv+0xe2>
 8000f2c:	e1c4      	b.n	80012b8 <__aeabi_ddiv+0x46c>
 8000f2e:	d100      	bne.n	8000f32 <__aeabi_ddiv+0xe6>
 8000f30:	e1bf      	b.n	80012b2 <__aeabi_ddiv+0x466>
 8000f32:	2301      	movs	r3, #1
 8000f34:	425b      	negs	r3, r3
 8000f36:	469c      	mov	ip, r3
 8000f38:	002e      	movs	r6, r5
 8000f3a:	4640      	mov	r0, r8
 8000f3c:	2500      	movs	r5, #0
 8000f3e:	44e3      	add	fp, ip
 8000f40:	0223      	lsls	r3, r4, #8
 8000f42:	0e0c      	lsrs	r4, r1, #24
 8000f44:	431c      	orrs	r4, r3
 8000f46:	0c1b      	lsrs	r3, r3, #16
 8000f48:	4699      	mov	r9, r3
 8000f4a:	0423      	lsls	r3, r4, #16
 8000f4c:	020a      	lsls	r2, r1, #8
 8000f4e:	0c1f      	lsrs	r7, r3, #16
 8000f50:	4649      	mov	r1, r9
 8000f52:	9200      	str	r2, [sp, #0]
 8000f54:	9701      	str	r7, [sp, #4]
 8000f56:	f7ff f979 	bl	800024c <__aeabi_uidivmod>
 8000f5a:	0002      	movs	r2, r0
 8000f5c:	437a      	muls	r2, r7
 8000f5e:	040b      	lsls	r3, r1, #16
 8000f60:	0c31      	lsrs	r1, r6, #16
 8000f62:	4680      	mov	r8, r0
 8000f64:	4319      	orrs	r1, r3
 8000f66:	428a      	cmp	r2, r1
 8000f68:	d907      	bls.n	8000f7a <__aeabi_ddiv+0x12e>
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	425b      	negs	r3, r3
 8000f6e:	469c      	mov	ip, r3
 8000f70:	1909      	adds	r1, r1, r4
 8000f72:	44e0      	add	r8, ip
 8000f74:	428c      	cmp	r4, r1
 8000f76:	d800      	bhi.n	8000f7a <__aeabi_ddiv+0x12e>
 8000f78:	e201      	b.n	800137e <__aeabi_ddiv+0x532>
 8000f7a:	1a88      	subs	r0, r1, r2
 8000f7c:	4649      	mov	r1, r9
 8000f7e:	f7ff f965 	bl	800024c <__aeabi_uidivmod>
 8000f82:	9a01      	ldr	r2, [sp, #4]
 8000f84:	0436      	lsls	r6, r6, #16
 8000f86:	4342      	muls	r2, r0
 8000f88:	0409      	lsls	r1, r1, #16
 8000f8a:	0c36      	lsrs	r6, r6, #16
 8000f8c:	0003      	movs	r3, r0
 8000f8e:	430e      	orrs	r6, r1
 8000f90:	42b2      	cmp	r2, r6
 8000f92:	d904      	bls.n	8000f9e <__aeabi_ddiv+0x152>
 8000f94:	1936      	adds	r6, r6, r4
 8000f96:	3b01      	subs	r3, #1
 8000f98:	42b4      	cmp	r4, r6
 8000f9a:	d800      	bhi.n	8000f9e <__aeabi_ddiv+0x152>
 8000f9c:	e1e9      	b.n	8001372 <__aeabi_ddiv+0x526>
 8000f9e:	1ab0      	subs	r0, r6, r2
 8000fa0:	4642      	mov	r2, r8
 8000fa2:	9e00      	ldr	r6, [sp, #0]
 8000fa4:	0412      	lsls	r2, r2, #16
 8000fa6:	431a      	orrs	r2, r3
 8000fa8:	0c33      	lsrs	r3, r6, #16
 8000faa:	001f      	movs	r7, r3
 8000fac:	0c11      	lsrs	r1, r2, #16
 8000fae:	4690      	mov	r8, r2
 8000fb0:	9302      	str	r3, [sp, #8]
 8000fb2:	0413      	lsls	r3, r2, #16
 8000fb4:	0432      	lsls	r2, r6, #16
 8000fb6:	0c16      	lsrs	r6, r2, #16
 8000fb8:	0032      	movs	r2, r6
 8000fba:	0c1b      	lsrs	r3, r3, #16
 8000fbc:	435a      	muls	r2, r3
 8000fbe:	9603      	str	r6, [sp, #12]
 8000fc0:	437b      	muls	r3, r7
 8000fc2:	434e      	muls	r6, r1
 8000fc4:	4379      	muls	r1, r7
 8000fc6:	0c17      	lsrs	r7, r2, #16
 8000fc8:	46bc      	mov	ip, r7
 8000fca:	199b      	adds	r3, r3, r6
 8000fcc:	4463      	add	r3, ip
 8000fce:	429e      	cmp	r6, r3
 8000fd0:	d903      	bls.n	8000fda <__aeabi_ddiv+0x18e>
 8000fd2:	2680      	movs	r6, #128	; 0x80
 8000fd4:	0276      	lsls	r6, r6, #9
 8000fd6:	46b4      	mov	ip, r6
 8000fd8:	4461      	add	r1, ip
 8000fda:	0c1e      	lsrs	r6, r3, #16
 8000fdc:	1871      	adds	r1, r6, r1
 8000fde:	0416      	lsls	r6, r2, #16
 8000fe0:	041b      	lsls	r3, r3, #16
 8000fe2:	0c36      	lsrs	r6, r6, #16
 8000fe4:	199e      	adds	r6, r3, r6
 8000fe6:	4288      	cmp	r0, r1
 8000fe8:	d302      	bcc.n	8000ff0 <__aeabi_ddiv+0x1a4>
 8000fea:	d112      	bne.n	8001012 <__aeabi_ddiv+0x1c6>
 8000fec:	42b5      	cmp	r5, r6
 8000fee:	d210      	bcs.n	8001012 <__aeabi_ddiv+0x1c6>
 8000ff0:	4643      	mov	r3, r8
 8000ff2:	1e5a      	subs	r2, r3, #1
 8000ff4:	9b00      	ldr	r3, [sp, #0]
 8000ff6:	469c      	mov	ip, r3
 8000ff8:	4465      	add	r5, ip
 8000ffa:	001f      	movs	r7, r3
 8000ffc:	429d      	cmp	r5, r3
 8000ffe:	419b      	sbcs	r3, r3
 8001000:	425b      	negs	r3, r3
 8001002:	191b      	adds	r3, r3, r4
 8001004:	18c0      	adds	r0, r0, r3
 8001006:	4284      	cmp	r4, r0
 8001008:	d200      	bcs.n	800100c <__aeabi_ddiv+0x1c0>
 800100a:	e19e      	b.n	800134a <__aeabi_ddiv+0x4fe>
 800100c:	d100      	bne.n	8001010 <__aeabi_ddiv+0x1c4>
 800100e:	e199      	b.n	8001344 <__aeabi_ddiv+0x4f8>
 8001010:	4690      	mov	r8, r2
 8001012:	1bae      	subs	r6, r5, r6
 8001014:	42b5      	cmp	r5, r6
 8001016:	41ad      	sbcs	r5, r5
 8001018:	1a40      	subs	r0, r0, r1
 800101a:	426d      	negs	r5, r5
 800101c:	1b40      	subs	r0, r0, r5
 800101e:	4284      	cmp	r4, r0
 8001020:	d100      	bne.n	8001024 <__aeabi_ddiv+0x1d8>
 8001022:	e1d2      	b.n	80013ca <__aeabi_ddiv+0x57e>
 8001024:	4649      	mov	r1, r9
 8001026:	f7ff f911 	bl	800024c <__aeabi_uidivmod>
 800102a:	9a01      	ldr	r2, [sp, #4]
 800102c:	040b      	lsls	r3, r1, #16
 800102e:	4342      	muls	r2, r0
 8001030:	0c31      	lsrs	r1, r6, #16
 8001032:	0005      	movs	r5, r0
 8001034:	4319      	orrs	r1, r3
 8001036:	428a      	cmp	r2, r1
 8001038:	d900      	bls.n	800103c <__aeabi_ddiv+0x1f0>
 800103a:	e16c      	b.n	8001316 <__aeabi_ddiv+0x4ca>
 800103c:	1a88      	subs	r0, r1, r2
 800103e:	4649      	mov	r1, r9
 8001040:	f7ff f904 	bl	800024c <__aeabi_uidivmod>
 8001044:	9a01      	ldr	r2, [sp, #4]
 8001046:	0436      	lsls	r6, r6, #16
 8001048:	4342      	muls	r2, r0
 800104a:	0409      	lsls	r1, r1, #16
 800104c:	0c36      	lsrs	r6, r6, #16
 800104e:	0003      	movs	r3, r0
 8001050:	430e      	orrs	r6, r1
 8001052:	42b2      	cmp	r2, r6
 8001054:	d900      	bls.n	8001058 <__aeabi_ddiv+0x20c>
 8001056:	e153      	b.n	8001300 <__aeabi_ddiv+0x4b4>
 8001058:	9803      	ldr	r0, [sp, #12]
 800105a:	1ab6      	subs	r6, r6, r2
 800105c:	0002      	movs	r2, r0
 800105e:	042d      	lsls	r5, r5, #16
 8001060:	431d      	orrs	r5, r3
 8001062:	9f02      	ldr	r7, [sp, #8]
 8001064:	042b      	lsls	r3, r5, #16
 8001066:	0c1b      	lsrs	r3, r3, #16
 8001068:	435a      	muls	r2, r3
 800106a:	437b      	muls	r3, r7
 800106c:	469c      	mov	ip, r3
 800106e:	0c29      	lsrs	r1, r5, #16
 8001070:	4348      	muls	r0, r1
 8001072:	0c13      	lsrs	r3, r2, #16
 8001074:	4484      	add	ip, r0
 8001076:	4463      	add	r3, ip
 8001078:	4379      	muls	r1, r7
 800107a:	4298      	cmp	r0, r3
 800107c:	d903      	bls.n	8001086 <__aeabi_ddiv+0x23a>
 800107e:	2080      	movs	r0, #128	; 0x80
 8001080:	0240      	lsls	r0, r0, #9
 8001082:	4684      	mov	ip, r0
 8001084:	4461      	add	r1, ip
 8001086:	0c18      	lsrs	r0, r3, #16
 8001088:	0412      	lsls	r2, r2, #16
 800108a:	041b      	lsls	r3, r3, #16
 800108c:	0c12      	lsrs	r2, r2, #16
 800108e:	1840      	adds	r0, r0, r1
 8001090:	189b      	adds	r3, r3, r2
 8001092:	4286      	cmp	r6, r0
 8001094:	d200      	bcs.n	8001098 <__aeabi_ddiv+0x24c>
 8001096:	e100      	b.n	800129a <__aeabi_ddiv+0x44e>
 8001098:	d100      	bne.n	800109c <__aeabi_ddiv+0x250>
 800109a:	e0fb      	b.n	8001294 <__aeabi_ddiv+0x448>
 800109c:	2301      	movs	r3, #1
 800109e:	431d      	orrs	r5, r3
 80010a0:	4b49      	ldr	r3, [pc, #292]	; (80011c8 <__aeabi_ddiv+0x37c>)
 80010a2:	445b      	add	r3, fp
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	dc00      	bgt.n	80010aa <__aeabi_ddiv+0x25e>
 80010a8:	e0aa      	b.n	8001200 <__aeabi_ddiv+0x3b4>
 80010aa:	076a      	lsls	r2, r5, #29
 80010ac:	d000      	beq.n	80010b0 <__aeabi_ddiv+0x264>
 80010ae:	e13d      	b.n	800132c <__aeabi_ddiv+0x4e0>
 80010b0:	08e9      	lsrs	r1, r5, #3
 80010b2:	4642      	mov	r2, r8
 80010b4:	01d2      	lsls	r2, r2, #7
 80010b6:	d506      	bpl.n	80010c6 <__aeabi_ddiv+0x27a>
 80010b8:	4642      	mov	r2, r8
 80010ba:	4b44      	ldr	r3, [pc, #272]	; (80011cc <__aeabi_ddiv+0x380>)
 80010bc:	401a      	ands	r2, r3
 80010be:	2380      	movs	r3, #128	; 0x80
 80010c0:	4690      	mov	r8, r2
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	445b      	add	r3, fp
 80010c6:	4a42      	ldr	r2, [pc, #264]	; (80011d0 <__aeabi_ddiv+0x384>)
 80010c8:	4293      	cmp	r3, r2
 80010ca:	dd00      	ble.n	80010ce <__aeabi_ddiv+0x282>
 80010cc:	e723      	b.n	8000f16 <__aeabi_ddiv+0xca>
 80010ce:	4642      	mov	r2, r8
 80010d0:	055b      	lsls	r3, r3, #21
 80010d2:	0755      	lsls	r5, r2, #29
 80010d4:	0252      	lsls	r2, r2, #9
 80010d6:	430d      	orrs	r5, r1
 80010d8:	0b12      	lsrs	r2, r2, #12
 80010da:	0d5b      	lsrs	r3, r3, #21
 80010dc:	e70d      	b.n	8000efa <__aeabi_ddiv+0xae>
 80010de:	4651      	mov	r1, sl
 80010e0:	4321      	orrs	r1, r4
 80010e2:	d100      	bne.n	80010e6 <__aeabi_ddiv+0x29a>
 80010e4:	e07c      	b.n	80011e0 <__aeabi_ddiv+0x394>
 80010e6:	2c00      	cmp	r4, #0
 80010e8:	d100      	bne.n	80010ec <__aeabi_ddiv+0x2a0>
 80010ea:	e0fb      	b.n	80012e4 <__aeabi_ddiv+0x498>
 80010ec:	0020      	movs	r0, r4
 80010ee:	f001 f995 	bl	800241c <__clzsi2>
 80010f2:	0002      	movs	r2, r0
 80010f4:	3a0b      	subs	r2, #11
 80010f6:	231d      	movs	r3, #29
 80010f8:	1a9b      	subs	r3, r3, r2
 80010fa:	4652      	mov	r2, sl
 80010fc:	0001      	movs	r1, r0
 80010fe:	40da      	lsrs	r2, r3
 8001100:	4653      	mov	r3, sl
 8001102:	3908      	subs	r1, #8
 8001104:	408b      	lsls	r3, r1
 8001106:	408c      	lsls	r4, r1
 8001108:	0019      	movs	r1, r3
 800110a:	4314      	orrs	r4, r2
 800110c:	4b31      	ldr	r3, [pc, #196]	; (80011d4 <__aeabi_ddiv+0x388>)
 800110e:	4458      	add	r0, fp
 8001110:	469b      	mov	fp, r3
 8001112:	4483      	add	fp, r0
 8001114:	2000      	movs	r0, #0
 8001116:	e6d9      	b.n	8000ecc <__aeabi_ddiv+0x80>
 8001118:	0003      	movs	r3, r0
 800111a:	4323      	orrs	r3, r4
 800111c:	4698      	mov	r8, r3
 800111e:	d044      	beq.n	80011aa <__aeabi_ddiv+0x35e>
 8001120:	2c00      	cmp	r4, #0
 8001122:	d100      	bne.n	8001126 <__aeabi_ddiv+0x2da>
 8001124:	e0cf      	b.n	80012c6 <__aeabi_ddiv+0x47a>
 8001126:	0020      	movs	r0, r4
 8001128:	f001 f978 	bl	800241c <__clzsi2>
 800112c:	0001      	movs	r1, r0
 800112e:	0002      	movs	r2, r0
 8001130:	390b      	subs	r1, #11
 8001132:	231d      	movs	r3, #29
 8001134:	1a5b      	subs	r3, r3, r1
 8001136:	4649      	mov	r1, r9
 8001138:	0010      	movs	r0, r2
 800113a:	40d9      	lsrs	r1, r3
 800113c:	3808      	subs	r0, #8
 800113e:	4084      	lsls	r4, r0
 8001140:	000b      	movs	r3, r1
 8001142:	464d      	mov	r5, r9
 8001144:	4323      	orrs	r3, r4
 8001146:	4698      	mov	r8, r3
 8001148:	4085      	lsls	r5, r0
 800114a:	4b23      	ldr	r3, [pc, #140]	; (80011d8 <__aeabi_ddiv+0x38c>)
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	469b      	mov	fp, r3
 8001150:	2300      	movs	r3, #0
 8001152:	4699      	mov	r9, r3
 8001154:	9300      	str	r3, [sp, #0]
 8001156:	e69e      	b.n	8000e96 <__aeabi_ddiv+0x4a>
 8001158:	0002      	movs	r2, r0
 800115a:	4322      	orrs	r2, r4
 800115c:	4690      	mov	r8, r2
 800115e:	d11d      	bne.n	800119c <__aeabi_ddiv+0x350>
 8001160:	2208      	movs	r2, #8
 8001162:	469b      	mov	fp, r3
 8001164:	2302      	movs	r3, #2
 8001166:	2500      	movs	r5, #0
 8001168:	4691      	mov	r9, r2
 800116a:	9300      	str	r3, [sp, #0]
 800116c:	e693      	b.n	8000e96 <__aeabi_ddiv+0x4a>
 800116e:	4651      	mov	r1, sl
 8001170:	4321      	orrs	r1, r4
 8001172:	d109      	bne.n	8001188 <__aeabi_ddiv+0x33c>
 8001174:	2302      	movs	r3, #2
 8001176:	464a      	mov	r2, r9
 8001178:	431a      	orrs	r2, r3
 800117a:	4b18      	ldr	r3, [pc, #96]	; (80011dc <__aeabi_ddiv+0x390>)
 800117c:	4691      	mov	r9, r2
 800117e:	469c      	mov	ip, r3
 8001180:	2400      	movs	r4, #0
 8001182:	2002      	movs	r0, #2
 8001184:	44e3      	add	fp, ip
 8001186:	e6a1      	b.n	8000ecc <__aeabi_ddiv+0x80>
 8001188:	2303      	movs	r3, #3
 800118a:	464a      	mov	r2, r9
 800118c:	431a      	orrs	r2, r3
 800118e:	4b13      	ldr	r3, [pc, #76]	; (80011dc <__aeabi_ddiv+0x390>)
 8001190:	4691      	mov	r9, r2
 8001192:	469c      	mov	ip, r3
 8001194:	4651      	mov	r1, sl
 8001196:	2003      	movs	r0, #3
 8001198:	44e3      	add	fp, ip
 800119a:	e697      	b.n	8000ecc <__aeabi_ddiv+0x80>
 800119c:	220c      	movs	r2, #12
 800119e:	469b      	mov	fp, r3
 80011a0:	2303      	movs	r3, #3
 80011a2:	46a0      	mov	r8, r4
 80011a4:	4691      	mov	r9, r2
 80011a6:	9300      	str	r3, [sp, #0]
 80011a8:	e675      	b.n	8000e96 <__aeabi_ddiv+0x4a>
 80011aa:	2304      	movs	r3, #4
 80011ac:	4699      	mov	r9, r3
 80011ae:	2300      	movs	r3, #0
 80011b0:	469b      	mov	fp, r3
 80011b2:	3301      	adds	r3, #1
 80011b4:	2500      	movs	r5, #0
 80011b6:	9300      	str	r3, [sp, #0]
 80011b8:	e66d      	b.n	8000e96 <__aeabi_ddiv+0x4a>
 80011ba:	46c0      	nop			; (mov r8, r8)
 80011bc:	000007ff 	.word	0x000007ff
 80011c0:	fffffc01 	.word	0xfffffc01
 80011c4:	0800d648 	.word	0x0800d648
 80011c8:	000003ff 	.word	0x000003ff
 80011cc:	feffffff 	.word	0xfeffffff
 80011d0:	000007fe 	.word	0x000007fe
 80011d4:	000003f3 	.word	0x000003f3
 80011d8:	fffffc0d 	.word	0xfffffc0d
 80011dc:	fffff801 	.word	0xfffff801
 80011e0:	464a      	mov	r2, r9
 80011e2:	2301      	movs	r3, #1
 80011e4:	431a      	orrs	r2, r3
 80011e6:	4691      	mov	r9, r2
 80011e8:	2400      	movs	r4, #0
 80011ea:	2001      	movs	r0, #1
 80011ec:	e66e      	b.n	8000ecc <__aeabi_ddiv+0x80>
 80011ee:	2300      	movs	r3, #0
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	469a      	mov	sl, r3
 80011f4:	2500      	movs	r5, #0
 80011f6:	4b88      	ldr	r3, [pc, #544]	; (8001418 <__aeabi_ddiv+0x5cc>)
 80011f8:	0312      	lsls	r2, r2, #12
 80011fa:	e67e      	b.n	8000efa <__aeabi_ddiv+0xae>
 80011fc:	2501      	movs	r5, #1
 80011fe:	426d      	negs	r5, r5
 8001200:	2201      	movs	r2, #1
 8001202:	1ad2      	subs	r2, r2, r3
 8001204:	2a38      	cmp	r2, #56	; 0x38
 8001206:	dd00      	ble.n	800120a <__aeabi_ddiv+0x3be>
 8001208:	e674      	b.n	8000ef4 <__aeabi_ddiv+0xa8>
 800120a:	2a1f      	cmp	r2, #31
 800120c:	dc00      	bgt.n	8001210 <__aeabi_ddiv+0x3c4>
 800120e:	e0bd      	b.n	800138c <__aeabi_ddiv+0x540>
 8001210:	211f      	movs	r1, #31
 8001212:	4249      	negs	r1, r1
 8001214:	1acb      	subs	r3, r1, r3
 8001216:	4641      	mov	r1, r8
 8001218:	40d9      	lsrs	r1, r3
 800121a:	000b      	movs	r3, r1
 800121c:	2a20      	cmp	r2, #32
 800121e:	d004      	beq.n	800122a <__aeabi_ddiv+0x3de>
 8001220:	4641      	mov	r1, r8
 8001222:	4a7e      	ldr	r2, [pc, #504]	; (800141c <__aeabi_ddiv+0x5d0>)
 8001224:	445a      	add	r2, fp
 8001226:	4091      	lsls	r1, r2
 8001228:	430d      	orrs	r5, r1
 800122a:	0029      	movs	r1, r5
 800122c:	1e4a      	subs	r2, r1, #1
 800122e:	4191      	sbcs	r1, r2
 8001230:	4319      	orrs	r1, r3
 8001232:	2307      	movs	r3, #7
 8001234:	001d      	movs	r5, r3
 8001236:	2200      	movs	r2, #0
 8001238:	400d      	ands	r5, r1
 800123a:	420b      	tst	r3, r1
 800123c:	d100      	bne.n	8001240 <__aeabi_ddiv+0x3f4>
 800123e:	e0d0      	b.n	80013e2 <__aeabi_ddiv+0x596>
 8001240:	220f      	movs	r2, #15
 8001242:	2300      	movs	r3, #0
 8001244:	400a      	ands	r2, r1
 8001246:	2a04      	cmp	r2, #4
 8001248:	d100      	bne.n	800124c <__aeabi_ddiv+0x400>
 800124a:	e0c7      	b.n	80013dc <__aeabi_ddiv+0x590>
 800124c:	1d0a      	adds	r2, r1, #4
 800124e:	428a      	cmp	r2, r1
 8001250:	4189      	sbcs	r1, r1
 8001252:	4249      	negs	r1, r1
 8001254:	185b      	adds	r3, r3, r1
 8001256:	0011      	movs	r1, r2
 8001258:	021a      	lsls	r2, r3, #8
 800125a:	d400      	bmi.n	800125e <__aeabi_ddiv+0x412>
 800125c:	e0be      	b.n	80013dc <__aeabi_ddiv+0x590>
 800125e:	2301      	movs	r3, #1
 8001260:	2200      	movs	r2, #0
 8001262:	2500      	movs	r5, #0
 8001264:	e649      	b.n	8000efa <__aeabi_ddiv+0xae>
 8001266:	2280      	movs	r2, #128	; 0x80
 8001268:	4643      	mov	r3, r8
 800126a:	0312      	lsls	r2, r2, #12
 800126c:	4213      	tst	r3, r2
 800126e:	d008      	beq.n	8001282 <__aeabi_ddiv+0x436>
 8001270:	4214      	tst	r4, r2
 8001272:	d106      	bne.n	8001282 <__aeabi_ddiv+0x436>
 8001274:	4322      	orrs	r2, r4
 8001276:	0312      	lsls	r2, r2, #12
 8001278:	46ba      	mov	sl, r7
 800127a:	000d      	movs	r5, r1
 800127c:	4b66      	ldr	r3, [pc, #408]	; (8001418 <__aeabi_ddiv+0x5cc>)
 800127e:	0b12      	lsrs	r2, r2, #12
 8001280:	e63b      	b.n	8000efa <__aeabi_ddiv+0xae>
 8001282:	2280      	movs	r2, #128	; 0x80
 8001284:	4643      	mov	r3, r8
 8001286:	0312      	lsls	r2, r2, #12
 8001288:	431a      	orrs	r2, r3
 800128a:	0312      	lsls	r2, r2, #12
 800128c:	46b2      	mov	sl, r6
 800128e:	4b62      	ldr	r3, [pc, #392]	; (8001418 <__aeabi_ddiv+0x5cc>)
 8001290:	0b12      	lsrs	r2, r2, #12
 8001292:	e632      	b.n	8000efa <__aeabi_ddiv+0xae>
 8001294:	2b00      	cmp	r3, #0
 8001296:	d100      	bne.n	800129a <__aeabi_ddiv+0x44e>
 8001298:	e702      	b.n	80010a0 <__aeabi_ddiv+0x254>
 800129a:	19a6      	adds	r6, r4, r6
 800129c:	1e6a      	subs	r2, r5, #1
 800129e:	42a6      	cmp	r6, r4
 80012a0:	d200      	bcs.n	80012a4 <__aeabi_ddiv+0x458>
 80012a2:	e089      	b.n	80013b8 <__aeabi_ddiv+0x56c>
 80012a4:	4286      	cmp	r6, r0
 80012a6:	d200      	bcs.n	80012aa <__aeabi_ddiv+0x45e>
 80012a8:	e09f      	b.n	80013ea <__aeabi_ddiv+0x59e>
 80012aa:	d100      	bne.n	80012ae <__aeabi_ddiv+0x462>
 80012ac:	e0af      	b.n	800140e <__aeabi_ddiv+0x5c2>
 80012ae:	0015      	movs	r5, r2
 80012b0:	e6f4      	b.n	800109c <__aeabi_ddiv+0x250>
 80012b2:	42a9      	cmp	r1, r5
 80012b4:	d900      	bls.n	80012b8 <__aeabi_ddiv+0x46c>
 80012b6:	e63c      	b.n	8000f32 <__aeabi_ddiv+0xe6>
 80012b8:	4643      	mov	r3, r8
 80012ba:	07de      	lsls	r6, r3, #31
 80012bc:	0858      	lsrs	r0, r3, #1
 80012be:	086b      	lsrs	r3, r5, #1
 80012c0:	431e      	orrs	r6, r3
 80012c2:	07ed      	lsls	r5, r5, #31
 80012c4:	e63c      	b.n	8000f40 <__aeabi_ddiv+0xf4>
 80012c6:	f001 f8a9 	bl	800241c <__clzsi2>
 80012ca:	0001      	movs	r1, r0
 80012cc:	0002      	movs	r2, r0
 80012ce:	3115      	adds	r1, #21
 80012d0:	3220      	adds	r2, #32
 80012d2:	291c      	cmp	r1, #28
 80012d4:	dc00      	bgt.n	80012d8 <__aeabi_ddiv+0x48c>
 80012d6:	e72c      	b.n	8001132 <__aeabi_ddiv+0x2e6>
 80012d8:	464b      	mov	r3, r9
 80012da:	3808      	subs	r0, #8
 80012dc:	4083      	lsls	r3, r0
 80012de:	2500      	movs	r5, #0
 80012e0:	4698      	mov	r8, r3
 80012e2:	e732      	b.n	800114a <__aeabi_ddiv+0x2fe>
 80012e4:	f001 f89a 	bl	800241c <__clzsi2>
 80012e8:	0003      	movs	r3, r0
 80012ea:	001a      	movs	r2, r3
 80012ec:	3215      	adds	r2, #21
 80012ee:	3020      	adds	r0, #32
 80012f0:	2a1c      	cmp	r2, #28
 80012f2:	dc00      	bgt.n	80012f6 <__aeabi_ddiv+0x4aa>
 80012f4:	e6ff      	b.n	80010f6 <__aeabi_ddiv+0x2aa>
 80012f6:	4654      	mov	r4, sl
 80012f8:	3b08      	subs	r3, #8
 80012fa:	2100      	movs	r1, #0
 80012fc:	409c      	lsls	r4, r3
 80012fe:	e705      	b.n	800110c <__aeabi_ddiv+0x2c0>
 8001300:	1936      	adds	r6, r6, r4
 8001302:	3b01      	subs	r3, #1
 8001304:	42b4      	cmp	r4, r6
 8001306:	d900      	bls.n	800130a <__aeabi_ddiv+0x4be>
 8001308:	e6a6      	b.n	8001058 <__aeabi_ddiv+0x20c>
 800130a:	42b2      	cmp	r2, r6
 800130c:	d800      	bhi.n	8001310 <__aeabi_ddiv+0x4c4>
 800130e:	e6a3      	b.n	8001058 <__aeabi_ddiv+0x20c>
 8001310:	1e83      	subs	r3, r0, #2
 8001312:	1936      	adds	r6, r6, r4
 8001314:	e6a0      	b.n	8001058 <__aeabi_ddiv+0x20c>
 8001316:	1909      	adds	r1, r1, r4
 8001318:	3d01      	subs	r5, #1
 800131a:	428c      	cmp	r4, r1
 800131c:	d900      	bls.n	8001320 <__aeabi_ddiv+0x4d4>
 800131e:	e68d      	b.n	800103c <__aeabi_ddiv+0x1f0>
 8001320:	428a      	cmp	r2, r1
 8001322:	d800      	bhi.n	8001326 <__aeabi_ddiv+0x4da>
 8001324:	e68a      	b.n	800103c <__aeabi_ddiv+0x1f0>
 8001326:	1e85      	subs	r5, r0, #2
 8001328:	1909      	adds	r1, r1, r4
 800132a:	e687      	b.n	800103c <__aeabi_ddiv+0x1f0>
 800132c:	220f      	movs	r2, #15
 800132e:	402a      	ands	r2, r5
 8001330:	2a04      	cmp	r2, #4
 8001332:	d100      	bne.n	8001336 <__aeabi_ddiv+0x4ea>
 8001334:	e6bc      	b.n	80010b0 <__aeabi_ddiv+0x264>
 8001336:	1d29      	adds	r1, r5, #4
 8001338:	42a9      	cmp	r1, r5
 800133a:	41ad      	sbcs	r5, r5
 800133c:	426d      	negs	r5, r5
 800133e:	08c9      	lsrs	r1, r1, #3
 8001340:	44a8      	add	r8, r5
 8001342:	e6b6      	b.n	80010b2 <__aeabi_ddiv+0x266>
 8001344:	42af      	cmp	r7, r5
 8001346:	d900      	bls.n	800134a <__aeabi_ddiv+0x4fe>
 8001348:	e662      	b.n	8001010 <__aeabi_ddiv+0x1c4>
 800134a:	4281      	cmp	r1, r0
 800134c:	d804      	bhi.n	8001358 <__aeabi_ddiv+0x50c>
 800134e:	d000      	beq.n	8001352 <__aeabi_ddiv+0x506>
 8001350:	e65e      	b.n	8001010 <__aeabi_ddiv+0x1c4>
 8001352:	42ae      	cmp	r6, r5
 8001354:	d800      	bhi.n	8001358 <__aeabi_ddiv+0x50c>
 8001356:	e65b      	b.n	8001010 <__aeabi_ddiv+0x1c4>
 8001358:	2302      	movs	r3, #2
 800135a:	425b      	negs	r3, r3
 800135c:	469c      	mov	ip, r3
 800135e:	9b00      	ldr	r3, [sp, #0]
 8001360:	44e0      	add	r8, ip
 8001362:	469c      	mov	ip, r3
 8001364:	4465      	add	r5, ip
 8001366:	429d      	cmp	r5, r3
 8001368:	419b      	sbcs	r3, r3
 800136a:	425b      	negs	r3, r3
 800136c:	191b      	adds	r3, r3, r4
 800136e:	18c0      	adds	r0, r0, r3
 8001370:	e64f      	b.n	8001012 <__aeabi_ddiv+0x1c6>
 8001372:	42b2      	cmp	r2, r6
 8001374:	d800      	bhi.n	8001378 <__aeabi_ddiv+0x52c>
 8001376:	e612      	b.n	8000f9e <__aeabi_ddiv+0x152>
 8001378:	1e83      	subs	r3, r0, #2
 800137a:	1936      	adds	r6, r6, r4
 800137c:	e60f      	b.n	8000f9e <__aeabi_ddiv+0x152>
 800137e:	428a      	cmp	r2, r1
 8001380:	d800      	bhi.n	8001384 <__aeabi_ddiv+0x538>
 8001382:	e5fa      	b.n	8000f7a <__aeabi_ddiv+0x12e>
 8001384:	1e83      	subs	r3, r0, #2
 8001386:	4698      	mov	r8, r3
 8001388:	1909      	adds	r1, r1, r4
 800138a:	e5f6      	b.n	8000f7a <__aeabi_ddiv+0x12e>
 800138c:	4b24      	ldr	r3, [pc, #144]	; (8001420 <__aeabi_ddiv+0x5d4>)
 800138e:	0028      	movs	r0, r5
 8001390:	445b      	add	r3, fp
 8001392:	4641      	mov	r1, r8
 8001394:	409d      	lsls	r5, r3
 8001396:	4099      	lsls	r1, r3
 8001398:	40d0      	lsrs	r0, r2
 800139a:	1e6b      	subs	r3, r5, #1
 800139c:	419d      	sbcs	r5, r3
 800139e:	4643      	mov	r3, r8
 80013a0:	4301      	orrs	r1, r0
 80013a2:	4329      	orrs	r1, r5
 80013a4:	40d3      	lsrs	r3, r2
 80013a6:	074a      	lsls	r2, r1, #29
 80013a8:	d100      	bne.n	80013ac <__aeabi_ddiv+0x560>
 80013aa:	e755      	b.n	8001258 <__aeabi_ddiv+0x40c>
 80013ac:	220f      	movs	r2, #15
 80013ae:	400a      	ands	r2, r1
 80013b0:	2a04      	cmp	r2, #4
 80013b2:	d000      	beq.n	80013b6 <__aeabi_ddiv+0x56a>
 80013b4:	e74a      	b.n	800124c <__aeabi_ddiv+0x400>
 80013b6:	e74f      	b.n	8001258 <__aeabi_ddiv+0x40c>
 80013b8:	0015      	movs	r5, r2
 80013ba:	4286      	cmp	r6, r0
 80013bc:	d000      	beq.n	80013c0 <__aeabi_ddiv+0x574>
 80013be:	e66d      	b.n	800109c <__aeabi_ddiv+0x250>
 80013c0:	9a00      	ldr	r2, [sp, #0]
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d000      	beq.n	80013c8 <__aeabi_ddiv+0x57c>
 80013c6:	e669      	b.n	800109c <__aeabi_ddiv+0x250>
 80013c8:	e66a      	b.n	80010a0 <__aeabi_ddiv+0x254>
 80013ca:	4b16      	ldr	r3, [pc, #88]	; (8001424 <__aeabi_ddiv+0x5d8>)
 80013cc:	445b      	add	r3, fp
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	dc00      	bgt.n	80013d4 <__aeabi_ddiv+0x588>
 80013d2:	e713      	b.n	80011fc <__aeabi_ddiv+0x3b0>
 80013d4:	2501      	movs	r5, #1
 80013d6:	2100      	movs	r1, #0
 80013d8:	44a8      	add	r8, r5
 80013da:	e66a      	b.n	80010b2 <__aeabi_ddiv+0x266>
 80013dc:	075d      	lsls	r5, r3, #29
 80013de:	025b      	lsls	r3, r3, #9
 80013e0:	0b1a      	lsrs	r2, r3, #12
 80013e2:	08c9      	lsrs	r1, r1, #3
 80013e4:	2300      	movs	r3, #0
 80013e6:	430d      	orrs	r5, r1
 80013e8:	e587      	b.n	8000efa <__aeabi_ddiv+0xae>
 80013ea:	9900      	ldr	r1, [sp, #0]
 80013ec:	3d02      	subs	r5, #2
 80013ee:	004a      	lsls	r2, r1, #1
 80013f0:	428a      	cmp	r2, r1
 80013f2:	41bf      	sbcs	r7, r7
 80013f4:	427f      	negs	r7, r7
 80013f6:	193f      	adds	r7, r7, r4
 80013f8:	19f6      	adds	r6, r6, r7
 80013fa:	9200      	str	r2, [sp, #0]
 80013fc:	e7dd      	b.n	80013ba <__aeabi_ddiv+0x56e>
 80013fe:	2280      	movs	r2, #128	; 0x80
 8001400:	4643      	mov	r3, r8
 8001402:	0312      	lsls	r2, r2, #12
 8001404:	431a      	orrs	r2, r3
 8001406:	0312      	lsls	r2, r2, #12
 8001408:	4b03      	ldr	r3, [pc, #12]	; (8001418 <__aeabi_ddiv+0x5cc>)
 800140a:	0b12      	lsrs	r2, r2, #12
 800140c:	e575      	b.n	8000efa <__aeabi_ddiv+0xae>
 800140e:	9900      	ldr	r1, [sp, #0]
 8001410:	4299      	cmp	r1, r3
 8001412:	d3ea      	bcc.n	80013ea <__aeabi_ddiv+0x59e>
 8001414:	0015      	movs	r5, r2
 8001416:	e7d3      	b.n	80013c0 <__aeabi_ddiv+0x574>
 8001418:	000007ff 	.word	0x000007ff
 800141c:	0000043e 	.word	0x0000043e
 8001420:	0000041e 	.word	0x0000041e
 8001424:	000003ff 	.word	0x000003ff

08001428 <__eqdf2>:
 8001428:	b5f0      	push	{r4, r5, r6, r7, lr}
 800142a:	464e      	mov	r6, r9
 800142c:	4645      	mov	r5, r8
 800142e:	46de      	mov	lr, fp
 8001430:	4657      	mov	r7, sl
 8001432:	4690      	mov	r8, r2
 8001434:	b5e0      	push	{r5, r6, r7, lr}
 8001436:	0017      	movs	r7, r2
 8001438:	031a      	lsls	r2, r3, #12
 800143a:	0b12      	lsrs	r2, r2, #12
 800143c:	0005      	movs	r5, r0
 800143e:	4684      	mov	ip, r0
 8001440:	4819      	ldr	r0, [pc, #100]	; (80014a8 <__eqdf2+0x80>)
 8001442:	030e      	lsls	r6, r1, #12
 8001444:	004c      	lsls	r4, r1, #1
 8001446:	4691      	mov	r9, r2
 8001448:	005a      	lsls	r2, r3, #1
 800144a:	0fdb      	lsrs	r3, r3, #31
 800144c:	469b      	mov	fp, r3
 800144e:	0b36      	lsrs	r6, r6, #12
 8001450:	0d64      	lsrs	r4, r4, #21
 8001452:	0fc9      	lsrs	r1, r1, #31
 8001454:	0d52      	lsrs	r2, r2, #21
 8001456:	4284      	cmp	r4, r0
 8001458:	d019      	beq.n	800148e <__eqdf2+0x66>
 800145a:	4282      	cmp	r2, r0
 800145c:	d010      	beq.n	8001480 <__eqdf2+0x58>
 800145e:	2001      	movs	r0, #1
 8001460:	4294      	cmp	r4, r2
 8001462:	d10e      	bne.n	8001482 <__eqdf2+0x5a>
 8001464:	454e      	cmp	r6, r9
 8001466:	d10c      	bne.n	8001482 <__eqdf2+0x5a>
 8001468:	2001      	movs	r0, #1
 800146a:	45c4      	cmp	ip, r8
 800146c:	d109      	bne.n	8001482 <__eqdf2+0x5a>
 800146e:	4559      	cmp	r1, fp
 8001470:	d017      	beq.n	80014a2 <__eqdf2+0x7a>
 8001472:	2c00      	cmp	r4, #0
 8001474:	d105      	bne.n	8001482 <__eqdf2+0x5a>
 8001476:	0030      	movs	r0, r6
 8001478:	4328      	orrs	r0, r5
 800147a:	1e43      	subs	r3, r0, #1
 800147c:	4198      	sbcs	r0, r3
 800147e:	e000      	b.n	8001482 <__eqdf2+0x5a>
 8001480:	2001      	movs	r0, #1
 8001482:	bcf0      	pop	{r4, r5, r6, r7}
 8001484:	46bb      	mov	fp, r7
 8001486:	46b2      	mov	sl, r6
 8001488:	46a9      	mov	r9, r5
 800148a:	46a0      	mov	r8, r4
 800148c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800148e:	0033      	movs	r3, r6
 8001490:	2001      	movs	r0, #1
 8001492:	432b      	orrs	r3, r5
 8001494:	d1f5      	bne.n	8001482 <__eqdf2+0x5a>
 8001496:	42a2      	cmp	r2, r4
 8001498:	d1f3      	bne.n	8001482 <__eqdf2+0x5a>
 800149a:	464b      	mov	r3, r9
 800149c:	433b      	orrs	r3, r7
 800149e:	d1f0      	bne.n	8001482 <__eqdf2+0x5a>
 80014a0:	e7e2      	b.n	8001468 <__eqdf2+0x40>
 80014a2:	2000      	movs	r0, #0
 80014a4:	e7ed      	b.n	8001482 <__eqdf2+0x5a>
 80014a6:	46c0      	nop			; (mov r8, r8)
 80014a8:	000007ff 	.word	0x000007ff

080014ac <__gedf2>:
 80014ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80014ae:	4647      	mov	r7, r8
 80014b0:	46ce      	mov	lr, r9
 80014b2:	0004      	movs	r4, r0
 80014b4:	0018      	movs	r0, r3
 80014b6:	0016      	movs	r6, r2
 80014b8:	031b      	lsls	r3, r3, #12
 80014ba:	0b1b      	lsrs	r3, r3, #12
 80014bc:	4d2d      	ldr	r5, [pc, #180]	; (8001574 <__gedf2+0xc8>)
 80014be:	004a      	lsls	r2, r1, #1
 80014c0:	4699      	mov	r9, r3
 80014c2:	b580      	push	{r7, lr}
 80014c4:	0043      	lsls	r3, r0, #1
 80014c6:	030f      	lsls	r7, r1, #12
 80014c8:	46a4      	mov	ip, r4
 80014ca:	46b0      	mov	r8, r6
 80014cc:	0b3f      	lsrs	r7, r7, #12
 80014ce:	0d52      	lsrs	r2, r2, #21
 80014d0:	0fc9      	lsrs	r1, r1, #31
 80014d2:	0d5b      	lsrs	r3, r3, #21
 80014d4:	0fc0      	lsrs	r0, r0, #31
 80014d6:	42aa      	cmp	r2, r5
 80014d8:	d021      	beq.n	800151e <__gedf2+0x72>
 80014da:	42ab      	cmp	r3, r5
 80014dc:	d013      	beq.n	8001506 <__gedf2+0x5a>
 80014de:	2a00      	cmp	r2, #0
 80014e0:	d122      	bne.n	8001528 <__gedf2+0x7c>
 80014e2:	433c      	orrs	r4, r7
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d102      	bne.n	80014ee <__gedf2+0x42>
 80014e8:	464d      	mov	r5, r9
 80014ea:	432e      	orrs	r6, r5
 80014ec:	d022      	beq.n	8001534 <__gedf2+0x88>
 80014ee:	2c00      	cmp	r4, #0
 80014f0:	d010      	beq.n	8001514 <__gedf2+0x68>
 80014f2:	4281      	cmp	r1, r0
 80014f4:	d022      	beq.n	800153c <__gedf2+0x90>
 80014f6:	2002      	movs	r0, #2
 80014f8:	3901      	subs	r1, #1
 80014fa:	4008      	ands	r0, r1
 80014fc:	3801      	subs	r0, #1
 80014fe:	bcc0      	pop	{r6, r7}
 8001500:	46b9      	mov	r9, r7
 8001502:	46b0      	mov	r8, r6
 8001504:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001506:	464d      	mov	r5, r9
 8001508:	432e      	orrs	r6, r5
 800150a:	d129      	bne.n	8001560 <__gedf2+0xb4>
 800150c:	2a00      	cmp	r2, #0
 800150e:	d1f0      	bne.n	80014f2 <__gedf2+0x46>
 8001510:	433c      	orrs	r4, r7
 8001512:	d1ee      	bne.n	80014f2 <__gedf2+0x46>
 8001514:	2800      	cmp	r0, #0
 8001516:	d1f2      	bne.n	80014fe <__gedf2+0x52>
 8001518:	2001      	movs	r0, #1
 800151a:	4240      	negs	r0, r0
 800151c:	e7ef      	b.n	80014fe <__gedf2+0x52>
 800151e:	003d      	movs	r5, r7
 8001520:	4325      	orrs	r5, r4
 8001522:	d11d      	bne.n	8001560 <__gedf2+0xb4>
 8001524:	4293      	cmp	r3, r2
 8001526:	d0ee      	beq.n	8001506 <__gedf2+0x5a>
 8001528:	2b00      	cmp	r3, #0
 800152a:	d1e2      	bne.n	80014f2 <__gedf2+0x46>
 800152c:	464c      	mov	r4, r9
 800152e:	4326      	orrs	r6, r4
 8001530:	d1df      	bne.n	80014f2 <__gedf2+0x46>
 8001532:	e7e0      	b.n	80014f6 <__gedf2+0x4a>
 8001534:	2000      	movs	r0, #0
 8001536:	2c00      	cmp	r4, #0
 8001538:	d0e1      	beq.n	80014fe <__gedf2+0x52>
 800153a:	e7dc      	b.n	80014f6 <__gedf2+0x4a>
 800153c:	429a      	cmp	r2, r3
 800153e:	dc0a      	bgt.n	8001556 <__gedf2+0xaa>
 8001540:	dbe8      	blt.n	8001514 <__gedf2+0x68>
 8001542:	454f      	cmp	r7, r9
 8001544:	d8d7      	bhi.n	80014f6 <__gedf2+0x4a>
 8001546:	d00e      	beq.n	8001566 <__gedf2+0xba>
 8001548:	2000      	movs	r0, #0
 800154a:	454f      	cmp	r7, r9
 800154c:	d2d7      	bcs.n	80014fe <__gedf2+0x52>
 800154e:	2900      	cmp	r1, #0
 8001550:	d0e2      	beq.n	8001518 <__gedf2+0x6c>
 8001552:	0008      	movs	r0, r1
 8001554:	e7d3      	b.n	80014fe <__gedf2+0x52>
 8001556:	4243      	negs	r3, r0
 8001558:	4158      	adcs	r0, r3
 800155a:	0040      	lsls	r0, r0, #1
 800155c:	3801      	subs	r0, #1
 800155e:	e7ce      	b.n	80014fe <__gedf2+0x52>
 8001560:	2002      	movs	r0, #2
 8001562:	4240      	negs	r0, r0
 8001564:	e7cb      	b.n	80014fe <__gedf2+0x52>
 8001566:	45c4      	cmp	ip, r8
 8001568:	d8c5      	bhi.n	80014f6 <__gedf2+0x4a>
 800156a:	2000      	movs	r0, #0
 800156c:	45c4      	cmp	ip, r8
 800156e:	d2c6      	bcs.n	80014fe <__gedf2+0x52>
 8001570:	e7ed      	b.n	800154e <__gedf2+0xa2>
 8001572:	46c0      	nop			; (mov r8, r8)
 8001574:	000007ff 	.word	0x000007ff

08001578 <__ledf2>:
 8001578:	b5f0      	push	{r4, r5, r6, r7, lr}
 800157a:	4647      	mov	r7, r8
 800157c:	46ce      	mov	lr, r9
 800157e:	0004      	movs	r4, r0
 8001580:	0018      	movs	r0, r3
 8001582:	0016      	movs	r6, r2
 8001584:	031b      	lsls	r3, r3, #12
 8001586:	0b1b      	lsrs	r3, r3, #12
 8001588:	4d2c      	ldr	r5, [pc, #176]	; (800163c <__ledf2+0xc4>)
 800158a:	004a      	lsls	r2, r1, #1
 800158c:	4699      	mov	r9, r3
 800158e:	b580      	push	{r7, lr}
 8001590:	0043      	lsls	r3, r0, #1
 8001592:	030f      	lsls	r7, r1, #12
 8001594:	46a4      	mov	ip, r4
 8001596:	46b0      	mov	r8, r6
 8001598:	0b3f      	lsrs	r7, r7, #12
 800159a:	0d52      	lsrs	r2, r2, #21
 800159c:	0fc9      	lsrs	r1, r1, #31
 800159e:	0d5b      	lsrs	r3, r3, #21
 80015a0:	0fc0      	lsrs	r0, r0, #31
 80015a2:	42aa      	cmp	r2, r5
 80015a4:	d00d      	beq.n	80015c2 <__ledf2+0x4a>
 80015a6:	42ab      	cmp	r3, r5
 80015a8:	d010      	beq.n	80015cc <__ledf2+0x54>
 80015aa:	2a00      	cmp	r2, #0
 80015ac:	d127      	bne.n	80015fe <__ledf2+0x86>
 80015ae:	433c      	orrs	r4, r7
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d111      	bne.n	80015d8 <__ledf2+0x60>
 80015b4:	464d      	mov	r5, r9
 80015b6:	432e      	orrs	r6, r5
 80015b8:	d10e      	bne.n	80015d8 <__ledf2+0x60>
 80015ba:	2000      	movs	r0, #0
 80015bc:	2c00      	cmp	r4, #0
 80015be:	d015      	beq.n	80015ec <__ledf2+0x74>
 80015c0:	e00e      	b.n	80015e0 <__ledf2+0x68>
 80015c2:	003d      	movs	r5, r7
 80015c4:	4325      	orrs	r5, r4
 80015c6:	d110      	bne.n	80015ea <__ledf2+0x72>
 80015c8:	4293      	cmp	r3, r2
 80015ca:	d118      	bne.n	80015fe <__ledf2+0x86>
 80015cc:	464d      	mov	r5, r9
 80015ce:	432e      	orrs	r6, r5
 80015d0:	d10b      	bne.n	80015ea <__ledf2+0x72>
 80015d2:	2a00      	cmp	r2, #0
 80015d4:	d102      	bne.n	80015dc <__ledf2+0x64>
 80015d6:	433c      	orrs	r4, r7
 80015d8:	2c00      	cmp	r4, #0
 80015da:	d00b      	beq.n	80015f4 <__ledf2+0x7c>
 80015dc:	4281      	cmp	r1, r0
 80015de:	d014      	beq.n	800160a <__ledf2+0x92>
 80015e0:	2002      	movs	r0, #2
 80015e2:	3901      	subs	r1, #1
 80015e4:	4008      	ands	r0, r1
 80015e6:	3801      	subs	r0, #1
 80015e8:	e000      	b.n	80015ec <__ledf2+0x74>
 80015ea:	2002      	movs	r0, #2
 80015ec:	bcc0      	pop	{r6, r7}
 80015ee:	46b9      	mov	r9, r7
 80015f0:	46b0      	mov	r8, r6
 80015f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80015f4:	2800      	cmp	r0, #0
 80015f6:	d1f9      	bne.n	80015ec <__ledf2+0x74>
 80015f8:	2001      	movs	r0, #1
 80015fa:	4240      	negs	r0, r0
 80015fc:	e7f6      	b.n	80015ec <__ledf2+0x74>
 80015fe:	2b00      	cmp	r3, #0
 8001600:	d1ec      	bne.n	80015dc <__ledf2+0x64>
 8001602:	464c      	mov	r4, r9
 8001604:	4326      	orrs	r6, r4
 8001606:	d1e9      	bne.n	80015dc <__ledf2+0x64>
 8001608:	e7ea      	b.n	80015e0 <__ledf2+0x68>
 800160a:	429a      	cmp	r2, r3
 800160c:	dd04      	ble.n	8001618 <__ledf2+0xa0>
 800160e:	4243      	negs	r3, r0
 8001610:	4158      	adcs	r0, r3
 8001612:	0040      	lsls	r0, r0, #1
 8001614:	3801      	subs	r0, #1
 8001616:	e7e9      	b.n	80015ec <__ledf2+0x74>
 8001618:	429a      	cmp	r2, r3
 800161a:	dbeb      	blt.n	80015f4 <__ledf2+0x7c>
 800161c:	454f      	cmp	r7, r9
 800161e:	d8df      	bhi.n	80015e0 <__ledf2+0x68>
 8001620:	d006      	beq.n	8001630 <__ledf2+0xb8>
 8001622:	2000      	movs	r0, #0
 8001624:	454f      	cmp	r7, r9
 8001626:	d2e1      	bcs.n	80015ec <__ledf2+0x74>
 8001628:	2900      	cmp	r1, #0
 800162a:	d0e5      	beq.n	80015f8 <__ledf2+0x80>
 800162c:	0008      	movs	r0, r1
 800162e:	e7dd      	b.n	80015ec <__ledf2+0x74>
 8001630:	45c4      	cmp	ip, r8
 8001632:	d8d5      	bhi.n	80015e0 <__ledf2+0x68>
 8001634:	2000      	movs	r0, #0
 8001636:	45c4      	cmp	ip, r8
 8001638:	d2d8      	bcs.n	80015ec <__ledf2+0x74>
 800163a:	e7f5      	b.n	8001628 <__ledf2+0xb0>
 800163c:	000007ff 	.word	0x000007ff

08001640 <__aeabi_dmul>:
 8001640:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001642:	4645      	mov	r5, r8
 8001644:	46de      	mov	lr, fp
 8001646:	4657      	mov	r7, sl
 8001648:	464e      	mov	r6, r9
 800164a:	b5e0      	push	{r5, r6, r7, lr}
 800164c:	001f      	movs	r7, r3
 800164e:	030b      	lsls	r3, r1, #12
 8001650:	0b1b      	lsrs	r3, r3, #12
 8001652:	469b      	mov	fp, r3
 8001654:	004d      	lsls	r5, r1, #1
 8001656:	0fcb      	lsrs	r3, r1, #31
 8001658:	0004      	movs	r4, r0
 800165a:	4691      	mov	r9, r2
 800165c:	4698      	mov	r8, r3
 800165e:	b087      	sub	sp, #28
 8001660:	0d6d      	lsrs	r5, r5, #21
 8001662:	d100      	bne.n	8001666 <__aeabi_dmul+0x26>
 8001664:	e1cd      	b.n	8001a02 <__aeabi_dmul+0x3c2>
 8001666:	4bce      	ldr	r3, [pc, #824]	; (80019a0 <__aeabi_dmul+0x360>)
 8001668:	429d      	cmp	r5, r3
 800166a:	d100      	bne.n	800166e <__aeabi_dmul+0x2e>
 800166c:	e1e9      	b.n	8001a42 <__aeabi_dmul+0x402>
 800166e:	465a      	mov	r2, fp
 8001670:	0f43      	lsrs	r3, r0, #29
 8001672:	00d2      	lsls	r2, r2, #3
 8001674:	4313      	orrs	r3, r2
 8001676:	2280      	movs	r2, #128	; 0x80
 8001678:	0412      	lsls	r2, r2, #16
 800167a:	431a      	orrs	r2, r3
 800167c:	00c3      	lsls	r3, r0, #3
 800167e:	469a      	mov	sl, r3
 8001680:	4bc8      	ldr	r3, [pc, #800]	; (80019a4 <__aeabi_dmul+0x364>)
 8001682:	4693      	mov	fp, r2
 8001684:	469c      	mov	ip, r3
 8001686:	2300      	movs	r3, #0
 8001688:	2600      	movs	r6, #0
 800168a:	4465      	add	r5, ip
 800168c:	9300      	str	r3, [sp, #0]
 800168e:	033c      	lsls	r4, r7, #12
 8001690:	007b      	lsls	r3, r7, #1
 8001692:	4648      	mov	r0, r9
 8001694:	0b24      	lsrs	r4, r4, #12
 8001696:	0d5b      	lsrs	r3, r3, #21
 8001698:	0fff      	lsrs	r7, r7, #31
 800169a:	2b00      	cmp	r3, #0
 800169c:	d100      	bne.n	80016a0 <__aeabi_dmul+0x60>
 800169e:	e189      	b.n	80019b4 <__aeabi_dmul+0x374>
 80016a0:	4abf      	ldr	r2, [pc, #764]	; (80019a0 <__aeabi_dmul+0x360>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d019      	beq.n	80016da <__aeabi_dmul+0x9a>
 80016a6:	0f42      	lsrs	r2, r0, #29
 80016a8:	00e4      	lsls	r4, r4, #3
 80016aa:	4322      	orrs	r2, r4
 80016ac:	2480      	movs	r4, #128	; 0x80
 80016ae:	0424      	lsls	r4, r4, #16
 80016b0:	4314      	orrs	r4, r2
 80016b2:	4abc      	ldr	r2, [pc, #752]	; (80019a4 <__aeabi_dmul+0x364>)
 80016b4:	2100      	movs	r1, #0
 80016b6:	4694      	mov	ip, r2
 80016b8:	4642      	mov	r2, r8
 80016ba:	4463      	add	r3, ip
 80016bc:	195b      	adds	r3, r3, r5
 80016be:	9301      	str	r3, [sp, #4]
 80016c0:	9b01      	ldr	r3, [sp, #4]
 80016c2:	407a      	eors	r2, r7
 80016c4:	3301      	adds	r3, #1
 80016c6:	00c0      	lsls	r0, r0, #3
 80016c8:	b2d2      	uxtb	r2, r2
 80016ca:	9302      	str	r3, [sp, #8]
 80016cc:	2e0a      	cmp	r6, #10
 80016ce:	dd1c      	ble.n	800170a <__aeabi_dmul+0xca>
 80016d0:	003a      	movs	r2, r7
 80016d2:	2e0b      	cmp	r6, #11
 80016d4:	d05e      	beq.n	8001794 <__aeabi_dmul+0x154>
 80016d6:	4647      	mov	r7, r8
 80016d8:	e056      	b.n	8001788 <__aeabi_dmul+0x148>
 80016da:	4649      	mov	r1, r9
 80016dc:	4bb0      	ldr	r3, [pc, #704]	; (80019a0 <__aeabi_dmul+0x360>)
 80016de:	4321      	orrs	r1, r4
 80016e0:	18eb      	adds	r3, r5, r3
 80016e2:	9301      	str	r3, [sp, #4]
 80016e4:	2900      	cmp	r1, #0
 80016e6:	d12a      	bne.n	800173e <__aeabi_dmul+0xfe>
 80016e8:	2080      	movs	r0, #128	; 0x80
 80016ea:	2202      	movs	r2, #2
 80016ec:	0100      	lsls	r0, r0, #4
 80016ee:	002b      	movs	r3, r5
 80016f0:	4684      	mov	ip, r0
 80016f2:	4316      	orrs	r6, r2
 80016f4:	4642      	mov	r2, r8
 80016f6:	4463      	add	r3, ip
 80016f8:	407a      	eors	r2, r7
 80016fa:	b2d2      	uxtb	r2, r2
 80016fc:	9302      	str	r3, [sp, #8]
 80016fe:	2e0a      	cmp	r6, #10
 8001700:	dd00      	ble.n	8001704 <__aeabi_dmul+0xc4>
 8001702:	e231      	b.n	8001b68 <__aeabi_dmul+0x528>
 8001704:	2000      	movs	r0, #0
 8001706:	2400      	movs	r4, #0
 8001708:	2102      	movs	r1, #2
 800170a:	2e02      	cmp	r6, #2
 800170c:	dc26      	bgt.n	800175c <__aeabi_dmul+0x11c>
 800170e:	3e01      	subs	r6, #1
 8001710:	2e01      	cmp	r6, #1
 8001712:	d852      	bhi.n	80017ba <__aeabi_dmul+0x17a>
 8001714:	2902      	cmp	r1, #2
 8001716:	d04c      	beq.n	80017b2 <__aeabi_dmul+0x172>
 8001718:	2901      	cmp	r1, #1
 800171a:	d000      	beq.n	800171e <__aeabi_dmul+0xde>
 800171c:	e118      	b.n	8001950 <__aeabi_dmul+0x310>
 800171e:	2300      	movs	r3, #0
 8001720:	2400      	movs	r4, #0
 8001722:	2500      	movs	r5, #0
 8001724:	051b      	lsls	r3, r3, #20
 8001726:	4323      	orrs	r3, r4
 8001728:	07d2      	lsls	r2, r2, #31
 800172a:	4313      	orrs	r3, r2
 800172c:	0028      	movs	r0, r5
 800172e:	0019      	movs	r1, r3
 8001730:	b007      	add	sp, #28
 8001732:	bcf0      	pop	{r4, r5, r6, r7}
 8001734:	46bb      	mov	fp, r7
 8001736:	46b2      	mov	sl, r6
 8001738:	46a9      	mov	r9, r5
 800173a:	46a0      	mov	r8, r4
 800173c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800173e:	2180      	movs	r1, #128	; 0x80
 8001740:	2203      	movs	r2, #3
 8001742:	0109      	lsls	r1, r1, #4
 8001744:	002b      	movs	r3, r5
 8001746:	468c      	mov	ip, r1
 8001748:	4316      	orrs	r6, r2
 800174a:	4642      	mov	r2, r8
 800174c:	4463      	add	r3, ip
 800174e:	407a      	eors	r2, r7
 8001750:	b2d2      	uxtb	r2, r2
 8001752:	9302      	str	r3, [sp, #8]
 8001754:	2e0a      	cmp	r6, #10
 8001756:	dd00      	ble.n	800175a <__aeabi_dmul+0x11a>
 8001758:	e228      	b.n	8001bac <__aeabi_dmul+0x56c>
 800175a:	2103      	movs	r1, #3
 800175c:	2501      	movs	r5, #1
 800175e:	40b5      	lsls	r5, r6
 8001760:	46ac      	mov	ip, r5
 8001762:	26a6      	movs	r6, #166	; 0xa6
 8001764:	4663      	mov	r3, ip
 8001766:	00f6      	lsls	r6, r6, #3
 8001768:	4035      	ands	r5, r6
 800176a:	4233      	tst	r3, r6
 800176c:	d10b      	bne.n	8001786 <__aeabi_dmul+0x146>
 800176e:	2690      	movs	r6, #144	; 0x90
 8001770:	00b6      	lsls	r6, r6, #2
 8001772:	4233      	tst	r3, r6
 8001774:	d118      	bne.n	80017a8 <__aeabi_dmul+0x168>
 8001776:	3eb9      	subs	r6, #185	; 0xb9
 8001778:	3eff      	subs	r6, #255	; 0xff
 800177a:	421e      	tst	r6, r3
 800177c:	d01d      	beq.n	80017ba <__aeabi_dmul+0x17a>
 800177e:	46a3      	mov	fp, r4
 8001780:	4682      	mov	sl, r0
 8001782:	9100      	str	r1, [sp, #0]
 8001784:	e000      	b.n	8001788 <__aeabi_dmul+0x148>
 8001786:	0017      	movs	r7, r2
 8001788:	9900      	ldr	r1, [sp, #0]
 800178a:	003a      	movs	r2, r7
 800178c:	2902      	cmp	r1, #2
 800178e:	d010      	beq.n	80017b2 <__aeabi_dmul+0x172>
 8001790:	465c      	mov	r4, fp
 8001792:	4650      	mov	r0, sl
 8001794:	2903      	cmp	r1, #3
 8001796:	d1bf      	bne.n	8001718 <__aeabi_dmul+0xd8>
 8001798:	2380      	movs	r3, #128	; 0x80
 800179a:	031b      	lsls	r3, r3, #12
 800179c:	431c      	orrs	r4, r3
 800179e:	0324      	lsls	r4, r4, #12
 80017a0:	0005      	movs	r5, r0
 80017a2:	4b7f      	ldr	r3, [pc, #508]	; (80019a0 <__aeabi_dmul+0x360>)
 80017a4:	0b24      	lsrs	r4, r4, #12
 80017a6:	e7bd      	b.n	8001724 <__aeabi_dmul+0xe4>
 80017a8:	2480      	movs	r4, #128	; 0x80
 80017aa:	2200      	movs	r2, #0
 80017ac:	4b7c      	ldr	r3, [pc, #496]	; (80019a0 <__aeabi_dmul+0x360>)
 80017ae:	0324      	lsls	r4, r4, #12
 80017b0:	e7b8      	b.n	8001724 <__aeabi_dmul+0xe4>
 80017b2:	2400      	movs	r4, #0
 80017b4:	2500      	movs	r5, #0
 80017b6:	4b7a      	ldr	r3, [pc, #488]	; (80019a0 <__aeabi_dmul+0x360>)
 80017b8:	e7b4      	b.n	8001724 <__aeabi_dmul+0xe4>
 80017ba:	4653      	mov	r3, sl
 80017bc:	041e      	lsls	r6, r3, #16
 80017be:	0c36      	lsrs	r6, r6, #16
 80017c0:	0c1f      	lsrs	r7, r3, #16
 80017c2:	0033      	movs	r3, r6
 80017c4:	0c01      	lsrs	r1, r0, #16
 80017c6:	0400      	lsls	r0, r0, #16
 80017c8:	0c00      	lsrs	r0, r0, #16
 80017ca:	4343      	muls	r3, r0
 80017cc:	4698      	mov	r8, r3
 80017ce:	0003      	movs	r3, r0
 80017d0:	437b      	muls	r3, r7
 80017d2:	4699      	mov	r9, r3
 80017d4:	0033      	movs	r3, r6
 80017d6:	434b      	muls	r3, r1
 80017d8:	469c      	mov	ip, r3
 80017da:	4643      	mov	r3, r8
 80017dc:	000d      	movs	r5, r1
 80017de:	0c1b      	lsrs	r3, r3, #16
 80017e0:	469a      	mov	sl, r3
 80017e2:	437d      	muls	r5, r7
 80017e4:	44cc      	add	ip, r9
 80017e6:	44d4      	add	ip, sl
 80017e8:	9500      	str	r5, [sp, #0]
 80017ea:	45e1      	cmp	r9, ip
 80017ec:	d904      	bls.n	80017f8 <__aeabi_dmul+0x1b8>
 80017ee:	2380      	movs	r3, #128	; 0x80
 80017f0:	025b      	lsls	r3, r3, #9
 80017f2:	4699      	mov	r9, r3
 80017f4:	444d      	add	r5, r9
 80017f6:	9500      	str	r5, [sp, #0]
 80017f8:	4663      	mov	r3, ip
 80017fa:	0c1b      	lsrs	r3, r3, #16
 80017fc:	001d      	movs	r5, r3
 80017fe:	4663      	mov	r3, ip
 8001800:	041b      	lsls	r3, r3, #16
 8001802:	469c      	mov	ip, r3
 8001804:	4643      	mov	r3, r8
 8001806:	041b      	lsls	r3, r3, #16
 8001808:	0c1b      	lsrs	r3, r3, #16
 800180a:	4698      	mov	r8, r3
 800180c:	4663      	mov	r3, ip
 800180e:	4443      	add	r3, r8
 8001810:	9303      	str	r3, [sp, #12]
 8001812:	0c23      	lsrs	r3, r4, #16
 8001814:	4698      	mov	r8, r3
 8001816:	0033      	movs	r3, r6
 8001818:	0424      	lsls	r4, r4, #16
 800181a:	0c24      	lsrs	r4, r4, #16
 800181c:	4363      	muls	r3, r4
 800181e:	469c      	mov	ip, r3
 8001820:	0023      	movs	r3, r4
 8001822:	437b      	muls	r3, r7
 8001824:	4699      	mov	r9, r3
 8001826:	4643      	mov	r3, r8
 8001828:	435e      	muls	r6, r3
 800182a:	435f      	muls	r7, r3
 800182c:	444e      	add	r6, r9
 800182e:	4663      	mov	r3, ip
 8001830:	46b2      	mov	sl, r6
 8001832:	0c1e      	lsrs	r6, r3, #16
 8001834:	4456      	add	r6, sl
 8001836:	45b1      	cmp	r9, r6
 8001838:	d903      	bls.n	8001842 <__aeabi_dmul+0x202>
 800183a:	2380      	movs	r3, #128	; 0x80
 800183c:	025b      	lsls	r3, r3, #9
 800183e:	4699      	mov	r9, r3
 8001840:	444f      	add	r7, r9
 8001842:	0c33      	lsrs	r3, r6, #16
 8001844:	4699      	mov	r9, r3
 8001846:	003b      	movs	r3, r7
 8001848:	444b      	add	r3, r9
 800184a:	9305      	str	r3, [sp, #20]
 800184c:	4663      	mov	r3, ip
 800184e:	46ac      	mov	ip, r5
 8001850:	041f      	lsls	r7, r3, #16
 8001852:	0c3f      	lsrs	r7, r7, #16
 8001854:	0436      	lsls	r6, r6, #16
 8001856:	19f6      	adds	r6, r6, r7
 8001858:	44b4      	add	ip, r6
 800185a:	4663      	mov	r3, ip
 800185c:	9304      	str	r3, [sp, #16]
 800185e:	465b      	mov	r3, fp
 8001860:	0c1b      	lsrs	r3, r3, #16
 8001862:	469c      	mov	ip, r3
 8001864:	465b      	mov	r3, fp
 8001866:	041f      	lsls	r7, r3, #16
 8001868:	0c3f      	lsrs	r7, r7, #16
 800186a:	003b      	movs	r3, r7
 800186c:	4343      	muls	r3, r0
 800186e:	4699      	mov	r9, r3
 8001870:	4663      	mov	r3, ip
 8001872:	4343      	muls	r3, r0
 8001874:	469a      	mov	sl, r3
 8001876:	464b      	mov	r3, r9
 8001878:	4660      	mov	r0, ip
 800187a:	0c1b      	lsrs	r3, r3, #16
 800187c:	469b      	mov	fp, r3
 800187e:	4348      	muls	r0, r1
 8001880:	4379      	muls	r1, r7
 8001882:	4451      	add	r1, sl
 8001884:	4459      	add	r1, fp
 8001886:	458a      	cmp	sl, r1
 8001888:	d903      	bls.n	8001892 <__aeabi_dmul+0x252>
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	025b      	lsls	r3, r3, #9
 800188e:	469a      	mov	sl, r3
 8001890:	4450      	add	r0, sl
 8001892:	0c0b      	lsrs	r3, r1, #16
 8001894:	469a      	mov	sl, r3
 8001896:	464b      	mov	r3, r9
 8001898:	041b      	lsls	r3, r3, #16
 800189a:	0c1b      	lsrs	r3, r3, #16
 800189c:	4699      	mov	r9, r3
 800189e:	003b      	movs	r3, r7
 80018a0:	4363      	muls	r3, r4
 80018a2:	0409      	lsls	r1, r1, #16
 80018a4:	4645      	mov	r5, r8
 80018a6:	4449      	add	r1, r9
 80018a8:	4699      	mov	r9, r3
 80018aa:	4663      	mov	r3, ip
 80018ac:	435c      	muls	r4, r3
 80018ae:	436b      	muls	r3, r5
 80018b0:	469c      	mov	ip, r3
 80018b2:	464b      	mov	r3, r9
 80018b4:	0c1b      	lsrs	r3, r3, #16
 80018b6:	4698      	mov	r8, r3
 80018b8:	436f      	muls	r7, r5
 80018ba:	193f      	adds	r7, r7, r4
 80018bc:	4447      	add	r7, r8
 80018be:	4450      	add	r0, sl
 80018c0:	42bc      	cmp	r4, r7
 80018c2:	d903      	bls.n	80018cc <__aeabi_dmul+0x28c>
 80018c4:	2380      	movs	r3, #128	; 0x80
 80018c6:	025b      	lsls	r3, r3, #9
 80018c8:	4698      	mov	r8, r3
 80018ca:	44c4      	add	ip, r8
 80018cc:	9b04      	ldr	r3, [sp, #16]
 80018ce:	9d00      	ldr	r5, [sp, #0]
 80018d0:	4698      	mov	r8, r3
 80018d2:	4445      	add	r5, r8
 80018d4:	42b5      	cmp	r5, r6
 80018d6:	41b6      	sbcs	r6, r6
 80018d8:	4273      	negs	r3, r6
 80018da:	4698      	mov	r8, r3
 80018dc:	464b      	mov	r3, r9
 80018de:	041e      	lsls	r6, r3, #16
 80018e0:	9b05      	ldr	r3, [sp, #20]
 80018e2:	043c      	lsls	r4, r7, #16
 80018e4:	4699      	mov	r9, r3
 80018e6:	0c36      	lsrs	r6, r6, #16
 80018e8:	19a4      	adds	r4, r4, r6
 80018ea:	444c      	add	r4, r9
 80018ec:	46a1      	mov	r9, r4
 80018ee:	4683      	mov	fp, r0
 80018f0:	186e      	adds	r6, r5, r1
 80018f2:	44c1      	add	r9, r8
 80018f4:	428e      	cmp	r6, r1
 80018f6:	4189      	sbcs	r1, r1
 80018f8:	44cb      	add	fp, r9
 80018fa:	465d      	mov	r5, fp
 80018fc:	4249      	negs	r1, r1
 80018fe:	186d      	adds	r5, r5, r1
 8001900:	429c      	cmp	r4, r3
 8001902:	41a4      	sbcs	r4, r4
 8001904:	45c1      	cmp	r9, r8
 8001906:	419b      	sbcs	r3, r3
 8001908:	4583      	cmp	fp, r0
 800190a:	4180      	sbcs	r0, r0
 800190c:	428d      	cmp	r5, r1
 800190e:	4189      	sbcs	r1, r1
 8001910:	425b      	negs	r3, r3
 8001912:	4264      	negs	r4, r4
 8001914:	431c      	orrs	r4, r3
 8001916:	4240      	negs	r0, r0
 8001918:	9b03      	ldr	r3, [sp, #12]
 800191a:	4249      	negs	r1, r1
 800191c:	4301      	orrs	r1, r0
 800191e:	0270      	lsls	r0, r6, #9
 8001920:	0c3f      	lsrs	r7, r7, #16
 8001922:	4318      	orrs	r0, r3
 8001924:	19e4      	adds	r4, r4, r7
 8001926:	1e47      	subs	r7, r0, #1
 8001928:	41b8      	sbcs	r0, r7
 800192a:	1864      	adds	r4, r4, r1
 800192c:	4464      	add	r4, ip
 800192e:	0df6      	lsrs	r6, r6, #23
 8001930:	0261      	lsls	r1, r4, #9
 8001932:	4330      	orrs	r0, r6
 8001934:	0dec      	lsrs	r4, r5, #23
 8001936:	026e      	lsls	r6, r5, #9
 8001938:	430c      	orrs	r4, r1
 800193a:	4330      	orrs	r0, r6
 800193c:	01c9      	lsls	r1, r1, #7
 800193e:	d400      	bmi.n	8001942 <__aeabi_dmul+0x302>
 8001940:	e0f1      	b.n	8001b26 <__aeabi_dmul+0x4e6>
 8001942:	2101      	movs	r1, #1
 8001944:	0843      	lsrs	r3, r0, #1
 8001946:	4001      	ands	r1, r0
 8001948:	430b      	orrs	r3, r1
 800194a:	07e0      	lsls	r0, r4, #31
 800194c:	4318      	orrs	r0, r3
 800194e:	0864      	lsrs	r4, r4, #1
 8001950:	4915      	ldr	r1, [pc, #84]	; (80019a8 <__aeabi_dmul+0x368>)
 8001952:	9b02      	ldr	r3, [sp, #8]
 8001954:	468c      	mov	ip, r1
 8001956:	4463      	add	r3, ip
 8001958:	2b00      	cmp	r3, #0
 800195a:	dc00      	bgt.n	800195e <__aeabi_dmul+0x31e>
 800195c:	e097      	b.n	8001a8e <__aeabi_dmul+0x44e>
 800195e:	0741      	lsls	r1, r0, #29
 8001960:	d009      	beq.n	8001976 <__aeabi_dmul+0x336>
 8001962:	210f      	movs	r1, #15
 8001964:	4001      	ands	r1, r0
 8001966:	2904      	cmp	r1, #4
 8001968:	d005      	beq.n	8001976 <__aeabi_dmul+0x336>
 800196a:	1d01      	adds	r1, r0, #4
 800196c:	4281      	cmp	r1, r0
 800196e:	4180      	sbcs	r0, r0
 8001970:	4240      	negs	r0, r0
 8001972:	1824      	adds	r4, r4, r0
 8001974:	0008      	movs	r0, r1
 8001976:	01e1      	lsls	r1, r4, #7
 8001978:	d506      	bpl.n	8001988 <__aeabi_dmul+0x348>
 800197a:	2180      	movs	r1, #128	; 0x80
 800197c:	00c9      	lsls	r1, r1, #3
 800197e:	468c      	mov	ip, r1
 8001980:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <__aeabi_dmul+0x36c>)
 8001982:	401c      	ands	r4, r3
 8001984:	9b02      	ldr	r3, [sp, #8]
 8001986:	4463      	add	r3, ip
 8001988:	4909      	ldr	r1, [pc, #36]	; (80019b0 <__aeabi_dmul+0x370>)
 800198a:	428b      	cmp	r3, r1
 800198c:	dd00      	ble.n	8001990 <__aeabi_dmul+0x350>
 800198e:	e710      	b.n	80017b2 <__aeabi_dmul+0x172>
 8001990:	0761      	lsls	r1, r4, #29
 8001992:	08c5      	lsrs	r5, r0, #3
 8001994:	0264      	lsls	r4, r4, #9
 8001996:	055b      	lsls	r3, r3, #21
 8001998:	430d      	orrs	r5, r1
 800199a:	0b24      	lsrs	r4, r4, #12
 800199c:	0d5b      	lsrs	r3, r3, #21
 800199e:	e6c1      	b.n	8001724 <__aeabi_dmul+0xe4>
 80019a0:	000007ff 	.word	0x000007ff
 80019a4:	fffffc01 	.word	0xfffffc01
 80019a8:	000003ff 	.word	0x000003ff
 80019ac:	feffffff 	.word	0xfeffffff
 80019b0:	000007fe 	.word	0x000007fe
 80019b4:	464b      	mov	r3, r9
 80019b6:	4323      	orrs	r3, r4
 80019b8:	d059      	beq.n	8001a6e <__aeabi_dmul+0x42e>
 80019ba:	2c00      	cmp	r4, #0
 80019bc:	d100      	bne.n	80019c0 <__aeabi_dmul+0x380>
 80019be:	e0a3      	b.n	8001b08 <__aeabi_dmul+0x4c8>
 80019c0:	0020      	movs	r0, r4
 80019c2:	f000 fd2b 	bl	800241c <__clzsi2>
 80019c6:	0001      	movs	r1, r0
 80019c8:	0003      	movs	r3, r0
 80019ca:	390b      	subs	r1, #11
 80019cc:	221d      	movs	r2, #29
 80019ce:	1a52      	subs	r2, r2, r1
 80019d0:	4649      	mov	r1, r9
 80019d2:	0018      	movs	r0, r3
 80019d4:	40d1      	lsrs	r1, r2
 80019d6:	464a      	mov	r2, r9
 80019d8:	3808      	subs	r0, #8
 80019da:	4082      	lsls	r2, r0
 80019dc:	4084      	lsls	r4, r0
 80019de:	0010      	movs	r0, r2
 80019e0:	430c      	orrs	r4, r1
 80019e2:	4a74      	ldr	r2, [pc, #464]	; (8001bb4 <__aeabi_dmul+0x574>)
 80019e4:	1aeb      	subs	r3, r5, r3
 80019e6:	4694      	mov	ip, r2
 80019e8:	4642      	mov	r2, r8
 80019ea:	4463      	add	r3, ip
 80019ec:	9301      	str	r3, [sp, #4]
 80019ee:	9b01      	ldr	r3, [sp, #4]
 80019f0:	407a      	eors	r2, r7
 80019f2:	3301      	adds	r3, #1
 80019f4:	2100      	movs	r1, #0
 80019f6:	b2d2      	uxtb	r2, r2
 80019f8:	9302      	str	r3, [sp, #8]
 80019fa:	2e0a      	cmp	r6, #10
 80019fc:	dd00      	ble.n	8001a00 <__aeabi_dmul+0x3c0>
 80019fe:	e667      	b.n	80016d0 <__aeabi_dmul+0x90>
 8001a00:	e683      	b.n	800170a <__aeabi_dmul+0xca>
 8001a02:	465b      	mov	r3, fp
 8001a04:	4303      	orrs	r3, r0
 8001a06:	469a      	mov	sl, r3
 8001a08:	d02a      	beq.n	8001a60 <__aeabi_dmul+0x420>
 8001a0a:	465b      	mov	r3, fp
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d06d      	beq.n	8001aec <__aeabi_dmul+0x4ac>
 8001a10:	4658      	mov	r0, fp
 8001a12:	f000 fd03 	bl	800241c <__clzsi2>
 8001a16:	0001      	movs	r1, r0
 8001a18:	0003      	movs	r3, r0
 8001a1a:	390b      	subs	r1, #11
 8001a1c:	221d      	movs	r2, #29
 8001a1e:	1a52      	subs	r2, r2, r1
 8001a20:	0021      	movs	r1, r4
 8001a22:	0018      	movs	r0, r3
 8001a24:	465d      	mov	r5, fp
 8001a26:	40d1      	lsrs	r1, r2
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4085      	lsls	r5, r0
 8001a2c:	000a      	movs	r2, r1
 8001a2e:	4084      	lsls	r4, r0
 8001a30:	432a      	orrs	r2, r5
 8001a32:	4693      	mov	fp, r2
 8001a34:	46a2      	mov	sl, r4
 8001a36:	4d5f      	ldr	r5, [pc, #380]	; (8001bb4 <__aeabi_dmul+0x574>)
 8001a38:	2600      	movs	r6, #0
 8001a3a:	1aed      	subs	r5, r5, r3
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	9300      	str	r3, [sp, #0]
 8001a40:	e625      	b.n	800168e <__aeabi_dmul+0x4e>
 8001a42:	465b      	mov	r3, fp
 8001a44:	4303      	orrs	r3, r0
 8001a46:	469a      	mov	sl, r3
 8001a48:	d105      	bne.n	8001a56 <__aeabi_dmul+0x416>
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	469b      	mov	fp, r3
 8001a4e:	3302      	adds	r3, #2
 8001a50:	2608      	movs	r6, #8
 8001a52:	9300      	str	r3, [sp, #0]
 8001a54:	e61b      	b.n	800168e <__aeabi_dmul+0x4e>
 8001a56:	2303      	movs	r3, #3
 8001a58:	4682      	mov	sl, r0
 8001a5a:	260c      	movs	r6, #12
 8001a5c:	9300      	str	r3, [sp, #0]
 8001a5e:	e616      	b.n	800168e <__aeabi_dmul+0x4e>
 8001a60:	2300      	movs	r3, #0
 8001a62:	469b      	mov	fp, r3
 8001a64:	3301      	adds	r3, #1
 8001a66:	2604      	movs	r6, #4
 8001a68:	2500      	movs	r5, #0
 8001a6a:	9300      	str	r3, [sp, #0]
 8001a6c:	e60f      	b.n	800168e <__aeabi_dmul+0x4e>
 8001a6e:	4642      	mov	r2, r8
 8001a70:	3301      	adds	r3, #1
 8001a72:	9501      	str	r5, [sp, #4]
 8001a74:	431e      	orrs	r6, r3
 8001a76:	9b01      	ldr	r3, [sp, #4]
 8001a78:	407a      	eors	r2, r7
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	2400      	movs	r4, #0
 8001a7e:	2000      	movs	r0, #0
 8001a80:	2101      	movs	r1, #1
 8001a82:	b2d2      	uxtb	r2, r2
 8001a84:	9302      	str	r3, [sp, #8]
 8001a86:	2e0a      	cmp	r6, #10
 8001a88:	dd00      	ble.n	8001a8c <__aeabi_dmul+0x44c>
 8001a8a:	e621      	b.n	80016d0 <__aeabi_dmul+0x90>
 8001a8c:	e63d      	b.n	800170a <__aeabi_dmul+0xca>
 8001a8e:	2101      	movs	r1, #1
 8001a90:	1ac9      	subs	r1, r1, r3
 8001a92:	2938      	cmp	r1, #56	; 0x38
 8001a94:	dd00      	ble.n	8001a98 <__aeabi_dmul+0x458>
 8001a96:	e642      	b.n	800171e <__aeabi_dmul+0xde>
 8001a98:	291f      	cmp	r1, #31
 8001a9a:	dd47      	ble.n	8001b2c <__aeabi_dmul+0x4ec>
 8001a9c:	261f      	movs	r6, #31
 8001a9e:	0025      	movs	r5, r4
 8001aa0:	4276      	negs	r6, r6
 8001aa2:	1af3      	subs	r3, r6, r3
 8001aa4:	40dd      	lsrs	r5, r3
 8001aa6:	002b      	movs	r3, r5
 8001aa8:	2920      	cmp	r1, #32
 8001aaa:	d005      	beq.n	8001ab8 <__aeabi_dmul+0x478>
 8001aac:	4942      	ldr	r1, [pc, #264]	; (8001bb8 <__aeabi_dmul+0x578>)
 8001aae:	9d02      	ldr	r5, [sp, #8]
 8001ab0:	468c      	mov	ip, r1
 8001ab2:	4465      	add	r5, ip
 8001ab4:	40ac      	lsls	r4, r5
 8001ab6:	4320      	orrs	r0, r4
 8001ab8:	1e41      	subs	r1, r0, #1
 8001aba:	4188      	sbcs	r0, r1
 8001abc:	4318      	orrs	r0, r3
 8001abe:	2307      	movs	r3, #7
 8001ac0:	001d      	movs	r5, r3
 8001ac2:	2400      	movs	r4, #0
 8001ac4:	4005      	ands	r5, r0
 8001ac6:	4203      	tst	r3, r0
 8001ac8:	d04a      	beq.n	8001b60 <__aeabi_dmul+0x520>
 8001aca:	230f      	movs	r3, #15
 8001acc:	2400      	movs	r4, #0
 8001ace:	4003      	ands	r3, r0
 8001ad0:	2b04      	cmp	r3, #4
 8001ad2:	d042      	beq.n	8001b5a <__aeabi_dmul+0x51a>
 8001ad4:	1d03      	adds	r3, r0, #4
 8001ad6:	4283      	cmp	r3, r0
 8001ad8:	4180      	sbcs	r0, r0
 8001ada:	4240      	negs	r0, r0
 8001adc:	1824      	adds	r4, r4, r0
 8001ade:	0018      	movs	r0, r3
 8001ae0:	0223      	lsls	r3, r4, #8
 8001ae2:	d53a      	bpl.n	8001b5a <__aeabi_dmul+0x51a>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	2400      	movs	r4, #0
 8001ae8:	2500      	movs	r5, #0
 8001aea:	e61b      	b.n	8001724 <__aeabi_dmul+0xe4>
 8001aec:	f000 fc96 	bl	800241c <__clzsi2>
 8001af0:	0001      	movs	r1, r0
 8001af2:	0003      	movs	r3, r0
 8001af4:	3115      	adds	r1, #21
 8001af6:	3320      	adds	r3, #32
 8001af8:	291c      	cmp	r1, #28
 8001afa:	dd8f      	ble.n	8001a1c <__aeabi_dmul+0x3dc>
 8001afc:	3808      	subs	r0, #8
 8001afe:	2200      	movs	r2, #0
 8001b00:	4084      	lsls	r4, r0
 8001b02:	4692      	mov	sl, r2
 8001b04:	46a3      	mov	fp, r4
 8001b06:	e796      	b.n	8001a36 <__aeabi_dmul+0x3f6>
 8001b08:	f000 fc88 	bl	800241c <__clzsi2>
 8001b0c:	0001      	movs	r1, r0
 8001b0e:	0003      	movs	r3, r0
 8001b10:	3115      	adds	r1, #21
 8001b12:	3320      	adds	r3, #32
 8001b14:	291c      	cmp	r1, #28
 8001b16:	dc00      	bgt.n	8001b1a <__aeabi_dmul+0x4da>
 8001b18:	e758      	b.n	80019cc <__aeabi_dmul+0x38c>
 8001b1a:	0002      	movs	r2, r0
 8001b1c:	464c      	mov	r4, r9
 8001b1e:	3a08      	subs	r2, #8
 8001b20:	2000      	movs	r0, #0
 8001b22:	4094      	lsls	r4, r2
 8001b24:	e75d      	b.n	80019e2 <__aeabi_dmul+0x3a2>
 8001b26:	9b01      	ldr	r3, [sp, #4]
 8001b28:	9302      	str	r3, [sp, #8]
 8001b2a:	e711      	b.n	8001950 <__aeabi_dmul+0x310>
 8001b2c:	4b23      	ldr	r3, [pc, #140]	; (8001bbc <__aeabi_dmul+0x57c>)
 8001b2e:	0026      	movs	r6, r4
 8001b30:	469c      	mov	ip, r3
 8001b32:	0003      	movs	r3, r0
 8001b34:	9d02      	ldr	r5, [sp, #8]
 8001b36:	40cb      	lsrs	r3, r1
 8001b38:	4465      	add	r5, ip
 8001b3a:	40ae      	lsls	r6, r5
 8001b3c:	431e      	orrs	r6, r3
 8001b3e:	0003      	movs	r3, r0
 8001b40:	40ab      	lsls	r3, r5
 8001b42:	1e58      	subs	r0, r3, #1
 8001b44:	4183      	sbcs	r3, r0
 8001b46:	0030      	movs	r0, r6
 8001b48:	4318      	orrs	r0, r3
 8001b4a:	40cc      	lsrs	r4, r1
 8001b4c:	0743      	lsls	r3, r0, #29
 8001b4e:	d0c7      	beq.n	8001ae0 <__aeabi_dmul+0x4a0>
 8001b50:	230f      	movs	r3, #15
 8001b52:	4003      	ands	r3, r0
 8001b54:	2b04      	cmp	r3, #4
 8001b56:	d1bd      	bne.n	8001ad4 <__aeabi_dmul+0x494>
 8001b58:	e7c2      	b.n	8001ae0 <__aeabi_dmul+0x4a0>
 8001b5a:	0765      	lsls	r5, r4, #29
 8001b5c:	0264      	lsls	r4, r4, #9
 8001b5e:	0b24      	lsrs	r4, r4, #12
 8001b60:	08c0      	lsrs	r0, r0, #3
 8001b62:	2300      	movs	r3, #0
 8001b64:	4305      	orrs	r5, r0
 8001b66:	e5dd      	b.n	8001724 <__aeabi_dmul+0xe4>
 8001b68:	2500      	movs	r5, #0
 8001b6a:	2302      	movs	r3, #2
 8001b6c:	2e0f      	cmp	r6, #15
 8001b6e:	d10c      	bne.n	8001b8a <__aeabi_dmul+0x54a>
 8001b70:	2480      	movs	r4, #128	; 0x80
 8001b72:	465b      	mov	r3, fp
 8001b74:	0324      	lsls	r4, r4, #12
 8001b76:	4223      	tst	r3, r4
 8001b78:	d00e      	beq.n	8001b98 <__aeabi_dmul+0x558>
 8001b7a:	4221      	tst	r1, r4
 8001b7c:	d10c      	bne.n	8001b98 <__aeabi_dmul+0x558>
 8001b7e:	430c      	orrs	r4, r1
 8001b80:	0324      	lsls	r4, r4, #12
 8001b82:	003a      	movs	r2, r7
 8001b84:	4b0e      	ldr	r3, [pc, #56]	; (8001bc0 <__aeabi_dmul+0x580>)
 8001b86:	0b24      	lsrs	r4, r4, #12
 8001b88:	e5cc      	b.n	8001724 <__aeabi_dmul+0xe4>
 8001b8a:	2e0b      	cmp	r6, #11
 8001b8c:	d000      	beq.n	8001b90 <__aeabi_dmul+0x550>
 8001b8e:	e5a2      	b.n	80016d6 <__aeabi_dmul+0x96>
 8001b90:	468b      	mov	fp, r1
 8001b92:	46aa      	mov	sl, r5
 8001b94:	9300      	str	r3, [sp, #0]
 8001b96:	e5f7      	b.n	8001788 <__aeabi_dmul+0x148>
 8001b98:	2480      	movs	r4, #128	; 0x80
 8001b9a:	465b      	mov	r3, fp
 8001b9c:	0324      	lsls	r4, r4, #12
 8001b9e:	431c      	orrs	r4, r3
 8001ba0:	0324      	lsls	r4, r4, #12
 8001ba2:	4642      	mov	r2, r8
 8001ba4:	4655      	mov	r5, sl
 8001ba6:	4b06      	ldr	r3, [pc, #24]	; (8001bc0 <__aeabi_dmul+0x580>)
 8001ba8:	0b24      	lsrs	r4, r4, #12
 8001baa:	e5bb      	b.n	8001724 <__aeabi_dmul+0xe4>
 8001bac:	464d      	mov	r5, r9
 8001bae:	0021      	movs	r1, r4
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e7db      	b.n	8001b6c <__aeabi_dmul+0x52c>
 8001bb4:	fffffc0d 	.word	0xfffffc0d
 8001bb8:	0000043e 	.word	0x0000043e
 8001bbc:	0000041e 	.word	0x0000041e
 8001bc0:	000007ff 	.word	0x000007ff

08001bc4 <__aeabi_dsub>:
 8001bc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001bc6:	4657      	mov	r7, sl
 8001bc8:	464e      	mov	r6, r9
 8001bca:	4645      	mov	r5, r8
 8001bcc:	46de      	mov	lr, fp
 8001bce:	b5e0      	push	{r5, r6, r7, lr}
 8001bd0:	000d      	movs	r5, r1
 8001bd2:	0004      	movs	r4, r0
 8001bd4:	0019      	movs	r1, r3
 8001bd6:	0010      	movs	r0, r2
 8001bd8:	032b      	lsls	r3, r5, #12
 8001bda:	0a5b      	lsrs	r3, r3, #9
 8001bdc:	0f62      	lsrs	r2, r4, #29
 8001bde:	431a      	orrs	r2, r3
 8001be0:	00e3      	lsls	r3, r4, #3
 8001be2:	030c      	lsls	r4, r1, #12
 8001be4:	0a64      	lsrs	r4, r4, #9
 8001be6:	0f47      	lsrs	r7, r0, #29
 8001be8:	4327      	orrs	r7, r4
 8001bea:	4cd0      	ldr	r4, [pc, #832]	; (8001f2c <__aeabi_dsub+0x368>)
 8001bec:	006e      	lsls	r6, r5, #1
 8001bee:	4691      	mov	r9, r2
 8001bf0:	b083      	sub	sp, #12
 8001bf2:	004a      	lsls	r2, r1, #1
 8001bf4:	00c0      	lsls	r0, r0, #3
 8001bf6:	4698      	mov	r8, r3
 8001bf8:	46a2      	mov	sl, r4
 8001bfa:	0d76      	lsrs	r6, r6, #21
 8001bfc:	0fed      	lsrs	r5, r5, #31
 8001bfe:	0d52      	lsrs	r2, r2, #21
 8001c00:	0fc9      	lsrs	r1, r1, #31
 8001c02:	9001      	str	r0, [sp, #4]
 8001c04:	42a2      	cmp	r2, r4
 8001c06:	d100      	bne.n	8001c0a <__aeabi_dsub+0x46>
 8001c08:	e0b9      	b.n	8001d7e <__aeabi_dsub+0x1ba>
 8001c0a:	2401      	movs	r4, #1
 8001c0c:	4061      	eors	r1, r4
 8001c0e:	468b      	mov	fp, r1
 8001c10:	428d      	cmp	r5, r1
 8001c12:	d100      	bne.n	8001c16 <__aeabi_dsub+0x52>
 8001c14:	e08d      	b.n	8001d32 <__aeabi_dsub+0x16e>
 8001c16:	1ab4      	subs	r4, r6, r2
 8001c18:	46a4      	mov	ip, r4
 8001c1a:	2c00      	cmp	r4, #0
 8001c1c:	dc00      	bgt.n	8001c20 <__aeabi_dsub+0x5c>
 8001c1e:	e0b7      	b.n	8001d90 <__aeabi_dsub+0x1cc>
 8001c20:	2a00      	cmp	r2, #0
 8001c22:	d100      	bne.n	8001c26 <__aeabi_dsub+0x62>
 8001c24:	e0cb      	b.n	8001dbe <__aeabi_dsub+0x1fa>
 8001c26:	4ac1      	ldr	r2, [pc, #772]	; (8001f2c <__aeabi_dsub+0x368>)
 8001c28:	4296      	cmp	r6, r2
 8001c2a:	d100      	bne.n	8001c2e <__aeabi_dsub+0x6a>
 8001c2c:	e186      	b.n	8001f3c <__aeabi_dsub+0x378>
 8001c2e:	2280      	movs	r2, #128	; 0x80
 8001c30:	0412      	lsls	r2, r2, #16
 8001c32:	4317      	orrs	r7, r2
 8001c34:	4662      	mov	r2, ip
 8001c36:	2a38      	cmp	r2, #56	; 0x38
 8001c38:	dd00      	ble.n	8001c3c <__aeabi_dsub+0x78>
 8001c3a:	e1a4      	b.n	8001f86 <__aeabi_dsub+0x3c2>
 8001c3c:	2a1f      	cmp	r2, #31
 8001c3e:	dd00      	ble.n	8001c42 <__aeabi_dsub+0x7e>
 8001c40:	e21d      	b.n	800207e <__aeabi_dsub+0x4ba>
 8001c42:	4661      	mov	r1, ip
 8001c44:	2220      	movs	r2, #32
 8001c46:	003c      	movs	r4, r7
 8001c48:	1a52      	subs	r2, r2, r1
 8001c4a:	0001      	movs	r1, r0
 8001c4c:	4090      	lsls	r0, r2
 8001c4e:	4094      	lsls	r4, r2
 8001c50:	1e42      	subs	r2, r0, #1
 8001c52:	4190      	sbcs	r0, r2
 8001c54:	4662      	mov	r2, ip
 8001c56:	46a0      	mov	r8, r4
 8001c58:	4664      	mov	r4, ip
 8001c5a:	40d7      	lsrs	r7, r2
 8001c5c:	464a      	mov	r2, r9
 8001c5e:	40e1      	lsrs	r1, r4
 8001c60:	4644      	mov	r4, r8
 8001c62:	1bd2      	subs	r2, r2, r7
 8001c64:	4691      	mov	r9, r2
 8001c66:	430c      	orrs	r4, r1
 8001c68:	4304      	orrs	r4, r0
 8001c6a:	1b1c      	subs	r4, r3, r4
 8001c6c:	42a3      	cmp	r3, r4
 8001c6e:	4192      	sbcs	r2, r2
 8001c70:	464b      	mov	r3, r9
 8001c72:	4252      	negs	r2, r2
 8001c74:	1a9b      	subs	r3, r3, r2
 8001c76:	469a      	mov	sl, r3
 8001c78:	4653      	mov	r3, sl
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	d400      	bmi.n	8001c80 <__aeabi_dsub+0xbc>
 8001c7e:	e12b      	b.n	8001ed8 <__aeabi_dsub+0x314>
 8001c80:	4653      	mov	r3, sl
 8001c82:	025a      	lsls	r2, r3, #9
 8001c84:	0a53      	lsrs	r3, r2, #9
 8001c86:	469a      	mov	sl, r3
 8001c88:	4653      	mov	r3, sl
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d100      	bne.n	8001c90 <__aeabi_dsub+0xcc>
 8001c8e:	e166      	b.n	8001f5e <__aeabi_dsub+0x39a>
 8001c90:	4650      	mov	r0, sl
 8001c92:	f000 fbc3 	bl	800241c <__clzsi2>
 8001c96:	0003      	movs	r3, r0
 8001c98:	3b08      	subs	r3, #8
 8001c9a:	2220      	movs	r2, #32
 8001c9c:	0020      	movs	r0, r4
 8001c9e:	1ad2      	subs	r2, r2, r3
 8001ca0:	4651      	mov	r1, sl
 8001ca2:	40d0      	lsrs	r0, r2
 8001ca4:	4099      	lsls	r1, r3
 8001ca6:	0002      	movs	r2, r0
 8001ca8:	409c      	lsls	r4, r3
 8001caa:	430a      	orrs	r2, r1
 8001cac:	429e      	cmp	r6, r3
 8001cae:	dd00      	ble.n	8001cb2 <__aeabi_dsub+0xee>
 8001cb0:	e164      	b.n	8001f7c <__aeabi_dsub+0x3b8>
 8001cb2:	1b9b      	subs	r3, r3, r6
 8001cb4:	1c59      	adds	r1, r3, #1
 8001cb6:	291f      	cmp	r1, #31
 8001cb8:	dd00      	ble.n	8001cbc <__aeabi_dsub+0xf8>
 8001cba:	e0fe      	b.n	8001eba <__aeabi_dsub+0x2f6>
 8001cbc:	2320      	movs	r3, #32
 8001cbe:	0010      	movs	r0, r2
 8001cc0:	0026      	movs	r6, r4
 8001cc2:	1a5b      	subs	r3, r3, r1
 8001cc4:	409c      	lsls	r4, r3
 8001cc6:	4098      	lsls	r0, r3
 8001cc8:	40ce      	lsrs	r6, r1
 8001cca:	40ca      	lsrs	r2, r1
 8001ccc:	1e63      	subs	r3, r4, #1
 8001cce:	419c      	sbcs	r4, r3
 8001cd0:	4330      	orrs	r0, r6
 8001cd2:	4692      	mov	sl, r2
 8001cd4:	2600      	movs	r6, #0
 8001cd6:	4304      	orrs	r4, r0
 8001cd8:	0763      	lsls	r3, r4, #29
 8001cda:	d009      	beq.n	8001cf0 <__aeabi_dsub+0x12c>
 8001cdc:	230f      	movs	r3, #15
 8001cde:	4023      	ands	r3, r4
 8001ce0:	2b04      	cmp	r3, #4
 8001ce2:	d005      	beq.n	8001cf0 <__aeabi_dsub+0x12c>
 8001ce4:	1d23      	adds	r3, r4, #4
 8001ce6:	42a3      	cmp	r3, r4
 8001ce8:	41a4      	sbcs	r4, r4
 8001cea:	4264      	negs	r4, r4
 8001cec:	44a2      	add	sl, r4
 8001cee:	001c      	movs	r4, r3
 8001cf0:	4653      	mov	r3, sl
 8001cf2:	021b      	lsls	r3, r3, #8
 8001cf4:	d400      	bmi.n	8001cf8 <__aeabi_dsub+0x134>
 8001cf6:	e0f2      	b.n	8001ede <__aeabi_dsub+0x31a>
 8001cf8:	4b8c      	ldr	r3, [pc, #560]	; (8001f2c <__aeabi_dsub+0x368>)
 8001cfa:	3601      	adds	r6, #1
 8001cfc:	429e      	cmp	r6, r3
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dsub+0x13e>
 8001d00:	e10f      	b.n	8001f22 <__aeabi_dsub+0x35e>
 8001d02:	4653      	mov	r3, sl
 8001d04:	498a      	ldr	r1, [pc, #552]	; (8001f30 <__aeabi_dsub+0x36c>)
 8001d06:	08e4      	lsrs	r4, r4, #3
 8001d08:	400b      	ands	r3, r1
 8001d0a:	0019      	movs	r1, r3
 8001d0c:	075b      	lsls	r3, r3, #29
 8001d0e:	4323      	orrs	r3, r4
 8001d10:	0572      	lsls	r2, r6, #21
 8001d12:	024c      	lsls	r4, r1, #9
 8001d14:	0b24      	lsrs	r4, r4, #12
 8001d16:	0d52      	lsrs	r2, r2, #21
 8001d18:	0512      	lsls	r2, r2, #20
 8001d1a:	4322      	orrs	r2, r4
 8001d1c:	07ed      	lsls	r5, r5, #31
 8001d1e:	432a      	orrs	r2, r5
 8001d20:	0018      	movs	r0, r3
 8001d22:	0011      	movs	r1, r2
 8001d24:	b003      	add	sp, #12
 8001d26:	bcf0      	pop	{r4, r5, r6, r7}
 8001d28:	46bb      	mov	fp, r7
 8001d2a:	46b2      	mov	sl, r6
 8001d2c:	46a9      	mov	r9, r5
 8001d2e:	46a0      	mov	r8, r4
 8001d30:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d32:	1ab4      	subs	r4, r6, r2
 8001d34:	46a4      	mov	ip, r4
 8001d36:	2c00      	cmp	r4, #0
 8001d38:	dd59      	ble.n	8001dee <__aeabi_dsub+0x22a>
 8001d3a:	2a00      	cmp	r2, #0
 8001d3c:	d100      	bne.n	8001d40 <__aeabi_dsub+0x17c>
 8001d3e:	e0b0      	b.n	8001ea2 <__aeabi_dsub+0x2de>
 8001d40:	4556      	cmp	r6, sl
 8001d42:	d100      	bne.n	8001d46 <__aeabi_dsub+0x182>
 8001d44:	e0fa      	b.n	8001f3c <__aeabi_dsub+0x378>
 8001d46:	2280      	movs	r2, #128	; 0x80
 8001d48:	0412      	lsls	r2, r2, #16
 8001d4a:	4317      	orrs	r7, r2
 8001d4c:	4662      	mov	r2, ip
 8001d4e:	2a38      	cmp	r2, #56	; 0x38
 8001d50:	dd00      	ble.n	8001d54 <__aeabi_dsub+0x190>
 8001d52:	e0d4      	b.n	8001efe <__aeabi_dsub+0x33a>
 8001d54:	2a1f      	cmp	r2, #31
 8001d56:	dc00      	bgt.n	8001d5a <__aeabi_dsub+0x196>
 8001d58:	e1c0      	b.n	80020dc <__aeabi_dsub+0x518>
 8001d5a:	0039      	movs	r1, r7
 8001d5c:	3a20      	subs	r2, #32
 8001d5e:	40d1      	lsrs	r1, r2
 8001d60:	4662      	mov	r2, ip
 8001d62:	2a20      	cmp	r2, #32
 8001d64:	d006      	beq.n	8001d74 <__aeabi_dsub+0x1b0>
 8001d66:	4664      	mov	r4, ip
 8001d68:	2240      	movs	r2, #64	; 0x40
 8001d6a:	1b12      	subs	r2, r2, r4
 8001d6c:	003c      	movs	r4, r7
 8001d6e:	4094      	lsls	r4, r2
 8001d70:	4304      	orrs	r4, r0
 8001d72:	9401      	str	r4, [sp, #4]
 8001d74:	9c01      	ldr	r4, [sp, #4]
 8001d76:	1e62      	subs	r2, r4, #1
 8001d78:	4194      	sbcs	r4, r2
 8001d7a:	430c      	orrs	r4, r1
 8001d7c:	e0c3      	b.n	8001f06 <__aeabi_dsub+0x342>
 8001d7e:	003c      	movs	r4, r7
 8001d80:	4304      	orrs	r4, r0
 8001d82:	d02b      	beq.n	8001ddc <__aeabi_dsub+0x218>
 8001d84:	468b      	mov	fp, r1
 8001d86:	428d      	cmp	r5, r1
 8001d88:	d02e      	beq.n	8001de8 <__aeabi_dsub+0x224>
 8001d8a:	4c6a      	ldr	r4, [pc, #424]	; (8001f34 <__aeabi_dsub+0x370>)
 8001d8c:	46a4      	mov	ip, r4
 8001d8e:	44b4      	add	ip, r6
 8001d90:	4664      	mov	r4, ip
 8001d92:	2c00      	cmp	r4, #0
 8001d94:	d05f      	beq.n	8001e56 <__aeabi_dsub+0x292>
 8001d96:	1b94      	subs	r4, r2, r6
 8001d98:	46a4      	mov	ip, r4
 8001d9a:	2e00      	cmp	r6, #0
 8001d9c:	d000      	beq.n	8001da0 <__aeabi_dsub+0x1dc>
 8001d9e:	e120      	b.n	8001fe2 <__aeabi_dsub+0x41e>
 8001da0:	464c      	mov	r4, r9
 8001da2:	431c      	orrs	r4, r3
 8001da4:	d100      	bne.n	8001da8 <__aeabi_dsub+0x1e4>
 8001da6:	e1c7      	b.n	8002138 <__aeabi_dsub+0x574>
 8001da8:	4661      	mov	r1, ip
 8001daa:	1e4c      	subs	r4, r1, #1
 8001dac:	2901      	cmp	r1, #1
 8001dae:	d100      	bne.n	8001db2 <__aeabi_dsub+0x1ee>
 8001db0:	e223      	b.n	80021fa <__aeabi_dsub+0x636>
 8001db2:	4d5e      	ldr	r5, [pc, #376]	; (8001f2c <__aeabi_dsub+0x368>)
 8001db4:	45ac      	cmp	ip, r5
 8001db6:	d100      	bne.n	8001dba <__aeabi_dsub+0x1f6>
 8001db8:	e1d8      	b.n	800216c <__aeabi_dsub+0x5a8>
 8001dba:	46a4      	mov	ip, r4
 8001dbc:	e11a      	b.n	8001ff4 <__aeabi_dsub+0x430>
 8001dbe:	003a      	movs	r2, r7
 8001dc0:	4302      	orrs	r2, r0
 8001dc2:	d100      	bne.n	8001dc6 <__aeabi_dsub+0x202>
 8001dc4:	e0e4      	b.n	8001f90 <__aeabi_dsub+0x3cc>
 8001dc6:	0022      	movs	r2, r4
 8001dc8:	3a01      	subs	r2, #1
 8001dca:	2c01      	cmp	r4, #1
 8001dcc:	d100      	bne.n	8001dd0 <__aeabi_dsub+0x20c>
 8001dce:	e1c3      	b.n	8002158 <__aeabi_dsub+0x594>
 8001dd0:	4956      	ldr	r1, [pc, #344]	; (8001f2c <__aeabi_dsub+0x368>)
 8001dd2:	428c      	cmp	r4, r1
 8001dd4:	d100      	bne.n	8001dd8 <__aeabi_dsub+0x214>
 8001dd6:	e0b1      	b.n	8001f3c <__aeabi_dsub+0x378>
 8001dd8:	4694      	mov	ip, r2
 8001dda:	e72b      	b.n	8001c34 <__aeabi_dsub+0x70>
 8001ddc:	2401      	movs	r4, #1
 8001dde:	4061      	eors	r1, r4
 8001de0:	468b      	mov	fp, r1
 8001de2:	428d      	cmp	r5, r1
 8001de4:	d000      	beq.n	8001de8 <__aeabi_dsub+0x224>
 8001de6:	e716      	b.n	8001c16 <__aeabi_dsub+0x52>
 8001de8:	4952      	ldr	r1, [pc, #328]	; (8001f34 <__aeabi_dsub+0x370>)
 8001dea:	468c      	mov	ip, r1
 8001dec:	44b4      	add	ip, r6
 8001dee:	4664      	mov	r4, ip
 8001df0:	2c00      	cmp	r4, #0
 8001df2:	d100      	bne.n	8001df6 <__aeabi_dsub+0x232>
 8001df4:	e0d3      	b.n	8001f9e <__aeabi_dsub+0x3da>
 8001df6:	1b91      	subs	r1, r2, r6
 8001df8:	468c      	mov	ip, r1
 8001dfa:	2e00      	cmp	r6, #0
 8001dfc:	d100      	bne.n	8001e00 <__aeabi_dsub+0x23c>
 8001dfe:	e15e      	b.n	80020be <__aeabi_dsub+0x4fa>
 8001e00:	494a      	ldr	r1, [pc, #296]	; (8001f2c <__aeabi_dsub+0x368>)
 8001e02:	428a      	cmp	r2, r1
 8001e04:	d100      	bne.n	8001e08 <__aeabi_dsub+0x244>
 8001e06:	e1be      	b.n	8002186 <__aeabi_dsub+0x5c2>
 8001e08:	2180      	movs	r1, #128	; 0x80
 8001e0a:	464c      	mov	r4, r9
 8001e0c:	0409      	lsls	r1, r1, #16
 8001e0e:	430c      	orrs	r4, r1
 8001e10:	46a1      	mov	r9, r4
 8001e12:	4661      	mov	r1, ip
 8001e14:	2938      	cmp	r1, #56	; 0x38
 8001e16:	dd00      	ble.n	8001e1a <__aeabi_dsub+0x256>
 8001e18:	e1ba      	b.n	8002190 <__aeabi_dsub+0x5cc>
 8001e1a:	291f      	cmp	r1, #31
 8001e1c:	dd00      	ble.n	8001e20 <__aeabi_dsub+0x25c>
 8001e1e:	e227      	b.n	8002270 <__aeabi_dsub+0x6ac>
 8001e20:	2420      	movs	r4, #32
 8001e22:	1a64      	subs	r4, r4, r1
 8001e24:	4649      	mov	r1, r9
 8001e26:	40a1      	lsls	r1, r4
 8001e28:	001e      	movs	r6, r3
 8001e2a:	4688      	mov	r8, r1
 8001e2c:	4661      	mov	r1, ip
 8001e2e:	40a3      	lsls	r3, r4
 8001e30:	40ce      	lsrs	r6, r1
 8001e32:	4641      	mov	r1, r8
 8001e34:	1e5c      	subs	r4, r3, #1
 8001e36:	41a3      	sbcs	r3, r4
 8001e38:	4331      	orrs	r1, r6
 8001e3a:	4319      	orrs	r1, r3
 8001e3c:	000c      	movs	r4, r1
 8001e3e:	4663      	mov	r3, ip
 8001e40:	4649      	mov	r1, r9
 8001e42:	40d9      	lsrs	r1, r3
 8001e44:	187f      	adds	r7, r7, r1
 8001e46:	1824      	adds	r4, r4, r0
 8001e48:	4284      	cmp	r4, r0
 8001e4a:	419b      	sbcs	r3, r3
 8001e4c:	425b      	negs	r3, r3
 8001e4e:	469a      	mov	sl, r3
 8001e50:	0016      	movs	r6, r2
 8001e52:	44ba      	add	sl, r7
 8001e54:	e05d      	b.n	8001f12 <__aeabi_dsub+0x34e>
 8001e56:	4c38      	ldr	r4, [pc, #224]	; (8001f38 <__aeabi_dsub+0x374>)
 8001e58:	1c72      	adds	r2, r6, #1
 8001e5a:	4222      	tst	r2, r4
 8001e5c:	d000      	beq.n	8001e60 <__aeabi_dsub+0x29c>
 8001e5e:	e0df      	b.n	8002020 <__aeabi_dsub+0x45c>
 8001e60:	464a      	mov	r2, r9
 8001e62:	431a      	orrs	r2, r3
 8001e64:	2e00      	cmp	r6, #0
 8001e66:	d000      	beq.n	8001e6a <__aeabi_dsub+0x2a6>
 8001e68:	e15c      	b.n	8002124 <__aeabi_dsub+0x560>
 8001e6a:	2a00      	cmp	r2, #0
 8001e6c:	d100      	bne.n	8001e70 <__aeabi_dsub+0x2ac>
 8001e6e:	e1cf      	b.n	8002210 <__aeabi_dsub+0x64c>
 8001e70:	003a      	movs	r2, r7
 8001e72:	4302      	orrs	r2, r0
 8001e74:	d100      	bne.n	8001e78 <__aeabi_dsub+0x2b4>
 8001e76:	e17f      	b.n	8002178 <__aeabi_dsub+0x5b4>
 8001e78:	1a1c      	subs	r4, r3, r0
 8001e7a:	464a      	mov	r2, r9
 8001e7c:	42a3      	cmp	r3, r4
 8001e7e:	4189      	sbcs	r1, r1
 8001e80:	1bd2      	subs	r2, r2, r7
 8001e82:	4249      	negs	r1, r1
 8001e84:	1a52      	subs	r2, r2, r1
 8001e86:	4692      	mov	sl, r2
 8001e88:	0212      	lsls	r2, r2, #8
 8001e8a:	d400      	bmi.n	8001e8e <__aeabi_dsub+0x2ca>
 8001e8c:	e20a      	b.n	80022a4 <__aeabi_dsub+0x6e0>
 8001e8e:	1ac4      	subs	r4, r0, r3
 8001e90:	42a0      	cmp	r0, r4
 8001e92:	4180      	sbcs	r0, r0
 8001e94:	464b      	mov	r3, r9
 8001e96:	4240      	negs	r0, r0
 8001e98:	1aff      	subs	r7, r7, r3
 8001e9a:	1a3b      	subs	r3, r7, r0
 8001e9c:	469a      	mov	sl, r3
 8001e9e:	465d      	mov	r5, fp
 8001ea0:	e71a      	b.n	8001cd8 <__aeabi_dsub+0x114>
 8001ea2:	003a      	movs	r2, r7
 8001ea4:	4302      	orrs	r2, r0
 8001ea6:	d073      	beq.n	8001f90 <__aeabi_dsub+0x3cc>
 8001ea8:	0022      	movs	r2, r4
 8001eaa:	3a01      	subs	r2, #1
 8001eac:	2c01      	cmp	r4, #1
 8001eae:	d100      	bne.n	8001eb2 <__aeabi_dsub+0x2ee>
 8001eb0:	e0cb      	b.n	800204a <__aeabi_dsub+0x486>
 8001eb2:	4554      	cmp	r4, sl
 8001eb4:	d042      	beq.n	8001f3c <__aeabi_dsub+0x378>
 8001eb6:	4694      	mov	ip, r2
 8001eb8:	e748      	b.n	8001d4c <__aeabi_dsub+0x188>
 8001eba:	0010      	movs	r0, r2
 8001ebc:	3b1f      	subs	r3, #31
 8001ebe:	40d8      	lsrs	r0, r3
 8001ec0:	2920      	cmp	r1, #32
 8001ec2:	d003      	beq.n	8001ecc <__aeabi_dsub+0x308>
 8001ec4:	2340      	movs	r3, #64	; 0x40
 8001ec6:	1a5b      	subs	r3, r3, r1
 8001ec8:	409a      	lsls	r2, r3
 8001eca:	4314      	orrs	r4, r2
 8001ecc:	1e63      	subs	r3, r4, #1
 8001ece:	419c      	sbcs	r4, r3
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	2600      	movs	r6, #0
 8001ed4:	469a      	mov	sl, r3
 8001ed6:	4304      	orrs	r4, r0
 8001ed8:	0763      	lsls	r3, r4, #29
 8001eda:	d000      	beq.n	8001ede <__aeabi_dsub+0x31a>
 8001edc:	e6fe      	b.n	8001cdc <__aeabi_dsub+0x118>
 8001ede:	4652      	mov	r2, sl
 8001ee0:	08e3      	lsrs	r3, r4, #3
 8001ee2:	0752      	lsls	r2, r2, #29
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	4652      	mov	r2, sl
 8001ee8:	46b4      	mov	ip, r6
 8001eea:	08d2      	lsrs	r2, r2, #3
 8001eec:	490f      	ldr	r1, [pc, #60]	; (8001f2c <__aeabi_dsub+0x368>)
 8001eee:	458c      	cmp	ip, r1
 8001ef0:	d02a      	beq.n	8001f48 <__aeabi_dsub+0x384>
 8001ef2:	0312      	lsls	r2, r2, #12
 8001ef4:	0b14      	lsrs	r4, r2, #12
 8001ef6:	4662      	mov	r2, ip
 8001ef8:	0552      	lsls	r2, r2, #21
 8001efa:	0d52      	lsrs	r2, r2, #21
 8001efc:	e70c      	b.n	8001d18 <__aeabi_dsub+0x154>
 8001efe:	003c      	movs	r4, r7
 8001f00:	4304      	orrs	r4, r0
 8001f02:	1e62      	subs	r2, r4, #1
 8001f04:	4194      	sbcs	r4, r2
 8001f06:	18e4      	adds	r4, r4, r3
 8001f08:	429c      	cmp	r4, r3
 8001f0a:	4192      	sbcs	r2, r2
 8001f0c:	4252      	negs	r2, r2
 8001f0e:	444a      	add	r2, r9
 8001f10:	4692      	mov	sl, r2
 8001f12:	4653      	mov	r3, sl
 8001f14:	021b      	lsls	r3, r3, #8
 8001f16:	d5df      	bpl.n	8001ed8 <__aeabi_dsub+0x314>
 8001f18:	4b04      	ldr	r3, [pc, #16]	; (8001f2c <__aeabi_dsub+0x368>)
 8001f1a:	3601      	adds	r6, #1
 8001f1c:	429e      	cmp	r6, r3
 8001f1e:	d000      	beq.n	8001f22 <__aeabi_dsub+0x35e>
 8001f20:	e0a0      	b.n	8002064 <__aeabi_dsub+0x4a0>
 8001f22:	0032      	movs	r2, r6
 8001f24:	2400      	movs	r4, #0
 8001f26:	2300      	movs	r3, #0
 8001f28:	e6f6      	b.n	8001d18 <__aeabi_dsub+0x154>
 8001f2a:	46c0      	nop			; (mov r8, r8)
 8001f2c:	000007ff 	.word	0x000007ff
 8001f30:	ff7fffff 	.word	0xff7fffff
 8001f34:	fffff801 	.word	0xfffff801
 8001f38:	000007fe 	.word	0x000007fe
 8001f3c:	08db      	lsrs	r3, r3, #3
 8001f3e:	464a      	mov	r2, r9
 8001f40:	0752      	lsls	r2, r2, #29
 8001f42:	4313      	orrs	r3, r2
 8001f44:	464a      	mov	r2, r9
 8001f46:	08d2      	lsrs	r2, r2, #3
 8001f48:	0019      	movs	r1, r3
 8001f4a:	4311      	orrs	r1, r2
 8001f4c:	d100      	bne.n	8001f50 <__aeabi_dsub+0x38c>
 8001f4e:	e1b5      	b.n	80022bc <__aeabi_dsub+0x6f8>
 8001f50:	2480      	movs	r4, #128	; 0x80
 8001f52:	0324      	lsls	r4, r4, #12
 8001f54:	4314      	orrs	r4, r2
 8001f56:	0324      	lsls	r4, r4, #12
 8001f58:	4ad5      	ldr	r2, [pc, #852]	; (80022b0 <__aeabi_dsub+0x6ec>)
 8001f5a:	0b24      	lsrs	r4, r4, #12
 8001f5c:	e6dc      	b.n	8001d18 <__aeabi_dsub+0x154>
 8001f5e:	0020      	movs	r0, r4
 8001f60:	f000 fa5c 	bl	800241c <__clzsi2>
 8001f64:	0003      	movs	r3, r0
 8001f66:	3318      	adds	r3, #24
 8001f68:	2b1f      	cmp	r3, #31
 8001f6a:	dc00      	bgt.n	8001f6e <__aeabi_dsub+0x3aa>
 8001f6c:	e695      	b.n	8001c9a <__aeabi_dsub+0xd6>
 8001f6e:	0022      	movs	r2, r4
 8001f70:	3808      	subs	r0, #8
 8001f72:	4082      	lsls	r2, r0
 8001f74:	2400      	movs	r4, #0
 8001f76:	429e      	cmp	r6, r3
 8001f78:	dc00      	bgt.n	8001f7c <__aeabi_dsub+0x3b8>
 8001f7a:	e69a      	b.n	8001cb2 <__aeabi_dsub+0xee>
 8001f7c:	1af6      	subs	r6, r6, r3
 8001f7e:	4bcd      	ldr	r3, [pc, #820]	; (80022b4 <__aeabi_dsub+0x6f0>)
 8001f80:	401a      	ands	r2, r3
 8001f82:	4692      	mov	sl, r2
 8001f84:	e6a8      	b.n	8001cd8 <__aeabi_dsub+0x114>
 8001f86:	003c      	movs	r4, r7
 8001f88:	4304      	orrs	r4, r0
 8001f8a:	1e62      	subs	r2, r4, #1
 8001f8c:	4194      	sbcs	r4, r2
 8001f8e:	e66c      	b.n	8001c6a <__aeabi_dsub+0xa6>
 8001f90:	464a      	mov	r2, r9
 8001f92:	08db      	lsrs	r3, r3, #3
 8001f94:	0752      	lsls	r2, r2, #29
 8001f96:	4313      	orrs	r3, r2
 8001f98:	464a      	mov	r2, r9
 8001f9a:	08d2      	lsrs	r2, r2, #3
 8001f9c:	e7a6      	b.n	8001eec <__aeabi_dsub+0x328>
 8001f9e:	4cc6      	ldr	r4, [pc, #792]	; (80022b8 <__aeabi_dsub+0x6f4>)
 8001fa0:	1c72      	adds	r2, r6, #1
 8001fa2:	4222      	tst	r2, r4
 8001fa4:	d000      	beq.n	8001fa8 <__aeabi_dsub+0x3e4>
 8001fa6:	e0ac      	b.n	8002102 <__aeabi_dsub+0x53e>
 8001fa8:	464a      	mov	r2, r9
 8001faa:	431a      	orrs	r2, r3
 8001fac:	2e00      	cmp	r6, #0
 8001fae:	d000      	beq.n	8001fb2 <__aeabi_dsub+0x3ee>
 8001fb0:	e105      	b.n	80021be <__aeabi_dsub+0x5fa>
 8001fb2:	2a00      	cmp	r2, #0
 8001fb4:	d100      	bne.n	8001fb8 <__aeabi_dsub+0x3f4>
 8001fb6:	e156      	b.n	8002266 <__aeabi_dsub+0x6a2>
 8001fb8:	003a      	movs	r2, r7
 8001fba:	4302      	orrs	r2, r0
 8001fbc:	d100      	bne.n	8001fc0 <__aeabi_dsub+0x3fc>
 8001fbe:	e0db      	b.n	8002178 <__aeabi_dsub+0x5b4>
 8001fc0:	181c      	adds	r4, r3, r0
 8001fc2:	429c      	cmp	r4, r3
 8001fc4:	419b      	sbcs	r3, r3
 8001fc6:	444f      	add	r7, r9
 8001fc8:	46ba      	mov	sl, r7
 8001fca:	425b      	negs	r3, r3
 8001fcc:	449a      	add	sl, r3
 8001fce:	4653      	mov	r3, sl
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	d400      	bmi.n	8001fd6 <__aeabi_dsub+0x412>
 8001fd4:	e780      	b.n	8001ed8 <__aeabi_dsub+0x314>
 8001fd6:	4652      	mov	r2, sl
 8001fd8:	4bb6      	ldr	r3, [pc, #728]	; (80022b4 <__aeabi_dsub+0x6f0>)
 8001fda:	2601      	movs	r6, #1
 8001fdc:	401a      	ands	r2, r3
 8001fde:	4692      	mov	sl, r2
 8001fe0:	e77a      	b.n	8001ed8 <__aeabi_dsub+0x314>
 8001fe2:	4cb3      	ldr	r4, [pc, #716]	; (80022b0 <__aeabi_dsub+0x6ec>)
 8001fe4:	42a2      	cmp	r2, r4
 8001fe6:	d100      	bne.n	8001fea <__aeabi_dsub+0x426>
 8001fe8:	e0c0      	b.n	800216c <__aeabi_dsub+0x5a8>
 8001fea:	2480      	movs	r4, #128	; 0x80
 8001fec:	464d      	mov	r5, r9
 8001fee:	0424      	lsls	r4, r4, #16
 8001ff0:	4325      	orrs	r5, r4
 8001ff2:	46a9      	mov	r9, r5
 8001ff4:	4664      	mov	r4, ip
 8001ff6:	2c38      	cmp	r4, #56	; 0x38
 8001ff8:	dc53      	bgt.n	80020a2 <__aeabi_dsub+0x4de>
 8001ffa:	4661      	mov	r1, ip
 8001ffc:	2c1f      	cmp	r4, #31
 8001ffe:	dd00      	ble.n	8002002 <__aeabi_dsub+0x43e>
 8002000:	e0cd      	b.n	800219e <__aeabi_dsub+0x5da>
 8002002:	2520      	movs	r5, #32
 8002004:	001e      	movs	r6, r3
 8002006:	1b2d      	subs	r5, r5, r4
 8002008:	464c      	mov	r4, r9
 800200a:	40ab      	lsls	r3, r5
 800200c:	40ac      	lsls	r4, r5
 800200e:	40ce      	lsrs	r6, r1
 8002010:	1e5d      	subs	r5, r3, #1
 8002012:	41ab      	sbcs	r3, r5
 8002014:	4334      	orrs	r4, r6
 8002016:	4323      	orrs	r3, r4
 8002018:	464c      	mov	r4, r9
 800201a:	40cc      	lsrs	r4, r1
 800201c:	1b3f      	subs	r7, r7, r4
 800201e:	e045      	b.n	80020ac <__aeabi_dsub+0x4e8>
 8002020:	464a      	mov	r2, r9
 8002022:	1a1c      	subs	r4, r3, r0
 8002024:	1bd1      	subs	r1, r2, r7
 8002026:	42a3      	cmp	r3, r4
 8002028:	4192      	sbcs	r2, r2
 800202a:	4252      	negs	r2, r2
 800202c:	4692      	mov	sl, r2
 800202e:	000a      	movs	r2, r1
 8002030:	4651      	mov	r1, sl
 8002032:	1a52      	subs	r2, r2, r1
 8002034:	4692      	mov	sl, r2
 8002036:	0212      	lsls	r2, r2, #8
 8002038:	d500      	bpl.n	800203c <__aeabi_dsub+0x478>
 800203a:	e083      	b.n	8002144 <__aeabi_dsub+0x580>
 800203c:	4653      	mov	r3, sl
 800203e:	4323      	orrs	r3, r4
 8002040:	d000      	beq.n	8002044 <__aeabi_dsub+0x480>
 8002042:	e621      	b.n	8001c88 <__aeabi_dsub+0xc4>
 8002044:	2200      	movs	r2, #0
 8002046:	2500      	movs	r5, #0
 8002048:	e753      	b.n	8001ef2 <__aeabi_dsub+0x32e>
 800204a:	181c      	adds	r4, r3, r0
 800204c:	429c      	cmp	r4, r3
 800204e:	419b      	sbcs	r3, r3
 8002050:	444f      	add	r7, r9
 8002052:	46ba      	mov	sl, r7
 8002054:	425b      	negs	r3, r3
 8002056:	449a      	add	sl, r3
 8002058:	4653      	mov	r3, sl
 800205a:	2601      	movs	r6, #1
 800205c:	021b      	lsls	r3, r3, #8
 800205e:	d400      	bmi.n	8002062 <__aeabi_dsub+0x49e>
 8002060:	e73a      	b.n	8001ed8 <__aeabi_dsub+0x314>
 8002062:	2602      	movs	r6, #2
 8002064:	4652      	mov	r2, sl
 8002066:	4b93      	ldr	r3, [pc, #588]	; (80022b4 <__aeabi_dsub+0x6f0>)
 8002068:	2101      	movs	r1, #1
 800206a:	401a      	ands	r2, r3
 800206c:	0013      	movs	r3, r2
 800206e:	4021      	ands	r1, r4
 8002070:	0862      	lsrs	r2, r4, #1
 8002072:	430a      	orrs	r2, r1
 8002074:	07dc      	lsls	r4, r3, #31
 8002076:	085b      	lsrs	r3, r3, #1
 8002078:	469a      	mov	sl, r3
 800207a:	4314      	orrs	r4, r2
 800207c:	e62c      	b.n	8001cd8 <__aeabi_dsub+0x114>
 800207e:	0039      	movs	r1, r7
 8002080:	3a20      	subs	r2, #32
 8002082:	40d1      	lsrs	r1, r2
 8002084:	4662      	mov	r2, ip
 8002086:	2a20      	cmp	r2, #32
 8002088:	d006      	beq.n	8002098 <__aeabi_dsub+0x4d4>
 800208a:	4664      	mov	r4, ip
 800208c:	2240      	movs	r2, #64	; 0x40
 800208e:	1b12      	subs	r2, r2, r4
 8002090:	003c      	movs	r4, r7
 8002092:	4094      	lsls	r4, r2
 8002094:	4304      	orrs	r4, r0
 8002096:	9401      	str	r4, [sp, #4]
 8002098:	9c01      	ldr	r4, [sp, #4]
 800209a:	1e62      	subs	r2, r4, #1
 800209c:	4194      	sbcs	r4, r2
 800209e:	430c      	orrs	r4, r1
 80020a0:	e5e3      	b.n	8001c6a <__aeabi_dsub+0xa6>
 80020a2:	4649      	mov	r1, r9
 80020a4:	4319      	orrs	r1, r3
 80020a6:	000b      	movs	r3, r1
 80020a8:	1e5c      	subs	r4, r3, #1
 80020aa:	41a3      	sbcs	r3, r4
 80020ac:	1ac4      	subs	r4, r0, r3
 80020ae:	42a0      	cmp	r0, r4
 80020b0:	419b      	sbcs	r3, r3
 80020b2:	425b      	negs	r3, r3
 80020b4:	1afb      	subs	r3, r7, r3
 80020b6:	469a      	mov	sl, r3
 80020b8:	465d      	mov	r5, fp
 80020ba:	0016      	movs	r6, r2
 80020bc:	e5dc      	b.n	8001c78 <__aeabi_dsub+0xb4>
 80020be:	4649      	mov	r1, r9
 80020c0:	4319      	orrs	r1, r3
 80020c2:	d100      	bne.n	80020c6 <__aeabi_dsub+0x502>
 80020c4:	e0ae      	b.n	8002224 <__aeabi_dsub+0x660>
 80020c6:	4661      	mov	r1, ip
 80020c8:	4664      	mov	r4, ip
 80020ca:	3901      	subs	r1, #1
 80020cc:	2c01      	cmp	r4, #1
 80020ce:	d100      	bne.n	80020d2 <__aeabi_dsub+0x50e>
 80020d0:	e0e0      	b.n	8002294 <__aeabi_dsub+0x6d0>
 80020d2:	4c77      	ldr	r4, [pc, #476]	; (80022b0 <__aeabi_dsub+0x6ec>)
 80020d4:	45a4      	cmp	ip, r4
 80020d6:	d056      	beq.n	8002186 <__aeabi_dsub+0x5c2>
 80020d8:	468c      	mov	ip, r1
 80020da:	e69a      	b.n	8001e12 <__aeabi_dsub+0x24e>
 80020dc:	4661      	mov	r1, ip
 80020de:	2220      	movs	r2, #32
 80020e0:	003c      	movs	r4, r7
 80020e2:	1a52      	subs	r2, r2, r1
 80020e4:	4094      	lsls	r4, r2
 80020e6:	0001      	movs	r1, r0
 80020e8:	4090      	lsls	r0, r2
 80020ea:	46a0      	mov	r8, r4
 80020ec:	4664      	mov	r4, ip
 80020ee:	1e42      	subs	r2, r0, #1
 80020f0:	4190      	sbcs	r0, r2
 80020f2:	4662      	mov	r2, ip
 80020f4:	40e1      	lsrs	r1, r4
 80020f6:	4644      	mov	r4, r8
 80020f8:	40d7      	lsrs	r7, r2
 80020fa:	430c      	orrs	r4, r1
 80020fc:	4304      	orrs	r4, r0
 80020fe:	44b9      	add	r9, r7
 8002100:	e701      	b.n	8001f06 <__aeabi_dsub+0x342>
 8002102:	496b      	ldr	r1, [pc, #428]	; (80022b0 <__aeabi_dsub+0x6ec>)
 8002104:	428a      	cmp	r2, r1
 8002106:	d100      	bne.n	800210a <__aeabi_dsub+0x546>
 8002108:	e70c      	b.n	8001f24 <__aeabi_dsub+0x360>
 800210a:	1818      	adds	r0, r3, r0
 800210c:	4298      	cmp	r0, r3
 800210e:	419b      	sbcs	r3, r3
 8002110:	444f      	add	r7, r9
 8002112:	425b      	negs	r3, r3
 8002114:	18fb      	adds	r3, r7, r3
 8002116:	07dc      	lsls	r4, r3, #31
 8002118:	0840      	lsrs	r0, r0, #1
 800211a:	085b      	lsrs	r3, r3, #1
 800211c:	469a      	mov	sl, r3
 800211e:	0016      	movs	r6, r2
 8002120:	4304      	orrs	r4, r0
 8002122:	e6d9      	b.n	8001ed8 <__aeabi_dsub+0x314>
 8002124:	2a00      	cmp	r2, #0
 8002126:	d000      	beq.n	800212a <__aeabi_dsub+0x566>
 8002128:	e081      	b.n	800222e <__aeabi_dsub+0x66a>
 800212a:	003b      	movs	r3, r7
 800212c:	4303      	orrs	r3, r0
 800212e:	d11d      	bne.n	800216c <__aeabi_dsub+0x5a8>
 8002130:	2280      	movs	r2, #128	; 0x80
 8002132:	2500      	movs	r5, #0
 8002134:	0312      	lsls	r2, r2, #12
 8002136:	e70b      	b.n	8001f50 <__aeabi_dsub+0x38c>
 8002138:	08c0      	lsrs	r0, r0, #3
 800213a:	077b      	lsls	r3, r7, #29
 800213c:	465d      	mov	r5, fp
 800213e:	4303      	orrs	r3, r0
 8002140:	08fa      	lsrs	r2, r7, #3
 8002142:	e6d3      	b.n	8001eec <__aeabi_dsub+0x328>
 8002144:	1ac4      	subs	r4, r0, r3
 8002146:	42a0      	cmp	r0, r4
 8002148:	4180      	sbcs	r0, r0
 800214a:	464b      	mov	r3, r9
 800214c:	4240      	negs	r0, r0
 800214e:	1aff      	subs	r7, r7, r3
 8002150:	1a3b      	subs	r3, r7, r0
 8002152:	469a      	mov	sl, r3
 8002154:	465d      	mov	r5, fp
 8002156:	e597      	b.n	8001c88 <__aeabi_dsub+0xc4>
 8002158:	1a1c      	subs	r4, r3, r0
 800215a:	464a      	mov	r2, r9
 800215c:	42a3      	cmp	r3, r4
 800215e:	419b      	sbcs	r3, r3
 8002160:	1bd7      	subs	r7, r2, r7
 8002162:	425b      	negs	r3, r3
 8002164:	1afb      	subs	r3, r7, r3
 8002166:	469a      	mov	sl, r3
 8002168:	2601      	movs	r6, #1
 800216a:	e585      	b.n	8001c78 <__aeabi_dsub+0xb4>
 800216c:	08c0      	lsrs	r0, r0, #3
 800216e:	077b      	lsls	r3, r7, #29
 8002170:	465d      	mov	r5, fp
 8002172:	4303      	orrs	r3, r0
 8002174:	08fa      	lsrs	r2, r7, #3
 8002176:	e6e7      	b.n	8001f48 <__aeabi_dsub+0x384>
 8002178:	464a      	mov	r2, r9
 800217a:	08db      	lsrs	r3, r3, #3
 800217c:	0752      	lsls	r2, r2, #29
 800217e:	4313      	orrs	r3, r2
 8002180:	464a      	mov	r2, r9
 8002182:	08d2      	lsrs	r2, r2, #3
 8002184:	e6b5      	b.n	8001ef2 <__aeabi_dsub+0x32e>
 8002186:	08c0      	lsrs	r0, r0, #3
 8002188:	077b      	lsls	r3, r7, #29
 800218a:	4303      	orrs	r3, r0
 800218c:	08fa      	lsrs	r2, r7, #3
 800218e:	e6db      	b.n	8001f48 <__aeabi_dsub+0x384>
 8002190:	4649      	mov	r1, r9
 8002192:	4319      	orrs	r1, r3
 8002194:	000b      	movs	r3, r1
 8002196:	1e59      	subs	r1, r3, #1
 8002198:	418b      	sbcs	r3, r1
 800219a:	001c      	movs	r4, r3
 800219c:	e653      	b.n	8001e46 <__aeabi_dsub+0x282>
 800219e:	464d      	mov	r5, r9
 80021a0:	3c20      	subs	r4, #32
 80021a2:	40e5      	lsrs	r5, r4
 80021a4:	2920      	cmp	r1, #32
 80021a6:	d005      	beq.n	80021b4 <__aeabi_dsub+0x5f0>
 80021a8:	2440      	movs	r4, #64	; 0x40
 80021aa:	1a64      	subs	r4, r4, r1
 80021ac:	4649      	mov	r1, r9
 80021ae:	40a1      	lsls	r1, r4
 80021b0:	430b      	orrs	r3, r1
 80021b2:	4698      	mov	r8, r3
 80021b4:	4643      	mov	r3, r8
 80021b6:	1e5c      	subs	r4, r3, #1
 80021b8:	41a3      	sbcs	r3, r4
 80021ba:	432b      	orrs	r3, r5
 80021bc:	e776      	b.n	80020ac <__aeabi_dsub+0x4e8>
 80021be:	2a00      	cmp	r2, #0
 80021c0:	d0e1      	beq.n	8002186 <__aeabi_dsub+0x5c2>
 80021c2:	003a      	movs	r2, r7
 80021c4:	08db      	lsrs	r3, r3, #3
 80021c6:	4302      	orrs	r2, r0
 80021c8:	d100      	bne.n	80021cc <__aeabi_dsub+0x608>
 80021ca:	e6b8      	b.n	8001f3e <__aeabi_dsub+0x37a>
 80021cc:	464a      	mov	r2, r9
 80021ce:	0752      	lsls	r2, r2, #29
 80021d0:	2480      	movs	r4, #128	; 0x80
 80021d2:	4313      	orrs	r3, r2
 80021d4:	464a      	mov	r2, r9
 80021d6:	0324      	lsls	r4, r4, #12
 80021d8:	08d2      	lsrs	r2, r2, #3
 80021da:	4222      	tst	r2, r4
 80021dc:	d007      	beq.n	80021ee <__aeabi_dsub+0x62a>
 80021de:	08fe      	lsrs	r6, r7, #3
 80021e0:	4226      	tst	r6, r4
 80021e2:	d104      	bne.n	80021ee <__aeabi_dsub+0x62a>
 80021e4:	465d      	mov	r5, fp
 80021e6:	0032      	movs	r2, r6
 80021e8:	08c3      	lsrs	r3, r0, #3
 80021ea:	077f      	lsls	r7, r7, #29
 80021ec:	433b      	orrs	r3, r7
 80021ee:	0f59      	lsrs	r1, r3, #29
 80021f0:	00db      	lsls	r3, r3, #3
 80021f2:	0749      	lsls	r1, r1, #29
 80021f4:	08db      	lsrs	r3, r3, #3
 80021f6:	430b      	orrs	r3, r1
 80021f8:	e6a6      	b.n	8001f48 <__aeabi_dsub+0x384>
 80021fa:	1ac4      	subs	r4, r0, r3
 80021fc:	42a0      	cmp	r0, r4
 80021fe:	4180      	sbcs	r0, r0
 8002200:	464b      	mov	r3, r9
 8002202:	4240      	negs	r0, r0
 8002204:	1aff      	subs	r7, r7, r3
 8002206:	1a3b      	subs	r3, r7, r0
 8002208:	469a      	mov	sl, r3
 800220a:	465d      	mov	r5, fp
 800220c:	2601      	movs	r6, #1
 800220e:	e533      	b.n	8001c78 <__aeabi_dsub+0xb4>
 8002210:	003b      	movs	r3, r7
 8002212:	4303      	orrs	r3, r0
 8002214:	d100      	bne.n	8002218 <__aeabi_dsub+0x654>
 8002216:	e715      	b.n	8002044 <__aeabi_dsub+0x480>
 8002218:	08c0      	lsrs	r0, r0, #3
 800221a:	077b      	lsls	r3, r7, #29
 800221c:	465d      	mov	r5, fp
 800221e:	4303      	orrs	r3, r0
 8002220:	08fa      	lsrs	r2, r7, #3
 8002222:	e666      	b.n	8001ef2 <__aeabi_dsub+0x32e>
 8002224:	08c0      	lsrs	r0, r0, #3
 8002226:	077b      	lsls	r3, r7, #29
 8002228:	4303      	orrs	r3, r0
 800222a:	08fa      	lsrs	r2, r7, #3
 800222c:	e65e      	b.n	8001eec <__aeabi_dsub+0x328>
 800222e:	003a      	movs	r2, r7
 8002230:	08db      	lsrs	r3, r3, #3
 8002232:	4302      	orrs	r2, r0
 8002234:	d100      	bne.n	8002238 <__aeabi_dsub+0x674>
 8002236:	e682      	b.n	8001f3e <__aeabi_dsub+0x37a>
 8002238:	464a      	mov	r2, r9
 800223a:	0752      	lsls	r2, r2, #29
 800223c:	2480      	movs	r4, #128	; 0x80
 800223e:	4313      	orrs	r3, r2
 8002240:	464a      	mov	r2, r9
 8002242:	0324      	lsls	r4, r4, #12
 8002244:	08d2      	lsrs	r2, r2, #3
 8002246:	4222      	tst	r2, r4
 8002248:	d007      	beq.n	800225a <__aeabi_dsub+0x696>
 800224a:	08fe      	lsrs	r6, r7, #3
 800224c:	4226      	tst	r6, r4
 800224e:	d104      	bne.n	800225a <__aeabi_dsub+0x696>
 8002250:	465d      	mov	r5, fp
 8002252:	0032      	movs	r2, r6
 8002254:	08c3      	lsrs	r3, r0, #3
 8002256:	077f      	lsls	r7, r7, #29
 8002258:	433b      	orrs	r3, r7
 800225a:	0f59      	lsrs	r1, r3, #29
 800225c:	00db      	lsls	r3, r3, #3
 800225e:	08db      	lsrs	r3, r3, #3
 8002260:	0749      	lsls	r1, r1, #29
 8002262:	430b      	orrs	r3, r1
 8002264:	e670      	b.n	8001f48 <__aeabi_dsub+0x384>
 8002266:	08c0      	lsrs	r0, r0, #3
 8002268:	077b      	lsls	r3, r7, #29
 800226a:	4303      	orrs	r3, r0
 800226c:	08fa      	lsrs	r2, r7, #3
 800226e:	e640      	b.n	8001ef2 <__aeabi_dsub+0x32e>
 8002270:	464c      	mov	r4, r9
 8002272:	3920      	subs	r1, #32
 8002274:	40cc      	lsrs	r4, r1
 8002276:	4661      	mov	r1, ip
 8002278:	2920      	cmp	r1, #32
 800227a:	d006      	beq.n	800228a <__aeabi_dsub+0x6c6>
 800227c:	4666      	mov	r6, ip
 800227e:	2140      	movs	r1, #64	; 0x40
 8002280:	1b89      	subs	r1, r1, r6
 8002282:	464e      	mov	r6, r9
 8002284:	408e      	lsls	r6, r1
 8002286:	4333      	orrs	r3, r6
 8002288:	4698      	mov	r8, r3
 800228a:	4643      	mov	r3, r8
 800228c:	1e59      	subs	r1, r3, #1
 800228e:	418b      	sbcs	r3, r1
 8002290:	431c      	orrs	r4, r3
 8002292:	e5d8      	b.n	8001e46 <__aeabi_dsub+0x282>
 8002294:	181c      	adds	r4, r3, r0
 8002296:	4284      	cmp	r4, r0
 8002298:	4180      	sbcs	r0, r0
 800229a:	444f      	add	r7, r9
 800229c:	46ba      	mov	sl, r7
 800229e:	4240      	negs	r0, r0
 80022a0:	4482      	add	sl, r0
 80022a2:	e6d9      	b.n	8002058 <__aeabi_dsub+0x494>
 80022a4:	4653      	mov	r3, sl
 80022a6:	4323      	orrs	r3, r4
 80022a8:	d100      	bne.n	80022ac <__aeabi_dsub+0x6e8>
 80022aa:	e6cb      	b.n	8002044 <__aeabi_dsub+0x480>
 80022ac:	e614      	b.n	8001ed8 <__aeabi_dsub+0x314>
 80022ae:	46c0      	nop			; (mov r8, r8)
 80022b0:	000007ff 	.word	0x000007ff
 80022b4:	ff7fffff 	.word	0xff7fffff
 80022b8:	000007fe 	.word	0x000007fe
 80022bc:	2300      	movs	r3, #0
 80022be:	4a01      	ldr	r2, [pc, #4]	; (80022c4 <__aeabi_dsub+0x700>)
 80022c0:	001c      	movs	r4, r3
 80022c2:	e529      	b.n	8001d18 <__aeabi_dsub+0x154>
 80022c4:	000007ff 	.word	0x000007ff

080022c8 <__aeabi_dcmpun>:
 80022c8:	b570      	push	{r4, r5, r6, lr}
 80022ca:	0005      	movs	r5, r0
 80022cc:	480c      	ldr	r0, [pc, #48]	; (8002300 <__aeabi_dcmpun+0x38>)
 80022ce:	031c      	lsls	r4, r3, #12
 80022d0:	0016      	movs	r6, r2
 80022d2:	005b      	lsls	r3, r3, #1
 80022d4:	030a      	lsls	r2, r1, #12
 80022d6:	0049      	lsls	r1, r1, #1
 80022d8:	0b12      	lsrs	r2, r2, #12
 80022da:	0d49      	lsrs	r1, r1, #21
 80022dc:	0b24      	lsrs	r4, r4, #12
 80022de:	0d5b      	lsrs	r3, r3, #21
 80022e0:	4281      	cmp	r1, r0
 80022e2:	d008      	beq.n	80022f6 <__aeabi_dcmpun+0x2e>
 80022e4:	4a06      	ldr	r2, [pc, #24]	; (8002300 <__aeabi_dcmpun+0x38>)
 80022e6:	2000      	movs	r0, #0
 80022e8:	4293      	cmp	r3, r2
 80022ea:	d103      	bne.n	80022f4 <__aeabi_dcmpun+0x2c>
 80022ec:	0020      	movs	r0, r4
 80022ee:	4330      	orrs	r0, r6
 80022f0:	1e43      	subs	r3, r0, #1
 80022f2:	4198      	sbcs	r0, r3
 80022f4:	bd70      	pop	{r4, r5, r6, pc}
 80022f6:	2001      	movs	r0, #1
 80022f8:	432a      	orrs	r2, r5
 80022fa:	d1fb      	bne.n	80022f4 <__aeabi_dcmpun+0x2c>
 80022fc:	e7f2      	b.n	80022e4 <__aeabi_dcmpun+0x1c>
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	000007ff 	.word	0x000007ff

08002304 <__aeabi_d2iz>:
 8002304:	000a      	movs	r2, r1
 8002306:	b530      	push	{r4, r5, lr}
 8002308:	4c13      	ldr	r4, [pc, #76]	; (8002358 <__aeabi_d2iz+0x54>)
 800230a:	0053      	lsls	r3, r2, #1
 800230c:	0309      	lsls	r1, r1, #12
 800230e:	0005      	movs	r5, r0
 8002310:	0b09      	lsrs	r1, r1, #12
 8002312:	2000      	movs	r0, #0
 8002314:	0d5b      	lsrs	r3, r3, #21
 8002316:	0fd2      	lsrs	r2, r2, #31
 8002318:	42a3      	cmp	r3, r4
 800231a:	dd04      	ble.n	8002326 <__aeabi_d2iz+0x22>
 800231c:	480f      	ldr	r0, [pc, #60]	; (800235c <__aeabi_d2iz+0x58>)
 800231e:	4283      	cmp	r3, r0
 8002320:	dd02      	ble.n	8002328 <__aeabi_d2iz+0x24>
 8002322:	4b0f      	ldr	r3, [pc, #60]	; (8002360 <__aeabi_d2iz+0x5c>)
 8002324:	18d0      	adds	r0, r2, r3
 8002326:	bd30      	pop	{r4, r5, pc}
 8002328:	2080      	movs	r0, #128	; 0x80
 800232a:	0340      	lsls	r0, r0, #13
 800232c:	4301      	orrs	r1, r0
 800232e:	480d      	ldr	r0, [pc, #52]	; (8002364 <__aeabi_d2iz+0x60>)
 8002330:	1ac0      	subs	r0, r0, r3
 8002332:	281f      	cmp	r0, #31
 8002334:	dd08      	ble.n	8002348 <__aeabi_d2iz+0x44>
 8002336:	480c      	ldr	r0, [pc, #48]	; (8002368 <__aeabi_d2iz+0x64>)
 8002338:	1ac3      	subs	r3, r0, r3
 800233a:	40d9      	lsrs	r1, r3
 800233c:	000b      	movs	r3, r1
 800233e:	4258      	negs	r0, r3
 8002340:	2a00      	cmp	r2, #0
 8002342:	d1f0      	bne.n	8002326 <__aeabi_d2iz+0x22>
 8002344:	0018      	movs	r0, r3
 8002346:	e7ee      	b.n	8002326 <__aeabi_d2iz+0x22>
 8002348:	4c08      	ldr	r4, [pc, #32]	; (800236c <__aeabi_d2iz+0x68>)
 800234a:	40c5      	lsrs	r5, r0
 800234c:	46a4      	mov	ip, r4
 800234e:	4463      	add	r3, ip
 8002350:	4099      	lsls	r1, r3
 8002352:	000b      	movs	r3, r1
 8002354:	432b      	orrs	r3, r5
 8002356:	e7f2      	b.n	800233e <__aeabi_d2iz+0x3a>
 8002358:	000003fe 	.word	0x000003fe
 800235c:	0000041d 	.word	0x0000041d
 8002360:	7fffffff 	.word	0x7fffffff
 8002364:	00000433 	.word	0x00000433
 8002368:	00000413 	.word	0x00000413
 800236c:	fffffbed 	.word	0xfffffbed

08002370 <__aeabi_i2d>:
 8002370:	b570      	push	{r4, r5, r6, lr}
 8002372:	2800      	cmp	r0, #0
 8002374:	d016      	beq.n	80023a4 <__aeabi_i2d+0x34>
 8002376:	17c3      	asrs	r3, r0, #31
 8002378:	18c5      	adds	r5, r0, r3
 800237a:	405d      	eors	r5, r3
 800237c:	0fc4      	lsrs	r4, r0, #31
 800237e:	0028      	movs	r0, r5
 8002380:	f000 f84c 	bl	800241c <__clzsi2>
 8002384:	4b11      	ldr	r3, [pc, #68]	; (80023cc <__aeabi_i2d+0x5c>)
 8002386:	1a1b      	subs	r3, r3, r0
 8002388:	280a      	cmp	r0, #10
 800238a:	dc16      	bgt.n	80023ba <__aeabi_i2d+0x4a>
 800238c:	0002      	movs	r2, r0
 800238e:	002e      	movs	r6, r5
 8002390:	3215      	adds	r2, #21
 8002392:	4096      	lsls	r6, r2
 8002394:	220b      	movs	r2, #11
 8002396:	1a12      	subs	r2, r2, r0
 8002398:	40d5      	lsrs	r5, r2
 800239a:	055b      	lsls	r3, r3, #21
 800239c:	032d      	lsls	r5, r5, #12
 800239e:	0b2d      	lsrs	r5, r5, #12
 80023a0:	0d5b      	lsrs	r3, r3, #21
 80023a2:	e003      	b.n	80023ac <__aeabi_i2d+0x3c>
 80023a4:	2400      	movs	r4, #0
 80023a6:	2300      	movs	r3, #0
 80023a8:	2500      	movs	r5, #0
 80023aa:	2600      	movs	r6, #0
 80023ac:	051b      	lsls	r3, r3, #20
 80023ae:	432b      	orrs	r3, r5
 80023b0:	07e4      	lsls	r4, r4, #31
 80023b2:	4323      	orrs	r3, r4
 80023b4:	0030      	movs	r0, r6
 80023b6:	0019      	movs	r1, r3
 80023b8:	bd70      	pop	{r4, r5, r6, pc}
 80023ba:	380b      	subs	r0, #11
 80023bc:	4085      	lsls	r5, r0
 80023be:	055b      	lsls	r3, r3, #21
 80023c0:	032d      	lsls	r5, r5, #12
 80023c2:	2600      	movs	r6, #0
 80023c4:	0b2d      	lsrs	r5, r5, #12
 80023c6:	0d5b      	lsrs	r3, r3, #21
 80023c8:	e7f0      	b.n	80023ac <__aeabi_i2d+0x3c>
 80023ca:	46c0      	nop			; (mov r8, r8)
 80023cc:	0000041e 	.word	0x0000041e

080023d0 <__aeabi_ui2d>:
 80023d0:	b510      	push	{r4, lr}
 80023d2:	1e04      	subs	r4, r0, #0
 80023d4:	d010      	beq.n	80023f8 <__aeabi_ui2d+0x28>
 80023d6:	f000 f821 	bl	800241c <__clzsi2>
 80023da:	4b0f      	ldr	r3, [pc, #60]	; (8002418 <__aeabi_ui2d+0x48>)
 80023dc:	1a1b      	subs	r3, r3, r0
 80023de:	280a      	cmp	r0, #10
 80023e0:	dc11      	bgt.n	8002406 <__aeabi_ui2d+0x36>
 80023e2:	220b      	movs	r2, #11
 80023e4:	0021      	movs	r1, r4
 80023e6:	1a12      	subs	r2, r2, r0
 80023e8:	40d1      	lsrs	r1, r2
 80023ea:	3015      	adds	r0, #21
 80023ec:	030a      	lsls	r2, r1, #12
 80023ee:	055b      	lsls	r3, r3, #21
 80023f0:	4084      	lsls	r4, r0
 80023f2:	0b12      	lsrs	r2, r2, #12
 80023f4:	0d5b      	lsrs	r3, r3, #21
 80023f6:	e001      	b.n	80023fc <__aeabi_ui2d+0x2c>
 80023f8:	2300      	movs	r3, #0
 80023fa:	2200      	movs	r2, #0
 80023fc:	051b      	lsls	r3, r3, #20
 80023fe:	4313      	orrs	r3, r2
 8002400:	0020      	movs	r0, r4
 8002402:	0019      	movs	r1, r3
 8002404:	bd10      	pop	{r4, pc}
 8002406:	0022      	movs	r2, r4
 8002408:	380b      	subs	r0, #11
 800240a:	4082      	lsls	r2, r0
 800240c:	055b      	lsls	r3, r3, #21
 800240e:	0312      	lsls	r2, r2, #12
 8002410:	2400      	movs	r4, #0
 8002412:	0b12      	lsrs	r2, r2, #12
 8002414:	0d5b      	lsrs	r3, r3, #21
 8002416:	e7f1      	b.n	80023fc <__aeabi_ui2d+0x2c>
 8002418:	0000041e 	.word	0x0000041e

0800241c <__clzsi2>:
 800241c:	211c      	movs	r1, #28
 800241e:	2301      	movs	r3, #1
 8002420:	041b      	lsls	r3, r3, #16
 8002422:	4298      	cmp	r0, r3
 8002424:	d301      	bcc.n	800242a <__clzsi2+0xe>
 8002426:	0c00      	lsrs	r0, r0, #16
 8002428:	3910      	subs	r1, #16
 800242a:	0a1b      	lsrs	r3, r3, #8
 800242c:	4298      	cmp	r0, r3
 800242e:	d301      	bcc.n	8002434 <__clzsi2+0x18>
 8002430:	0a00      	lsrs	r0, r0, #8
 8002432:	3908      	subs	r1, #8
 8002434:	091b      	lsrs	r3, r3, #4
 8002436:	4298      	cmp	r0, r3
 8002438:	d301      	bcc.n	800243e <__clzsi2+0x22>
 800243a:	0900      	lsrs	r0, r0, #4
 800243c:	3904      	subs	r1, #4
 800243e:	a202      	add	r2, pc, #8	; (adr r2, 8002448 <__clzsi2+0x2c>)
 8002440:	5c10      	ldrb	r0, [r2, r0]
 8002442:	1840      	adds	r0, r0, r1
 8002444:	4770      	bx	lr
 8002446:	46c0      	nop			; (mov r8, r8)
 8002448:	02020304 	.word	0x02020304
 800244c:	01010101 	.word	0x01010101
	...

08002458 <__clzdi2>:
 8002458:	b510      	push	{r4, lr}
 800245a:	2900      	cmp	r1, #0
 800245c:	d103      	bne.n	8002466 <__clzdi2+0xe>
 800245e:	f7ff ffdd 	bl	800241c <__clzsi2>
 8002462:	3020      	adds	r0, #32
 8002464:	e002      	b.n	800246c <__clzdi2+0x14>
 8002466:	0008      	movs	r0, r1
 8002468:	f7ff ffd8 	bl	800241c <__clzsi2>
 800246c:	bd10      	pop	{r4, pc}
 800246e:	46c0      	nop			; (mov r8, r8)

08002470 <modem_check_resp>:
/****************************** External Variables **************************************/
extern UART_HandleTypeDef huart1;
extern int Msg_cnt;
/****************************** Function Prototypes **************************************/
uint8_t modem_check_resp(const char *str,char *find_str)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	b082      	sub	sp, #8
 8002474:	af00      	add	r7, sp, #0
 8002476:	6078      	str	r0, [r7, #4]
 8002478:	6039      	str	r1, [r7, #0]
    if (strstr(str, find_str) != NULL)
 800247a:	683a      	ldr	r2, [r7, #0]
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	0011      	movs	r1, r2
 8002480:	0018      	movs	r0, r3
 8002482:	f008 fdf0 	bl	800b066 <strstr>
 8002486:	1e03      	subs	r3, r0, #0
 8002488:	d001      	beq.n	800248e <modem_check_resp+0x1e>
    {
        return 1;
 800248a:	2301      	movs	r3, #1
 800248c:	e000      	b.n	8002490 <modem_check_resp+0x20>
    } else
    {
        return 0;
 800248e:	2300      	movs	r3, #0
    }
}
 8002490:	0018      	movs	r0, r3
 8002492:	46bd      	mov	sp, r7
 8002494:	b002      	add	sp, #8
 8002496:	bd80      	pop	{r7, pc}

08002498 <modem_send_msg>:
void modem_send_msg(const char* msg)
{
 8002498:	b580      	push	{r7, lr}
 800249a:	b082      	sub	sp, #8
 800249c:	af00      	add	r7, sp, #0
 800249e:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t*)msg,strlen(msg), 1000);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	0018      	movs	r0, r3
 80024a4:	f7fd fe30 	bl	8000108 <strlen>
 80024a8:	0003      	movs	r3, r0
 80024aa:	b29a      	uxth	r2, r3
 80024ac:	23fa      	movs	r3, #250	; 0xfa
 80024ae:	009b      	lsls	r3, r3, #2
 80024b0:	6879      	ldr	r1, [r7, #4]
 80024b2:	4807      	ldr	r0, [pc, #28]	; (80024d0 <modem_send_msg+0x38>)
 80024b4:	f004 fa88 	bl	80069c8 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)"\r\n", strlen("\r\n"), 1000);
 80024b8:	23fa      	movs	r3, #250	; 0xfa
 80024ba:	009b      	lsls	r3, r3, #2
 80024bc:	4905      	ldr	r1, [pc, #20]	; (80024d4 <modem_send_msg+0x3c>)
 80024be:	4804      	ldr	r0, [pc, #16]	; (80024d0 <modem_send_msg+0x38>)
 80024c0:	2202      	movs	r2, #2
 80024c2:	f004 fa81 	bl	80069c8 <HAL_UART_Transmit>
}
 80024c6:	46c0      	nop			; (mov r8, r8)
 80024c8:	46bd      	mov	sp, r7
 80024ca:	b002      	add	sp, #8
 80024cc:	bd80      	pop	{r7, pc}
 80024ce:	46c0      	nop			; (mov r8, r8)
 80024d0:	200004c0 	.word	0x200004c0
 80024d4:	0800d0a0 	.word	0x0800d0a0

080024d8 <modem_initiate_cmd>:
void modem_initiate_cmd(uint8_t cmd)
{
 80024d8:	b590      	push	{r4, r7, lr}
 80024da:	b0b9      	sub	sp, #228	; 0xe4
 80024dc:	af04      	add	r7, sp, #16
 80024de:	0002      	movs	r2, r0
 80024e0:	1dfb      	adds	r3, r7, #7
 80024e2:	701a      	strb	r2, [r3, #0]
	switch(cmd)
 80024e4:	1dfb      	adds	r3, r7, #7
 80024e6:	781b      	ldrb	r3, [r3, #0]
 80024e8:	2b29      	cmp	r3, #41	; 0x29
 80024ea:	d900      	bls.n	80024ee <modem_initiate_cmd+0x16>
 80024ec:	e15b      	b.n	80027a6 <modem_initiate_cmd+0x2ce>
 80024ee:	009a      	lsls	r2, r3, #2
 80024f0:	4baf      	ldr	r3, [pc, #700]	; (80027b0 <modem_initiate_cmd+0x2d8>)
 80024f2:	18d3      	adds	r3, r2, r3
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	469f      	mov	pc, r3
	{
		case MODEM_AT_CHECK:
		{
			modem_send_msg("AT");
 80024f8:	4bae      	ldr	r3, [pc, #696]	; (80027b4 <modem_initiate_cmd+0x2dc>)
 80024fa:	0018      	movs	r0, r3
 80024fc:	f7ff ffcc 	bl	8002498 <modem_send_msg>
			cmd_val=MODEM_AT_CHECK;
 8002500:	4bad      	ldr	r3, [pc, #692]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]
			break;
 8002506:	e14f      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_GET_INF0:
		{
			cmd_val=MODEM_GET_INF0;
 8002508:	4bab      	ldr	r3, [pc, #684]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800250a:	2201      	movs	r2, #1
 800250c:	701a      	strb	r2, [r3, #0]
			modem_send_msg("ATI");
 800250e:	4bab      	ldr	r3, [pc, #684]	; (80027bc <modem_initiate_cmd+0x2e4>)
 8002510:	0018      	movs	r0, r3
 8002512:	f7ff ffc1 	bl	8002498 <modem_send_msg>
			break;
 8002516:	e147      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_GET_MANF_ID:
		{
			cmd_val=MODEM_GET_MANF_ID;
 8002518:	4ba7      	ldr	r3, [pc, #668]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800251a:	2204      	movs	r2, #4
 800251c:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+GMI");
 800251e:	4ba8      	ldr	r3, [pc, #672]	; (80027c0 <modem_initiate_cmd+0x2e8>)
 8002520:	0018      	movs	r0, r3
 8002522:	f7ff ffb9 	bl	8002498 <modem_send_msg>
			break;
 8002526:	e13f      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_DISABLE_ECHO:
		{
			modem_send_msg("ATE0");
 8002528:	4ba6      	ldr	r3, [pc, #664]	; (80027c4 <modem_initiate_cmd+0x2ec>)
 800252a:	0018      	movs	r0, r3
 800252c:	f7ff ffb4 	bl	8002498 <modem_send_msg>
			break;
 8002530:	e13a      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_ENABLE_ECHO:
		{
			modem_send_msg("ATE1");
 8002532:	4ba5      	ldr	r3, [pc, #660]	; (80027c8 <modem_initiate_cmd+0x2f0>)
 8002534:	0018      	movs	r0, r3
 8002536:	f7ff ffaf 	bl	8002498 <modem_send_msg>
			break;
 800253a:	e135      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_GET_TA_MODEL_INFO:
		{
			cmd_val=MODEM_GET_TA_MODEL_INFO;
 800253c:	4b9e      	ldr	r3, [pc, #632]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800253e:	2205      	movs	r2, #5
 8002540:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+GMM");
 8002542:	4ba2      	ldr	r3, [pc, #648]	; (80027cc <modem_initiate_cmd+0x2f4>)
 8002544:	0018      	movs	r0, r3
 8002546:	f7ff ffa7 	bl	8002498 <modem_send_msg>
			break;
 800254a:	e12d      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_CHECK_SIM_READY:
		{
			cmd_val=MODEM_CHECK_SIM_READY;
 800254c:	4b9a      	ldr	r3, [pc, #616]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800254e:	2206      	movs	r2, #6
 8002550:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CPIN?");
 8002552:	4b9f      	ldr	r3, [pc, #636]	; (80027d0 <modem_initiate_cmd+0x2f8>)
 8002554:	0018      	movs	r0, r3
 8002556:	f7ff ff9f 	bl	8002498 <modem_send_msg>
			break;
 800255a:	e125      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_SET_NETWORK_REG:
		{
			cmd_val=MODEM_SET_NETWORK_REG;
 800255c:	4b96      	ldr	r3, [pc, #600]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800255e:	2209      	movs	r2, #9
 8002560:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CREG=1");
 8002562:	4b9c      	ldr	r3, [pc, #624]	; (80027d4 <modem_initiate_cmd+0x2fc>)
 8002564:	0018      	movs	r0, r3
 8002566:	f7ff ff97 	bl	8002498 <modem_send_msg>
			break;
 800256a:	e11d      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_CHECK_NETWORK_REG:
		{
			cmd_val=MODEM_CHECK_NETWORK_REG;
 800256c:	4b92      	ldr	r3, [pc, #584]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800256e:	2208      	movs	r2, #8
 8002570:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CREG?");
 8002572:	4b99      	ldr	r3, [pc, #612]	; (80027d8 <modem_initiate_cmd+0x300>)
 8002574:	0018      	movs	r0, r3
 8002576:	f7ff ff8f 	bl	8002498 <modem_send_msg>
			break;
 800257a:	e115      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_ATTACH_GPRS:
		{
			cmd_val=MODEM_ATTACH_GPRS;
 800257c:	4b8e      	ldr	r3, [pc, #568]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800257e:	220a      	movs	r2, #10
 8002580:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CGATT=1");
 8002582:	4b96      	ldr	r3, [pc, #600]	; (80027dc <modem_initiate_cmd+0x304>)
 8002584:	0018      	movs	r0, r3
 8002586:	f7ff ff87 	bl	8002498 <modem_send_msg>
			break;
 800258a:	e10d      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_DETACH_GPRS:
		{
			cmd_val=9;
 800258c:	4b8a      	ldr	r3, [pc, #552]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800258e:	2209      	movs	r2, #9
 8002590:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CGATT=0");
 8002592:	4b93      	ldr	r3, [pc, #588]	; (80027e0 <modem_initiate_cmd+0x308>)
 8002594:	0018      	movs	r0, r3
 8002596:	f7ff ff7f 	bl	8002498 <modem_send_msg>
			break;
 800259a:	e105      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_CHECK_CGATT:
		{
			cmd_val=10;
 800259c:	4b86      	ldr	r3, [pc, #536]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800259e:	220a      	movs	r2, #10
 80025a0:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+CGATT=?");
 80025a2:	4b90      	ldr	r3, [pc, #576]	; (80027e4 <modem_initiate_cmd+0x30c>)
 80025a4:	0018      	movs	r0, r3
 80025a6:	f7ff ff77 	bl	8002498 <modem_send_msg>
			break;
 80025aa:	e0fd      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_SET_PDP:
		{
			cmd_val=MODEM_SET_PDP;
 80025ac:	4b82      	ldr	r3, [pc, #520]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 80025ae:	220d      	movs	r2, #13
 80025b0:	701a      	strb	r2, [r3, #0]
			char cmd[64];
			sprintf(cmd, "AT+CGDCONT=1,\"IP\",\"%s\"", AIRTEL_APN);
 80025b2:	4a8d      	ldr	r2, [pc, #564]	; (80027e8 <modem_initiate_cmd+0x310>)
 80025b4:	498d      	ldr	r1, [pc, #564]	; (80027ec <modem_initiate_cmd+0x314>)
 80025b6:	2408      	movs	r4, #8
 80025b8:	193b      	adds	r3, r7, r4
 80025ba:	0018      	movs	r0, r3
 80025bc:	f008 fc56 	bl	800ae6c <siprintf>
			modem_send_msg(cmd);
 80025c0:	193b      	adds	r3, r7, r4
 80025c2:	0018      	movs	r0, r3
 80025c4:	f7ff ff68 	bl	8002498 <modem_send_msg>
			break;
 80025c8:	e0ee      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_ACTIVATE_PDP:
		{
			cmd_val=MODEM_ACTIVATE_PDP;
 80025ca:	4b7b      	ldr	r3, [pc, #492]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 80025cc:	220e      	movs	r2, #14
 80025ce:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QIACT=1");
 80025d0:	4b87      	ldr	r3, [pc, #540]	; (80027f0 <modem_initiate_cmd+0x318>)
 80025d2:	0018      	movs	r0, r3
 80025d4:	f7ff ff60 	bl	8002498 <modem_send_msg>
			break;
 80025d8:	e0e6      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_RESET:
		{
			modem_send_msg("ATZ");
 80025da:	4b86      	ldr	r3, [pc, #536]	; (80027f4 <modem_initiate_cmd+0x31c>)
 80025dc:	0018      	movs	r0, r3
 80025de:	f7ff ff5b 	bl	8002498 <modem_send_msg>
			break;
 80025e2:	e0e1      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}

		/********************************** MQTT AT Commands *****************************/
		case MODEM_MQTT_VERSION_CFG:
		{
			cmd_val=MODEM_MQTT_VERSION_CFG;
 80025e4:	4b74      	ldr	r3, [pc, #464]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 80025e6:	2210      	movs	r2, #16
 80025e8:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Configure MQTT Version ---
			sprintf(cmd, "AT+QMTCFG=\"version\",%d,4", MQTT_CLIENT_IDX);  //// MQTT v3.1.1
 80025ea:	4983      	ldr	r1, [pc, #524]	; (80027f8 <modem_initiate_cmd+0x320>)
 80025ec:	2408      	movs	r4, #8
 80025ee:	193b      	adds	r3, r7, r4
 80025f0:	2200      	movs	r2, #0
 80025f2:	0018      	movs	r0, r3
 80025f4:	f008 fc3a 	bl	800ae6c <siprintf>
			modem_send_msg(cmd);
 80025f8:	193b      	adds	r3, r7, r4
 80025fa:	0018      	movs	r0, r3
 80025fc:	f7ff ff4c 	bl	8002498 <modem_send_msg>
			break;
 8002600:	e0d2      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_MQTT_OPEN:
		{
			cmd_val=MODEM_MQTT_OPEN;
 8002602:	4b6d      	ldr	r3, [pc, #436]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002604:	2211      	movs	r2, #17
 8002606:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Open MQTT Connection ---
			sprintf(cmd, "AT+QMTOPEN=%d,\"%s\",%d", MQTT_CLIENT_IDX, MQTT_HOSTNAME, MQTT_PORT);
 8002608:	4b7c      	ldr	r3, [pc, #496]	; (80027fc <modem_initiate_cmd+0x324>)
 800260a:	497d      	ldr	r1, [pc, #500]	; (8002800 <modem_initiate_cmd+0x328>)
 800260c:	2408      	movs	r4, #8
 800260e:	1938      	adds	r0, r7, r4
 8002610:	4a7c      	ldr	r2, [pc, #496]	; (8002804 <modem_initiate_cmd+0x32c>)
 8002612:	9200      	str	r2, [sp, #0]
 8002614:	2200      	movs	r2, #0
 8002616:	f008 fc29 	bl	800ae6c <siprintf>
			modem_send_msg(cmd);
 800261a:	193b      	adds	r3, r7, r4
 800261c:	0018      	movs	r0, r3
 800261e:	f7ff ff3b 	bl	8002498 <modem_send_msg>
			break;
 8002622:	e0c1      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_MQTT_CONN:
		{
			cmd_val=MODEM_MQTT_CONN;
 8002624:	4b64      	ldr	r3, [pc, #400]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002626:	2213      	movs	r2, #19
 8002628:	701a      	strb	r2, [r3, #0]
			char cmd[200];
			// --- Connect MQTT Client ---
			sprintf(cmd, "AT+QMTCONN=%d,\"%s\",\"%s\",\"%s\"", MQTT_CLIENT_IDX, MQTT_CLIENT_ID,MQTT_USERNAME,MQTT_PASSWORD);
 800262a:	4a77      	ldr	r2, [pc, #476]	; (8002808 <modem_initiate_cmd+0x330>)
 800262c:	4977      	ldr	r1, [pc, #476]	; (800280c <modem_initiate_cmd+0x334>)
 800262e:	2408      	movs	r4, #8
 8002630:	1938      	adds	r0, r7, r4
 8002632:	4b77      	ldr	r3, [pc, #476]	; (8002810 <modem_initiate_cmd+0x338>)
 8002634:	9301      	str	r3, [sp, #4]
 8002636:	4b76      	ldr	r3, [pc, #472]	; (8002810 <modem_initiate_cmd+0x338>)
 8002638:	9300      	str	r3, [sp, #0]
 800263a:	0013      	movs	r3, r2
 800263c:	2200      	movs	r2, #0
 800263e:	f008 fc15 	bl	800ae6c <siprintf>
			modem_send_msg(cmd);
 8002642:	193b      	adds	r3, r7, r4
 8002644:	0018      	movs	r0, r3
 8002646:	f7ff ff27 	bl	8002498 <modem_send_msg>
			break;
 800264a:	e0ad      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_MQTT_SUBSCRIBE:
		{
			cmd_val=MODEM_MQTT_SUBSCRIBE;
 800264c:	4b5a      	ldr	r3, [pc, #360]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800264e:	2215      	movs	r2, #21
 8002650:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			// --- Subscribe to Topic ---
			sprintf(cmd, "AT+QMTSUB=%d,1,\"%s\",%d", MQTT_CLIENT_IDX, MQTT_TOPIC_SUB, MQTT_QOS);
 8002652:	4b70      	ldr	r3, [pc, #448]	; (8002814 <modem_initiate_cmd+0x33c>)
 8002654:	4970      	ldr	r1, [pc, #448]	; (8002818 <modem_initiate_cmd+0x340>)
 8002656:	2408      	movs	r4, #8
 8002658:	1938      	adds	r0, r7, r4
 800265a:	2201      	movs	r2, #1
 800265c:	9200      	str	r2, [sp, #0]
 800265e:	2200      	movs	r2, #0
 8002660:	f008 fc04 	bl	800ae6c <siprintf>
			modem_send_msg(cmd);
 8002664:	193b      	adds	r3, r7, r4
 8002666:	0018      	movs	r0, r3
 8002668:	f7ff ff16 	bl	8002498 <modem_send_msg>
			break;
 800266c:	e09c      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_MQTT_PUBLISH:
		{
			cmd_val=MODEM_MQTT_PUBLISH;
 800266e:	4b52      	ldr	r3, [pc, #328]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002670:	2216      	movs	r2, #22
 8002672:	701a      	strb	r2, [r3, #0]
			char cmd[128];
			//sprintf(cmd, "AT+QMTPUB=%d,0,%d,\"%s\"", MQTT_CLIENT_IDX, MQTT_QOS, MQTT_TOPIC_PUB);
			sprintf(cmd, "AT+QMTPUBEX=%d,%d,%d,%d,\"%s\",%d",
 8002674:	4b69      	ldr	r3, [pc, #420]	; (800281c <modem_initiate_cmd+0x344>)
 8002676:	0018      	movs	r0, r3
 8002678:	f7fd fd46 	bl	8000108 <strlen>
 800267c:	0003      	movs	r3, r0
 800267e:	4968      	ldr	r1, [pc, #416]	; (8002820 <modem_initiate_cmd+0x348>)
 8002680:	2408      	movs	r4, #8
 8002682:	1938      	adds	r0, r7, r4
 8002684:	9303      	str	r3, [sp, #12]
 8002686:	4b67      	ldr	r3, [pc, #412]	; (8002824 <modem_initiate_cmd+0x34c>)
 8002688:	9302      	str	r3, [sp, #8]
 800268a:	2300      	movs	r3, #0
 800268c:	9301      	str	r3, [sp, #4]
 800268e:	2301      	movs	r3, #1
 8002690:	9300      	str	r3, [sp, #0]
 8002692:	2301      	movs	r3, #1
 8002694:	2200      	movs	r2, #0
 8002696:	f008 fbe9 	bl	800ae6c <siprintf>
			        MQTT_MSG_ID,
			        MQTT_QOS,
			        MQTT_RETAIN_FLAG,
			        MQTT_TOPIC_PUB,
			        strlen(MQTT_PUB_Buff));
			modem_send_msg(cmd);
 800269a:	193b      	adds	r3, r7, r4
 800269c:	0018      	movs	r0, r3
 800269e:	f7ff fefb 	bl	8002498 <modem_send_msg>
			osDelay(100);
 80026a2:	2064      	movs	r0, #100	; 0x64
 80026a4:	f006 fac7 	bl	8008c36 <osDelay>
			modem_send_msg(MQTT_PUB_Buff);
 80026a8:	4b5c      	ldr	r3, [pc, #368]	; (800281c <modem_initiate_cmd+0x344>)
 80026aa:	0018      	movs	r0, r3
 80026ac:	f7ff fef4 	bl	8002498 <modem_send_msg>
			break;
 80026b0:	e07a      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}

		/********************************** BLE AT Commands *****************************/
		case MODEM_TURN_ON_BLE:
		{
			cmd_val=MODEM_TURN_ON_BLE;
 80026b2:	4b41      	ldr	r3, [pc, #260]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 80026b4:	2218      	movs	r2, #24
 80026b6:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTPWR=1");
 80026b8:	4b5b      	ldr	r3, [pc, #364]	; (8002828 <modem_initiate_cmd+0x350>)
 80026ba:	0018      	movs	r0, r3
 80026bc:	f7ff feec 	bl	8002498 <modem_send_msg>
			break;
 80026c0:	e072      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_TURN_OFF_BLE:
		{
			cmd_val=MODEM_TURN_OFF_BLE;
 80026c2:	4b3d      	ldr	r3, [pc, #244]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 80026c4:	2219      	movs	r2, #25
 80026c6:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTPWR=0");
 80026c8:	4b58      	ldr	r3, [pc, #352]	; (800282c <modem_initiate_cmd+0x354>)
 80026ca:	0018      	movs	r0, r3
 80026cc:	f7ff fee4 	bl	8002498 <modem_send_msg>
			break;
 80026d0:	e06a      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_SET_ADV_PARAM:
		{
			cmd_val=MODEM_BLE_SET_ADV_PARAM;
 80026d2:	4b39      	ldr	r3, [pc, #228]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 80026d4:	221b      	movs	r2, #27
 80026d6:	701a      	strb	r2, [r3, #0]
			//modem_send_msg("AT+QBTGATADV=1,60,120,0,0,7,0");
			char cmd[128];
			sprintf(cmd,"AT+QBTGATADV=1,%d,%d,0,0,7,0",MIN_INTERVAL,MAX_INTERVAL);
 80026d8:	4955      	ldr	r1, [pc, #340]	; (8002830 <modem_initiate_cmd+0x358>)
 80026da:	2408      	movs	r4, #8
 80026dc:	1938      	adds	r0, r7, r4
 80026de:	2378      	movs	r3, #120	; 0x78
 80026e0:	223c      	movs	r2, #60	; 0x3c
 80026e2:	f008 fbc3 	bl	800ae6c <siprintf>
			modem_send_msg(cmd);
 80026e6:	193b      	adds	r3, r7, r4
 80026e8:	0018      	movs	r0, r3
 80026ea:	f7ff fed5 	bl	8002498 <modem_send_msg>
			break;
 80026ee:	e05b      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_SET_SCAN_RESP_DATA:
		{
			cmd_val=MODEM_BLE_SET_SCAN_RESP_DATA;
 80026f0:	4b31      	ldr	r3, [pc, #196]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 80026f2:	221d      	movs	r2, #29
 80026f4:	701a      	strb	r2, [r3, #0]
			//modem_send_msg("AT+QBTADVRSPDATA=13,\"0C094368617261454332303055\""); //CharaEC200U
			modem_send_msg("AT+QBTADVRSPDATA=7,\"5155454354454C\""); //QUECTEL
 80026f6:	4b4f      	ldr	r3, [pc, #316]	; (8002834 <modem_initiate_cmd+0x35c>)
 80026f8:	0018      	movs	r0, r3
 80026fa:	f7ff fecd 	bl	8002498 <modem_send_msg>
			break;
 80026fe:	e053      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_SET_PRIMARY_SVC:
		{
			cmd_val=MODEM_BLE_SET_PRIMARY_SVC;
 8002700:	4b2d      	ldr	r3, [pc, #180]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002702:	221e      	movs	r2, #30
 8002704:	701a      	strb	r2, [r3, #0]
			//send_at_command("AT+QBTGATSS=0,1,6144,1\r\n");
			//modem_send_msg("AT+QBTGATSS=0,1,44016,1");
			char cmd[128];
			sprintf(cmd,"AT+QBTGATSS=0,1,%d,1",GATTS_SERVICE_UUID);
 8002706:	4a4c      	ldr	r2, [pc, #304]	; (8002838 <modem_initiate_cmd+0x360>)
 8002708:	494c      	ldr	r1, [pc, #304]	; (800283c <modem_initiate_cmd+0x364>)
 800270a:	2408      	movs	r4, #8
 800270c:	193b      	adds	r3, r7, r4
 800270e:	0018      	movs	r0, r3
 8002710:	f008 fbac 	bl	800ae6c <siprintf>
			modem_send_msg(cmd);
 8002714:	193b      	adds	r3, r7, r4
 8002716:	0018      	movs	r0, r3
 8002718:	f7ff febe 	bl	8002498 <modem_send_msg>
			break;
 800271c:	e044      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_ADD_SVC_CHAR:
		{
			cmd_val=MODEM_BLE_ADD_SVC_CHAR;
 800271e:	4b26      	ldr	r3, [pc, #152]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002720:	221f      	movs	r2, #31
 8002722:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTGATSC=0,0,18,1,65268");  //18: Read and Notify
 8002724:	4b46      	ldr	r3, [pc, #280]	; (8002840 <modem_initiate_cmd+0x368>)
 8002726:	0018      	movs	r0, r3
 8002728:	f7ff feb6 	bl	8002498 <modem_send_msg>
			break;
 800272c:	e03c      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_CFG_CHAR_VALUE:
		{
			cmd_val=MODEM_BLE_CFG_CHAR_VALUE;
 800272e:	4b22      	ldr	r3, [pc, #136]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002730:	2220      	movs	r2, #32
 8002732:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTGATSCV=0,0,3,1,65268,42,\"48656C6C6F\"");
 8002734:	4b43      	ldr	r3, [pc, #268]	; (8002844 <modem_initiate_cmd+0x36c>)
 8002736:	0018      	movs	r0, r3
 8002738:	f7ff feae 	bl	8002498 <modem_send_msg>
			//send_at_command("AT+QBTGATSCV=0,0,3,1,65268,42,\"BBFF\"\r\n");
			break;
 800273c:	e034      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_FINSISH_ADDING_SVC:
		{
			cmd_val=MODEM_BLE_FINSISH_ADDING_SVC;
 800273e:	4b1e      	ldr	r3, [pc, #120]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002740:	2221      	movs	r2, #33	; 0x21
 8002742:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTGATSSC=1,1");
 8002744:	4b40      	ldr	r3, [pc, #256]	; (8002848 <modem_initiate_cmd+0x370>)
 8002746:	0018      	movs	r0, r3
 8002748:	f7ff fea6 	bl	8002498 <modem_send_msg>
			break;
 800274c:	e02c      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_START_ADV:
		{
			cmd_val=MODEM_BLE_START_ADV;
 800274e:	4b1a      	ldr	r3, [pc, #104]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002750:	2222      	movs	r2, #34	; 0x22
 8002752:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTADV=1");
 8002754:	4b3d      	ldr	r3, [pc, #244]	; (800284c <modem_initiate_cmd+0x374>)
 8002756:	0018      	movs	r0, r3
 8002758:	f7ff fe9e 	bl	8002498 <modem_send_msg>
			break;
 800275c:	e024      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_STOP_ADV:
		{
			cmd_val=MODEM_BLE_STOP_ADV;
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 8002760:	2223      	movs	r2, #35	; 0x23
 8002762:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QBTADV=0");
 8002764:	4b3a      	ldr	r3, [pc, #232]	; (8002850 <modem_initiate_cmd+0x378>)
 8002766:	0018      	movs	r0, r3
 8002768:	f7ff fe96 	bl	8002498 <modem_send_msg>
			break;
 800276c:	e01c      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_SET_NAME:
		{
			modem_send_msg("AT+QBTNAME=0,\"Chara_EC200U\"");
 800276e:	4b39      	ldr	r3, [pc, #228]	; (8002854 <modem_initiate_cmd+0x37c>)
 8002770:	0018      	movs	r0, r3
 8002772:	f7ff fe91 	bl	8002498 <modem_send_msg>
			break;
 8002776:	e017      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_BLE_GET_NAME:
		{
			modem_send_msg("AT+QBTNAME?");
 8002778:	4b37      	ldr	r3, [pc, #220]	; (8002858 <modem_initiate_cmd+0x380>)
 800277a:	0018      	movs	r0, r3
 800277c:	f7ff fe8c 	bl	8002498 <modem_send_msg>
			break;
 8002780:	e012      	b.n	80027a8 <modem_initiate_cmd+0x2d0>

		/********************************** GPS/GNSS AT Commands *****************************/

		case MODEM_GPS_TURN_ON:
		{
			modem_send_msg("AT+QGPS=1");
 8002782:	4b36      	ldr	r3, [pc, #216]	; (800285c <modem_initiate_cmd+0x384>)
 8002784:	0018      	movs	r0, r3
 8002786:	f7ff fe87 	bl	8002498 <modem_send_msg>
			break;
 800278a:	e00d      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_GPS_GET_CURR_LOCATION:
		{
			cmd_val=MODEM_GPS_GET_CURR_LOCATION;
 800278c:	4b0a      	ldr	r3, [pc, #40]	; (80027b8 <modem_initiate_cmd+0x2e0>)
 800278e:	2228      	movs	r2, #40	; 0x28
 8002790:	701a      	strb	r2, [r3, #0]
			modem_send_msg("AT+QGPSLOC=0");
 8002792:	4b33      	ldr	r3, [pc, #204]	; (8002860 <modem_initiate_cmd+0x388>)
 8002794:	0018      	movs	r0, r3
 8002796:	f7ff fe7f 	bl	8002498 <modem_send_msg>
			break;
 800279a:	e005      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		case MODEM_GPS_TURN_OFF:
		{

			modem_send_msg("AT+QGPSEND");
 800279c:	4b31      	ldr	r3, [pc, #196]	; (8002864 <modem_initiate_cmd+0x38c>)
 800279e:	0018      	movs	r0, r3
 80027a0:	f7ff fe7a 	bl	8002498 <modem_send_msg>
			break;
 80027a4:	e000      	b.n	80027a8 <modem_initiate_cmd+0x2d0>
		}
		default:
		{
			break;
 80027a6:	46c0      	nop			; (mov r8, r8)
		}
	}
}
 80027a8:	46c0      	nop			; (mov r8, r8)
 80027aa:	46bd      	mov	sp, r7
 80027ac:	b035      	add	sp, #212	; 0xd4
 80027ae:	bd90      	pop	{r4, r7, pc}
 80027b0:	0800d688 	.word	0x0800d688
 80027b4:	0800d0a4 	.word	0x0800d0a4
 80027b8:	20000268 	.word	0x20000268
 80027bc:	0800d0a8 	.word	0x0800d0a8
 80027c0:	0800d0ac 	.word	0x0800d0ac
 80027c4:	0800d0b4 	.word	0x0800d0b4
 80027c8:	0800d0bc 	.word	0x0800d0bc
 80027cc:	0800d0c4 	.word	0x0800d0c4
 80027d0:	0800d0cc 	.word	0x0800d0cc
 80027d4:	0800d0d8 	.word	0x0800d0d8
 80027d8:	0800d0e4 	.word	0x0800d0e4
 80027dc:	0800d0f0 	.word	0x0800d0f0
 80027e0:	0800d0fc 	.word	0x0800d0fc
 80027e4:	0800d108 	.word	0x0800d108
 80027e8:	0800d114 	.word	0x0800d114
 80027ec:	0800d124 	.word	0x0800d124
 80027f0:	0800d13c 	.word	0x0800d13c
 80027f4:	0800d148 	.word	0x0800d148
 80027f8:	0800d14c 	.word	0x0800d14c
 80027fc:	0800d168 	.word	0x0800d168
 8002800:	0800d17c 	.word	0x0800d17c
 8002804:	0000075b 	.word	0x0000075b
 8002808:	0800d194 	.word	0x0800d194
 800280c:	0800d1a0 	.word	0x0800d1a0
 8002810:	0800d1c0 	.word	0x0800d1c0
 8002814:	0800d1d0 	.word	0x0800d1d0
 8002818:	0800d1ec 	.word	0x0800d1ec
 800281c:	2000026c 	.word	0x2000026c
 8002820:	0800d204 	.word	0x0800d204
 8002824:	0800d224 	.word	0x0800d224
 8002828:	0800d23c 	.word	0x0800d23c
 800282c:	0800d248 	.word	0x0800d248
 8002830:	0800d254 	.word	0x0800d254
 8002834:	0800d274 	.word	0x0800d274
 8002838:	0000abf0 	.word	0x0000abf0
 800283c:	0800d298 	.word	0x0800d298
 8002840:	0800d2b0 	.word	0x0800d2b0
 8002844:	0800d2cc 	.word	0x0800d2cc
 8002848:	0800d2f8 	.word	0x0800d2f8
 800284c:	0800d30c 	.word	0x0800d30c
 8002850:	0800d318 	.word	0x0800d318
 8002854:	0800d324 	.word	0x0800d324
 8002858:	0800d340 	.word	0x0800d340
 800285c:	0800d34c 	.word	0x0800d34c
 8002860:	0800d358 	.word	0x0800d358
 8002864:	0800d368 	.word	0x0800d368

08002868 <get_modem_info>:
void get_modem_info()
{
 8002868:	b580      	push	{r7, lr}
 800286a:	af00      	add	r7, sp, #0
	  modem_initiate_cmd(MODEM_GET_INF0);
 800286c:	2001      	movs	r0, #1
 800286e:	f7ff fe33 	bl	80024d8 <modem_initiate_cmd>
	  osDelay(300);
 8002872:	2396      	movs	r3, #150	; 0x96
 8002874:	005b      	lsls	r3, r3, #1
 8002876:	0018      	movs	r0, r3
 8002878:	f006 f9dd 	bl	8008c36 <osDelay>

	  modem_initiate_cmd(MODEM_GET_MANF_ID);
 800287c:	2004      	movs	r0, #4
 800287e:	f7ff fe2b 	bl	80024d8 <modem_initiate_cmd>
	  osDelay(300);
 8002882:	2396      	movs	r3, #150	; 0x96
 8002884:	005b      	lsls	r3, r3, #1
 8002886:	0018      	movs	r0, r3
 8002888:	f006 f9d5 	bl	8008c36 <osDelay>

	  modem_initiate_cmd(MODEM_GET_TA_MODEL_INFO);
 800288c:	2005      	movs	r0, #5
 800288e:	f7ff fe23 	bl	80024d8 <modem_initiate_cmd>
	  osDelay(300);
 8002892:	2396      	movs	r3, #150	; 0x96
 8002894:	005b      	lsls	r3, r3, #1
 8002896:	0018      	movs	r0, r3
 8002898:	f006 f9cd 	bl	8008c36 <osDelay>
}
 800289c:	46c0      	nop			; (mov r8, r8)
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <modem_set_sim_configurations>:
void modem_set_sim_configurations()
{
 80028a2:	b580      	push	{r7, lr}
 80028a4:	af00      	add	r7, sp, #0
	  modem_initiate_cmd(MODEM_CHECK_SIM_READY);
 80028a6:	2006      	movs	r0, #6
 80028a8:	f7ff fe16 	bl	80024d8 <modem_initiate_cmd>
	  osDelay(300);
 80028ac:	2396      	movs	r3, #150	; 0x96
 80028ae:	005b      	lsls	r3, r3, #1
 80028b0:	0018      	movs	r0, r3
 80028b2:	f006 f9c0 	bl	8008c36 <osDelay>

	  modem_initiate_cmd(MODEM_SET_NETWORK_REG);
 80028b6:	2009      	movs	r0, #9
 80028b8:	f7ff fe0e 	bl	80024d8 <modem_initiate_cmd>
	  osDelay(300);
 80028bc:	2396      	movs	r3, #150	; 0x96
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	0018      	movs	r0, r3
 80028c2:	f006 f9b8 	bl	8008c36 <osDelay>

	  modem_initiate_cmd(MODEM_SET_PDP);
 80028c6:	200d      	movs	r0, #13
 80028c8:	f7ff fe06 	bl	80024d8 <modem_initiate_cmd>
	  osDelay(300);
 80028cc:	2396      	movs	r3, #150	; 0x96
 80028ce:	005b      	lsls	r3, r3, #1
 80028d0:	0018      	movs	r0, r3
 80028d2:	f006 f9b0 	bl	8008c36 <osDelay>

	  modem_initiate_cmd(MODEM_ATTACH_GPRS);
 80028d6:	200a      	movs	r0, #10
 80028d8:	f7ff fdfe 	bl	80024d8 <modem_initiate_cmd>
	  osDelay(300);
 80028dc:	2396      	movs	r3, #150	; 0x96
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	0018      	movs	r0, r3
 80028e2:	f006 f9a8 	bl	8008c36 <osDelay>

	  modem_initiate_cmd(MODEM_ACTIVATE_PDP);
 80028e6:	200e      	movs	r0, #14
 80028e8:	f7ff fdf6 	bl	80024d8 <modem_initiate_cmd>
	  osDelay(300);
 80028ec:	2396      	movs	r3, #150	; 0x96
 80028ee:	005b      	lsls	r3, r3, #1
 80028f0:	0018      	movs	r0, r3
 80028f2:	f006 f9a0 	bl	8008c36 <osDelay>

	  /*
	  modem_initiate_cmd(MODEM_CHECK_SIM_READY);
	  osDelay(300);
	  */
}
 80028f6:	46c0      	nop			; (mov r8, r8)
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <modem_reset>:
void modem_reset()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	af00      	add	r7, sp, #0
	 modem_initiate_cmd(MODEM_RESET);
 8002900:	200f      	movs	r0, #15
 8002902:	f7ff fde9 	bl	80024d8 <modem_initiate_cmd>
	 osDelay(300);
 8002906:	2396      	movs	r3, #150	; 0x96
 8002908:	005b      	lsls	r3, r3, #1
 800290a:	0018      	movs	r0, r3
 800290c:	f006 f993 	bl	8008c36 <osDelay>
}
 8002910:	46c0      	nop			; (mov r8, r8)
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <modem_mqtt_init>:
void modem_mqtt_init()
{
 8002916:	b580      	push	{r7, lr}
 8002918:	af00      	add	r7, sp, #0
	modem_initiate_cmd(MODEM_MQTT_VERSION_CFG);
 800291a:	2010      	movs	r0, #16
 800291c:	f7ff fddc 	bl	80024d8 <modem_initiate_cmd>
	osDelay(300);
 8002920:	2396      	movs	r3, #150	; 0x96
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	0018      	movs	r0, r3
 8002926:	f006 f986 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_OPEN);
 800292a:	2011      	movs	r0, #17
 800292c:	f7ff fdd4 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002930:	23fa      	movs	r3, #250	; 0xfa
 8002932:	00db      	lsls	r3, r3, #3
 8002934:	0018      	movs	r0, r3
 8002936:	f006 f97e 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_CONN);
 800293a:	2013      	movs	r0, #19
 800293c:	f7ff fdcc 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002940:	23fa      	movs	r3, #250	; 0xfa
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	0018      	movs	r0, r3
 8002946:	f006 f976 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_MQTT_SUBSCRIBE);
 800294a:	2015      	movs	r0, #21
 800294c:	f7ff fdc4 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002950:	23fa      	movs	r3, #250	; 0xfa
 8002952:	00db      	lsls	r3, r3, #3
 8002954:	0018      	movs	r0, r3
 8002956:	f006 f96e 	bl	8008c36 <osDelay>

	/*
	modem_initiate_cmd(MODEM_MQTT_VERSION_CFG);
	osDelay(300);
	*/
}
 800295a:	46c0      	nop			; (mov r8, r8)
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}

08002960 <modem_mqtt_publish>:
void modem_mqtt_publish()
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
	format_json_message();
 8002964:	f000 f84c 	bl	8002a00 <format_json_message>
	osDelay(100);
 8002968:	2064      	movs	r0, #100	; 0x64
 800296a:	f006 f964 	bl	8008c36 <osDelay>
	modem_initiate_cmd(MODEM_MQTT_PUBLISH);
 800296e:	2016      	movs	r0, #22
 8002970:	f7ff fdb2 	bl	80024d8 <modem_initiate_cmd>
	osDelay(300);
 8002974:	2396      	movs	r3, #150	; 0x96
 8002976:	005b      	lsls	r3, r3, #1
 8002978:	0018      	movs	r0, r3
 800297a:	f006 f95c 	bl	8008c36 <osDelay>
}
 800297e:	46c0      	nop			; (mov r8, r8)
 8002980:	46bd      	mov	sp, r7
 8002982:	bd80      	pop	{r7, pc}

08002984 <modem_handle_mqtt_urc_codes>:
void modem_handle_mqtt_urc_codes()
{
 8002984:	b580      	push	{r7, lr}
 8002986:	af00      	add	r7, sp, #0
	switch(modem_info_t.mqtt_info_t.mqtt_urc_error)
 8002988:	4b1b      	ldr	r3, [pc, #108]	; (80029f8 <modem_handle_mqtt_urc_codes+0x74>)
 800298a:	2250      	movs	r2, #80	; 0x50
 800298c:	5c9b      	ldrb	r3, [r3, r2]
 800298e:	2b05      	cmp	r3, #5
 8002990:	d82d      	bhi.n	80029ee <modem_handle_mqtt_urc_codes+0x6a>
 8002992:	009a      	lsls	r2, r3, #2
 8002994:	4b19      	ldr	r3, [pc, #100]	; (80029fc <modem_handle_mqtt_urc_codes+0x78>)
 8002996:	18d3      	adds	r3, r2, r3
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	469f      	mov	pc, r3
	{
		case 1:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 800299c:	4b16      	ldr	r3, [pc, #88]	; (80029f8 <modem_handle_mqtt_urc_codes+0x74>)
 800299e:	2250      	movs	r2, #80	; 0x50
 80029a0:	2100      	movs	r1, #0
 80029a2:	5499      	strb	r1, [r3, r2]
			modem_reset();
 80029a4:	f7ff ffaa 	bl	80028fc <modem_reset>
			modem_mqtt_init();
 80029a8:	f7ff ffb5 	bl	8002916 <modem_mqtt_init>
			break;
 80029ac:	e020      	b.n	80029f0 <modem_handle_mqtt_urc_codes+0x6c>
		}
		case 2:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 80029ae:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <modem_handle_mqtt_urc_codes+0x74>)
 80029b0:	2250      	movs	r2, #80	; 0x50
 80029b2:	2100      	movs	r1, #0
 80029b4:	5499      	strb	r1, [r3, r2]
			modem_reset();
 80029b6:	f7ff ffa1 	bl	80028fc <modem_reset>
			modem_mqtt_init();
 80029ba:	f7ff ffac 	bl	8002916 <modem_mqtt_init>
			break;
 80029be:	e017      	b.n	80029f0 <modem_handle_mqtt_urc_codes+0x6c>
		}
		case 3:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 80029c0:	4b0d      	ldr	r3, [pc, #52]	; (80029f8 <modem_handle_mqtt_urc_codes+0x74>)
 80029c2:	2250      	movs	r2, #80	; 0x50
 80029c4:	2100      	movs	r1, #0
 80029c6:	5499      	strb	r1, [r3, r2]
			modem_reset();
 80029c8:	f7ff ff98 	bl	80028fc <modem_reset>
			modem_mqtt_init();
 80029cc:	f7ff ffa3 	bl	8002916 <modem_mqtt_init>
			break;
 80029d0:	e00e      	b.n	80029f0 <modem_handle_mqtt_urc_codes+0x6c>
		}
		case 4:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 80029d2:	4b09      	ldr	r3, [pc, #36]	; (80029f8 <modem_handle_mqtt_urc_codes+0x74>)
 80029d4:	2250      	movs	r2, #80	; 0x50
 80029d6:	2100      	movs	r1, #0
 80029d8:	5499      	strb	r1, [r3, r2]
			modem_reset();
 80029da:	f7ff ff8f 	bl	80028fc <modem_reset>
			modem_mqtt_init();
 80029de:	f7ff ff9a 	bl	8002916 <modem_mqtt_init>
			break;
 80029e2:	e005      	b.n	80029f0 <modem_handle_mqtt_urc_codes+0x6c>
		}
		case 5:
		{
			modem_info_t.mqtt_info_t.mqtt_urc_error=0;
 80029e4:	4b04      	ldr	r3, [pc, #16]	; (80029f8 <modem_handle_mqtt_urc_codes+0x74>)
 80029e6:	2250      	movs	r2, #80	; 0x50
 80029e8:	2100      	movs	r1, #0
 80029ea:	5499      	strb	r1, [r3, r2]
			break;
 80029ec:	e000      	b.n	80029f0 <modem_handle_mqtt_urc_codes+0x6c>
		}
		default:
		{
			break;
 80029ee:	46c0      	nop			; (mov r8, r8)
		}

	}
}
 80029f0:	46c0      	nop			; (mov r8, r8)
 80029f2:	46bd      	mov	sp, r7
 80029f4:	bd80      	pop	{r7, pc}
 80029f6:	46c0      	nop			; (mov r8, r8)
 80029f8:	2000046c 	.word	0x2000046c
 80029fc:	0800d730 	.word	0x0800d730

08002a00 <format_json_message>:
void format_json_message(void)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b082      	sub	sp, #8
 8002a04:	af00      	add	r7, sp, #0
    cJSON *root = cJSON_CreateObject();
 8002a06:	f001 fe1b 	bl	8004640 <cJSON_CreateObject>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	607b      	str	r3, [r7, #4]
    if (root == NULL)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d104      	bne.n	8002a1e <format_json_message+0x1e>
    {
        print_msg("JSON object creation failed\r\n");
 8002a14:	4b19      	ldr	r3, [pc, #100]	; (8002a7c <format_json_message+0x7c>)
 8002a16:	0018      	movs	r0, r3
 8002a18:	f000 fa58 	bl	8002ecc <print_msg>
        return;
 8002a1c:	e02a      	b.n	8002a74 <format_json_message+0x74>
    }

    cJSON_AddNumberToObject(root, "Msg_Count", Msg_cnt);
 8002a1e:	4b18      	ldr	r3, [pc, #96]	; (8002a80 <format_json_message+0x80>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	0018      	movs	r0, r3
 8002a24:	f7ff fca4 	bl	8002370 <__aeabi_i2d>
 8002a28:	0002      	movs	r2, r0
 8002a2a:	000b      	movs	r3, r1
 8002a2c:	4915      	ldr	r1, [pc, #84]	; (8002a84 <format_json_message+0x84>)
 8002a2e:	6878      	ldr	r0, [r7, #4]
 8002a30:	f001 fd9a 	bl	8004568 <cJSON_AddNumberToObject>

    char *json_str = cJSON_Print(root);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	0018      	movs	r0, r3
 8002a38:	f001 fa5c 	bl	8003ef4 <cJSON_Print>
 8002a3c:	0003      	movs	r3, r0
 8002a3e:	603b      	str	r3, [r7, #0]
    if (json_str != NULL)
 8002a40:	683b      	ldr	r3, [r7, #0]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00e      	beq.n	8002a64 <format_json_message+0x64>
    {
        strncpy(MQTT_PUB_Buff, json_str, MQTT_PUB_BUFF_LEN - 1);
 8002a46:	4a10      	ldr	r2, [pc, #64]	; (8002a88 <format_json_message+0x88>)
 8002a48:	6839      	ldr	r1, [r7, #0]
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <format_json_message+0x8c>)
 8002a4c:	0018      	movs	r0, r3
 8002a4e:	f008 fa92 	bl	800af76 <strncpy>
        MQTT_PUB_Buff[MQTT_PUB_BUFF_LEN - 1] = '\0';
 8002a52:	4b0e      	ldr	r3, [pc, #56]	; (8002a8c <format_json_message+0x8c>)
 8002a54:	4a0c      	ldr	r2, [pc, #48]	; (8002a88 <format_json_message+0x88>)
 8002a56:	2100      	movs	r1, #0
 8002a58:	5499      	strb	r1, [r3, r2]

        /*
        print_msg("Formatted JSON:\r\n");
        print_msg(MQTT_PUB_Buff);
		*/
        free(json_str);
 8002a5a:	683b      	ldr	r3, [r7, #0]
 8002a5c:	0018      	movs	r0, r3
 8002a5e:	f007 f987 	bl	8009d70 <free>
 8002a62:	e003      	b.n	8002a6c <format_json_message+0x6c>
    } else
    {
        print_msg("JSON formatting failed\r\n");
 8002a64:	4b0a      	ldr	r3, [pc, #40]	; (8002a90 <format_json_message+0x90>)
 8002a66:	0018      	movs	r0, r3
 8002a68:	f000 fa30 	bl	8002ecc <print_msg>
    }

    cJSON_Delete(root);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 fd6a 	bl	8003548 <cJSON_Delete>
}
 8002a74:	46bd      	mov	sp, r7
 8002a76:	b002      	add	sp, #8
 8002a78:	bd80      	pop	{r7, pc}
 8002a7a:	46c0      	nop			; (mov r8, r8)
 8002a7c:	0800d374 	.word	0x0800d374
 8002a80:	20000658 	.word	0x20000658
 8002a84:	0800d394 	.word	0x0800d394
 8002a88:	000001ff 	.word	0x000001ff
 8002a8c:	2000026c 	.word	0x2000026c
 8002a90:	0800d3a0 	.word	0x0800d3a0

08002a94 <convertDMMtoDecimal>:
// Convert NMEA DMM (Degrees and Decimal Minutes) to Decimal Degrees
double convertDMMtoDecimal(const char *dmmStr, char direction)
{
 8002a94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a96:	b08d      	sub	sp, #52	; 0x34
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	60f8      	str	r0, [r7, #12]
 8002a9c:	000a      	movs	r2, r1
 8002a9e:	260b      	movs	r6, #11
 8002aa0:	19bb      	adds	r3, r7, r6
 8002aa2:	701a      	strb	r2, [r3, #0]
    double dmm = atof(dmmStr);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	0018      	movs	r0, r3
 8002aa8:	f007 f94c 	bl	8009d44 <atof>
 8002aac:	0002      	movs	r2, r0
 8002aae:	000b      	movs	r3, r1
 8002ab0:	62ba      	str	r2, [r7, #40]	; 0x28
 8002ab2:	62fb      	str	r3, [r7, #44]	; 0x2c
    int degrees = (int)(dmm / 100);
 8002ab4:	2200      	movs	r2, #0
 8002ab6:	4b25      	ldr	r3, [pc, #148]	; (8002b4c <convertDMMtoDecimal+0xb8>)
 8002ab8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002aba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002abc:	f7fe f9c6 	bl	8000e4c <__aeabi_ddiv>
 8002ac0:	0002      	movs	r2, r0
 8002ac2:	000b      	movs	r3, r1
 8002ac4:	0010      	movs	r0, r2
 8002ac6:	0019      	movs	r1, r3
 8002ac8:	f7ff fc1c 	bl	8002304 <__aeabi_d2iz>
 8002acc:	0003      	movs	r3, r0
 8002ace:	627b      	str	r3, [r7, #36]	; 0x24
    double minutes = dmm - (degrees * 100);
 8002ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad2:	2264      	movs	r2, #100	; 0x64
 8002ad4:	4353      	muls	r3, r2
 8002ad6:	0018      	movs	r0, r3
 8002ad8:	f7ff fc4a 	bl	8002370 <__aeabi_i2d>
 8002adc:	0002      	movs	r2, r0
 8002ade:	000b      	movs	r3, r1
 8002ae0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ae2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002ae4:	f7ff f86e 	bl	8001bc4 <__aeabi_dsub>
 8002ae8:	0002      	movs	r2, r0
 8002aea:	000b      	movs	r3, r1
 8002aec:	61ba      	str	r2, [r7, #24]
 8002aee:	61fb      	str	r3, [r7, #28]
    double decimal = degrees + (minutes / 60.0);
 8002af0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002af2:	f7ff fc3d 	bl	8002370 <__aeabi_i2d>
 8002af6:	6038      	str	r0, [r7, #0]
 8002af8:	6079      	str	r1, [r7, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	4b14      	ldr	r3, [pc, #80]	; (8002b50 <convertDMMtoDecimal+0xbc>)
 8002afe:	69b8      	ldr	r0, [r7, #24]
 8002b00:	69f9      	ldr	r1, [r7, #28]
 8002b02:	f7fe f9a3 	bl	8000e4c <__aeabi_ddiv>
 8002b06:	0002      	movs	r2, r0
 8002b08:	000b      	movs	r3, r1
 8002b0a:	6838      	ldr	r0, [r7, #0]
 8002b0c:	6879      	ldr	r1, [r7, #4]
 8002b0e:	f7fd fe3d 	bl	800078c <__aeabi_dadd>
 8002b12:	0002      	movs	r2, r0
 8002b14:	000b      	movs	r3, r1
 8002b16:	613a      	str	r2, [r7, #16]
 8002b18:	617b      	str	r3, [r7, #20]
    return (direction == 'S' || direction == 'W') ? -decimal : decimal;
 8002b1a:	19bb      	adds	r3, r7, r6
 8002b1c:	781b      	ldrb	r3, [r3, #0]
 8002b1e:	2b53      	cmp	r3, #83	; 0x53
 8002b20:	d003      	beq.n	8002b2a <convertDMMtoDecimal+0x96>
 8002b22:	19bb      	adds	r3, r7, r6
 8002b24:	781b      	ldrb	r3, [r3, #0]
 8002b26:	2b57      	cmp	r3, #87	; 0x57
 8002b28:	d107      	bne.n	8002b3a <convertDMMtoDecimal+0xa6>
 8002b2a:	693b      	ldr	r3, [r7, #16]
 8002b2c:	001c      	movs	r4, r3
 8002b2e:	697b      	ldr	r3, [r7, #20]
 8002b30:	2280      	movs	r2, #128	; 0x80
 8002b32:	0612      	lsls	r2, r2, #24
 8002b34:	405a      	eors	r2, r3
 8002b36:	0015      	movs	r5, r2
 8002b38:	e001      	b.n	8002b3e <convertDMMtoDecimal+0xaa>
 8002b3a:	693c      	ldr	r4, [r7, #16]
 8002b3c:	697d      	ldr	r5, [r7, #20]
 8002b3e:	0022      	movs	r2, r4
 8002b40:	002b      	movs	r3, r5
}
 8002b42:	0010      	movs	r0, r2
 8002b44:	0019      	movs	r1, r3
 8002b46:	46bd      	mov	sp, r7
 8002b48:	b00d      	add	sp, #52	; 0x34
 8002b4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002b4c:	40590000 	.word	0x40590000
 8002b50:	404e0000 	.word	0x404e0000

08002b54 <modem_parse_gps_location>:
int modem_parse_gps_location(const char *response, GpsData *data)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b0af      	sub	sp, #188	; 0xbc
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
 8002b5c:	6039      	str	r1, [r7, #0]
    const char *start = strstr(response, "+QGPSLOC:");
 8002b5e:	4a99      	ldr	r2, [pc, #612]	; (8002dc4 <modem_parse_gps_location+0x270>)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	0011      	movs	r1, r2
 8002b64:	0018      	movs	r0, r3
 8002b66:	f008 fa7e 	bl	800b066 <strstr>
 8002b6a:	0003      	movs	r3, r0
 8002b6c:	22a8      	movs	r2, #168	; 0xa8
 8002b6e:	18b9      	adds	r1, r7, r2
 8002b70:	600b      	str	r3, [r1, #0]
    if (!start) return -1;
 8002b72:	18bb      	adds	r3, r7, r2
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d102      	bne.n	8002b80 <modem_parse_gps_location+0x2c>
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	425b      	negs	r3, r3
 8002b7e:	e11c      	b.n	8002dba <modem_parse_gps_location+0x266>
    start += strlen("+QGPSLOC: ");
 8002b80:	22a8      	movs	r2, #168	; 0xa8
 8002b82:	18bb      	adds	r3, r7, r2
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	330a      	adds	r3, #10
 8002b88:	18b9      	adds	r1, r7, r2
 8002b8a:	600b      	str	r3, [r1, #0]

    char buffer[128];
    strncpy(buffer, start, sizeof(buffer) - 1);
 8002b8c:	18bb      	adds	r3, r7, r2
 8002b8e:	6819      	ldr	r1, [r3, #0]
 8002b90:	2428      	movs	r4, #40	; 0x28
 8002b92:	193b      	adds	r3, r7, r4
 8002b94:	227f      	movs	r2, #127	; 0x7f
 8002b96:	0018      	movs	r0, r3
 8002b98:	f008 f9ed 	bl	800af76 <strncpy>
    buffer[sizeof(buffer) - 1] = '\0';
 8002b9c:	0020      	movs	r0, r4
 8002b9e:	183b      	adds	r3, r7, r0
 8002ba0:	227f      	movs	r2, #127	; 0x7f
 8002ba2:	2100      	movs	r1, #0
 8002ba4:	5499      	strb	r1, [r3, r2]

    char *token = strtok(buffer, ",");
 8002ba6:	4a88      	ldr	r2, [pc, #544]	; (8002dc8 <modem_parse_gps_location+0x274>)
 8002ba8:	183b      	adds	r3, r7, r0
 8002baa:	0011      	movs	r1, r2
 8002bac:	0018      	movs	r0, r3
 8002bae:	f008 f9f7 	bl	800afa0 <strtok>
 8002bb2:	0003      	movs	r3, r0
 8002bb4:	22b4      	movs	r2, #180	; 0xb4
 8002bb6:	18ba      	adds	r2, r7, r2
 8002bb8:	6013      	str	r3, [r2, #0]
    int field = 0;
 8002bba:	2300      	movs	r3, #0
 8002bbc:	22b0      	movs	r2, #176	; 0xb0
 8002bbe:	18ba      	adds	r2, r7, r2
 8002bc0:	6013      	str	r3, [r2, #0]
    char latStr[16], lonStr[16];
    char latDir = 'N', lonDir = 'E';
 8002bc2:	23af      	movs	r3, #175	; 0xaf
 8002bc4:	18fb      	adds	r3, r7, r3
 8002bc6:	224e      	movs	r2, #78	; 0x4e
 8002bc8:	701a      	strb	r2, [r3, #0]
 8002bca:	23ae      	movs	r3, #174	; 0xae
 8002bcc:	18fb      	adds	r3, r7, r3
 8002bce:	2245      	movs	r2, #69	; 0x45
 8002bd0:	701a      	strb	r2, [r3, #0]

    while (token != NULL)
 8002bd2:	e0c7      	b.n	8002d64 <modem_parse_gps_location+0x210>
    {
        switch (field)
 8002bd4:	22b0      	movs	r2, #176	; 0xb0
 8002bd6:	18bb      	adds	r3, r7, r2
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2b0a      	cmp	r3, #10
 8002bdc:	d900      	bls.n	8002be0 <modem_parse_gps_location+0x8c>
 8002bde:	e0b2      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
 8002be0:	18bb      	adds	r3, r7, r2
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	009a      	lsls	r2, r3, #2
 8002be6:	4b79      	ldr	r3, [pc, #484]	; (8002dcc <modem_parse_gps_location+0x278>)
 8002be8:	18d3      	adds	r3, r2, r3
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	469f      	mov	pc, r3
        {
            case 0:
                strncpy(data->utc_time, token, sizeof(data->utc_time) - 1);
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	22b4      	movs	r2, #180	; 0xb4
 8002bf2:	18ba      	adds	r2, r7, r2
 8002bf4:	6811      	ldr	r1, [r2, #0]
 8002bf6:	220a      	movs	r2, #10
 8002bf8:	0018      	movs	r0, r3
 8002bfa:	f008 f9bc 	bl	800af76 <strncpy>
                data->utc_time[sizeof(data->utc_time) - 1] = '\0';
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2200      	movs	r2, #0
 8002c02:	729a      	strb	r2, [r3, #10]
                break;
 8002c04:	e09f      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 1:
                strncpy(latStr, token, sizeof(latStr) - 1);
 8002c06:	23b4      	movs	r3, #180	; 0xb4
 8002c08:	18fb      	adds	r3, r7, r3
 8002c0a:	6819      	ldr	r1, [r3, #0]
 8002c0c:	2418      	movs	r4, #24
 8002c0e:	193b      	adds	r3, r7, r4
 8002c10:	220f      	movs	r2, #15
 8002c12:	0018      	movs	r0, r3
 8002c14:	f008 f9af 	bl	800af76 <strncpy>
                latStr[sizeof(latStr) - 1] = '\0';
 8002c18:	193b      	adds	r3, r7, r4
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	73da      	strb	r2, [r3, #15]
                latDir = latStr[strlen(latStr) - 1];
 8002c1e:	193b      	adds	r3, r7, r4
 8002c20:	0018      	movs	r0, r3
 8002c22:	f7fd fa71 	bl	8000108 <strlen>
 8002c26:	0003      	movs	r3, r0
 8002c28:	1e5a      	subs	r2, r3, #1
 8002c2a:	23af      	movs	r3, #175	; 0xaf
 8002c2c:	18fb      	adds	r3, r7, r3
 8002c2e:	1939      	adds	r1, r7, r4
 8002c30:	5c8a      	ldrb	r2, [r1, r2]
 8002c32:	701a      	strb	r2, [r3, #0]
                latStr[strlen(latStr) - 1] = '\0';
 8002c34:	193b      	adds	r3, r7, r4
 8002c36:	0018      	movs	r0, r3
 8002c38:	f7fd fa66 	bl	8000108 <strlen>
 8002c3c:	0003      	movs	r3, r0
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	193a      	adds	r2, r7, r4
 8002c42:	2100      	movs	r1, #0
 8002c44:	54d1      	strb	r1, [r2, r3]
                break;
 8002c46:	e07e      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 2:
                strncpy(lonStr, token, sizeof(lonStr) - 1);
 8002c48:	23b4      	movs	r3, #180	; 0xb4
 8002c4a:	18fb      	adds	r3, r7, r3
 8002c4c:	6819      	ldr	r1, [r3, #0]
 8002c4e:	2408      	movs	r4, #8
 8002c50:	193b      	adds	r3, r7, r4
 8002c52:	220f      	movs	r2, #15
 8002c54:	0018      	movs	r0, r3
 8002c56:	f008 f98e 	bl	800af76 <strncpy>
                lonStr[sizeof(lonStr) - 1] = '\0';
 8002c5a:	193b      	adds	r3, r7, r4
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	73da      	strb	r2, [r3, #15]
                lonDir = lonStr[strlen(lonStr) - 1];
 8002c60:	193b      	adds	r3, r7, r4
 8002c62:	0018      	movs	r0, r3
 8002c64:	f7fd fa50 	bl	8000108 <strlen>
 8002c68:	0003      	movs	r3, r0
 8002c6a:	1e5a      	subs	r2, r3, #1
 8002c6c:	23ae      	movs	r3, #174	; 0xae
 8002c6e:	18fb      	adds	r3, r7, r3
 8002c70:	1939      	adds	r1, r7, r4
 8002c72:	5c8a      	ldrb	r2, [r1, r2]
 8002c74:	701a      	strb	r2, [r3, #0]
                lonStr[strlen(lonStr) - 1] = '\0';
 8002c76:	193b      	adds	r3, r7, r4
 8002c78:	0018      	movs	r0, r3
 8002c7a:	f7fd fa45 	bl	8000108 <strlen>
 8002c7e:	0003      	movs	r3, r0
 8002c80:	3b01      	subs	r3, #1
 8002c82:	193a      	adds	r2, r7, r4
 8002c84:	2100      	movs	r1, #0
 8002c86:	54d1      	strb	r1, [r2, r3]
                break;
 8002c88:	e05d      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 3:
                data->hdop = atof(token);
 8002c8a:	23b4      	movs	r3, #180	; 0xb4
 8002c8c:	18fb      	adds	r3, r7, r3
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	0018      	movs	r0, r3
 8002c92:	f007 f857 	bl	8009d44 <atof>
 8002c96:	0002      	movs	r2, r0
 8002c98:	000b      	movs	r3, r1
 8002c9a:	6839      	ldr	r1, [r7, #0]
 8002c9c:	620a      	str	r2, [r1, #32]
 8002c9e:	624b      	str	r3, [r1, #36]	; 0x24
                break;
 8002ca0:	e051      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 4:
                data->altitude = atof(token);
 8002ca2:	23b4      	movs	r3, #180	; 0xb4
 8002ca4:	18fb      	adds	r3, r7, r3
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	0018      	movs	r0, r3
 8002caa:	f007 f84b 	bl	8009d44 <atof>
 8002cae:	0002      	movs	r2, r0
 8002cb0:	000b      	movs	r3, r1
 8002cb2:	6839      	ldr	r1, [r7, #0]
 8002cb4:	628a      	str	r2, [r1, #40]	; 0x28
 8002cb6:	62cb      	str	r3, [r1, #44]	; 0x2c
                break;
 8002cb8:	e045      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 5:
                data->fix = atoi(token);
 8002cba:	23b4      	movs	r3, #180	; 0xb4
 8002cbc:	18fb      	adds	r3, r7, r3
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	0018      	movs	r0, r3
 8002cc2:	f007 f844 	bl	8009d4e <atoi>
 8002cc6:	0002      	movs	r2, r0
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	631a      	str	r2, [r3, #48]	; 0x30
                break;
 8002ccc:	e03b      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 6:
                data->cog = atof(token);
 8002cce:	23b4      	movs	r3, #180	; 0xb4
 8002cd0:	18fb      	adds	r3, r7, r3
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	0018      	movs	r0, r3
 8002cd6:	f007 f835 	bl	8009d44 <atof>
 8002cda:	0002      	movs	r2, r0
 8002cdc:	000b      	movs	r3, r1
 8002cde:	6839      	ldr	r1, [r7, #0]
 8002ce0:	638a      	str	r2, [r1, #56]	; 0x38
 8002ce2:	63cb      	str	r3, [r1, #60]	; 0x3c
                break;
 8002ce4:	e02f      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 7:
                data->spkm = atof(token);
 8002ce6:	23b4      	movs	r3, #180	; 0xb4
 8002ce8:	18fb      	adds	r3, r7, r3
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	0018      	movs	r0, r3
 8002cee:	f007 f829 	bl	8009d44 <atof>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	000b      	movs	r3, r1
 8002cf6:	6839      	ldr	r1, [r7, #0]
 8002cf8:	640a      	str	r2, [r1, #64]	; 0x40
 8002cfa:	644b      	str	r3, [r1, #68]	; 0x44
                break;
 8002cfc:	e023      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 8:
                data->spkn = atof(token);
 8002cfe:	23b4      	movs	r3, #180	; 0xb4
 8002d00:	18fb      	adds	r3, r7, r3
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f007 f81d 	bl	8009d44 <atof>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	000b      	movs	r3, r1
 8002d0e:	6839      	ldr	r1, [r7, #0]
 8002d10:	648a      	str	r2, [r1, #72]	; 0x48
 8002d12:	64cb      	str	r3, [r1, #76]	; 0x4c
                break;
 8002d14:	e017      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 9:
                strncpy(data->date, token, sizeof(data->date) - 1);
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3350      	adds	r3, #80	; 0x50
 8002d1a:	22b4      	movs	r2, #180	; 0xb4
 8002d1c:	18ba      	adds	r2, r7, r2
 8002d1e:	6811      	ldr	r1, [r2, #0]
 8002d20:	2206      	movs	r2, #6
 8002d22:	0018      	movs	r0, r3
 8002d24:	f008 f927 	bl	800af76 <strncpy>
                data->date[sizeof(data->date) - 1] = '\0';
 8002d28:	683b      	ldr	r3, [r7, #0]
 8002d2a:	2256      	movs	r2, #86	; 0x56
 8002d2c:	2100      	movs	r1, #0
 8002d2e:	5499      	strb	r1, [r3, r2]
                break;
 8002d30:	e009      	b.n	8002d46 <modem_parse_gps_location+0x1f2>
            case 10:
                data->nsat = atoi(token);
 8002d32:	23b4      	movs	r3, #180	; 0xb4
 8002d34:	18fb      	adds	r3, r7, r3
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	0018      	movs	r0, r3
 8002d3a:	f007 f808 	bl	8009d4e <atoi>
 8002d3e:	0002      	movs	r2, r0
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	659a      	str	r2, [r3, #88]	; 0x58
                break;
 8002d44:	46c0      	nop			; (mov r8, r8)
        }

        token = strtok(NULL, ",");
 8002d46:	4b20      	ldr	r3, [pc, #128]	; (8002dc8 <modem_parse_gps_location+0x274>)
 8002d48:	0019      	movs	r1, r3
 8002d4a:	2000      	movs	r0, #0
 8002d4c:	f008 f928 	bl	800afa0 <strtok>
 8002d50:	0003      	movs	r3, r0
 8002d52:	22b4      	movs	r2, #180	; 0xb4
 8002d54:	18ba      	adds	r2, r7, r2
 8002d56:	6013      	str	r3, [r2, #0]
        field++;
 8002d58:	22b0      	movs	r2, #176	; 0xb0
 8002d5a:	18bb      	adds	r3, r7, r2
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	18ba      	adds	r2, r7, r2
 8002d62:	6013      	str	r3, [r2, #0]
    while (token != NULL)
 8002d64:	23b4      	movs	r3, #180	; 0xb4
 8002d66:	18fb      	adds	r3, r7, r3
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d000      	beq.n	8002d70 <modem_parse_gps_location+0x21c>
 8002d6e:	e731      	b.n	8002bd4 <modem_parse_gps_location+0x80>
    }

    if (field < 11) return -2;
 8002d70:	23b0      	movs	r3, #176	; 0xb0
 8002d72:	18fb      	adds	r3, r7, r3
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	2b0a      	cmp	r3, #10
 8002d78:	dc02      	bgt.n	8002d80 <modem_parse_gps_location+0x22c>
 8002d7a:	2302      	movs	r3, #2
 8002d7c:	425b      	negs	r3, r3
 8002d7e:	e01c      	b.n	8002dba <modem_parse_gps_location+0x266>

    data->latitude = convertDMMtoDecimal(latStr, latDir);
 8002d80:	23af      	movs	r3, #175	; 0xaf
 8002d82:	18fb      	adds	r3, r7, r3
 8002d84:	781a      	ldrb	r2, [r3, #0]
 8002d86:	2318      	movs	r3, #24
 8002d88:	18fb      	adds	r3, r7, r3
 8002d8a:	0011      	movs	r1, r2
 8002d8c:	0018      	movs	r0, r3
 8002d8e:	f7ff fe81 	bl	8002a94 <convertDMMtoDecimal>
 8002d92:	0002      	movs	r2, r0
 8002d94:	000b      	movs	r3, r1
 8002d96:	6839      	ldr	r1, [r7, #0]
 8002d98:	610a      	str	r2, [r1, #16]
 8002d9a:	614b      	str	r3, [r1, #20]
    data->longitude = convertDMMtoDecimal(lonStr, lonDir);
 8002d9c:	23ae      	movs	r3, #174	; 0xae
 8002d9e:	18fb      	adds	r3, r7, r3
 8002da0:	781a      	ldrb	r2, [r3, #0]
 8002da2:	2308      	movs	r3, #8
 8002da4:	18fb      	adds	r3, r7, r3
 8002da6:	0011      	movs	r1, r2
 8002da8:	0018      	movs	r0, r3
 8002daa:	f7ff fe73 	bl	8002a94 <convertDMMtoDecimal>
 8002dae:	0002      	movs	r2, r0
 8002db0:	000b      	movs	r3, r1
 8002db2:	6839      	ldr	r1, [r7, #0]
 8002db4:	618a      	str	r2, [r1, #24]
 8002db6:	61cb      	str	r3, [r1, #28]

    return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	0018      	movs	r0, r3
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	b02f      	add	sp, #188	; 0xbc
 8002dc0:	bd90      	pop	{r4, r7, pc}
 8002dc2:	46c0      	nop			; (mov r8, r8)
 8002dc4:	0800d3bc 	.word	0x0800d3bc
 8002dc8:	0800d3c8 	.word	0x0800d3c8
 8002dcc:	0800d748 	.word	0x0800d748

08002dd0 <Modem_BLE_Start>:
/***************************************** Private Variables ********************************************/
extern osThreadId ModemBLE_TaskHandle;
extern UART_HandleTypeDef huart1;
/***************************************** Function Prototypes ******************************************/
void Modem_BLE_Start()
{
 8002dd0:	b590      	push	{r4, r7, lr}
 8002dd2:	b087      	sub	sp, #28
 8002dd4:	af00      	add	r7, sp, #0
	osThreadDef(ModemBLETask, Modem_BLE_Task, osPriorityNormal, 0, 256);
 8002dd6:	1d3b      	adds	r3, r7, #4
 8002dd8:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <Modem_BLE_Start+0x2c>)
 8002dda:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002ddc:	c313      	stmia	r3!, {r0, r1, r4}
 8002dde:	ca03      	ldmia	r2!, {r0, r1}
 8002de0:	c303      	stmia	r3!, {r0, r1}
	ModemBLE_TaskHandle = osThreadCreate(osThread(ModemBLETask), NULL);
 8002de2:	1d3b      	adds	r3, r7, #4
 8002de4:	2100      	movs	r1, #0
 8002de6:	0018      	movs	r0, r3
 8002de8:	f005 fefd 	bl	8008be6 <osThreadCreate>
 8002dec:	0002      	movs	r2, r0
 8002dee:	4b04      	ldr	r3, [pc, #16]	; (8002e00 <Modem_BLE_Start+0x30>)
 8002df0:	601a      	str	r2, [r3, #0]
}
 8002df2:	46c0      	nop			; (mov r8, r8)
 8002df4:	46bd      	mov	sp, r7
 8002df6:	b007      	add	sp, #28
 8002df8:	bd90      	pop	{r4, r7, pc}
 8002dfa:	46c0      	nop			; (mov r8, r8)
 8002dfc:	0800d3dc 	.word	0x0800d3dc
 8002e00:	200005f0 	.word	0x200005f0

08002e04 <Modem_BLE_Task>:

void Modem_BLE_Task(void const * argument)
{
 8002e04:	b580      	push	{r7, lr}
 8002e06:	b082      	sub	sp, #8
 8002e08:	af00      	add	r7, sp, #0
 8002e0a:	6078      	str	r0, [r7, #4]
	HAL_UARTEx_ReceiveToIdle_IT(&huart1,(uint8_t*)EC200u_Rx_Buff, sizeof(EC200u_Rx_Buff));
 8002e0c:	4906      	ldr	r1, [pc, #24]	; (8002e28 <Modem_BLE_Task+0x24>)
 8002e0e:	4b07      	ldr	r3, [pc, #28]	; (8002e2c <Modem_BLE_Task+0x28>)
 8002e10:	2264      	movs	r2, #100	; 0x64
 8002e12:	0018      	movs	r0, r3
 8002e14:	f005 fe04 	bl	8008a20 <HAL_UARTEx_ReceiveToIdle_IT>
	modem_ble_init();
 8002e18:	f000 f80a 	bl	8002e30 <modem_ble_init>
	while(1)
	{
		osDelay(1000);
 8002e1c:	23fa      	movs	r3, #250	; 0xfa
 8002e1e:	009b      	lsls	r3, r3, #2
 8002e20:	0018      	movs	r0, r3
 8002e22:	f005 ff08 	bl	8008c36 <osDelay>
 8002e26:	e7f9      	b.n	8002e1c <Modem_BLE_Task+0x18>
 8002e28:	200005f4 	.word	0x200005f4
 8002e2c:	200004c0 	.word	0x200004c0

08002e30 <modem_ble_init>:
	}
}
void modem_ble_init()
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	af00      	add	r7, sp, #0
	/*
	modem_initiate_cmd(MODEM_BLE_SET_NAME);
	vTaskDelay(2000 / portTICK_PERIOD_MS);
	*/

	modem_initiate_cmd(MODEM_TURN_ON_BLE);
 8002e34:	2018      	movs	r0, #24
 8002e36:	f7ff fb4f 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002e3a:	23fa      	movs	r3, #250	; 0xfa
 8002e3c:	00db      	lsls	r3, r3, #3
 8002e3e:	0018      	movs	r0, r3
 8002e40:	f005 fef9 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_BLE_SET_ADV_PARAM);
 8002e44:	201b      	movs	r0, #27
 8002e46:	f7ff fb47 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002e4a:	23fa      	movs	r3, #250	; 0xfa
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f005 fef1 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_BLE_SET_ADV_DATA);
 8002e54:	201c      	movs	r0, #28
 8002e56:	f7ff fb3f 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002e5a:	23fa      	movs	r3, #250	; 0xfa
 8002e5c:	00db      	lsls	r3, r3, #3
 8002e5e:	0018      	movs	r0, r3
 8002e60:	f005 fee9 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_BLE_SET_SCAN_RESP_DATA);
 8002e64:	201d      	movs	r0, #29
 8002e66:	f7ff fb37 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002e6a:	23fa      	movs	r3, #250	; 0xfa
 8002e6c:	00db      	lsls	r3, r3, #3
 8002e6e:	0018      	movs	r0, r3
 8002e70:	f005 fee1 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_BLE_SET_PRIMARY_SVC);
 8002e74:	201e      	movs	r0, #30
 8002e76:	f7ff fb2f 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002e7a:	23fa      	movs	r3, #250	; 0xfa
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	0018      	movs	r0, r3
 8002e80:	f005 fed9 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_BLE_ADD_SVC_CHAR);
 8002e84:	201f      	movs	r0, #31
 8002e86:	f7ff fb27 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002e8a:	23fa      	movs	r3, #250	; 0xfa
 8002e8c:	00db      	lsls	r3, r3, #3
 8002e8e:	0018      	movs	r0, r3
 8002e90:	f005 fed1 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_BLE_CFG_CHAR_VALUE);
 8002e94:	2020      	movs	r0, #32
 8002e96:	f7ff fb1f 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002e9a:	23fa      	movs	r3, #250	; 0xfa
 8002e9c:	00db      	lsls	r3, r3, #3
 8002e9e:	0018      	movs	r0, r3
 8002ea0:	f005 fec9 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_BLE_FINSISH_ADDING_SVC);
 8002ea4:	2021      	movs	r0, #33	; 0x21
 8002ea6:	f7ff fb17 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002eaa:	23fa      	movs	r3, #250	; 0xfa
 8002eac:	00db      	lsls	r3, r3, #3
 8002eae:	0018      	movs	r0, r3
 8002eb0:	f005 fec1 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_BLE_START_ADV);
 8002eb4:	2022      	movs	r0, #34	; 0x22
 8002eb6:	f7ff fb0f 	bl	80024d8 <modem_initiate_cmd>
	osDelay(2000);
 8002eba:	23fa      	movs	r3, #250	; 0xfa
 8002ebc:	00db      	lsls	r3, r3, #3
 8002ebe:	0018      	movs	r0, r3
 8002ec0:	f005 feb9 	bl	8008c36 <osDelay>
	*/




}
 8002ec4:	46c0      	nop			; (mov r8, r8)
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	bd80      	pop	{r7, pc}
	...

08002ecc <print_msg>:

extern GpsData GpsInfo_t;
/****************************** Function Prototypes **************************************/

void print_msg(const char *msg)
{
 8002ecc:	b580      	push	{r7, lr}
 8002ece:	b082      	sub	sp, #8
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart2,(uint8_t*)msg,strlen(msg), 1000);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	0018      	movs	r0, r3
 8002ed8:	f7fd f916 	bl	8000108 <strlen>
 8002edc:	0003      	movs	r3, r0
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	23fa      	movs	r3, #250	; 0xfa
 8002ee2:	009b      	lsls	r3, r3, #2
 8002ee4:	6879      	ldr	r1, [r7, #4]
 8002ee6:	4803      	ldr	r0, [pc, #12]	; (8002ef4 <print_msg+0x28>)
 8002ee8:	f003 fd6e 	bl	80069c8 <HAL_UART_Transmit>
}
 8002eec:	46c0      	nop			; (mov r8, r8)
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	b002      	add	sp, #8
 8002ef2:	bd80      	pop	{r7, pc}
 8002ef4:	20000554 	.word	0x20000554

08002ef8 <Modem_Rx_Process_start>:

void Modem_Rx_Process_start()
{
 8002ef8:	b590      	push	{r4, r7, lr}
 8002efa:	b087      	sub	sp, #28
 8002efc:	af00      	add	r7, sp, #0
	osThreadDef(ModemRxTask, ModemRx_Process, osPriorityNormal, 0, 256);
 8002efe:	1d3b      	adds	r3, r7, #4
 8002f00:	4a08      	ldr	r2, [pc, #32]	; (8002f24 <Modem_Rx_Process_start+0x2c>)
 8002f02:	ca13      	ldmia	r2!, {r0, r1, r4}
 8002f04:	c313      	stmia	r3!, {r0, r1, r4}
 8002f06:	ca03      	ldmia	r2!, {r0, r1}
 8002f08:	c303      	stmia	r3!, {r0, r1}
	ModemRx_TaskHandle = osThreadCreate(osThread(ModemRxTask), NULL);
 8002f0a:	1d3b      	adds	r3, r7, #4
 8002f0c:	2100      	movs	r1, #0
 8002f0e:	0018      	movs	r0, r3
 8002f10:	f005 fe69 	bl	8008be6 <osThreadCreate>
 8002f14:	0002      	movs	r2, r0
 8002f16:	4b04      	ldr	r3, [pc, #16]	; (8002f28 <Modem_Rx_Process_start+0x30>)
 8002f18:	601a      	str	r2, [r3, #0]
}
 8002f1a:	46c0      	nop			; (mov r8, r8)
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	b007      	add	sp, #28
 8002f20:	bd90      	pop	{r4, r7, pc}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	0800d3fc 	.word	0x0800d3fc
 8002f28:	200005ec 	.word	0x200005ec

08002f2c <ModemRx_Process>:
void ModemRx_Process(void const * argument)
{
 8002f2c:	b590      	push	{r4, r7, lr}
 8002f2e:	b08b      	sub	sp, #44	; 0x2c
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
//	osDelay(2000);
	uint32_t ulNotifiedValue;
	for(;;)
	{
        // Wait for notification from ISR
		ulNotifiedValue=ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8002f34:	2301      	movs	r3, #1
 8002f36:	425b      	negs	r3, r3
 8002f38:	0019      	movs	r1, r3
 8002f3a:	2001      	movs	r0, #1
 8002f3c:	f006 fb0e 	bl	800955c <ulTaskNotifyTake>
 8002f40:	0003      	movs	r3, r0
 8002f42:	627b      	str	r3, [r7, #36]	; 0x24
		if(ulNotifiedValue>0)
 8002f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d100      	bne.n	8002f4c <ModemRx_Process+0x20>
 8002f4a:	e1f2      	b.n	8003332 <ModemRx_Process+0x406>
		{
			print_msg((const char*)EC200u_Rx_Buff);
 8002f4c:	4bdb      	ldr	r3, [pc, #876]	; (80032bc <ModemRx_Process+0x390>)
 8002f4e:	0018      	movs	r0, r3
 8002f50:	f7ff ffbc 	bl	8002ecc <print_msg>
			//print_msg("Rx Task Running\r\n");
			switch(cmd_val)
 8002f54:	4bda      	ldr	r3, [pc, #872]	; (80032c0 <ModemRx_Process+0x394>)
 8002f56:	781b      	ldrb	r3, [r3, #0]
 8002f58:	2b28      	cmp	r3, #40	; 0x28
 8002f5a:	d900      	bls.n	8002f5e <ModemRx_Process+0x32>
 8002f5c:	e186      	b.n	800326c <ModemRx_Process+0x340>
 8002f5e:	009a      	lsls	r2, r3, #2
 8002f60:	4bd8      	ldr	r3, [pc, #864]	; (80032c4 <ModemRx_Process+0x398>)
 8002f62:	18d3      	adds	r3, r2, r3
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	469f      	mov	pc, r3
			{
				case MODEM_AT_CHECK:
				{
					osDelay(100);
 8002f68:	2064      	movs	r0, #100	; 0x64
 8002f6a:	f005 fe64 	bl	8008c36 <osDelay>
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 8002f6e:	4ad6      	ldr	r2, [pc, #856]	; (80032c8 <ModemRx_Process+0x39c>)
 8002f70:	4bd2      	ldr	r3, [pc, #840]	; (80032bc <ModemRx_Process+0x390>)
 8002f72:	0011      	movs	r1, r2
 8002f74:	0018      	movs	r0, r3
 8002f76:	f7ff fa7b 	bl	8002470 <modem_check_resp>
 8002f7a:	1e03      	subs	r3, r0, #0
 8002f7c:	d100      	bne.n	8002f80 <ModemRx_Process+0x54>
 8002f7e:	e195      	b.n	80032ac <ModemRx_Process+0x380>
					{
						Modem_AT_check=1;
 8002f80:	4bd2      	ldr	r3, [pc, #840]	; (80032cc <ModemRx_Process+0x3a0>)
 8002f82:	2201      	movs	r2, #1
 8002f84:	701a      	strb	r2, [r3, #0]
						cmd_val=0;
 8002f86:	4bce      	ldr	r3, [pc, #824]	; (80032c0 <ModemRx_Process+0x394>)
 8002f88:	2200      	movs	r2, #0
 8002f8a:	701a      	strb	r2, [r3, #0]
					}
					break;
 8002f8c:	e18e      	b.n	80032ac <ModemRx_Process+0x380>
				}
				case MODEM_GET_INF0:
				{
					osDelay(100);
 8002f8e:	2064      	movs	r0, #100	; 0x64
 8002f90:	f005 fe51 	bl	8008c36 <osDelay>
					const char* buffer_ptr = (const char*)EC200u_Rx_Buff;
 8002f94:	4bc9      	ldr	r3, [pc, #804]	; (80032bc <ModemRx_Process+0x390>)
 8002f96:	623b      	str	r3, [r7, #32]
					modem_parse_string(&buffer_ptr, modem_info_t.modem_prd_id_info, sizeof(modem_info_t.modem_prd_id_info));
 8002f98:	49cd      	ldr	r1, [pc, #820]	; (80032d0 <ModemRx_Process+0x3a4>)
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	18fb      	adds	r3, r7, r3
 8002f9e:	2214      	movs	r2, #20
 8002fa0:	0018      	movs	r0, r3
 8002fa2:	f000 f9cb 	bl	800333c <modem_parse_string>
					//strcpy(modem_info_t.modem_prd_id_info,(char*)EC200u_Rx_Buff);
					cmd_val=0;
 8002fa6:	4bc6      	ldr	r3, [pc, #792]	; (80032c0 <ModemRx_Process+0x394>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
					break;
 8002fac:	e1c1      	b.n	8003332 <ModemRx_Process+0x406>
				}
				case MODEM_GET_MANF_ID:
				{
					osDelay(100);
 8002fae:	2064      	movs	r0, #100	; 0x64
 8002fb0:	f005 fe41 	bl	8008c36 <osDelay>
					const char* buffer_ptr = (const char*)EC200u_Rx_Buff;
 8002fb4:	4bc1      	ldr	r3, [pc, #772]	; (80032bc <ModemRx_Process+0x390>)
 8002fb6:	61fb      	str	r3, [r7, #28]
					modem_parse_string(&buffer_ptr, modem_info_t.modem_manf_id, sizeof(modem_info_t.modem_manf_id));
 8002fb8:	49c6      	ldr	r1, [pc, #792]	; (80032d4 <ModemRx_Process+0x3a8>)
 8002fba:	231c      	movs	r3, #28
 8002fbc:	18fb      	adds	r3, r7, r3
 8002fbe:	2219      	movs	r2, #25
 8002fc0:	0018      	movs	r0, r3
 8002fc2:	f000 f9bb 	bl	800333c <modem_parse_string>
					cmd_val=0;
 8002fc6:	4bbe      	ldr	r3, [pc, #760]	; (80032c0 <ModemRx_Process+0x394>)
 8002fc8:	2200      	movs	r2, #0
 8002fca:	701a      	strb	r2, [r3, #0]
					break;
 8002fcc:	e1b1      	b.n	8003332 <ModemRx_Process+0x406>
				}
				case MODEM_GET_TA_MODEL_INFO:
				{
					osDelay(100);
 8002fce:	2064      	movs	r0, #100	; 0x64
 8002fd0:	f005 fe31 	bl	8008c36 <osDelay>
					const char* buffer_ptr = (const char*)EC200u_Rx_Buff;
 8002fd4:	4bb9      	ldr	r3, [pc, #740]	; (80032bc <ModemRx_Process+0x390>)
 8002fd6:	61bb      	str	r3, [r7, #24]
					modem_parse_string(&buffer_ptr, modem_info_t.modem_TA_model_info, sizeof(modem_info_t.modem_TA_model_info));
 8002fd8:	49bf      	ldr	r1, [pc, #764]	; (80032d8 <ModemRx_Process+0x3ac>)
 8002fda:	2318      	movs	r3, #24
 8002fdc:	18fb      	adds	r3, r7, r3
 8002fde:	2219      	movs	r2, #25
 8002fe0:	0018      	movs	r0, r3
 8002fe2:	f000 f9ab 	bl	800333c <modem_parse_string>
					cmd_val=0;
 8002fe6:	4bb6      	ldr	r3, [pc, #728]	; (80032c0 <ModemRx_Process+0x394>)
 8002fe8:	2200      	movs	r2, #0
 8002fea:	701a      	strb	r2, [r3, #0]
					memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
 8002fec:	4bb3      	ldr	r3, [pc, #716]	; (80032bc <ModemRx_Process+0x390>)
 8002fee:	2264      	movs	r2, #100	; 0x64
 8002ff0:	2100      	movs	r1, #0
 8002ff2:	0018      	movs	r0, r3
 8002ff4:	f007 ffa6 	bl	800af44 <memset>
					break;
 8002ff8:	e19b      	b.n	8003332 <ModemRx_Process+0x406>
				}
				case MODEM_CHECK_SIM_READY:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"READY"))
 8002ffa:	4ab8      	ldr	r2, [pc, #736]	; (80032dc <ModemRx_Process+0x3b0>)
 8002ffc:	4baf      	ldr	r3, [pc, #700]	; (80032bc <ModemRx_Process+0x390>)
 8002ffe:	0011      	movs	r1, r2
 8003000:	0018      	movs	r0, r3
 8003002:	f7ff fa35 	bl	8002470 <modem_check_resp>
 8003006:	1e03      	subs	r3, r0, #0
 8003008:	d00b      	beq.n	8003022 <ModemRx_Process+0xf6>
					{
						cmd_val=0;
 800300a:	4bad      	ldr	r3, [pc, #692]	; (80032c0 <ModemRx_Process+0x394>)
 800300c:	2200      	movs	r2, #0
 800300e:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.sim_status=1;
 8003010:	4baf      	ldr	r3, [pc, #700]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003012:	2246      	movs	r2, #70	; 0x46
 8003014:	2101      	movs	r1, #1
 8003016:	5499      	strb	r1, [r3, r2]
						print_msg("Sim Card Detected\r\n");
 8003018:	4bb1      	ldr	r3, [pc, #708]	; (80032e0 <ModemRx_Process+0x3b4>)
 800301a:	0018      	movs	r0, r3
 800301c:	f7ff ff56 	bl	8002ecc <print_msg>
					else
					{
						modem_info_t.simcard_info.sim_status=255;
						print_msg("Sim Card Not Detected\r\n");
					}
					break;
 8003020:	e187      	b.n	8003332 <ModemRx_Process+0x406>
						modem_info_t.simcard_info.sim_status=255;
 8003022:	4bab      	ldr	r3, [pc, #684]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003024:	2246      	movs	r2, #70	; 0x46
 8003026:	21ff      	movs	r1, #255	; 0xff
 8003028:	5499      	strb	r1, [r3, r2]
						print_msg("Sim Card Not Detected\r\n");
 800302a:	4bae      	ldr	r3, [pc, #696]	; (80032e4 <ModemRx_Process+0x3b8>)
 800302c:	0018      	movs	r0, r3
 800302e:	f7ff ff4d 	bl	8002ecc <print_msg>
					break;
 8003032:	e17e      	b.n	8003332 <ModemRx_Process+0x406>
				}
				case MODEM_CHECK_NETWORK_REG:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 8003034:	4aa4      	ldr	r2, [pc, #656]	; (80032c8 <ModemRx_Process+0x39c>)
 8003036:	4ba1      	ldr	r3, [pc, #644]	; (80032bc <ModemRx_Process+0x390>)
 8003038:	0011      	movs	r1, r2
 800303a:	0018      	movs	r0, r3
 800303c:	f7ff fa18 	bl	8002470 <modem_check_resp>
 8003040:	1e03      	subs	r3, r0, #0
 8003042:	d00b      	beq.n	800305c <ModemRx_Process+0x130>
					{
						cmd_val=0;
 8003044:	4b9e      	ldr	r3, [pc, #632]	; (80032c0 <ModemRx_Process+0x394>)
 8003046:	2200      	movs	r2, #0
 8003048:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.sim_reg_status=1;
 800304a:	4ba1      	ldr	r3, [pc, #644]	; (80032d0 <ModemRx_Process+0x3a4>)
 800304c:	2247      	movs	r2, #71	; 0x47
 800304e:	2101      	movs	r1, #1
 8003050:	5499      	strb	r1, [r3, r2]
						print_msg("Sim Card Registered\r\n");
 8003052:	4ba5      	ldr	r3, [pc, #660]	; (80032e8 <ModemRx_Process+0x3bc>)
 8003054:	0018      	movs	r0, r3
 8003056:	f7ff ff39 	bl	8002ecc <print_msg>
					else
					{
						modem_info_t.simcard_info.sim_reg_status=255;
						print_msg("Sim Card Registration Failed\r\n");
					}
					break;
 800305a:	e16a      	b.n	8003332 <ModemRx_Process+0x406>
						modem_info_t.simcard_info.sim_reg_status=255;
 800305c:	4b9c      	ldr	r3, [pc, #624]	; (80032d0 <ModemRx_Process+0x3a4>)
 800305e:	2247      	movs	r2, #71	; 0x47
 8003060:	21ff      	movs	r1, #255	; 0xff
 8003062:	5499      	strb	r1, [r3, r2]
						print_msg("Sim Card Registration Failed\r\n");
 8003064:	4ba1      	ldr	r3, [pc, #644]	; (80032ec <ModemRx_Process+0x3c0>)
 8003066:	0018      	movs	r0, r3
 8003068:	f7ff ff30 	bl	8002ecc <print_msg>
					break;
 800306c:	e161      	b.n	8003332 <ModemRx_Process+0x406>
				}
				case MODEM_ATTACH_GPRS:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 800306e:	4a96      	ldr	r2, [pc, #600]	; (80032c8 <ModemRx_Process+0x39c>)
 8003070:	4b92      	ldr	r3, [pc, #584]	; (80032bc <ModemRx_Process+0x390>)
 8003072:	0011      	movs	r1, r2
 8003074:	0018      	movs	r0, r3
 8003076:	f7ff f9fb 	bl	8002470 <modem_check_resp>
 800307a:	1e03      	subs	r3, r0, #0
 800307c:	d00b      	beq.n	8003096 <ModemRx_Process+0x16a>
					{
						cmd_val=0;
 800307e:	4b90      	ldr	r3, [pc, #576]	; (80032c0 <ModemRx_Process+0x394>)
 8003080:	2200      	movs	r2, #0
 8003082:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.gprs_attachment=1;
 8003084:	4b92      	ldr	r3, [pc, #584]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003086:	2249      	movs	r2, #73	; 0x49
 8003088:	2101      	movs	r1, #1
 800308a:	5499      	strb	r1, [r3, r2]
						print_msg("GPRS attachment sucessfull\r\n");
 800308c:	4b98      	ldr	r3, [pc, #608]	; (80032f0 <ModemRx_Process+0x3c4>)
 800308e:	0018      	movs	r0, r3
 8003090:	f7ff ff1c 	bl	8002ecc <print_msg>
					else
					{
						modem_info_t.simcard_info.gprs_attachment=255;
						print_msg("GPRS attachment Failed\r\n");
					}
					break;
 8003094:	e14d      	b.n	8003332 <ModemRx_Process+0x406>
						modem_info_t.simcard_info.gprs_attachment=255;
 8003096:	4b8e      	ldr	r3, [pc, #568]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003098:	2249      	movs	r2, #73	; 0x49
 800309a:	21ff      	movs	r1, #255	; 0xff
 800309c:	5499      	strb	r1, [r3, r2]
						print_msg("GPRS attachment Failed\r\n");
 800309e:	4b95      	ldr	r3, [pc, #596]	; (80032f4 <ModemRx_Process+0x3c8>)
 80030a0:	0018      	movs	r0, r3
 80030a2:	f7ff ff13 	bl	8002ecc <print_msg>
					break;
 80030a6:	e144      	b.n	8003332 <ModemRx_Process+0x406>
				}
				case MODEM_SET_PDP:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 80030a8:	4a87      	ldr	r2, [pc, #540]	; (80032c8 <ModemRx_Process+0x39c>)
 80030aa:	4b84      	ldr	r3, [pc, #528]	; (80032bc <ModemRx_Process+0x390>)
 80030ac:	0011      	movs	r1, r2
 80030ae:	0018      	movs	r0, r3
 80030b0:	f7ff f9de 	bl	8002470 <modem_check_resp>
 80030b4:	1e03      	subs	r3, r0, #0
 80030b6:	d00b      	beq.n	80030d0 <ModemRx_Process+0x1a4>
					{
						cmd_val=0;
 80030b8:	4b81      	ldr	r3, [pc, #516]	; (80032c0 <ModemRx_Process+0x394>)
 80030ba:	2200      	movs	r2, #0
 80030bc:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.pdp_status=1;
 80030be:	4b84      	ldr	r3, [pc, #528]	; (80032d0 <ModemRx_Process+0x3a4>)
 80030c0:	2248      	movs	r2, #72	; 0x48
 80030c2:	2101      	movs	r1, #1
 80030c4:	5499      	strb	r1, [r3, r2]
						print_msg("PDP is set\r\n");
 80030c6:	4b8c      	ldr	r3, [pc, #560]	; (80032f8 <ModemRx_Process+0x3cc>)
 80030c8:	0018      	movs	r0, r3
 80030ca:	f7ff feff 	bl	8002ecc <print_msg>
					else
					{
						modem_info_t.simcard_info.pdp_status=255;
						print_msg("PDP is Failed\r\n");
					}
					break;
 80030ce:	e130      	b.n	8003332 <ModemRx_Process+0x406>
						modem_info_t.simcard_info.pdp_status=255;
 80030d0:	4b7f      	ldr	r3, [pc, #508]	; (80032d0 <ModemRx_Process+0x3a4>)
 80030d2:	2248      	movs	r2, #72	; 0x48
 80030d4:	21ff      	movs	r1, #255	; 0xff
 80030d6:	5499      	strb	r1, [r3, r2]
						print_msg("PDP is Failed\r\n");
 80030d8:	4b88      	ldr	r3, [pc, #544]	; (80032fc <ModemRx_Process+0x3d0>)
 80030da:	0018      	movs	r0, r3
 80030dc:	f7ff fef6 	bl	8002ecc <print_msg>
					break;
 80030e0:	e127      	b.n	8003332 <ModemRx_Process+0x406>
				}
				case MODEM_ACTIVATE_PDP:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 80030e2:	4a79      	ldr	r2, [pc, #484]	; (80032c8 <ModemRx_Process+0x39c>)
 80030e4:	4b75      	ldr	r3, [pc, #468]	; (80032bc <ModemRx_Process+0x390>)
 80030e6:	0011      	movs	r1, r2
 80030e8:	0018      	movs	r0, r3
 80030ea:	f7ff f9c1 	bl	8002470 <modem_check_resp>
 80030ee:	1e03      	subs	r3, r0, #0
 80030f0:	d00b      	beq.n	800310a <ModemRx_Process+0x1de>
					{
						cmd_val=0;
 80030f2:	4b73      	ldr	r3, [pc, #460]	; (80032c0 <ModemRx_Process+0x394>)
 80030f4:	2200      	movs	r2, #0
 80030f6:	701a      	strb	r2, [r3, #0]
						modem_info_t.simcard_info.pdp_active_status=1;
 80030f8:	4b75      	ldr	r3, [pc, #468]	; (80032d0 <ModemRx_Process+0x3a4>)
 80030fa:	224a      	movs	r2, #74	; 0x4a
 80030fc:	2101      	movs	r1, #1
 80030fe:	5499      	strb	r1, [r3, r2]
						print_msg("PDP is active\r\n");
 8003100:	4b7f      	ldr	r3, [pc, #508]	; (8003300 <ModemRx_Process+0x3d4>)
 8003102:	0018      	movs	r0, r3
 8003104:	f7ff fee2 	bl	8002ecc <print_msg>
 8003108:	e007      	b.n	800311a <ModemRx_Process+0x1ee>
					}
					else
					{
						modem_info_t.simcard_info.pdp_active_status=255;
 800310a:	4b71      	ldr	r3, [pc, #452]	; (80032d0 <ModemRx_Process+0x3a4>)
 800310c:	224a      	movs	r2, #74	; 0x4a
 800310e:	21ff      	movs	r1, #255	; 0xff
 8003110:	5499      	strb	r1, [r3, r2]
						print_msg("PDP is activation Failed\r\n");
 8003112:	4b7c      	ldr	r3, [pc, #496]	; (8003304 <ModemRx_Process+0x3d8>)
 8003114:	0018      	movs	r0, r3
 8003116:	f7ff fed9 	bl	8002ecc <print_msg>
					}
				}
				case MODEM_MQTT_VERSION_CFG:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff,"OK"))
 800311a:	4a6b      	ldr	r2, [pc, #428]	; (80032c8 <ModemRx_Process+0x39c>)
 800311c:	4b67      	ldr	r3, [pc, #412]	; (80032bc <ModemRx_Process+0x390>)
 800311e:	0011      	movs	r1, r2
 8003120:	0018      	movs	r0, r3
 8003122:	f7ff f9a5 	bl	8002470 <modem_check_resp>
 8003126:	1e03      	subs	r3, r0, #0
 8003128:	d100      	bne.n	800312c <ModemRx_Process+0x200>
 800312a:	e0c1      	b.n	80032b0 <ModemRx_Process+0x384>
					{
						cmd_val=0;
 800312c:	4b64      	ldr	r3, [pc, #400]	; (80032c0 <ModemRx_Process+0x394>)
 800312e:	2200      	movs	r2, #0
 8003130:	701a      	strb	r2, [r3, #0]
						print_msg("MQTT Configutations Done\r\n");
 8003132:	4b75      	ldr	r3, [pc, #468]	; (8003308 <ModemRx_Process+0x3dc>)
 8003134:	0018      	movs	r0, r3
 8003136:	f7ff fec9 	bl	8002ecc <print_msg>
					}
					break;
 800313a:	e0b9      	b.n	80032b0 <ModemRx_Process+0x384>
				}
				case MODEM_MQTT_OPEN:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QMTOPEN"))
 800313c:	4a73      	ldr	r2, [pc, #460]	; (800330c <ModemRx_Process+0x3e0>)
 800313e:	4b5f      	ldr	r3, [pc, #380]	; (80032bc <ModemRx_Process+0x390>)
 8003140:	0011      	movs	r1, r2
 8003142:	0018      	movs	r0, r3
 8003144:	f7ff f994 	bl	8002470 <modem_check_resp>
 8003148:	1e03      	subs	r3, r0, #0
 800314a:	d018      	beq.n	800317e <ModemRx_Process+0x252>
					{
						cmd_val=0;
 800314c:	4b5c      	ldr	r3, [pc, #368]	; (80032c0 <ModemRx_Process+0x394>)
 800314e:	2200      	movs	r2, #0
 8003150:	701a      	strb	r2, [r3, #0]
						const char* p = (const char*)EC200u_Rx_Buff;
 8003152:	4b5a      	ldr	r3, [pc, #360]	; (80032bc <ModemRx_Process+0x390>)
 8003154:	617b      	str	r3, [r7, #20]
						modem_info_t.mqtt_info_t.mqtt_client_idx = modem_parse_number(&p);
 8003156:	2414      	movs	r4, #20
 8003158:	193b      	adds	r3, r7, r4
 800315a:	0018      	movs	r0, r3
 800315c:	f000 f95c 	bl	8003418 <modem_parse_number>
 8003160:	0003      	movs	r3, r0
 8003162:	b2d9      	uxtb	r1, r3
 8003164:	4b5a      	ldr	r3, [pc, #360]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003166:	224c      	movs	r2, #76	; 0x4c
 8003168:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_open_stat  = modem_parse_number(&p);
 800316a:	193b      	adds	r3, r7, r4
 800316c:	0018      	movs	r0, r3
 800316e:	f000 f953 	bl	8003418 <modem_parse_number>
 8003172:	0003      	movs	r3, r0
 8003174:	b2d9      	uxtb	r1, r3
 8003176:	4b56      	ldr	r3, [pc, #344]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003178:	224b      	movs	r2, #75	; 0x4b
 800317a:	5499      	strb	r1, [r3, r2]
					{
						print_msg("Failed to open MQTT network for a client\r\n");
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
						modem_info_t.mqtt_info_t.mqtt_open_stat=255;
					}
					break;
 800317c:	e09a      	b.n	80032b4 <ModemRx_Process+0x388>
					else if(modem_check_resp((const char*)EC200u_Rx_Buff, "ERROR"))
 800317e:	4a64      	ldr	r2, [pc, #400]	; (8003310 <ModemRx_Process+0x3e4>)
 8003180:	4b4e      	ldr	r3, [pc, #312]	; (80032bc <ModemRx_Process+0x390>)
 8003182:	0011      	movs	r1, r2
 8003184:	0018      	movs	r0, r3
 8003186:	f7ff f973 	bl	8002470 <modem_check_resp>
 800318a:	1e03      	subs	r3, r0, #0
 800318c:	d100      	bne.n	8003190 <ModemRx_Process+0x264>
 800318e:	e091      	b.n	80032b4 <ModemRx_Process+0x388>
						print_msg("Failed to open MQTT network for a client\r\n");
 8003190:	4b60      	ldr	r3, [pc, #384]	; (8003314 <ModemRx_Process+0x3e8>)
 8003192:	0018      	movs	r0, r3
 8003194:	f7ff fe9a 	bl	8002ecc <print_msg>
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
 8003198:	4b4d      	ldr	r3, [pc, #308]	; (80032d0 <ModemRx_Process+0x3a4>)
 800319a:	224c      	movs	r2, #76	; 0x4c
 800319c:	21ff      	movs	r1, #255	; 0xff
 800319e:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_open_stat=255;
 80031a0:	4b4b      	ldr	r3, [pc, #300]	; (80032d0 <ModemRx_Process+0x3a4>)
 80031a2:	224b      	movs	r2, #75	; 0x4b
 80031a4:	21ff      	movs	r1, #255	; 0xff
 80031a6:	5499      	strb	r1, [r3, r2]
					break;
 80031a8:	e084      	b.n	80032b4 <ModemRx_Process+0x388>
				}
				case MODEM_MQTT_CONN:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QMTCONN"))
 80031aa:	4a5b      	ldr	r2, [pc, #364]	; (8003318 <ModemRx_Process+0x3ec>)
 80031ac:	4b43      	ldr	r3, [pc, #268]	; (80032bc <ModemRx_Process+0x390>)
 80031ae:	0011      	movs	r1, r2
 80031b0:	0018      	movs	r0, r3
 80031b2:	f7ff f95d 	bl	8002470 <modem_check_resp>
 80031b6:	1e03      	subs	r3, r0, #0
 80031b8:	d021      	beq.n	80031fe <ModemRx_Process+0x2d2>
					{
						cmd_val=0;
 80031ba:	4b41      	ldr	r3, [pc, #260]	; (80032c0 <ModemRx_Process+0x394>)
 80031bc:	2200      	movs	r2, #0
 80031be:	701a      	strb	r2, [r3, #0]
						const char* p = (const char*)EC200u_Rx_Buff;
 80031c0:	4b3e      	ldr	r3, [pc, #248]	; (80032bc <ModemRx_Process+0x390>)
 80031c2:	613b      	str	r3, [r7, #16]
						modem_info_t.mqtt_info_t.mqtt_client_idx = modem_parse_number(&p);
 80031c4:	2410      	movs	r4, #16
 80031c6:	193b      	adds	r3, r7, r4
 80031c8:	0018      	movs	r0, r3
 80031ca:	f000 f925 	bl	8003418 <modem_parse_number>
 80031ce:	0003      	movs	r3, r0
 80031d0:	b2d9      	uxtb	r1, r3
 80031d2:	4b3f      	ldr	r3, [pc, #252]	; (80032d0 <ModemRx_Process+0x3a4>)
 80031d4:	224c      	movs	r2, #76	; 0x4c
 80031d6:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_stat  = modem_parse_number(&p);
 80031d8:	193b      	adds	r3, r7, r4
 80031da:	0018      	movs	r0, r3
 80031dc:	f000 f91c 	bl	8003418 <modem_parse_number>
 80031e0:	0003      	movs	r3, r0
 80031e2:	b2d9      	uxtb	r1, r3
 80031e4:	4b3a      	ldr	r3, [pc, #232]	; (80032d0 <ModemRx_Process+0x3a4>)
 80031e6:	224d      	movs	r2, #77	; 0x4d
 80031e8:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_ret_code  = modem_parse_number(&p);
 80031ea:	193b      	adds	r3, r7, r4
 80031ec:	0018      	movs	r0, r3
 80031ee:	f000 f913 	bl	8003418 <modem_parse_number>
 80031f2:	0003      	movs	r3, r0
 80031f4:	b2d9      	uxtb	r1, r3
 80031f6:	4b36      	ldr	r3, [pc, #216]	; (80032d0 <ModemRx_Process+0x3a4>)
 80031f8:	224e      	movs	r2, #78	; 0x4e
 80031fa:	5499      	strb	r1, [r3, r2]
						print_msg("Failed to connect to a MQTT client\r\n");
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
						modem_info_t.mqtt_info_t.mqtt_conn_stat=255;
						modem_info_t.mqtt_info_t.mqtt_conn_ret_code=255;
					}
					break;
 80031fc:	e05c      	b.n	80032b8 <ModemRx_Process+0x38c>
					else if(modem_check_resp((const char*)EC200u_Rx_Buff, "ERROR"))
 80031fe:	4a44      	ldr	r2, [pc, #272]	; (8003310 <ModemRx_Process+0x3e4>)
 8003200:	4b2e      	ldr	r3, [pc, #184]	; (80032bc <ModemRx_Process+0x390>)
 8003202:	0011      	movs	r1, r2
 8003204:	0018      	movs	r0, r3
 8003206:	f7ff f933 	bl	8002470 <modem_check_resp>
 800320a:	1e03      	subs	r3, r0, #0
 800320c:	d054      	beq.n	80032b8 <ModemRx_Process+0x38c>
						print_msg("Failed to connect to a MQTT client\r\n");
 800320e:	4b43      	ldr	r3, [pc, #268]	; (800331c <ModemRx_Process+0x3f0>)
 8003210:	0018      	movs	r0, r3
 8003212:	f7ff fe5b 	bl	8002ecc <print_msg>
						modem_info_t.mqtt_info_t.mqtt_client_idx=255;
 8003216:	4b2e      	ldr	r3, [pc, #184]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003218:	224c      	movs	r2, #76	; 0x4c
 800321a:	21ff      	movs	r1, #255	; 0xff
 800321c:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_stat=255;
 800321e:	4b2c      	ldr	r3, [pc, #176]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003220:	224d      	movs	r2, #77	; 0x4d
 8003222:	21ff      	movs	r1, #255	; 0xff
 8003224:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_conn_ret_code=255;
 8003226:	4b2a      	ldr	r3, [pc, #168]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003228:	224e      	movs	r2, #78	; 0x4e
 800322a:	21ff      	movs	r1, #255	; 0xff
 800322c:	5499      	strb	r1, [r3, r2]
					break;
 800322e:	e043      	b.n	80032b8 <ModemRx_Process+0x38c>
				}
				case MODEM_MQTT_SUBSCRIBE:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "ERROR"))
 8003230:	4a37      	ldr	r2, [pc, #220]	; (8003310 <ModemRx_Process+0x3e4>)
 8003232:	4b22      	ldr	r3, [pc, #136]	; (80032bc <ModemRx_Process+0x390>)
 8003234:	0011      	movs	r1, r2
 8003236:	0018      	movs	r0, r3
 8003238:	f7ff f91a 	bl	8002470 <modem_check_resp>
 800323c:	1e03      	subs	r3, r0, #0
 800323e:	d007      	beq.n	8003250 <ModemRx_Process+0x324>
					{
						modem_info_t.mqtt_info_t.mqtt_subs_stat=255;
 8003240:	4b23      	ldr	r3, [pc, #140]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003242:	224f      	movs	r2, #79	; 0x4f
 8003244:	21ff      	movs	r1, #255	; 0xff
 8003246:	5499      	strb	r1, [r3, r2]
						print_msg("Failed To subscribe to a topic\r\n");
 8003248:	4b35      	ldr	r3, [pc, #212]	; (8003320 <ModemRx_Process+0x3f4>)
 800324a:	0018      	movs	r0, r3
 800324c:	f7ff fe3e 	bl	8002ecc <print_msg>
					}
				}
				case MODEM_GPS_GET_CURR_LOCATION:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QGPSLOC:"))
 8003250:	4a34      	ldr	r2, [pc, #208]	; (8003324 <ModemRx_Process+0x3f8>)
 8003252:	4b1a      	ldr	r3, [pc, #104]	; (80032bc <ModemRx_Process+0x390>)
 8003254:	0011      	movs	r1, r2
 8003256:	0018      	movs	r0, r3
 8003258:	f7ff f90a 	bl	8002470 <modem_check_resp>
 800325c:	1e03      	subs	r3, r0, #0
 800325e:	d005      	beq.n	800326c <ModemRx_Process+0x340>
					{
						modem_parse_gps_location((const char*)EC200u_Rx_Buff, &GpsInfo_t);
 8003260:	4a31      	ldr	r2, [pc, #196]	; (8003328 <ModemRx_Process+0x3fc>)
 8003262:	4b16      	ldr	r3, [pc, #88]	; (80032bc <ModemRx_Process+0x390>)
 8003264:	0011      	movs	r1, r2
 8003266:	0018      	movs	r0, r3
 8003268:	f7ff fc74 	bl	8002b54 <modem_parse_gps_location>
					}
				}
				default:
				{
					if(modem_check_resp((const char*)EC200u_Rx_Buff, "+QMTSTAT"))
 800326c:	4a2f      	ldr	r2, [pc, #188]	; (800332c <ModemRx_Process+0x400>)
 800326e:	4b13      	ldr	r3, [pc, #76]	; (80032bc <ModemRx_Process+0x390>)
 8003270:	0011      	movs	r1, r2
 8003272:	0018      	movs	r0, r3
 8003274:	f7ff f8fc 	bl	8002470 <modem_check_resp>
 8003278:	1e03      	subs	r3, r0, #0
 800327a:	d059      	beq.n	8003330 <ModemRx_Process+0x404>
					{
						const char* p = (const char*)EC200u_Rx_Buff;
 800327c:	4b0f      	ldr	r3, [pc, #60]	; (80032bc <ModemRx_Process+0x390>)
 800327e:	60fb      	str	r3, [r7, #12]
						modem_info_t.mqtt_info_t.mqtt_client_idx = modem_parse_number(&p);
 8003280:	240c      	movs	r4, #12
 8003282:	193b      	adds	r3, r7, r4
 8003284:	0018      	movs	r0, r3
 8003286:	f000 f8c7 	bl	8003418 <modem_parse_number>
 800328a:	0003      	movs	r3, r0
 800328c:	b2d9      	uxtb	r1, r3
 800328e:	4b10      	ldr	r3, [pc, #64]	; (80032d0 <ModemRx_Process+0x3a4>)
 8003290:	224c      	movs	r2, #76	; 0x4c
 8003292:	5499      	strb	r1, [r3, r2]
						modem_info_t.mqtt_info_t.mqtt_urc_error=modem_parse_number(&p);
 8003294:	193b      	adds	r3, r7, r4
 8003296:	0018      	movs	r0, r3
 8003298:	f000 f8be 	bl	8003418 <modem_parse_number>
 800329c:	0003      	movs	r3, r0
 800329e:	b2d9      	uxtb	r1, r3
 80032a0:	4b0b      	ldr	r3, [pc, #44]	; (80032d0 <ModemRx_Process+0x3a4>)
 80032a2:	2250      	movs	r2, #80	; 0x50
 80032a4:	5499      	strb	r1, [r3, r2]
						modem_handle_mqtt_urc_codes();
 80032a6:	f7ff fb6d 	bl	8002984 <modem_handle_mqtt_urc_codes>
					}
					break;
 80032aa:	e041      	b.n	8003330 <ModemRx_Process+0x404>
					break;
 80032ac:	46c0      	nop			; (mov r8, r8)
 80032ae:	e040      	b.n	8003332 <ModemRx_Process+0x406>
					break;
 80032b0:	46c0      	nop			; (mov r8, r8)
 80032b2:	e03e      	b.n	8003332 <ModemRx_Process+0x406>
					break;
 80032b4:	46c0      	nop			; (mov r8, r8)
 80032b6:	e03c      	b.n	8003332 <ModemRx_Process+0x406>
					break;
 80032b8:	46c0      	nop			; (mov r8, r8)
 80032ba:	e03a      	b.n	8003332 <ModemRx_Process+0x406>
 80032bc:	200005f4 	.word	0x200005f4
 80032c0:	20000268 	.word	0x20000268
 80032c4:	0800d774 	.word	0x0800d774
 80032c8:	0800d410 	.word	0x0800d410
 80032cc:	200004bd 	.word	0x200004bd
 80032d0:	2000046c 	.word	0x2000046c
 80032d4:	20000480 	.word	0x20000480
 80032d8:	20000499 	.word	0x20000499
 80032dc:	0800d414 	.word	0x0800d414
 80032e0:	0800d41c 	.word	0x0800d41c
 80032e4:	0800d430 	.word	0x0800d430
 80032e8:	0800d448 	.word	0x0800d448
 80032ec:	0800d460 	.word	0x0800d460
 80032f0:	0800d480 	.word	0x0800d480
 80032f4:	0800d4a0 	.word	0x0800d4a0
 80032f8:	0800d4bc 	.word	0x0800d4bc
 80032fc:	0800d4cc 	.word	0x0800d4cc
 8003300:	0800d4dc 	.word	0x0800d4dc
 8003304:	0800d4ec 	.word	0x0800d4ec
 8003308:	0800d508 	.word	0x0800d508
 800330c:	0800d524 	.word	0x0800d524
 8003310:	0800d530 	.word	0x0800d530
 8003314:	0800d538 	.word	0x0800d538
 8003318:	0800d564 	.word	0x0800d564
 800331c:	0800d570 	.word	0x0800d570
 8003320:	0800d598 	.word	0x0800d598
 8003324:	0800d5bc 	.word	0x0800d5bc
 8003328:	20000208 	.word	0x20000208
 800332c:	0800d5c8 	.word	0x0800d5c8
					break;
 8003330:	46c0      	nop			; (mov r8, r8)
				}
			}

		}
		osDelay(10);
 8003332:	200a      	movs	r0, #10
 8003334:	f005 fc7f 	bl	8008c36 <osDelay>
		ulNotifiedValue=ulTaskNotifyTake(pdTRUE, portMAX_DELAY);
 8003338:	e5fc      	b.n	8002f34 <ModemRx_Process+0x8>
 800333a:	46c0      	nop			; (mov r8, r8)

0800333c <modem_parse_string>:
 * \param[in]       dst: Destination buffer to copy revision into
 * \param[in]       dst_len: Size of destination buffer, including null terminator
 * \return          `1` on success, `0` otherwise
 */
uint8_t modem_parse_string(const char** src, char* dst, size_t dst_len)
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
    const char* p = *src;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	61fb      	str	r3, [r7, #28]
    const char* rev_start = NULL;
 800334e:	2300      	movs	r3, #0
 8003350:	61bb      	str	r3, [r7, #24]
    size_t i = 0;
 8003352:	2300      	movs	r3, #0
 8003354:	617b      	str	r3, [r7, #20]

    // Scan for "Revision: "
    while (*p != '\0') {
 8003356:	e054      	b.n	8003402 <modem_parse_string+0xc6>
        if (strncmp(p, "Revision:", 9) == 0) {
 8003358:	492e      	ldr	r1, [pc, #184]	; (8003414 <modem_parse_string+0xd8>)
 800335a:	69fb      	ldr	r3, [r7, #28]
 800335c:	2209      	movs	r2, #9
 800335e:	0018      	movs	r0, r3
 8003360:	f007 fdf8 	bl	800af54 <strncmp>
 8003364:	1e03      	subs	r3, r0, #0
 8003366:	d13d      	bne.n	80033e4 <modem_parse_string+0xa8>
            rev_start = p + 9;
 8003368:	69fb      	ldr	r3, [r7, #28]
 800336a:	3309      	adds	r3, #9
 800336c:	61bb      	str	r3, [r7, #24]

            // Skip leading whitespace
            while (*rev_start == ' ') {
 800336e:	e002      	b.n	8003376 <modem_parse_string+0x3a>
                ++rev_start;
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	3301      	adds	r3, #1
 8003374:	61bb      	str	r3, [r7, #24]
            while (*rev_start == ' ') {
 8003376:	69bb      	ldr	r3, [r7, #24]
 8003378:	781b      	ldrb	r3, [r3, #0]
 800337a:	2b20      	cmp	r3, #32
 800337c:	d0f8      	beq.n	8003370 <modem_parse_string+0x34>
            }

            // Copy up to newline or buffer limit
            if (dst != NULL && dst_len > 0) {
 800337e:	68bb      	ldr	r3, [r7, #8]
 8003380:	2b00      	cmp	r3, #0
 8003382:	d027      	beq.n	80033d4 <modem_parse_string+0x98>
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d024      	beq.n	80033d4 <modem_parse_string+0x98>
                --dst_len;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	3b01      	subs	r3, #1
 800338e:	607b      	str	r3, [r7, #4]
                while (*rev_start != '\0' && *rev_start != '\r' && *rev_start != '\n') {
 8003390:	e00d      	b.n	80033ae <modem_parse_string+0x72>
                    if (i < dst_len) {
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	429a      	cmp	r2, r3
 8003398:	d216      	bcs.n	80033c8 <modem_parse_string+0x8c>
                        dst[i++] = *rev_start++;
 800339a:	69bb      	ldr	r3, [r7, #24]
 800339c:	1c5a      	adds	r2, r3, #1
 800339e:	61ba      	str	r2, [r7, #24]
 80033a0:	697a      	ldr	r2, [r7, #20]
 80033a2:	1c51      	adds	r1, r2, #1
 80033a4:	6179      	str	r1, [r7, #20]
 80033a6:	68b9      	ldr	r1, [r7, #8]
 80033a8:	188a      	adds	r2, r1, r2
 80033aa:	781b      	ldrb	r3, [r3, #0]
 80033ac:	7013      	strb	r3, [r2, #0]
                while (*rev_start != '\0' && *rev_start != '\r' && *rev_start != '\n') {
 80033ae:	69bb      	ldr	r3, [r7, #24]
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d009      	beq.n	80033ca <modem_parse_string+0x8e>
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	781b      	ldrb	r3, [r3, #0]
 80033ba:	2b0d      	cmp	r3, #13
 80033bc:	d005      	beq.n	80033ca <modem_parse_string+0x8e>
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	2b0a      	cmp	r3, #10
 80033c4:	d1e5      	bne.n	8003392 <modem_parse_string+0x56>
 80033c6:	e000      	b.n	80033ca <modem_parse_string+0x8e>
                    } else {
                        break;
 80033c8:	46c0      	nop			; (mov r8, r8)
                    }
                }
                dst[i] = '\0';
 80033ca:	68ba      	ldr	r2, [r7, #8]
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	18d3      	adds	r3, r2, r3
 80033d0:	2200      	movs	r2, #0
 80033d2:	701a      	strb	r2, [r3, #0]
            }

            *src = p;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	69fa      	ldr	r2, [r7, #28]
 80033d8:	601a      	str	r2, [r3, #0]
            return 1;
 80033da:	2301      	movs	r3, #1
 80033dc:	e016      	b.n	800340c <modem_parse_string+0xd0>
        }

        // Move to next line
        while (*p != '\0' && *p != '\n') {
            ++p;
 80033de:	69fb      	ldr	r3, [r7, #28]
 80033e0:	3301      	adds	r3, #1
 80033e2:	61fb      	str	r3, [r7, #28]
        while (*p != '\0' && *p != '\n') {
 80033e4:	69fb      	ldr	r3, [r7, #28]
 80033e6:	781b      	ldrb	r3, [r3, #0]
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d003      	beq.n	80033f4 <modem_parse_string+0xb8>
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	781b      	ldrb	r3, [r3, #0]
 80033f0:	2b0a      	cmp	r3, #10
 80033f2:	d1f4      	bne.n	80033de <modem_parse_string+0xa2>
        }
        if (*p == '\n') {
 80033f4:	69fb      	ldr	r3, [r7, #28]
 80033f6:	781b      	ldrb	r3, [r3, #0]
 80033f8:	2b0a      	cmp	r3, #10
 80033fa:	d102      	bne.n	8003402 <modem_parse_string+0xc6>
            ++p;
 80033fc:	69fb      	ldr	r3, [r7, #28]
 80033fe:	3301      	adds	r3, #1
 8003400:	61fb      	str	r3, [r7, #28]
    while (*p != '\0') {
 8003402:	69fb      	ldr	r3, [r7, #28]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d1a6      	bne.n	8003358 <modem_parse_string+0x1c>
        }
    }

    return 0; // Revision not found
 800340a:	2300      	movs	r3, #0
}
 800340c:	0018      	movs	r0, r3
 800340e:	46bd      	mov	sp, r7
 8003410:	b008      	add	sp, #32
 8003412:	bd80      	pop	{r7, pc}
 8003414:	0800d5d4 	.word	0x0800d5d4

08003418 <modem_parse_number>:
int32_t modem_parse_number(const char** str)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b086      	sub	sp, #24
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
    int32_t val = 0;
 8003420:	2300      	movs	r3, #0
 8003422:	617b      	str	r3, [r7, #20]
    uint8_t minus = 0;
 8003424:	2313      	movs	r3, #19
 8003426:	18fb      	adds	r3, r7, r3
 8003428:	2200      	movs	r2, #0
 800342a:	701a      	strb	r2, [r3, #0]
    const char* p = *str;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	60fb      	str	r3, [r7, #12]

    // Skip until we find a digit or minus sign
    while (*p && !(CHAR_IS_NUM(*p) || *p == '-')) {
 8003432:	e002      	b.n	800343a <modem_parse_number+0x22>
        ++p;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	3301      	adds	r3, #1
 8003438:	60fb      	str	r3, [r7, #12]
    while (*p && !(CHAR_IS_NUM(*p) || *p == '-')) {
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	781b      	ldrb	r3, [r3, #0]
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00b      	beq.n	800345a <modem_parse_number+0x42>
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	781b      	ldrb	r3, [r3, #0]
 8003446:	2b2f      	cmp	r3, #47	; 0x2f
 8003448:	d903      	bls.n	8003452 <modem_parse_number+0x3a>
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	781b      	ldrb	r3, [r3, #0]
 800344e:	2b39      	cmp	r3, #57	; 0x39
 8003450:	d903      	bls.n	800345a <modem_parse_number+0x42>
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	2b2d      	cmp	r3, #45	; 0x2d
 8003458:	d1ec      	bne.n	8003434 <modem_parse_number+0x1c>
    }

    // Handle negative sign if present
    if (*p == '-') {
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b2d      	cmp	r3, #45	; 0x2d
 8003460:	d115      	bne.n	800348e <modem_parse_number+0x76>
        minus = 1;
 8003462:	2313      	movs	r3, #19
 8003464:	18fb      	adds	r3, r7, r3
 8003466:	2201      	movs	r2, #1
 8003468:	701a      	strb	r2, [r3, #0]
        ++p;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	3301      	adds	r3, #1
 800346e:	60fb      	str	r3, [r7, #12]
    }

    // Parse the number
    while (CHAR_IS_NUM(*p)) {
 8003470:	e00d      	b.n	800348e <modem_parse_number+0x76>
        val = val * 10 + CHAR_TO_NUM(*p);
 8003472:	697a      	ldr	r2, [r7, #20]
 8003474:	0013      	movs	r3, r2
 8003476:	009b      	lsls	r3, r3, #2
 8003478:	189b      	adds	r3, r3, r2
 800347a:	005b      	lsls	r3, r3, #1
 800347c:	001a      	movs	r2, r3
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	781b      	ldrb	r3, [r3, #0]
 8003482:	3b30      	subs	r3, #48	; 0x30
 8003484:	18d3      	adds	r3, r2, r3
 8003486:	617b      	str	r3, [r7, #20]
        ++p;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	3301      	adds	r3, #1
 800348c:	60fb      	str	r3, [r7, #12]
    while (CHAR_IS_NUM(*p)) {
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	781b      	ldrb	r3, [r3, #0]
 8003492:	2b2f      	cmp	r3, #47	; 0x2f
 8003494:	d903      	bls.n	800349e <modem_parse_number+0x86>
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	781b      	ldrb	r3, [r3, #0]
 800349a:	2b39      	cmp	r3, #57	; 0x39
 800349c:	d9e9      	bls.n	8003472 <modem_parse_number+0x5a>
    }

    *str = p; // Save updated pointer
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	68fa      	ldr	r2, [r7, #12]
 80034a2:	601a      	str	r2, [r3, #0]
    return minus ? -val : val;
 80034a4:	2313      	movs	r3, #19
 80034a6:	18fb      	adds	r3, r7, r3
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d002      	beq.n	80034b4 <modem_parse_number+0x9c>
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	425b      	negs	r3, r3
 80034b2:	e000      	b.n	80034b6 <modem_parse_number+0x9e>
 80034b4:	697b      	ldr	r3, [r7, #20]
}
 80034b6:	0018      	movs	r0, r3
 80034b8:	46bd      	mov	sp, r7
 80034ba:	b006      	add	sp, #24
 80034bc:	bd80      	pop	{r7, pc}

080034be <cJSON_strdup>:
#define static_strlen(string_literal) (sizeof(string_literal) - sizeof(""))

static internal_hooks global_hooks = { internal_malloc, internal_free, internal_realloc };

static unsigned char* cJSON_strdup(const unsigned char* string, const internal_hooks * const hooks)
{
 80034be:	b580      	push	{r7, lr}
 80034c0:	b084      	sub	sp, #16
 80034c2:	af00      	add	r7, sp, #0
 80034c4:	6078      	str	r0, [r7, #4]
 80034c6:	6039      	str	r1, [r7, #0]
    size_t length = 0;
 80034c8:	2300      	movs	r3, #0
 80034ca:	60fb      	str	r3, [r7, #12]
    unsigned char *copy = NULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	60bb      	str	r3, [r7, #8]

    if (string == NULL)
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d101      	bne.n	80034da <cJSON_strdup+0x1c>
    {
        return NULL;
 80034d6:	2300      	movs	r3, #0
 80034d8:	e019      	b.n	800350e <cJSON_strdup+0x50>
    }

    length = strlen((const char*)string) + sizeof("");
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	0018      	movs	r0, r3
 80034de:	f7fc fe13 	bl	8000108 <strlen>
 80034e2:	0003      	movs	r3, r0
 80034e4:	3301      	adds	r3, #1
 80034e6:	60fb      	str	r3, [r7, #12]
    copy = (unsigned char*)hooks->allocate(length);
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	68fa      	ldr	r2, [r7, #12]
 80034ee:	0010      	movs	r0, r2
 80034f0:	4798      	blx	r3
 80034f2:	0003      	movs	r3, r0
 80034f4:	60bb      	str	r3, [r7, #8]
    if (copy == NULL)
 80034f6:	68bb      	ldr	r3, [r7, #8]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d101      	bne.n	8003500 <cJSON_strdup+0x42>
    {
        return NULL;
 80034fc:	2300      	movs	r3, #0
 80034fe:	e006      	b.n	800350e <cJSON_strdup+0x50>
    }
    memcpy(copy, string, length);
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	6879      	ldr	r1, [r7, #4]
 8003504:	68bb      	ldr	r3, [r7, #8]
 8003506:	0018      	movs	r0, r3
 8003508:	f007 fe51 	bl	800b1ae <memcpy>

    return copy;
 800350c:	68bb      	ldr	r3, [r7, #8]
}
 800350e:	0018      	movs	r0, r3
 8003510:	46bd      	mov	sp, r7
 8003512:	b004      	add	sp, #16
 8003514:	bd80      	pop	{r7, pc}

08003516 <cJSON_New_Item>:
    }
}

/* Internal constructor. */
static cJSON *cJSON_New_Item(const internal_hooks * const hooks)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b084      	sub	sp, #16
 800351a:	af00      	add	r7, sp, #0
 800351c:	6078      	str	r0, [r7, #4]
    cJSON* node = (cJSON*)hooks->allocate(sizeof(cJSON));
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	2028      	movs	r0, #40	; 0x28
 8003524:	4798      	blx	r3
 8003526:	0003      	movs	r3, r0
 8003528:	60fb      	str	r3, [r7, #12]
    if (node)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2b00      	cmp	r3, #0
 800352e:	d005      	beq.n	800353c <cJSON_New_Item+0x26>
    {
        memset(node, '\0', sizeof(cJSON));
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2228      	movs	r2, #40	; 0x28
 8003534:	2100      	movs	r1, #0
 8003536:	0018      	movs	r0, r3
 8003538:	f007 fd04 	bl	800af44 <memset>
    }

    return node;
 800353c:	68fb      	ldr	r3, [r7, #12]
}
 800353e:	0018      	movs	r0, r3
 8003540:	46bd      	mov	sp, r7
 8003542:	b004      	add	sp, #16
 8003544:	bd80      	pop	{r7, pc}
	...

08003548 <cJSON_Delete>:

/* Delete a cJSON structure. */
CJSON_PUBLIC(void) cJSON_Delete(cJSON *item)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
    cJSON *next = NULL;
 8003550:	2300      	movs	r3, #0
 8003552:	60fb      	str	r3, [r7, #12]
    while (item != NULL)
 8003554:	e038      	b.n	80035c8 <cJSON_Delete+0x80>
    {
        next = item->next;
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60fb      	str	r3, [r7, #12]
        if (!(item->type & cJSON_IsReference) && (item->child != NULL))
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	68da      	ldr	r2, [r3, #12]
 8003560:	2380      	movs	r3, #128	; 0x80
 8003562:	005b      	lsls	r3, r3, #1
 8003564:	4013      	ands	r3, r2
 8003566:	d108      	bne.n	800357a <cJSON_Delete+0x32>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	689b      	ldr	r3, [r3, #8]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d004      	beq.n	800357a <cJSON_Delete+0x32>
        {
            cJSON_Delete(item->child);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	0018      	movs	r0, r3
 8003576:	f7ff ffe7 	bl	8003548 <cJSON_Delete>
        }
        if (!(item->type & cJSON_IsReference) && (item->valuestring != NULL))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	68da      	ldr	r2, [r3, #12]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	005b      	lsls	r3, r3, #1
 8003582:	4013      	ands	r3, r2
 8003584:	d109      	bne.n	800359a <cJSON_Delete+0x52>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	691b      	ldr	r3, [r3, #16]
 800358a:	2b00      	cmp	r3, #0
 800358c:	d005      	beq.n	800359a <cJSON_Delete+0x52>
        {
            global_hooks.deallocate(item->valuestring);
 800358e:	4b12      	ldr	r3, [pc, #72]	; (80035d8 <cJSON_Delete+0x90>)
 8003590:	685a      	ldr	r2, [r3, #4]
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	0018      	movs	r0, r3
 8003598:	4790      	blx	r2
        }
        if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	68da      	ldr	r2, [r3, #12]
 800359e:	2380      	movs	r3, #128	; 0x80
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	4013      	ands	r3, r2
 80035a4:	d109      	bne.n	80035ba <cJSON_Delete+0x72>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6a1b      	ldr	r3, [r3, #32]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d005      	beq.n	80035ba <cJSON_Delete+0x72>
        {
            global_hooks.deallocate(item->string);
 80035ae:	4b0a      	ldr	r3, [pc, #40]	; (80035d8 <cJSON_Delete+0x90>)
 80035b0:	685a      	ldr	r2, [r3, #4]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	6a1b      	ldr	r3, [r3, #32]
 80035b6:	0018      	movs	r0, r3
 80035b8:	4790      	blx	r2
        }
        global_hooks.deallocate(item);
 80035ba:	4b07      	ldr	r3, [pc, #28]	; (80035d8 <cJSON_Delete+0x90>)
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	687a      	ldr	r2, [r7, #4]
 80035c0:	0010      	movs	r0, r2
 80035c2:	4798      	blx	r3
        item = next;
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	607b      	str	r3, [r7, #4]
    while (item != NULL)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d1c3      	bne.n	8003556 <cJSON_Delete+0xe>
    }
}
 80035ce:	46c0      	nop			; (mov r8, r8)
 80035d0:	46c0      	nop			; (mov r8, r8)
 80035d2:	46bd      	mov	sp, r7
 80035d4:	b004      	add	sp, #16
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	20000000 	.word	0x20000000

080035dc <get_decimal_point>:

/* get the decimal point character of the current locale */
static unsigned char get_decimal_point(void)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	af00      	add	r7, sp, #0
#ifdef ENABLE_LOCALES
    struct lconv *lconv = localeconv();
    return (unsigned char) lconv->decimal_point[0];
#else
    return '.';
 80035e0:	232e      	movs	r3, #46	; 0x2e
#endif
}
 80035e2:	0018      	movs	r0, r3
 80035e4:	46bd      	mov	sp, r7
 80035e6:	bd80      	pop	{r7, pc}

080035e8 <ensure>:
    internal_hooks hooks;
} printbuffer;

/* realloc printbuffer if necessary to have at least "needed" bytes more */
static unsigned char* ensure(printbuffer * const p, size_t needed)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
    unsigned char *newbuffer = NULL;
 80035f2:	2300      	movs	r3, #0
 80035f4:	60fb      	str	r3, [r7, #12]
    size_t newsize = 0;
 80035f6:	2300      	movs	r3, #0
 80035f8:	60bb      	str	r3, [r7, #8]

    if ((p == NULL) || (p->buffer == NULL))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d003      	beq.n	8003608 <ensure+0x20>
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <ensure+0x24>
    {
        return NULL;
 8003608:	2300      	movs	r3, #0
 800360a:	e086      	b.n	800371a <ensure+0x132>
    }

    if ((p->length > 0) && (p->offset >= p->length))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d007      	beq.n	8003624 <ensure+0x3c>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	689a      	ldr	r2, [r3, #8]
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	685b      	ldr	r3, [r3, #4]
 800361c:	429a      	cmp	r2, r3
 800361e:	d301      	bcc.n	8003624 <ensure+0x3c>
    {
        /* make sure that offset is valid */
        return NULL;
 8003620:	2300      	movs	r3, #0
 8003622:	e07a      	b.n	800371a <ensure+0x132>
    }

    if (needed > INT_MAX)
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	da01      	bge.n	800362e <ensure+0x46>
    {
        /* sizes bigger than INT_MAX are currently not supported */
        return NULL;
 800362a:	2300      	movs	r3, #0
 800362c:	e075      	b.n	800371a <ensure+0x132>
    }

    needed += p->offset + 1;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	689a      	ldr	r2, [r3, #8]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	18d3      	adds	r3, r2, r3
 8003636:	3301      	adds	r3, #1
 8003638:	603b      	str	r3, [r7, #0]
    if (needed <= p->length)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	683a      	ldr	r2, [r7, #0]
 8003640:	429a      	cmp	r2, r3
 8003642:	d805      	bhi.n	8003650 <ensure+0x68>
    {
        return p->buffer + p->offset;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	18d3      	adds	r3, r2, r3
 800364e:	e064      	b.n	800371a <ensure+0x132>
    }

    if (p->noalloc) {
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d001      	beq.n	800365c <ensure+0x74>
        return NULL;
 8003658:	2300      	movs	r3, #0
 800365a:	e05e      	b.n	800371a <ensure+0x132>
    }

    /* calculate new buffer size */
    if (needed > (INT_MAX / 2))
 800365c:	683a      	ldr	r2, [r7, #0]
 800365e:	2380      	movs	r3, #128	; 0x80
 8003660:	05db      	lsls	r3, r3, #23
 8003662:	429a      	cmp	r2, r3
 8003664:	d307      	bcc.n	8003676 <ensure+0x8e>
    {
        /* overflow of int, use INT_MAX if possible */
        if (needed <= INT_MAX)
 8003666:	683b      	ldr	r3, [r7, #0]
 8003668:	2b00      	cmp	r3, #0
 800366a:	db02      	blt.n	8003672 <ensure+0x8a>
        {
            newsize = INT_MAX;
 800366c:	4b2d      	ldr	r3, [pc, #180]	; (8003724 <ensure+0x13c>)
 800366e:	60bb      	str	r3, [r7, #8]
 8003670:	e004      	b.n	800367c <ensure+0x94>
        }
        else
        {
            return NULL;
 8003672:	2300      	movs	r3, #0
 8003674:	e051      	b.n	800371a <ensure+0x132>
        }
    }
    else
    {
        newsize = needed * 2;
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	005b      	lsls	r3, r3, #1
 800367a:	60bb      	str	r3, [r7, #8]
    }

    if (p->hooks.reallocate != NULL)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d019      	beq.n	80036b8 <ensure+0xd0>
    {
        /* reallocate with realloc if available */
        newbuffer = (unsigned char*)p->hooks.reallocate(p->buffer, newsize);
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1a      	ldr	r2, [r3, #32]
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	68b9      	ldr	r1, [r7, #8]
 800368e:	0018      	movs	r0, r3
 8003690:	4790      	blx	r2
 8003692:	0003      	movs	r3, r0
 8003694:	60fb      	str	r3, [r7, #12]
        if (newbuffer == NULL)
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2b00      	cmp	r3, #0
 800369a:	d134      	bne.n	8003706 <ensure+0x11e>
        {
            p->hooks.deallocate(p->buffer);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	69da      	ldr	r2, [r3, #28]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	0018      	movs	r0, r3
 80036a6:	4790      	blx	r2
            p->length = 0;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

            return NULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	e030      	b.n	800371a <ensure+0x132>
        }
    }
    else
    {
        /* otherwise reallocate manually */
        newbuffer = (unsigned char*)p->hooks.allocate(newsize);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	699b      	ldr	r3, [r3, #24]
 80036bc:	68ba      	ldr	r2, [r7, #8]
 80036be:	0010      	movs	r0, r2
 80036c0:	4798      	blx	r3
 80036c2:	0003      	movs	r3, r0
 80036c4:	60fb      	str	r3, [r7, #12]
        if (!newbuffer)
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d10d      	bne.n	80036e8 <ensure+0x100>
        {
            p->hooks.deallocate(p->buffer);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	69da      	ldr	r2, [r3, #28]
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	0018      	movs	r0, r3
 80036d6:	4790      	blx	r2
            p->length = 0;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2200      	movs	r2, #0
 80036dc:	605a      	str	r2, [r3, #4]
            p->buffer = NULL;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2200      	movs	r2, #0
 80036e2:	601a      	str	r2, [r3, #0]

            return NULL;
 80036e4:	2300      	movs	r3, #0
 80036e6:	e018      	b.n	800371a <ensure+0x132>
        }
        
        memcpy(newbuffer, p->buffer, p->offset + 1);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6819      	ldr	r1, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	689b      	ldr	r3, [r3, #8]
 80036f0:	1c5a      	adds	r2, r3, #1
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	0018      	movs	r0, r3
 80036f6:	f007 fd5a 	bl	800b1ae <memcpy>
        p->hooks.deallocate(p->buffer);
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	69da      	ldr	r2, [r3, #28]
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	0018      	movs	r0, r3
 8003704:	4790      	blx	r2
    }
    p->length = newsize;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	68ba      	ldr	r2, [r7, #8]
 800370a:	605a      	str	r2, [r3, #4]
    p->buffer = newbuffer;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	68fa      	ldr	r2, [r7, #12]
 8003710:	601a      	str	r2, [r3, #0]

    return newbuffer + p->offset;
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	689b      	ldr	r3, [r3, #8]
 8003716:	68fa      	ldr	r2, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
}
 800371a:	0018      	movs	r0, r3
 800371c:	46bd      	mov	sp, r7
 800371e:	b004      	add	sp, #16
 8003720:	bd80      	pop	{r7, pc}
 8003722:	46c0      	nop			; (mov r8, r8)
 8003724:	7fffffff 	.word	0x7fffffff

08003728 <update_offset>:

/* calculate the new length of the string in a printbuffer and update the offset */
static void update_offset(printbuffer * const buffer)
{
 8003728:	b590      	push	{r4, r7, lr}
 800372a:	b085      	sub	sp, #20
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
    const unsigned char *buffer_pointer = NULL;
 8003730:	2300      	movs	r3, #0
 8003732:	60fb      	str	r3, [r7, #12]
    if ((buffer == NULL) || (buffer->buffer == NULL))
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d014      	beq.n	8003764 <update_offset+0x3c>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d010      	beq.n	8003764 <update_offset+0x3c>
    {
        return;
    }
    buffer_pointer = buffer->buffer + buffer->offset;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	18d3      	adds	r3, r2, r3
 800374c:	60fb      	str	r3, [r7, #12]

    buffer->offset += strlen((const char*)buffer_pointer);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	689c      	ldr	r4, [r3, #8]
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	0018      	movs	r0, r3
 8003756:	f7fc fcd7 	bl	8000108 <strlen>
 800375a:	0003      	movs	r3, r0
 800375c:	18e2      	adds	r2, r4, r3
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	609a      	str	r2, [r3, #8]
 8003762:	e000      	b.n	8003766 <update_offset+0x3e>
        return;
 8003764:	46c0      	nop			; (mov r8, r8)
}
 8003766:	46bd      	mov	sp, r7
 8003768:	b005      	add	sp, #20
 800376a:	bd90      	pop	{r4, r7, pc}

0800376c <reverse>:
{
    double maxVal = fabs(a) > fabs(b) ? fabs(a) : fabs(b);
    return (fabs(a - b) <= maxVal * DBL_EPSILON);
}
void reverse(char* str, int len)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b086      	sub	sp, #24
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	6039      	str	r1, [r7, #0]
    int i = 0, j = len - 1, temp;
 8003776:	2300      	movs	r3, #0
 8003778:	617b      	str	r3, [r7, #20]
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	3b01      	subs	r3, #1
 800377e:	613b      	str	r3, [r7, #16]
    while (i < j) {
 8003780:	e018      	b.n	80037b4 <reverse+0x48>
        temp = str[i];
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	687a      	ldr	r2, [r7, #4]
 8003786:	18d3      	adds	r3, r2, r3
 8003788:	781b      	ldrb	r3, [r3, #0]
 800378a:	60fb      	str	r3, [r7, #12]
        str[i] = str[j];
 800378c:	693b      	ldr	r3, [r7, #16]
 800378e:	687a      	ldr	r2, [r7, #4]
 8003790:	18d2      	adds	r2, r2, r3
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	6879      	ldr	r1, [r7, #4]
 8003796:	18cb      	adds	r3, r1, r3
 8003798:	7812      	ldrb	r2, [r2, #0]
 800379a:	701a      	strb	r2, [r3, #0]
        str[j] = temp;
 800379c:	693b      	ldr	r3, [r7, #16]
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	18d3      	adds	r3, r2, r3
 80037a2:	68fa      	ldr	r2, [r7, #12]
 80037a4:	b2d2      	uxtb	r2, r2
 80037a6:	701a      	strb	r2, [r3, #0]
        i++;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3301      	adds	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
        j--;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	613b      	str	r3, [r7, #16]
    while (i < j) {
 80037b4:	697a      	ldr	r2, [r7, #20]
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	429a      	cmp	r2, r3
 80037ba:	dbe2      	blt.n	8003782 <reverse+0x16>
    }
}
 80037bc:	46c0      	nop			; (mov r8, r8)
 80037be:	46c0      	nop			; (mov r8, r8)
 80037c0:	46bd      	mov	sp, r7
 80037c2:	b006      	add	sp, #24
 80037c4:	bd80      	pop	{r7, pc}

080037c6 <intToStr>:
// Converts a given integer x to string str[].
// d is the number of digits required in the output.
// If d is more than the number of digits in x,
// then 0s are added at the beginning.
int intToStr(uint64_t x, char str[], int d)
{
 80037c6:	b580      	push	{r7, lr}
 80037c8:	b086      	sub	sp, #24
 80037ca:	af00      	add	r7, sp, #0
 80037cc:	60b8      	str	r0, [r7, #8]
 80037ce:	60f9      	str	r1, [r7, #12]
 80037d0:	607a      	str	r2, [r7, #4]
 80037d2:	603b      	str	r3, [r7, #0]
    int i = 0;
 80037d4:	2300      	movs	r3, #0
 80037d6:	617b      	str	r3, [r7, #20]
    while (x) {
 80037d8:	e019      	b.n	800380e <intToStr+0x48>
        str[i++] = (x % 10) + '0';
 80037da:	68b8      	ldr	r0, [r7, #8]
 80037dc:	68f9      	ldr	r1, [r7, #12]
 80037de:	220a      	movs	r2, #10
 80037e0:	2300      	movs	r3, #0
 80037e2:	f7fc fe61 	bl	80004a8 <__aeabi_uldivmod>
 80037e6:	b2d2      	uxtb	r2, r2
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	1c59      	adds	r1, r3, #1
 80037ec:	6179      	str	r1, [r7, #20]
 80037ee:	0019      	movs	r1, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	185b      	adds	r3, r3, r1
 80037f4:	3230      	adds	r2, #48	; 0x30
 80037f6:	b2d2      	uxtb	r2, r2
 80037f8:	701a      	strb	r2, [r3, #0]
        x = x / 10;
 80037fa:	68b8      	ldr	r0, [r7, #8]
 80037fc:	68f9      	ldr	r1, [r7, #12]
 80037fe:	220a      	movs	r2, #10
 8003800:	2300      	movs	r3, #0
 8003802:	f7fc fe51 	bl	80004a8 <__aeabi_uldivmod>
 8003806:	0002      	movs	r2, r0
 8003808:	000b      	movs	r3, r1
 800380a:	60ba      	str	r2, [r7, #8]
 800380c:	60fb      	str	r3, [r7, #12]
    while (x) {
 800380e:	68bb      	ldr	r3, [r7, #8]
 8003810:	68fa      	ldr	r2, [r7, #12]
 8003812:	4313      	orrs	r3, r2
 8003814:	d1e1      	bne.n	80037da <intToStr+0x14>
    }

    // If number of digits required is more, then
    // add 0s at the beginning
    while (i < d)
 8003816:	e007      	b.n	8003828 <intToStr+0x62>
        str[i++] = '0';
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	1c5a      	adds	r2, r3, #1
 800381c:	617a      	str	r2, [r7, #20]
 800381e:	001a      	movs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	189b      	adds	r3, r3, r2
 8003824:	2230      	movs	r2, #48	; 0x30
 8003826:	701a      	strb	r2, [r3, #0]
    while (i < d)
 8003828:	697a      	ldr	r2, [r7, #20]
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	429a      	cmp	r2, r3
 800382e:	dbf3      	blt.n	8003818 <intToStr+0x52>

    reverse(str, i);
 8003830:	697a      	ldr	r2, [r7, #20]
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	0011      	movs	r1, r2
 8003836:	0018      	movs	r0, r3
 8003838:	f7ff ff98 	bl	800376c <reverse>
    str[i] = '\0';
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	687a      	ldr	r2, [r7, #4]
 8003840:	18d3      	adds	r3, r2, r3
 8003842:	2200      	movs	r2, #0
 8003844:	701a      	strb	r2, [r3, #0]
    return i;
 8003846:	697b      	ldr	r3, [r7, #20]
}
 8003848:	0018      	movs	r0, r3
 800384a:	46bd      	mov	sp, r7
 800384c:	b006      	add	sp, #24
 800384e:	bd80      	pop	{r7, pc}

08003850 <Shift_array_byPosition>:
void Shift_array_byPosition(char str[], int length){ //1.4.3
 8003850:	b580      	push	{r7, lr}
 8003852:	b082      	sub	sp, #8
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]

  while(length != 0){
 800385a:	e00b      	b.n	8003874 <Shift_array_byPosition+0x24>
	  str[length+1] = str[length];
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	687a      	ldr	r2, [r7, #4]
 8003860:	18d2      	adds	r2, r2, r3
 8003862:	683b      	ldr	r3, [r7, #0]
 8003864:	3301      	adds	r3, #1
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	18cb      	adds	r3, r1, r3
 800386a:	7812      	ldrb	r2, [r2, #0]
 800386c:	701a      	strb	r2, [r3, #0]
	  length--;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	3b01      	subs	r3, #1
 8003872:	603b      	str	r3, [r7, #0]
  while(length != 0){
 8003874:	683b      	ldr	r3, [r7, #0]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <Shift_array_byPosition+0xc>
  }
  str[length+1] = str[length];
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	687a      	ldr	r2, [r7, #4]
 800387e:	18d2      	adds	r2, r2, r3
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	3301      	adds	r3, #1
 8003884:	6879      	ldr	r1, [r7, #4]
 8003886:	18cb      	adds	r3, r1, r3
 8003888:	7812      	ldrb	r2, [r2, #0]
 800388a:	701a      	strb	r2, [r3, #0]
}
 800388c:	46c0      	nop			; (mov r8, r8)
 800388e:	46bd      	mov	sp, r7
 8003890:	b002      	add	sp, #8
 8003892:	bd80      	pop	{r7, pc}

08003894 <print_number>:
        intToStr((int)fpart, res + i + 1, afterpoint);
    }
}
/* Render the number nicely from the given item into a string. */
static cJSON_bool print_number(const cJSON * const item, printbuffer * const output_buffer)
{
 8003894:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003896:	b097      	sub	sp, #92	; 0x5c
 8003898:	af00      	add	r7, sp, #0
 800389a:	6178      	str	r0, [r7, #20]
 800389c:	6139      	str	r1, [r7, #16]
    unsigned char *output_pointer = NULL;
 800389e:	2300      	movs	r3, #0
 80038a0:	64fb      	str	r3, [r7, #76]	; 0x4c
    double d = item->valuedouble;
 80038a2:	697b      	ldr	r3, [r7, #20]
 80038a4:	699a      	ldr	r2, [r3, #24]
 80038a6:	69db      	ldr	r3, [r3, #28]
 80038a8:	643a      	str	r2, [r7, #64]	; 0x40
 80038aa:	647b      	str	r3, [r7, #68]	; 0x44
    uint64_t longInt_d=d;
 80038ac:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80038ae:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038b0:	f7fc fe56 	bl	8000560 <__aeabi_d2ulz>
 80038b4:	0002      	movs	r2, r0
 80038b6:	000b      	movs	r3, r1
 80038b8:	63ba      	str	r2, [r7, #56]	; 0x38
 80038ba:	63fb      	str	r3, [r7, #60]	; 0x3c
    int length = 0;
 80038bc:	2300      	movs	r3, #0
 80038be:	657b      	str	r3, [r7, #84]	; 0x54
    size_t i = 0;
 80038c0:	2300      	movs	r3, #0
 80038c2:	653b      	str	r3, [r7, #80]	; 0x50
    unsigned char number_buffer[26] = {0}; /* temporary buffer to print the number into */
 80038c4:	230c      	movs	r3, #12
 80038c6:	2610      	movs	r6, #16
 80038c8:	199b      	adds	r3, r3, r6
 80038ca:	19db      	adds	r3, r3, r7
 80038cc:	2200      	movs	r2, #0
 80038ce:	601a      	str	r2, [r3, #0]
 80038d0:	3304      	adds	r3, #4
 80038d2:	2216      	movs	r2, #22
 80038d4:	2100      	movs	r1, #0
 80038d6:	0018      	movs	r0, r3
 80038d8:	f007 fb34 	bl	800af44 <memset>
    unsigned char decimal_point = get_decimal_point();
 80038dc:	2327      	movs	r3, #39	; 0x27
 80038de:	199b      	adds	r3, r3, r6
 80038e0:	19de      	adds	r6, r3, r7
 80038e2:	f7ff fe7b 	bl	80035dc <get_decimal_point>
 80038e6:	0003      	movs	r3, r0
 80038e8:	7033      	strb	r3, [r6, #0]

    if (output_buffer == NULL)
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d101      	bne.n	80038f4 <print_number+0x60>
    {
        return false;
 80038f0:	2300      	movs	r3, #0
 80038f2:	e144      	b.n	8003b7e <print_number+0x2ea>
    }

    /* This checks for NaN and Infinity */
    if (isnan(d) || isinf(d))
 80038f4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80038f6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80038f8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80038fa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80038fc:	f7fe fce4 	bl	80022c8 <__aeabi_dcmpun>
 8003900:	1e03      	subs	r3, r0, #0
 8003902:	d120      	bne.n	8003946 <print_number+0xb2>
 8003904:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003906:	001c      	movs	r4, r3
 8003908:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800390a:	005b      	lsls	r3, r3, #1
 800390c:	085d      	lsrs	r5, r3, #1
 800390e:	2301      	movs	r3, #1
 8003910:	1c1e      	adds	r6, r3, #0
 8003912:	2201      	movs	r2, #1
 8003914:	4252      	negs	r2, r2
 8003916:	4b9c      	ldr	r3, [pc, #624]	; (8003b88 <print_number+0x2f4>)
 8003918:	0020      	movs	r0, r4
 800391a:	0029      	movs	r1, r5
 800391c:	f7fe fcd4 	bl	80022c8 <__aeabi_dcmpun>
 8003920:	1e03      	subs	r3, r0, #0
 8003922:	d10a      	bne.n	800393a <print_number+0xa6>
 8003924:	2201      	movs	r2, #1
 8003926:	4252      	negs	r2, r2
 8003928:	4b97      	ldr	r3, [pc, #604]	; (8003b88 <print_number+0x2f4>)
 800392a:	0020      	movs	r0, r4
 800392c:	0029      	movs	r1, r5
 800392e:	f7fc fd9d 	bl	800046c <__aeabi_dcmple>
 8003932:	1e03      	subs	r3, r0, #0
 8003934:	d101      	bne.n	800393a <print_number+0xa6>
 8003936:	2300      	movs	r3, #0
 8003938:	1c1e      	adds	r6, r3, #0
 800393a:	b2f3      	uxtb	r3, r6
 800393c:	2201      	movs	r2, #1
 800393e:	4053      	eors	r3, r2
 8003940:	b2db      	uxtb	r3, r3
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00b      	beq.n	800395e <print_number+0xca>
    {
        length = sprintf((char*)number_buffer, "null");
 8003946:	4a91      	ldr	r2, [pc, #580]	; (8003b8c <print_number+0x2f8>)
 8003948:	230c      	movs	r3, #12
 800394a:	2110      	movs	r1, #16
 800394c:	185b      	adds	r3, r3, r1
 800394e:	19db      	adds	r3, r3, r7
 8003950:	0011      	movs	r1, r2
 8003952:	0018      	movs	r0, r3
 8003954:	f007 fa8a 	bl	800ae6c <siprintf>
 8003958:	0003      	movs	r3, r0
 800395a:	657b      	str	r3, [r7, #84]	; 0x54
 800395c:	e0c5      	b.n	8003aea <print_number+0x256>
//        	ftoa_new(d, number_buffer,3);
//    	}
//    	length=strlen(number_buffer);


		if(d==0)
 800395e:	2200      	movs	r2, #0
 8003960:	2300      	movs	r3, #0
 8003962:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003964:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003966:	f7fc fd71 	bl	800044c <__aeabi_dcmpeq>
 800396a:	1e03      	subs	r3, r0, #0
 800396c:	d006      	beq.n	800397c <print_number+0xe8>
		{
			number_buffer[0]='0';
 800396e:	230c      	movs	r3, #12
 8003970:	2210      	movs	r2, #16
 8003972:	189b      	adds	r3, r3, r2
 8003974:	19db      	adds	r3, r3, r7
 8003976:	2230      	movs	r2, #48	; 0x30
 8003978:	701a      	strb	r2, [r3, #0]
 800397a:	e0ad      	b.n	8003ad8 <print_number+0x244>
		}
		else if((longInt_d-d)==0)
 800397c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800397e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003980:	f7fc fe22 	bl	80005c8 <__aeabi_ul2d>
 8003984:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003986:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003988:	f7fe f91c 	bl	8001bc4 <__aeabi_dsub>
 800398c:	0002      	movs	r2, r0
 800398e:	000b      	movs	r3, r1
 8003990:	0010      	movs	r0, r2
 8003992:	0019      	movs	r1, r3
 8003994:	2200      	movs	r2, #0
 8003996:	2300      	movs	r3, #0
 8003998:	f7fc fd58 	bl	800044c <__aeabi_dcmpeq>
 800399c:	1e03      	subs	r3, r0, #0
 800399e:	d009      	beq.n	80039b4 <print_number+0x120>
		{
			intToStr((uint64_t)longInt_d, (char*)number_buffer, 0);
 80039a0:	230c      	movs	r3, #12
 80039a2:	2210      	movs	r2, #16
 80039a4:	189b      	adds	r3, r3, r2
 80039a6:	19da      	adds	r2, r3, r7
 80039a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039aa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ac:	2300      	movs	r3, #0
 80039ae:	f7ff ff0a 	bl	80037c6 <intToStr>
 80039b2:	e091      	b.n	8003ad8 <print_number+0x244>
		}
		else if (d < 0)
 80039b4:	2200      	movs	r2, #0
 80039b6:	2300      	movs	r3, #0
 80039b8:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80039ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039bc:	f7fc fd4c 	bl	8000458 <__aeabi_dcmplt>
 80039c0:	1e03      	subs	r3, r0, #0
 80039c2:	d06a      	beq.n	8003a9a <print_number+0x206>
		{
			d = d * (-1);
 80039c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039ca:	2280      	movs	r2, #128	; 0x80
 80039cc:	0612      	lsls	r2, r2, #24
 80039ce:	405a      	eors	r2, r3
 80039d0:	60fa      	str	r2, [r7, #12]
 80039d2:	68bb      	ldr	r3, [r7, #8]
 80039d4:	68fc      	ldr	r4, [r7, #12]
 80039d6:	643b      	str	r3, [r7, #64]	; 0x40
 80039d8:	647c      	str	r4, [r7, #68]	; 0x44
			longInt_d = d;
 80039da:	6c38      	ldr	r0, [r7, #64]	; 0x40
 80039dc:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80039de:	f7fc fdbf 	bl	8000560 <__aeabi_d2ulz>
 80039e2:	0002      	movs	r2, r0
 80039e4:	000b      	movs	r3, r1
 80039e6:	63ba      	str	r2, [r7, #56]	; 0x38
 80039e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			if((longInt_d-d)==0)
 80039ea:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80039ec:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80039ee:	f7fc fdeb 	bl	80005c8 <__aeabi_ul2d>
 80039f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80039f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80039f6:	f7fe f8e5 	bl	8001bc4 <__aeabi_dsub>
 80039fa:	0002      	movs	r2, r0
 80039fc:	000b      	movs	r3, r1
 80039fe:	0010      	movs	r0, r2
 8003a00:	0019      	movs	r1, r3
 8003a02:	2200      	movs	r2, #0
 8003a04:	2300      	movs	r3, #0
 8003a06:	f7fc fd21 	bl	800044c <__aeabi_dcmpeq>
 8003a0a:	1e03      	subs	r3, r0, #0
 8003a0c:	d01a      	beq.n	8003a44 <print_number+0x1b0>
			{
				intToStr((uint64_t)longInt_d,(char*)number_buffer, 0);
 8003a0e:	240c      	movs	r4, #12
 8003a10:	2510      	movs	r5, #16
 8003a12:	1963      	adds	r3, r4, r5
 8003a14:	19da      	adds	r2, r3, r7
 8003a16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003a18:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	f7ff fed3 	bl	80037c6 <intToStr>
				Shift_array_byPosition((char*)number_buffer,strlen((const char *)number_buffer));
 8003a20:	1963      	adds	r3, r4, r5
 8003a22:	19db      	adds	r3, r3, r7
 8003a24:	0018      	movs	r0, r3
 8003a26:	f7fc fb6f 	bl	8000108 <strlen>
 8003a2a:	0003      	movs	r3, r0
 8003a2c:	001a      	movs	r2, r3
 8003a2e:	1963      	adds	r3, r4, r5
 8003a30:	19db      	adds	r3, r3, r7
 8003a32:	0011      	movs	r1, r2
 8003a34:	0018      	movs	r0, r3
 8003a36:	f7ff ff0b 	bl	8003850 <Shift_array_byPosition>
				number_buffer[0]='-';
 8003a3a:	1963      	adds	r3, r4, r5
 8003a3c:	19db      	adds	r3, r3, r7
 8003a3e:	222d      	movs	r2, #45	; 0x2d
 8003a40:	701a      	strb	r2, [r3, #0]
 8003a42:	e049      	b.n	8003ad8 <print_number+0x244>
			}
			else
			{
				d = d * (-1);
 8003a44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a46:	603b      	str	r3, [r7, #0]
 8003a48:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a4a:	2280      	movs	r2, #128	; 0x80
 8003a4c:	0612      	lsls	r2, r2, #24
 8003a4e:	405a      	eors	r2, r3
 8003a50:	607a      	str	r2, [r7, #4]
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	687c      	ldr	r4, [r7, #4]
 8003a56:	643b      	str	r3, [r7, #64]	; 0x40
 8003a58:	647c      	str	r4, [r7, #68]	; 0x44
				if(d > 0x7FFFFFFFFFFFFFFF) // for convert Exponent format  || ticket : https://cimcondigital.atlassian.net/browse/IRTU6000PP-35
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	4b4c      	ldr	r3, [pc, #304]	; (8003b90 <print_number+0x2fc>)
 8003a5e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003a60:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003a62:	f7fc fd0d 	bl	8000480 <__aeabi_dcmpgt>
 8003a66:	1e03      	subs	r3, r0, #0
 8003a68:	d00b      	beq.n	8003a82 <print_number+0x1ee>
				{
					length = sprintf((char*)number_buffer, "%2.3f", d);
 8003a6a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a6c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a6e:	4949      	ldr	r1, [pc, #292]	; (8003b94 <print_number+0x300>)
 8003a70:	200c      	movs	r0, #12
 8003a72:	2410      	movs	r4, #16
 8003a74:	1900      	adds	r0, r0, r4
 8003a76:	19c0      	adds	r0, r0, r7
 8003a78:	f007 f9f8 	bl	800ae6c <siprintf>
 8003a7c:	0003      	movs	r3, r0
 8003a7e:	657b      	str	r3, [r7, #84]	; 0x54
 8003a80:	e02a      	b.n	8003ad8 <print_number+0x244>
				}
				else
				{
					length = sprintf((char*)number_buffer, "%e", d);
 8003a82:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003a84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a86:	4944      	ldr	r1, [pc, #272]	; (8003b98 <print_number+0x304>)
 8003a88:	200c      	movs	r0, #12
 8003a8a:	2410      	movs	r4, #16
 8003a8c:	1900      	adds	r0, r0, r4
 8003a8e:	19c0      	adds	r0, r0, r7
 8003a90:	f007 f9ec 	bl	800ae6c <siprintf>
 8003a94:	0003      	movs	r3, r0
 8003a96:	657b      	str	r3, [r7, #84]	; 0x54
 8003a98:	e01e      	b.n	8003ad8 <print_number+0x244>
				//number_buffer[0]='-';
			}
		}
		else
		{
			if(d < 0x7FFFFFFFFFFFFFFF) // for convert Exponent format  || ticket : https://cimcondigital.atlassian.net/browse/IRTU6000PP-35
 8003a9a:	2200      	movs	r2, #0
 8003a9c:	4b3c      	ldr	r3, [pc, #240]	; (8003b90 <print_number+0x2fc>)
 8003a9e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8003aa0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003aa2:	f7fc fcd9 	bl	8000458 <__aeabi_dcmplt>
 8003aa6:	1e03      	subs	r3, r0, #0
 8003aa8:	d00b      	beq.n	8003ac2 <print_number+0x22e>
			{
				length = sprintf((char*)number_buffer, "%2.3f", d);
 8003aaa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003aac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003aae:	4939      	ldr	r1, [pc, #228]	; (8003b94 <print_number+0x300>)
 8003ab0:	200c      	movs	r0, #12
 8003ab2:	2410      	movs	r4, #16
 8003ab4:	1900      	adds	r0, r0, r4
 8003ab6:	19c0      	adds	r0, r0, r7
 8003ab8:	f007 f9d8 	bl	800ae6c <siprintf>
 8003abc:	0003      	movs	r3, r0
 8003abe:	657b      	str	r3, [r7, #84]	; 0x54
 8003ac0:	e00a      	b.n	8003ad8 <print_number+0x244>
			}
			else
			{
				length = sprintf((char*)number_buffer, "%e", d);  // for convert to Exponential foam
 8003ac2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ac6:	4934      	ldr	r1, [pc, #208]	; (8003b98 <print_number+0x304>)
 8003ac8:	200c      	movs	r0, #12
 8003aca:	2410      	movs	r4, #16
 8003acc:	1900      	adds	r0, r0, r4
 8003ace:	19c0      	adds	r0, r0, r7
 8003ad0:	f007 f9cc 	bl	800ae6c <siprintf>
 8003ad4:	0003      	movs	r3, r0
 8003ad6:	657b      	str	r3, [r7, #84]	; 0x54
			}
			//ftoa_new(d, number_buffer,3);
		}
		length=strlen((const char *)number_buffer);
 8003ad8:	230c      	movs	r3, #12
 8003ada:	2210      	movs	r2, #16
 8003adc:	189b      	adds	r3, r3, r2
 8003ade:	19db      	adds	r3, r3, r7
 8003ae0:	0018      	movs	r0, r3
 8003ae2:	f7fc fb11 	bl	8000108 <strlen>
 8003ae6:	0003      	movs	r3, r0
 8003ae8:	657b      	str	r3, [r7, #84]	; 0x54
//            length = sprintf((char*)number_buffer, "%lf", d);
//        }
    }

    /* sprintf failed or buffer overrun occurred */
    if ((length < 0) || (length > (int)(sizeof(number_buffer) - 1)))
 8003aea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	db02      	blt.n	8003af6 <print_number+0x262>
 8003af0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003af2:	2b19      	cmp	r3, #25
 8003af4:	dd01      	ble.n	8003afa <print_number+0x266>
    {
        return false;
 8003af6:	2300      	movs	r3, #0
 8003af8:	e041      	b.n	8003b7e <print_number+0x2ea>
    }

    /* reserve appropriate space in the output */
    output_pointer = ensure(output_buffer, (size_t)length + sizeof(""));
 8003afa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	693b      	ldr	r3, [r7, #16]
 8003b00:	0011      	movs	r1, r2
 8003b02:	0018      	movs	r0, r3
 8003b04:	f7ff fd70 	bl	80035e8 <ensure>
 8003b08:	0003      	movs	r3, r0
 8003b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (output_pointer == NULL)
 8003b0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d101      	bne.n	8003b16 <print_number+0x282>
    {
        return false;
 8003b12:	2300      	movs	r3, #0
 8003b14:	e033      	b.n	8003b7e <print_number+0x2ea>
    }

    /* copy the printed number to the output and replace locale
     * dependent decimal point with '.' */
    for (i = 0; i < ((size_t)length); i++)
 8003b16:	2300      	movs	r3, #0
 8003b18:	653b      	str	r3, [r7, #80]	; 0x50
 8003b1a:	e020      	b.n	8003b5e <print_number+0x2ca>
    {
        if (number_buffer[i] == decimal_point)
 8003b1c:	230c      	movs	r3, #12
 8003b1e:	2110      	movs	r1, #16
 8003b20:	185b      	adds	r3, r3, r1
 8003b22:	19da      	adds	r2, r3, r7
 8003b24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b26:	18d3      	adds	r3, r2, r3
 8003b28:	781b      	ldrb	r3, [r3, #0]
 8003b2a:	2227      	movs	r2, #39	; 0x27
 8003b2c:	1852      	adds	r2, r2, r1
 8003b2e:	19d2      	adds	r2, r2, r7
 8003b30:	7812      	ldrb	r2, [r2, #0]
 8003b32:	429a      	cmp	r2, r3
 8003b34:	d105      	bne.n	8003b42 <print_number+0x2ae>
        {
            output_pointer[i] = '.';
 8003b36:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b38:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b3a:	18d3      	adds	r3, r2, r3
 8003b3c:	222e      	movs	r2, #46	; 0x2e
 8003b3e:	701a      	strb	r2, [r3, #0]
            continue;
 8003b40:	e00a      	b.n	8003b58 <print_number+0x2c4>
        }

        output_pointer[i] = number_buffer[i];
 8003b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b44:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b46:	18d3      	adds	r3, r2, r3
 8003b48:	220c      	movs	r2, #12
 8003b4a:	2110      	movs	r1, #16
 8003b4c:	1852      	adds	r2, r2, r1
 8003b4e:	19d1      	adds	r1, r2, r7
 8003b50:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b52:	188a      	adds	r2, r1, r2
 8003b54:	7812      	ldrb	r2, [r2, #0]
 8003b56:	701a      	strb	r2, [r3, #0]
    for (i = 0; i < ((size_t)length); i++)
 8003b58:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	653b      	str	r3, [r7, #80]	; 0x50
 8003b5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b60:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8003b62:	429a      	cmp	r2, r3
 8003b64:	d3da      	bcc.n	8003b1c <print_number+0x288>
    }
    output_pointer[i] = '\0';
 8003b66:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003b68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b6a:	18d3      	adds	r3, r2, r3
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	701a      	strb	r2, [r3, #0]

    output_buffer->offset += (size_t)length;
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	689a      	ldr	r2, [r3, #8]
 8003b74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b76:	18d2      	adds	r2, r2, r3
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	609a      	str	r2, [r3, #8]

    return true;
 8003b7c:	2301      	movs	r3, #1
}
 8003b7e:	0018      	movs	r0, r3
 8003b80:	46bd      	mov	sp, r7
 8003b82:	b017      	add	sp, #92	; 0x5c
 8003b84:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b86:	46c0      	nop			; (mov r8, r8)
 8003b88:	7fefffff 	.word	0x7fefffff
 8003b8c:	0800d5ec 	.word	0x0800d5ec
 8003b90:	43e00000 	.word	0x43e00000
 8003b94:	0800d5f4 	.word	0x0800d5f4
 8003b98:	0800d5fc 	.word	0x0800d5fc

08003b9c <print_string_ptr>:
    return false;
}

/* Render the cstring provided to an escaped version that can be printed. */
static cJSON_bool print_string_ptr(const unsigned char * const input, printbuffer * const output_buffer)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b088      	sub	sp, #32
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
    const unsigned char *input_pointer = NULL;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
    unsigned char *output = NULL;
 8003baa:	2300      	movs	r3, #0
 8003bac:	613b      	str	r3, [r7, #16]
    unsigned char *output_pointer = NULL;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	61bb      	str	r3, [r7, #24]
    size_t output_length = 0;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]
    /* numbers of additional characters needed for escaping */
    size_t escape_characters = 0;
 8003bb6:	2300      	movs	r3, #0
 8003bb8:	617b      	str	r3, [r7, #20]

    if (output_buffer == NULL)
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d101      	bne.n	8003bc4 <print_string_ptr+0x28>
    {
        return false;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	e0e0      	b.n	8003d86 <print_string_ptr+0x1ea>
    }

    /* empty string */
    if (input == NULL)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d115      	bne.n	8003bf6 <print_string_ptr+0x5a>
    {
        output = ensure(output_buffer, sizeof("\"\""));
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2103      	movs	r1, #3
 8003bce:	0018      	movs	r0, r3
 8003bd0:	f7ff fd0a 	bl	80035e8 <ensure>
 8003bd4:	0003      	movs	r3, r0
 8003bd6:	613b      	str	r3, [r7, #16]
        if (output == NULL)
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d101      	bne.n	8003be2 <print_string_ptr+0x46>
        {
            return false;
 8003bde:	2300      	movs	r3, #0
 8003be0:	e0d1      	b.n	8003d86 <print_string_ptr+0x1ea>
        }
        strcpy((char*)output, "\"\"");
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4b6a      	ldr	r3, [pc, #424]	; (8003d90 <print_string_ptr+0x1f4>)
 8003be6:	0010      	movs	r0, r2
 8003be8:	0019      	movs	r1, r3
 8003bea:	2303      	movs	r3, #3
 8003bec:	001a      	movs	r2, r3
 8003bee:	f007 fade 	bl	800b1ae <memcpy>

        return true;
 8003bf2:	2301      	movs	r3, #1
 8003bf4:	e0c7      	b.n	8003d86 <print_string_ptr+0x1ea>
    }

    /* set "flag" to 1 if something needs to be escaped */
    for (input_pointer = input; *input_pointer; input_pointer++)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	61fb      	str	r3, [r7, #28]
 8003bfa:	e022      	b.n	8003c42 <print_string_ptr+0xa6>
    {
        switch (*input_pointer)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	2b22      	cmp	r3, #34	; 0x22
 8003c02:	dc0d      	bgt.n	8003c20 <print_string_ptr+0x84>
 8003c04:	2b08      	cmp	r3, #8
 8003c06:	db11      	blt.n	8003c2c <print_string_ptr+0x90>
 8003c08:	3b08      	subs	r3, #8
 8003c0a:	4a62      	ldr	r2, [pc, #392]	; (8003d94 <print_string_ptr+0x1f8>)
 8003c0c:	40da      	lsrs	r2, r3
 8003c0e:	0013      	movs	r3, r2
 8003c10:	2201      	movs	r2, #1
 8003c12:	4013      	ands	r3, r2
 8003c14:	1e5a      	subs	r2, r3, #1
 8003c16:	4193      	sbcs	r3, r2
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d102      	bne.n	8003c24 <print_string_ptr+0x88>
 8003c1e:	e005      	b.n	8003c2c <print_string_ptr+0x90>
 8003c20:	2b5c      	cmp	r3, #92	; 0x5c
 8003c22:	d103      	bne.n	8003c2c <print_string_ptr+0x90>
            case '\f':
            case '\n':
            case '\r':
            case '\t':
                /* one character escape sequence */
                escape_characters++;
 8003c24:	697b      	ldr	r3, [r7, #20]
 8003c26:	3301      	adds	r3, #1
 8003c28:	617b      	str	r3, [r7, #20]
                break;
 8003c2a:	e007      	b.n	8003c3c <print_string_ptr+0xa0>
            default:
                if (*input_pointer < 32)
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	781b      	ldrb	r3, [r3, #0]
 8003c30:	2b1f      	cmp	r3, #31
 8003c32:	d802      	bhi.n	8003c3a <print_string_ptr+0x9e>
                {
                    /* UTF-16 escape sequence uXXXX */
                    escape_characters += 5;
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	3305      	adds	r3, #5
 8003c38:	617b      	str	r3, [r7, #20]
                }
                break;
 8003c3a:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer; input_pointer++)
 8003c3c:	69fb      	ldr	r3, [r7, #28]
 8003c3e:	3301      	adds	r3, #1
 8003c40:	61fb      	str	r3, [r7, #28]
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	781b      	ldrb	r3, [r3, #0]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d1d8      	bne.n	8003bfc <print_string_ptr+0x60>
        }
    }
    output_length = (size_t)(input_pointer - input) + escape_characters;
 8003c4a:	69fa      	ldr	r2, [r7, #28]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	001a      	movs	r2, r3
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	189b      	adds	r3, r3, r2
 8003c56:	60fb      	str	r3, [r7, #12]

    output = ensure(output_buffer, output_length + sizeof("\"\""));
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	1cda      	adds	r2, r3, #3
 8003c5c:	683b      	ldr	r3, [r7, #0]
 8003c5e:	0011      	movs	r1, r2
 8003c60:	0018      	movs	r0, r3
 8003c62:	f7ff fcc1 	bl	80035e8 <ensure>
 8003c66:	0003      	movs	r3, r0
 8003c68:	613b      	str	r3, [r7, #16]
    if (output == NULL)
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d101      	bne.n	8003c74 <print_string_ptr+0xd8>
    {
        return false;
 8003c70:	2300      	movs	r3, #0
 8003c72:	e088      	b.n	8003d86 <print_string_ptr+0x1ea>
    }

    /* no characters have to be escaped */
    if (escape_characters == 0)
 8003c74:	697b      	ldr	r3, [r7, #20]
 8003c76:	2b00      	cmp	r3, #0
 8003c78:	d117      	bne.n	8003caa <print_string_ptr+0x10e>
    {
        output[0] = '\"';
 8003c7a:	693b      	ldr	r3, [r7, #16]
 8003c7c:	2222      	movs	r2, #34	; 0x22
 8003c7e:	701a      	strb	r2, [r3, #0]
        memcpy(output + 1, input, output_length);
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	3301      	adds	r3, #1
 8003c84:	68fa      	ldr	r2, [r7, #12]
 8003c86:	6879      	ldr	r1, [r7, #4]
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f007 fa90 	bl	800b1ae <memcpy>
        output[output_length + 1] = '\"';
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	3301      	adds	r3, #1
 8003c92:	693a      	ldr	r2, [r7, #16]
 8003c94:	18d3      	adds	r3, r2, r3
 8003c96:	2222      	movs	r2, #34	; 0x22
 8003c98:	701a      	strb	r2, [r3, #0]
        output[output_length + 2] = '\0';
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	3302      	adds	r3, #2
 8003c9e:	693a      	ldr	r2, [r7, #16]
 8003ca0:	18d3      	adds	r3, r2, r3
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]

        return true;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e06d      	b.n	8003d86 <print_string_ptr+0x1ea>
    }

    output[0] = '\"';
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	2222      	movs	r2, #34	; 0x22
 8003cae:	701a      	strb	r2, [r3, #0]
    output_pointer = output + 1;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	61bb      	str	r3, [r7, #24]
    /* copy the string */
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	61fb      	str	r3, [r7, #28]
 8003cba:	e053      	b.n	8003d64 <print_string_ptr+0x1c8>
    {
        if ((*input_pointer > 31) && (*input_pointer != '\"') && (*input_pointer != '\\'))
 8003cbc:	69fb      	ldr	r3, [r7, #28]
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2b1f      	cmp	r3, #31
 8003cc2:	d90c      	bls.n	8003cde <print_string_ptr+0x142>
 8003cc4:	69fb      	ldr	r3, [r7, #28]
 8003cc6:	781b      	ldrb	r3, [r3, #0]
 8003cc8:	2b22      	cmp	r3, #34	; 0x22
 8003cca:	d008      	beq.n	8003cde <print_string_ptr+0x142>
 8003ccc:	69fb      	ldr	r3, [r7, #28]
 8003cce:	781b      	ldrb	r3, [r3, #0]
 8003cd0:	2b5c      	cmp	r3, #92	; 0x5c
 8003cd2:	d004      	beq.n	8003cde <print_string_ptr+0x142>
        {
            /* normal character, copy */
            *output_pointer = *input_pointer;
 8003cd4:	69fb      	ldr	r3, [r7, #28]
 8003cd6:	781a      	ldrb	r2, [r3, #0]
 8003cd8:	69bb      	ldr	r3, [r7, #24]
 8003cda:	701a      	strb	r2, [r3, #0]
 8003cdc:	e03c      	b.n	8003d58 <print_string_ptr+0x1bc>
        }
        else
        {
            /* character needs to be escaped */
            *output_pointer++ = '\\';
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	1c5a      	adds	r2, r3, #1
 8003ce2:	61ba      	str	r2, [r7, #24]
 8003ce4:	225c      	movs	r2, #92	; 0x5c
 8003ce6:	701a      	strb	r2, [r3, #0]
            switch (*input_pointer)
 8003ce8:	69fb      	ldr	r3, [r7, #28]
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	2b22      	cmp	r3, #34	; 0x22
 8003cee:	dc09      	bgt.n	8003d04 <print_string_ptr+0x168>
 8003cf0:	2b08      	cmp	r3, #8
 8003cf2:	db25      	blt.n	8003d40 <print_string_ptr+0x1a4>
 8003cf4:	3b08      	subs	r3, #8
 8003cf6:	2b1a      	cmp	r3, #26
 8003cf8:	d822      	bhi.n	8003d40 <print_string_ptr+0x1a4>
 8003cfa:	009a      	lsls	r2, r3, #2
 8003cfc:	4b26      	ldr	r3, [pc, #152]	; (8003d98 <print_string_ptr+0x1fc>)
 8003cfe:	18d3      	adds	r3, r2, r3
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	469f      	mov	pc, r3
 8003d04:	2b5c      	cmp	r3, #92	; 0x5c
 8003d06:	d11b      	bne.n	8003d40 <print_string_ptr+0x1a4>
            {
                case '\\':
                    *output_pointer = '\\';
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	225c      	movs	r2, #92	; 0x5c
 8003d0c:	701a      	strb	r2, [r3, #0]
                    break;
 8003d0e:	e023      	b.n	8003d58 <print_string_ptr+0x1bc>
                case '\"':
                    *output_pointer = '\"';
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	2222      	movs	r2, #34	; 0x22
 8003d14:	701a      	strb	r2, [r3, #0]
                    break;
 8003d16:	e01f      	b.n	8003d58 <print_string_ptr+0x1bc>
                case '\b':
                    *output_pointer = 'b';
 8003d18:	69bb      	ldr	r3, [r7, #24]
 8003d1a:	2262      	movs	r2, #98	; 0x62
 8003d1c:	701a      	strb	r2, [r3, #0]
                    break;
 8003d1e:	e01b      	b.n	8003d58 <print_string_ptr+0x1bc>
                case '\f':
                    *output_pointer = 'f';
 8003d20:	69bb      	ldr	r3, [r7, #24]
 8003d22:	2266      	movs	r2, #102	; 0x66
 8003d24:	701a      	strb	r2, [r3, #0]
                    break;
 8003d26:	e017      	b.n	8003d58 <print_string_ptr+0x1bc>
                case '\n':
                    *output_pointer = 'n';
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	226e      	movs	r2, #110	; 0x6e
 8003d2c:	701a      	strb	r2, [r3, #0]
                    break;
 8003d2e:	e013      	b.n	8003d58 <print_string_ptr+0x1bc>
                case '\r':
                    *output_pointer = 'r';
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2272      	movs	r2, #114	; 0x72
 8003d34:	701a      	strb	r2, [r3, #0]
                    break;
 8003d36:	e00f      	b.n	8003d58 <print_string_ptr+0x1bc>
                case '\t':
                    *output_pointer = 't';
 8003d38:	69bb      	ldr	r3, [r7, #24]
 8003d3a:	2274      	movs	r2, #116	; 0x74
 8003d3c:	701a      	strb	r2, [r3, #0]
                    break;
 8003d3e:	e00b      	b.n	8003d58 <print_string_ptr+0x1bc>
                default:
                    /* escape and print as unicode codepoint */
                    sprintf((char*)output_pointer, "u%04x", *input_pointer);
 8003d40:	69fb      	ldr	r3, [r7, #28]
 8003d42:	781b      	ldrb	r3, [r3, #0]
 8003d44:	001a      	movs	r2, r3
 8003d46:	4915      	ldr	r1, [pc, #84]	; (8003d9c <print_string_ptr+0x200>)
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	0018      	movs	r0, r3
 8003d4c:	f007 f88e 	bl	800ae6c <siprintf>
                    output_pointer += 4;
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	3304      	adds	r3, #4
 8003d54:	61bb      	str	r3, [r7, #24]
                    break;
 8003d56:	46c0      	nop			; (mov r8, r8)
    for (input_pointer = input; *input_pointer != '\0'; (void)input_pointer++, output_pointer++)
 8003d58:	69fb      	ldr	r3, [r7, #28]
 8003d5a:	3301      	adds	r3, #1
 8003d5c:	61fb      	str	r3, [r7, #28]
 8003d5e:	69bb      	ldr	r3, [r7, #24]
 8003d60:	3301      	adds	r3, #1
 8003d62:	61bb      	str	r3, [r7, #24]
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d1a7      	bne.n	8003cbc <print_string_ptr+0x120>
            }
        }
    }
    output[output_length + 1] = '\"';
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	693a      	ldr	r2, [r7, #16]
 8003d72:	18d3      	adds	r3, r2, r3
 8003d74:	2222      	movs	r2, #34	; 0x22
 8003d76:	701a      	strb	r2, [r3, #0]
    output[output_length + 2] = '\0';
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	3302      	adds	r3, #2
 8003d7c:	693a      	ldr	r2, [r7, #16]
 8003d7e:	18d3      	adds	r3, r2, r3
 8003d80:	2200      	movs	r2, #0
 8003d82:	701a      	strb	r2, [r3, #0]

    return true;
 8003d84:	2301      	movs	r3, #1
}
 8003d86:	0018      	movs	r0, r3
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	b008      	add	sp, #32
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	46c0      	nop			; (mov r8, r8)
 8003d90:	0800d600 	.word	0x0800d600
 8003d94:	04000037 	.word	0x04000037
 8003d98:	0800d818 	.word	0x0800d818
 8003d9c:	0800d604 	.word	0x0800d604

08003da0 <print_string>:

/* Invoke print_string_ptr (which is useful) on an item. */
static cJSON_bool print_string(const cJSON * const item, printbuffer * const p)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
    return print_string_ptr((unsigned char*)item->valuestring, p);
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	691b      	ldr	r3, [r3, #16]
 8003dae:	683a      	ldr	r2, [r7, #0]
 8003db0:	0011      	movs	r1, r2
 8003db2:	0018      	movs	r0, r3
 8003db4:	f7ff fef2 	bl	8003b9c <print_string_ptr>
 8003db8:	0003      	movs	r3, r0
}
 8003dba:	0018      	movs	r0, r3
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	b002      	add	sp, #8
 8003dc0:	bd80      	pop	{r7, pc}
	...

08003dc4 <print>:
}

#define cjson_min(a, b) (((a) < (b)) ? (a) : (b))

static unsigned char *print(const cJSON * const item, cJSON_bool format, const internal_hooks * const hooks)
{
 8003dc4:	b5b0      	push	{r4, r5, r7, lr}
 8003dc6:	b08e      	sub	sp, #56	; 0x38
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	60f8      	str	r0, [r7, #12]
 8003dcc:	60b9      	str	r1, [r7, #8]
 8003dce:	607a      	str	r2, [r7, #4]
    static const size_t default_buffer_size = 256;
    printbuffer buffer[1];
    unsigned char *printed = NULL;
 8003dd0:	2300      	movs	r3, #0
 8003dd2:	637b      	str	r3, [r7, #52]	; 0x34

    memset(buffer, 0, sizeof(buffer));
 8003dd4:	2410      	movs	r4, #16
 8003dd6:	193b      	adds	r3, r7, r4
 8003dd8:	2224      	movs	r2, #36	; 0x24
 8003dda:	2100      	movs	r1, #0
 8003ddc:	0018      	movs	r0, r3
 8003dde:	f007 f8b1 	bl	800af44 <memset>

    /* create buffer */
    buffer->buffer = (unsigned char*) hooks->allocate(default_buffer_size);
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	4b42      	ldr	r3, [pc, #264]	; (8003ef0 <print+0x12c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	0018      	movs	r0, r3
 8003dec:	4790      	blx	r2
 8003dee:	0002      	movs	r2, r0
 8003df0:	193b      	adds	r3, r7, r4
 8003df2:	601a      	str	r2, [r3, #0]
    buffer->length = default_buffer_size;
 8003df4:	4b3e      	ldr	r3, [pc, #248]	; (8003ef0 <print+0x12c>)
 8003df6:	681a      	ldr	r2, [r3, #0]
 8003df8:	193b      	adds	r3, r7, r4
 8003dfa:	605a      	str	r2, [r3, #4]
    buffer->format = format;
 8003dfc:	0025      	movs	r5, r4
 8003dfe:	193b      	adds	r3, r7, r4
 8003e00:	68ba      	ldr	r2, [r7, #8]
 8003e02:	615a      	str	r2, [r3, #20]
    buffer->hooks = *hooks;
 8003e04:	197b      	adds	r3, r7, r5
 8003e06:	687a      	ldr	r2, [r7, #4]
 8003e08:	3318      	adds	r3, #24
 8003e0a:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003e0c:	c313      	stmia	r3!, {r0, r1, r4}
    if (buffer->buffer == NULL)
 8003e0e:	002c      	movs	r4, r5
 8003e10:	193b      	adds	r3, r7, r4
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d04c      	beq.n	8003eb2 <print+0xee>
    {
        goto fail;
    }

    /* print the value */
    if (!print_value(item, buffer))
 8003e18:	193a      	adds	r2, r7, r4
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	0011      	movs	r1, r2
 8003e1e:	0018      	movs	r0, r3
 8003e20:	f000 f87a 	bl	8003f18 <print_value>
 8003e24:	1e03      	subs	r3, r0, #0
 8003e26:	d046      	beq.n	8003eb6 <print+0xf2>
    {
        goto fail;
    }
    update_offset(buffer);
 8003e28:	193b      	adds	r3, r7, r4
 8003e2a:	0018      	movs	r0, r3
 8003e2c:	f7ff fc7c 	bl	8003728 <update_offset>

    /* check if reallocate is available */
    if (hooks->reallocate != NULL)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	689b      	ldr	r3, [r3, #8]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d011      	beq.n	8003e5c <print+0x98>
    {
        printed = (unsigned char*) hooks->reallocate(buffer->buffer, buffer->offset + 1);
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	689a      	ldr	r2, [r3, #8]
 8003e3c:	193b      	adds	r3, r7, r4
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	193b      	adds	r3, r7, r4
 8003e42:	689b      	ldr	r3, [r3, #8]
 8003e44:	3301      	adds	r3, #1
 8003e46:	0019      	movs	r1, r3
 8003e48:	4790      	blx	r2
 8003e4a:	0003      	movs	r3, r0
 8003e4c:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL) {
 8003e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d032      	beq.n	8003eba <print+0xf6>
            goto fail;
        }
        buffer->buffer = NULL;
 8003e54:	193b      	adds	r3, r7, r4
 8003e56:	2200      	movs	r2, #0
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e028      	b.n	8003eae <print+0xea>
    }
    else /* otherwise copy the JSON over to a new buffer */
    {
        printed = (unsigned char*) hooks->allocate(buffer->offset + 1);
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681a      	ldr	r2, [r3, #0]
 8003e60:	2410      	movs	r4, #16
 8003e62:	193b      	adds	r3, r7, r4
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	3301      	adds	r3, #1
 8003e68:	0018      	movs	r0, r3
 8003e6a:	4790      	blx	r2
 8003e6c:	0003      	movs	r3, r0
 8003e6e:	637b      	str	r3, [r7, #52]	; 0x34
        if (printed == NULL)
 8003e70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d023      	beq.n	8003ebe <print+0xfa>
        {
            goto fail;
        }
        memcpy(printed, buffer->buffer, cjson_min(buffer->length, buffer->offset + 1));
 8003e76:	193b      	adds	r3, r7, r4
 8003e78:	6819      	ldr	r1, [r3, #0]
 8003e7a:	193b      	adds	r3, r7, r4
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	1c58      	adds	r0, r3, #1
 8003e80:	193b      	adds	r3, r7, r4
 8003e82:	685a      	ldr	r2, [r3, #4]
 8003e84:	0003      	movs	r3, r0
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d900      	bls.n	8003e8c <print+0xc8>
 8003e8a:	0013      	movs	r3, r2
 8003e8c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8003e8e:	001a      	movs	r2, r3
 8003e90:	f007 f98d 	bl	800b1ae <memcpy>
        printed[buffer->offset] = '\0'; /* just to be sure */
 8003e94:	2110      	movs	r1, #16
 8003e96:	187b      	adds	r3, r7, r1
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e9c:	18d3      	adds	r3, r2, r3
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]

        /* free the buffer */
        hooks->deallocate(buffer->buffer);
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685a      	ldr	r2, [r3, #4]
 8003ea6:	187b      	adds	r3, r7, r1
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	0018      	movs	r0, r3
 8003eac:	4790      	blx	r2
    }

    return printed;
 8003eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003eb0:	e01a      	b.n	8003ee8 <print+0x124>
        goto fail;
 8003eb2:	46c0      	nop			; (mov r8, r8)
 8003eb4:	e004      	b.n	8003ec0 <print+0xfc>
        goto fail;
 8003eb6:	46c0      	nop			; (mov r8, r8)
 8003eb8:	e002      	b.n	8003ec0 <print+0xfc>
            goto fail;
 8003eba:	46c0      	nop			; (mov r8, r8)
 8003ebc:	e000      	b.n	8003ec0 <print+0xfc>
            goto fail;
 8003ebe:	46c0      	nop			; (mov r8, r8)

fail:
    if (buffer->buffer != NULL)
 8003ec0:	2110      	movs	r1, #16
 8003ec2:	187b      	adds	r3, r7, r1
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d005      	beq.n	8003ed6 <print+0x112>
    {
        hooks->deallocate(buffer->buffer);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	685a      	ldr	r2, [r3, #4]
 8003ece:	187b      	adds	r3, r7, r1
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	0018      	movs	r0, r3
 8003ed4:	4790      	blx	r2
    }

    if (printed != NULL)
 8003ed6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <print+0x122>
    {
        hooks->deallocate(printed);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	685b      	ldr	r3, [r3, #4]
 8003ee0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003ee2:	0010      	movs	r0, r2
 8003ee4:	4798      	blx	r3
    }

    return NULL;
 8003ee6:	2300      	movs	r3, #0
}
 8003ee8:	0018      	movs	r0, r3
 8003eea:	46bd      	mov	sp, r7
 8003eec:	b00e      	add	sp, #56	; 0x38
 8003eee:	bdb0      	pop	{r4, r5, r7, pc}
 8003ef0:	0800d908 	.word	0x0800d908

08003ef4 <cJSON_Print>:

/* Render a cJSON item/entity/structure to text. */
CJSON_PUBLIC(char *) cJSON_Print(const cJSON *item)
{
 8003ef4:	b580      	push	{r7, lr}
 8003ef6:	b082      	sub	sp, #8
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
    return (char*)print(item, true, &global_hooks);
 8003efc:	4a05      	ldr	r2, [pc, #20]	; (8003f14 <cJSON_Print+0x20>)
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2101      	movs	r1, #1
 8003f02:	0018      	movs	r0, r3
 8003f04:	f7ff ff5e 	bl	8003dc4 <print>
 8003f08:	0003      	movs	r3, r0
}
 8003f0a:	0018      	movs	r0, r3
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	b002      	add	sp, #8
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	46c0      	nop			; (mov r8, r8)
 8003f14:	20000000 	.word	0x20000000

08003f18 <print_value>:
    return false;
}

/* Render a value to text. */
static cJSON_bool print_value(const cJSON * const item, printbuffer * const output_buffer)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	b084      	sub	sp, #16
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
 8003f20:	6039      	str	r1, [r7, #0]
    unsigned char *output = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (output_buffer == NULL))
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d002      	beq.n	8003f32 <print_value+0x1a>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d101      	bne.n	8003f36 <print_value+0x1e>
    {
        return false;
 8003f32:	2300      	movs	r3, #0
 8003f34:	e0a1      	b.n	800407a <print_value+0x162>
    }

    switch ((item->type) & 0xFF)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	68db      	ldr	r3, [r3, #12]
 8003f3a:	22ff      	movs	r2, #255	; 0xff
 8003f3c:	4013      	ands	r3, r2
 8003f3e:	2b80      	cmp	r3, #128	; 0x80
 8003f40:	d05c      	beq.n	8003ffc <print_value+0xe4>
 8003f42:	dd00      	ble.n	8003f46 <print_value+0x2e>
 8003f44:	e098      	b.n	8004078 <print_value+0x160>
 8003f46:	2b20      	cmp	r3, #32
 8003f48:	dc0a      	bgt.n	8003f60 <print_value+0x48>
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	dc00      	bgt.n	8003f50 <print_value+0x38>
 8003f4e:	e093      	b.n	8004078 <print_value+0x160>
 8003f50:	2b20      	cmp	r3, #32
 8003f52:	d900      	bls.n	8003f56 <print_value+0x3e>
 8003f54:	e090      	b.n	8004078 <print_value+0x160>
 8003f56:	009a      	lsls	r2, r3, #2
 8003f58:	4b4a      	ldr	r3, [pc, #296]	; (8004084 <print_value+0x16c>)
 8003f5a:	18d3      	adds	r3, r2, r3
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	469f      	mov	pc, r3
 8003f60:	2b40      	cmp	r3, #64	; 0x40
 8003f62:	d100      	bne.n	8003f66 <print_value+0x4e>
 8003f64:	e080      	b.n	8004068 <print_value+0x150>
 8003f66:	e087      	b.n	8004078 <print_value+0x160>
    {
        case cJSON_NULL:
            output = ensure(output_buffer, 5);
 8003f68:	683b      	ldr	r3, [r7, #0]
 8003f6a:	2105      	movs	r1, #5
 8003f6c:	0018      	movs	r0, r3
 8003f6e:	f7ff fb3b 	bl	80035e8 <ensure>
 8003f72:	0003      	movs	r3, r0
 8003f74:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d101      	bne.n	8003f80 <print_value+0x68>
            {
                return false;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	e07c      	b.n	800407a <print_value+0x162>
            }
            strcpy((char*)output, "null");
 8003f80:	68fa      	ldr	r2, [r7, #12]
 8003f82:	4b41      	ldr	r3, [pc, #260]	; (8004088 <print_value+0x170>)
 8003f84:	0010      	movs	r0, r2
 8003f86:	0019      	movs	r1, r3
 8003f88:	2305      	movs	r3, #5
 8003f8a:	001a      	movs	r2, r3
 8003f8c:	f007 f90f 	bl	800b1ae <memcpy>
            return true;
 8003f90:	2301      	movs	r3, #1
 8003f92:	e072      	b.n	800407a <print_value+0x162>

        case cJSON_False:
            output = ensure(output_buffer, 6);
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	2106      	movs	r1, #6
 8003f98:	0018      	movs	r0, r3
 8003f9a:	f7ff fb25 	bl	80035e8 <ensure>
 8003f9e:	0003      	movs	r3, r0
 8003fa0:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d101      	bne.n	8003fac <print_value+0x94>
            {
                return false;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	e066      	b.n	800407a <print_value+0x162>
            }
            strcpy((char*)output, "false");
 8003fac:	68fa      	ldr	r2, [r7, #12]
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <print_value+0x174>)
 8003fb0:	0010      	movs	r0, r2
 8003fb2:	0019      	movs	r1, r3
 8003fb4:	2306      	movs	r3, #6
 8003fb6:	001a      	movs	r2, r3
 8003fb8:	f007 f8f9 	bl	800b1ae <memcpy>
            return true;
 8003fbc:	2301      	movs	r3, #1
 8003fbe:	e05c      	b.n	800407a <print_value+0x162>

        case cJSON_True:
            output = ensure(output_buffer, 5);
 8003fc0:	683b      	ldr	r3, [r7, #0]
 8003fc2:	2105      	movs	r1, #5
 8003fc4:	0018      	movs	r0, r3
 8003fc6:	f7ff fb0f 	bl	80035e8 <ensure>
 8003fca:	0003      	movs	r3, r0
 8003fcc:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d101      	bne.n	8003fd8 <print_value+0xc0>
            {
                return false;
 8003fd4:	2300      	movs	r3, #0
 8003fd6:	e050      	b.n	800407a <print_value+0x162>
            }
            strcpy((char*)output, "true");
 8003fd8:	68fa      	ldr	r2, [r7, #12]
 8003fda:	4b2d      	ldr	r3, [pc, #180]	; (8004090 <print_value+0x178>)
 8003fdc:	0010      	movs	r0, r2
 8003fde:	0019      	movs	r1, r3
 8003fe0:	2305      	movs	r3, #5
 8003fe2:	001a      	movs	r2, r3
 8003fe4:	f007 f8e3 	bl	800b1ae <memcpy>
            return true;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e046      	b.n	800407a <print_value+0x162>

        case cJSON_Number:
            return print_number(item, output_buffer);
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	0011      	movs	r1, r2
 8003ff2:	0018      	movs	r0, r3
 8003ff4:	f7ff fc4e 	bl	8003894 <print_number>
 8003ff8:	0003      	movs	r3, r0
 8003ffa:	e03e      	b.n	800407a <print_value+0x162>

        case cJSON_Raw:
        {
            size_t raw_length = 0;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	60bb      	str	r3, [r7, #8]
            if (item->valuestring == NULL)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	691b      	ldr	r3, [r3, #16]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d101      	bne.n	800400c <print_value+0xf4>
            {
                return false;
 8004008:	2300      	movs	r3, #0
 800400a:	e036      	b.n	800407a <print_value+0x162>
            }

            raw_length = strlen(item->valuestring) + sizeof("");
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	691b      	ldr	r3, [r3, #16]
 8004010:	0018      	movs	r0, r3
 8004012:	f7fc f879 	bl	8000108 <strlen>
 8004016:	0003      	movs	r3, r0
 8004018:	3301      	adds	r3, #1
 800401a:	60bb      	str	r3, [r7, #8]
            output = ensure(output_buffer, raw_length);
 800401c:	68ba      	ldr	r2, [r7, #8]
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	0011      	movs	r1, r2
 8004022:	0018      	movs	r0, r3
 8004024:	f7ff fae0 	bl	80035e8 <ensure>
 8004028:	0003      	movs	r3, r0
 800402a:	60fb      	str	r3, [r7, #12]
            if (output == NULL)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	2b00      	cmp	r3, #0
 8004030:	d101      	bne.n	8004036 <print_value+0x11e>
            {
                return false;
 8004032:	2300      	movs	r3, #0
 8004034:	e021      	b.n	800407a <print_value+0x162>
            }
            memcpy(output, item->valuestring, raw_length);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6919      	ldr	r1, [r3, #16]
 800403a:	68ba      	ldr	r2, [r7, #8]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	0018      	movs	r0, r3
 8004040:	f007 f8b5 	bl	800b1ae <memcpy>
            return true;
 8004044:	2301      	movs	r3, #1
 8004046:	e018      	b.n	800407a <print_value+0x162>
        }

        case cJSON_String:
            return print_string(item, output_buffer);
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	0011      	movs	r1, r2
 800404e:	0018      	movs	r0, r3
 8004050:	f7ff fea6 	bl	8003da0 <print_string>
 8004054:	0003      	movs	r3, r0
 8004056:	e010      	b.n	800407a <print_value+0x162>

        case cJSON_Array:
            return print_array(item, output_buffer);
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	0011      	movs	r1, r2
 800405e:	0018      	movs	r0, r3
 8004060:	f000 f818 	bl	8004094 <print_array>
 8004064:	0003      	movs	r3, r0
 8004066:	e008      	b.n	800407a <print_value+0x162>

        case cJSON_Object:
            return print_object(item, output_buffer);
 8004068:	683a      	ldr	r2, [r7, #0]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	0011      	movs	r1, r2
 800406e:	0018      	movs	r0, r3
 8004070:	f000 f89e 	bl	80041b0 <print_object>
 8004074:	0003      	movs	r3, r0
 8004076:	e000      	b.n	800407a <print_value+0x162>

        default:
            return false;
 8004078:	2300      	movs	r3, #0
    }
}
 800407a:	0018      	movs	r0, r3
 800407c:	46bd      	mov	sp, r7
 800407e:	b004      	add	sp, #16
 8004080:	bd80      	pop	{r7, pc}
 8004082:	46c0      	nop			; (mov r8, r8)
 8004084:	0800d884 	.word	0x0800d884
 8004088:	0800d5ec 	.word	0x0800d5ec
 800408c:	0800d610 	.word	0x0800d610
 8004090:	0800d618 	.word	0x0800d618

08004094 <print_array>:
    return false;
}

/* Render an array to text */
static cJSON_bool print_array(const cJSON * const item, printbuffer * const output_buffer)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 800409e:	2300      	movs	r3, #0
 80040a0:	617b      	str	r3, [r7, #20]
    size_t length = 0;
 80040a2:	2300      	movs	r3, #0
 80040a4:	60fb      	str	r3, [r7, #12]
    cJSON *current_element = item->child;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	689b      	ldr	r3, [r3, #8]
 80040aa:	613b      	str	r3, [r7, #16]

    if (output_buffer == NULL)
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d101      	bne.n	80040b6 <print_array+0x22>
    {
        return false;
 80040b2:	2300      	movs	r3, #0
 80040b4:	e078      	b.n	80041a8 <print_array+0x114>
    }

    /* Compose the output array. */
    /* opening square bracket */
    output_pointer = ensure(output_buffer, 1);
 80040b6:	683b      	ldr	r3, [r7, #0]
 80040b8:	2101      	movs	r1, #1
 80040ba:	0018      	movs	r0, r3
 80040bc:	f7ff fa94 	bl	80035e8 <ensure>
 80040c0:	0003      	movs	r3, r0
 80040c2:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 80040c4:	697b      	ldr	r3, [r7, #20]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d101      	bne.n	80040ce <print_array+0x3a>
    {
        return false;
 80040ca:	2300      	movs	r3, #0
 80040cc:	e06c      	b.n	80041a8 <print_array+0x114>
    }

    *output_pointer = '[';
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	225b      	movs	r2, #91	; 0x5b
 80040d2:	701a      	strb	r2, [r3, #0]
    output_buffer->offset++;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	689b      	ldr	r3, [r3, #8]
 80040d8:	1c5a      	adds	r2, r3, #1
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	609a      	str	r2, [r3, #8]
    output_buffer->depth++;
 80040de:	683b      	ldr	r3, [r7, #0]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	1c5a      	adds	r2, r3, #1
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	60da      	str	r2, [r3, #12]

    while (current_element != NULL)
 80040e8:	e041      	b.n	800416e <print_array+0xda>
    {
        if (!print_value(current_element, output_buffer))
 80040ea:	683a      	ldr	r2, [r7, #0]
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	0011      	movs	r1, r2
 80040f0:	0018      	movs	r0, r3
 80040f2:	f7ff ff11 	bl	8003f18 <print_value>
 80040f6:	1e03      	subs	r3, r0, #0
 80040f8:	d101      	bne.n	80040fe <print_array+0x6a>
        {
            return false;
 80040fa:	2300      	movs	r3, #0
 80040fc:	e054      	b.n	80041a8 <print_array+0x114>
        }
        update_offset(output_buffer);
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	0018      	movs	r0, r3
 8004102:	f7ff fb11 	bl	8003728 <update_offset>
        if (current_element->next)
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d02c      	beq.n	8004168 <print_array+0xd4>
        {
            length = (size_t) (output_buffer->format ? 2 : 1);
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	695b      	ldr	r3, [r3, #20]
 8004112:	2b00      	cmp	r3, #0
 8004114:	d001      	beq.n	800411a <print_array+0x86>
 8004116:	2302      	movs	r3, #2
 8004118:	e000      	b.n	800411c <print_array+0x88>
 800411a:	2301      	movs	r3, #1
 800411c:	60fb      	str	r3, [r7, #12]
            output_pointer = ensure(output_buffer, length + 1);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	1c5a      	adds	r2, r3, #1
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	0011      	movs	r1, r2
 8004126:	0018      	movs	r0, r3
 8004128:	f7ff fa5e 	bl	80035e8 <ensure>
 800412c:	0003      	movs	r3, r0
 800412e:	617b      	str	r3, [r7, #20]
            if (output_pointer == NULL)
 8004130:	697b      	ldr	r3, [r7, #20]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d101      	bne.n	800413a <print_array+0xa6>
            {
                return false;
 8004136:	2300      	movs	r3, #0
 8004138:	e036      	b.n	80041a8 <print_array+0x114>
            }
            *output_pointer++ = ',';
 800413a:	697b      	ldr	r3, [r7, #20]
 800413c:	1c5a      	adds	r2, r3, #1
 800413e:	617a      	str	r2, [r7, #20]
 8004140:	222c      	movs	r2, #44	; 0x2c
 8004142:	701a      	strb	r2, [r3, #0]
            if(output_buffer->format)
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	695b      	ldr	r3, [r3, #20]
 8004148:	2b00      	cmp	r3, #0
 800414a:	d004      	beq.n	8004156 <print_array+0xc2>
            {
                *output_pointer++ = ' ';
 800414c:	697b      	ldr	r3, [r7, #20]
 800414e:	1c5a      	adds	r2, r3, #1
 8004150:	617a      	str	r2, [r7, #20]
 8004152:	2220      	movs	r2, #32
 8004154:	701a      	strb	r2, [r3, #0]
            }
            *output_pointer = '\0';
 8004156:	697b      	ldr	r3, [r7, #20]
 8004158:	2200      	movs	r2, #0
 800415a:	701a      	strb	r2, [r3, #0]
            output_buffer->offset += length;
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	689a      	ldr	r2, [r3, #8]
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	18d2      	adds	r2, r2, r3
 8004164:	683b      	ldr	r3, [r7, #0]
 8004166:	609a      	str	r2, [r3, #8]
        }
        current_element = current_element->next;
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	613b      	str	r3, [r7, #16]
    while (current_element != NULL)
 800416e:	693b      	ldr	r3, [r7, #16]
 8004170:	2b00      	cmp	r3, #0
 8004172:	d1ba      	bne.n	80040ea <print_array+0x56>
    }

    output_pointer = ensure(output_buffer, 2);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	2102      	movs	r1, #2
 8004178:	0018      	movs	r0, r3
 800417a:	f7ff fa35 	bl	80035e8 <ensure>
 800417e:	0003      	movs	r3, r0
 8004180:	617b      	str	r3, [r7, #20]
    if (output_pointer == NULL)
 8004182:	697b      	ldr	r3, [r7, #20]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d101      	bne.n	800418c <print_array+0xf8>
    {
        return false;
 8004188:	2300      	movs	r3, #0
 800418a:	e00d      	b.n	80041a8 <print_array+0x114>
    }
    *output_pointer++ = ']';
 800418c:	697b      	ldr	r3, [r7, #20]
 800418e:	1c5a      	adds	r2, r3, #1
 8004190:	617a      	str	r2, [r7, #20]
 8004192:	225d      	movs	r2, #93	; 0x5d
 8004194:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	2200      	movs	r2, #0
 800419a:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	68db      	ldr	r3, [r3, #12]
 80041a0:	1e5a      	subs	r2, r3, #1
 80041a2:	683b      	ldr	r3, [r7, #0]
 80041a4:	60da      	str	r2, [r3, #12]

    return true;
 80041a6:	2301      	movs	r3, #1
}
 80041a8:	0018      	movs	r0, r3
 80041aa:	46bd      	mov	sp, r7
 80041ac:	b006      	add	sp, #24
 80041ae:	bd80      	pop	{r7, pc}

080041b0 <print_object>:
    return false;
}

/* Render an object to text. */
static cJSON_bool print_object(const cJSON * const item, printbuffer * const output_buffer)
{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b088      	sub	sp, #32
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
 80041b8:	6039      	str	r1, [r7, #0]
    unsigned char *output_pointer = NULL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	61fb      	str	r3, [r7, #28]
    size_t length = 0;
 80041be:	2300      	movs	r3, #0
 80041c0:	60fb      	str	r3, [r7, #12]
    cJSON *current_item = item->child;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	689b      	ldr	r3, [r3, #8]
 80041c6:	61bb      	str	r3, [r7, #24]

    if (output_buffer == NULL)
 80041c8:	683b      	ldr	r3, [r7, #0]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <print_object+0x22>
    {
        return false;
 80041ce:	2300      	movs	r3, #0
 80041d0:	e116      	b.n	8004400 <print_object+0x250>
    }

    /* Compose the output: */
    length = (size_t) (output_buffer->format ? 2 : 1); /* fmt: {\n */
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	695b      	ldr	r3, [r3, #20]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d001      	beq.n	80041de <print_object+0x2e>
 80041da:	2302      	movs	r3, #2
 80041dc:	e000      	b.n	80041e0 <print_object+0x30>
 80041de:	2301      	movs	r3, #1
 80041e0:	60fb      	str	r3, [r7, #12]
    output_pointer = ensure(output_buffer, length + 1);
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	1c5a      	adds	r2, r3, #1
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	0011      	movs	r1, r2
 80041ea:	0018      	movs	r0, r3
 80041ec:	f7ff f9fc 	bl	80035e8 <ensure>
 80041f0:	0003      	movs	r3, r0
 80041f2:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <print_object+0x4e>
    {
        return false;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e100      	b.n	8004400 <print_object+0x250>
    }

    *output_pointer++ = '{';
 80041fe:	69fb      	ldr	r3, [r7, #28]
 8004200:	1c5a      	adds	r2, r3, #1
 8004202:	61fa      	str	r2, [r7, #28]
 8004204:	227b      	movs	r2, #123	; 0x7b
 8004206:	701a      	strb	r2, [r3, #0]
    output_buffer->depth++;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	68db      	ldr	r3, [r3, #12]
 800420c:	1c5a      	adds	r2, r3, #1
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	60da      	str	r2, [r3, #12]
    if (output_buffer->format)
 8004212:	683b      	ldr	r3, [r7, #0]
 8004214:	695b      	ldr	r3, [r3, #20]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d004      	beq.n	8004224 <print_object+0x74>
    {
        *output_pointer++ = '\n';
 800421a:	69fb      	ldr	r3, [r7, #28]
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	61fa      	str	r2, [r7, #28]
 8004220:	220a      	movs	r2, #10
 8004222:	701a      	strb	r2, [r3, #0]
    }
    output_buffer->offset += length;
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	689a      	ldr	r2, [r3, #8]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	18d2      	adds	r2, r2, r3
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	609a      	str	r2, [r3, #8]

    while (current_item)
 8004230:	e0aa      	b.n	8004388 <print_object+0x1d8>
    {
        if (output_buffer->format)
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	695b      	ldr	r3, [r3, #20]
 8004236:	2b00      	cmp	r3, #0
 8004238:	d024      	beq.n	8004284 <print_object+0xd4>
        {
            size_t i;
            output_pointer = ensure(output_buffer, output_buffer->depth);
 800423a:	683b      	ldr	r3, [r7, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	0011      	movs	r1, r2
 8004242:	0018      	movs	r0, r3
 8004244:	f7ff f9d0 	bl	80035e8 <ensure>
 8004248:	0003      	movs	r3, r0
 800424a:	61fb      	str	r3, [r7, #28]
            if (output_pointer == NULL)
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	2b00      	cmp	r3, #0
 8004250:	d101      	bne.n	8004256 <print_object+0xa6>
            {
                return false;
 8004252:	2300      	movs	r3, #0
 8004254:	e0d4      	b.n	8004400 <print_object+0x250>
            }
            for (i = 0; i < output_buffer->depth; i++)
 8004256:	2300      	movs	r3, #0
 8004258:	617b      	str	r3, [r7, #20]
 800425a:	e007      	b.n	800426c <print_object+0xbc>
            {
                *output_pointer++ = '\t';
 800425c:	69fb      	ldr	r3, [r7, #28]
 800425e:	1c5a      	adds	r2, r3, #1
 8004260:	61fa      	str	r2, [r7, #28]
 8004262:	2209      	movs	r2, #9
 8004264:	701a      	strb	r2, [r3, #0]
            for (i = 0; i < output_buffer->depth; i++)
 8004266:	697b      	ldr	r3, [r7, #20]
 8004268:	3301      	adds	r3, #1
 800426a:	617b      	str	r3, [r7, #20]
 800426c:	683b      	ldr	r3, [r7, #0]
 800426e:	68db      	ldr	r3, [r3, #12]
 8004270:	697a      	ldr	r2, [r7, #20]
 8004272:	429a      	cmp	r2, r3
 8004274:	d3f2      	bcc.n	800425c <print_object+0xac>
            }
            output_buffer->offset += output_buffer->depth;
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	689a      	ldr	r2, [r3, #8]
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	18d2      	adds	r2, r2, r3
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	609a      	str	r2, [r3, #8]
        }

        /* print key */
        if (!print_string_ptr((unsigned char*)current_item->string, output_buffer))
 8004284:	69bb      	ldr	r3, [r7, #24]
 8004286:	6a1b      	ldr	r3, [r3, #32]
 8004288:	683a      	ldr	r2, [r7, #0]
 800428a:	0011      	movs	r1, r2
 800428c:	0018      	movs	r0, r3
 800428e:	f7ff fc85 	bl	8003b9c <print_string_ptr>
 8004292:	1e03      	subs	r3, r0, #0
 8004294:	d101      	bne.n	800429a <print_object+0xea>
        {
            return false;
 8004296:	2300      	movs	r3, #0
 8004298:	e0b2      	b.n	8004400 <print_object+0x250>
        }
        update_offset(output_buffer);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	0018      	movs	r0, r3
 800429e:	f7ff fa43 	bl	8003728 <update_offset>

        length = (size_t) (output_buffer->format ? 2 : 1);
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	695b      	ldr	r3, [r3, #20]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	d001      	beq.n	80042ae <print_object+0xfe>
 80042aa:	2302      	movs	r3, #2
 80042ac:	e000      	b.n	80042b0 <print_object+0x100>
 80042ae:	2301      	movs	r3, #1
 80042b0:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length);
 80042b2:	68fa      	ldr	r2, [r7, #12]
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	0011      	movs	r1, r2
 80042b8:	0018      	movs	r0, r3
 80042ba:	f7ff f995 	bl	80035e8 <ensure>
 80042be:	0003      	movs	r3, r0
 80042c0:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d101      	bne.n	80042cc <print_object+0x11c>
        {
            return false;
 80042c8:	2300      	movs	r3, #0
 80042ca:	e099      	b.n	8004400 <print_object+0x250>
        }
        *output_pointer++ = ':';
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	1c5a      	adds	r2, r3, #1
 80042d0:	61fa      	str	r2, [r7, #28]
 80042d2:	223a      	movs	r2, #58	; 0x3a
 80042d4:	701a      	strb	r2, [r3, #0]
        if (output_buffer->format)
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	2b00      	cmp	r3, #0
 80042dc:	d004      	beq.n	80042e8 <print_object+0x138>
        {
            *output_pointer++ = '\t';
 80042de:	69fb      	ldr	r3, [r7, #28]
 80042e0:	1c5a      	adds	r2, r3, #1
 80042e2:	61fa      	str	r2, [r7, #28]
 80042e4:	2209      	movs	r2, #9
 80042e6:	701a      	strb	r2, [r3, #0]
        }
        output_buffer->offset += length;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	689a      	ldr	r2, [r3, #8]
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	18d2      	adds	r2, r2, r3
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	609a      	str	r2, [r3, #8]

        /* print value */
        if (!print_value(current_item, output_buffer))
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	69bb      	ldr	r3, [r7, #24]
 80042f8:	0011      	movs	r1, r2
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7ff fe0c 	bl	8003f18 <print_value>
 8004300:	1e03      	subs	r3, r0, #0
 8004302:	d101      	bne.n	8004308 <print_object+0x158>
        {
            return false;
 8004304:	2300      	movs	r3, #0
 8004306:	e07b      	b.n	8004400 <print_object+0x250>
        }
        update_offset(output_buffer);
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	0018      	movs	r0, r3
 800430c:	f7ff fa0c 	bl	8003728 <update_offset>

        /* print comma if not last */
        length = ((size_t)(output_buffer->format ? 1 : 0) + (size_t)(current_item->next ? 1 : 0));
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	695b      	ldr	r3, [r3, #20]
 8004314:	2b00      	cmp	r3, #0
 8004316:	d001      	beq.n	800431c <print_object+0x16c>
 8004318:	2201      	movs	r2, #1
 800431a:	e000      	b.n	800431e <print_object+0x16e>
 800431c:	2200      	movs	r2, #0
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d001      	beq.n	800432a <print_object+0x17a>
 8004326:	2301      	movs	r3, #1
 8004328:	e000      	b.n	800432c <print_object+0x17c>
 800432a:	2300      	movs	r3, #0
 800432c:	18d3      	adds	r3, r2, r3
 800432e:	60fb      	str	r3, [r7, #12]
        output_pointer = ensure(output_buffer, length + 1);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	1c5a      	adds	r2, r3, #1
 8004334:	683b      	ldr	r3, [r7, #0]
 8004336:	0011      	movs	r1, r2
 8004338:	0018      	movs	r0, r3
 800433a:	f7ff f955 	bl	80035e8 <ensure>
 800433e:	0003      	movs	r3, r0
 8004340:	61fb      	str	r3, [r7, #28]
        if (output_pointer == NULL)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d101      	bne.n	800434c <print_object+0x19c>
        {
            return false;
 8004348:	2300      	movs	r3, #0
 800434a:	e059      	b.n	8004400 <print_object+0x250>
        }
        if (current_item->next)
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d004      	beq.n	800435e <print_object+0x1ae>
        {
            *output_pointer++ = ',';
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	1c5a      	adds	r2, r3, #1
 8004358:	61fa      	str	r2, [r7, #28]
 800435a:	222c      	movs	r2, #44	; 0x2c
 800435c:	701a      	strb	r2, [r3, #0]
        }

        if (output_buffer->format)
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	695b      	ldr	r3, [r3, #20]
 8004362:	2b00      	cmp	r3, #0
 8004364:	d004      	beq.n	8004370 <print_object+0x1c0>
        {
            *output_pointer++ = '\n';
 8004366:	69fb      	ldr	r3, [r7, #28]
 8004368:	1c5a      	adds	r2, r3, #1
 800436a:	61fa      	str	r2, [r7, #28]
 800436c:	220a      	movs	r2, #10
 800436e:	701a      	strb	r2, [r3, #0]
        }
        *output_pointer = '\0';
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	2200      	movs	r2, #0
 8004374:	701a      	strb	r2, [r3, #0]
        output_buffer->offset += length;
 8004376:	683b      	ldr	r3, [r7, #0]
 8004378:	689a      	ldr	r2, [r3, #8]
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	18d2      	adds	r2, r2, r3
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	609a      	str	r2, [r3, #8]

        current_item = current_item->next;
 8004382:	69bb      	ldr	r3, [r7, #24]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	61bb      	str	r3, [r7, #24]
    while (current_item)
 8004388:	69bb      	ldr	r3, [r7, #24]
 800438a:	2b00      	cmp	r3, #0
 800438c:	d000      	beq.n	8004390 <print_object+0x1e0>
 800438e:	e750      	b.n	8004232 <print_object+0x82>
    }

    output_pointer = ensure(output_buffer, output_buffer->format ? (output_buffer->depth + 1) : 2);
 8004390:	683b      	ldr	r3, [r7, #0]
 8004392:	695b      	ldr	r3, [r3, #20]
 8004394:	2b00      	cmp	r3, #0
 8004396:	d003      	beq.n	80043a0 <print_object+0x1f0>
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	68db      	ldr	r3, [r3, #12]
 800439c:	3301      	adds	r3, #1
 800439e:	e000      	b.n	80043a2 <print_object+0x1f2>
 80043a0:	2302      	movs	r3, #2
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	0019      	movs	r1, r3
 80043a6:	0010      	movs	r0, r2
 80043a8:	f7ff f91e 	bl	80035e8 <ensure>
 80043ac:	0003      	movs	r3, r0
 80043ae:	61fb      	str	r3, [r7, #28]
    if (output_pointer == NULL)
 80043b0:	69fb      	ldr	r3, [r7, #28]
 80043b2:	2b00      	cmp	r3, #0
 80043b4:	d101      	bne.n	80043ba <print_object+0x20a>
    {
        return false;
 80043b6:	2300      	movs	r3, #0
 80043b8:	e022      	b.n	8004400 <print_object+0x250>
    }
    if (output_buffer->format)
 80043ba:	683b      	ldr	r3, [r7, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d010      	beq.n	80043e4 <print_object+0x234>
    {
        size_t i;
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80043c2:	2300      	movs	r3, #0
 80043c4:	613b      	str	r3, [r7, #16]
 80043c6:	e007      	b.n	80043d8 <print_object+0x228>
        {
            *output_pointer++ = '\t';
 80043c8:	69fb      	ldr	r3, [r7, #28]
 80043ca:	1c5a      	adds	r2, r3, #1
 80043cc:	61fa      	str	r2, [r7, #28]
 80043ce:	2209      	movs	r2, #9
 80043d0:	701a      	strb	r2, [r3, #0]
        for (i = 0; i < (output_buffer->depth - 1); i++)
 80043d2:	693b      	ldr	r3, [r7, #16]
 80043d4:	3301      	adds	r3, #1
 80043d6:	613b      	str	r3, [r7, #16]
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	68db      	ldr	r3, [r3, #12]
 80043dc:	3b01      	subs	r3, #1
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	429a      	cmp	r2, r3
 80043e2:	d3f1      	bcc.n	80043c8 <print_object+0x218>
        }
    }
    *output_pointer++ = '}';
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	61fa      	str	r2, [r7, #28]
 80043ea:	227d      	movs	r2, #125	; 0x7d
 80043ec:	701a      	strb	r2, [r3, #0]
    *output_pointer = '\0';
 80043ee:	69fb      	ldr	r3, [r7, #28]
 80043f0:	2200      	movs	r2, #0
 80043f2:	701a      	strb	r2, [r3, #0]
    output_buffer->depth--;
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	1e5a      	subs	r2, r3, #1
 80043fa:	683b      	ldr	r3, [r7, #0]
 80043fc:	60da      	str	r2, [r3, #12]

    return true;
 80043fe:	2301      	movs	r3, #1
}
 8004400:	0018      	movs	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	b008      	add	sp, #32
 8004406:	bd80      	pop	{r7, pc}

08004408 <suffix_object>:
    return cJSON_GetObjectItem(object, string) ? 1 : 0;
}

/* Utility for array list handling. */
static void suffix_object(cJSON *prev, cJSON *item)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
 8004410:	6039      	str	r1, [r7, #0]
    prev->next = item;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	683a      	ldr	r2, [r7, #0]
 8004416:	601a      	str	r2, [r3, #0]
    item->prev = prev;
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	605a      	str	r2, [r3, #4]
}
 800441e:	46c0      	nop			; (mov r8, r8)
 8004420:	46bd      	mov	sp, r7
 8004422:	b002      	add	sp, #8
 8004424:	bd80      	pop	{r7, pc}

08004426 <add_item_to_array>:
    reference->next = reference->prev = NULL;
    return reference;
}

static cJSON_bool add_item_to_array(cJSON *array, cJSON *item)
{
 8004426:	b580      	push	{r7, lr}
 8004428:	b084      	sub	sp, #16
 800442a:	af00      	add	r7, sp, #0
 800442c:	6078      	str	r0, [r7, #4]
 800442e:	6039      	str	r1, [r7, #0]
    cJSON *child = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	60fb      	str	r3, [r7, #12]

    if ((item == NULL) || (array == NULL) || (array == item))
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	2b00      	cmp	r3, #0
 8004438:	d006      	beq.n	8004448 <add_item_to_array+0x22>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b00      	cmp	r3, #0
 800443e:	d003      	beq.n	8004448 <add_item_to_array+0x22>
 8004440:	687a      	ldr	r2, [r7, #4]
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	429a      	cmp	r2, r3
 8004446:	d101      	bne.n	800444c <add_item_to_array+0x26>
    {
        return false;
 8004448:	2300      	movs	r3, #0
 800444a:	e01f      	b.n	800448c <add_item_to_array+0x66>
    }

    child = array->child;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	60fb      	str	r3, [r7, #12]
    /*
     * To find the last item in array quickly, we use prev in array
     */
    if (child == NULL)
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d109      	bne.n	800446c <add_item_to_array+0x46>
    {
        /* list is empty, start new one */
        array->child = item;
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	683a      	ldr	r2, [r7, #0]
 800445c:	609a      	str	r2, [r3, #8]
        item->prev = item;
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	683a      	ldr	r2, [r7, #0]
 8004462:	605a      	str	r2, [r3, #4]
        item->next = NULL;
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	2200      	movs	r2, #0
 8004468:	601a      	str	r2, [r3, #0]
 800446a:	e00e      	b.n	800448a <add_item_to_array+0x64>
    }
    else
    {
        /* append to the end */
        if (child->prev)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	2b00      	cmp	r3, #0
 8004472:	d00a      	beq.n	800448a <add_item_to_array+0x64>
        {
            suffix_object(child->prev, item);
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	685b      	ldr	r3, [r3, #4]
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	0011      	movs	r1, r2
 800447c:	0018      	movs	r0, r3
 800447e:	f7ff ffc3 	bl	8004408 <suffix_object>
            array->child->prev = item;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	689b      	ldr	r3, [r3, #8]
 8004486:	683a      	ldr	r2, [r7, #0]
 8004488:	605a      	str	r2, [r3, #4]
        }
    }

    return true;
 800448a:	2301      	movs	r3, #1
}
 800448c:	0018      	movs	r0, r3
 800448e:	46bd      	mov	sp, r7
 8004490:	b004      	add	sp, #16
 8004492:	bd80      	pop	{r7, pc}

08004494 <cast_away_const>:
#ifdef __GNUC__
#pragma GCC diagnostic ignored "-Wcast-qual"
#endif
/* helper function to cast away const */
static void* cast_away_const(const void* string)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b082      	sub	sp, #8
 8004498:	af00      	add	r7, sp, #0
 800449a:	6078      	str	r0, [r7, #4]
    return (void*)string;
 800449c:	687b      	ldr	r3, [r7, #4]
}
 800449e:	0018      	movs	r0, r3
 80044a0:	46bd      	mov	sp, r7
 80044a2:	b002      	add	sp, #8
 80044a4:	bd80      	pop	{r7, pc}
	...

080044a8 <add_item_to_object>:
    #pragma GCC diagnostic pop
#endif


static cJSON_bool add_item_to_object(cJSON * const object, const char * const string, cJSON * const item, const internal_hooks * const hooks, const cJSON_bool constant_key)
{
 80044a8:	b580      	push	{r7, lr}
 80044aa:	b086      	sub	sp, #24
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	60f8      	str	r0, [r7, #12]
 80044b0:	60b9      	str	r1, [r7, #8]
 80044b2:	607a      	str	r2, [r7, #4]
 80044b4:	603b      	str	r3, [r7, #0]
    char *new_key = NULL;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]
    int new_type = cJSON_Invalid;
 80044ba:	2300      	movs	r3, #0
 80044bc:	613b      	str	r3, [r7, #16]

    if ((object == NULL) || (string == NULL) || (item == NULL) || (object == item))
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d009      	beq.n	80044d8 <add_item_to_object+0x30>
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d006      	beq.n	80044d8 <add_item_to_object+0x30>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <add_item_to_object+0x30>
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	429a      	cmp	r2, r3
 80044d6:	d101      	bne.n	80044dc <add_item_to_object+0x34>
    {
        return false;
 80044d8:	2300      	movs	r3, #0
 80044da:	e03e      	b.n	800455a <add_item_to_object+0xb2>
    }

    if (constant_key)
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d00c      	beq.n	80044fc <add_item_to_object+0x54>
    {
        new_key = (char*)cast_away_const(string);
 80044e2:	68bb      	ldr	r3, [r7, #8]
 80044e4:	0018      	movs	r0, r3
 80044e6:	f7ff ffd5 	bl	8004494 <cast_away_const>
 80044ea:	0003      	movs	r3, r0
 80044ec:	617b      	str	r3, [r7, #20]
        new_type = item->type | cJSON_StringIsConst;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68db      	ldr	r3, [r3, #12]
 80044f2:	2280      	movs	r2, #128	; 0x80
 80044f4:	0092      	lsls	r2, r2, #2
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]
 80044fa:	e011      	b.n	8004520 <add_item_to_object+0x78>
    }
    else
    {
        new_key = (char*)cJSON_strdup((const unsigned char*)string, hooks);
 80044fc:	683a      	ldr	r2, [r7, #0]
 80044fe:	68bb      	ldr	r3, [r7, #8]
 8004500:	0011      	movs	r1, r2
 8004502:	0018      	movs	r0, r3
 8004504:	f7fe ffdb 	bl	80034be <cJSON_strdup>
 8004508:	0003      	movs	r3, r0
 800450a:	617b      	str	r3, [r7, #20]
        if (new_key == NULL)
 800450c:	697b      	ldr	r3, [r7, #20]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <add_item_to_object+0x6e>
        {
            return false;
 8004512:	2300      	movs	r3, #0
 8004514:	e021      	b.n	800455a <add_item_to_object+0xb2>
        }

        new_type = item->type & ~cJSON_StringIsConst;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	68db      	ldr	r3, [r3, #12]
 800451a:	4a12      	ldr	r2, [pc, #72]	; (8004564 <add_item_to_object+0xbc>)
 800451c:	4013      	ands	r3, r2
 800451e:	613b      	str	r3, [r7, #16]
    }

    if (!(item->type & cJSON_StringIsConst) && (item->string != NULL))
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	68da      	ldr	r2, [r3, #12]
 8004524:	2380      	movs	r3, #128	; 0x80
 8004526:	009b      	lsls	r3, r3, #2
 8004528:	4013      	ands	r3, r2
 800452a:	d109      	bne.n	8004540 <add_item_to_object+0x98>
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6a1b      	ldr	r3, [r3, #32]
 8004530:	2b00      	cmp	r3, #0
 8004532:	d005      	beq.n	8004540 <add_item_to_object+0x98>
    {
        hooks->deallocate(item->string);
 8004534:	683b      	ldr	r3, [r7, #0]
 8004536:	685a      	ldr	r2, [r3, #4]
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6a1b      	ldr	r3, [r3, #32]
 800453c:	0018      	movs	r0, r3
 800453e:	4790      	blx	r2
    }

    item->string = new_key;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	621a      	str	r2, [r3, #32]
    item->type = new_type;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	693a      	ldr	r2, [r7, #16]
 800454a:	60da      	str	r2, [r3, #12]

    return add_item_to_array(object, item);
 800454c:	687a      	ldr	r2, [r7, #4]
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	0011      	movs	r1, r2
 8004552:	0018      	movs	r0, r3
 8004554:	f7ff ff67 	bl	8004426 <add_item_to_array>
 8004558:	0003      	movs	r3, r0
}
 800455a:	0018      	movs	r0, r3
 800455c:	46bd      	mov	sp, r7
 800455e:	b006      	add	sp, #24
 8004560:	bd80      	pop	{r7, pc}
 8004562:	46c0      	nop			; (mov r8, r8)
 8004564:	fffffdff 	.word	0xfffffdff

08004568 <cJSON_AddNumberToObject>:
    cJSON_Delete(bool_item);
    return NULL;
}

CJSON_PUBLIC(cJSON*) cJSON_AddNumberToObject(cJSON * const object, const char * const name, double number)
{
 8004568:	b590      	push	{r4, r7, lr}
 800456a:	b089      	sub	sp, #36	; 0x24
 800456c:	af02      	add	r7, sp, #8
 800456e:	60f8      	str	r0, [r7, #12]
 8004570:	60b9      	str	r1, [r7, #8]
 8004572:	603a      	str	r2, [r7, #0]
 8004574:	607b      	str	r3, [r7, #4]
//   if(number==0)
//	{
//		number=0.00001;
//	}//maulin
    cJSON *number_item = cJSON_CreateNumber(number);
 8004576:	683a      	ldr	r2, [r7, #0]
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	0010      	movs	r0, r2
 800457c:	0019      	movs	r1, r3
 800457e:	f000 f819 	bl	80045b4 <cJSON_CreateNumber>
 8004582:	0003      	movs	r3, r0
 8004584:	617b      	str	r3, [r7, #20]
    if (add_item_to_object(object, name, number_item, &global_hooks, false))
 8004586:	4b0a      	ldr	r3, [pc, #40]	; (80045b0 <cJSON_AddNumberToObject+0x48>)
 8004588:	697a      	ldr	r2, [r7, #20]
 800458a:	68b9      	ldr	r1, [r7, #8]
 800458c:	68f8      	ldr	r0, [r7, #12]
 800458e:	2400      	movs	r4, #0
 8004590:	9400      	str	r4, [sp, #0]
 8004592:	f7ff ff89 	bl	80044a8 <add_item_to_object>
 8004596:	1e03      	subs	r3, r0, #0
 8004598:	d001      	beq.n	800459e <cJSON_AddNumberToObject+0x36>
    {
        return number_item;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	e004      	b.n	80045a8 <cJSON_AddNumberToObject+0x40>
    }

    cJSON_Delete(number_item);
 800459e:	697b      	ldr	r3, [r7, #20]
 80045a0:	0018      	movs	r0, r3
 80045a2:	f7fe ffd1 	bl	8003548 <cJSON_Delete>
    return NULL;
 80045a6:	2300      	movs	r3, #0
}
 80045a8:	0018      	movs	r0, r3
 80045aa:	46bd      	mov	sp, r7
 80045ac:	b007      	add	sp, #28
 80045ae:	bd90      	pop	{r4, r7, pc}
 80045b0:	20000000 	.word	0x20000000

080045b4 <cJSON_CreateNumber>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateNumber(double num)
{
 80045b4:	b580      	push	{r7, lr}
 80045b6:	b084      	sub	sp, #16
 80045b8:	af00      	add	r7, sp, #0
 80045ba:	6038      	str	r0, [r7, #0]
 80045bc:	6079      	str	r1, [r7, #4]
    cJSON *item = cJSON_New_Item(&global_hooks);
 80045be:	4b1b      	ldr	r3, [pc, #108]	; (800462c <cJSON_CreateNumber+0x78>)
 80045c0:	0018      	movs	r0, r3
 80045c2:	f7fe ffa8 	bl	8003516 <cJSON_New_Item>
 80045c6:	0003      	movs	r3, r0
 80045c8:	60fb      	str	r3, [r7, #12]
    if(item)
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d027      	beq.n	8004620 <cJSON_CreateNumber+0x6c>
    {
        item->type = cJSON_Number;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2208      	movs	r2, #8
 80045d4:	60da      	str	r2, [r3, #12]
        item->valuedouble = num;
 80045d6:	68f9      	ldr	r1, [r7, #12]
 80045d8:	683a      	ldr	r2, [r7, #0]
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	618a      	str	r2, [r1, #24]
 80045de:	61cb      	str	r3, [r1, #28]

        /* use saturation in case of overflow */
        if (num >= INT_MAX)
 80045e0:	4a13      	ldr	r2, [pc, #76]	; (8004630 <cJSON_CreateNumber+0x7c>)
 80045e2:	4b14      	ldr	r3, [pc, #80]	; (8004634 <cJSON_CreateNumber+0x80>)
 80045e4:	6838      	ldr	r0, [r7, #0]
 80045e6:	6879      	ldr	r1, [r7, #4]
 80045e8:	f7fb ff54 	bl	8000494 <__aeabi_dcmpge>
 80045ec:	1e03      	subs	r3, r0, #0
 80045ee:	d003      	beq.n	80045f8 <cJSON_CreateNumber+0x44>
        {
            item->valueint = INT_MAX;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	4a11      	ldr	r2, [pc, #68]	; (8004638 <cJSON_CreateNumber+0x84>)
 80045f4:	615a      	str	r2, [r3, #20]
 80045f6:	e013      	b.n	8004620 <cJSON_CreateNumber+0x6c>
        }
        else if (num <= (double)INT_MIN)
 80045f8:	2200      	movs	r2, #0
 80045fa:	4b10      	ldr	r3, [pc, #64]	; (800463c <cJSON_CreateNumber+0x88>)
 80045fc:	6838      	ldr	r0, [r7, #0]
 80045fe:	6879      	ldr	r1, [r7, #4]
 8004600:	f7fb ff34 	bl	800046c <__aeabi_dcmple>
 8004604:	1e03      	subs	r3, r0, #0
 8004606:	d004      	beq.n	8004612 <cJSON_CreateNumber+0x5e>
        {
            item->valueint = INT_MIN;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	2280      	movs	r2, #128	; 0x80
 800460c:	0612      	lsls	r2, r2, #24
 800460e:	615a      	str	r2, [r3, #20]
 8004610:	e006      	b.n	8004620 <cJSON_CreateNumber+0x6c>
        }
        else
        {
            item->valueint = (int)num;
 8004612:	6838      	ldr	r0, [r7, #0]
 8004614:	6879      	ldr	r1, [r7, #4]
 8004616:	f7fd fe75 	bl	8002304 <__aeabi_d2iz>
 800461a:	0002      	movs	r2, r0
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	615a      	str	r2, [r3, #20]
        }
    }

    return item;
 8004620:	68fb      	ldr	r3, [r7, #12]
}
 8004622:	0018      	movs	r0, r3
 8004624:	46bd      	mov	sp, r7
 8004626:	b004      	add	sp, #16
 8004628:	bd80      	pop	{r7, pc}
 800462a:	46c0      	nop			; (mov r8, r8)
 800462c:	20000000 	.word	0x20000000
 8004630:	ffc00000 	.word	0xffc00000
 8004634:	41dfffff 	.word	0x41dfffff
 8004638:	7fffffff 	.word	0x7fffffff
 800463c:	c1e00000 	.word	0xc1e00000

08004640 <cJSON_CreateObject>:

    return item;
}

CJSON_PUBLIC(cJSON *) cJSON_CreateObject(void)
{
 8004640:	b580      	push	{r7, lr}
 8004642:	b082      	sub	sp, #8
 8004644:	af00      	add	r7, sp, #0
    cJSON *item = cJSON_New_Item(&global_hooks);
 8004646:	4b08      	ldr	r3, [pc, #32]	; (8004668 <cJSON_CreateObject+0x28>)
 8004648:	0018      	movs	r0, r3
 800464a:	f7fe ff64 	bl	8003516 <cJSON_New_Item>
 800464e:	0003      	movs	r3, r0
 8004650:	607b      	str	r3, [r7, #4]
    if (item)
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d002      	beq.n	800465e <cJSON_CreateObject+0x1e>
    {
        item->type = cJSON_Object;
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2240      	movs	r2, #64	; 0x40
 800465c:	60da      	str	r2, [r3, #12]
    }

    return item;
 800465e:	687b      	ldr	r3, [r7, #4]
}
 8004660:	0018      	movs	r0, r3
 8004662:	46bd      	mov	sp, r7
 8004664:	b002      	add	sp, #8
 8004666:	bd80      	pop	{r7, pc}
 8004668:	20000000 	.word	0x20000000

0800466c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800466c:	b590      	push	{r4, r7, lr}
 800466e:	b087      	sub	sp, #28
 8004670:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004672:	f000 fc69 	bl	8004f48 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004676:	f000 f81f 	bl	80046b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800467a:	f000 f901 	bl	8004880 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800467e:	f000 f8b1 	bl	80047e4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8004682:	f000 f861 	bl	8004748 <MX_USART1_UART_Init>
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */

  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 256);
 8004686:	1d3b      	adds	r3, r7, #4
 8004688:	4a09      	ldr	r2, [pc, #36]	; (80046b0 <main+0x44>)
 800468a:	ca13      	ldmia	r2!, {r0, r1, r4}
 800468c:	c313      	stmia	r3!, {r0, r1, r4}
 800468e:	ca03      	ldmia	r2!, {r0, r1}
 8004690:	c303      	stmia	r3!, {r0, r1}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8004692:	1d3b      	adds	r3, r7, #4
 8004694:	2100      	movs	r1, #0
 8004696:	0018      	movs	r0, r3
 8004698:	f004 faa5 	bl	8008be6 <osThreadCreate>
 800469c:	0002      	movs	r2, r0
 800469e:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <main+0x48>)
 80046a0:	601a      	str	r2, [r3, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  Modem_Rx_Process_start();
 80046a2:	f7fe fc29 	bl	8002ef8 <Modem_Rx_Process_start>

  Modem_BLE_Start();
 80046a6:	f7fe fb93 	bl	8002dd0 <Modem_BLE_Start>
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80046aa:	f004 fa94 	bl	8008bd6 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80046ae:	e7fe      	b.n	80046ae <main+0x42>
 80046b0:	0800d62c 	.word	0x0800d62c
 80046b4:	200005e8 	.word	0x200005e8

080046b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80046b8:	b590      	push	{r4, r7, lr}
 80046ba:	b093      	sub	sp, #76	; 0x4c
 80046bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80046be:	2410      	movs	r4, #16
 80046c0:	193b      	adds	r3, r7, r4
 80046c2:	0018      	movs	r0, r3
 80046c4:	2338      	movs	r3, #56	; 0x38
 80046c6:	001a      	movs	r2, r3
 80046c8:	2100      	movs	r1, #0
 80046ca:	f006 fc3b 	bl	800af44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80046ce:	003b      	movs	r3, r7
 80046d0:	0018      	movs	r0, r3
 80046d2:	2310      	movs	r3, #16
 80046d4:	001a      	movs	r2, r3
 80046d6:	2100      	movs	r1, #0
 80046d8:	f006 fc34 	bl	800af44 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80046dc:	2380      	movs	r3, #128	; 0x80
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	0018      	movs	r0, r3
 80046e2:	f000 ff9f 	bl	8005624 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80046e6:	193b      	adds	r3, r7, r4
 80046e8:	2202      	movs	r2, #2
 80046ea:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80046ec:	193b      	adds	r3, r7, r4
 80046ee:	2280      	movs	r2, #128	; 0x80
 80046f0:	0052      	lsls	r2, r2, #1
 80046f2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80046f4:	193b      	adds	r3, r7, r4
 80046f6:	2200      	movs	r2, #0
 80046f8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80046fa:	193b      	adds	r3, r7, r4
 80046fc:	2240      	movs	r2, #64	; 0x40
 80046fe:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8004700:	193b      	adds	r3, r7, r4
 8004702:	2200      	movs	r2, #0
 8004704:	61da      	str	r2, [r3, #28]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004706:	193b      	adds	r3, r7, r4
 8004708:	0018      	movs	r0, r3
 800470a:	f000 ffd7 	bl	80056bc <HAL_RCC_OscConfig>
 800470e:	1e03      	subs	r3, r0, #0
 8004710:	d001      	beq.n	8004716 <SystemClock_Config+0x5e>
  {
    Error_Handler();
 8004712:	f000 f963 	bl	80049dc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004716:	003b      	movs	r3, r7
 8004718:	2207      	movs	r2, #7
 800471a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800471c:	003b      	movs	r3, r7
 800471e:	2200      	movs	r2, #0
 8004720:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004722:	003b      	movs	r3, r7
 8004724:	2200      	movs	r2, #0
 8004726:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8004728:	003b      	movs	r3, r7
 800472a:	2200      	movs	r2, #0
 800472c:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800472e:	003b      	movs	r3, r7
 8004730:	2100      	movs	r1, #0
 8004732:	0018      	movs	r0, r3
 8004734:	f001 fadc 	bl	8005cf0 <HAL_RCC_ClockConfig>
 8004738:	1e03      	subs	r3, r0, #0
 800473a:	d001      	beq.n	8004740 <SystemClock_Config+0x88>
  {
    Error_Handler();
 800473c:	f000 f94e 	bl	80049dc <Error_Handler>
  }
}
 8004740:	46c0      	nop			; (mov r8, r8)
 8004742:	46bd      	mov	sp, r7
 8004744:	b013      	add	sp, #76	; 0x4c
 8004746:	bd90      	pop	{r4, r7, pc}

08004748 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004748:	b580      	push	{r7, lr}
 800474a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800474c:	4b23      	ldr	r3, [pc, #140]	; (80047dc <MX_USART1_UART_Init+0x94>)
 800474e:	4a24      	ldr	r2, [pc, #144]	; (80047e0 <MX_USART1_UART_Init+0x98>)
 8004750:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004752:	4b22      	ldr	r3, [pc, #136]	; (80047dc <MX_USART1_UART_Init+0x94>)
 8004754:	22e1      	movs	r2, #225	; 0xe1
 8004756:	0252      	lsls	r2, r2, #9
 8004758:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800475a:	4b20      	ldr	r3, [pc, #128]	; (80047dc <MX_USART1_UART_Init+0x94>)
 800475c:	2200      	movs	r2, #0
 800475e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004760:	4b1e      	ldr	r3, [pc, #120]	; (80047dc <MX_USART1_UART_Init+0x94>)
 8004762:	2200      	movs	r2, #0
 8004764:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004766:	4b1d      	ldr	r3, [pc, #116]	; (80047dc <MX_USART1_UART_Init+0x94>)
 8004768:	2200      	movs	r2, #0
 800476a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800476c:	4b1b      	ldr	r3, [pc, #108]	; (80047dc <MX_USART1_UART_Init+0x94>)
 800476e:	220c      	movs	r2, #12
 8004770:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004772:	4b1a      	ldr	r3, [pc, #104]	; (80047dc <MX_USART1_UART_Init+0x94>)
 8004774:	2200      	movs	r2, #0
 8004776:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004778:	4b18      	ldr	r3, [pc, #96]	; (80047dc <MX_USART1_UART_Init+0x94>)
 800477a:	2200      	movs	r2, #0
 800477c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800477e:	4b17      	ldr	r3, [pc, #92]	; (80047dc <MX_USART1_UART_Init+0x94>)
 8004780:	2200      	movs	r2, #0
 8004782:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004784:	4b15      	ldr	r3, [pc, #84]	; (80047dc <MX_USART1_UART_Init+0x94>)
 8004786:	2200      	movs	r2, #0
 8004788:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800478a:	4b14      	ldr	r3, [pc, #80]	; (80047dc <MX_USART1_UART_Init+0x94>)
 800478c:	2200      	movs	r2, #0
 800478e:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004790:	4b12      	ldr	r3, [pc, #72]	; (80047dc <MX_USART1_UART_Init+0x94>)
 8004792:	0018      	movs	r0, r3
 8004794:	f002 f8c2 	bl	800691c <HAL_UART_Init>
 8004798:	1e03      	subs	r3, r0, #0
 800479a:	d001      	beq.n	80047a0 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 800479c:	f000 f91e 	bl	80049dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047a0:	4b0e      	ldr	r3, [pc, #56]	; (80047dc <MX_USART1_UART_Init+0x94>)
 80047a2:	2100      	movs	r1, #0
 80047a4:	0018      	movs	r0, r3
 80047a6:	f004 f8b9 	bl	800891c <HAL_UARTEx_SetTxFifoThreshold>
 80047aa:	1e03      	subs	r3, r0, #0
 80047ac:	d001      	beq.n	80047b2 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80047ae:	f000 f915 	bl	80049dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80047b2:	4b0a      	ldr	r3, [pc, #40]	; (80047dc <MX_USART1_UART_Init+0x94>)
 80047b4:	2100      	movs	r1, #0
 80047b6:	0018      	movs	r0, r3
 80047b8:	f004 f8f0 	bl	800899c <HAL_UARTEx_SetRxFifoThreshold>
 80047bc:	1e03      	subs	r3, r0, #0
 80047be:	d001      	beq.n	80047c4 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80047c0:	f000 f90c 	bl	80049dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80047c4:	4b05      	ldr	r3, [pc, #20]	; (80047dc <MX_USART1_UART_Init+0x94>)
 80047c6:	0018      	movs	r0, r3
 80047c8:	f004 f86e 	bl	80088a8 <HAL_UARTEx_DisableFifoMode>
 80047cc:	1e03      	subs	r3, r0, #0
 80047ce:	d001      	beq.n	80047d4 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80047d0:	f000 f904 	bl	80049dc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80047d4:	46c0      	nop			; (mov r8, r8)
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
 80047da:	46c0      	nop			; (mov r8, r8)
 80047dc:	200004c0 	.word	0x200004c0
 80047e0:	40013800 	.word	0x40013800

080047e4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80047e4:	b580      	push	{r7, lr}
 80047e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80047e8:	4b23      	ldr	r3, [pc, #140]	; (8004878 <MX_USART2_UART_Init+0x94>)
 80047ea:	4a24      	ldr	r2, [pc, #144]	; (800487c <MX_USART2_UART_Init+0x98>)
 80047ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80047ee:	4b22      	ldr	r3, [pc, #136]	; (8004878 <MX_USART2_UART_Init+0x94>)
 80047f0:	22e1      	movs	r2, #225	; 0xe1
 80047f2:	0252      	lsls	r2, r2, #9
 80047f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80047f6:	4b20      	ldr	r3, [pc, #128]	; (8004878 <MX_USART2_UART_Init+0x94>)
 80047f8:	2200      	movs	r2, #0
 80047fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80047fc:	4b1e      	ldr	r3, [pc, #120]	; (8004878 <MX_USART2_UART_Init+0x94>)
 80047fe:	2200      	movs	r2, #0
 8004800:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8004802:	4b1d      	ldr	r3, [pc, #116]	; (8004878 <MX_USART2_UART_Init+0x94>)
 8004804:	2200      	movs	r2, #0
 8004806:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8004808:	4b1b      	ldr	r3, [pc, #108]	; (8004878 <MX_USART2_UART_Init+0x94>)
 800480a:	220c      	movs	r2, #12
 800480c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800480e:	4b1a      	ldr	r3, [pc, #104]	; (8004878 <MX_USART2_UART_Init+0x94>)
 8004810:	2200      	movs	r2, #0
 8004812:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8004814:	4b18      	ldr	r3, [pc, #96]	; (8004878 <MX_USART2_UART_Init+0x94>)
 8004816:	2200      	movs	r2, #0
 8004818:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800481a:	4b17      	ldr	r3, [pc, #92]	; (8004878 <MX_USART2_UART_Init+0x94>)
 800481c:	2200      	movs	r2, #0
 800481e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004820:	4b15      	ldr	r3, [pc, #84]	; (8004878 <MX_USART2_UART_Init+0x94>)
 8004822:	2200      	movs	r2, #0
 8004824:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004826:	4b14      	ldr	r3, [pc, #80]	; (8004878 <MX_USART2_UART_Init+0x94>)
 8004828:	2200      	movs	r2, #0
 800482a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800482c:	4b12      	ldr	r3, [pc, #72]	; (8004878 <MX_USART2_UART_Init+0x94>)
 800482e:	0018      	movs	r0, r3
 8004830:	f002 f874 	bl	800691c <HAL_UART_Init>
 8004834:	1e03      	subs	r3, r0, #0
 8004836:	d001      	beq.n	800483c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8004838:	f000 f8d0 	bl	80049dc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800483c:	4b0e      	ldr	r3, [pc, #56]	; (8004878 <MX_USART2_UART_Init+0x94>)
 800483e:	2100      	movs	r1, #0
 8004840:	0018      	movs	r0, r3
 8004842:	f004 f86b 	bl	800891c <HAL_UARTEx_SetTxFifoThreshold>
 8004846:	1e03      	subs	r3, r0, #0
 8004848:	d001      	beq.n	800484e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800484a:	f000 f8c7 	bl	80049dc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800484e:	4b0a      	ldr	r3, [pc, #40]	; (8004878 <MX_USART2_UART_Init+0x94>)
 8004850:	2100      	movs	r1, #0
 8004852:	0018      	movs	r0, r3
 8004854:	f004 f8a2 	bl	800899c <HAL_UARTEx_SetRxFifoThreshold>
 8004858:	1e03      	subs	r3, r0, #0
 800485a:	d001      	beq.n	8004860 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800485c:	f000 f8be 	bl	80049dc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8004860:	4b05      	ldr	r3, [pc, #20]	; (8004878 <MX_USART2_UART_Init+0x94>)
 8004862:	0018      	movs	r0, r3
 8004864:	f004 f820 	bl	80088a8 <HAL_UARTEx_DisableFifoMode>
 8004868:	1e03      	subs	r3, r0, #0
 800486a:	d001      	beq.n	8004870 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800486c:	f000 f8b6 	bl	80049dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8004870:	46c0      	nop			; (mov r8, r8)
 8004872:	46bd      	mov	sp, r7
 8004874:	bd80      	pop	{r7, pc}
 8004876:	46c0      	nop			; (mov r8, r8)
 8004878:	20000554 	.word	0x20000554
 800487c:	40004400 	.word	0x40004400

08004880 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004880:	b590      	push	{r4, r7, lr}
 8004882:	b089      	sub	sp, #36	; 0x24
 8004884:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004886:	240c      	movs	r4, #12
 8004888:	193b      	adds	r3, r7, r4
 800488a:	0018      	movs	r0, r3
 800488c:	2314      	movs	r3, #20
 800488e:	001a      	movs	r2, r3
 8004890:	2100      	movs	r1, #0
 8004892:	f006 fb57 	bl	800af44 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004896:	4b20      	ldr	r3, [pc, #128]	; (8004918 <MX_GPIO_Init+0x98>)
 8004898:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800489a:	4b1f      	ldr	r3, [pc, #124]	; (8004918 <MX_GPIO_Init+0x98>)
 800489c:	2104      	movs	r1, #4
 800489e:	430a      	orrs	r2, r1
 80048a0:	635a      	str	r2, [r3, #52]	; 0x34
 80048a2:	4b1d      	ldr	r3, [pc, #116]	; (8004918 <MX_GPIO_Init+0x98>)
 80048a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048a6:	2204      	movs	r2, #4
 80048a8:	4013      	ands	r3, r2
 80048aa:	60bb      	str	r3, [r7, #8]
 80048ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80048ae:	4b1a      	ldr	r3, [pc, #104]	; (8004918 <MX_GPIO_Init+0x98>)
 80048b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048b2:	4b19      	ldr	r3, [pc, #100]	; (8004918 <MX_GPIO_Init+0x98>)
 80048b4:	2120      	movs	r1, #32
 80048b6:	430a      	orrs	r2, r1
 80048b8:	635a      	str	r2, [r3, #52]	; 0x34
 80048ba:	4b17      	ldr	r3, [pc, #92]	; (8004918 <MX_GPIO_Init+0x98>)
 80048bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048be:	2220      	movs	r2, #32
 80048c0:	4013      	ands	r3, r2
 80048c2:	607b      	str	r3, [r7, #4]
 80048c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80048c6:	4b14      	ldr	r3, [pc, #80]	; (8004918 <MX_GPIO_Init+0x98>)
 80048c8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80048ca:	4b13      	ldr	r3, [pc, #76]	; (8004918 <MX_GPIO_Init+0x98>)
 80048cc:	2101      	movs	r1, #1
 80048ce:	430a      	orrs	r2, r1
 80048d0:	635a      	str	r2, [r3, #52]	; 0x34
 80048d2:	4b11      	ldr	r3, [pc, #68]	; (8004918 <MX_GPIO_Init+0x98>)
 80048d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80048d6:	2201      	movs	r2, #1
 80048d8:	4013      	ands	r3, r2
 80048da:	603b      	str	r3, [r7, #0]
 80048dc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80048de:	193b      	adds	r3, r7, r4
 80048e0:	2280      	movs	r2, #128	; 0x80
 80048e2:	0192      	lsls	r2, r2, #6
 80048e4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80048e6:	193b      	adds	r3, r7, r4
 80048e8:	2288      	movs	r2, #136	; 0x88
 80048ea:	0352      	lsls	r2, r2, #13
 80048ec:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80048ee:	193b      	adds	r3, r7, r4
 80048f0:	2200      	movs	r2, #0
 80048f2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80048f4:	193b      	adds	r3, r7, r4
 80048f6:	4a09      	ldr	r2, [pc, #36]	; (800491c <MX_GPIO_Init+0x9c>)
 80048f8:	0019      	movs	r1, r3
 80048fa:	0010      	movs	r0, r2
 80048fc:	f000 fcf0 	bl	80052e0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI4_15_IRQn, 3, 0);
 8004900:	2200      	movs	r2, #0
 8004902:	2103      	movs	r1, #3
 8004904:	2007      	movs	r0, #7
 8004906:	f000 fbf9 	bl	80050fc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_15_IRQn);
 800490a:	2007      	movs	r0, #7
 800490c:	f000 fc0b 	bl	8005126 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8004910:	46c0      	nop			; (mov r8, r8)
 8004912:	46bd      	mov	sp, r7
 8004914:	b009      	add	sp, #36	; 0x24
 8004916:	bd90      	pop	{r4, r7, pc}
 8004918:	40021000 	.word	0x40021000
 800491c:	50000800 	.word	0x50000800

08004920 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8004920:	b580      	push	{r7, lr}
 8004922:	b082      	sub	sp, #8
 8004924:	af00      	add	r7, sp, #0
 8004926:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  HAL_UARTEx_ReceiveToIdle_IT(&huart1,(uint8_t*)EC200u_Rx_Buff, sizeof(EC200u_Rx_Buff));
 8004928:	4920      	ldr	r1, [pc, #128]	; (80049ac <StartDefaultTask+0x8c>)
 800492a:	4b21      	ldr	r3, [pc, #132]	; (80049b0 <StartDefaultTask+0x90>)
 800492c:	2264      	movs	r2, #100	; 0x64
 800492e:	0018      	movs	r0, r3
 8004930:	f004 f876 	bl	8008a20 <HAL_UARTEx_ReceiveToIdle_IT>

//  osDelay(1000);

  modem_initiate_cmd(MODEM_AT_CHECK);
 8004934:	2000      	movs	r0, #0
 8004936:	f7fd fdcf 	bl	80024d8 <modem_initiate_cmd>
  osDelay(300);
 800493a:	2396      	movs	r3, #150	; 0x96
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	0018      	movs	r0, r3
 8004940:	f004 f979 	bl	8008c36 <osDelay>

  modem_initiate_cmd(MODEM_DISABLE_ECHO);
 8004944:	2003      	movs	r0, #3
 8004946:	f7fd fdc7 	bl	80024d8 <modem_initiate_cmd>
  osDelay(300);
 800494a:	2396      	movs	r3, #150	; 0x96
 800494c:	005b      	lsls	r3, r3, #1
 800494e:	0018      	movs	r0, r3
 8004950:	f004 f971 	bl	8008c36 <osDelay>

  get_modem_info();
 8004954:	f7fd ff88 	bl	8002868 <get_modem_info>

  modem_set_sim_configurations();
 8004958:	f7fd ffa3 	bl	80028a2 <modem_set_sim_configurations>

  modem_mqtt_init();
 800495c:	f7fd ffdb 	bl	8002916 <modem_mqtt_init>

  #ifdef GPS_EN

	modem_initiate_cmd(MODEM_GPS_TURN_OFF);
 8004960:	2029      	movs	r0, #41	; 0x29
 8004962:	f7fd fdb9 	bl	80024d8 <modem_initiate_cmd>
	osDelay(1000);
 8004966:	23fa      	movs	r3, #250	; 0xfa
 8004968:	009b      	lsls	r3, r3, #2
 800496a:	0018      	movs	r0, r3
 800496c:	f004 f963 	bl	8008c36 <osDelay>

	modem_initiate_cmd(MODEM_GPS_TURN_ON);
 8004970:	2027      	movs	r0, #39	; 0x27
 8004972:	f7fd fdb1 	bl	80024d8 <modem_initiate_cmd>
	osDelay(1000);
 8004976:	23fa      	movs	r3, #250	; 0xfa
 8004978:	009b      	lsls	r3, r3, #2
 800497a:	0018      	movs	r0, r3
 800497c:	f004 f95b 	bl	8008c36 <osDelay>
  for(;;)
  {
	//HAL_UART_Transmit(&huart1,(uint8_t*)"AT\r\n",strlen("AT\r\n"), 1000);
	//HAL_UART_Transmit(&huart2,(uint8_t*)"Hello\r\n",strlen("Hello\r\n"), 1000);
	//sprintf(MQTT_PUB_Buff,"Msg_count:%d",Msg_cnt++);
	Msg_cnt++;
 8004980:	4b0c      	ldr	r3, [pc, #48]	; (80049b4 <StartDefaultTask+0x94>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	1c5a      	adds	r2, r3, #1
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <StartDefaultTask+0x94>)
 8004988:	601a      	str	r2, [r3, #0]
	modem_mqtt_publish();
 800498a:	f7fd ffe9 	bl	8002960 <modem_mqtt_publish>
	#ifdef GPS_EN

	modem_initiate_cmd(MODEM_GPS_GET_CURR_LOCATION);
 800498e:	2028      	movs	r0, #40	; 0x28
 8004990:	f7fd fda2 	bl	80024d8 <modem_initiate_cmd>
	osDelay(500);
 8004994:	23fa      	movs	r3, #250	; 0xfa
 8004996:	005b      	lsls	r3, r3, #1
 8004998:	0018      	movs	r0, r3
 800499a:	f004 f94c 	bl	8008c36 <osDelay>

	#endif
    osDelay(500);
 800499e:	23fa      	movs	r3, #250	; 0xfa
 80049a0:	005b      	lsls	r3, r3, #1
 80049a2:	0018      	movs	r0, r3
 80049a4:	f004 f947 	bl	8008c36 <osDelay>
	Msg_cnt++;
 80049a8:	e7ea      	b.n	8004980 <StartDefaultTask+0x60>
 80049aa:	46c0      	nop			; (mov r8, r8)
 80049ac:	200005f4 	.word	0x200005f4
 80049b0:	200004c0 	.word	0x200004c0
 80049b4:	20000658 	.word	0x20000658

080049b8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80049b8:	b580      	push	{r7, lr}
 80049ba:	b082      	sub	sp, #8
 80049bc:	af00      	add	r7, sp, #0
 80049be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM17) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	4a04      	ldr	r2, [pc, #16]	; (80049d8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d101      	bne.n	80049ce <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80049ca:	f000 fadd 	bl	8004f88 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80049ce:	46c0      	nop			; (mov r8, r8)
 80049d0:	46bd      	mov	sp, r7
 80049d2:	b002      	add	sp, #8
 80049d4:	bd80      	pop	{r7, pc}
 80049d6:	46c0      	nop			; (mov r8, r8)
 80049d8:	40014800 	.word	0x40014800

080049dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80049e0:	b672      	cpsid	i
}
 80049e2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80049e4:	e7fe      	b.n	80049e4 <Error_Handler+0x8>
	...

080049e8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80049ee:	4b15      	ldr	r3, [pc, #84]	; (8004a44 <HAL_MspInit+0x5c>)
 80049f0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80049f2:	4b14      	ldr	r3, [pc, #80]	; (8004a44 <HAL_MspInit+0x5c>)
 80049f4:	2101      	movs	r1, #1
 80049f6:	430a      	orrs	r2, r1
 80049f8:	641a      	str	r2, [r3, #64]	; 0x40
 80049fa:	4b12      	ldr	r3, [pc, #72]	; (8004a44 <HAL_MspInit+0x5c>)
 80049fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049fe:	2201      	movs	r2, #1
 8004a00:	4013      	ands	r3, r2
 8004a02:	607b      	str	r3, [r7, #4]
 8004a04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004a06:	4b0f      	ldr	r3, [pc, #60]	; (8004a44 <HAL_MspInit+0x5c>)
 8004a08:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	; (8004a44 <HAL_MspInit+0x5c>)
 8004a0c:	2180      	movs	r1, #128	; 0x80
 8004a0e:	0549      	lsls	r1, r1, #21
 8004a10:	430a      	orrs	r2, r1
 8004a12:	63da      	str	r2, [r3, #60]	; 0x3c
 8004a14:	4b0b      	ldr	r3, [pc, #44]	; (8004a44 <HAL_MspInit+0x5c>)
 8004a16:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a18:	2380      	movs	r3, #128	; 0x80
 8004a1a:	055b      	lsls	r3, r3, #21
 8004a1c:	4013      	ands	r3, r2
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 3, 0);
 8004a22:	2302      	movs	r3, #2
 8004a24:	425b      	negs	r3, r3
 8004a26:	2200      	movs	r2, #0
 8004a28:	2103      	movs	r1, #3
 8004a2a:	0018      	movs	r0, r3
 8004a2c:	f000 fb66 	bl	80050fc <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8004a30:	23c0      	movs	r3, #192	; 0xc0
 8004a32:	00db      	lsls	r3, r3, #3
 8004a34:	0018      	movs	r0, r3
 8004a36:	f000 fac3 	bl	8004fc0 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004a3a:	46c0      	nop			; (mov r8, r8)
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	b002      	add	sp, #8
 8004a40:	bd80      	pop	{r7, pc}
 8004a42:	46c0      	nop			; (mov r8, r8)
 8004a44:	40021000 	.word	0x40021000

08004a48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004a48:	b590      	push	{r4, r7, lr}
 8004a4a:	b099      	sub	sp, #100	; 0x64
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a50:	234c      	movs	r3, #76	; 0x4c
 8004a52:	18fb      	adds	r3, r7, r3
 8004a54:	0018      	movs	r0, r3
 8004a56:	2314      	movs	r3, #20
 8004a58:	001a      	movs	r2, r3
 8004a5a:	2100      	movs	r1, #0
 8004a5c:	f006 fa72 	bl	800af44 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004a60:	2418      	movs	r4, #24
 8004a62:	193b      	adds	r3, r7, r4
 8004a64:	0018      	movs	r0, r3
 8004a66:	2334      	movs	r3, #52	; 0x34
 8004a68:	001a      	movs	r2, r3
 8004a6a:	2100      	movs	r1, #0
 8004a6c:	f006 fa6a 	bl	800af44 <memset>
  if(huart->Instance==USART1)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a4d      	ldr	r2, [pc, #308]	; (8004bac <HAL_UART_MspInit+0x164>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d146      	bne.n	8004b08 <HAL_UART_MspInit+0xc0>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8004a7a:	193b      	adds	r3, r7, r4
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK1;
 8004a80:	193b      	adds	r3, r7, r4
 8004a82:	2200      	movs	r2, #0
 8004a84:	605a      	str	r2, [r3, #4]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004a86:	193b      	adds	r3, r7, r4
 8004a88:	0018      	movs	r0, r3
 8004a8a:	f001 fb05 	bl	8006098 <HAL_RCCEx_PeriphCLKConfig>
 8004a8e:	1e03      	subs	r3, r0, #0
 8004a90:	d001      	beq.n	8004a96 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8004a92:	f7ff ffa3 	bl	80049dc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004a96:	4b46      	ldr	r3, [pc, #280]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004a98:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a9a:	4b45      	ldr	r3, [pc, #276]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004a9c:	2180      	movs	r1, #128	; 0x80
 8004a9e:	01c9      	lsls	r1, r1, #7
 8004aa0:	430a      	orrs	r2, r1
 8004aa2:	641a      	str	r2, [r3, #64]	; 0x40
 8004aa4:	4b42      	ldr	r3, [pc, #264]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004aa6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa8:	2380      	movs	r3, #128	; 0x80
 8004aaa:	01db      	lsls	r3, r3, #7
 8004aac:	4013      	ands	r3, r2
 8004aae:	617b      	str	r3, [r7, #20]
 8004ab0:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004ab2:	4b3f      	ldr	r3, [pc, #252]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004ab4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004ab6:	4b3e      	ldr	r3, [pc, #248]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004ab8:	2104      	movs	r1, #4
 8004aba:	430a      	orrs	r2, r1
 8004abc:	635a      	str	r2, [r3, #52]	; 0x34
 8004abe:	4b3c      	ldr	r3, [pc, #240]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004ac0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ac2:	2204      	movs	r2, #4
 8004ac4:	4013      	ands	r3, r2
 8004ac6:	613b      	str	r3, [r7, #16]
 8004ac8:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PC4     ------> USART1_TX
    PC5     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8004aca:	214c      	movs	r1, #76	; 0x4c
 8004acc:	187b      	adds	r3, r7, r1
 8004ace:	2230      	movs	r2, #48	; 0x30
 8004ad0:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ad2:	187b      	adds	r3, r7, r1
 8004ad4:	2202      	movs	r2, #2
 8004ad6:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ad8:	187b      	adds	r3, r7, r1
 8004ada:	2200      	movs	r2, #0
 8004adc:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004ade:	187b      	adds	r3, r7, r1
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART1;
 8004ae4:	187b      	adds	r3, r7, r1
 8004ae6:	2201      	movs	r2, #1
 8004ae8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8004aea:	187b      	adds	r3, r7, r1
 8004aec:	4a31      	ldr	r2, [pc, #196]	; (8004bb4 <HAL_UART_MspInit+0x16c>)
 8004aee:	0019      	movs	r1, r3
 8004af0:	0010      	movs	r0, r2
 8004af2:	f000 fbf5 	bl	80052e0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 3, 0);
 8004af6:	2200      	movs	r2, #0
 8004af8:	2103      	movs	r1, #3
 8004afa:	201b      	movs	r0, #27
 8004afc:	f000 fafe 	bl	80050fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8004b00:	201b      	movs	r0, #27
 8004b02:	f000 fb10 	bl	8005126 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004b06:	e04c      	b.n	8004ba2 <HAL_UART_MspInit+0x15a>
  else if(huart->Instance==USART2)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4a2a      	ldr	r2, [pc, #168]	; (8004bb8 <HAL_UART_MspInit+0x170>)
 8004b0e:	4293      	cmp	r3, r2
 8004b10:	d147      	bne.n	8004ba2 <HAL_UART_MspInit+0x15a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004b12:	2118      	movs	r1, #24
 8004b14:	187b      	adds	r3, r7, r1
 8004b16:	2202      	movs	r2, #2
 8004b18:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004b1a:	187b      	adds	r3, r7, r1
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b20:	187b      	adds	r3, r7, r1
 8004b22:	0018      	movs	r0, r3
 8004b24:	f001 fab8 	bl	8006098 <HAL_RCCEx_PeriphCLKConfig>
 8004b28:	1e03      	subs	r3, r0, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_UART_MspInit+0xe8>
      Error_Handler();
 8004b2c:	f7ff ff56 	bl	80049dc <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8004b30:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004b32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b34:	4b1e      	ldr	r3, [pc, #120]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004b36:	2180      	movs	r1, #128	; 0x80
 8004b38:	0289      	lsls	r1, r1, #10
 8004b3a:	430a      	orrs	r2, r1
 8004b3c:	63da      	str	r2, [r3, #60]	; 0x3c
 8004b3e:	4b1c      	ldr	r3, [pc, #112]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004b40:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b42:	2380      	movs	r3, #128	; 0x80
 8004b44:	029b      	lsls	r3, r3, #10
 8004b46:	4013      	ands	r3, r2
 8004b48:	60fb      	str	r3, [r7, #12]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b4c:	4b18      	ldr	r3, [pc, #96]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004b4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004b50:	4b17      	ldr	r3, [pc, #92]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004b52:	2101      	movs	r1, #1
 8004b54:	430a      	orrs	r2, r1
 8004b56:	635a      	str	r2, [r3, #52]	; 0x34
 8004b58:	4b15      	ldr	r3, [pc, #84]	; (8004bb0 <HAL_UART_MspInit+0x168>)
 8004b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004b5c:	2201      	movs	r2, #1
 8004b5e:	4013      	ands	r3, r2
 8004b60:	60bb      	str	r3, [r7, #8]
 8004b62:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8004b64:	214c      	movs	r1, #76	; 0x4c
 8004b66:	187b      	adds	r3, r7, r1
 8004b68:	220c      	movs	r2, #12
 8004b6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b6c:	187b      	adds	r3, r7, r1
 8004b6e:	2202      	movs	r2, #2
 8004b70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b72:	187b      	adds	r3, r7, r1
 8004b74:	2200      	movs	r2, #0
 8004b76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004b78:	187b      	adds	r3, r7, r1
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8004b7e:	187b      	adds	r3, r7, r1
 8004b80:	2201      	movs	r2, #1
 8004b82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b84:	187a      	adds	r2, r7, r1
 8004b86:	23a0      	movs	r3, #160	; 0xa0
 8004b88:	05db      	lsls	r3, r3, #23
 8004b8a:	0011      	movs	r1, r2
 8004b8c:	0018      	movs	r0, r3
 8004b8e:	f000 fba7 	bl	80052e0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 3, 0);
 8004b92:	2200      	movs	r2, #0
 8004b94:	2103      	movs	r1, #3
 8004b96:	201c      	movs	r0, #28
 8004b98:	f000 fab0 	bl	80050fc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8004b9c:	201c      	movs	r0, #28
 8004b9e:	f000 fac2 	bl	8005126 <HAL_NVIC_EnableIRQ>
}
 8004ba2:	46c0      	nop			; (mov r8, r8)
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	b019      	add	sp, #100	; 0x64
 8004ba8:	bd90      	pop	{r4, r7, pc}
 8004baa:	46c0      	nop			; (mov r8, r8)
 8004bac:	40013800 	.word	0x40013800
 8004bb0:	40021000 	.word	0x40021000
 8004bb4:	50000800 	.word	0x50000800
 8004bb8:	40004400 	.word	0x40004400

08004bbc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bbc:	b5b0      	push	{r4, r5, r7, lr}
 8004bbe:	b08c      	sub	sp, #48	; 0x30
 8004bc0:	af00      	add	r7, sp, #0
 8004bc2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004bc4:	232b      	movs	r3, #43	; 0x2b
 8004bc6:	18fb      	adds	r3, r7, r3
 8004bc8:	2200      	movs	r2, #0
 8004bca:	701a      	strb	r2, [r3, #0]

  /* Enable TIM17 clock */
  __HAL_RCC_TIM17_CLK_ENABLE();
 8004bcc:	4b38      	ldr	r3, [pc, #224]	; (8004cb0 <HAL_InitTick+0xf4>)
 8004bce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bd0:	4b37      	ldr	r3, [pc, #220]	; (8004cb0 <HAL_InitTick+0xf4>)
 8004bd2:	2180      	movs	r1, #128	; 0x80
 8004bd4:	02c9      	lsls	r1, r1, #11
 8004bd6:	430a      	orrs	r2, r1
 8004bd8:	641a      	str	r2, [r3, #64]	; 0x40
 8004bda:	4b35      	ldr	r3, [pc, #212]	; (8004cb0 <HAL_InitTick+0xf4>)
 8004bdc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004bde:	2380      	movs	r3, #128	; 0x80
 8004be0:	02db      	lsls	r3, r3, #11
 8004be2:	4013      	ands	r3, r2
 8004be4:	60bb      	str	r3, [r7, #8]
 8004be6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8004be8:	230c      	movs	r3, #12
 8004bea:	18fa      	adds	r2, r7, r3
 8004bec:	2410      	movs	r4, #16
 8004bee:	193b      	adds	r3, r7, r4
 8004bf0:	0011      	movs	r1, r2
 8004bf2:	0018      	movs	r0, r3
 8004bf4:	f001 fa26 	bl	8006044 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8004bf8:	193b      	adds	r3, r7, r4
 8004bfa:	68db      	ldr	r3, [r3, #12]
 8004bfc:	627b      	str	r3, [r7, #36]	; 0x24
  /* Compute TIM17 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8004bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d104      	bne.n	8004c0e <HAL_InitTick+0x52>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8004c04:	f001 fa08 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 8004c08:	0003      	movs	r3, r0
 8004c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c0c:	e004      	b.n	8004c18 <HAL_InitTick+0x5c>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8004c0e:	f001 fa03 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 8004c12:	0003      	movs	r3, r0
 8004c14:	005b      	lsls	r3, r3, #1
 8004c16:	62fb      	str	r3, [r7, #44]	; 0x2c
  }

  /* Compute the prescaler value to have TIM17 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8004c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c1a:	4926      	ldr	r1, [pc, #152]	; (8004cb4 <HAL_InitTick+0xf8>)
 8004c1c:	0018      	movs	r0, r3
 8004c1e:	f7fb fa8f 	bl	8000140 <__udivsi3>
 8004c22:	0003      	movs	r3, r0
 8004c24:	3b01      	subs	r3, #1
 8004c26:	623b      	str	r3, [r7, #32]

  /* Initialize TIM17 */
  htim17.Instance = TIM17;
 8004c28:	4b23      	ldr	r3, [pc, #140]	; (8004cb8 <HAL_InitTick+0xfc>)
 8004c2a:	4a24      	ldr	r2, [pc, #144]	; (8004cbc <HAL_InitTick+0x100>)
 8004c2c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM17CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim17.Init.Period = (1000000U / 1000U) - 1U;
 8004c2e:	4b22      	ldr	r3, [pc, #136]	; (8004cb8 <HAL_InitTick+0xfc>)
 8004c30:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <HAL_InitTick+0x104>)
 8004c32:	60da      	str	r2, [r3, #12]
  htim17.Init.Prescaler = uwPrescalerValue;
 8004c34:	4b20      	ldr	r3, [pc, #128]	; (8004cb8 <HAL_InitTick+0xfc>)
 8004c36:	6a3a      	ldr	r2, [r7, #32]
 8004c38:	605a      	str	r2, [r3, #4]
  htim17.Init.ClockDivision = 0;
 8004c3a:	4b1f      	ldr	r3, [pc, #124]	; (8004cb8 <HAL_InitTick+0xfc>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	611a      	str	r2, [r3, #16]
  htim17.Init.CounterMode = TIM_COUNTERMODE_UP;
 8004c40:	4b1d      	ldr	r3, [pc, #116]	; (8004cb8 <HAL_InitTick+0xfc>)
 8004c42:	2200      	movs	r2, #0
 8004c44:	609a      	str	r2, [r3, #8]
  htim17.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8004c46:	4b1c      	ldr	r3, [pc, #112]	; (8004cb8 <HAL_InitTick+0xfc>)
 8004c48:	2200      	movs	r2, #0
 8004c4a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim17);
 8004c4c:	252b      	movs	r5, #43	; 0x2b
 8004c4e:	197c      	adds	r4, r7, r5
 8004c50:	4b19      	ldr	r3, [pc, #100]	; (8004cb8 <HAL_InitTick+0xfc>)
 8004c52:	0018      	movs	r0, r3
 8004c54:	f001 fbd8 	bl	8006408 <HAL_TIM_Base_Init>
 8004c58:	0003      	movs	r3, r0
 8004c5a:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8004c5c:	197b      	adds	r3, r7, r5
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d11e      	bne.n	8004ca2 <HAL_InitTick+0xe6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim17);
 8004c64:	197c      	adds	r4, r7, r5
 8004c66:	4b14      	ldr	r3, [pc, #80]	; (8004cb8 <HAL_InitTick+0xfc>)
 8004c68:	0018      	movs	r0, r3
 8004c6a:	f001 fc2d 	bl	80064c8 <HAL_TIM_Base_Start_IT>
 8004c6e:	0003      	movs	r3, r0
 8004c70:	7023      	strb	r3, [r4, #0]
    if (status == HAL_OK)
 8004c72:	197b      	adds	r3, r7, r5
 8004c74:	781b      	ldrb	r3, [r3, #0]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d113      	bne.n	8004ca2 <HAL_InitTick+0xe6>
    {
    /* Enable the TIM17 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM17_IRQn);
 8004c7a:	2016      	movs	r0, #22
 8004c7c:	f000 fa53 	bl	8005126 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2b03      	cmp	r3, #3
 8004c84:	d809      	bhi.n	8004c9a <HAL_InitTick+0xde>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM17_IRQn, TickPriority, 0U);
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2200      	movs	r2, #0
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	2016      	movs	r0, #22
 8004c8e:	f000 fa35 	bl	80050fc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8004c92:	4b0c      	ldr	r3, [pc, #48]	; (8004cc4 <HAL_InitTick+0x108>)
 8004c94:	687a      	ldr	r2, [r7, #4]
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e003      	b.n	8004ca2 <HAL_InitTick+0xe6>
      }
      else
      {
        status = HAL_ERROR;
 8004c9a:	232b      	movs	r3, #43	; 0x2b
 8004c9c:	18fb      	adds	r3, r7, r3
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	701a      	strb	r2, [r3, #0]
      }
    }
  }

 /* Return function status */
  return status;
 8004ca2:	232b      	movs	r3, #43	; 0x2b
 8004ca4:	18fb      	adds	r3, r7, r3
 8004ca6:	781b      	ldrb	r3, [r3, #0]
}
 8004ca8:	0018      	movs	r0, r3
 8004caa:	46bd      	mov	sp, r7
 8004cac:	b00c      	add	sp, #48	; 0x30
 8004cae:	bdb0      	pop	{r4, r5, r7, pc}
 8004cb0:	40021000 	.word	0x40021000
 8004cb4:	000f4240 	.word	0x000f4240
 8004cb8:	2000065c 	.word	0x2000065c
 8004cbc:	40014800 	.word	0x40014800
 8004cc0:	000003e7 	.word	0x000003e7
 8004cc4:	20000010 	.word	0x20000010

08004cc8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8004ccc:	e7fe      	b.n	8004ccc <NMI_Handler+0x4>

08004cce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004cce:	b580      	push	{r7, lr}
 8004cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004cd2:	e7fe      	b.n	8004cd2 <HardFault_Handler+0x4>

08004cd4 <EXTI4_15_IRQHandler>:

/**
  * @brief This function handles EXTI line 4 to 15 interrupts.
  */
void EXTI4_15_IRQHandler(void)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_15_IRQn 0 */

  /* USER CODE END EXTI4_15_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8004cd8:	2380      	movs	r3, #128	; 0x80
 8004cda:	019b      	lsls	r3, r3, #6
 8004cdc:	0018      	movs	r0, r3
 8004cde:	f000 fc63 	bl	80055a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_15_IRQn 1 */

  /* USER CODE END EXTI4_15_IRQn 1 */
}
 8004ce2:	46c0      	nop			; (mov r8, r8)
 8004ce4:	46bd      	mov	sp, r7
 8004ce6:	bd80      	pop	{r7, pc}

08004ce8 <TIM17_IRQHandler>:

/**
  * @brief This function handles TIM17 global interrupt.
  */
void TIM17_IRQHandler(void)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM17_IRQn 0 */

  /* USER CODE END TIM17_IRQn 0 */
  HAL_TIM_IRQHandler(&htim17);
 8004cec:	4b03      	ldr	r3, [pc, #12]	; (8004cfc <TIM17_IRQHandler+0x14>)
 8004cee:	0018      	movs	r0, r3
 8004cf0:	f001 fc46 	bl	8006580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM17_IRQn 1 */

  /* USER CODE END TIM17_IRQn 1 */
}
 8004cf4:	46c0      	nop			; (mov r8, r8)
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}
 8004cfa:	46c0      	nop			; (mov r8, r8)
 8004cfc:	2000065c 	.word	0x2000065c

08004d00 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 8004d00:	b580      	push	{r7, lr}
 8004d02:	b082      	sub	sp, #8
 8004d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */
  BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8004d06:	2300      	movs	r3, #0
 8004d08:	607b      	str	r3, [r7, #4]

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8004d0a:	4b0e      	ldr	r3, [pc, #56]	; (8004d44 <USART1_IRQHandler+0x44>)
 8004d0c:	0018      	movs	r0, r3
 8004d0e:	f001 feff 	bl	8006b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  vTaskNotifyGiveFromISR(ModemRx_TaskHandle, &xHigherPriorityTaskWoken);
 8004d12:	4b0d      	ldr	r3, [pc, #52]	; (8004d48 <USART1_IRQHandler+0x48>)
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	1d3a      	adds	r2, r7, #4
 8004d18:	0011      	movs	r1, r2
 8004d1a:	0018      	movs	r0, r3
 8004d1c:	f004 fc60 	bl	80095e0 <vTaskNotifyGiveFromISR>
  portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d003      	beq.n	8004d2e <USART1_IRQHandler+0x2e>
 8004d26:	4b09      	ldr	r3, [pc, #36]	; (8004d4c <USART1_IRQHandler+0x4c>)
 8004d28:	2280      	movs	r2, #128	; 0x80
 8004d2a:	0552      	lsls	r2, r2, #21
 8004d2c:	601a      	str	r2, [r3, #0]
  HAL_UARTEx_ReceiveToIdle_IT(&huart1,(uint8_t*)EC200u_Rx_Buff, sizeof(EC200u_Rx_Buff));
 8004d2e:	4908      	ldr	r1, [pc, #32]	; (8004d50 <USART1_IRQHandler+0x50>)
 8004d30:	4b04      	ldr	r3, [pc, #16]	; (8004d44 <USART1_IRQHandler+0x44>)
 8004d32:	2264      	movs	r2, #100	; 0x64
 8004d34:	0018      	movs	r0, r3
 8004d36:	f003 fe73 	bl	8008a20 <HAL_UARTEx_ReceiveToIdle_IT>
//  memset(EC200u_Rx_Buff,0,sizeof(EC200u_Rx_Buff));
  /* USER CODE END USART1_IRQn 1 */
}
 8004d3a:	46c0      	nop			; (mov r8, r8)
 8004d3c:	46bd      	mov	sp, r7
 8004d3e:	b002      	add	sp, #8
 8004d40:	bd80      	pop	{r7, pc}
 8004d42:	46c0      	nop			; (mov r8, r8)
 8004d44:	200004c0 	.word	0x200004c0
 8004d48:	200005ec 	.word	0x200005ec
 8004d4c:	e000ed04 	.word	0xe000ed04
 8004d50:	200005f4 	.word	0x200005f4

08004d54 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8004d58:	4b03      	ldr	r3, [pc, #12]	; (8004d68 <USART2_IRQHandler+0x14>)
 8004d5a:	0018      	movs	r0, r3
 8004d5c:	f001 fed8 	bl	8006b10 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8004d60:	46c0      	nop			; (mov r8, r8)
 8004d62:	46bd      	mov	sp, r7
 8004d64:	bd80      	pop	{r7, pc}
 8004d66:	46c0      	nop			; (mov r8, r8)
 8004d68:	20000554 	.word	0x20000554

08004d6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
  return 1;
 8004d70:	2301      	movs	r3, #1
}
 8004d72:	0018      	movs	r0, r3
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <_kill>:

int _kill(int pid, int sig)
{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b082      	sub	sp, #8
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
 8004d80:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8004d82:	f006 f9e7 	bl	800b154 <__errno>
 8004d86:	0003      	movs	r3, r0
 8004d88:	2216      	movs	r2, #22
 8004d8a:	601a      	str	r2, [r3, #0]
  return -1;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	425b      	negs	r3, r3
}
 8004d90:	0018      	movs	r0, r3
 8004d92:	46bd      	mov	sp, r7
 8004d94:	b002      	add	sp, #8
 8004d96:	bd80      	pop	{r7, pc}

08004d98 <_exit>:

void _exit (int status)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	b082      	sub	sp, #8
 8004d9c:	af00      	add	r7, sp, #0
 8004d9e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8004da0:	2301      	movs	r3, #1
 8004da2:	425a      	negs	r2, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	0011      	movs	r1, r2
 8004da8:	0018      	movs	r0, r3
 8004daa:	f7ff ffe5 	bl	8004d78 <_kill>
  while (1) {}    /* Make sure we hang here */
 8004dae:	e7fe      	b.n	8004dae <_exit+0x16>

08004db0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b086      	sub	sp, #24
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	60f8      	str	r0, [r7, #12]
 8004db8:	60b9      	str	r1, [r7, #8]
 8004dba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dbc:	2300      	movs	r3, #0
 8004dbe:	617b      	str	r3, [r7, #20]
 8004dc0:	e00a      	b.n	8004dd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004dc2:	e000      	b.n	8004dc6 <_read+0x16>
 8004dc4:	bf00      	nop
 8004dc6:	0001      	movs	r1, r0
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	1c5a      	adds	r2, r3, #1
 8004dcc:	60ba      	str	r2, [r7, #8]
 8004dce:	b2ca      	uxtb	r2, r1
 8004dd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004dd2:	697b      	ldr	r3, [r7, #20]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	617b      	str	r3, [r7, #20]
 8004dd8:	697a      	ldr	r2, [r7, #20]
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	429a      	cmp	r2, r3
 8004dde:	dbf0      	blt.n	8004dc2 <_read+0x12>
  }

  return len;
 8004de0:	687b      	ldr	r3, [r7, #4]
}
 8004de2:	0018      	movs	r0, r3
 8004de4:	46bd      	mov	sp, r7
 8004de6:	b006      	add	sp, #24
 8004de8:	bd80      	pop	{r7, pc}

08004dea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004dea:	b580      	push	{r7, lr}
 8004dec:	b086      	sub	sp, #24
 8004dee:	af00      	add	r7, sp, #0
 8004df0:	60f8      	str	r0, [r7, #12]
 8004df2:	60b9      	str	r1, [r7, #8]
 8004df4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004df6:	2300      	movs	r3, #0
 8004df8:	617b      	str	r3, [r7, #20]
 8004dfa:	e009      	b.n	8004e10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	1c5a      	adds	r2, r3, #1
 8004e00:	60ba      	str	r2, [r7, #8]
 8004e02:	781b      	ldrb	r3, [r3, #0]
 8004e04:	0018      	movs	r0, r3
 8004e06:	e000      	b.n	8004e0a <_write+0x20>
 8004e08:	bf00      	nop
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	617b      	str	r3, [r7, #20]
 8004e10:	697a      	ldr	r2, [r7, #20]
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	429a      	cmp	r2, r3
 8004e16:	dbf1      	blt.n	8004dfc <_write+0x12>
  }
  return len;
 8004e18:	687b      	ldr	r3, [r7, #4]
}
 8004e1a:	0018      	movs	r0, r3
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	b006      	add	sp, #24
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <_close>:

int _close(int file)
{
 8004e22:	b580      	push	{r7, lr}
 8004e24:	b082      	sub	sp, #8
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	425b      	negs	r3, r3
}
 8004e2e:	0018      	movs	r0, r3
 8004e30:	46bd      	mov	sp, r7
 8004e32:	b002      	add	sp, #8
 8004e34:	bd80      	pop	{r7, pc}

08004e36 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004e36:	b580      	push	{r7, lr}
 8004e38:	b082      	sub	sp, #8
 8004e3a:	af00      	add	r7, sp, #0
 8004e3c:	6078      	str	r0, [r7, #4]
 8004e3e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004e40:	683b      	ldr	r3, [r7, #0]
 8004e42:	2280      	movs	r2, #128	; 0x80
 8004e44:	0192      	lsls	r2, r2, #6
 8004e46:	605a      	str	r2, [r3, #4]
  return 0;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	0018      	movs	r0, r3
 8004e4c:	46bd      	mov	sp, r7
 8004e4e:	b002      	add	sp, #8
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <_isatty>:

int _isatty(int file)
{
 8004e52:	b580      	push	{r7, lr}
 8004e54:	b082      	sub	sp, #8
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8004e5a:	2301      	movs	r3, #1
}
 8004e5c:	0018      	movs	r0, r3
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	b002      	add	sp, #8
 8004e62:	bd80      	pop	{r7, pc}

08004e64 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b084      	sub	sp, #16
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	60f8      	str	r0, [r7, #12]
 8004e6c:	60b9      	str	r1, [r7, #8]
 8004e6e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004e70:	2300      	movs	r3, #0
}
 8004e72:	0018      	movs	r0, r3
 8004e74:	46bd      	mov	sp, r7
 8004e76:	b004      	add	sp, #16
 8004e78:	bd80      	pop	{r7, pc}
	...

08004e7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8004e84:	4a14      	ldr	r2, [pc, #80]	; (8004ed8 <_sbrk+0x5c>)
 8004e86:	4b15      	ldr	r3, [pc, #84]	; (8004edc <_sbrk+0x60>)
 8004e88:	1ad3      	subs	r3, r2, r3
 8004e8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004e8c:	697b      	ldr	r3, [r7, #20]
 8004e8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004e90:	4b13      	ldr	r3, [pc, #76]	; (8004ee0 <_sbrk+0x64>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d102      	bne.n	8004e9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004e98:	4b11      	ldr	r3, [pc, #68]	; (8004ee0 <_sbrk+0x64>)
 8004e9a:	4a12      	ldr	r2, [pc, #72]	; (8004ee4 <_sbrk+0x68>)
 8004e9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004e9e:	4b10      	ldr	r3, [pc, #64]	; (8004ee0 <_sbrk+0x64>)
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	18d3      	adds	r3, r2, r3
 8004ea6:	693a      	ldr	r2, [r7, #16]
 8004ea8:	429a      	cmp	r2, r3
 8004eaa:	d207      	bcs.n	8004ebc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004eac:	f006 f952 	bl	800b154 <__errno>
 8004eb0:	0003      	movs	r3, r0
 8004eb2:	220c      	movs	r2, #12
 8004eb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	425b      	negs	r3, r3
 8004eba:	e009      	b.n	8004ed0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004ebc:	4b08      	ldr	r3, [pc, #32]	; (8004ee0 <_sbrk+0x64>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004ec2:	4b07      	ldr	r3, [pc, #28]	; (8004ee0 <_sbrk+0x64>)
 8004ec4:	681a      	ldr	r2, [r3, #0]
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	18d2      	adds	r2, r2, r3
 8004eca:	4b05      	ldr	r3, [pc, #20]	; (8004ee0 <_sbrk+0x64>)
 8004ecc:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 8004ece:	68fb      	ldr	r3, [r7, #12]
}
 8004ed0:	0018      	movs	r0, r3
 8004ed2:	46bd      	mov	sp, r7
 8004ed4:	b006      	add	sp, #24
 8004ed6:	bd80      	pop	{r7, pc}
 8004ed8:	20009000 	.word	0x20009000
 8004edc:	00000400 	.word	0x00000400
 8004ee0:	200006a8 	.word	0x200006a8
 8004ee4:	20001948 	.word	0x20001948

08004ee8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004eec:	46c0      	nop			; (mov r8, r8)
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	bd80      	pop	{r7, pc}
	...

08004ef4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8004ef4:	480d      	ldr	r0, [pc, #52]	; (8004f2c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8004ef6:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8004ef8:	f7ff fff6 	bl	8004ee8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8004efc:	480c      	ldr	r0, [pc, #48]	; (8004f30 <LoopForever+0x6>)
  ldr r1, =_edata
 8004efe:	490d      	ldr	r1, [pc, #52]	; (8004f34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8004f00:	4a0d      	ldr	r2, [pc, #52]	; (8004f38 <LoopForever+0xe>)
  movs r3, #0
 8004f02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004f04:	e002      	b.n	8004f0c <LoopCopyDataInit>

08004f06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004f06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004f08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004f0a:	3304      	adds	r3, #4

08004f0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004f0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004f0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004f10:	d3f9      	bcc.n	8004f06 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004f12:	4a0a      	ldr	r2, [pc, #40]	; (8004f3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8004f14:	4c0a      	ldr	r4, [pc, #40]	; (8004f40 <LoopForever+0x16>)
  movs r3, #0
 8004f16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004f18:	e001      	b.n	8004f1e <LoopFillZerobss>

08004f1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004f1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004f1c:	3204      	adds	r2, #4

08004f1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004f1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004f20:	d3fb      	bcc.n	8004f1a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8004f22:	f006 f91d 	bl	800b160 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8004f26:	f7ff fba1 	bl	800466c <main>

08004f2a <LoopForever>:

LoopForever:
  b LoopForever
 8004f2a:	e7fe      	b.n	8004f2a <LoopForever>
  ldr   r0, =_estack
 8004f2c:	20009000 	.word	0x20009000
  ldr r0, =_sdata
 8004f30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004f34:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8004f38:	0800ddb8 	.word	0x0800ddb8
  ldr r2, =_sbss
 8004f3c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8004f40:	20001948 	.word	0x20001948

08004f44 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004f44:	e7fe      	b.n	8004f44 <ADC1_COMP_IRQHandler>
	...

08004f48 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8004f4e:	1dfb      	adds	r3, r7, #7
 8004f50:	2200      	movs	r2, #0
 8004f52:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004f54:	4b0b      	ldr	r3, [pc, #44]	; (8004f84 <HAL_Init+0x3c>)
 8004f56:	681a      	ldr	r2, [r3, #0]
 8004f58:	4b0a      	ldr	r3, [pc, #40]	; (8004f84 <HAL_Init+0x3c>)
 8004f5a:	2180      	movs	r1, #128	; 0x80
 8004f5c:	0049      	lsls	r1, r1, #1
 8004f5e:	430a      	orrs	r2, r1
 8004f60:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8004f62:	2003      	movs	r0, #3
 8004f64:	f7ff fe2a 	bl	8004bbc <HAL_InitTick>
 8004f68:	1e03      	subs	r3, r0, #0
 8004f6a:	d003      	beq.n	8004f74 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8004f6c:	1dfb      	adds	r3, r7, #7
 8004f6e:	2201      	movs	r2, #1
 8004f70:	701a      	strb	r2, [r3, #0]
 8004f72:	e001      	b.n	8004f78 <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8004f74:	f7ff fd38 	bl	80049e8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8004f78:	1dfb      	adds	r3, r7, #7
 8004f7a:	781b      	ldrb	r3, [r3, #0]
}
 8004f7c:	0018      	movs	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	b002      	add	sp, #8
 8004f82:	bd80      	pop	{r7, pc}
 8004f84:	40022000 	.word	0x40022000

08004f88 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8004f8c:	4b05      	ldr	r3, [pc, #20]	; (8004fa4 <HAL_IncTick+0x1c>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	001a      	movs	r2, r3
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <HAL_IncTick+0x20>)
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	18d2      	adds	r2, r2, r3
 8004f98:	4b03      	ldr	r3, [pc, #12]	; (8004fa8 <HAL_IncTick+0x20>)
 8004f9a:	601a      	str	r2, [r3, #0]
}
 8004f9c:	46c0      	nop			; (mov r8, r8)
 8004f9e:	46bd      	mov	sp, r7
 8004fa0:	bd80      	pop	{r7, pc}
 8004fa2:	46c0      	nop			; (mov r8, r8)
 8004fa4:	20000014 	.word	0x20000014
 8004fa8:	200006ac 	.word	0x200006ac

08004fac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	af00      	add	r7, sp, #0
  return uwTick;
 8004fb0:	4b02      	ldr	r3, [pc, #8]	; (8004fbc <HAL_GetTick+0x10>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
}
 8004fb4:	0018      	movs	r0, r3
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	bd80      	pop	{r7, pc}
 8004fba:	46c0      	nop			; (mov r8, r8)
 8004fbc:	200006ac 	.word	0x200006ac

08004fc0 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8004fc0:	b580      	push	{r7, lr}
 8004fc2:	b082      	sub	sp, #8
 8004fc4:	af00      	add	r7, sp, #0
 8004fc6:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8004fc8:	4b06      	ldr	r3, [pc, #24]	; (8004fe4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4a06      	ldr	r2, [pc, #24]	; (8004fe8 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8004fce:	4013      	ands	r3, r2
 8004fd0:	0019      	movs	r1, r3
 8004fd2:	4b04      	ldr	r3, [pc, #16]	; (8004fe4 <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	430a      	orrs	r2, r1
 8004fd8:	601a      	str	r2, [r3, #0]
}
 8004fda:	46c0      	nop			; (mov r8, r8)
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	b002      	add	sp, #8
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	46c0      	nop			; (mov r8, r8)
 8004fe4:	40010000 	.word	0x40010000
 8004fe8:	fffff9ff 	.word	0xfffff9ff

08004fec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b082      	sub	sp, #8
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	0002      	movs	r2, r0
 8004ff4:	1dfb      	adds	r3, r7, #7
 8004ff6:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8004ff8:	1dfb      	adds	r3, r7, #7
 8004ffa:	781b      	ldrb	r3, [r3, #0]
 8004ffc:	2b7f      	cmp	r3, #127	; 0x7f
 8004ffe:	d809      	bhi.n	8005014 <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005000:	1dfb      	adds	r3, r7, #7
 8005002:	781b      	ldrb	r3, [r3, #0]
 8005004:	001a      	movs	r2, r3
 8005006:	231f      	movs	r3, #31
 8005008:	401a      	ands	r2, r3
 800500a:	4b04      	ldr	r3, [pc, #16]	; (800501c <__NVIC_EnableIRQ+0x30>)
 800500c:	2101      	movs	r1, #1
 800500e:	4091      	lsls	r1, r2
 8005010:	000a      	movs	r2, r1
 8005012:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 8005014:	46c0      	nop			; (mov r8, r8)
 8005016:	46bd      	mov	sp, r7
 8005018:	b002      	add	sp, #8
 800501a:	bd80      	pop	{r7, pc}
 800501c:	e000e100 	.word	0xe000e100

08005020 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005020:	b590      	push	{r4, r7, lr}
 8005022:	b083      	sub	sp, #12
 8005024:	af00      	add	r7, sp, #0
 8005026:	0002      	movs	r2, r0
 8005028:	6039      	str	r1, [r7, #0]
 800502a:	1dfb      	adds	r3, r7, #7
 800502c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800502e:	1dfb      	adds	r3, r7, #7
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b7f      	cmp	r3, #127	; 0x7f
 8005034:	d828      	bhi.n	8005088 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005036:	4a2f      	ldr	r2, [pc, #188]	; (80050f4 <__NVIC_SetPriority+0xd4>)
 8005038:	1dfb      	adds	r3, r7, #7
 800503a:	781b      	ldrb	r3, [r3, #0]
 800503c:	b25b      	sxtb	r3, r3
 800503e:	089b      	lsrs	r3, r3, #2
 8005040:	33c0      	adds	r3, #192	; 0xc0
 8005042:	009b      	lsls	r3, r3, #2
 8005044:	589b      	ldr	r3, [r3, r2]
 8005046:	1dfa      	adds	r2, r7, #7
 8005048:	7812      	ldrb	r2, [r2, #0]
 800504a:	0011      	movs	r1, r2
 800504c:	2203      	movs	r2, #3
 800504e:	400a      	ands	r2, r1
 8005050:	00d2      	lsls	r2, r2, #3
 8005052:	21ff      	movs	r1, #255	; 0xff
 8005054:	4091      	lsls	r1, r2
 8005056:	000a      	movs	r2, r1
 8005058:	43d2      	mvns	r2, r2
 800505a:	401a      	ands	r2, r3
 800505c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	019b      	lsls	r3, r3, #6
 8005062:	22ff      	movs	r2, #255	; 0xff
 8005064:	401a      	ands	r2, r3
 8005066:	1dfb      	adds	r3, r7, #7
 8005068:	781b      	ldrb	r3, [r3, #0]
 800506a:	0018      	movs	r0, r3
 800506c:	2303      	movs	r3, #3
 800506e:	4003      	ands	r3, r0
 8005070:	00db      	lsls	r3, r3, #3
 8005072:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005074:	481f      	ldr	r0, [pc, #124]	; (80050f4 <__NVIC_SetPriority+0xd4>)
 8005076:	1dfb      	adds	r3, r7, #7
 8005078:	781b      	ldrb	r3, [r3, #0]
 800507a:	b25b      	sxtb	r3, r3
 800507c:	089b      	lsrs	r3, r3, #2
 800507e:	430a      	orrs	r2, r1
 8005080:	33c0      	adds	r3, #192	; 0xc0
 8005082:	009b      	lsls	r3, r3, #2
 8005084:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8005086:	e031      	b.n	80050ec <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8005088:	4a1b      	ldr	r2, [pc, #108]	; (80050f8 <__NVIC_SetPriority+0xd8>)
 800508a:	1dfb      	adds	r3, r7, #7
 800508c:	781b      	ldrb	r3, [r3, #0]
 800508e:	0019      	movs	r1, r3
 8005090:	230f      	movs	r3, #15
 8005092:	400b      	ands	r3, r1
 8005094:	3b08      	subs	r3, #8
 8005096:	089b      	lsrs	r3, r3, #2
 8005098:	3306      	adds	r3, #6
 800509a:	009b      	lsls	r3, r3, #2
 800509c:	18d3      	adds	r3, r2, r3
 800509e:	3304      	adds	r3, #4
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	1dfa      	adds	r2, r7, #7
 80050a4:	7812      	ldrb	r2, [r2, #0]
 80050a6:	0011      	movs	r1, r2
 80050a8:	2203      	movs	r2, #3
 80050aa:	400a      	ands	r2, r1
 80050ac:	00d2      	lsls	r2, r2, #3
 80050ae:	21ff      	movs	r1, #255	; 0xff
 80050b0:	4091      	lsls	r1, r2
 80050b2:	000a      	movs	r2, r1
 80050b4:	43d2      	mvns	r2, r2
 80050b6:	401a      	ands	r2, r3
 80050b8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	019b      	lsls	r3, r3, #6
 80050be:	22ff      	movs	r2, #255	; 0xff
 80050c0:	401a      	ands	r2, r3
 80050c2:	1dfb      	adds	r3, r7, #7
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	0018      	movs	r0, r3
 80050c8:	2303      	movs	r3, #3
 80050ca:	4003      	ands	r3, r0
 80050cc:	00db      	lsls	r3, r3, #3
 80050ce:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80050d0:	4809      	ldr	r0, [pc, #36]	; (80050f8 <__NVIC_SetPriority+0xd8>)
 80050d2:	1dfb      	adds	r3, r7, #7
 80050d4:	781b      	ldrb	r3, [r3, #0]
 80050d6:	001c      	movs	r4, r3
 80050d8:	230f      	movs	r3, #15
 80050da:	4023      	ands	r3, r4
 80050dc:	3b08      	subs	r3, #8
 80050de:	089b      	lsrs	r3, r3, #2
 80050e0:	430a      	orrs	r2, r1
 80050e2:	3306      	adds	r3, #6
 80050e4:	009b      	lsls	r3, r3, #2
 80050e6:	18c3      	adds	r3, r0, r3
 80050e8:	3304      	adds	r3, #4
 80050ea:	601a      	str	r2, [r3, #0]
}
 80050ec:	46c0      	nop			; (mov r8, r8)
 80050ee:	46bd      	mov	sp, r7
 80050f0:	b003      	add	sp, #12
 80050f2:	bd90      	pop	{r4, r7, pc}
 80050f4:	e000e100 	.word	0xe000e100
 80050f8:	e000ed00 	.word	0xe000ed00

080050fc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80050fc:	b580      	push	{r7, lr}
 80050fe:	b084      	sub	sp, #16
 8005100:	af00      	add	r7, sp, #0
 8005102:	60b9      	str	r1, [r7, #8]
 8005104:	607a      	str	r2, [r7, #4]
 8005106:	210f      	movs	r1, #15
 8005108:	187b      	adds	r3, r7, r1
 800510a:	1c02      	adds	r2, r0, #0
 800510c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800510e:	68ba      	ldr	r2, [r7, #8]
 8005110:	187b      	adds	r3, r7, r1
 8005112:	781b      	ldrb	r3, [r3, #0]
 8005114:	b25b      	sxtb	r3, r3
 8005116:	0011      	movs	r1, r2
 8005118:	0018      	movs	r0, r3
 800511a:	f7ff ff81 	bl	8005020 <__NVIC_SetPriority>
}
 800511e:	46c0      	nop			; (mov r8, r8)
 8005120:	46bd      	mov	sp, r7
 8005122:	b004      	add	sp, #16
 8005124:	bd80      	pop	{r7, pc}

08005126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005126:	b580      	push	{r7, lr}
 8005128:	b082      	sub	sp, #8
 800512a:	af00      	add	r7, sp, #0
 800512c:	0002      	movs	r2, r0
 800512e:	1dfb      	adds	r3, r7, #7
 8005130:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005132:	1dfb      	adds	r3, r7, #7
 8005134:	781b      	ldrb	r3, [r3, #0]
 8005136:	b25b      	sxtb	r3, r3
 8005138:	0018      	movs	r0, r3
 800513a:	f7ff ff57 	bl	8004fec <__NVIC_EnableIRQ>
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b002      	add	sp, #8
 8005144:	bd80      	pop	{r7, pc}
	...

08005148 <HAL_DMA_Abort>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005148:	b580      	push	{r7, lr}
 800514a:	b082      	sub	sp, #8
 800514c:	af00      	add	r7, sp, #0
 800514e:	6078      	str	r0, [r7, #4]
  /* Check the DMA peripheral handle */
  if (NULL == hdma)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d101      	bne.n	800515a <HAL_DMA_Abort+0x12>
  {
    return HAL_ERROR;
 8005156:	2301      	movs	r3, #1
 8005158:	e050      	b.n	80051fc <HAL_DMA_Abort+0xb4>
  }

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	2225      	movs	r2, #37	; 0x25
 800515e:	5c9b      	ldrb	r3, [r3, r2]
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b02      	cmp	r3, #2
 8005164:	d008      	beq.n	8005178 <HAL_DMA_Abort+0x30>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	2204      	movs	r2, #4
 800516a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2224      	movs	r2, #36	; 0x24
 8005170:	2100      	movs	r1, #0
 8005172:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 8005174:	2301      	movs	r3, #1
 8005176:	e041      	b.n	80051fc <HAL_DMA_Abort+0xb4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	681a      	ldr	r2, [r3, #0]
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	210e      	movs	r1, #14
 8005184:	438a      	bics	r2, r1
 8005186:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005192:	491c      	ldr	r1, [pc, #112]	; (8005204 <HAL_DMA_Abort+0xbc>)
 8005194:	400a      	ands	r2, r1
 8005196:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	681a      	ldr	r2, [r3, #0]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2101      	movs	r1, #1
 80051a4:	438a      	bics	r2, r1
 80051a6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex  & 0x1CU)));
 80051a8:	4b17      	ldr	r3, [pc, #92]	; (8005208 <HAL_DMA_Abort+0xc0>)
 80051aa:	6859      	ldr	r1, [r3, #4]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051b0:	221c      	movs	r2, #28
 80051b2:	4013      	ands	r3, r2
 80051b4:	2201      	movs	r2, #1
 80051b6:	409a      	lsls	r2, r3
 80051b8:	4b13      	ldr	r3, [pc, #76]	; (8005208 <HAL_DMA_Abort+0xc0>)
 80051ba:	430a      	orrs	r2, r1
 80051bc:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80051c6:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00c      	beq.n	80051ea <HAL_DMA_Abort+0xa2>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80051da:	490a      	ldr	r1, [pc, #40]	; (8005204 <HAL_DMA_Abort+0xbc>)
 80051dc:	400a      	ands	r2, r1
 80051de:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051e4:	687a      	ldr	r2, [r7, #4]
 80051e6:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80051e8:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	2225      	movs	r2, #37	; 0x25
 80051ee:	2101      	movs	r1, #1
 80051f0:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	2224      	movs	r2, #36	; 0x24
 80051f6:	2100      	movs	r1, #0
 80051f8:	5499      	strb	r1, [r3, r2]
  }

  return HAL_OK;
 80051fa:	2300      	movs	r3, #0
}
 80051fc:	0018      	movs	r0, r3
 80051fe:	46bd      	mov	sp, r7
 8005200:	b002      	add	sp, #8
 8005202:	bd80      	pop	{r7, pc}
 8005204:	fffffeff 	.word	0xfffffeff
 8005208:	40020000 	.word	0x40020000

0800520c <HAL_DMA_Abort_IT>:
  * @param hdma Pointer to a DMA_HandleTypeDef structure that contains
  *             the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005214:	210f      	movs	r1, #15
 8005216:	187b      	adds	r3, r7, r1
 8005218:	2200      	movs	r2, #0
 800521a:	701a      	strb	r2, [r3, #0]

  if (hdma->State != HAL_DMA_STATE_BUSY)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2225      	movs	r2, #37	; 0x25
 8005220:	5c9b      	ldrb	r3, [r3, r2]
 8005222:	b2db      	uxtb	r3, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d006      	beq.n	8005236 <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2204      	movs	r2, #4
 800522c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800522e:	187b      	adds	r3, r7, r1
 8005230:	2201      	movs	r2, #1
 8005232:	701a      	strb	r2, [r3, #0]
 8005234:	e049      	b.n	80052ca <HAL_DMA_Abort_IT+0xbe>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	681a      	ldr	r2, [r3, #0]
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	210e      	movs	r1, #14
 8005242:	438a      	bics	r2, r1
 8005244:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	681a      	ldr	r2, [r3, #0]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	2101      	movs	r1, #1
 8005252:	438a      	bics	r2, r1
 8005254:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800525a:	681a      	ldr	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005260:	491d      	ldr	r1, [pc, #116]	; (80052d8 <HAL_DMA_Abort_IT+0xcc>)
 8005262:	400a      	ands	r2, r1
 8005264:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
#if defined(DMA2)
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
#else
    __HAL_DMA_CLEAR_FLAG(hdma, ((DMA_FLAG_GI1) << (hdma->ChannelIndex & 0x1CU)));
 8005266:	4b1d      	ldr	r3, [pc, #116]	; (80052dc <HAL_DMA_Abort_IT+0xd0>)
 8005268:	6859      	ldr	r1, [r3, #4]
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800526e:	221c      	movs	r2, #28
 8005270:	4013      	ands	r3, r2
 8005272:	2201      	movs	r2, #1
 8005274:	409a      	lsls	r2, r3
 8005276:	4b19      	ldr	r3, [pc, #100]	; (80052dc <HAL_DMA_Abort_IT+0xd0>)
 8005278:	430a      	orrs	r2, r1
 800527a:	605a      	str	r2, [r3, #4]
#endif /* DMA2 */

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005280:	687a      	ldr	r2, [r7, #4]
 8005282:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8005284:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00c      	beq.n	80052a8 <HAL_DMA_Abort_IT+0x9c>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005292:	681a      	ldr	r2, [r3, #0]
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005298:	490f      	ldr	r1, [pc, #60]	; (80052d8 <HAL_DMA_Abort_IT+0xcc>)
 800529a:	400a      	ands	r2, r1
 800529c:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052a2:	687a      	ldr	r2, [r7, #4]
 80052a4:	6d92      	ldr	r2, [r2, #88]	; 0x58
 80052a6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2225      	movs	r2, #37	; 0x25
 80052ac:	2101      	movs	r1, #1
 80052ae:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	2224      	movs	r2, #36	; 0x24
 80052b4:	2100      	movs	r1, #0
 80052b6:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d004      	beq.n	80052ca <HAL_DMA_Abort_IT+0xbe>
    {
      hdma->XferAbortCallback(hdma);
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052c4:	687a      	ldr	r2, [r7, #4]
 80052c6:	0010      	movs	r0, r2
 80052c8:	4798      	blx	r3
    }
  }
  return status;
 80052ca:	230f      	movs	r3, #15
 80052cc:	18fb      	adds	r3, r7, r3
 80052ce:	781b      	ldrb	r3, [r3, #0]
}
 80052d0:	0018      	movs	r0, r3
 80052d2:	46bd      	mov	sp, r7
 80052d4:	b004      	add	sp, #16
 80052d6:	bd80      	pop	{r7, pc}
 80052d8:	fffffeff 	.word	0xfffffeff
 80052dc:	40020000 	.word	0x40020000

080052e0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80052e0:	b580      	push	{r7, lr}
 80052e2:	b086      	sub	sp, #24
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80052ea:	2300      	movs	r3, #0
 80052ec:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80052ee:	e147      	b.n	8005580 <HAL_GPIO_Init+0x2a0>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80052f0:	683b      	ldr	r3, [r7, #0]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	2101      	movs	r1, #1
 80052f6:	697a      	ldr	r2, [r7, #20]
 80052f8:	4091      	lsls	r1, r2
 80052fa:	000a      	movs	r2, r1
 80052fc:	4013      	ands	r3, r2
 80052fe:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d100      	bne.n	8005308 <HAL_GPIO_Init+0x28>
 8005306:	e138      	b.n	800557a <HAL_GPIO_Init+0x29a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	685b      	ldr	r3, [r3, #4]
 800530c:	2203      	movs	r2, #3
 800530e:	4013      	ands	r3, r2
 8005310:	2b01      	cmp	r3, #1
 8005312:	d005      	beq.n	8005320 <HAL_GPIO_Init+0x40>
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	2203      	movs	r2, #3
 800531a:	4013      	ands	r3, r2
 800531c:	2b02      	cmp	r3, #2
 800531e:	d130      	bne.n	8005382 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	005b      	lsls	r3, r3, #1
 800532a:	2203      	movs	r2, #3
 800532c:	409a      	lsls	r2, r3
 800532e:	0013      	movs	r3, r2
 8005330:	43da      	mvns	r2, r3
 8005332:	693b      	ldr	r3, [r7, #16]
 8005334:	4013      	ands	r3, r2
 8005336:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005338:	683b      	ldr	r3, [r7, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	697b      	ldr	r3, [r7, #20]
 800533e:	005b      	lsls	r3, r3, #1
 8005340:	409a      	lsls	r2, r3
 8005342:	0013      	movs	r3, r2
 8005344:	693a      	ldr	r2, [r7, #16]
 8005346:	4313      	orrs	r3, r2
 8005348:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	693a      	ldr	r2, [r7, #16]
 800534e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005356:	2201      	movs	r2, #1
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	409a      	lsls	r2, r3
 800535c:	0013      	movs	r3, r2
 800535e:	43da      	mvns	r2, r3
 8005360:	693b      	ldr	r3, [r7, #16]
 8005362:	4013      	ands	r3, r2
 8005364:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	685b      	ldr	r3, [r3, #4]
 800536a:	091b      	lsrs	r3, r3, #4
 800536c:	2201      	movs	r2, #1
 800536e:	401a      	ands	r2, r3
 8005370:	697b      	ldr	r3, [r7, #20]
 8005372:	409a      	lsls	r2, r3
 8005374:	0013      	movs	r3, r2
 8005376:	693a      	ldr	r2, [r7, #16]
 8005378:	4313      	orrs	r3, r2
 800537a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	693a      	ldr	r2, [r7, #16]
 8005380:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685b      	ldr	r3, [r3, #4]
 8005386:	2203      	movs	r2, #3
 8005388:	4013      	ands	r3, r2
 800538a:	2b03      	cmp	r3, #3
 800538c:	d017      	beq.n	80053be <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	68db      	ldr	r3, [r3, #12]
 8005392:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	2203      	movs	r2, #3
 800539a:	409a      	lsls	r2, r3
 800539c:	0013      	movs	r3, r2
 800539e:	43da      	mvns	r2, r3
 80053a0:	693b      	ldr	r3, [r7, #16]
 80053a2:	4013      	ands	r3, r2
 80053a4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80053a6:	683b      	ldr	r3, [r7, #0]
 80053a8:	689a      	ldr	r2, [r3, #8]
 80053aa:	697b      	ldr	r3, [r7, #20]
 80053ac:	005b      	lsls	r3, r3, #1
 80053ae:	409a      	lsls	r2, r3
 80053b0:	0013      	movs	r3, r2
 80053b2:	693a      	ldr	r2, [r7, #16]
 80053b4:	4313      	orrs	r3, r2
 80053b6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	693a      	ldr	r2, [r7, #16]
 80053bc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	2203      	movs	r2, #3
 80053c4:	4013      	ands	r3, r2
 80053c6:	2b02      	cmp	r3, #2
 80053c8:	d123      	bne.n	8005412 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80053ca:	697b      	ldr	r3, [r7, #20]
 80053cc:	08da      	lsrs	r2, r3, #3
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	3208      	adds	r2, #8
 80053d2:	0092      	lsls	r2, r2, #2
 80053d4:	58d3      	ldr	r3, [r2, r3]
 80053d6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80053d8:	697b      	ldr	r3, [r7, #20]
 80053da:	2207      	movs	r2, #7
 80053dc:	4013      	ands	r3, r2
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	220f      	movs	r2, #15
 80053e2:	409a      	lsls	r2, r3
 80053e4:	0013      	movs	r3, r2
 80053e6:	43da      	mvns	r2, r3
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	4013      	ands	r3, r2
 80053ec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	691a      	ldr	r2, [r3, #16]
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	2107      	movs	r1, #7
 80053f6:	400b      	ands	r3, r1
 80053f8:	009b      	lsls	r3, r3, #2
 80053fa:	409a      	lsls	r2, r3
 80053fc:	0013      	movs	r3, r2
 80053fe:	693a      	ldr	r2, [r7, #16]
 8005400:	4313      	orrs	r3, r2
 8005402:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005404:	697b      	ldr	r3, [r7, #20]
 8005406:	08da      	lsrs	r2, r3, #3
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	3208      	adds	r2, #8
 800540c:	0092      	lsls	r2, r2, #2
 800540e:	6939      	ldr	r1, [r7, #16]
 8005410:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005418:	697b      	ldr	r3, [r7, #20]
 800541a:	005b      	lsls	r3, r3, #1
 800541c:	2203      	movs	r2, #3
 800541e:	409a      	lsls	r2, r3
 8005420:	0013      	movs	r3, r2
 8005422:	43da      	mvns	r2, r3
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4013      	ands	r3, r2
 8005428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	2203      	movs	r2, #3
 8005430:	401a      	ands	r2, r3
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	005b      	lsls	r3, r3, #1
 8005436:	409a      	lsls	r2, r3
 8005438:	0013      	movs	r3, r2
 800543a:	693a      	ldr	r2, [r7, #16]
 800543c:	4313      	orrs	r3, r2
 800543e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	693a      	ldr	r2, [r7, #16]
 8005444:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	685a      	ldr	r2, [r3, #4]
 800544a:	23c0      	movs	r3, #192	; 0xc0
 800544c:	029b      	lsls	r3, r3, #10
 800544e:	4013      	ands	r3, r2
 8005450:	d100      	bne.n	8005454 <HAL_GPIO_Init+0x174>
 8005452:	e092      	b.n	800557a <HAL_GPIO_Init+0x29a>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8005454:	4a50      	ldr	r2, [pc, #320]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	089b      	lsrs	r3, r3, #2
 800545a:	3318      	adds	r3, #24
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	589b      	ldr	r3, [r3, r2]
 8005460:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2203      	movs	r2, #3
 8005466:	4013      	ands	r3, r2
 8005468:	00db      	lsls	r3, r3, #3
 800546a:	220f      	movs	r2, #15
 800546c:	409a      	lsls	r2, r3
 800546e:	0013      	movs	r3, r2
 8005470:	43da      	mvns	r2, r3
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	4013      	ands	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8005478:	687a      	ldr	r2, [r7, #4]
 800547a:	23a0      	movs	r3, #160	; 0xa0
 800547c:	05db      	lsls	r3, r3, #23
 800547e:	429a      	cmp	r2, r3
 8005480:	d013      	beq.n	80054aa <HAL_GPIO_Init+0x1ca>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	4a45      	ldr	r2, [pc, #276]	; (800559c <HAL_GPIO_Init+0x2bc>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d00d      	beq.n	80054a6 <HAL_GPIO_Init+0x1c6>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	4a44      	ldr	r2, [pc, #272]	; (80055a0 <HAL_GPIO_Init+0x2c0>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d007      	beq.n	80054a2 <HAL_GPIO_Init+0x1c2>
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	4a43      	ldr	r2, [pc, #268]	; (80055a4 <HAL_GPIO_Init+0x2c4>)
 8005496:	4293      	cmp	r3, r2
 8005498:	d101      	bne.n	800549e <HAL_GPIO_Init+0x1be>
 800549a:	2303      	movs	r3, #3
 800549c:	e006      	b.n	80054ac <HAL_GPIO_Init+0x1cc>
 800549e:	2305      	movs	r3, #5
 80054a0:	e004      	b.n	80054ac <HAL_GPIO_Init+0x1cc>
 80054a2:	2302      	movs	r3, #2
 80054a4:	e002      	b.n	80054ac <HAL_GPIO_Init+0x1cc>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <HAL_GPIO_Init+0x1cc>
 80054aa:	2300      	movs	r3, #0
 80054ac:	697a      	ldr	r2, [r7, #20]
 80054ae:	2103      	movs	r1, #3
 80054b0:	400a      	ands	r2, r1
 80054b2:	00d2      	lsls	r2, r2, #3
 80054b4:	4093      	lsls	r3, r2
 80054b6:	693a      	ldr	r2, [r7, #16]
 80054b8:	4313      	orrs	r3, r2
 80054ba:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80054bc:	4936      	ldr	r1, [pc, #216]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 80054be:	697b      	ldr	r3, [r7, #20]
 80054c0:	089b      	lsrs	r3, r3, #2
 80054c2:	3318      	adds	r3, #24
 80054c4:	009b      	lsls	r3, r3, #2
 80054c6:	693a      	ldr	r2, [r7, #16]
 80054c8:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80054ca:	4b33      	ldr	r3, [pc, #204]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	43da      	mvns	r2, r3
 80054d4:	693b      	ldr	r3, [r7, #16]
 80054d6:	4013      	ands	r3, r2
 80054d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80054da:	683b      	ldr	r3, [r7, #0]
 80054dc:	685a      	ldr	r2, [r3, #4]
 80054de:	2380      	movs	r3, #128	; 0x80
 80054e0:	035b      	lsls	r3, r3, #13
 80054e2:	4013      	ands	r3, r2
 80054e4:	d003      	beq.n	80054ee <HAL_GPIO_Init+0x20e>
        {
          temp |= iocurrent;
 80054e6:	693a      	ldr	r2, [r7, #16]
 80054e8:	68fb      	ldr	r3, [r7, #12]
 80054ea:	4313      	orrs	r3, r2
 80054ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80054ee:	4b2a      	ldr	r3, [pc, #168]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 80054f0:	693a      	ldr	r2, [r7, #16]
 80054f2:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80054f4:	4b28      	ldr	r3, [pc, #160]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 80054f6:	685b      	ldr	r3, [r3, #4]
 80054f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	43da      	mvns	r2, r3
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	4013      	ands	r3, r2
 8005502:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	685a      	ldr	r2, [r3, #4]
 8005508:	2380      	movs	r3, #128	; 0x80
 800550a:	039b      	lsls	r3, r3, #14
 800550c:	4013      	ands	r3, r2
 800550e:	d003      	beq.n	8005518 <HAL_GPIO_Init+0x238>
        {
          temp |= iocurrent;
 8005510:	693a      	ldr	r2, [r7, #16]
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	4313      	orrs	r3, r2
 8005516:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005518:	4b1f      	ldr	r3, [pc, #124]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 800551a:	693a      	ldr	r2, [r7, #16]
 800551c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800551e:	4a1e      	ldr	r2, [pc, #120]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 8005520:	2384      	movs	r3, #132	; 0x84
 8005522:	58d3      	ldr	r3, [r2, r3]
 8005524:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	43da      	mvns	r2, r3
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	4013      	ands	r3, r2
 800552e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	685a      	ldr	r2, [r3, #4]
 8005534:	2380      	movs	r3, #128	; 0x80
 8005536:	029b      	lsls	r3, r3, #10
 8005538:	4013      	ands	r3, r2
 800553a:	d003      	beq.n	8005544 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800553c:	693a      	ldr	r2, [r7, #16]
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	4313      	orrs	r3, r2
 8005542:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005544:	4914      	ldr	r1, [pc, #80]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 8005546:	2284      	movs	r2, #132	; 0x84
 8005548:	693b      	ldr	r3, [r7, #16]
 800554a:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 800554c:	4a12      	ldr	r2, [pc, #72]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 800554e:	2380      	movs	r3, #128	; 0x80
 8005550:	58d3      	ldr	r3, [r2, r3]
 8005552:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	43da      	mvns	r2, r3
 8005558:	693b      	ldr	r3, [r7, #16]
 800555a:	4013      	ands	r3, r2
 800555c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	685a      	ldr	r2, [r3, #4]
 8005562:	2380      	movs	r3, #128	; 0x80
 8005564:	025b      	lsls	r3, r3, #9
 8005566:	4013      	ands	r3, r2
 8005568:	d003      	beq.n	8005572 <HAL_GPIO_Init+0x292>
        {
          temp |= iocurrent;
 800556a:	693a      	ldr	r2, [r7, #16]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	4313      	orrs	r3, r2
 8005570:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005572:	4909      	ldr	r1, [pc, #36]	; (8005598 <HAL_GPIO_Init+0x2b8>)
 8005574:	2280      	movs	r2, #128	; 0x80
 8005576:	693b      	ldr	r3, [r7, #16]
 8005578:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	3301      	adds	r3, #1
 800557e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681a      	ldr	r2, [r3, #0]
 8005584:	697b      	ldr	r3, [r7, #20]
 8005586:	40da      	lsrs	r2, r3
 8005588:	1e13      	subs	r3, r2, #0
 800558a:	d000      	beq.n	800558e <HAL_GPIO_Init+0x2ae>
 800558c:	e6b0      	b.n	80052f0 <HAL_GPIO_Init+0x10>
  }
}
 800558e:	46c0      	nop			; (mov r8, r8)
 8005590:	46c0      	nop			; (mov r8, r8)
 8005592:	46bd      	mov	sp, r7
 8005594:	b006      	add	sp, #24
 8005596:	bd80      	pop	{r7, pc}
 8005598:	40021800 	.word	0x40021800
 800559c:	50000400 	.word	0x50000400
 80055a0:	50000800 	.word	0x50000800
 80055a4:	50000c00 	.word	0x50000c00

080055a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80055a8:	b580      	push	{r7, lr}
 80055aa:	b082      	sub	sp, #8
 80055ac:	af00      	add	r7, sp, #0
 80055ae:	0002      	movs	r2, r0
 80055b0:	1dbb      	adds	r3, r7, #6
 80055b2:	801a      	strh	r2, [r3, #0]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_RISING_IT(GPIO_Pin) != 0x00u)
 80055b4:	4b10      	ldr	r3, [pc, #64]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80055b6:	68db      	ldr	r3, [r3, #12]
 80055b8:	1dba      	adds	r2, r7, #6
 80055ba:	8812      	ldrh	r2, [r2, #0]
 80055bc:	4013      	ands	r3, r2
 80055be:	d008      	beq.n	80055d2 <HAL_GPIO_EXTI_IRQHandler+0x2a>
  {
    __HAL_GPIO_EXTI_CLEAR_RISING_IT(GPIO_Pin);
 80055c0:	4b0d      	ldr	r3, [pc, #52]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80055c2:	1dba      	adds	r2, r7, #6
 80055c4:	8812      	ldrh	r2, [r2, #0]
 80055c6:	60da      	str	r2, [r3, #12]
    HAL_GPIO_EXTI_Rising_Callback(GPIO_Pin);
 80055c8:	1dbb      	adds	r3, r7, #6
 80055ca:	881b      	ldrh	r3, [r3, #0]
 80055cc:	0018      	movs	r0, r3
 80055ce:	f000 f815 	bl	80055fc <HAL_GPIO_EXTI_Rising_Callback>
  }

  if (__HAL_GPIO_EXTI_GET_FALLING_IT(GPIO_Pin) != 0x00u)
 80055d2:	4b09      	ldr	r3, [pc, #36]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	1dba      	adds	r2, r7, #6
 80055d8:	8812      	ldrh	r2, [r2, #0]
 80055da:	4013      	ands	r3, r2
 80055dc:	d008      	beq.n	80055f0 <HAL_GPIO_EXTI_IRQHandler+0x48>
  {
    __HAL_GPIO_EXTI_CLEAR_FALLING_IT(GPIO_Pin);
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <HAL_GPIO_EXTI_IRQHandler+0x50>)
 80055e0:	1dba      	adds	r2, r7, #6
 80055e2:	8812      	ldrh	r2, [r2, #0]
 80055e4:	611a      	str	r2, [r3, #16]
    HAL_GPIO_EXTI_Falling_Callback(GPIO_Pin);
 80055e6:	1dbb      	adds	r3, r7, #6
 80055e8:	881b      	ldrh	r3, [r3, #0]
 80055ea:	0018      	movs	r0, r3
 80055ec:	f000 f810 	bl	8005610 <HAL_GPIO_EXTI_Falling_Callback>
  }
}
 80055f0:	46c0      	nop			; (mov r8, r8)
 80055f2:	46bd      	mov	sp, r7
 80055f4:	b002      	add	sp, #8
 80055f6:	bd80      	pop	{r7, pc}
 80055f8:	40021800 	.word	0x40021800

080055fc <HAL_GPIO_EXTI_Rising_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Rising_Callback(uint16_t GPIO_Pin)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b082      	sub	sp, #8
 8005600:	af00      	add	r7, sp, #0
 8005602:	0002      	movs	r2, r0
 8005604:	1dbb      	adds	r3, r7, #6
 8005606:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Rising_Callback could be implemented in the user file
   */
}
 8005608:	46c0      	nop			; (mov r8, r8)
 800560a:	46bd      	mov	sp, r7
 800560c:	b002      	add	sp, #8
 800560e:	bd80      	pop	{r7, pc}

08005610 <HAL_GPIO_EXTI_Falling_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Falling_Callback(uint16_t GPIO_Pin)
{
 8005610:	b580      	push	{r7, lr}
 8005612:	b082      	sub	sp, #8
 8005614:	af00      	add	r7, sp, #0
 8005616:	0002      	movs	r2, r0
 8005618:	1dbb      	adds	r3, r7, #6
 800561a:	801a      	strh	r2, [r3, #0]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Falling_Callback could be implemented in the user file
   */
}
 800561c:	46c0      	nop			; (mov r8, r8)
 800561e:	46bd      	mov	sp, r7
 8005620:	b002      	add	sp, #8
 8005622:	bd80      	pop	{r7, pc}

08005624 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005624:	b580      	push	{r7, lr}
 8005626:	b084      	sub	sp, #16
 8005628:	af00      	add	r7, sp, #0
 800562a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800562c:	4b19      	ldr	r3, [pc, #100]	; (8005694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	4a19      	ldr	r2, [pc, #100]	; (8005698 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8005632:	4013      	ands	r3, r2
 8005634:	0019      	movs	r1, r3
 8005636:	4b17      	ldr	r3, [pc, #92]	; (8005694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005638:	687a      	ldr	r2, [r7, #4]
 800563a:	430a      	orrs	r2, r1
 800563c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800563e:	687a      	ldr	r2, [r7, #4]
 8005640:	2380      	movs	r3, #128	; 0x80
 8005642:	009b      	lsls	r3, r3, #2
 8005644:	429a      	cmp	r2, r3
 8005646:	d11f      	bne.n	8005688 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8005648:	4b14      	ldr	r3, [pc, #80]	; (800569c <HAL_PWREx_ControlVoltageScaling+0x78>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	0013      	movs	r3, r2
 800564e:	005b      	lsls	r3, r3, #1
 8005650:	189b      	adds	r3, r3, r2
 8005652:	005b      	lsls	r3, r3, #1
 8005654:	4912      	ldr	r1, [pc, #72]	; (80056a0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005656:	0018      	movs	r0, r3
 8005658:	f7fa fd72 	bl	8000140 <__udivsi3>
 800565c:	0003      	movs	r3, r0
 800565e:	3301      	adds	r3, #1
 8005660:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005662:	e008      	b.n	8005676 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	2b00      	cmp	r3, #0
 8005668:	d003      	beq.n	8005672 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3b01      	subs	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	e001      	b.n	8005676 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8005672:	2303      	movs	r3, #3
 8005674:	e009      	b.n	800568a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005676:	4b07      	ldr	r3, [pc, #28]	; (8005694 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8005678:	695a      	ldr	r2, [r3, #20]
 800567a:	2380      	movs	r3, #128	; 0x80
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	401a      	ands	r2, r3
 8005680:	2380      	movs	r3, #128	; 0x80
 8005682:	00db      	lsls	r3, r3, #3
 8005684:	429a      	cmp	r2, r3
 8005686:	d0ed      	beq.n	8005664 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	0018      	movs	r0, r3
 800568c:	46bd      	mov	sp, r7
 800568e:	b004      	add	sp, #16
 8005690:	bd80      	pop	{r7, pc}
 8005692:	46c0      	nop			; (mov r8, r8)
 8005694:	40007000 	.word	0x40007000
 8005698:	fffff9ff 	.word	0xfffff9ff
 800569c:	2000000c 	.word	0x2000000c
 80056a0:	000f4240 	.word	0x000f4240

080056a4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80056a8:	4b03      	ldr	r3, [pc, #12]	; (80056b8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80056aa:	689a      	ldr	r2, [r3, #8]
 80056ac:	23e0      	movs	r3, #224	; 0xe0
 80056ae:	01db      	lsls	r3, r3, #7
 80056b0:	4013      	ands	r3, r2
}
 80056b2:	0018      	movs	r0, r3
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}
 80056b8:	40021000 	.word	0x40021000

080056bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d101      	bne.n	80056ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80056ca:	2301      	movs	r3, #1
 80056cc:	e2fe      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	2201      	movs	r2, #1
 80056d4:	4013      	ands	r3, r2
 80056d6:	d100      	bne.n	80056da <HAL_RCC_OscConfig+0x1e>
 80056d8:	e07c      	b.n	80057d4 <HAL_RCC_OscConfig+0x118>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80056da:	4bc3      	ldr	r3, [pc, #780]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	2238      	movs	r2, #56	; 0x38
 80056e0:	4013      	ands	r3, r2
 80056e2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80056e4:	4bc0      	ldr	r3, [pc, #768]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80056e6:	68db      	ldr	r3, [r3, #12]
 80056e8:	2203      	movs	r2, #3
 80056ea:	4013      	ands	r3, r2
 80056ec:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80056ee:	69bb      	ldr	r3, [r7, #24]
 80056f0:	2b10      	cmp	r3, #16
 80056f2:	d102      	bne.n	80056fa <HAL_RCC_OscConfig+0x3e>
 80056f4:	697b      	ldr	r3, [r7, #20]
 80056f6:	2b03      	cmp	r3, #3
 80056f8:	d002      	beq.n	8005700 <HAL_RCC_OscConfig+0x44>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b08      	cmp	r3, #8
 80056fe:	d10b      	bne.n	8005718 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005700:	4bb9      	ldr	r3, [pc, #740]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005702:	681a      	ldr	r2, [r3, #0]
 8005704:	2380      	movs	r3, #128	; 0x80
 8005706:	029b      	lsls	r3, r3, #10
 8005708:	4013      	ands	r3, r2
 800570a:	d062      	beq.n	80057d2 <HAL_RCC_OscConfig+0x116>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d15e      	bne.n	80057d2 <HAL_RCC_OscConfig+0x116>
      {
        return HAL_ERROR;
 8005714:	2301      	movs	r3, #1
 8005716:	e2d9      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	2380      	movs	r3, #128	; 0x80
 800571e:	025b      	lsls	r3, r3, #9
 8005720:	429a      	cmp	r2, r3
 8005722:	d107      	bne.n	8005734 <HAL_RCC_OscConfig+0x78>
 8005724:	4bb0      	ldr	r3, [pc, #704]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005726:	681a      	ldr	r2, [r3, #0]
 8005728:	4baf      	ldr	r3, [pc, #700]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800572a:	2180      	movs	r1, #128	; 0x80
 800572c:	0249      	lsls	r1, r1, #9
 800572e:	430a      	orrs	r2, r1
 8005730:	601a      	str	r2, [r3, #0]
 8005732:	e020      	b.n	8005776 <HAL_RCC_OscConfig+0xba>
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	685a      	ldr	r2, [r3, #4]
 8005738:	23a0      	movs	r3, #160	; 0xa0
 800573a:	02db      	lsls	r3, r3, #11
 800573c:	429a      	cmp	r2, r3
 800573e:	d10e      	bne.n	800575e <HAL_RCC_OscConfig+0xa2>
 8005740:	4ba9      	ldr	r3, [pc, #676]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	4ba8      	ldr	r3, [pc, #672]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005746:	2180      	movs	r1, #128	; 0x80
 8005748:	02c9      	lsls	r1, r1, #11
 800574a:	430a      	orrs	r2, r1
 800574c:	601a      	str	r2, [r3, #0]
 800574e:	4ba6      	ldr	r3, [pc, #664]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005750:	681a      	ldr	r2, [r3, #0]
 8005752:	4ba5      	ldr	r3, [pc, #660]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005754:	2180      	movs	r1, #128	; 0x80
 8005756:	0249      	lsls	r1, r1, #9
 8005758:	430a      	orrs	r2, r1
 800575a:	601a      	str	r2, [r3, #0]
 800575c:	e00b      	b.n	8005776 <HAL_RCC_OscConfig+0xba>
 800575e:	4ba2      	ldr	r3, [pc, #648]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	4ba1      	ldr	r3, [pc, #644]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005764:	49a1      	ldr	r1, [pc, #644]	; (80059ec <HAL_RCC_OscConfig+0x330>)
 8005766:	400a      	ands	r2, r1
 8005768:	601a      	str	r2, [r3, #0]
 800576a:	4b9f      	ldr	r3, [pc, #636]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	4b9e      	ldr	r3, [pc, #632]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005770:	499f      	ldr	r1, [pc, #636]	; (80059f0 <HAL_RCC_OscConfig+0x334>)
 8005772:	400a      	ands	r2, r1
 8005774:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	685b      	ldr	r3, [r3, #4]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d014      	beq.n	80057a8 <HAL_RCC_OscConfig+0xec>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800577e:	f7ff fc15 	bl	8004fac <HAL_GetTick>
 8005782:	0003      	movs	r3, r0
 8005784:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005786:	e008      	b.n	800579a <HAL_RCC_OscConfig+0xde>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005788:	f7ff fc10 	bl	8004fac <HAL_GetTick>
 800578c:	0002      	movs	r2, r0
 800578e:	693b      	ldr	r3, [r7, #16]
 8005790:	1ad3      	subs	r3, r2, r3
 8005792:	2b64      	cmp	r3, #100	; 0x64
 8005794:	d901      	bls.n	800579a <HAL_RCC_OscConfig+0xde>
          {
            return HAL_TIMEOUT;
 8005796:	2303      	movs	r3, #3
 8005798:	e298      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800579a:	4b93      	ldr	r3, [pc, #588]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800579c:	681a      	ldr	r2, [r3, #0]
 800579e:	2380      	movs	r3, #128	; 0x80
 80057a0:	029b      	lsls	r3, r3, #10
 80057a2:	4013      	ands	r3, r2
 80057a4:	d0f0      	beq.n	8005788 <HAL_RCC_OscConfig+0xcc>
 80057a6:	e015      	b.n	80057d4 <HAL_RCC_OscConfig+0x118>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80057a8:	f7ff fc00 	bl	8004fac <HAL_GetTick>
 80057ac:	0003      	movs	r3, r0
 80057ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057b0:	e008      	b.n	80057c4 <HAL_RCC_OscConfig+0x108>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80057b2:	f7ff fbfb 	bl	8004fac <HAL_GetTick>
 80057b6:	0002      	movs	r2, r0
 80057b8:	693b      	ldr	r3, [r7, #16]
 80057ba:	1ad3      	subs	r3, r2, r3
 80057bc:	2b64      	cmp	r3, #100	; 0x64
 80057be:	d901      	bls.n	80057c4 <HAL_RCC_OscConfig+0x108>
          {
            return HAL_TIMEOUT;
 80057c0:	2303      	movs	r3, #3
 80057c2:	e283      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80057c4:	4b88      	ldr	r3, [pc, #544]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80057c6:	681a      	ldr	r2, [r3, #0]
 80057c8:	2380      	movs	r3, #128	; 0x80
 80057ca:	029b      	lsls	r3, r3, #10
 80057cc:	4013      	ands	r3, r2
 80057ce:	d1f0      	bne.n	80057b2 <HAL_RCC_OscConfig+0xf6>
 80057d0:	e000      	b.n	80057d4 <HAL_RCC_OscConfig+0x118>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80057d2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2202      	movs	r2, #2
 80057da:	4013      	ands	r3, r2
 80057dc:	d100      	bne.n	80057e0 <HAL_RCC_OscConfig+0x124>
 80057de:	e099      	b.n	8005914 <HAL_RCC_OscConfig+0x258>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80057e0:	4b81      	ldr	r3, [pc, #516]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80057e2:	689b      	ldr	r3, [r3, #8]
 80057e4:	2238      	movs	r2, #56	; 0x38
 80057e6:	4013      	ands	r3, r2
 80057e8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80057ea:	4b7f      	ldr	r3, [pc, #508]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80057ec:	68db      	ldr	r3, [r3, #12]
 80057ee:	2203      	movs	r2, #3
 80057f0:	4013      	ands	r3, r2
 80057f2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80057f4:	69bb      	ldr	r3, [r7, #24]
 80057f6:	2b10      	cmp	r3, #16
 80057f8:	d102      	bne.n	8005800 <HAL_RCC_OscConfig+0x144>
 80057fa:	697b      	ldr	r3, [r7, #20]
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d002      	beq.n	8005806 <HAL_RCC_OscConfig+0x14a>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8005800:	69bb      	ldr	r3, [r7, #24]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d135      	bne.n	8005872 <HAL_RCC_OscConfig+0x1b6>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005806:	4b78      	ldr	r3, [pc, #480]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	2380      	movs	r3, #128	; 0x80
 800580c:	00db      	lsls	r3, r3, #3
 800580e:	4013      	ands	r3, r2
 8005810:	d005      	beq.n	800581e <HAL_RCC_OscConfig+0x162>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	68db      	ldr	r3, [r3, #12]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d101      	bne.n	800581e <HAL_RCC_OscConfig+0x162>
      {
        return HAL_ERROR;
 800581a:	2301      	movs	r3, #1
 800581c:	e256      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800581e:	4b72      	ldr	r3, [pc, #456]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005820:	685b      	ldr	r3, [r3, #4]
 8005822:	4a74      	ldr	r2, [pc, #464]	; (80059f4 <HAL_RCC_OscConfig+0x338>)
 8005824:	4013      	ands	r3, r2
 8005826:	0019      	movs	r1, r3
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	695b      	ldr	r3, [r3, #20]
 800582c:	021a      	lsls	r2, r3, #8
 800582e:	4b6e      	ldr	r3, [pc, #440]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005830:	430a      	orrs	r2, r1
 8005832:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005834:	69bb      	ldr	r3, [r7, #24]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d112      	bne.n	8005860 <HAL_RCC_OscConfig+0x1a4>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800583a:	4b6b      	ldr	r3, [pc, #428]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a6e      	ldr	r2, [pc, #440]	; (80059f8 <HAL_RCC_OscConfig+0x33c>)
 8005840:	4013      	ands	r3, r2
 8005842:	0019      	movs	r1, r3
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691a      	ldr	r2, [r3, #16]
 8005848:	4b67      	ldr	r3, [pc, #412]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800584a:	430a      	orrs	r2, r1
 800584c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800584e:	4b66      	ldr	r3, [pc, #408]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	0adb      	lsrs	r3, r3, #11
 8005854:	2207      	movs	r2, #7
 8005856:	4013      	ands	r3, r2
 8005858:	4a68      	ldr	r2, [pc, #416]	; (80059fc <HAL_RCC_OscConfig+0x340>)
 800585a:	40da      	lsrs	r2, r3
 800585c:	4b68      	ldr	r3, [pc, #416]	; (8005a00 <HAL_RCC_OscConfig+0x344>)
 800585e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005860:	4b68      	ldr	r3, [pc, #416]	; (8005a04 <HAL_RCC_OscConfig+0x348>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	0018      	movs	r0, r3
 8005866:	f7ff f9a9 	bl	8004bbc <HAL_InitTick>
 800586a:	1e03      	subs	r3, r0, #0
 800586c:	d051      	beq.n	8005912 <HAL_RCC_OscConfig+0x256>
        {
          return HAL_ERROR;
 800586e:	2301      	movs	r3, #1
 8005870:	e22c      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	68db      	ldr	r3, [r3, #12]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d030      	beq.n	80058dc <HAL_RCC_OscConfig+0x220>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800587a:	4b5b      	ldr	r3, [pc, #364]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a5e      	ldr	r2, [pc, #376]	; (80059f8 <HAL_RCC_OscConfig+0x33c>)
 8005880:	4013      	ands	r3, r2
 8005882:	0019      	movs	r1, r3
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	4b57      	ldr	r3, [pc, #348]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800588a:	430a      	orrs	r2, r1
 800588c:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800588e:	4b56      	ldr	r3, [pc, #344]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005890:	681a      	ldr	r2, [r3, #0]
 8005892:	4b55      	ldr	r3, [pc, #340]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	0049      	lsls	r1, r1, #1
 8005898:	430a      	orrs	r2, r1
 800589a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800589c:	f7ff fb86 	bl	8004fac <HAL_GetTick>
 80058a0:	0003      	movs	r3, r0
 80058a2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058a4:	e008      	b.n	80058b8 <HAL_RCC_OscConfig+0x1fc>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058a6:	f7ff fb81 	bl	8004fac <HAL_GetTick>
 80058aa:	0002      	movs	r2, r0
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	1ad3      	subs	r3, r2, r3
 80058b0:	2b02      	cmp	r3, #2
 80058b2:	d901      	bls.n	80058b8 <HAL_RCC_OscConfig+0x1fc>
          {
            return HAL_TIMEOUT;
 80058b4:	2303      	movs	r3, #3
 80058b6:	e209      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80058b8:	4b4b      	ldr	r3, [pc, #300]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058ba:	681a      	ldr	r2, [r3, #0]
 80058bc:	2380      	movs	r3, #128	; 0x80
 80058be:	00db      	lsls	r3, r3, #3
 80058c0:	4013      	ands	r3, r2
 80058c2:	d0f0      	beq.n	80058a6 <HAL_RCC_OscConfig+0x1ea>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80058c4:	4b48      	ldr	r3, [pc, #288]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	4a4a      	ldr	r2, [pc, #296]	; (80059f4 <HAL_RCC_OscConfig+0x338>)
 80058ca:	4013      	ands	r3, r2
 80058cc:	0019      	movs	r1, r3
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	021a      	lsls	r2, r3, #8
 80058d4:	4b44      	ldr	r3, [pc, #272]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058d6:	430a      	orrs	r2, r1
 80058d8:	605a      	str	r2, [r3, #4]
 80058da:	e01b      	b.n	8005914 <HAL_RCC_OscConfig+0x258>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80058dc:	4b42      	ldr	r3, [pc, #264]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058de:	681a      	ldr	r2, [r3, #0]
 80058e0:	4b41      	ldr	r3, [pc, #260]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80058e2:	4949      	ldr	r1, [pc, #292]	; (8005a08 <HAL_RCC_OscConfig+0x34c>)
 80058e4:	400a      	ands	r2, r1
 80058e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058e8:	f7ff fb60 	bl	8004fac <HAL_GetTick>
 80058ec:	0003      	movs	r3, r0
 80058ee:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80058f0:	e008      	b.n	8005904 <HAL_RCC_OscConfig+0x248>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80058f2:	f7ff fb5b 	bl	8004fac <HAL_GetTick>
 80058f6:	0002      	movs	r2, r0
 80058f8:	693b      	ldr	r3, [r7, #16]
 80058fa:	1ad3      	subs	r3, r2, r3
 80058fc:	2b02      	cmp	r3, #2
 80058fe:	d901      	bls.n	8005904 <HAL_RCC_OscConfig+0x248>
          {
            return HAL_TIMEOUT;
 8005900:	2303      	movs	r3, #3
 8005902:	e1e3      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005904:	4b38      	ldr	r3, [pc, #224]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005906:	681a      	ldr	r2, [r3, #0]
 8005908:	2380      	movs	r3, #128	; 0x80
 800590a:	00db      	lsls	r3, r3, #3
 800590c:	4013      	ands	r3, r2
 800590e:	d1f0      	bne.n	80058f2 <HAL_RCC_OscConfig+0x236>
 8005910:	e000      	b.n	8005914 <HAL_RCC_OscConfig+0x258>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005912:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	2208      	movs	r2, #8
 800591a:	4013      	ands	r3, r2
 800591c:	d047      	beq.n	80059ae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 800591e:	4b32      	ldr	r3, [pc, #200]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005920:	689b      	ldr	r3, [r3, #8]
 8005922:	2238      	movs	r2, #56	; 0x38
 8005924:	4013      	ands	r3, r2
 8005926:	2b18      	cmp	r3, #24
 8005928:	d10a      	bne.n	8005940 <HAL_RCC_OscConfig+0x284>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800592a:	4b2f      	ldr	r3, [pc, #188]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800592c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800592e:	2202      	movs	r2, #2
 8005930:	4013      	ands	r3, r2
 8005932:	d03c      	beq.n	80059ae <HAL_RCC_OscConfig+0x2f2>
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	699b      	ldr	r3, [r3, #24]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d138      	bne.n	80059ae <HAL_RCC_OscConfig+0x2f2>
      {
        return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e1c5      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d019      	beq.n	800597c <HAL_RCC_OscConfig+0x2c0>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8005948:	4b27      	ldr	r3, [pc, #156]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800594a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800594c:	4b26      	ldr	r3, [pc, #152]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800594e:	2101      	movs	r1, #1
 8005950:	430a      	orrs	r2, r1
 8005952:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005954:	f7ff fb2a 	bl	8004fac <HAL_GetTick>
 8005958:	0003      	movs	r3, r0
 800595a:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800595c:	e008      	b.n	8005970 <HAL_RCC_OscConfig+0x2b4>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800595e:	f7ff fb25 	bl	8004fac <HAL_GetTick>
 8005962:	0002      	movs	r2, r0
 8005964:	693b      	ldr	r3, [r7, #16]
 8005966:	1ad3      	subs	r3, r2, r3
 8005968:	2b02      	cmp	r3, #2
 800596a:	d901      	bls.n	8005970 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800596c:	2303      	movs	r3, #3
 800596e:	e1ad      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005970:	4b1d      	ldr	r3, [pc, #116]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005974:	2202      	movs	r2, #2
 8005976:	4013      	ands	r3, r2
 8005978:	d0f1      	beq.n	800595e <HAL_RCC_OscConfig+0x2a2>
 800597a:	e018      	b.n	80059ae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800597c:	4b1a      	ldr	r3, [pc, #104]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 800597e:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8005980:	4b19      	ldr	r3, [pc, #100]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 8005982:	2101      	movs	r1, #1
 8005984:	438a      	bics	r2, r1
 8005986:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005988:	f7ff fb10 	bl	8004fac <HAL_GetTick>
 800598c:	0003      	movs	r3, r0
 800598e:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005990:	e008      	b.n	80059a4 <HAL_RCC_OscConfig+0x2e8>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005992:	f7ff fb0b 	bl	8004fac <HAL_GetTick>
 8005996:	0002      	movs	r2, r0
 8005998:	693b      	ldr	r3, [r7, #16]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b02      	cmp	r3, #2
 800599e:	d901      	bls.n	80059a4 <HAL_RCC_OscConfig+0x2e8>
          {
            return HAL_TIMEOUT;
 80059a0:	2303      	movs	r3, #3
 80059a2:	e193      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80059a4:	4b10      	ldr	r3, [pc, #64]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80059a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059a8:	2202      	movs	r2, #2
 80059aa:	4013      	ands	r3, r2
 80059ac:	d1f1      	bne.n	8005992 <HAL_RCC_OscConfig+0x2d6>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	2204      	movs	r2, #4
 80059b4:	4013      	ands	r3, r2
 80059b6:	d100      	bne.n	80059ba <HAL_RCC_OscConfig+0x2fe>
 80059b8:	e0c6      	b.n	8005b48 <HAL_RCC_OscConfig+0x48c>
  {
    FlagStatus       pwrclkchanged = RESET;
 80059ba:	231f      	movs	r3, #31
 80059bc:	18fb      	adds	r3, r7, r3
 80059be:	2200      	movs	r2, #0
 80059c0:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80059c2:	4b09      	ldr	r3, [pc, #36]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80059c4:	689b      	ldr	r3, [r3, #8]
 80059c6:	2238      	movs	r2, #56	; 0x38
 80059c8:	4013      	ands	r3, r2
 80059ca:	2b20      	cmp	r3, #32
 80059cc:	d11e      	bne.n	8005a0c <HAL_RCC_OscConfig+0x350>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80059ce:	4b06      	ldr	r3, [pc, #24]	; (80059e8 <HAL_RCC_OscConfig+0x32c>)
 80059d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059d2:	2202      	movs	r2, #2
 80059d4:	4013      	ands	r3, r2
 80059d6:	d100      	bne.n	80059da <HAL_RCC_OscConfig+0x31e>
 80059d8:	e0b6      	b.n	8005b48 <HAL_RCC_OscConfig+0x48c>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d000      	beq.n	80059e4 <HAL_RCC_OscConfig+0x328>
 80059e2:	e0b1      	b.n	8005b48 <HAL_RCC_OscConfig+0x48c>
      {
        return HAL_ERROR;
 80059e4:	2301      	movs	r3, #1
 80059e6:	e171      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
 80059e8:	40021000 	.word	0x40021000
 80059ec:	fffeffff 	.word	0xfffeffff
 80059f0:	fffbffff 	.word	0xfffbffff
 80059f4:	ffff80ff 	.word	0xffff80ff
 80059f8:	ffffc7ff 	.word	0xffffc7ff
 80059fc:	00f42400 	.word	0x00f42400
 8005a00:	2000000c 	.word	0x2000000c
 8005a04:	20000010 	.word	0x20000010
 8005a08:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005a0c:	4bb1      	ldr	r3, [pc, #708]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005a0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a10:	2380      	movs	r3, #128	; 0x80
 8005a12:	055b      	lsls	r3, r3, #21
 8005a14:	4013      	ands	r3, r2
 8005a16:	d101      	bne.n	8005a1c <HAL_RCC_OscConfig+0x360>
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e000      	b.n	8005a1e <HAL_RCC_OscConfig+0x362>
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d011      	beq.n	8005a46 <HAL_RCC_OscConfig+0x38a>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8005a22:	4bac      	ldr	r3, [pc, #688]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005a24:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a26:	4bab      	ldr	r3, [pc, #684]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005a28:	2180      	movs	r1, #128	; 0x80
 8005a2a:	0549      	lsls	r1, r1, #21
 8005a2c:	430a      	orrs	r2, r1
 8005a2e:	63da      	str	r2, [r3, #60]	; 0x3c
 8005a30:	4ba8      	ldr	r3, [pc, #672]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005a32:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005a34:	2380      	movs	r3, #128	; 0x80
 8005a36:	055b      	lsls	r3, r3, #21
 8005a38:	4013      	ands	r3, r2
 8005a3a:	60fb      	str	r3, [r7, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8005a3e:	231f      	movs	r3, #31
 8005a40:	18fb      	adds	r3, r7, r3
 8005a42:	2201      	movs	r2, #1
 8005a44:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a46:	4ba4      	ldr	r3, [pc, #656]	; (8005cd8 <HAL_RCC_OscConfig+0x61c>)
 8005a48:	681a      	ldr	r2, [r3, #0]
 8005a4a:	2380      	movs	r3, #128	; 0x80
 8005a4c:	005b      	lsls	r3, r3, #1
 8005a4e:	4013      	ands	r3, r2
 8005a50:	d11a      	bne.n	8005a88 <HAL_RCC_OscConfig+0x3cc>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005a52:	4ba1      	ldr	r3, [pc, #644]	; (8005cd8 <HAL_RCC_OscConfig+0x61c>)
 8005a54:	681a      	ldr	r2, [r3, #0]
 8005a56:	4ba0      	ldr	r3, [pc, #640]	; (8005cd8 <HAL_RCC_OscConfig+0x61c>)
 8005a58:	2180      	movs	r1, #128	; 0x80
 8005a5a:	0049      	lsls	r1, r1, #1
 8005a5c:	430a      	orrs	r2, r1
 8005a5e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8005a60:	f7ff faa4 	bl	8004fac <HAL_GetTick>
 8005a64:	0003      	movs	r3, r0
 8005a66:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a68:	e008      	b.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005a6a:	f7ff fa9f 	bl	8004fac <HAL_GetTick>
 8005a6e:	0002      	movs	r2, r0
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	1ad3      	subs	r3, r2, r3
 8005a74:	2b02      	cmp	r3, #2
 8005a76:	d901      	bls.n	8005a7c <HAL_RCC_OscConfig+0x3c0>
          {
            return HAL_TIMEOUT;
 8005a78:	2303      	movs	r3, #3
 8005a7a:	e127      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005a7c:	4b96      	ldr	r3, [pc, #600]	; (8005cd8 <HAL_RCC_OscConfig+0x61c>)
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	2380      	movs	r3, #128	; 0x80
 8005a82:	005b      	lsls	r3, r3, #1
 8005a84:	4013      	ands	r3, r2
 8005a86:	d0f0      	beq.n	8005a6a <HAL_RCC_OscConfig+0x3ae>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	689b      	ldr	r3, [r3, #8]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d106      	bne.n	8005a9e <HAL_RCC_OscConfig+0x3e2>
 8005a90:	4b90      	ldr	r3, [pc, #576]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005a92:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005a94:	4b8f      	ldr	r3, [pc, #572]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005a96:	2101      	movs	r1, #1
 8005a98:	430a      	orrs	r2, r1
 8005a9a:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a9c:	e01c      	b.n	8005ad8 <HAL_RCC_OscConfig+0x41c>
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	689b      	ldr	r3, [r3, #8]
 8005aa2:	2b05      	cmp	r3, #5
 8005aa4:	d10c      	bne.n	8005ac0 <HAL_RCC_OscConfig+0x404>
 8005aa6:	4b8b      	ldr	r3, [pc, #556]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005aa8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005aaa:	4b8a      	ldr	r3, [pc, #552]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005aac:	2104      	movs	r1, #4
 8005aae:	430a      	orrs	r2, r1
 8005ab0:	65da      	str	r2, [r3, #92]	; 0x5c
 8005ab2:	4b88      	ldr	r3, [pc, #544]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005ab4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ab6:	4b87      	ldr	r3, [pc, #540]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005ab8:	2101      	movs	r1, #1
 8005aba:	430a      	orrs	r2, r1
 8005abc:	65da      	str	r2, [r3, #92]	; 0x5c
 8005abe:	e00b      	b.n	8005ad8 <HAL_RCC_OscConfig+0x41c>
 8005ac0:	4b84      	ldr	r3, [pc, #528]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005ac2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ac4:	4b83      	ldr	r3, [pc, #524]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005ac6:	2101      	movs	r1, #1
 8005ac8:	438a      	bics	r2, r1
 8005aca:	65da      	str	r2, [r3, #92]	; 0x5c
 8005acc:	4b81      	ldr	r3, [pc, #516]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005ace:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8005ad0:	4b80      	ldr	r3, [pc, #512]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005ad2:	2104      	movs	r1, #4
 8005ad4:	438a      	bics	r2, r1
 8005ad6:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	689b      	ldr	r3, [r3, #8]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d014      	beq.n	8005b0a <HAL_RCC_OscConfig+0x44e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005ae0:	f7ff fa64 	bl	8004fac <HAL_GetTick>
 8005ae4:	0003      	movs	r3, r0
 8005ae6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005ae8:	e009      	b.n	8005afe <HAL_RCC_OscConfig+0x442>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005aea:	f7ff fa5f 	bl	8004fac <HAL_GetTick>
 8005aee:	0002      	movs	r2, r0
 8005af0:	693b      	ldr	r3, [r7, #16]
 8005af2:	1ad3      	subs	r3, r2, r3
 8005af4:	4a79      	ldr	r2, [pc, #484]	; (8005cdc <HAL_RCC_OscConfig+0x620>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_OscConfig+0x442>
          {
            return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e0e6      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005afe:	4b75      	ldr	r3, [pc, #468]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005b00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b02:	2202      	movs	r2, #2
 8005b04:	4013      	ands	r3, r2
 8005b06:	d0f0      	beq.n	8005aea <HAL_RCC_OscConfig+0x42e>
 8005b08:	e013      	b.n	8005b32 <HAL_RCC_OscConfig+0x476>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b0a:	f7ff fa4f 	bl	8004fac <HAL_GetTick>
 8005b0e:	0003      	movs	r3, r0
 8005b10:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b12:	e009      	b.n	8005b28 <HAL_RCC_OscConfig+0x46c>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005b14:	f7ff fa4a 	bl	8004fac <HAL_GetTick>
 8005b18:	0002      	movs	r2, r0
 8005b1a:	693b      	ldr	r3, [r7, #16]
 8005b1c:	1ad3      	subs	r3, r2, r3
 8005b1e:	4a6f      	ldr	r2, [pc, #444]	; (8005cdc <HAL_RCC_OscConfig+0x620>)
 8005b20:	4293      	cmp	r3, r2
 8005b22:	d901      	bls.n	8005b28 <HAL_RCC_OscConfig+0x46c>
          {
            return HAL_TIMEOUT;
 8005b24:	2303      	movs	r3, #3
 8005b26:	e0d1      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005b28:	4b6a      	ldr	r3, [pc, #424]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005b2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b2c:	2202      	movs	r2, #2
 8005b2e:	4013      	ands	r3, r2
 8005b30:	d1f0      	bne.n	8005b14 <HAL_RCC_OscConfig+0x458>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8005b32:	231f      	movs	r3, #31
 8005b34:	18fb      	adds	r3, r7, r3
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	2b01      	cmp	r3, #1
 8005b3a:	d105      	bne.n	8005b48 <HAL_RCC_OscConfig+0x48c>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8005b3c:	4b65      	ldr	r3, [pc, #404]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005b3e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005b40:	4b64      	ldr	r3, [pc, #400]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005b42:	4967      	ldr	r1, [pc, #412]	; (8005ce0 <HAL_RCC_OscConfig+0x624>)
 8005b44:	400a      	ands	r2, r1
 8005b46:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d100      	bne.n	8005b52 <HAL_RCC_OscConfig+0x496>
 8005b50:	e0bb      	b.n	8005cca <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005b52:	4b60      	ldr	r3, [pc, #384]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005b54:	689b      	ldr	r3, [r3, #8]
 8005b56:	2238      	movs	r2, #56	; 0x38
 8005b58:	4013      	ands	r3, r2
 8005b5a:	2b10      	cmp	r3, #16
 8005b5c:	d100      	bne.n	8005b60 <HAL_RCC_OscConfig+0x4a4>
 8005b5e:	e07b      	b.n	8005c58 <HAL_RCC_OscConfig+0x59c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	69db      	ldr	r3, [r3, #28]
 8005b64:	2b02      	cmp	r3, #2
 8005b66:	d156      	bne.n	8005c16 <HAL_RCC_OscConfig+0x55a>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005b68:	4b5a      	ldr	r3, [pc, #360]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	4b59      	ldr	r3, [pc, #356]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005b6e:	495d      	ldr	r1, [pc, #372]	; (8005ce4 <HAL_RCC_OscConfig+0x628>)
 8005b70:	400a      	ands	r2, r1
 8005b72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005b74:	f7ff fa1a 	bl	8004fac <HAL_GetTick>
 8005b78:	0003      	movs	r3, r0
 8005b7a:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b7c:	e008      	b.n	8005b90 <HAL_RCC_OscConfig+0x4d4>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005b7e:	f7ff fa15 	bl	8004fac <HAL_GetTick>
 8005b82:	0002      	movs	r2, r0
 8005b84:	693b      	ldr	r3, [r7, #16]
 8005b86:	1ad3      	subs	r3, r2, r3
 8005b88:	2b02      	cmp	r3, #2
 8005b8a:	d901      	bls.n	8005b90 <HAL_RCC_OscConfig+0x4d4>
          {
            return HAL_TIMEOUT;
 8005b8c:	2303      	movs	r3, #3
 8005b8e:	e09d      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005b90:	4b50      	ldr	r3, [pc, #320]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	2380      	movs	r3, #128	; 0x80
 8005b96:	049b      	lsls	r3, r3, #18
 8005b98:	4013      	ands	r3, r2
 8005b9a:	d1f0      	bne.n	8005b7e <HAL_RCC_OscConfig+0x4c2>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005b9c:	4b4d      	ldr	r3, [pc, #308]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005b9e:	68db      	ldr	r3, [r3, #12]
 8005ba0:	4a51      	ldr	r2, [pc, #324]	; (8005ce8 <HAL_RCC_OscConfig+0x62c>)
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	0019      	movs	r1, r3
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	6a1a      	ldr	r2, [r3, #32]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bae:	431a      	orrs	r2, r3
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bb4:	021b      	lsls	r3, r3, #8
 8005bb6:	431a      	orrs	r2, r3
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bbc:	431a      	orrs	r2, r3
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005bc2:	431a      	orrs	r2, r3
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bc8:	431a      	orrs	r2, r3
 8005bca:	4b42      	ldr	r3, [pc, #264]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005bcc:	430a      	orrs	r2, r1
 8005bce:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005bd0:	4b40      	ldr	r3, [pc, #256]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005bd2:	681a      	ldr	r2, [r3, #0]
 8005bd4:	4b3f      	ldr	r3, [pc, #252]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005bd6:	2180      	movs	r1, #128	; 0x80
 8005bd8:	0449      	lsls	r1, r1, #17
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8005bde:	4b3d      	ldr	r3, [pc, #244]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005be0:	68da      	ldr	r2, [r3, #12]
 8005be2:	4b3c      	ldr	r3, [pc, #240]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005be4:	2180      	movs	r1, #128	; 0x80
 8005be6:	0549      	lsls	r1, r1, #21
 8005be8:	430a      	orrs	r2, r1
 8005bea:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bec:	f7ff f9de 	bl	8004fac <HAL_GetTick>
 8005bf0:	0003      	movs	r3, r0
 8005bf2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005bf4:	e008      	b.n	8005c08 <HAL_RCC_OscConfig+0x54c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005bf6:	f7ff f9d9 	bl	8004fac <HAL_GetTick>
 8005bfa:	0002      	movs	r2, r0
 8005bfc:	693b      	ldr	r3, [r7, #16]
 8005bfe:	1ad3      	subs	r3, r2, r3
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d901      	bls.n	8005c08 <HAL_RCC_OscConfig+0x54c>
          {
            return HAL_TIMEOUT;
 8005c04:	2303      	movs	r3, #3
 8005c06:	e061      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005c08:	4b32      	ldr	r3, [pc, #200]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005c0a:	681a      	ldr	r2, [r3, #0]
 8005c0c:	2380      	movs	r3, #128	; 0x80
 8005c0e:	049b      	lsls	r3, r3, #18
 8005c10:	4013      	ands	r3, r2
 8005c12:	d0f0      	beq.n	8005bf6 <HAL_RCC_OscConfig+0x53a>
 8005c14:	e059      	b.n	8005cca <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005c16:	4b2f      	ldr	r3, [pc, #188]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b2e      	ldr	r3, [pc, #184]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005c1c:	4931      	ldr	r1, [pc, #196]	; (8005ce4 <HAL_RCC_OscConfig+0x628>)
 8005c1e:	400a      	ands	r2, r1
 8005c20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c22:	f7ff f9c3 	bl	8004fac <HAL_GetTick>
 8005c26:	0003      	movs	r3, r0
 8005c28:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c2a:	e008      	b.n	8005c3e <HAL_RCC_OscConfig+0x582>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005c2c:	f7ff f9be 	bl	8004fac <HAL_GetTick>
 8005c30:	0002      	movs	r2, r0
 8005c32:	693b      	ldr	r3, [r7, #16]
 8005c34:	1ad3      	subs	r3, r2, r3
 8005c36:	2b02      	cmp	r3, #2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_OscConfig+0x582>
          {
            return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e046      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005c3e:	4b25      	ldr	r3, [pc, #148]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	2380      	movs	r3, #128	; 0x80
 8005c44:	049b      	lsls	r3, r3, #18
 8005c46:	4013      	ands	r3, r2
 8005c48:	d1f0      	bne.n	8005c2c <HAL_RCC_OscConfig+0x570>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8005c4a:	4b22      	ldr	r3, [pc, #136]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005c4c:	68da      	ldr	r2, [r3, #12]
 8005c4e:	4b21      	ldr	r3, [pc, #132]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005c50:	4926      	ldr	r1, [pc, #152]	; (8005cec <HAL_RCC_OscConfig+0x630>)
 8005c52:	400a      	ands	r2, r1
 8005c54:	60da      	str	r2, [r3, #12]
 8005c56:	e038      	b.n	8005cca <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	69db      	ldr	r3, [r3, #28]
 8005c5c:	2b01      	cmp	r3, #1
 8005c5e:	d101      	bne.n	8005c64 <HAL_RCC_OscConfig+0x5a8>
      {
        return HAL_ERROR;
 8005c60:	2301      	movs	r3, #1
 8005c62:	e033      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8005c64:	4b1b      	ldr	r3, [pc, #108]	; (8005cd4 <HAL_RCC_OscConfig+0x618>)
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c6a:	697b      	ldr	r3, [r7, #20]
 8005c6c:	2203      	movs	r2, #3
 8005c6e:	401a      	ands	r2, r3
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6a1b      	ldr	r3, [r3, #32]
 8005c74:	429a      	cmp	r2, r3
 8005c76:	d126      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c78:	697b      	ldr	r3, [r7, #20]
 8005c7a:	2270      	movs	r2, #112	; 0x70
 8005c7c:	401a      	ands	r2, r3
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005c82:	429a      	cmp	r2, r3
 8005c84:	d11f      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005c86:	697a      	ldr	r2, [r7, #20]
 8005c88:	23fe      	movs	r3, #254	; 0xfe
 8005c8a:	01db      	lsls	r3, r3, #7
 8005c8c:	401a      	ands	r2, r3
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c92:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d116      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x60a>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005c98:	697a      	ldr	r2, [r7, #20]
 8005c9a:	23f8      	movs	r3, #248	; 0xf8
 8005c9c:	039b      	lsls	r3, r3, #14
 8005c9e:	401a      	ands	r2, r3
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ca4:	429a      	cmp	r2, r3
 8005ca6:	d10e      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x60a>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005ca8:	697a      	ldr	r2, [r7, #20]
 8005caa:	23e0      	movs	r3, #224	; 0xe0
 8005cac:	051b      	lsls	r3, r3, #20
 8005cae:	401a      	ands	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005cb4:	429a      	cmp	r2, r3
 8005cb6:	d106      	bne.n	8005cc6 <HAL_RCC_OscConfig+0x60a>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8005cb8:	697b      	ldr	r3, [r7, #20]
 8005cba:	0f5b      	lsrs	r3, r3, #29
 8005cbc:	075a      	lsls	r2, r3, #29
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d001      	beq.n	8005cca <HAL_RCC_OscConfig+0x60e>
        {
          return HAL_ERROR;
 8005cc6:	2301      	movs	r3, #1
 8005cc8:	e000      	b.n	8005ccc <HAL_RCC_OscConfig+0x610>
        }
      }
    }
  }
  return HAL_OK;
 8005cca:	2300      	movs	r3, #0
}
 8005ccc:	0018      	movs	r0, r3
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	b008      	add	sp, #32
 8005cd2:	bd80      	pop	{r7, pc}
 8005cd4:	40021000 	.word	0x40021000
 8005cd8:	40007000 	.word	0x40007000
 8005cdc:	00001388 	.word	0x00001388
 8005ce0:	efffffff 	.word	0xefffffff
 8005ce4:	feffffff 	.word	0xfeffffff
 8005ce8:	11c1808c 	.word	0x11c1808c
 8005cec:	eefefffc 	.word	0xeefefffc

08005cf0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005cf0:	b580      	push	{r7, lr}
 8005cf2:	b084      	sub	sp, #16
 8005cf4:	af00      	add	r7, sp, #0
 8005cf6:	6078      	str	r0, [r7, #4]
 8005cf8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e0e9      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005d04:	4b76      	ldr	r3, [pc, #472]	; (8005ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	2207      	movs	r2, #7
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	683a      	ldr	r2, [r7, #0]
 8005d0e:	429a      	cmp	r2, r3
 8005d10:	d91e      	bls.n	8005d50 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005d12:	4b73      	ldr	r3, [pc, #460]	; (8005ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	2207      	movs	r2, #7
 8005d18:	4393      	bics	r3, r2
 8005d1a:	0019      	movs	r1, r3
 8005d1c:	4b70      	ldr	r3, [pc, #448]	; (8005ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d1e:	683a      	ldr	r2, [r7, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005d24:	f7ff f942 	bl	8004fac <HAL_GetTick>
 8005d28:	0003      	movs	r3, r0
 8005d2a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d2c:	e009      	b.n	8005d42 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005d2e:	f7ff f93d 	bl	8004fac <HAL_GetTick>
 8005d32:	0002      	movs	r2, r0
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	1ad3      	subs	r3, r2, r3
 8005d38:	4a6a      	ldr	r2, [pc, #424]	; (8005ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d901      	bls.n	8005d42 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8005d3e:	2303      	movs	r3, #3
 8005d40:	e0ca      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005d42:	4b67      	ldr	r3, [pc, #412]	; (8005ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	2207      	movs	r2, #7
 8005d48:	4013      	ands	r3, r2
 8005d4a:	683a      	ldr	r2, [r7, #0]
 8005d4c:	429a      	cmp	r2, r3
 8005d4e:	d1ee      	bne.n	8005d2e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	2202      	movs	r2, #2
 8005d56:	4013      	ands	r3, r2
 8005d58:	d015      	beq.n	8005d86 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	2204      	movs	r2, #4
 8005d60:	4013      	ands	r3, r2
 8005d62:	d006      	beq.n	8005d72 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8005d64:	4b60      	ldr	r3, [pc, #384]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005d66:	689a      	ldr	r2, [r3, #8]
 8005d68:	4b5f      	ldr	r3, [pc, #380]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005d6a:	21e0      	movs	r1, #224	; 0xe0
 8005d6c:	01c9      	lsls	r1, r1, #7
 8005d6e:	430a      	orrs	r2, r1
 8005d70:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005d72:	4b5d      	ldr	r3, [pc, #372]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005d74:	689b      	ldr	r3, [r3, #8]
 8005d76:	4a5d      	ldr	r2, [pc, #372]	; (8005eec <HAL_RCC_ClockConfig+0x1fc>)
 8005d78:	4013      	ands	r3, r2
 8005d7a:	0019      	movs	r1, r3
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	689a      	ldr	r2, [r3, #8]
 8005d80:	4b59      	ldr	r3, [pc, #356]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005d82:	430a      	orrs	r2, r1
 8005d84:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	d057      	beq.n	8005e40 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	685b      	ldr	r3, [r3, #4]
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d107      	bne.n	8005da8 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005d98:	4b53      	ldr	r3, [pc, #332]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	2380      	movs	r3, #128	; 0x80
 8005d9e:	029b      	lsls	r3, r3, #10
 8005da0:	4013      	ands	r3, r2
 8005da2:	d12b      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005da4:	2301      	movs	r3, #1
 8005da6:	e097      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	685b      	ldr	r3, [r3, #4]
 8005dac:	2b02      	cmp	r3, #2
 8005dae:	d107      	bne.n	8005dc0 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005db0:	4b4d      	ldr	r3, [pc, #308]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	2380      	movs	r3, #128	; 0x80
 8005db6:	049b      	lsls	r3, r3, #18
 8005db8:	4013      	ands	r3, r2
 8005dba:	d11f      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dbc:	2301      	movs	r3, #1
 8005dbe:	e08b      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d107      	bne.n	8005dd8 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005dc8:	4b47      	ldr	r3, [pc, #284]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005dca:	681a      	ldr	r2, [r3, #0]
 8005dcc:	2380      	movs	r3, #128	; 0x80
 8005dce:	00db      	lsls	r3, r3, #3
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	d113      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dd4:	2301      	movs	r3, #1
 8005dd6:	e07f      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d106      	bne.n	8005dee <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005de0:	4b41      	ldr	r3, [pc, #260]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005de2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005de4:	2202      	movs	r2, #2
 8005de6:	4013      	ands	r3, r2
 8005de8:	d108      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005dea:	2301      	movs	r3, #1
 8005dec:	e074      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005dee:	4b3e      	ldr	r3, [pc, #248]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005df0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005df2:	2202      	movs	r2, #2
 8005df4:	4013      	ands	r3, r2
 8005df6:	d101      	bne.n	8005dfc <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e06d      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005dfc:	4b3a      	ldr	r3, [pc, #232]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005dfe:	689b      	ldr	r3, [r3, #8]
 8005e00:	2207      	movs	r2, #7
 8005e02:	4393      	bics	r3, r2
 8005e04:	0019      	movs	r1, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	685a      	ldr	r2, [r3, #4]
 8005e0a:	4b37      	ldr	r3, [pc, #220]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005e0c:	430a      	orrs	r2, r1
 8005e0e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005e10:	f7ff f8cc 	bl	8004fac <HAL_GetTick>
 8005e14:	0003      	movs	r3, r0
 8005e16:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e18:	e009      	b.n	8005e2e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e1a:	f7ff f8c7 	bl	8004fac <HAL_GetTick>
 8005e1e:	0002      	movs	r2, r0
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	1ad3      	subs	r3, r2, r3
 8005e24:	4a2f      	ldr	r2, [pc, #188]	; (8005ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d901      	bls.n	8005e2e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e054      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005e2e:	4b2e      	ldr	r3, [pc, #184]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005e30:	689b      	ldr	r3, [r3, #8]
 8005e32:	2238      	movs	r2, #56	; 0x38
 8005e34:	401a      	ands	r2, r3
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	00db      	lsls	r3, r3, #3
 8005e3c:	429a      	cmp	r2, r3
 8005e3e:	d1ec      	bne.n	8005e1a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005e40:	4b27      	ldr	r3, [pc, #156]	; (8005ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2207      	movs	r2, #7
 8005e46:	4013      	ands	r3, r2
 8005e48:	683a      	ldr	r2, [r7, #0]
 8005e4a:	429a      	cmp	r2, r3
 8005e4c:	d21e      	bcs.n	8005e8c <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005e4e:	4b24      	ldr	r3, [pc, #144]	; (8005ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	2207      	movs	r2, #7
 8005e54:	4393      	bics	r3, r2
 8005e56:	0019      	movs	r1, r3
 8005e58:	4b21      	ldr	r3, [pc, #132]	; (8005ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e5a:	683a      	ldr	r2, [r7, #0]
 8005e5c:	430a      	orrs	r2, r1
 8005e5e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005e60:	f7ff f8a4 	bl	8004fac <HAL_GetTick>
 8005e64:	0003      	movs	r3, r0
 8005e66:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e68:	e009      	b.n	8005e7e <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005e6a:	f7ff f89f 	bl	8004fac <HAL_GetTick>
 8005e6e:	0002      	movs	r2, r0
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	1ad3      	subs	r3, r2, r3
 8005e74:	4a1b      	ldr	r2, [pc, #108]	; (8005ee4 <HAL_RCC_ClockConfig+0x1f4>)
 8005e76:	4293      	cmp	r3, r2
 8005e78:	d901      	bls.n	8005e7e <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8005e7a:	2303      	movs	r3, #3
 8005e7c:	e02c      	b.n	8005ed8 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8005e7e:	4b18      	ldr	r3, [pc, #96]	; (8005ee0 <HAL_RCC_ClockConfig+0x1f0>)
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	2207      	movs	r2, #7
 8005e84:	4013      	ands	r3, r2
 8005e86:	683a      	ldr	r2, [r7, #0]
 8005e88:	429a      	cmp	r2, r3
 8005e8a:	d1ee      	bne.n	8005e6a <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2204      	movs	r2, #4
 8005e92:	4013      	ands	r3, r2
 8005e94:	d009      	beq.n	8005eaa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8005e96:	4b14      	ldr	r3, [pc, #80]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005e98:	689b      	ldr	r3, [r3, #8]
 8005e9a:	4a15      	ldr	r2, [pc, #84]	; (8005ef0 <HAL_RCC_ClockConfig+0x200>)
 8005e9c:	4013      	ands	r3, r2
 8005e9e:	0019      	movs	r1, r3
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68da      	ldr	r2, [r3, #12]
 8005ea4:	4b10      	ldr	r3, [pc, #64]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005ea6:	430a      	orrs	r2, r1
 8005ea8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8005eaa:	f000 f829 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 8005eae:	0001      	movs	r1, r0
 8005eb0:	4b0d      	ldr	r3, [pc, #52]	; (8005ee8 <HAL_RCC_ClockConfig+0x1f8>)
 8005eb2:	689b      	ldr	r3, [r3, #8]
 8005eb4:	0a1b      	lsrs	r3, r3, #8
 8005eb6:	220f      	movs	r2, #15
 8005eb8:	401a      	ands	r2, r3
 8005eba:	4b0e      	ldr	r3, [pc, #56]	; (8005ef4 <HAL_RCC_ClockConfig+0x204>)
 8005ebc:	0092      	lsls	r2, r2, #2
 8005ebe:	58d3      	ldr	r3, [r2, r3]
 8005ec0:	221f      	movs	r2, #31
 8005ec2:	4013      	ands	r3, r2
 8005ec4:	000a      	movs	r2, r1
 8005ec6:	40da      	lsrs	r2, r3
 8005ec8:	4b0b      	ldr	r3, [pc, #44]	; (8005ef8 <HAL_RCC_ClockConfig+0x208>)
 8005eca:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005ecc:	4b0b      	ldr	r3, [pc, #44]	; (8005efc <HAL_RCC_ClockConfig+0x20c>)
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	0018      	movs	r0, r3
 8005ed2:	f7fe fe73 	bl	8004bbc <HAL_InitTick>
 8005ed6:	0003      	movs	r3, r0
}
 8005ed8:	0018      	movs	r0, r3
 8005eda:	46bd      	mov	sp, r7
 8005edc:	b004      	add	sp, #16
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	40022000 	.word	0x40022000
 8005ee4:	00001388 	.word	0x00001388
 8005ee8:	40021000 	.word	0x40021000
 8005eec:	fffff0ff 	.word	0xfffff0ff
 8005ef0:	ffff8fff 	.word	0xffff8fff
 8005ef4:	0800d90c 	.word	0x0800d90c
 8005ef8:	2000000c 	.word	0x2000000c
 8005efc:	20000010 	.word	0x20000010

08005f00 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005f00:	b580      	push	{r7, lr}
 8005f02:	b086      	sub	sp, #24
 8005f04:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8005f06:	4b3c      	ldr	r3, [pc, #240]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f08:	689b      	ldr	r3, [r3, #8]
 8005f0a:	2238      	movs	r2, #56	; 0x38
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	d10f      	bne.n	8005f30 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8005f10:	4b39      	ldr	r3, [pc, #228]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	0adb      	lsrs	r3, r3, #11
 8005f16:	2207      	movs	r2, #7
 8005f18:	4013      	ands	r3, r2
 8005f1a:	2201      	movs	r2, #1
 8005f1c:	409a      	lsls	r2, r3
 8005f1e:	0013      	movs	r3, r2
 8005f20:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8005f22:	6839      	ldr	r1, [r7, #0]
 8005f24:	4835      	ldr	r0, [pc, #212]	; (8005ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f26:	f7fa f90b 	bl	8000140 <__udivsi3>
 8005f2a:	0003      	movs	r3, r0
 8005f2c:	613b      	str	r3, [r7, #16]
 8005f2e:	e05d      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005f30:	4b31      	ldr	r3, [pc, #196]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f32:	689b      	ldr	r3, [r3, #8]
 8005f34:	2238      	movs	r2, #56	; 0x38
 8005f36:	4013      	ands	r3, r2
 8005f38:	2b08      	cmp	r3, #8
 8005f3a:	d102      	bne.n	8005f42 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005f3c:	4b30      	ldr	r3, [pc, #192]	; (8006000 <HAL_RCC_GetSysClockFreq+0x100>)
 8005f3e:	613b      	str	r3, [r7, #16]
 8005f40:	e054      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005f42:	4b2d      	ldr	r3, [pc, #180]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f44:	689b      	ldr	r3, [r3, #8]
 8005f46:	2238      	movs	r2, #56	; 0x38
 8005f48:	4013      	ands	r3, r2
 8005f4a:	2b10      	cmp	r3, #16
 8005f4c:	d138      	bne.n	8005fc0 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8005f4e:	4b2a      	ldr	r3, [pc, #168]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f50:	68db      	ldr	r3, [r3, #12]
 8005f52:	2203      	movs	r2, #3
 8005f54:	4013      	ands	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f58:	4b27      	ldr	r3, [pc, #156]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	091b      	lsrs	r3, r3, #4
 8005f5e:	2207      	movs	r2, #7
 8005f60:	4013      	ands	r3, r2
 8005f62:	3301      	adds	r3, #1
 8005f64:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	2b03      	cmp	r3, #3
 8005f6a:	d10d      	bne.n	8005f88 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005f6c:	68b9      	ldr	r1, [r7, #8]
 8005f6e:	4824      	ldr	r0, [pc, #144]	; (8006000 <HAL_RCC_GetSysClockFreq+0x100>)
 8005f70:	f7fa f8e6 	bl	8000140 <__udivsi3>
 8005f74:	0003      	movs	r3, r0
 8005f76:	0019      	movs	r1, r3
 8005f78:	4b1f      	ldr	r3, [pc, #124]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	0a1b      	lsrs	r3, r3, #8
 8005f7e:	227f      	movs	r2, #127	; 0x7f
 8005f80:	4013      	ands	r3, r2
 8005f82:	434b      	muls	r3, r1
 8005f84:	617b      	str	r3, [r7, #20]
        break;
 8005f86:	e00d      	b.n	8005fa4 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8005f88:	68b9      	ldr	r1, [r7, #8]
 8005f8a:	481c      	ldr	r0, [pc, #112]	; (8005ffc <HAL_RCC_GetSysClockFreq+0xfc>)
 8005f8c:	f7fa f8d8 	bl	8000140 <__udivsi3>
 8005f90:	0003      	movs	r3, r0
 8005f92:	0019      	movs	r1, r3
 8005f94:	4b18      	ldr	r3, [pc, #96]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005f96:	68db      	ldr	r3, [r3, #12]
 8005f98:	0a1b      	lsrs	r3, r3, #8
 8005f9a:	227f      	movs	r2, #127	; 0x7f
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	434b      	muls	r3, r1
 8005fa0:	617b      	str	r3, [r7, #20]
        break;
 8005fa2:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8005fa4:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fa6:	68db      	ldr	r3, [r3, #12]
 8005fa8:	0f5b      	lsrs	r3, r3, #29
 8005faa:	2207      	movs	r2, #7
 8005fac:	4013      	ands	r3, r2
 8005fae:	3301      	adds	r3, #1
 8005fb0:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8005fb2:	6879      	ldr	r1, [r7, #4]
 8005fb4:	6978      	ldr	r0, [r7, #20]
 8005fb6:	f7fa f8c3 	bl	8000140 <__udivsi3>
 8005fba:	0003      	movs	r3, r0
 8005fbc:	613b      	str	r3, [r7, #16]
 8005fbe:	e015      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	2238      	movs	r2, #56	; 0x38
 8005fc6:	4013      	ands	r3, r2
 8005fc8:	2b20      	cmp	r3, #32
 8005fca:	d103      	bne.n	8005fd4 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8005fcc:	2380      	movs	r3, #128	; 0x80
 8005fce:	021b      	lsls	r3, r3, #8
 8005fd0:	613b      	str	r3, [r7, #16]
 8005fd2:	e00b      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8005fd4:	4b08      	ldr	r3, [pc, #32]	; (8005ff8 <HAL_RCC_GetSysClockFreq+0xf8>)
 8005fd6:	689b      	ldr	r3, [r3, #8]
 8005fd8:	2238      	movs	r2, #56	; 0x38
 8005fda:	4013      	ands	r3, r2
 8005fdc:	2b18      	cmp	r3, #24
 8005fde:	d103      	bne.n	8005fe8 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8005fe0:	23fa      	movs	r3, #250	; 0xfa
 8005fe2:	01db      	lsls	r3, r3, #7
 8005fe4:	613b      	str	r3, [r7, #16]
 8005fe6:	e001      	b.n	8005fec <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8005fe8:	2300      	movs	r3, #0
 8005fea:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005fec:	693b      	ldr	r3, [r7, #16]
}
 8005fee:	0018      	movs	r0, r3
 8005ff0:	46bd      	mov	sp, r7
 8005ff2:	b006      	add	sp, #24
 8005ff4:	bd80      	pop	{r7, pc}
 8005ff6:	46c0      	nop			; (mov r8, r8)
 8005ff8:	40021000 	.word	0x40021000
 8005ffc:	00f42400 	.word	0x00f42400
 8006000:	007a1200 	.word	0x007a1200

08006004 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006004:	b580      	push	{r7, lr}
 8006006:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006008:	4b02      	ldr	r3, [pc, #8]	; (8006014 <HAL_RCC_GetHCLKFreq+0x10>)
 800600a:	681b      	ldr	r3, [r3, #0]
}
 800600c:	0018      	movs	r0, r3
 800600e:	46bd      	mov	sp, r7
 8006010:	bd80      	pop	{r7, pc}
 8006012:	46c0      	nop			; (mov r8, r8)
 8006014:	2000000c 	.word	0x2000000c

08006018 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006018:	b5b0      	push	{r4, r5, r7, lr}
 800601a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 800601c:	f7ff fff2 	bl	8006004 <HAL_RCC_GetHCLKFreq>
 8006020:	0004      	movs	r4, r0
 8006022:	f7ff fb3f 	bl	80056a4 <LL_RCC_GetAPB1Prescaler>
 8006026:	0003      	movs	r3, r0
 8006028:	0b1a      	lsrs	r2, r3, #12
 800602a:	4b05      	ldr	r3, [pc, #20]	; (8006040 <HAL_RCC_GetPCLK1Freq+0x28>)
 800602c:	0092      	lsls	r2, r2, #2
 800602e:	58d3      	ldr	r3, [r2, r3]
 8006030:	221f      	movs	r2, #31
 8006032:	4013      	ands	r3, r2
 8006034:	40dc      	lsrs	r4, r3
 8006036:	0023      	movs	r3, r4
}
 8006038:	0018      	movs	r0, r3
 800603a:	46bd      	mov	sp, r7
 800603c:	bdb0      	pop	{r4, r5, r7, pc}
 800603e:	46c0      	nop			; (mov r8, r8)
 8006040:	0800d94c 	.word	0x0800d94c

08006044 <HAL_RCC_GetClockConfig>:
  *                           will be configured.
  * @param  pFLatency         Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2207      	movs	r2, #7
 8006052:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006054:	4b0e      	ldr	r3, [pc, #56]	; (8006090 <HAL_RCC_GetClockConfig+0x4c>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	2207      	movs	r2, #7
 800605a:	401a      	ands	r2, r3
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8006060:	4b0b      	ldr	r3, [pc, #44]	; (8006090 <HAL_RCC_GetClockConfig+0x4c>)
 8006062:	689a      	ldr	r2, [r3, #8]
 8006064:	23f0      	movs	r3, #240	; 0xf0
 8006066:	011b      	lsls	r3, r3, #4
 8006068:	401a      	ands	r2, r3
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE);
 800606e:	4b08      	ldr	r3, [pc, #32]	; (8006090 <HAL_RCC_GetClockConfig+0x4c>)
 8006070:	689a      	ldr	r2, [r3, #8]
 8006072:	23e0      	movs	r3, #224	; 0xe0
 8006074:	01db      	lsls	r3, r3, #7
 8006076:	401a      	ands	r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	60da      	str	r2, [r3, #12]


  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800607c:	4b05      	ldr	r3, [pc, #20]	; (8006094 <HAL_RCC_GetClockConfig+0x50>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	2207      	movs	r2, #7
 8006082:	401a      	ands	r2, r3
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	601a      	str	r2, [r3, #0]
}
 8006088:	46c0      	nop			; (mov r8, r8)
 800608a:	46bd      	mov	sp, r7
 800608c:	b002      	add	sp, #8
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40021000 	.word	0x40021000
 8006094:	40022000 	.word	0x40022000

08006098 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8006098:	b580      	push	{r7, lr}
 800609a:	b086      	sub	sp, #24
 800609c:	af00      	add	r7, sp, #0
 800609e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80060a0:	2313      	movs	r3, #19
 80060a2:	18fb      	adds	r3, r7, r3
 80060a4:	2200      	movs	r2, #0
 80060a6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80060a8:	2312      	movs	r3, #18
 80060aa:	18fb      	adds	r3, r7, r3
 80060ac:	2200      	movs	r2, #0
 80060ae:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681a      	ldr	r2, [r3, #0]
 80060b4:	2380      	movs	r3, #128	; 0x80
 80060b6:	029b      	lsls	r3, r3, #10
 80060b8:	4013      	ands	r3, r2
 80060ba:	d100      	bne.n	80060be <HAL_RCCEx_PeriphCLKConfig+0x26>
 80060bc:	e0a3      	b.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060be:	2011      	movs	r0, #17
 80060c0:	183b      	adds	r3, r7, r0
 80060c2:	2200      	movs	r2, #0
 80060c4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80060c6:	4bc3      	ldr	r3, [pc, #780]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060ca:	2380      	movs	r3, #128	; 0x80
 80060cc:	055b      	lsls	r3, r3, #21
 80060ce:	4013      	ands	r3, r2
 80060d0:	d110      	bne.n	80060f4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80060d2:	4bc0      	ldr	r3, [pc, #768]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060d6:	4bbf      	ldr	r3, [pc, #764]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060d8:	2180      	movs	r1, #128	; 0x80
 80060da:	0549      	lsls	r1, r1, #21
 80060dc:	430a      	orrs	r2, r1
 80060de:	63da      	str	r2, [r3, #60]	; 0x3c
 80060e0:	4bbc      	ldr	r3, [pc, #752]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80060e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80060e4:	2380      	movs	r3, #128	; 0x80
 80060e6:	055b      	lsls	r3, r3, #21
 80060e8:	4013      	ands	r3, r2
 80060ea:	60bb      	str	r3, [r7, #8]
 80060ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80060ee:	183b      	adds	r3, r7, r0
 80060f0:	2201      	movs	r2, #1
 80060f2:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80060f4:	4bb8      	ldr	r3, [pc, #736]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	4bb7      	ldr	r3, [pc, #732]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 80060fa:	2180      	movs	r1, #128	; 0x80
 80060fc:	0049      	lsls	r1, r1, #1
 80060fe:	430a      	orrs	r2, r1
 8006100:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006102:	f7fe ff53 	bl	8004fac <HAL_GetTick>
 8006106:	0003      	movs	r3, r0
 8006108:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800610a:	e00b      	b.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800610c:	f7fe ff4e 	bl	8004fac <HAL_GetTick>
 8006110:	0002      	movs	r2, r0
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	2b02      	cmp	r3, #2
 8006118:	d904      	bls.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800611a:	2313      	movs	r3, #19
 800611c:	18fb      	adds	r3, r7, r3
 800611e:	2203      	movs	r2, #3
 8006120:	701a      	strb	r2, [r3, #0]
        break;
 8006122:	e005      	b.n	8006130 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006124:	4bac      	ldr	r3, [pc, #688]	; (80063d8 <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	2380      	movs	r3, #128	; 0x80
 800612a:	005b      	lsls	r3, r3, #1
 800612c:	4013      	ands	r3, r2
 800612e:	d0ed      	beq.n	800610c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8006130:	2313      	movs	r3, #19
 8006132:	18fb      	adds	r3, r7, r3
 8006134:	781b      	ldrb	r3, [r3, #0]
 8006136:	2b00      	cmp	r3, #0
 8006138:	d154      	bne.n	80061e4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800613a:	4ba6      	ldr	r3, [pc, #664]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800613c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800613e:	23c0      	movs	r3, #192	; 0xc0
 8006140:	009b      	lsls	r3, r3, #2
 8006142:	4013      	ands	r3, r2
 8006144:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006146:	697b      	ldr	r3, [r7, #20]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d019      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006150:	697a      	ldr	r2, [r7, #20]
 8006152:	429a      	cmp	r2, r3
 8006154:	d014      	beq.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006156:	4b9f      	ldr	r3, [pc, #636]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006158:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800615a:	4aa0      	ldr	r2, [pc, #640]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 800615c:	4013      	ands	r3, r2
 800615e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006160:	4b9c      	ldr	r3, [pc, #624]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006162:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006164:	4b9b      	ldr	r3, [pc, #620]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006166:	2180      	movs	r1, #128	; 0x80
 8006168:	0249      	lsls	r1, r1, #9
 800616a:	430a      	orrs	r2, r1
 800616c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800616e:	4b99      	ldr	r3, [pc, #612]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006170:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8006172:	4b98      	ldr	r3, [pc, #608]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006174:	499a      	ldr	r1, [pc, #616]	; (80063e0 <HAL_RCCEx_PeriphCLKConfig+0x348>)
 8006176:	400a      	ands	r2, r1
 8006178:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800617a:	4b96      	ldr	r3, [pc, #600]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800617c:	697a      	ldr	r2, [r7, #20]
 800617e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	2201      	movs	r2, #1
 8006184:	4013      	ands	r3, r2
 8006186:	d016      	beq.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006188:	f7fe ff10 	bl	8004fac <HAL_GetTick>
 800618c:	0003      	movs	r3, r0
 800618e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006190:	e00c      	b.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006192:	f7fe ff0b 	bl	8004fac <HAL_GetTick>
 8006196:	0002      	movs	r2, r0
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	4a91      	ldr	r2, [pc, #580]	; (80063e4 <HAL_RCCEx_PeriphCLKConfig+0x34c>)
 800619e:	4293      	cmp	r3, r2
 80061a0:	d904      	bls.n	80061ac <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80061a2:	2313      	movs	r3, #19
 80061a4:	18fb      	adds	r3, r7, r3
 80061a6:	2203      	movs	r2, #3
 80061a8:	701a      	strb	r2, [r3, #0]
            break;
 80061aa:	e004      	b.n	80061b6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061ac:	4b89      	ldr	r3, [pc, #548]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061b0:	2202      	movs	r2, #2
 80061b2:	4013      	ands	r3, r2
 80061b4:	d0ed      	beq.n	8006192 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80061b6:	2313      	movs	r3, #19
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	781b      	ldrb	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d10a      	bne.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80061c0:	4b84      	ldr	r3, [pc, #528]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80061c4:	4a85      	ldr	r2, [pc, #532]	; (80063dc <HAL_RCCEx_PeriphCLKConfig+0x344>)
 80061c6:	4013      	ands	r3, r2
 80061c8:	0019      	movs	r1, r3
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80061ce:	4b81      	ldr	r3, [pc, #516]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061d0:	430a      	orrs	r2, r1
 80061d2:	65da      	str	r2, [r3, #92]	; 0x5c
 80061d4:	e00c      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80061d6:	2312      	movs	r3, #18
 80061d8:	18fb      	adds	r3, r7, r3
 80061da:	2213      	movs	r2, #19
 80061dc:	18ba      	adds	r2, r7, r2
 80061de:	7812      	ldrb	r2, [r2, #0]
 80061e0:	701a      	strb	r2, [r3, #0]
 80061e2:	e005      	b.n	80061f0 <HAL_RCCEx_PeriphCLKConfig+0x158>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80061e4:	2312      	movs	r3, #18
 80061e6:	18fb      	adds	r3, r7, r3
 80061e8:	2213      	movs	r2, #19
 80061ea:	18ba      	adds	r2, r7, r2
 80061ec:	7812      	ldrb	r2, [r2, #0]
 80061ee:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80061f0:	2311      	movs	r3, #17
 80061f2:	18fb      	adds	r3, r7, r3
 80061f4:	781b      	ldrb	r3, [r3, #0]
 80061f6:	2b01      	cmp	r3, #1
 80061f8:	d105      	bne.n	8006206 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80061fa:	4b76      	ldr	r3, [pc, #472]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80061fc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80061fe:	4b75      	ldr	r3, [pc, #468]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006200:	4979      	ldr	r1, [pc, #484]	; (80063e8 <HAL_RCCEx_PeriphCLKConfig+0x350>)
 8006202:	400a      	ands	r2, r1
 8006204:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	2201      	movs	r2, #1
 800620c:	4013      	ands	r3, r2
 800620e:	d009      	beq.n	8006224 <HAL_RCCEx_PeriphCLKConfig+0x18c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006210:	4b70      	ldr	r3, [pc, #448]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006212:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006214:	2203      	movs	r2, #3
 8006216:	4393      	bics	r3, r2
 8006218:	0019      	movs	r1, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	685a      	ldr	r2, [r3, #4]
 800621e:	4b6d      	ldr	r3, [pc, #436]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006220:	430a      	orrs	r2, r1
 8006222:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	2202      	movs	r2, #2
 800622a:	4013      	ands	r3, r2
 800622c:	d009      	beq.n	8006242 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800622e:	4b69      	ldr	r3, [pc, #420]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006230:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006232:	220c      	movs	r2, #12
 8006234:	4393      	bics	r3, r2
 8006236:	0019      	movs	r1, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	689a      	ldr	r2, [r3, #8]
 800623c:	4b65      	ldr	r3, [pc, #404]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800623e:	430a      	orrs	r2, r1
 8006240:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2210      	movs	r2, #16
 8006248:	4013      	ands	r3, r2
 800624a:	d009      	beq.n	8006260 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800624c:	4b61      	ldr	r3, [pc, #388]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800624e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006250:	4a66      	ldr	r2, [pc, #408]	; (80063ec <HAL_RCCEx_PeriphCLKConfig+0x354>)
 8006252:	4013      	ands	r3, r2
 8006254:	0019      	movs	r1, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	68da      	ldr	r2, [r3, #12]
 800625a:	4b5e      	ldr	r3, [pc, #376]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800625c:	430a      	orrs	r2, r1
 800625e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	2380      	movs	r3, #128	; 0x80
 8006266:	009b      	lsls	r3, r3, #2
 8006268:	4013      	ands	r3, r2
 800626a:	d009      	beq.n	8006280 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800626c:	4b59      	ldr	r3, [pc, #356]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800626e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006270:	4a5f      	ldr	r2, [pc, #380]	; (80063f0 <HAL_RCCEx_PeriphCLKConfig+0x358>)
 8006272:	4013      	ands	r3, r2
 8006274:	0019      	movs	r1, r3
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	699a      	ldr	r2, [r3, #24]
 800627a:	4b56      	ldr	r3, [pc, #344]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800627c:	430a      	orrs	r2, r1
 800627e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681a      	ldr	r2, [r3, #0]
 8006284:	2380      	movs	r3, #128	; 0x80
 8006286:	00db      	lsls	r3, r3, #3
 8006288:	4013      	ands	r3, r2
 800628a:	d009      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800628c:	4b51      	ldr	r3, [pc, #324]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800628e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006290:	4a58      	ldr	r2, [pc, #352]	; (80063f4 <HAL_RCCEx_PeriphCLKConfig+0x35c>)
 8006292:	4013      	ands	r3, r2
 8006294:	0019      	movs	r1, r3
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	69da      	ldr	r2, [r3, #28]
 800629a:	4b4e      	ldr	r3, [pc, #312]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800629c:	430a      	orrs	r2, r1
 800629e:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	2220      	movs	r2, #32
 80062a6:	4013      	ands	r3, r2
 80062a8:	d009      	beq.n	80062be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80062aa:	4b4a      	ldr	r3, [pc, #296]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ae:	4a52      	ldr	r2, [pc, #328]	; (80063f8 <HAL_RCCEx_PeriphCLKConfig+0x360>)
 80062b0:	4013      	ands	r3, r2
 80062b2:	0019      	movs	r1, r3
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691a      	ldr	r2, [r3, #16]
 80062b8:	4b46      	ldr	r3, [pc, #280]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062ba:	430a      	orrs	r2, r1
 80062bc:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	2380      	movs	r3, #128	; 0x80
 80062c4:	01db      	lsls	r3, r3, #7
 80062c6:	4013      	ands	r3, r2
 80062c8:	d015      	beq.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80062ca:	4b42      	ldr	r3, [pc, #264]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80062ce:	009b      	lsls	r3, r3, #2
 80062d0:	0899      	lsrs	r1, r3, #2
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	6a1a      	ldr	r2, [r3, #32]
 80062d6:	4b3f      	ldr	r3, [pc, #252]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062d8:	430a      	orrs	r2, r1
 80062da:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	6a1a      	ldr	r2, [r3, #32]
 80062e0:	2380      	movs	r3, #128	; 0x80
 80062e2:	05db      	lsls	r3, r3, #23
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d106      	bne.n	80062f6 <HAL_RCCEx_PeriphCLKConfig+0x25e>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80062e8:	4b3a      	ldr	r3, [pc, #232]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062ea:	68da      	ldr	r2, [r3, #12]
 80062ec:	4b39      	ldr	r3, [pc, #228]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80062ee:	2180      	movs	r1, #128	; 0x80
 80062f0:	0249      	lsls	r1, r1, #9
 80062f2:	430a      	orrs	r2, r1
 80062f4:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	2380      	movs	r3, #128	; 0x80
 80062fc:	031b      	lsls	r3, r3, #12
 80062fe:	4013      	ands	r3, r2
 8006300:	d009      	beq.n	8006316 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8006302:	4b34      	ldr	r3, [pc, #208]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006306:	2240      	movs	r2, #64	; 0x40
 8006308:	4393      	bics	r3, r2
 800630a:	0019      	movs	r1, r3
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006310:	4b30      	ldr	r3, [pc, #192]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006312:	430a      	orrs	r2, r1
 8006314:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681a      	ldr	r2, [r3, #0]
 800631a:	2380      	movs	r3, #128	; 0x80
 800631c:	039b      	lsls	r3, r3, #14
 800631e:	4013      	ands	r3, r2
 8006320:	d016      	beq.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8006322:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006324:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006326:	4a35      	ldr	r2, [pc, #212]	; (80063fc <HAL_RCCEx_PeriphCLKConfig+0x364>)
 8006328:	4013      	ands	r3, r2
 800632a:	0019      	movs	r1, r3
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8006330:	4b28      	ldr	r3, [pc, #160]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006332:	430a      	orrs	r2, r1
 8006334:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800633a:	2380      	movs	r3, #128	; 0x80
 800633c:	03db      	lsls	r3, r3, #15
 800633e:	429a      	cmp	r2, r3
 8006340:	d106      	bne.n	8006350 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8006342:	4b24      	ldr	r3, [pc, #144]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	4b23      	ldr	r3, [pc, #140]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006348:	2180      	movs	r1, #128	; 0x80
 800634a:	0449      	lsls	r1, r1, #17
 800634c:	430a      	orrs	r2, r1
 800634e:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681a      	ldr	r2, [r3, #0]
 8006354:	2380      	movs	r3, #128	; 0x80
 8006356:	03db      	lsls	r3, r3, #15
 8006358:	4013      	ands	r3, r2
 800635a:	d016      	beq.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 800635c:	4b1d      	ldr	r3, [pc, #116]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800635e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006360:	4a27      	ldr	r2, [pc, #156]	; (8006400 <HAL_RCCEx_PeriphCLKConfig+0x368>)
 8006362:	4013      	ands	r3, r2
 8006364:	0019      	movs	r1, r3
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800636a:	4b1a      	ldr	r3, [pc, #104]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800636c:	430a      	orrs	r2, r1
 800636e:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006374:	2380      	movs	r3, #128	; 0x80
 8006376:	045b      	lsls	r3, r3, #17
 8006378:	429a      	cmp	r2, r3
 800637a:	d106      	bne.n	800638a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 800637c:	4b15      	ldr	r3, [pc, #84]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800637e:	68da      	ldr	r2, [r3, #12]
 8006380:	4b14      	ldr	r3, [pc, #80]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006382:	2180      	movs	r1, #128	; 0x80
 8006384:	0449      	lsls	r1, r1, #17
 8006386:	430a      	orrs	r2, r1
 8006388:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681a      	ldr	r2, [r3, #0]
 800638e:	2380      	movs	r3, #128	; 0x80
 8006390:	011b      	lsls	r3, r3, #4
 8006392:	4013      	ands	r3, r2
 8006394:	d016      	beq.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8006396:	4b0f      	ldr	r3, [pc, #60]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006398:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800639a:	4a1a      	ldr	r2, [pc, #104]	; (8006404 <HAL_RCCEx_PeriphCLKConfig+0x36c>)
 800639c:	4013      	ands	r3, r2
 800639e:	0019      	movs	r1, r3
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	695a      	ldr	r2, [r3, #20]
 80063a4:	4b0b      	ldr	r3, [pc, #44]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063a6:	430a      	orrs	r2, r1
 80063a8:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	695a      	ldr	r2, [r3, #20]
 80063ae:	2380      	movs	r3, #128	; 0x80
 80063b0:	01db      	lsls	r3, r3, #7
 80063b2:	429a      	cmp	r2, r3
 80063b4:	d106      	bne.n	80063c4 <HAL_RCCEx_PeriphCLKConfig+0x32c>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80063b6:	4b07      	ldr	r3, [pc, #28]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063b8:	68da      	ldr	r2, [r3, #12]
 80063ba:	4b06      	ldr	r3, [pc, #24]	; (80063d4 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80063bc:	2180      	movs	r1, #128	; 0x80
 80063be:	0249      	lsls	r1, r1, #9
 80063c0:	430a      	orrs	r2, r1
 80063c2:	60da      	str	r2, [r3, #12]
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 80063c4:	2312      	movs	r3, #18
 80063c6:	18fb      	adds	r3, r7, r3
 80063c8:	781b      	ldrb	r3, [r3, #0]
}
 80063ca:	0018      	movs	r0, r3
 80063cc:	46bd      	mov	sp, r7
 80063ce:	b006      	add	sp, #24
 80063d0:	bd80      	pop	{r7, pc}
 80063d2:	46c0      	nop			; (mov r8, r8)
 80063d4:	40021000 	.word	0x40021000
 80063d8:	40007000 	.word	0x40007000
 80063dc:	fffffcff 	.word	0xfffffcff
 80063e0:	fffeffff 	.word	0xfffeffff
 80063e4:	00001388 	.word	0x00001388
 80063e8:	efffffff 	.word	0xefffffff
 80063ec:	fffff3ff 	.word	0xfffff3ff
 80063f0:	fff3ffff 	.word	0xfff3ffff
 80063f4:	ffcfffff 	.word	0xffcfffff
 80063f8:	ffffcfff 	.word	0xffffcfff
 80063fc:	ffbfffff 	.word	0xffbfffff
 8006400:	feffffff 	.word	0xfeffffff
 8006404:	ffff3fff 	.word	0xffff3fff

08006408 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	2b00      	cmp	r3, #0
 8006414:	d101      	bne.n	800641a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006416:	2301      	movs	r3, #1
 8006418:	e04a      	b.n	80064b0 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	223d      	movs	r2, #61	; 0x3d
 800641e:	5c9b      	ldrb	r3, [r3, r2]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	d107      	bne.n	8006436 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	223c      	movs	r2, #60	; 0x3c
 800642a:	2100      	movs	r1, #0
 800642c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	0018      	movs	r0, r3
 8006432:	f000 f841 	bl	80064b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	223d      	movs	r2, #61	; 0x3d
 800643a:	2102      	movs	r1, #2
 800643c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681a      	ldr	r2, [r3, #0]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	3304      	adds	r3, #4
 8006446:	0019      	movs	r1, r3
 8006448:	0010      	movs	r0, r2
 800644a:	f000 f9c1 	bl	80067d0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2248      	movs	r2, #72	; 0x48
 8006452:	2101      	movs	r1, #1
 8006454:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	223e      	movs	r2, #62	; 0x3e
 800645a:	2101      	movs	r1, #1
 800645c:	5499      	strb	r1, [r3, r2]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	223f      	movs	r2, #63	; 0x3f
 8006462:	2101      	movs	r1, #1
 8006464:	5499      	strb	r1, [r3, r2]
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	2240      	movs	r2, #64	; 0x40
 800646a:	2101      	movs	r1, #1
 800646c:	5499      	strb	r1, [r3, r2]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	2241      	movs	r2, #65	; 0x41
 8006472:	2101      	movs	r1, #1
 8006474:	5499      	strb	r1, [r3, r2]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2242      	movs	r2, #66	; 0x42
 800647a:	2101      	movs	r1, #1
 800647c:	5499      	strb	r1, [r3, r2]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2243      	movs	r2, #67	; 0x43
 8006482:	2101      	movs	r1, #1
 8006484:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2244      	movs	r2, #68	; 0x44
 800648a:	2101      	movs	r1, #1
 800648c:	5499      	strb	r1, [r3, r2]
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2245      	movs	r2, #69	; 0x45
 8006492:	2101      	movs	r1, #1
 8006494:	5499      	strb	r1, [r3, r2]
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2246      	movs	r2, #70	; 0x46
 800649a:	2101      	movs	r1, #1
 800649c:	5499      	strb	r1, [r3, r2]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2247      	movs	r2, #71	; 0x47
 80064a2:	2101      	movs	r1, #1
 80064a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	223d      	movs	r2, #61	; 0x3d
 80064aa:	2101      	movs	r1, #1
 80064ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80064ae:	2300      	movs	r3, #0
}
 80064b0:	0018      	movs	r0, r3
 80064b2:	46bd      	mov	sp, r7
 80064b4:	b002      	add	sp, #8
 80064b6:	bd80      	pop	{r7, pc}

080064b8 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80064b8:	b580      	push	{r7, lr}
 80064ba:	b082      	sub	sp, #8
 80064bc:	af00      	add	r7, sp, #0
 80064be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80064c0:	46c0      	nop			; (mov r8, r8)
 80064c2:	46bd      	mov	sp, r7
 80064c4:	b002      	add	sp, #8
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b084      	sub	sp, #16
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	223d      	movs	r2, #61	; 0x3d
 80064d4:	5c9b      	ldrb	r3, [r3, r2]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d001      	beq.n	80064e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80064dc:	2301      	movs	r3, #1
 80064de:	e042      	b.n	8006566 <HAL_TIM_Base_Start_IT+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	223d      	movs	r2, #61	; 0x3d
 80064e4:	2102      	movs	r1, #2
 80064e6:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	68da      	ldr	r2, [r3, #12]
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	2101      	movs	r1, #1
 80064f4:	430a      	orrs	r2, r1
 80064f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	4a1c      	ldr	r2, [pc, #112]	; (8006570 <HAL_TIM_Base_Start_IT+0xa8>)
 80064fe:	4293      	cmp	r3, r2
 8006500:	d00f      	beq.n	8006522 <HAL_TIM_Base_Start_IT+0x5a>
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	2380      	movs	r3, #128	; 0x80
 8006508:	05db      	lsls	r3, r3, #23
 800650a:	429a      	cmp	r2, r3
 800650c:	d009      	beq.n	8006522 <HAL_TIM_Base_Start_IT+0x5a>
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	4a18      	ldr	r2, [pc, #96]	; (8006574 <HAL_TIM_Base_Start_IT+0xac>)
 8006514:	4293      	cmp	r3, r2
 8006516:	d004      	beq.n	8006522 <HAL_TIM_Base_Start_IT+0x5a>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	4a16      	ldr	r2, [pc, #88]	; (8006578 <HAL_TIM_Base_Start_IT+0xb0>)
 800651e:	4293      	cmp	r3, r2
 8006520:	d116      	bne.n	8006550 <HAL_TIM_Base_Start_IT+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	689b      	ldr	r3, [r3, #8]
 8006528:	4a14      	ldr	r2, [pc, #80]	; (800657c <HAL_TIM_Base_Start_IT+0xb4>)
 800652a:	4013      	ands	r3, r2
 800652c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800652e:	68fb      	ldr	r3, [r7, #12]
 8006530:	2b06      	cmp	r3, #6
 8006532:	d016      	beq.n	8006562 <HAL_TIM_Base_Start_IT+0x9a>
 8006534:	68fa      	ldr	r2, [r7, #12]
 8006536:	2380      	movs	r3, #128	; 0x80
 8006538:	025b      	lsls	r3, r3, #9
 800653a:	429a      	cmp	r2, r3
 800653c:	d011      	beq.n	8006562 <HAL_TIM_Base_Start_IT+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	681a      	ldr	r2, [r3, #0]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	2101      	movs	r1, #1
 800654a:	430a      	orrs	r2, r1
 800654c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800654e:	e008      	b.n	8006562 <HAL_TIM_Base_Start_IT+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	2101      	movs	r1, #1
 800655c:	430a      	orrs	r2, r1
 800655e:	601a      	str	r2, [r3, #0]
 8006560:	e000      	b.n	8006564 <HAL_TIM_Base_Start_IT+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006562:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8006564:	2300      	movs	r3, #0
}
 8006566:	0018      	movs	r0, r3
 8006568:	46bd      	mov	sp, r7
 800656a:	b004      	add	sp, #16
 800656c:	bd80      	pop	{r7, pc}
 800656e:	46c0      	nop			; (mov r8, r8)
 8006570:	40012c00 	.word	0x40012c00
 8006574:	40000400 	.word	0x40000400
 8006578:	40014000 	.word	0x40014000
 800657c:	00010007 	.word	0x00010007

08006580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006580:	b580      	push	{r7, lr}
 8006582:	b084      	sub	sp, #16
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	691b      	ldr	r3, [r3, #16]
 8006596:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006598:	68bb      	ldr	r3, [r7, #8]
 800659a:	2202      	movs	r2, #2
 800659c:	4013      	ands	r3, r2
 800659e:	d021      	beq.n	80065e4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	2202      	movs	r2, #2
 80065a4:	4013      	ands	r3, r2
 80065a6:	d01d      	beq.n	80065e4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	2203      	movs	r2, #3
 80065ae:	4252      	negs	r2, r2
 80065b0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2201      	movs	r2, #1
 80065b6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	2203      	movs	r2, #3
 80065c0:	4013      	ands	r3, r2
 80065c2:	d004      	beq.n	80065ce <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	0018      	movs	r0, r3
 80065c8:	f000 f8ea 	bl	80067a0 <HAL_TIM_IC_CaptureCallback>
 80065cc:	e007      	b.n	80065de <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	0018      	movs	r0, r3
 80065d2:	f000 f8dd 	bl	8006790 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	0018      	movs	r0, r3
 80065da:	f000 f8e9 	bl	80067b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2200      	movs	r2, #0
 80065e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80065e4:	68bb      	ldr	r3, [r7, #8]
 80065e6:	2204      	movs	r2, #4
 80065e8:	4013      	ands	r3, r2
 80065ea:	d022      	beq.n	8006632 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	2204      	movs	r2, #4
 80065f0:	4013      	ands	r3, r2
 80065f2:	d01e      	beq.n	8006632 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2205      	movs	r2, #5
 80065fa:	4252      	negs	r2, r2
 80065fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	2202      	movs	r2, #2
 8006602:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	699a      	ldr	r2, [r3, #24]
 800660a:	23c0      	movs	r3, #192	; 0xc0
 800660c:	009b      	lsls	r3, r3, #2
 800660e:	4013      	ands	r3, r2
 8006610:	d004      	beq.n	800661c <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	0018      	movs	r0, r3
 8006616:	f000 f8c3 	bl	80067a0 <HAL_TIM_IC_CaptureCallback>
 800661a:	e007      	b.n	800662c <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	0018      	movs	r0, r3
 8006620:	f000 f8b6 	bl	8006790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	0018      	movs	r0, r3
 8006628:	f000 f8c2 	bl	80067b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	2200      	movs	r2, #0
 8006630:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	2208      	movs	r2, #8
 8006636:	4013      	ands	r3, r2
 8006638:	d021      	beq.n	800667e <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2208      	movs	r2, #8
 800663e:	4013      	ands	r3, r2
 8006640:	d01d      	beq.n	800667e <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2209      	movs	r2, #9
 8006648:	4252      	negs	r2, r2
 800664a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2204      	movs	r2, #4
 8006650:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	69db      	ldr	r3, [r3, #28]
 8006658:	2203      	movs	r2, #3
 800665a:	4013      	ands	r3, r2
 800665c:	d004      	beq.n	8006668 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	0018      	movs	r0, r3
 8006662:	f000 f89d 	bl	80067a0 <HAL_TIM_IC_CaptureCallback>
 8006666:	e007      	b.n	8006678 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	0018      	movs	r0, r3
 800666c:	f000 f890 	bl	8006790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	0018      	movs	r0, r3
 8006674:	f000 f89c 	bl	80067b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2200      	movs	r2, #0
 800667c:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2210      	movs	r2, #16
 8006682:	4013      	ands	r3, r2
 8006684:	d022      	beq.n	80066cc <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2210      	movs	r2, #16
 800668a:	4013      	ands	r3, r2
 800668c:	d01e      	beq.n	80066cc <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	2211      	movs	r2, #17
 8006694:	4252      	negs	r2, r2
 8006696:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	2208      	movs	r2, #8
 800669c:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	23c0      	movs	r3, #192	; 0xc0
 80066a6:	009b      	lsls	r3, r3, #2
 80066a8:	4013      	ands	r3, r2
 80066aa:	d004      	beq.n	80066b6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	0018      	movs	r0, r3
 80066b0:	f000 f876 	bl	80067a0 <HAL_TIM_IC_CaptureCallback>
 80066b4:	e007      	b.n	80066c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	0018      	movs	r0, r3
 80066ba:	f000 f869 	bl	8006790 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	0018      	movs	r0, r3
 80066c2:	f000 f875 	bl	80067b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2200      	movs	r2, #0
 80066ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80066cc:	68bb      	ldr	r3, [r7, #8]
 80066ce:	2201      	movs	r2, #1
 80066d0:	4013      	ands	r3, r2
 80066d2:	d00c      	beq.n	80066ee <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	4013      	ands	r3, r2
 80066da:	d008      	beq.n	80066ee <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	2202      	movs	r2, #2
 80066e2:	4252      	negs	r2, r2
 80066e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	0018      	movs	r0, r3
 80066ea:	f7fe f965 	bl	80049b8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	2280      	movs	r2, #128	; 0x80
 80066f2:	4013      	ands	r3, r2
 80066f4:	d104      	bne.n	8006700 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80066f6:	68ba      	ldr	r2, [r7, #8]
 80066f8:	2380      	movs	r3, #128	; 0x80
 80066fa:	019b      	lsls	r3, r3, #6
 80066fc:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80066fe:	d00b      	beq.n	8006718 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	2280      	movs	r2, #128	; 0x80
 8006704:	4013      	ands	r3, r2
 8006706:	d007      	beq.n	8006718 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a1e      	ldr	r2, [pc, #120]	; (8006788 <HAL_TIM_IRQHandler+0x208>)
 800670e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	0018      	movs	r0, r3
 8006714:	f000 f8f2 	bl	80068fc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8006718:	68ba      	ldr	r2, [r7, #8]
 800671a:	2380      	movs	r3, #128	; 0x80
 800671c:	005b      	lsls	r3, r3, #1
 800671e:	4013      	ands	r3, r2
 8006720:	d00b      	beq.n	800673a <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2280      	movs	r2, #128	; 0x80
 8006726:	4013      	ands	r3, r2
 8006728:	d007      	beq.n	800673a <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	4a17      	ldr	r2, [pc, #92]	; (800678c <HAL_TIM_IRQHandler+0x20c>)
 8006730:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	0018      	movs	r0, r3
 8006736:	f000 f8e9 	bl	800690c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800673a:	68bb      	ldr	r3, [r7, #8]
 800673c:	2240      	movs	r2, #64	; 0x40
 800673e:	4013      	ands	r3, r2
 8006740:	d00c      	beq.n	800675c <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2240      	movs	r2, #64	; 0x40
 8006746:	4013      	ands	r3, r2
 8006748:	d008      	beq.n	800675c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	2241      	movs	r2, #65	; 0x41
 8006750:	4252      	negs	r2, r2
 8006752:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	0018      	movs	r0, r3
 8006758:	f000 f832 	bl	80067c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800675c:	68bb      	ldr	r3, [r7, #8]
 800675e:	2220      	movs	r2, #32
 8006760:	4013      	ands	r3, r2
 8006762:	d00c      	beq.n	800677e <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2220      	movs	r2, #32
 8006768:	4013      	ands	r3, r2
 800676a:	d008      	beq.n	800677e <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	2221      	movs	r2, #33	; 0x21
 8006772:	4252      	negs	r2, r2
 8006774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	0018      	movs	r0, r3
 800677a:	f000 f8b7 	bl	80068ec <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800677e:	46c0      	nop			; (mov r8, r8)
 8006780:	46bd      	mov	sp, r7
 8006782:	b004      	add	sp, #16
 8006784:	bd80      	pop	{r7, pc}
 8006786:	46c0      	nop			; (mov r8, r8)
 8006788:	ffffdf7f 	.word	0xffffdf7f
 800678c:	fffffeff 	.word	0xfffffeff

08006790 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006790:	b580      	push	{r7, lr}
 8006792:	b082      	sub	sp, #8
 8006794:	af00      	add	r7, sp, #0
 8006796:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006798:	46c0      	nop			; (mov r8, r8)
 800679a:	46bd      	mov	sp, r7
 800679c:	b002      	add	sp, #8
 800679e:	bd80      	pop	{r7, pc}

080067a0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b082      	sub	sp, #8
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067a8:	46c0      	nop			; (mov r8, r8)
 80067aa:	46bd      	mov	sp, r7
 80067ac:	b002      	add	sp, #8
 80067ae:	bd80      	pop	{r7, pc}

080067b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067b8:	46c0      	nop			; (mov r8, r8)
 80067ba:	46bd      	mov	sp, r7
 80067bc:	b002      	add	sp, #8
 80067be:	bd80      	pop	{r7, pc}

080067c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b580      	push	{r7, lr}
 80067c2:	b082      	sub	sp, #8
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067c8:	46c0      	nop			; (mov r8, r8)
 80067ca:	46bd      	mov	sp, r7
 80067cc:	b002      	add	sp, #8
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b084      	sub	sp, #16
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	4a3b      	ldr	r2, [pc, #236]	; (80068d0 <TIM_Base_SetConfig+0x100>)
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d008      	beq.n	80067fa <TIM_Base_SetConfig+0x2a>
 80067e8:	687a      	ldr	r2, [r7, #4]
 80067ea:	2380      	movs	r3, #128	; 0x80
 80067ec:	05db      	lsls	r3, r3, #23
 80067ee:	429a      	cmp	r2, r3
 80067f0:	d003      	beq.n	80067fa <TIM_Base_SetConfig+0x2a>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a37      	ldr	r2, [pc, #220]	; (80068d4 <TIM_Base_SetConfig+0x104>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d108      	bne.n	800680c <TIM_Base_SetConfig+0x3c>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	2270      	movs	r2, #112	; 0x70
 80067fe:	4393      	bics	r3, r2
 8006800:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006802:	683b      	ldr	r3, [r7, #0]
 8006804:	685b      	ldr	r3, [r3, #4]
 8006806:	68fa      	ldr	r2, [r7, #12]
 8006808:	4313      	orrs	r3, r2
 800680a:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a30      	ldr	r2, [pc, #192]	; (80068d0 <TIM_Base_SetConfig+0x100>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d018      	beq.n	8006846 <TIM_Base_SetConfig+0x76>
 8006814:	687a      	ldr	r2, [r7, #4]
 8006816:	2380      	movs	r3, #128	; 0x80
 8006818:	05db      	lsls	r3, r3, #23
 800681a:	429a      	cmp	r2, r3
 800681c:	d013      	beq.n	8006846 <TIM_Base_SetConfig+0x76>
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	4a2c      	ldr	r2, [pc, #176]	; (80068d4 <TIM_Base_SetConfig+0x104>)
 8006822:	4293      	cmp	r3, r2
 8006824:	d00f      	beq.n	8006846 <TIM_Base_SetConfig+0x76>
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	4a2b      	ldr	r2, [pc, #172]	; (80068d8 <TIM_Base_SetConfig+0x108>)
 800682a:	4293      	cmp	r3, r2
 800682c:	d00b      	beq.n	8006846 <TIM_Base_SetConfig+0x76>
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	4a2a      	ldr	r2, [pc, #168]	; (80068dc <TIM_Base_SetConfig+0x10c>)
 8006832:	4293      	cmp	r3, r2
 8006834:	d007      	beq.n	8006846 <TIM_Base_SetConfig+0x76>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	4a29      	ldr	r2, [pc, #164]	; (80068e0 <TIM_Base_SetConfig+0x110>)
 800683a:	4293      	cmp	r3, r2
 800683c:	d003      	beq.n	8006846 <TIM_Base_SetConfig+0x76>
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	4a28      	ldr	r2, [pc, #160]	; (80068e4 <TIM_Base_SetConfig+0x114>)
 8006842:	4293      	cmp	r3, r2
 8006844:	d108      	bne.n	8006858 <TIM_Base_SetConfig+0x88>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	4a27      	ldr	r2, [pc, #156]	; (80068e8 <TIM_Base_SetConfig+0x118>)
 800684a:	4013      	ands	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800684e:	683b      	ldr	r3, [r7, #0]
 8006850:	68db      	ldr	r3, [r3, #12]
 8006852:	68fa      	ldr	r2, [r7, #12]
 8006854:	4313      	orrs	r3, r2
 8006856:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	2280      	movs	r2, #128	; 0x80
 800685c:	4393      	bics	r3, r2
 800685e:	001a      	movs	r2, r3
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	695b      	ldr	r3, [r3, #20]
 8006864:	4313      	orrs	r3, r2
 8006866:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	68fa      	ldr	r2, [r7, #12]
 800686c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	689a      	ldr	r2, [r3, #8]
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	681a      	ldr	r2, [r3, #0]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a13      	ldr	r2, [pc, #76]	; (80068d0 <TIM_Base_SetConfig+0x100>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d00b      	beq.n	800689e <TIM_Base_SetConfig+0xce>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a14      	ldr	r2, [pc, #80]	; (80068dc <TIM_Base_SetConfig+0x10c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d007      	beq.n	800689e <TIM_Base_SetConfig+0xce>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a13      	ldr	r2, [pc, #76]	; (80068e0 <TIM_Base_SetConfig+0x110>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d003      	beq.n	800689e <TIM_Base_SetConfig+0xce>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a12      	ldr	r2, [pc, #72]	; (80068e4 <TIM_Base_SetConfig+0x114>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d103      	bne.n	80068a6 <TIM_Base_SetConfig+0xd6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	691a      	ldr	r2, [r3, #16]
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	2201      	movs	r2, #1
 80068aa:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	691b      	ldr	r3, [r3, #16]
 80068b0:	2201      	movs	r2, #1
 80068b2:	4013      	ands	r3, r2
 80068b4:	2b01      	cmp	r3, #1
 80068b6:	d106      	bne.n	80068c6 <TIM_Base_SetConfig+0xf6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	2201      	movs	r2, #1
 80068be:	4393      	bics	r3, r2
 80068c0:	001a      	movs	r2, r3
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	611a      	str	r2, [r3, #16]
  }
}
 80068c6:	46c0      	nop			; (mov r8, r8)
 80068c8:	46bd      	mov	sp, r7
 80068ca:	b004      	add	sp, #16
 80068cc:	bd80      	pop	{r7, pc}
 80068ce:	46c0      	nop			; (mov r8, r8)
 80068d0:	40012c00 	.word	0x40012c00
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40002000 	.word	0x40002000
 80068dc:	40014000 	.word	0x40014000
 80068e0:	40014400 	.word	0x40014400
 80068e4:	40014800 	.word	0x40014800
 80068e8:	fffffcff 	.word	0xfffffcff

080068ec <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80068ec:	b580      	push	{r7, lr}
 80068ee:	b082      	sub	sp, #8
 80068f0:	af00      	add	r7, sp, #0
 80068f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80068f4:	46c0      	nop			; (mov r8, r8)
 80068f6:	46bd      	mov	sp, r7
 80068f8:	b002      	add	sp, #8
 80068fa:	bd80      	pop	{r7, pc}

080068fc <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b082      	sub	sp, #8
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006904:	46c0      	nop			; (mov r8, r8)
 8006906:	46bd      	mov	sp, r7
 8006908:	b002      	add	sp, #8
 800690a:	bd80      	pop	{r7, pc}

0800690c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800690c:	b580      	push	{r7, lr}
 800690e:	b082      	sub	sp, #8
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006914:	46c0      	nop			; (mov r8, r8)
 8006916:	46bd      	mov	sp, r7
 8006918:	b002      	add	sp, #8
 800691a:	bd80      	pop	{r7, pc}

0800691c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800691c:	b580      	push	{r7, lr}
 800691e:	b082      	sub	sp, #8
 8006920:	af00      	add	r7, sp, #0
 8006922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	2b00      	cmp	r3, #0
 8006928:	d101      	bne.n	800692e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	e046      	b.n	80069bc <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	2288      	movs	r2, #136	; 0x88
 8006932:	589b      	ldr	r3, [r3, r2]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d107      	bne.n	8006948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2284      	movs	r2, #132	; 0x84
 800693c:	2100      	movs	r1, #0
 800693e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	0018      	movs	r0, r3
 8006944:	f7fe f880 	bl	8004a48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	2288      	movs	r2, #136	; 0x88
 800694c:	2124      	movs	r1, #36	; 0x24
 800694e:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	681b      	ldr	r3, [r3, #0]
 8006954:	681a      	ldr	r2, [r3, #0]
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	681b      	ldr	r3, [r3, #0]
 800695a:	2101      	movs	r1, #1
 800695c:	438a      	bics	r2, r1
 800695e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006964:	2b00      	cmp	r3, #0
 8006966:	d003      	beq.n	8006970 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	0018      	movs	r0, r3
 800696c:	f000 fed8 	bl	8007720 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	0018      	movs	r0, r3
 8006974:	f000 fc16 	bl	80071a4 <UART_SetConfig>
 8006978:	0003      	movs	r3, r0
 800697a:	2b01      	cmp	r3, #1
 800697c:	d101      	bne.n	8006982 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 800697e:	2301      	movs	r3, #1
 8006980:	e01c      	b.n	80069bc <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	681b      	ldr	r3, [r3, #0]
 8006986:	685a      	ldr	r2, [r3, #4]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	490d      	ldr	r1, [pc, #52]	; (80069c4 <HAL_UART_Init+0xa8>)
 800698e:	400a      	ands	r2, r1
 8006990:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	689a      	ldr	r2, [r3, #8]
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	212a      	movs	r1, #42	; 0x2a
 800699e:	438a      	bics	r2, r1
 80069a0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	681a      	ldr	r2, [r3, #0]
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2101      	movs	r1, #1
 80069ae:	430a      	orrs	r2, r1
 80069b0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	0018      	movs	r0, r3
 80069b6:	f000 ff67 	bl	8007888 <UART_CheckIdleState>
 80069ba:	0003      	movs	r3, r0
}
 80069bc:	0018      	movs	r0, r3
 80069be:	46bd      	mov	sp, r7
 80069c0:	b002      	add	sp, #8
 80069c2:	bd80      	pop	{r7, pc}
 80069c4:	ffffb7ff 	.word	0xffffb7ff

080069c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069c8:	b580      	push	{r7, lr}
 80069ca:	b08a      	sub	sp, #40	; 0x28
 80069cc:	af02      	add	r7, sp, #8
 80069ce:	60f8      	str	r0, [r7, #12]
 80069d0:	60b9      	str	r1, [r7, #8]
 80069d2:	603b      	str	r3, [r7, #0]
 80069d4:	1dbb      	adds	r3, r7, #6
 80069d6:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2288      	movs	r2, #136	; 0x88
 80069dc:	589b      	ldr	r3, [r3, r2]
 80069de:	2b20      	cmp	r3, #32
 80069e0:	d000      	beq.n	80069e4 <HAL_UART_Transmit+0x1c>
 80069e2:	e090      	b.n	8006b06 <HAL_UART_Transmit+0x13e>
  {
    if ((pData == NULL) || (Size == 0U))
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d003      	beq.n	80069f2 <HAL_UART_Transmit+0x2a>
 80069ea:	1dbb      	adds	r3, r7, #6
 80069ec:	881b      	ldrh	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d101      	bne.n	80069f6 <HAL_UART_Transmit+0x2e>
    {
      return  HAL_ERROR;
 80069f2:	2301      	movs	r3, #1
 80069f4:	e088      	b.n	8006b08 <HAL_UART_Transmit+0x140>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	689a      	ldr	r2, [r3, #8]
 80069fa:	2380      	movs	r3, #128	; 0x80
 80069fc:	015b      	lsls	r3, r3, #5
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d109      	bne.n	8006a16 <HAL_UART_Transmit+0x4e>
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	691b      	ldr	r3, [r3, #16]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d105      	bne.n	8006a16 <HAL_UART_Transmit+0x4e>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8006a0a:	68bb      	ldr	r3, [r7, #8]
 8006a0c:	2201      	movs	r2, #1
 8006a0e:	4013      	ands	r3, r2
 8006a10:	d001      	beq.n	8006a16 <HAL_UART_Transmit+0x4e>
      {
        return  HAL_ERROR;
 8006a12:	2301      	movs	r3, #1
 8006a14:	e078      	b.n	8006b08 <HAL_UART_Transmit+0x140>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	2290      	movs	r2, #144	; 0x90
 8006a1a:	2100      	movs	r1, #0
 8006a1c:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2288      	movs	r2, #136	; 0x88
 8006a22:	2121      	movs	r1, #33	; 0x21
 8006a24:	5099      	str	r1, [r3, r2]

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006a26:	f7fe fac1 	bl	8004fac <HAL_GetTick>
 8006a2a:	0003      	movs	r3, r0
 8006a2c:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	1dba      	adds	r2, r7, #6
 8006a32:	2154      	movs	r1, #84	; 0x54
 8006a34:	8812      	ldrh	r2, [r2, #0]
 8006a36:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	1dba      	adds	r2, r7, #6
 8006a3c:	2156      	movs	r1, #86	; 0x56
 8006a3e:	8812      	ldrh	r2, [r2, #0]
 8006a40:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a42:	68fb      	ldr	r3, [r7, #12]
 8006a44:	689a      	ldr	r2, [r3, #8]
 8006a46:	2380      	movs	r3, #128	; 0x80
 8006a48:	015b      	lsls	r3, r3, #5
 8006a4a:	429a      	cmp	r2, r3
 8006a4c:	d108      	bne.n	8006a60 <HAL_UART_Transmit+0x98>
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	2b00      	cmp	r3, #0
 8006a54:	d104      	bne.n	8006a60 <HAL_UART_Transmit+0x98>
    {
      pdata8bits  = NULL;
 8006a56:	2300      	movs	r3, #0
 8006a58:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006a5a:	68bb      	ldr	r3, [r7, #8]
 8006a5c:	61bb      	str	r3, [r7, #24]
 8006a5e:	e003      	b.n	8006a68 <HAL_UART_Transmit+0xa0>
    }
    else
    {
      pdata8bits  = pData;
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006a64:	2300      	movs	r3, #0
 8006a66:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006a68:	e030      	b.n	8006acc <HAL_UART_Transmit+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006a6a:	697a      	ldr	r2, [r7, #20]
 8006a6c:	68f8      	ldr	r0, [r7, #12]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	0013      	movs	r3, r2
 8006a74:	2200      	movs	r2, #0
 8006a76:	2180      	movs	r1, #128	; 0x80
 8006a78:	f000 ffb0 	bl	80079dc <UART_WaitOnFlagUntilTimeout>
 8006a7c:	1e03      	subs	r3, r0, #0
 8006a7e:	d005      	beq.n	8006a8c <HAL_UART_Transmit+0xc4>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006a80:	68fb      	ldr	r3, [r7, #12]
 8006a82:	2288      	movs	r2, #136	; 0x88
 8006a84:	2120      	movs	r1, #32
 8006a86:	5099      	str	r1, [r3, r2]

        return HAL_TIMEOUT;
 8006a88:	2303      	movs	r3, #3
 8006a8a:	e03d      	b.n	8006b08 <HAL_UART_Transmit+0x140>
      }
      if (pdata8bits == NULL)
 8006a8c:	69fb      	ldr	r3, [r7, #28]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d10b      	bne.n	8006aaa <HAL_UART_Transmit+0xe2>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006a92:	69bb      	ldr	r3, [r7, #24]
 8006a94:	881b      	ldrh	r3, [r3, #0]
 8006a96:	001a      	movs	r2, r3
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	05d2      	lsls	r2, r2, #23
 8006a9e:	0dd2      	lsrs	r2, r2, #23
 8006aa0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006aa2:	69bb      	ldr	r3, [r7, #24]
 8006aa4:	3302      	adds	r3, #2
 8006aa6:	61bb      	str	r3, [r7, #24]
 8006aa8:	e007      	b.n	8006aba <HAL_UART_Transmit+0xf2>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006aaa:	69fb      	ldr	r3, [r7, #28]
 8006aac:	781a      	ldrb	r2, [r3, #0]
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006ab4:	69fb      	ldr	r3, [r7, #28]
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	2256      	movs	r2, #86	; 0x56
 8006abe:	5a9b      	ldrh	r3, [r3, r2]
 8006ac0:	b29b      	uxth	r3, r3
 8006ac2:	3b01      	subs	r3, #1
 8006ac4:	b299      	uxth	r1, r3
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	2256      	movs	r2, #86	; 0x56
 8006aca:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	2256      	movs	r2, #86	; 0x56
 8006ad0:	5a9b      	ldrh	r3, [r3, r2]
 8006ad2:	b29b      	uxth	r3, r3
 8006ad4:	2b00      	cmp	r3, #0
 8006ad6:	d1c8      	bne.n	8006a6a <HAL_UART_Transmit+0xa2>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006ad8:	697a      	ldr	r2, [r7, #20]
 8006ada:	68f8      	ldr	r0, [r7, #12]
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	0013      	movs	r3, r2
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	2140      	movs	r1, #64	; 0x40
 8006ae6:	f000 ff79 	bl	80079dc <UART_WaitOnFlagUntilTimeout>
 8006aea:	1e03      	subs	r3, r0, #0
 8006aec:	d005      	beq.n	8006afa <HAL_UART_Transmit+0x132>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	2288      	movs	r2, #136	; 0x88
 8006af2:	2120      	movs	r1, #32
 8006af4:	5099      	str	r1, [r3, r2]

      return HAL_TIMEOUT;
 8006af6:	2303      	movs	r3, #3
 8006af8:	e006      	b.n	8006b08 <HAL_UART_Transmit+0x140>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2288      	movs	r2, #136	; 0x88
 8006afe:	2120      	movs	r1, #32
 8006b00:	5099      	str	r1, [r3, r2]

    return HAL_OK;
 8006b02:	2300      	movs	r3, #0
 8006b04:	e000      	b.n	8006b08 <HAL_UART_Transmit+0x140>
  }
  else
  {
    return HAL_BUSY;
 8006b06:	2302      	movs	r3, #2
  }
}
 8006b08:	0018      	movs	r0, r3
 8006b0a:	46bd      	mov	sp, r7
 8006b0c:	b008      	add	sp, #32
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006b10:	b5b0      	push	{r4, r5, r7, lr}
 8006b12:	b0aa      	sub	sp, #168	; 0xa8
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006b18:	687b      	ldr	r3, [r7, #4]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	69db      	ldr	r3, [r3, #28]
 8006b1e:	22a4      	movs	r2, #164	; 0xa4
 8006b20:	18b9      	adds	r1, r7, r2
 8006b22:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	20a0      	movs	r0, #160	; 0xa0
 8006b2c:	1839      	adds	r1, r7, r0
 8006b2e:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	689b      	ldr	r3, [r3, #8]
 8006b36:	249c      	movs	r4, #156	; 0x9c
 8006b38:	1939      	adds	r1, r7, r4
 8006b3a:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006b3c:	0011      	movs	r1, r2
 8006b3e:	18bb      	adds	r3, r7, r2
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	4aa2      	ldr	r2, [pc, #648]	; (8006dcc <HAL_UART_IRQHandler+0x2bc>)
 8006b44:	4013      	ands	r3, r2
 8006b46:	2298      	movs	r2, #152	; 0x98
 8006b48:	18bd      	adds	r5, r7, r2
 8006b4a:	602b      	str	r3, [r5, #0]
  if (errorflags == 0U)
 8006b4c:	18bb      	adds	r3, r7, r2
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d11a      	bne.n	8006b8a <HAL_UART_IRQHandler+0x7a>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006b54:	187b      	adds	r3, r7, r1
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	4013      	ands	r3, r2
 8006b5c:	d015      	beq.n	8006b8a <HAL_UART_IRQHandler+0x7a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006b5e:	183b      	adds	r3, r7, r0
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	2220      	movs	r2, #32
 8006b64:	4013      	ands	r3, r2
 8006b66:	d105      	bne.n	8006b74 <HAL_UART_IRQHandler+0x64>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006b68:	193b      	adds	r3, r7, r4
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	2380      	movs	r3, #128	; 0x80
 8006b6e:	055b      	lsls	r3, r3, #21
 8006b70:	4013      	ands	r3, r2
 8006b72:	d00a      	beq.n	8006b8a <HAL_UART_IRQHandler+0x7a>
    {
      if (huart->RxISR != NULL)
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d100      	bne.n	8006b7e <HAL_UART_IRQHandler+0x6e>
 8006b7c:	e2dc      	b.n	8007138 <HAL_UART_IRQHandler+0x628>
      {
        huart->RxISR(huart);
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b82:	687a      	ldr	r2, [r7, #4]
 8006b84:	0010      	movs	r0, r2
 8006b86:	4798      	blx	r3
      }
      return;
 8006b88:	e2d6      	b.n	8007138 <HAL_UART_IRQHandler+0x628>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006b8a:	2398      	movs	r3, #152	; 0x98
 8006b8c:	18fb      	adds	r3, r7, r3
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	2b00      	cmp	r3, #0
 8006b92:	d100      	bne.n	8006b96 <HAL_UART_IRQHandler+0x86>
 8006b94:	e122      	b.n	8006ddc <HAL_UART_IRQHandler+0x2cc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8006b96:	239c      	movs	r3, #156	; 0x9c
 8006b98:	18fb      	adds	r3, r7, r3
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a8c      	ldr	r2, [pc, #560]	; (8006dd0 <HAL_UART_IRQHandler+0x2c0>)
 8006b9e:	4013      	ands	r3, r2
 8006ba0:	d106      	bne.n	8006bb0 <HAL_UART_IRQHandler+0xa0>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8006ba2:	23a0      	movs	r3, #160	; 0xa0
 8006ba4:	18fb      	adds	r3, r7, r3
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a8a      	ldr	r2, [pc, #552]	; (8006dd4 <HAL_UART_IRQHandler+0x2c4>)
 8006baa:	4013      	ands	r3, r2
 8006bac:	d100      	bne.n	8006bb0 <HAL_UART_IRQHandler+0xa0>
 8006bae:	e115      	b.n	8006ddc <HAL_UART_IRQHandler+0x2cc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006bb0:	23a4      	movs	r3, #164	; 0xa4
 8006bb2:	18fb      	adds	r3, r7, r3
 8006bb4:	681b      	ldr	r3, [r3, #0]
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	4013      	ands	r3, r2
 8006bba:	d012      	beq.n	8006be2 <HAL_UART_IRQHandler+0xd2>
 8006bbc:	23a0      	movs	r3, #160	; 0xa0
 8006bbe:	18fb      	adds	r3, r7, r3
 8006bc0:	681a      	ldr	r2, [r3, #0]
 8006bc2:	2380      	movs	r3, #128	; 0x80
 8006bc4:	005b      	lsls	r3, r3, #1
 8006bc6:	4013      	ands	r3, r2
 8006bc8:	d00b      	beq.n	8006be2 <HAL_UART_IRQHandler+0xd2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2201      	movs	r2, #1
 8006bd0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2290      	movs	r2, #144	; 0x90
 8006bd6:	589b      	ldr	r3, [r3, r2]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	431a      	orrs	r2, r3
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	2190      	movs	r1, #144	; 0x90
 8006be0:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006be2:	23a4      	movs	r3, #164	; 0xa4
 8006be4:	18fb      	adds	r3, r7, r3
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2202      	movs	r2, #2
 8006bea:	4013      	ands	r3, r2
 8006bec:	d011      	beq.n	8006c12 <HAL_UART_IRQHandler+0x102>
 8006bee:	239c      	movs	r3, #156	; 0x9c
 8006bf0:	18fb      	adds	r3, r7, r3
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2201      	movs	r2, #1
 8006bf6:	4013      	ands	r3, r2
 8006bf8:	d00b      	beq.n	8006c12 <HAL_UART_IRQHandler+0x102>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2202      	movs	r2, #2
 8006c00:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	2290      	movs	r2, #144	; 0x90
 8006c06:	589b      	ldr	r3, [r3, r2]
 8006c08:	2204      	movs	r2, #4
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	2190      	movs	r1, #144	; 0x90
 8006c10:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006c12:	23a4      	movs	r3, #164	; 0xa4
 8006c14:	18fb      	adds	r3, r7, r3
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	2204      	movs	r2, #4
 8006c1a:	4013      	ands	r3, r2
 8006c1c:	d011      	beq.n	8006c42 <HAL_UART_IRQHandler+0x132>
 8006c1e:	239c      	movs	r3, #156	; 0x9c
 8006c20:	18fb      	adds	r3, r7, r3
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	2201      	movs	r2, #1
 8006c26:	4013      	ands	r3, r2
 8006c28:	d00b      	beq.n	8006c42 <HAL_UART_IRQHandler+0x132>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	2204      	movs	r2, #4
 8006c30:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2290      	movs	r2, #144	; 0x90
 8006c36:	589b      	ldr	r3, [r3, r2]
 8006c38:	2202      	movs	r2, #2
 8006c3a:	431a      	orrs	r2, r3
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	2190      	movs	r1, #144	; 0x90
 8006c40:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006c42:	23a4      	movs	r3, #164	; 0xa4
 8006c44:	18fb      	adds	r3, r7, r3
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2208      	movs	r2, #8
 8006c4a:	4013      	ands	r3, r2
 8006c4c:	d017      	beq.n	8006c7e <HAL_UART_IRQHandler+0x16e>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c4e:	23a0      	movs	r3, #160	; 0xa0
 8006c50:	18fb      	adds	r3, r7, r3
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	2220      	movs	r2, #32
 8006c56:	4013      	ands	r3, r2
 8006c58:	d105      	bne.n	8006c66 <HAL_UART_IRQHandler+0x156>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8006c5a:	239c      	movs	r3, #156	; 0x9c
 8006c5c:	18fb      	adds	r3, r7, r3
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a5b      	ldr	r2, [pc, #364]	; (8006dd0 <HAL_UART_IRQHandler+0x2c0>)
 8006c62:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8006c64:	d00b      	beq.n	8006c7e <HAL_UART_IRQHandler+0x16e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2208      	movs	r2, #8
 8006c6c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	2290      	movs	r2, #144	; 0x90
 8006c72:	589b      	ldr	r3, [r3, r2]
 8006c74:	2208      	movs	r2, #8
 8006c76:	431a      	orrs	r2, r3
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	2190      	movs	r1, #144	; 0x90
 8006c7c:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006c7e:	23a4      	movs	r3, #164	; 0xa4
 8006c80:	18fb      	adds	r3, r7, r3
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	2380      	movs	r3, #128	; 0x80
 8006c86:	011b      	lsls	r3, r3, #4
 8006c88:	4013      	ands	r3, r2
 8006c8a:	d013      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x1a4>
 8006c8c:	23a0      	movs	r3, #160	; 0xa0
 8006c8e:	18fb      	adds	r3, r7, r3
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	2380      	movs	r3, #128	; 0x80
 8006c94:	04db      	lsls	r3, r3, #19
 8006c96:	4013      	ands	r3, r2
 8006c98:	d00c      	beq.n	8006cb4 <HAL_UART_IRQHandler+0x1a4>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	2280      	movs	r2, #128	; 0x80
 8006ca0:	0112      	lsls	r2, r2, #4
 8006ca2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	2290      	movs	r2, #144	; 0x90
 8006ca8:	589b      	ldr	r3, [r3, r2]
 8006caa:	2220      	movs	r2, #32
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2190      	movs	r1, #144	; 0x90
 8006cb2:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2290      	movs	r2, #144	; 0x90
 8006cb8:	589b      	ldr	r3, [r3, r2]
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d100      	bne.n	8006cc0 <HAL_UART_IRQHandler+0x1b0>
 8006cbe:	e23d      	b.n	800713c <HAL_UART_IRQHandler+0x62c>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006cc0:	23a4      	movs	r3, #164	; 0xa4
 8006cc2:	18fb      	adds	r3, r7, r3
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	4013      	ands	r3, r2
 8006cca:	d015      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x1e8>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8006ccc:	23a0      	movs	r3, #160	; 0xa0
 8006cce:	18fb      	adds	r3, r7, r3
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	4013      	ands	r3, r2
 8006cd6:	d106      	bne.n	8006ce6 <HAL_UART_IRQHandler+0x1d6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8006cd8:	239c      	movs	r3, #156	; 0x9c
 8006cda:	18fb      	adds	r3, r7, r3
 8006cdc:	681a      	ldr	r2, [r3, #0]
 8006cde:	2380      	movs	r3, #128	; 0x80
 8006ce0:	055b      	lsls	r3, r3, #21
 8006ce2:	4013      	ands	r3, r2
 8006ce4:	d008      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x1e8>
      {
        if (huart->RxISR != NULL)
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d004      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x1e8>
        {
          huart->RxISR(huart);
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006cf2:	687a      	ldr	r2, [r7, #4]
 8006cf4:	0010      	movs	r0, r2
 8006cf6:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2290      	movs	r2, #144	; 0x90
 8006cfc:	589b      	ldr	r3, [r3, r2]
 8006cfe:	2194      	movs	r1, #148	; 0x94
 8006d00:	187a      	adds	r2, r7, r1
 8006d02:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	689b      	ldr	r3, [r3, #8]
 8006d0a:	2240      	movs	r2, #64	; 0x40
 8006d0c:	4013      	ands	r3, r2
 8006d0e:	2b40      	cmp	r3, #64	; 0x40
 8006d10:	d004      	beq.n	8006d1c <HAL_UART_IRQHandler+0x20c>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006d12:	187b      	adds	r3, r7, r1
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	2228      	movs	r2, #40	; 0x28
 8006d18:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006d1a:	d04c      	beq.n	8006db6 <HAL_UART_IRQHandler+0x2a6>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	0018      	movs	r0, r3
 8006d20:	f000 fff0 	bl	8007d04 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	689b      	ldr	r3, [r3, #8]
 8006d2a:	2240      	movs	r2, #64	; 0x40
 8006d2c:	4013      	ands	r3, r2
 8006d2e:	2b40      	cmp	r3, #64	; 0x40
 8006d30:	d13c      	bne.n	8006dac <HAL_UART_IRQHandler+0x29c>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006d32:	f3ef 8310 	mrs	r3, PRIMASK
 8006d36:	663b      	str	r3, [r7, #96]	; 0x60
  return(result);
 8006d38:	6e3b      	ldr	r3, [r7, #96]	; 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006d3a:	2090      	movs	r0, #144	; 0x90
 8006d3c:	183a      	adds	r2, r7, r0
 8006d3e:	6013      	str	r3, [r2, #0]
 8006d40:	2301      	movs	r3, #1
 8006d42:	667b      	str	r3, [r7, #100]	; 0x64
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d44:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d46:	f383 8810 	msr	PRIMASK, r3
}
 8006d4a:	46c0      	nop			; (mov r8, r8)
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	689a      	ldr	r2, [r3, #8]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	2140      	movs	r1, #64	; 0x40
 8006d58:	438a      	bics	r2, r1
 8006d5a:	609a      	str	r2, [r3, #8]
 8006d5c:	183b      	adds	r3, r7, r0
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	66bb      	str	r3, [r7, #104]	; 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006d62:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006d64:	f383 8810 	msr	PRIMASK, r3
}
 8006d68:	46c0      	nop			; (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	2280      	movs	r2, #128	; 0x80
 8006d6e:	589b      	ldr	r3, [r3, r2]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d016      	beq.n	8006da2 <HAL_UART_IRQHandler+0x292>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2280      	movs	r2, #128	; 0x80
 8006d78:	589b      	ldr	r3, [r3, r2]
 8006d7a:	4a17      	ldr	r2, [pc, #92]	; (8006dd8 <HAL_UART_IRQHandler+0x2c8>)
 8006d7c:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2280      	movs	r2, #128	; 0x80
 8006d82:	589b      	ldr	r3, [r3, r2]
 8006d84:	0018      	movs	r0, r3
 8006d86:	f7fe fa41 	bl	800520c <HAL_DMA_Abort_IT>
 8006d8a:	1e03      	subs	r3, r0, #0
 8006d8c:	d01c      	beq.n	8006dc8 <HAL_UART_IRQHandler+0x2b8>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2280      	movs	r2, #128	; 0x80
 8006d92:	589b      	ldr	r3, [r3, r2]
 8006d94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d96:	687a      	ldr	r2, [r7, #4]
 8006d98:	2180      	movs	r1, #128	; 0x80
 8006d9a:	5852      	ldr	r2, [r2, r1]
 8006d9c:	0010      	movs	r0, r2
 8006d9e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006da0:	e012      	b.n	8006dc8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	0018      	movs	r0, r3
 8006da6:	f000 f9e9 	bl	800717c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006daa:	e00d      	b.n	8006dc8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	0018      	movs	r0, r3
 8006db0:	f000 f9e4 	bl	800717c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006db4:	e008      	b.n	8006dc8 <HAL_UART_IRQHandler+0x2b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	0018      	movs	r0, r3
 8006dba:	f000 f9df 	bl	800717c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2290      	movs	r2, #144	; 0x90
 8006dc2:	2100      	movs	r1, #0
 8006dc4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8006dc6:	e1b9      	b.n	800713c <HAL_UART_IRQHandler+0x62c>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006dc8:	46c0      	nop			; (mov r8, r8)
    return;
 8006dca:	e1b7      	b.n	800713c <HAL_UART_IRQHandler+0x62c>
 8006dcc:	0000080f 	.word	0x0000080f
 8006dd0:	10000001 	.word	0x10000001
 8006dd4:	04000120 	.word	0x04000120
 8006dd8:	08007dd1 	.word	0x08007dd1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006de0:	2b01      	cmp	r3, #1
 8006de2:	d000      	beq.n	8006de6 <HAL_UART_IRQHandler+0x2d6>
 8006de4:	e13e      	b.n	8007064 <HAL_UART_IRQHandler+0x554>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006de6:	23a4      	movs	r3, #164	; 0xa4
 8006de8:	18fb      	adds	r3, r7, r3
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	2210      	movs	r2, #16
 8006dee:	4013      	ands	r3, r2
 8006df0:	d100      	bne.n	8006df4 <HAL_UART_IRQHandler+0x2e4>
 8006df2:	e137      	b.n	8007064 <HAL_UART_IRQHandler+0x554>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006df4:	23a0      	movs	r3, #160	; 0xa0
 8006df6:	18fb      	adds	r3, r7, r3
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	2210      	movs	r2, #16
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	d100      	bne.n	8006e02 <HAL_UART_IRQHandler+0x2f2>
 8006e00:	e130      	b.n	8007064 <HAL_UART_IRQHandler+0x554>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	2210      	movs	r2, #16
 8006e08:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	689b      	ldr	r3, [r3, #8]
 8006e10:	2240      	movs	r2, #64	; 0x40
 8006e12:	4013      	ands	r3, r2
 8006e14:	2b40      	cmp	r3, #64	; 0x40
 8006e16:	d000      	beq.n	8006e1a <HAL_UART_IRQHandler+0x30a>
 8006e18:	e0a4      	b.n	8006f64 <HAL_UART_IRQHandler+0x454>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2280      	movs	r2, #128	; 0x80
 8006e1e:	589b      	ldr	r3, [r3, r2]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	685a      	ldr	r2, [r3, #4]
 8006e24:	217e      	movs	r1, #126	; 0x7e
 8006e26:	187b      	adds	r3, r7, r1
 8006e28:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8006e2a:	187b      	adds	r3, r7, r1
 8006e2c:	881b      	ldrh	r3, [r3, #0]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d100      	bne.n	8006e34 <HAL_UART_IRQHandler+0x324>
 8006e32:	e185      	b.n	8007140 <HAL_UART_IRQHandler+0x630>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	225c      	movs	r2, #92	; 0x5c
 8006e38:	5a9b      	ldrh	r3, [r3, r2]
 8006e3a:	187a      	adds	r2, r7, r1
 8006e3c:	8812      	ldrh	r2, [r2, #0]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d300      	bcc.n	8006e44 <HAL_UART_IRQHandler+0x334>
 8006e42:	e17d      	b.n	8007140 <HAL_UART_IRQHandler+0x630>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	187a      	adds	r2, r7, r1
 8006e48:	215e      	movs	r1, #94	; 0x5e
 8006e4a:	8812      	ldrh	r2, [r2, #0]
 8006e4c:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2280      	movs	r2, #128	; 0x80
 8006e52:	589b      	ldr	r3, [r3, r2]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2220      	movs	r2, #32
 8006e5a:	4013      	ands	r3, r2
 8006e5c:	d170      	bne.n	8006f40 <HAL_UART_IRQHandler+0x430>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e5e:	f3ef 8310 	mrs	r3, PRIMASK
 8006e62:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8006e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006e66:	67bb      	str	r3, [r7, #120]	; 0x78
 8006e68:	2301      	movs	r3, #1
 8006e6a:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e6e:	f383 8810 	msr	PRIMASK, r3
}
 8006e72:	46c0      	nop			; (mov r8, r8)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	681a      	ldr	r2, [r3, #0]
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	49b4      	ldr	r1, [pc, #720]	; (8007150 <HAL_UART_IRQHandler+0x640>)
 8006e80:	400a      	ands	r2, r1
 8006e82:	601a      	str	r2, [r3, #0]
 8006e84:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006e86:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e8a:	f383 8810 	msr	PRIMASK, r3
}
 8006e8e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006e90:	f3ef 8310 	mrs	r3, PRIMASK
 8006e94:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8006e96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e98:	677b      	str	r3, [r7, #116]	; 0x74
 8006e9a:	2301      	movs	r3, #1
 8006e9c:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006e9e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006ea0:	f383 8810 	msr	PRIMASK, r3
}
 8006ea4:	46c0      	nop			; (mov r8, r8)
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	689a      	ldr	r2, [r3, #8]
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	2101      	movs	r1, #1
 8006eb2:	438a      	bics	r2, r1
 8006eb4:	609a      	str	r2, [r3, #8]
 8006eb6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006eb8:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006ebc:	f383 8810 	msr	PRIMASK, r3
}
 8006ec0:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006ec2:	f3ef 8310 	mrs	r3, PRIMASK
 8006ec6:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 8006ec8:	6cbb      	ldr	r3, [r7, #72]	; 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006eca:	673b      	str	r3, [r7, #112]	; 0x70
 8006ecc:	2301      	movs	r3, #1
 8006ece:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ed0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006ed2:	f383 8810 	msr	PRIMASK, r3
}
 8006ed6:	46c0      	nop			; (mov r8, r8)
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	2140      	movs	r1, #64	; 0x40
 8006ee4:	438a      	bics	r2, r1
 8006ee6:	609a      	str	r2, [r3, #8]
 8006ee8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006eea:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006eec:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006eee:	f383 8810 	msr	PRIMASK, r3
}
 8006ef2:	46c0      	nop			; (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	228c      	movs	r2, #140	; 0x8c
 8006ef8:	2120      	movs	r1, #32
 8006efa:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	2200      	movs	r2, #0
 8006f00:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f02:	f3ef 8310 	mrs	r3, PRIMASK
 8006f06:	657b      	str	r3, [r7, #84]	; 0x54
  return(result);
 8006f08:	6d7b      	ldr	r3, [r7, #84]	; 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006f0c:	2301      	movs	r3, #1
 8006f0e:	65bb      	str	r3, [r7, #88]	; 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f10:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006f12:	f383 8810 	msr	PRIMASK, r3
}
 8006f16:	46c0      	nop			; (mov r8, r8)
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	2110      	movs	r1, #16
 8006f24:	438a      	bics	r2, r1
 8006f26:	601a      	str	r2, [r3, #0]
 8006f28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006f2c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006f2e:	f383 8810 	msr	PRIMASK, r3
}
 8006f32:	46c0      	nop			; (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006f34:	687b      	ldr	r3, [r7, #4]
 8006f36:	2280      	movs	r2, #128	; 0x80
 8006f38:	589b      	ldr	r3, [r3, r2]
 8006f3a:	0018      	movs	r0, r3
 8006f3c:	f7fe f904 	bl	8005148 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	2202      	movs	r2, #2
 8006f44:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	225c      	movs	r2, #92	; 0x5c
 8006f4a:	5a9a      	ldrh	r2, [r3, r2]
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	215e      	movs	r1, #94	; 0x5e
 8006f50:	5a5b      	ldrh	r3, [r3, r1]
 8006f52:	b29b      	uxth	r3, r3
 8006f54:	1ad3      	subs	r3, r2, r3
 8006f56:	b29a      	uxth	r2, r3
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	0011      	movs	r1, r2
 8006f5c:	0018      	movs	r0, r3
 8006f5e:	f000 f915 	bl	800718c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8006f62:	e0ed      	b.n	8007140 <HAL_UART_IRQHandler+0x630>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	225c      	movs	r2, #92	; 0x5c
 8006f68:	5a99      	ldrh	r1, [r3, r2]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	225e      	movs	r2, #94	; 0x5e
 8006f6e:	5a9b      	ldrh	r3, [r3, r2]
 8006f70:	b29a      	uxth	r2, r3
 8006f72:	208e      	movs	r0, #142	; 0x8e
 8006f74:	183b      	adds	r3, r7, r0
 8006f76:	1a8a      	subs	r2, r1, r2
 8006f78:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	225e      	movs	r2, #94	; 0x5e
 8006f7e:	5a9b      	ldrh	r3, [r3, r2]
 8006f80:	b29b      	uxth	r3, r3
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d100      	bne.n	8006f88 <HAL_UART_IRQHandler+0x478>
 8006f86:	e0dd      	b.n	8007144 <HAL_UART_IRQHandler+0x634>
          && (nb_rx_data > 0U))
 8006f88:	183b      	adds	r3, r7, r0
 8006f8a:	881b      	ldrh	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d100      	bne.n	8006f92 <HAL_UART_IRQHandler+0x482>
 8006f90:	e0d8      	b.n	8007144 <HAL_UART_IRQHandler+0x634>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006f92:	f3ef 8310 	mrs	r3, PRIMASK
 8006f96:	60fb      	str	r3, [r7, #12]
  return(result);
 8006f98:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006f9a:	2488      	movs	r4, #136	; 0x88
 8006f9c:	193a      	adds	r2, r7, r4
 8006f9e:	6013      	str	r3, [r2, #0]
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fa4:	693b      	ldr	r3, [r7, #16]
 8006fa6:	f383 8810 	msr	PRIMASK, r3
}
 8006faa:	46c0      	nop			; (mov r8, r8)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	681a      	ldr	r2, [r3, #0]
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	4967      	ldr	r1, [pc, #412]	; (8007154 <HAL_UART_IRQHandler+0x644>)
 8006fb8:	400a      	ands	r2, r1
 8006fba:	601a      	str	r2, [r3, #0]
 8006fbc:	193b      	adds	r3, r7, r4
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fc2:	697b      	ldr	r3, [r7, #20]
 8006fc4:	f383 8810 	msr	PRIMASK, r3
}
 8006fc8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8006fca:	f3ef 8310 	mrs	r3, PRIMASK
 8006fce:	61bb      	str	r3, [r7, #24]
  return(result);
 8006fd0:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006fd2:	2484      	movs	r4, #132	; 0x84
 8006fd4:	193a      	adds	r2, r7, r4
 8006fd6:	6013      	str	r3, [r2, #0]
 8006fd8:	2301      	movs	r3, #1
 8006fda:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006fdc:	69fb      	ldr	r3, [r7, #28]
 8006fde:	f383 8810 	msr	PRIMASK, r3
}
 8006fe2:	46c0      	nop			; (mov r8, r8)
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	681b      	ldr	r3, [r3, #0]
 8006fe8:	689a      	ldr	r2, [r3, #8]
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	495a      	ldr	r1, [pc, #360]	; (8007158 <HAL_UART_IRQHandler+0x648>)
 8006ff0:	400a      	ands	r2, r1
 8006ff2:	609a      	str	r2, [r3, #8]
 8006ff4:	193b      	adds	r3, r7, r4
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8006ffa:	6a3b      	ldr	r3, [r7, #32]
 8006ffc:	f383 8810 	msr	PRIMASK, r3
}
 8007000:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	228c      	movs	r2, #140	; 0x8c
 8007006:	2120      	movs	r1, #32
 8007008:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	2200      	movs	r2, #0
 800700e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2200      	movs	r2, #0
 8007014:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007016:	f3ef 8310 	mrs	r3, PRIMASK
 800701a:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 800701c:	6a7b      	ldr	r3, [r7, #36]	; 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800701e:	2480      	movs	r4, #128	; 0x80
 8007020:	193a      	adds	r2, r7, r4
 8007022:	6013      	str	r3, [r2, #0]
 8007024:	2301      	movs	r3, #1
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	f383 8810 	msr	PRIMASK, r3
}
 800702e:	46c0      	nop			; (mov r8, r8)
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	681a      	ldr	r2, [r3, #0]
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2110      	movs	r1, #16
 800703c:	438a      	bics	r2, r1
 800703e:	601a      	str	r2, [r3, #0]
 8007040:	193b      	adds	r3, r7, r4
 8007042:	681b      	ldr	r3, [r3, #0]
 8007044:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007046:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007048:	f383 8810 	msr	PRIMASK, r3
}
 800704c:	46c0      	nop			; (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2202      	movs	r2, #2
 8007052:	671a      	str	r2, [r3, #112]	; 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007054:	183b      	adds	r3, r7, r0
 8007056:	881a      	ldrh	r2, [r3, #0]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	0011      	movs	r1, r2
 800705c:	0018      	movs	r0, r3
 800705e:	f000 f895 	bl	800718c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007062:	e06f      	b.n	8007144 <HAL_UART_IRQHandler+0x634>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007064:	23a4      	movs	r3, #164	; 0xa4
 8007066:	18fb      	adds	r3, r7, r3
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	2380      	movs	r3, #128	; 0x80
 800706c:	035b      	lsls	r3, r3, #13
 800706e:	4013      	ands	r3, r2
 8007070:	d010      	beq.n	8007094 <HAL_UART_IRQHandler+0x584>
 8007072:	239c      	movs	r3, #156	; 0x9c
 8007074:	18fb      	adds	r3, r7, r3
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	2380      	movs	r3, #128	; 0x80
 800707a:	03db      	lsls	r3, r3, #15
 800707c:	4013      	ands	r3, r2
 800707e:	d009      	beq.n	8007094 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	2280      	movs	r2, #128	; 0x80
 8007086:	0352      	lsls	r2, r2, #13
 8007088:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 800708a:	687b      	ldr	r3, [r7, #4]
 800708c:	0018      	movs	r0, r3
 800708e:	f001 fbf3 	bl	8008878 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007092:	e05a      	b.n	800714a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007094:	23a4      	movs	r3, #164	; 0xa4
 8007096:	18fb      	adds	r3, r7, r3
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	2280      	movs	r2, #128	; 0x80
 800709c:	4013      	ands	r3, r2
 800709e:	d016      	beq.n	80070ce <HAL_UART_IRQHandler+0x5be>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80070a0:	23a0      	movs	r3, #160	; 0xa0
 80070a2:	18fb      	adds	r3, r7, r3
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	2280      	movs	r2, #128	; 0x80
 80070a8:	4013      	ands	r3, r2
 80070aa:	d106      	bne.n	80070ba <HAL_UART_IRQHandler+0x5aa>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80070ac:	239c      	movs	r3, #156	; 0x9c
 80070ae:	18fb      	adds	r3, r7, r3
 80070b0:	681a      	ldr	r2, [r3, #0]
 80070b2:	2380      	movs	r3, #128	; 0x80
 80070b4:	041b      	lsls	r3, r3, #16
 80070b6:	4013      	ands	r3, r2
 80070b8:	d009      	beq.n	80070ce <HAL_UART_IRQHandler+0x5be>
  {
    if (huart->TxISR != NULL)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d042      	beq.n	8007148 <HAL_UART_IRQHandler+0x638>
    {
      huart->TxISR(huart);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80070c6:	687a      	ldr	r2, [r7, #4]
 80070c8:	0010      	movs	r0, r2
 80070ca:	4798      	blx	r3
    }
    return;
 80070cc:	e03c      	b.n	8007148 <HAL_UART_IRQHandler+0x638>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80070ce:	23a4      	movs	r3, #164	; 0xa4
 80070d0:	18fb      	adds	r3, r7, r3
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	2240      	movs	r2, #64	; 0x40
 80070d6:	4013      	ands	r3, r2
 80070d8:	d00a      	beq.n	80070f0 <HAL_UART_IRQHandler+0x5e0>
 80070da:	23a0      	movs	r3, #160	; 0xa0
 80070dc:	18fb      	adds	r3, r7, r3
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2240      	movs	r2, #64	; 0x40
 80070e2:	4013      	ands	r3, r2
 80070e4:	d004      	beq.n	80070f0 <HAL_UART_IRQHandler+0x5e0>
  {
    UART_EndTransmit_IT(huart);
 80070e6:	687b      	ldr	r3, [r7, #4]
 80070e8:	0018      	movs	r0, r3
 80070ea:	f000 fe88 	bl	8007dfe <UART_EndTransmit_IT>
    return;
 80070ee:	e02c      	b.n	800714a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80070f0:	23a4      	movs	r3, #164	; 0xa4
 80070f2:	18fb      	adds	r3, r7, r3
 80070f4:	681a      	ldr	r2, [r3, #0]
 80070f6:	2380      	movs	r3, #128	; 0x80
 80070f8:	041b      	lsls	r3, r3, #16
 80070fa:	4013      	ands	r3, r2
 80070fc:	d00b      	beq.n	8007116 <HAL_UART_IRQHandler+0x606>
 80070fe:	23a0      	movs	r3, #160	; 0xa0
 8007100:	18fb      	adds	r3, r7, r3
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	2380      	movs	r3, #128	; 0x80
 8007106:	05db      	lsls	r3, r3, #23
 8007108:	4013      	ands	r3, r2
 800710a:	d004      	beq.n	8007116 <HAL_UART_IRQHandler+0x606>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	0018      	movs	r0, r3
 8007110:	f001 fbc2 	bl	8008898 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007114:	e019      	b.n	800714a <HAL_UART_IRQHandler+0x63a>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007116:	23a4      	movs	r3, #164	; 0xa4
 8007118:	18fb      	adds	r3, r7, r3
 800711a:	681a      	ldr	r2, [r3, #0]
 800711c:	2380      	movs	r3, #128	; 0x80
 800711e:	045b      	lsls	r3, r3, #17
 8007120:	4013      	ands	r3, r2
 8007122:	d012      	beq.n	800714a <HAL_UART_IRQHandler+0x63a>
 8007124:	23a0      	movs	r3, #160	; 0xa0
 8007126:	18fb      	adds	r3, r7, r3
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	da0d      	bge.n	800714a <HAL_UART_IRQHandler+0x63a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	0018      	movs	r0, r3
 8007132:	f001 fba9 	bl	8008888 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007136:	e008      	b.n	800714a <HAL_UART_IRQHandler+0x63a>
      return;
 8007138:	46c0      	nop			; (mov r8, r8)
 800713a:	e006      	b.n	800714a <HAL_UART_IRQHandler+0x63a>
    return;
 800713c:	46c0      	nop			; (mov r8, r8)
 800713e:	e004      	b.n	800714a <HAL_UART_IRQHandler+0x63a>
      return;
 8007140:	46c0      	nop			; (mov r8, r8)
 8007142:	e002      	b.n	800714a <HAL_UART_IRQHandler+0x63a>
      return;
 8007144:	46c0      	nop			; (mov r8, r8)
 8007146:	e000      	b.n	800714a <HAL_UART_IRQHandler+0x63a>
    return;
 8007148:	46c0      	nop			; (mov r8, r8)
  }
}
 800714a:	46bd      	mov	sp, r7
 800714c:	b02a      	add	sp, #168	; 0xa8
 800714e:	bdb0      	pop	{r4, r5, r7, pc}
 8007150:	fffffeff 	.word	0xfffffeff
 8007154:	fffffedf 	.word	0xfffffedf
 8007158:	effffffe 	.word	0xeffffffe

0800715c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007164:	46c0      	nop			; (mov r8, r8)
 8007166:	46bd      	mov	sp, r7
 8007168:	b002      	add	sp, #8
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8007174:	46c0      	nop			; (mov r8, r8)
 8007176:	46bd      	mov	sp, r7
 8007178:	b002      	add	sp, #8
 800717a:	bd80      	pop	{r7, pc}

0800717c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800717c:	b580      	push	{r7, lr}
 800717e:	b082      	sub	sp, #8
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007184:	46c0      	nop			; (mov r8, r8)
 8007186:	46bd      	mov	sp, r7
 8007188:	b002      	add	sp, #8
 800718a:	bd80      	pop	{r7, pc}

0800718c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800718c:	b580      	push	{r7, lr}
 800718e:	b082      	sub	sp, #8
 8007190:	af00      	add	r7, sp, #0
 8007192:	6078      	str	r0, [r7, #4]
 8007194:	000a      	movs	r2, r1
 8007196:	1cbb      	adds	r3, r7, #2
 8007198:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800719a:	46c0      	nop			; (mov r8, r8)
 800719c:	46bd      	mov	sp, r7
 800719e:	b002      	add	sp, #8
 80071a0:	bd80      	pop	{r7, pc}
	...

080071a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071a4:	b5b0      	push	{r4, r5, r7, lr}
 80071a6:	b090      	sub	sp, #64	; 0x40
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80071ac:	231a      	movs	r3, #26
 80071ae:	2220      	movs	r2, #32
 80071b0:	189b      	adds	r3, r3, r2
 80071b2:	19db      	adds	r3, r3, r7
 80071b4:	2200      	movs	r2, #0
 80071b6:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80071b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ba:	689a      	ldr	r2, [r3, #8]
 80071bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071be:	691b      	ldr	r3, [r3, #16]
 80071c0:	431a      	orrs	r2, r3
 80071c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071c4:	695b      	ldr	r3, [r3, #20]
 80071c6:	431a      	orrs	r2, r3
 80071c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071ca:	69db      	ldr	r3, [r3, #28]
 80071cc:	4313      	orrs	r3, r2
 80071ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80071d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	681b      	ldr	r3, [r3, #0]
 80071d6:	4aaf      	ldr	r2, [pc, #700]	; (8007494 <UART_SetConfig+0x2f0>)
 80071d8:	4013      	ands	r3, r2
 80071da:	0019      	movs	r1, r3
 80071dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80071e2:	430b      	orrs	r3, r1
 80071e4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	685b      	ldr	r3, [r3, #4]
 80071ec:	4aaa      	ldr	r2, [pc, #680]	; (8007498 <UART_SetConfig+0x2f4>)
 80071ee:	4013      	ands	r3, r2
 80071f0:	0018      	movs	r0, r3
 80071f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f4:	68d9      	ldr	r1, [r3, #12]
 80071f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071f8:	681a      	ldr	r2, [r3, #0]
 80071fa:	0003      	movs	r3, r0
 80071fc:	430b      	orrs	r3, r1
 80071fe:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007200:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007202:	699b      	ldr	r3, [r3, #24]
 8007204:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	4aa4      	ldr	r2, [pc, #656]	; (800749c <UART_SetConfig+0x2f8>)
 800720c:	4293      	cmp	r3, r2
 800720e:	d004      	beq.n	800721a <UART_SetConfig+0x76>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007212:	6a1b      	ldr	r3, [r3, #32]
 8007214:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007216:	4313      	orrs	r3, r2
 8007218:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800721a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	689b      	ldr	r3, [r3, #8]
 8007220:	4a9f      	ldr	r2, [pc, #636]	; (80074a0 <UART_SetConfig+0x2fc>)
 8007222:	4013      	ands	r3, r2
 8007224:	0019      	movs	r1, r3
 8007226:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800722c:	430b      	orrs	r3, r1
 800722e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007236:	220f      	movs	r2, #15
 8007238:	4393      	bics	r3, r2
 800723a:	0018      	movs	r0, r3
 800723c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800723e:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8007240:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	0003      	movs	r3, r0
 8007246:	430b      	orrs	r3, r1
 8007248:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800724a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	4a95      	ldr	r2, [pc, #596]	; (80074a4 <UART_SetConfig+0x300>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d131      	bne.n	80072b8 <UART_SetConfig+0x114>
 8007254:	4b94      	ldr	r3, [pc, #592]	; (80074a8 <UART_SetConfig+0x304>)
 8007256:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007258:	2203      	movs	r2, #3
 800725a:	4013      	ands	r3, r2
 800725c:	2b03      	cmp	r3, #3
 800725e:	d01d      	beq.n	800729c <UART_SetConfig+0xf8>
 8007260:	d823      	bhi.n	80072aa <UART_SetConfig+0x106>
 8007262:	2b02      	cmp	r3, #2
 8007264:	d00c      	beq.n	8007280 <UART_SetConfig+0xdc>
 8007266:	d820      	bhi.n	80072aa <UART_SetConfig+0x106>
 8007268:	2b00      	cmp	r3, #0
 800726a:	d002      	beq.n	8007272 <UART_SetConfig+0xce>
 800726c:	2b01      	cmp	r3, #1
 800726e:	d00e      	beq.n	800728e <UART_SetConfig+0xea>
 8007270:	e01b      	b.n	80072aa <UART_SetConfig+0x106>
 8007272:	231b      	movs	r3, #27
 8007274:	2220      	movs	r2, #32
 8007276:	189b      	adds	r3, r3, r2
 8007278:	19db      	adds	r3, r3, r7
 800727a:	2200      	movs	r2, #0
 800727c:	701a      	strb	r2, [r3, #0]
 800727e:	e0b4      	b.n	80073ea <UART_SetConfig+0x246>
 8007280:	231b      	movs	r3, #27
 8007282:	2220      	movs	r2, #32
 8007284:	189b      	adds	r3, r3, r2
 8007286:	19db      	adds	r3, r3, r7
 8007288:	2202      	movs	r2, #2
 800728a:	701a      	strb	r2, [r3, #0]
 800728c:	e0ad      	b.n	80073ea <UART_SetConfig+0x246>
 800728e:	231b      	movs	r3, #27
 8007290:	2220      	movs	r2, #32
 8007292:	189b      	adds	r3, r3, r2
 8007294:	19db      	adds	r3, r3, r7
 8007296:	2204      	movs	r2, #4
 8007298:	701a      	strb	r2, [r3, #0]
 800729a:	e0a6      	b.n	80073ea <UART_SetConfig+0x246>
 800729c:	231b      	movs	r3, #27
 800729e:	2220      	movs	r2, #32
 80072a0:	189b      	adds	r3, r3, r2
 80072a2:	19db      	adds	r3, r3, r7
 80072a4:	2208      	movs	r2, #8
 80072a6:	701a      	strb	r2, [r3, #0]
 80072a8:	e09f      	b.n	80073ea <UART_SetConfig+0x246>
 80072aa:	231b      	movs	r3, #27
 80072ac:	2220      	movs	r2, #32
 80072ae:	189b      	adds	r3, r3, r2
 80072b0:	19db      	adds	r3, r3, r7
 80072b2:	2210      	movs	r2, #16
 80072b4:	701a      	strb	r2, [r3, #0]
 80072b6:	e098      	b.n	80073ea <UART_SetConfig+0x246>
 80072b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a7b      	ldr	r2, [pc, #492]	; (80074ac <UART_SetConfig+0x308>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d131      	bne.n	8007326 <UART_SetConfig+0x182>
 80072c2:	4b79      	ldr	r3, [pc, #484]	; (80074a8 <UART_SetConfig+0x304>)
 80072c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80072c6:	220c      	movs	r2, #12
 80072c8:	4013      	ands	r3, r2
 80072ca:	2b0c      	cmp	r3, #12
 80072cc:	d01d      	beq.n	800730a <UART_SetConfig+0x166>
 80072ce:	d823      	bhi.n	8007318 <UART_SetConfig+0x174>
 80072d0:	2b08      	cmp	r3, #8
 80072d2:	d00c      	beq.n	80072ee <UART_SetConfig+0x14a>
 80072d4:	d820      	bhi.n	8007318 <UART_SetConfig+0x174>
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d002      	beq.n	80072e0 <UART_SetConfig+0x13c>
 80072da:	2b04      	cmp	r3, #4
 80072dc:	d00e      	beq.n	80072fc <UART_SetConfig+0x158>
 80072de:	e01b      	b.n	8007318 <UART_SetConfig+0x174>
 80072e0:	231b      	movs	r3, #27
 80072e2:	2220      	movs	r2, #32
 80072e4:	189b      	adds	r3, r3, r2
 80072e6:	19db      	adds	r3, r3, r7
 80072e8:	2200      	movs	r2, #0
 80072ea:	701a      	strb	r2, [r3, #0]
 80072ec:	e07d      	b.n	80073ea <UART_SetConfig+0x246>
 80072ee:	231b      	movs	r3, #27
 80072f0:	2220      	movs	r2, #32
 80072f2:	189b      	adds	r3, r3, r2
 80072f4:	19db      	adds	r3, r3, r7
 80072f6:	2202      	movs	r2, #2
 80072f8:	701a      	strb	r2, [r3, #0]
 80072fa:	e076      	b.n	80073ea <UART_SetConfig+0x246>
 80072fc:	231b      	movs	r3, #27
 80072fe:	2220      	movs	r2, #32
 8007300:	189b      	adds	r3, r3, r2
 8007302:	19db      	adds	r3, r3, r7
 8007304:	2204      	movs	r2, #4
 8007306:	701a      	strb	r2, [r3, #0]
 8007308:	e06f      	b.n	80073ea <UART_SetConfig+0x246>
 800730a:	231b      	movs	r3, #27
 800730c:	2220      	movs	r2, #32
 800730e:	189b      	adds	r3, r3, r2
 8007310:	19db      	adds	r3, r3, r7
 8007312:	2208      	movs	r2, #8
 8007314:	701a      	strb	r2, [r3, #0]
 8007316:	e068      	b.n	80073ea <UART_SetConfig+0x246>
 8007318:	231b      	movs	r3, #27
 800731a:	2220      	movs	r2, #32
 800731c:	189b      	adds	r3, r3, r2
 800731e:	19db      	adds	r3, r3, r7
 8007320:	2210      	movs	r2, #16
 8007322:	701a      	strb	r2, [r3, #0]
 8007324:	e061      	b.n	80073ea <UART_SetConfig+0x246>
 8007326:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007328:	681b      	ldr	r3, [r3, #0]
 800732a:	4a61      	ldr	r2, [pc, #388]	; (80074b0 <UART_SetConfig+0x30c>)
 800732c:	4293      	cmp	r3, r2
 800732e:	d106      	bne.n	800733e <UART_SetConfig+0x19a>
 8007330:	231b      	movs	r3, #27
 8007332:	2220      	movs	r2, #32
 8007334:	189b      	adds	r3, r3, r2
 8007336:	19db      	adds	r3, r3, r7
 8007338:	2200      	movs	r2, #0
 800733a:	701a      	strb	r2, [r3, #0]
 800733c:	e055      	b.n	80073ea <UART_SetConfig+0x246>
 800733e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a5c      	ldr	r2, [pc, #368]	; (80074b4 <UART_SetConfig+0x310>)
 8007344:	4293      	cmp	r3, r2
 8007346:	d106      	bne.n	8007356 <UART_SetConfig+0x1b2>
 8007348:	231b      	movs	r3, #27
 800734a:	2220      	movs	r2, #32
 800734c:	189b      	adds	r3, r3, r2
 800734e:	19db      	adds	r3, r3, r7
 8007350:	2200      	movs	r2, #0
 8007352:	701a      	strb	r2, [r3, #0]
 8007354:	e049      	b.n	80073ea <UART_SetConfig+0x246>
 8007356:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a50      	ldr	r2, [pc, #320]	; (800749c <UART_SetConfig+0x2f8>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d13e      	bne.n	80073de <UART_SetConfig+0x23a>
 8007360:	4b51      	ldr	r3, [pc, #324]	; (80074a8 <UART_SetConfig+0x304>)
 8007362:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8007364:	23c0      	movs	r3, #192	; 0xc0
 8007366:	011b      	lsls	r3, r3, #4
 8007368:	4013      	ands	r3, r2
 800736a:	22c0      	movs	r2, #192	; 0xc0
 800736c:	0112      	lsls	r2, r2, #4
 800736e:	4293      	cmp	r3, r2
 8007370:	d027      	beq.n	80073c2 <UART_SetConfig+0x21e>
 8007372:	22c0      	movs	r2, #192	; 0xc0
 8007374:	0112      	lsls	r2, r2, #4
 8007376:	4293      	cmp	r3, r2
 8007378:	d82a      	bhi.n	80073d0 <UART_SetConfig+0x22c>
 800737a:	2280      	movs	r2, #128	; 0x80
 800737c:	0112      	lsls	r2, r2, #4
 800737e:	4293      	cmp	r3, r2
 8007380:	d011      	beq.n	80073a6 <UART_SetConfig+0x202>
 8007382:	2280      	movs	r2, #128	; 0x80
 8007384:	0112      	lsls	r2, r2, #4
 8007386:	4293      	cmp	r3, r2
 8007388:	d822      	bhi.n	80073d0 <UART_SetConfig+0x22c>
 800738a:	2b00      	cmp	r3, #0
 800738c:	d004      	beq.n	8007398 <UART_SetConfig+0x1f4>
 800738e:	2280      	movs	r2, #128	; 0x80
 8007390:	00d2      	lsls	r2, r2, #3
 8007392:	4293      	cmp	r3, r2
 8007394:	d00e      	beq.n	80073b4 <UART_SetConfig+0x210>
 8007396:	e01b      	b.n	80073d0 <UART_SetConfig+0x22c>
 8007398:	231b      	movs	r3, #27
 800739a:	2220      	movs	r2, #32
 800739c:	189b      	adds	r3, r3, r2
 800739e:	19db      	adds	r3, r3, r7
 80073a0:	2200      	movs	r2, #0
 80073a2:	701a      	strb	r2, [r3, #0]
 80073a4:	e021      	b.n	80073ea <UART_SetConfig+0x246>
 80073a6:	231b      	movs	r3, #27
 80073a8:	2220      	movs	r2, #32
 80073aa:	189b      	adds	r3, r3, r2
 80073ac:	19db      	adds	r3, r3, r7
 80073ae:	2202      	movs	r2, #2
 80073b0:	701a      	strb	r2, [r3, #0]
 80073b2:	e01a      	b.n	80073ea <UART_SetConfig+0x246>
 80073b4:	231b      	movs	r3, #27
 80073b6:	2220      	movs	r2, #32
 80073b8:	189b      	adds	r3, r3, r2
 80073ba:	19db      	adds	r3, r3, r7
 80073bc:	2204      	movs	r2, #4
 80073be:	701a      	strb	r2, [r3, #0]
 80073c0:	e013      	b.n	80073ea <UART_SetConfig+0x246>
 80073c2:	231b      	movs	r3, #27
 80073c4:	2220      	movs	r2, #32
 80073c6:	189b      	adds	r3, r3, r2
 80073c8:	19db      	adds	r3, r3, r7
 80073ca:	2208      	movs	r2, #8
 80073cc:	701a      	strb	r2, [r3, #0]
 80073ce:	e00c      	b.n	80073ea <UART_SetConfig+0x246>
 80073d0:	231b      	movs	r3, #27
 80073d2:	2220      	movs	r2, #32
 80073d4:	189b      	adds	r3, r3, r2
 80073d6:	19db      	adds	r3, r3, r7
 80073d8:	2210      	movs	r2, #16
 80073da:	701a      	strb	r2, [r3, #0]
 80073dc:	e005      	b.n	80073ea <UART_SetConfig+0x246>
 80073de:	231b      	movs	r3, #27
 80073e0:	2220      	movs	r2, #32
 80073e2:	189b      	adds	r3, r3, r2
 80073e4:	19db      	adds	r3, r3, r7
 80073e6:	2210      	movs	r2, #16
 80073e8:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80073ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	4a2b      	ldr	r2, [pc, #172]	; (800749c <UART_SetConfig+0x2f8>)
 80073f0:	4293      	cmp	r3, r2
 80073f2:	d000      	beq.n	80073f6 <UART_SetConfig+0x252>
 80073f4:	e0a9      	b.n	800754a <UART_SetConfig+0x3a6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80073f6:	231b      	movs	r3, #27
 80073f8:	2220      	movs	r2, #32
 80073fa:	189b      	adds	r3, r3, r2
 80073fc:	19db      	adds	r3, r3, r7
 80073fe:	781b      	ldrb	r3, [r3, #0]
 8007400:	2b08      	cmp	r3, #8
 8007402:	d015      	beq.n	8007430 <UART_SetConfig+0x28c>
 8007404:	dc18      	bgt.n	8007438 <UART_SetConfig+0x294>
 8007406:	2b04      	cmp	r3, #4
 8007408:	d00d      	beq.n	8007426 <UART_SetConfig+0x282>
 800740a:	dc15      	bgt.n	8007438 <UART_SetConfig+0x294>
 800740c:	2b00      	cmp	r3, #0
 800740e:	d002      	beq.n	8007416 <UART_SetConfig+0x272>
 8007410:	2b02      	cmp	r3, #2
 8007412:	d005      	beq.n	8007420 <UART_SetConfig+0x27c>
 8007414:	e010      	b.n	8007438 <UART_SetConfig+0x294>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007416:	f7fe fdff 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 800741a:	0003      	movs	r3, r0
 800741c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800741e:	e014      	b.n	800744a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007420:	4b25      	ldr	r3, [pc, #148]	; (80074b8 <UART_SetConfig+0x314>)
 8007422:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007424:	e011      	b.n	800744a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007426:	f7fe fd6b 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 800742a:	0003      	movs	r3, r0
 800742c:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800742e:	e00c      	b.n	800744a <UART_SetConfig+0x2a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007430:	2380      	movs	r3, #128	; 0x80
 8007432:	021b      	lsls	r3, r3, #8
 8007434:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007436:	e008      	b.n	800744a <UART_SetConfig+0x2a6>
      default:
        pclk = 0U;
 8007438:	2300      	movs	r3, #0
 800743a:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800743c:	231a      	movs	r3, #26
 800743e:	2220      	movs	r2, #32
 8007440:	189b      	adds	r3, r3, r2
 8007442:	19db      	adds	r3, r3, r7
 8007444:	2201      	movs	r2, #1
 8007446:	701a      	strb	r2, [r3, #0]
        break;
 8007448:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800744a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800744c:	2b00      	cmp	r3, #0
 800744e:	d100      	bne.n	8007452 <UART_SetConfig+0x2ae>
 8007450:	e14b      	b.n	80076ea <UART_SetConfig+0x546>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007452:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007454:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007456:	4b19      	ldr	r3, [pc, #100]	; (80074bc <UART_SetConfig+0x318>)
 8007458:	0052      	lsls	r2, r2, #1
 800745a:	5ad3      	ldrh	r3, [r2, r3]
 800745c:	0019      	movs	r1, r3
 800745e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8007460:	f7f8 fe6e 	bl	8000140 <__udivsi3>
 8007464:	0003      	movs	r3, r0
 8007466:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800746a:	685a      	ldr	r2, [r3, #4]
 800746c:	0013      	movs	r3, r2
 800746e:	005b      	lsls	r3, r3, #1
 8007470:	189b      	adds	r3, r3, r2
 8007472:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007474:	429a      	cmp	r2, r3
 8007476:	d305      	bcc.n	8007484 <UART_SetConfig+0x2e0>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007478:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800747a:	685b      	ldr	r3, [r3, #4]
 800747c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800747e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007480:	429a      	cmp	r2, r3
 8007482:	d91d      	bls.n	80074c0 <UART_SetConfig+0x31c>
      {
        ret = HAL_ERROR;
 8007484:	231a      	movs	r3, #26
 8007486:	2220      	movs	r2, #32
 8007488:	189b      	adds	r3, r3, r2
 800748a:	19db      	adds	r3, r3, r7
 800748c:	2201      	movs	r2, #1
 800748e:	701a      	strb	r2, [r3, #0]
 8007490:	e12b      	b.n	80076ea <UART_SetConfig+0x546>
 8007492:	46c0      	nop			; (mov r8, r8)
 8007494:	cfff69f3 	.word	0xcfff69f3
 8007498:	ffffcfff 	.word	0xffffcfff
 800749c:	40008000 	.word	0x40008000
 80074a0:	11fff4ff 	.word	0x11fff4ff
 80074a4:	40013800 	.word	0x40013800
 80074a8:	40021000 	.word	0x40021000
 80074ac:	40004400 	.word	0x40004400
 80074b0:	40004800 	.word	0x40004800
 80074b4:	40004c00 	.word	0x40004c00
 80074b8:	00f42400 	.word	0x00f42400
 80074bc:	0800d96c 	.word	0x0800d96c
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80074c2:	61bb      	str	r3, [r7, #24]
 80074c4:	2300      	movs	r3, #0
 80074c6:	61fb      	str	r3, [r7, #28]
 80074c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80074cc:	4b92      	ldr	r3, [pc, #584]	; (8007718 <UART_SetConfig+0x574>)
 80074ce:	0052      	lsls	r2, r2, #1
 80074d0:	5ad3      	ldrh	r3, [r2, r3]
 80074d2:	613b      	str	r3, [r7, #16]
 80074d4:	2300      	movs	r3, #0
 80074d6:	617b      	str	r3, [r7, #20]
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	69b8      	ldr	r0, [r7, #24]
 80074de:	69f9      	ldr	r1, [r7, #28]
 80074e0:	f7f8 ffe2 	bl	80004a8 <__aeabi_uldivmod>
 80074e4:	0002      	movs	r2, r0
 80074e6:	000b      	movs	r3, r1
 80074e8:	0e11      	lsrs	r1, r2, #24
 80074ea:	021d      	lsls	r5, r3, #8
 80074ec:	430d      	orrs	r5, r1
 80074ee:	0214      	lsls	r4, r2, #8
 80074f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	085b      	lsrs	r3, r3, #1
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	2300      	movs	r3, #0
 80074fa:	60fb      	str	r3, [r7, #12]
 80074fc:	68b8      	ldr	r0, [r7, #8]
 80074fe:	68f9      	ldr	r1, [r7, #12]
 8007500:	1900      	adds	r0, r0, r4
 8007502:	4169      	adcs	r1, r5
 8007504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007506:	685b      	ldr	r3, [r3, #4]
 8007508:	603b      	str	r3, [r7, #0]
 800750a:	2300      	movs	r3, #0
 800750c:	607b      	str	r3, [r7, #4]
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	f7f8 ffc9 	bl	80004a8 <__aeabi_uldivmod>
 8007516:	0002      	movs	r2, r0
 8007518:	000b      	movs	r3, r1
 800751a:	0013      	movs	r3, r2
 800751c:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800751e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007520:	23c0      	movs	r3, #192	; 0xc0
 8007522:	009b      	lsls	r3, r3, #2
 8007524:	429a      	cmp	r2, r3
 8007526:	d309      	bcc.n	800753c <UART_SetConfig+0x398>
 8007528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800752a:	2380      	movs	r3, #128	; 0x80
 800752c:	035b      	lsls	r3, r3, #13
 800752e:	429a      	cmp	r2, r3
 8007530:	d204      	bcs.n	800753c <UART_SetConfig+0x398>
        {
          huart->Instance->BRR = usartdiv;
 8007532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007538:	60da      	str	r2, [r3, #12]
 800753a:	e0d6      	b.n	80076ea <UART_SetConfig+0x546>
        }
        else
        {
          ret = HAL_ERROR;
 800753c:	231a      	movs	r3, #26
 800753e:	2220      	movs	r2, #32
 8007540:	189b      	adds	r3, r3, r2
 8007542:	19db      	adds	r3, r3, r7
 8007544:	2201      	movs	r2, #1
 8007546:	701a      	strb	r2, [r3, #0]
 8007548:	e0cf      	b.n	80076ea <UART_SetConfig+0x546>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800754a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800754c:	69da      	ldr	r2, [r3, #28]
 800754e:	2380      	movs	r3, #128	; 0x80
 8007550:	021b      	lsls	r3, r3, #8
 8007552:	429a      	cmp	r2, r3
 8007554:	d000      	beq.n	8007558 <UART_SetConfig+0x3b4>
 8007556:	e070      	b.n	800763a <UART_SetConfig+0x496>
  {
    switch (clocksource)
 8007558:	231b      	movs	r3, #27
 800755a:	2220      	movs	r2, #32
 800755c:	189b      	adds	r3, r3, r2
 800755e:	19db      	adds	r3, r3, r7
 8007560:	781b      	ldrb	r3, [r3, #0]
 8007562:	2b08      	cmp	r3, #8
 8007564:	d015      	beq.n	8007592 <UART_SetConfig+0x3ee>
 8007566:	dc18      	bgt.n	800759a <UART_SetConfig+0x3f6>
 8007568:	2b04      	cmp	r3, #4
 800756a:	d00d      	beq.n	8007588 <UART_SetConfig+0x3e4>
 800756c:	dc15      	bgt.n	800759a <UART_SetConfig+0x3f6>
 800756e:	2b00      	cmp	r3, #0
 8007570:	d002      	beq.n	8007578 <UART_SetConfig+0x3d4>
 8007572:	2b02      	cmp	r3, #2
 8007574:	d005      	beq.n	8007582 <UART_SetConfig+0x3de>
 8007576:	e010      	b.n	800759a <UART_SetConfig+0x3f6>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007578:	f7fe fd4e 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 800757c:	0003      	movs	r3, r0
 800757e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007580:	e014      	b.n	80075ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007582:	4b66      	ldr	r3, [pc, #408]	; (800771c <UART_SetConfig+0x578>)
 8007584:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007586:	e011      	b.n	80075ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007588:	f7fe fcba 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 800758c:	0003      	movs	r3, r0
 800758e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007590:	e00c      	b.n	80075ac <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007592:	2380      	movs	r3, #128	; 0x80
 8007594:	021b      	lsls	r3, r3, #8
 8007596:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007598:	e008      	b.n	80075ac <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 800759a:	2300      	movs	r3, #0
 800759c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 800759e:	231a      	movs	r3, #26
 80075a0:	2220      	movs	r2, #32
 80075a2:	189b      	adds	r3, r3, r2
 80075a4:	19db      	adds	r3, r3, r7
 80075a6:	2201      	movs	r2, #1
 80075a8:	701a      	strb	r2, [r3, #0]
        break;
 80075aa:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80075ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d100      	bne.n	80075b4 <UART_SetConfig+0x410>
 80075b2:	e09a      	b.n	80076ea <UART_SetConfig+0x546>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80075b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80075b8:	4b57      	ldr	r3, [pc, #348]	; (8007718 <UART_SetConfig+0x574>)
 80075ba:	0052      	lsls	r2, r2, #1
 80075bc:	5ad3      	ldrh	r3, [r2, r3]
 80075be:	0019      	movs	r1, r3
 80075c0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80075c2:	f7f8 fdbd 	bl	8000140 <__udivsi3>
 80075c6:	0003      	movs	r3, r0
 80075c8:	005a      	lsls	r2, r3, #1
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	685b      	ldr	r3, [r3, #4]
 80075ce:	085b      	lsrs	r3, r3, #1
 80075d0:	18d2      	adds	r2, r2, r3
 80075d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075d4:	685b      	ldr	r3, [r3, #4]
 80075d6:	0019      	movs	r1, r3
 80075d8:	0010      	movs	r0, r2
 80075da:	f7f8 fdb1 	bl	8000140 <__udivsi3>
 80075de:	0003      	movs	r3, r0
 80075e0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	2b0f      	cmp	r3, #15
 80075e6:	d921      	bls.n	800762c <UART_SetConfig+0x488>
 80075e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80075ea:	2380      	movs	r3, #128	; 0x80
 80075ec:	025b      	lsls	r3, r3, #9
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d21c      	bcs.n	800762c <UART_SetConfig+0x488>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80075f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075f4:	b29a      	uxth	r2, r3
 80075f6:	200e      	movs	r0, #14
 80075f8:	2420      	movs	r4, #32
 80075fa:	1903      	adds	r3, r0, r4
 80075fc:	19db      	adds	r3, r3, r7
 80075fe:	210f      	movs	r1, #15
 8007600:	438a      	bics	r2, r1
 8007602:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007604:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007606:	085b      	lsrs	r3, r3, #1
 8007608:	b29b      	uxth	r3, r3
 800760a:	2207      	movs	r2, #7
 800760c:	4013      	ands	r3, r2
 800760e:	b299      	uxth	r1, r3
 8007610:	1903      	adds	r3, r0, r4
 8007612:	19db      	adds	r3, r3, r7
 8007614:	1902      	adds	r2, r0, r4
 8007616:	19d2      	adds	r2, r2, r7
 8007618:	8812      	ldrh	r2, [r2, #0]
 800761a:	430a      	orrs	r2, r1
 800761c:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 800761e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	1902      	adds	r2, r0, r4
 8007624:	19d2      	adds	r2, r2, r7
 8007626:	8812      	ldrh	r2, [r2, #0]
 8007628:	60da      	str	r2, [r3, #12]
 800762a:	e05e      	b.n	80076ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 800762c:	231a      	movs	r3, #26
 800762e:	2220      	movs	r2, #32
 8007630:	189b      	adds	r3, r3, r2
 8007632:	19db      	adds	r3, r3, r7
 8007634:	2201      	movs	r2, #1
 8007636:	701a      	strb	r2, [r3, #0]
 8007638:	e057      	b.n	80076ea <UART_SetConfig+0x546>
      }
    }
  }
  else
  {
    switch (clocksource)
 800763a:	231b      	movs	r3, #27
 800763c:	2220      	movs	r2, #32
 800763e:	189b      	adds	r3, r3, r2
 8007640:	19db      	adds	r3, r3, r7
 8007642:	781b      	ldrb	r3, [r3, #0]
 8007644:	2b08      	cmp	r3, #8
 8007646:	d015      	beq.n	8007674 <UART_SetConfig+0x4d0>
 8007648:	dc18      	bgt.n	800767c <UART_SetConfig+0x4d8>
 800764a:	2b04      	cmp	r3, #4
 800764c:	d00d      	beq.n	800766a <UART_SetConfig+0x4c6>
 800764e:	dc15      	bgt.n	800767c <UART_SetConfig+0x4d8>
 8007650:	2b00      	cmp	r3, #0
 8007652:	d002      	beq.n	800765a <UART_SetConfig+0x4b6>
 8007654:	2b02      	cmp	r3, #2
 8007656:	d005      	beq.n	8007664 <UART_SetConfig+0x4c0>
 8007658:	e010      	b.n	800767c <UART_SetConfig+0x4d8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800765a:	f7fe fcdd 	bl	8006018 <HAL_RCC_GetPCLK1Freq>
 800765e:	0003      	movs	r3, r0
 8007660:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007662:	e014      	b.n	800768e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007664:	4b2d      	ldr	r3, [pc, #180]	; (800771c <UART_SetConfig+0x578>)
 8007666:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007668:	e011      	b.n	800768e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800766a:	f7fe fc49 	bl	8005f00 <HAL_RCC_GetSysClockFreq>
 800766e:	0003      	movs	r3, r0
 8007670:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8007672:	e00c      	b.n	800768e <UART_SetConfig+0x4ea>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007674:	2380      	movs	r3, #128	; 0x80
 8007676:	021b      	lsls	r3, r3, #8
 8007678:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800767a:	e008      	b.n	800768e <UART_SetConfig+0x4ea>
      default:
        pclk = 0U;
 800767c:	2300      	movs	r3, #0
 800767e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8007680:	231a      	movs	r3, #26
 8007682:	2220      	movs	r2, #32
 8007684:	189b      	adds	r3, r3, r2
 8007686:	19db      	adds	r3, r3, r7
 8007688:	2201      	movs	r2, #1
 800768a:	701a      	strb	r2, [r3, #0]
        break;
 800768c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 800768e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007690:	2b00      	cmp	r3, #0
 8007692:	d02a      	beq.n	80076ea <UART_SetConfig+0x546>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8007694:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007696:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007698:	4b1f      	ldr	r3, [pc, #124]	; (8007718 <UART_SetConfig+0x574>)
 800769a:	0052      	lsls	r2, r2, #1
 800769c:	5ad3      	ldrh	r3, [r2, r3]
 800769e:	0019      	movs	r1, r3
 80076a0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80076a2:	f7f8 fd4d 	bl	8000140 <__udivsi3>
 80076a6:	0003      	movs	r3, r0
 80076a8:	001a      	movs	r2, r3
 80076aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	085b      	lsrs	r3, r3, #1
 80076b0:	18d2      	adds	r2, r2, r3
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	685b      	ldr	r3, [r3, #4]
 80076b6:	0019      	movs	r1, r3
 80076b8:	0010      	movs	r0, r2
 80076ba:	f7f8 fd41 	bl	8000140 <__udivsi3>
 80076be:	0003      	movs	r3, r0
 80076c0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80076c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c4:	2b0f      	cmp	r3, #15
 80076c6:	d90a      	bls.n	80076de <UART_SetConfig+0x53a>
 80076c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80076ca:	2380      	movs	r3, #128	; 0x80
 80076cc:	025b      	lsls	r3, r3, #9
 80076ce:	429a      	cmp	r2, r3
 80076d0:	d205      	bcs.n	80076de <UART_SetConfig+0x53a>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80076d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d4:	b29a      	uxth	r2, r3
 80076d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	60da      	str	r2, [r3, #12]
 80076dc:	e005      	b.n	80076ea <UART_SetConfig+0x546>
      }
      else
      {
        ret = HAL_ERROR;
 80076de:	231a      	movs	r3, #26
 80076e0:	2220      	movs	r2, #32
 80076e2:	189b      	adds	r3, r3, r2
 80076e4:	19db      	adds	r3, r3, r7
 80076e6:	2201      	movs	r2, #1
 80076e8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ec:	226a      	movs	r2, #106	; 0x6a
 80076ee:	2101      	movs	r1, #1
 80076f0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 80076f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076f4:	2268      	movs	r2, #104	; 0x68
 80076f6:	2101      	movs	r1, #1
 80076f8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80076fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076fc:	2200      	movs	r2, #0
 80076fe:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007700:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007702:	2200      	movs	r2, #0
 8007704:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007706:	231a      	movs	r3, #26
 8007708:	2220      	movs	r2, #32
 800770a:	189b      	adds	r3, r3, r2
 800770c:	19db      	adds	r3, r3, r7
 800770e:	781b      	ldrb	r3, [r3, #0]
}
 8007710:	0018      	movs	r0, r3
 8007712:	46bd      	mov	sp, r7
 8007714:	b010      	add	sp, #64	; 0x40
 8007716:	bdb0      	pop	{r4, r5, r7, pc}
 8007718:	0800d96c 	.word	0x0800d96c
 800771c:	00f42400 	.word	0x00f42400

08007720 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b082      	sub	sp, #8
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	2208      	movs	r2, #8
 800772e:	4013      	ands	r3, r2
 8007730:	d00b      	beq.n	800774a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	4a4a      	ldr	r2, [pc, #296]	; (8007864 <UART_AdvFeatureConfig+0x144>)
 800773a:	4013      	ands	r3, r2
 800773c:	0019      	movs	r1, r3
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	681b      	ldr	r3, [r3, #0]
 8007746:	430a      	orrs	r2, r1
 8007748:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	2201      	movs	r2, #1
 8007750:	4013      	ands	r3, r2
 8007752:	d00b      	beq.n	800776c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	685b      	ldr	r3, [r3, #4]
 800775a:	4a43      	ldr	r2, [pc, #268]	; (8007868 <UART_AdvFeatureConfig+0x148>)
 800775c:	4013      	ands	r3, r2
 800775e:	0019      	movs	r1, r3
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	430a      	orrs	r2, r1
 800776a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007770:	2202      	movs	r2, #2
 8007772:	4013      	ands	r3, r2
 8007774:	d00b      	beq.n	800778e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	685b      	ldr	r3, [r3, #4]
 800777c:	4a3b      	ldr	r2, [pc, #236]	; (800786c <UART_AdvFeatureConfig+0x14c>)
 800777e:	4013      	ands	r3, r2
 8007780:	0019      	movs	r1, r3
 8007782:	687b      	ldr	r3, [r7, #4]
 8007784:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	430a      	orrs	r2, r1
 800778c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007792:	2204      	movs	r2, #4
 8007794:	4013      	ands	r3, r2
 8007796:	d00b      	beq.n	80077b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	685b      	ldr	r3, [r3, #4]
 800779e:	4a34      	ldr	r2, [pc, #208]	; (8007870 <UART_AdvFeatureConfig+0x150>)
 80077a0:	4013      	ands	r3, r2
 80077a2:	0019      	movs	r1, r3
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	430a      	orrs	r2, r1
 80077ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077b0:	687b      	ldr	r3, [r7, #4]
 80077b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077b4:	2210      	movs	r2, #16
 80077b6:	4013      	ands	r3, r2
 80077b8:	d00b      	beq.n	80077d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077ba:	687b      	ldr	r3, [r7, #4]
 80077bc:	681b      	ldr	r3, [r3, #0]
 80077be:	689b      	ldr	r3, [r3, #8]
 80077c0:	4a2c      	ldr	r2, [pc, #176]	; (8007874 <UART_AdvFeatureConfig+0x154>)
 80077c2:	4013      	ands	r3, r2
 80077c4:	0019      	movs	r1, r3
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	430a      	orrs	r2, r1
 80077d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077d6:	2220      	movs	r2, #32
 80077d8:	4013      	ands	r3, r2
 80077da:	d00b      	beq.n	80077f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	689b      	ldr	r3, [r3, #8]
 80077e2:	4a25      	ldr	r2, [pc, #148]	; (8007878 <UART_AdvFeatureConfig+0x158>)
 80077e4:	4013      	ands	r3, r2
 80077e6:	0019      	movs	r1, r3
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	430a      	orrs	r2, r1
 80077f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077f8:	2240      	movs	r2, #64	; 0x40
 80077fa:	4013      	ands	r3, r2
 80077fc:	d01d      	beq.n	800783a <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	685b      	ldr	r3, [r3, #4]
 8007804:	4a1d      	ldr	r2, [pc, #116]	; (800787c <UART_AdvFeatureConfig+0x15c>)
 8007806:	4013      	ands	r3, r2
 8007808:	0019      	movs	r1, r3
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	430a      	orrs	r2, r1
 8007814:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800781a:	2380      	movs	r3, #128	; 0x80
 800781c:	035b      	lsls	r3, r3, #13
 800781e:	429a      	cmp	r2, r3
 8007820:	d10b      	bne.n	800783a <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	685b      	ldr	r3, [r3, #4]
 8007828:	4a15      	ldr	r2, [pc, #84]	; (8007880 <UART_AdvFeatureConfig+0x160>)
 800782a:	4013      	ands	r3, r2
 800782c:	0019      	movs	r1, r3
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800783e:	2280      	movs	r2, #128	; 0x80
 8007840:	4013      	ands	r3, r2
 8007842:	d00b      	beq.n	800785c <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	4a0e      	ldr	r2, [pc, #56]	; (8007884 <UART_AdvFeatureConfig+0x164>)
 800784c:	4013      	ands	r3, r2
 800784e:	0019      	movs	r1, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	681b      	ldr	r3, [r3, #0]
 8007858:	430a      	orrs	r2, r1
 800785a:	605a      	str	r2, [r3, #4]
  }
}
 800785c:	46c0      	nop			; (mov r8, r8)
 800785e:	46bd      	mov	sp, r7
 8007860:	b002      	add	sp, #8
 8007862:	bd80      	pop	{r7, pc}
 8007864:	ffff7fff 	.word	0xffff7fff
 8007868:	fffdffff 	.word	0xfffdffff
 800786c:	fffeffff 	.word	0xfffeffff
 8007870:	fffbffff 	.word	0xfffbffff
 8007874:	ffffefff 	.word	0xffffefff
 8007878:	ffffdfff 	.word	0xffffdfff
 800787c:	ffefffff 	.word	0xffefffff
 8007880:	ff9fffff 	.word	0xff9fffff
 8007884:	fff7ffff 	.word	0xfff7ffff

08007888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b092      	sub	sp, #72	; 0x48
 800788c:	af02      	add	r7, sp, #8
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2290      	movs	r2, #144	; 0x90
 8007894:	2100      	movs	r1, #0
 8007896:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007898:	f7fd fb88 	bl	8004fac <HAL_GetTick>
 800789c:	0003      	movs	r3, r0
 800789e:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	2208      	movs	r2, #8
 80078a8:	4013      	ands	r3, r2
 80078aa:	2b08      	cmp	r3, #8
 80078ac:	d12d      	bne.n	800790a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80078b0:	2280      	movs	r2, #128	; 0x80
 80078b2:	0391      	lsls	r1, r2, #14
 80078b4:	6878      	ldr	r0, [r7, #4]
 80078b6:	4a47      	ldr	r2, [pc, #284]	; (80079d4 <UART_CheckIdleState+0x14c>)
 80078b8:	9200      	str	r2, [sp, #0]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f000 f88e 	bl	80079dc <UART_WaitOnFlagUntilTimeout>
 80078c0:	1e03      	subs	r3, r0, #0
 80078c2:	d022      	beq.n	800790a <UART_CheckIdleState+0x82>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80078c4:	f3ef 8310 	mrs	r3, PRIMASK
 80078c8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 80078ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80078cc:	63bb      	str	r3, [r7, #56]	; 0x38
 80078ce:	2301      	movs	r3, #1
 80078d0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80078d4:	f383 8810 	msr	PRIMASK, r3
}
 80078d8:	46c0      	nop			; (mov r8, r8)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	681a      	ldr	r2, [r3, #0]
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	2180      	movs	r1, #128	; 0x80
 80078e6:	438a      	bics	r2, r1
 80078e8:	601a      	str	r2, [r3, #0]
 80078ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80078ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80078ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078f0:	f383 8810 	msr	PRIMASK, r3
}
 80078f4:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	2288      	movs	r2, #136	; 0x88
 80078fa:	2120      	movs	r1, #32
 80078fc:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2284      	movs	r2, #132	; 0x84
 8007902:	2100      	movs	r1, #0
 8007904:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007906:	2303      	movs	r3, #3
 8007908:	e060      	b.n	80079cc <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2204      	movs	r2, #4
 8007912:	4013      	ands	r3, r2
 8007914:	2b04      	cmp	r3, #4
 8007916:	d146      	bne.n	80079a6 <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007918:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800791a:	2280      	movs	r2, #128	; 0x80
 800791c:	03d1      	lsls	r1, r2, #15
 800791e:	6878      	ldr	r0, [r7, #4]
 8007920:	4a2c      	ldr	r2, [pc, #176]	; (80079d4 <UART_CheckIdleState+0x14c>)
 8007922:	9200      	str	r2, [sp, #0]
 8007924:	2200      	movs	r2, #0
 8007926:	f000 f859 	bl	80079dc <UART_WaitOnFlagUntilTimeout>
 800792a:	1e03      	subs	r3, r0, #0
 800792c:	d03b      	beq.n	80079a6 <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800792e:	f3ef 8310 	mrs	r3, PRIMASK
 8007932:	60fb      	str	r3, [r7, #12]
  return(result);
 8007934:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007936:	637b      	str	r3, [r7, #52]	; 0x34
 8007938:	2301      	movs	r3, #1
 800793a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800793c:	693b      	ldr	r3, [r7, #16]
 800793e:	f383 8810 	msr	PRIMASK, r3
}
 8007942:	46c0      	nop			; (mov r8, r8)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	681a      	ldr	r2, [r3, #0]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	4922      	ldr	r1, [pc, #136]	; (80079d8 <UART_CheckIdleState+0x150>)
 8007950:	400a      	ands	r2, r1
 8007952:	601a      	str	r2, [r3, #0]
 8007954:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007956:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007958:	697b      	ldr	r3, [r7, #20]
 800795a:	f383 8810 	msr	PRIMASK, r3
}
 800795e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007960:	f3ef 8310 	mrs	r3, PRIMASK
 8007964:	61bb      	str	r3, [r7, #24]
  return(result);
 8007966:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007968:	633b      	str	r3, [r7, #48]	; 0x30
 800796a:	2301      	movs	r3, #1
 800796c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800796e:	69fb      	ldr	r3, [r7, #28]
 8007970:	f383 8810 	msr	PRIMASK, r3
}
 8007974:	46c0      	nop			; (mov r8, r8)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	689a      	ldr	r2, [r3, #8]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	2101      	movs	r1, #1
 8007982:	438a      	bics	r2, r1
 8007984:	609a      	str	r2, [r3, #8]
 8007986:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007988:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800798a:	6a3b      	ldr	r3, [r7, #32]
 800798c:	f383 8810 	msr	PRIMASK, r3
}
 8007990:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	228c      	movs	r2, #140	; 0x8c
 8007996:	2120      	movs	r1, #32
 8007998:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	2284      	movs	r2, #132	; 0x84
 800799e:	2100      	movs	r1, #0
 80079a0:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80079a2:	2303      	movs	r3, #3
 80079a4:	e012      	b.n	80079cc <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	2288      	movs	r2, #136	; 0x88
 80079aa:	2120      	movs	r1, #32
 80079ac:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	228c      	movs	r2, #140	; 0x8c
 80079b2:	2120      	movs	r1, #32
 80079b4:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2200      	movs	r2, #0
 80079ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2200      	movs	r2, #0
 80079c0:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	2284      	movs	r2, #132	; 0x84
 80079c6:	2100      	movs	r1, #0
 80079c8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	0018      	movs	r0, r3
 80079ce:	46bd      	mov	sp, r7
 80079d0:	b010      	add	sp, #64	; 0x40
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	01ffffff 	.word	0x01ffffff
 80079d8:	fffffedf 	.word	0xfffffedf

080079dc <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b084      	sub	sp, #16
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	60f8      	str	r0, [r7, #12]
 80079e4:	60b9      	str	r1, [r7, #8]
 80079e6:	603b      	str	r3, [r7, #0]
 80079e8:	1dfb      	adds	r3, r7, #7
 80079ea:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80079ec:	e051      	b.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80079ee:	69bb      	ldr	r3, [r7, #24]
 80079f0:	3301      	adds	r3, #1
 80079f2:	d04e      	beq.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079f4:	f7fd fada 	bl	8004fac <HAL_GetTick>
 80079f8:	0002      	movs	r2, r0
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	1ad3      	subs	r3, r2, r3
 80079fe:	69ba      	ldr	r2, [r7, #24]
 8007a00:	429a      	cmp	r2, r3
 8007a02:	d302      	bcc.n	8007a0a <UART_WaitOnFlagUntilTimeout+0x2e>
 8007a04:	69bb      	ldr	r3, [r7, #24]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d101      	bne.n	8007a0e <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	e051      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	2204      	movs	r2, #4
 8007a16:	4013      	ands	r3, r2
 8007a18:	d03b      	beq.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007a1a:	68bb      	ldr	r3, [r7, #8]
 8007a1c:	2b80      	cmp	r3, #128	; 0x80
 8007a1e:	d038      	beq.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xb6>
 8007a20:	68bb      	ldr	r3, [r7, #8]
 8007a22:	2b40      	cmp	r3, #64	; 0x40
 8007a24:	d035      	beq.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007a26:	68fb      	ldr	r3, [r7, #12]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	69db      	ldr	r3, [r3, #28]
 8007a2c:	2208      	movs	r2, #8
 8007a2e:	4013      	ands	r3, r2
 8007a30:	2b08      	cmp	r3, #8
 8007a32:	d111      	bne.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	2208      	movs	r2, #8
 8007a3a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f000 f960 	bl	8007d04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2290      	movs	r2, #144	; 0x90
 8007a48:	2108      	movs	r1, #8
 8007a4a:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2284      	movs	r2, #132	; 0x84
 8007a50:	2100      	movs	r1, #0
 8007a52:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8007a54:	2301      	movs	r3, #1
 8007a56:	e02c      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69da      	ldr	r2, [r3, #28]
 8007a5e:	2380      	movs	r3, #128	; 0x80
 8007a60:	011b      	lsls	r3, r3, #4
 8007a62:	401a      	ands	r2, r3
 8007a64:	2380      	movs	r3, #128	; 0x80
 8007a66:	011b      	lsls	r3, r3, #4
 8007a68:	429a      	cmp	r2, r3
 8007a6a:	d112      	bne.n	8007a92 <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2280      	movs	r2, #128	; 0x80
 8007a72:	0112      	lsls	r2, r2, #4
 8007a74:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	0018      	movs	r0, r3
 8007a7a:	f000 f943 	bl	8007d04 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a7e:	68fb      	ldr	r3, [r7, #12]
 8007a80:	2290      	movs	r2, #144	; 0x90
 8007a82:	2120      	movs	r1, #32
 8007a84:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	2284      	movs	r2, #132	; 0x84
 8007a8a:	2100      	movs	r1, #0
 8007a8c:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e00f      	b.n	8007ab2 <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	69db      	ldr	r3, [r3, #28]
 8007a98:	68ba      	ldr	r2, [r7, #8]
 8007a9a:	4013      	ands	r3, r2
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	1ad3      	subs	r3, r2, r3
 8007aa0:	425a      	negs	r2, r3
 8007aa2:	4153      	adcs	r3, r2
 8007aa4:	b2db      	uxtb	r3, r3
 8007aa6:	001a      	movs	r2, r3
 8007aa8:	1dfb      	adds	r3, r7, #7
 8007aaa:	781b      	ldrb	r3, [r3, #0]
 8007aac:	429a      	cmp	r2, r3
 8007aae:	d09e      	beq.n	80079ee <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ab0:	2300      	movs	r3, #0
}
 8007ab2:	0018      	movs	r0, r3
 8007ab4:	46bd      	mov	sp, r7
 8007ab6:	b004      	add	sp, #16
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b098      	sub	sp, #96	; 0x60
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	60f8      	str	r0, [r7, #12]
 8007ac4:	60b9      	str	r1, [r7, #8]
 8007ac6:	1dbb      	adds	r3, r7, #6
 8007ac8:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	68ba      	ldr	r2, [r7, #8]
 8007ace:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	1dba      	adds	r2, r7, #6
 8007ad4:	215c      	movs	r1, #92	; 0x5c
 8007ad6:	8812      	ldrh	r2, [r2, #0]
 8007ad8:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	1dba      	adds	r2, r7, #6
 8007ade:	215e      	movs	r1, #94	; 0x5e
 8007ae0:	8812      	ldrh	r2, [r2, #0]
 8007ae2:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8007ae4:	68fb      	ldr	r3, [r7, #12]
 8007ae6:	2200      	movs	r2, #0
 8007ae8:	675a      	str	r2, [r3, #116]	; 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8007aea:	68fb      	ldr	r3, [r7, #12]
 8007aec:	689a      	ldr	r2, [r3, #8]
 8007aee:	2380      	movs	r3, #128	; 0x80
 8007af0:	015b      	lsls	r3, r3, #5
 8007af2:	429a      	cmp	r2, r3
 8007af4:	d10d      	bne.n	8007b12 <UART_Start_Receive_IT+0x56>
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d104      	bne.n	8007b08 <UART_Start_Receive_IT+0x4c>
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	2260      	movs	r2, #96	; 0x60
 8007b02:	497b      	ldr	r1, [pc, #492]	; (8007cf0 <UART_Start_Receive_IT+0x234>)
 8007b04:	5299      	strh	r1, [r3, r2]
 8007b06:	e02e      	b.n	8007b66 <UART_Start_Receive_IT+0xaa>
 8007b08:	68fb      	ldr	r3, [r7, #12]
 8007b0a:	2260      	movs	r2, #96	; 0x60
 8007b0c:	21ff      	movs	r1, #255	; 0xff
 8007b0e:	5299      	strh	r1, [r3, r2]
 8007b10:	e029      	b.n	8007b66 <UART_Start_Receive_IT+0xaa>
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	689b      	ldr	r3, [r3, #8]
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d10d      	bne.n	8007b36 <UART_Start_Receive_IT+0x7a>
 8007b1a:	68fb      	ldr	r3, [r7, #12]
 8007b1c:	691b      	ldr	r3, [r3, #16]
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d104      	bne.n	8007b2c <UART_Start_Receive_IT+0x70>
 8007b22:	68fb      	ldr	r3, [r7, #12]
 8007b24:	2260      	movs	r2, #96	; 0x60
 8007b26:	21ff      	movs	r1, #255	; 0xff
 8007b28:	5299      	strh	r1, [r3, r2]
 8007b2a:	e01c      	b.n	8007b66 <UART_Start_Receive_IT+0xaa>
 8007b2c:	68fb      	ldr	r3, [r7, #12]
 8007b2e:	2260      	movs	r2, #96	; 0x60
 8007b30:	217f      	movs	r1, #127	; 0x7f
 8007b32:	5299      	strh	r1, [r3, r2]
 8007b34:	e017      	b.n	8007b66 <UART_Start_Receive_IT+0xaa>
 8007b36:	68fb      	ldr	r3, [r7, #12]
 8007b38:	689a      	ldr	r2, [r3, #8]
 8007b3a:	2380      	movs	r3, #128	; 0x80
 8007b3c:	055b      	lsls	r3, r3, #21
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d10d      	bne.n	8007b5e <UART_Start_Receive_IT+0xa2>
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	691b      	ldr	r3, [r3, #16]
 8007b46:	2b00      	cmp	r3, #0
 8007b48:	d104      	bne.n	8007b54 <UART_Start_Receive_IT+0x98>
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2260      	movs	r2, #96	; 0x60
 8007b4e:	217f      	movs	r1, #127	; 0x7f
 8007b50:	5299      	strh	r1, [r3, r2]
 8007b52:	e008      	b.n	8007b66 <UART_Start_Receive_IT+0xaa>
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	2260      	movs	r2, #96	; 0x60
 8007b58:	213f      	movs	r1, #63	; 0x3f
 8007b5a:	5299      	strh	r1, [r3, r2]
 8007b5c:	e003      	b.n	8007b66 <UART_Start_Receive_IT+0xaa>
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2260      	movs	r2, #96	; 0x60
 8007b62:	2100      	movs	r1, #0
 8007b64:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2290      	movs	r2, #144	; 0x90
 8007b6a:	2100      	movs	r1, #0
 8007b6c:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	228c      	movs	r2, #140	; 0x8c
 8007b72:	2122      	movs	r1, #34	; 0x22
 8007b74:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007b76:	f3ef 8310 	mrs	r3, PRIMASK
 8007b7a:	643b      	str	r3, [r7, #64]	; 0x40
  return(result);
 8007b7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007b80:	2301      	movs	r3, #1
 8007b82:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007b84:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b86:	f383 8810 	msr	PRIMASK, r3
}
 8007b8a:	46c0      	nop			; (mov r8, r8)
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	689a      	ldr	r2, [r3, #8]
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	2101      	movs	r1, #1
 8007b98:	430a      	orrs	r2, r1
 8007b9a:	609a      	str	r2, [r3, #8]
 8007b9c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007b9e:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ba0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007ba2:	f383 8810 	msr	PRIMASK, r3
}
 8007ba6:	46c0      	nop			; (mov r8, r8)

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8007ba8:	68fb      	ldr	r3, [r7, #12]
 8007baa:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8007bac:	2380      	movs	r3, #128	; 0x80
 8007bae:	059b      	lsls	r3, r3, #22
 8007bb0:	429a      	cmp	r2, r3
 8007bb2:	d150      	bne.n	8007c56 <UART_Start_Receive_IT+0x19a>
 8007bb4:	68fb      	ldr	r3, [r7, #12]
 8007bb6:	2268      	movs	r2, #104	; 0x68
 8007bb8:	5a9b      	ldrh	r3, [r3, r2]
 8007bba:	1dba      	adds	r2, r7, #6
 8007bbc:	8812      	ldrh	r2, [r2, #0]
 8007bbe:	429a      	cmp	r2, r3
 8007bc0:	d349      	bcc.n	8007c56 <UART_Start_Receive_IT+0x19a>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	689a      	ldr	r2, [r3, #8]
 8007bc6:	2380      	movs	r3, #128	; 0x80
 8007bc8:	015b      	lsls	r3, r3, #5
 8007bca:	429a      	cmp	r2, r3
 8007bcc:	d107      	bne.n	8007bde <UART_Start_Receive_IT+0x122>
 8007bce:	68fb      	ldr	r3, [r7, #12]
 8007bd0:	691b      	ldr	r3, [r3, #16]
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d103      	bne.n	8007bde <UART_Start_Receive_IT+0x122>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007bd6:	68fb      	ldr	r3, [r7, #12]
 8007bd8:	4a46      	ldr	r2, [pc, #280]	; (8007cf4 <UART_Start_Receive_IT+0x238>)
 8007bda:	675a      	str	r2, [r3, #116]	; 0x74
 8007bdc:	e002      	b.n	8007be4 <UART_Start_Receive_IT+0x128>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	4a45      	ldr	r2, [pc, #276]	; (8007cf8 <UART_Start_Receive_IT+0x23c>)
 8007be2:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007be4:	68fb      	ldr	r3, [r7, #12]
 8007be6:	691b      	ldr	r3, [r3, #16]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d019      	beq.n	8007c20 <UART_Start_Receive_IT+0x164>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007bec:	f3ef 8310 	mrs	r3, PRIMASK
 8007bf0:	637b      	str	r3, [r7, #52]	; 0x34
  return(result);
 8007bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bf4:	65bb      	str	r3, [r7, #88]	; 0x58
 8007bf6:	2301      	movs	r3, #1
 8007bf8:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007bfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007bfc:	f383 8810 	msr	PRIMASK, r3
}
 8007c00:	46c0      	nop			; (mov r8, r8)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	68fb      	ldr	r3, [r7, #12]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	2180      	movs	r1, #128	; 0x80
 8007c0e:	0049      	lsls	r1, r1, #1
 8007c10:	430a      	orrs	r2, r1
 8007c12:	601a      	str	r2, [r3, #0]
 8007c14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007c16:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c18:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007c1a:	f383 8810 	msr	PRIMASK, r3
}
 8007c1e:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c20:	f3ef 8310 	mrs	r3, PRIMASK
 8007c24:	62bb      	str	r3, [r7, #40]	; 0x28
  return(result);
 8007c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007c28:	657b      	str	r3, [r7, #84]	; 0x54
 8007c2a:	2301      	movs	r3, #1
 8007c2c:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007c30:	f383 8810 	msr	PRIMASK, r3
}
 8007c34:	46c0      	nop			; (mov r8, r8)
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	689a      	ldr	r2, [r3, #8]
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2180      	movs	r1, #128	; 0x80
 8007c42:	0549      	lsls	r1, r1, #21
 8007c44:	430a      	orrs	r2, r1
 8007c46:	609a      	str	r2, [r3, #8]
 8007c48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007c4a:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007c4e:	f383 8810 	msr	PRIMASK, r3
}
 8007c52:	46c0      	nop			; (mov r8, r8)
 8007c54:	e047      	b.n	8007ce6 <UART_Start_Receive_IT+0x22a>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	689a      	ldr	r2, [r3, #8]
 8007c5a:	2380      	movs	r3, #128	; 0x80
 8007c5c:	015b      	lsls	r3, r3, #5
 8007c5e:	429a      	cmp	r2, r3
 8007c60:	d107      	bne.n	8007c72 <UART_Start_Receive_IT+0x1b6>
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	691b      	ldr	r3, [r3, #16]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	d103      	bne.n	8007c72 <UART_Start_Receive_IT+0x1b6>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007c6a:	68fb      	ldr	r3, [r7, #12]
 8007c6c:	4a23      	ldr	r2, [pc, #140]	; (8007cfc <UART_Start_Receive_IT+0x240>)
 8007c6e:	675a      	str	r2, [r3, #116]	; 0x74
 8007c70:	e002      	b.n	8007c78 <UART_Start_Receive_IT+0x1bc>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	4a22      	ldr	r2, [pc, #136]	; (8007d00 <UART_Start_Receive_IT+0x244>)
 8007c76:	675a      	str	r2, [r3, #116]	; 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	691b      	ldr	r3, [r3, #16]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d019      	beq.n	8007cb4 <UART_Start_Receive_IT+0x1f8>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007c80:	f3ef 8310 	mrs	r3, PRIMASK
 8007c84:	61fb      	str	r3, [r7, #28]
  return(result);
 8007c86:	69fb      	ldr	r3, [r7, #28]
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007c88:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c8a:	2301      	movs	r3, #1
 8007c8c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007c8e:	6a3b      	ldr	r3, [r7, #32]
 8007c90:	f383 8810 	msr	PRIMASK, r3
}
 8007c94:	46c0      	nop			; (mov r8, r8)
 8007c96:	68fb      	ldr	r3, [r7, #12]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	681a      	ldr	r2, [r3, #0]
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	2190      	movs	r1, #144	; 0x90
 8007ca2:	0049      	lsls	r1, r1, #1
 8007ca4:	430a      	orrs	r2, r1
 8007ca6:	601a      	str	r2, [r3, #0]
 8007ca8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007caa:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cae:	f383 8810 	msr	PRIMASK, r3
}
 8007cb2:	e018      	b.n	8007ce6 <UART_Start_Receive_IT+0x22a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8007cb8:	613b      	str	r3, [r7, #16]
  return(result);
 8007cba:	693b      	ldr	r3, [r7, #16]
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007cbc:	653b      	str	r3, [r7, #80]	; 0x50
 8007cbe:	2301      	movs	r3, #1
 8007cc0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cc2:	697b      	ldr	r3, [r7, #20]
 8007cc4:	f383 8810 	msr	PRIMASK, r3
}
 8007cc8:	46c0      	nop			; (mov r8, r8)
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	68fb      	ldr	r3, [r7, #12]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2120      	movs	r1, #32
 8007cd6:	430a      	orrs	r2, r1
 8007cd8:	601a      	str	r2, [r3, #0]
 8007cda:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007cdc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007cde:	69bb      	ldr	r3, [r7, #24]
 8007ce0:	f383 8810 	msr	PRIMASK, r3
}
 8007ce4:	46c0      	nop			; (mov r8, r8)
    }
  }
  return HAL_OK;
 8007ce6:	2300      	movs	r3, #0
}
 8007ce8:	0018      	movs	r0, r3
 8007cea:	46bd      	mov	sp, r7
 8007cec:	b018      	add	sp, #96	; 0x60
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	000001ff 	.word	0x000001ff
 8007cf4:	08008521 	.word	0x08008521
 8007cf8:	080081e1 	.word	0x080081e1
 8007cfc:	0800801d 	.word	0x0800801d
 8007d00:	08007e59 	.word	0x08007e59

08007d04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b08e      	sub	sp, #56	; 0x38
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d0c:	f3ef 8310 	mrs	r3, PRIMASK
 8007d10:	617b      	str	r3, [r7, #20]
  return(result);
 8007d12:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007d14:	637b      	str	r3, [r7, #52]	; 0x34
 8007d16:	2301      	movs	r3, #1
 8007d18:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d1a:	69bb      	ldr	r3, [r7, #24]
 8007d1c:	f383 8810 	msr	PRIMASK, r3
}
 8007d20:	46c0      	nop			; (mov r8, r8)
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4926      	ldr	r1, [pc, #152]	; (8007dc8 <UART_EndRxTransfer+0xc4>)
 8007d2e:	400a      	ands	r2, r1
 8007d30:	601a      	str	r2, [r3, #0]
 8007d32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007d34:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d36:	69fb      	ldr	r3, [r7, #28]
 8007d38:	f383 8810 	msr	PRIMASK, r3
}
 8007d3c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d3e:	f3ef 8310 	mrs	r3, PRIMASK
 8007d42:	623b      	str	r3, [r7, #32]
  return(result);
 8007d44:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007d46:	633b      	str	r3, [r7, #48]	; 0x30
 8007d48:	2301      	movs	r3, #1
 8007d4a:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d4e:	f383 8810 	msr	PRIMASK, r3
}
 8007d52:	46c0      	nop			; (mov r8, r8)
 8007d54:	687b      	ldr	r3, [r7, #4]
 8007d56:	681b      	ldr	r3, [r3, #0]
 8007d58:	689a      	ldr	r2, [r3, #8]
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	681b      	ldr	r3, [r3, #0]
 8007d5e:	491b      	ldr	r1, [pc, #108]	; (8007dcc <UART_EndRxTransfer+0xc8>)
 8007d60:	400a      	ands	r2, r1
 8007d62:	609a      	str	r2, [r3, #8]
 8007d64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007d66:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d6a:	f383 8810 	msr	PRIMASK, r3
}
 8007d6e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007d74:	2b01      	cmp	r3, #1
 8007d76:	d118      	bne.n	8007daa <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007d78:	f3ef 8310 	mrs	r3, PRIMASK
 8007d7c:	60bb      	str	r3, [r7, #8]
  return(result);
 8007d7e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007d80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007d82:	2301      	movs	r3, #1
 8007d84:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007d86:	68fb      	ldr	r3, [r7, #12]
 8007d88:	f383 8810 	msr	PRIMASK, r3
}
 8007d8c:	46c0      	nop			; (mov r8, r8)
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	681a      	ldr	r2, [r3, #0]
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2110      	movs	r1, #16
 8007d9a:	438a      	bics	r2, r1
 8007d9c:	601a      	str	r2, [r3, #0]
 8007d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007da0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	f383 8810 	msr	PRIMASK, r3
}
 8007da8:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	228c      	movs	r2, #140	; 0x8c
 8007dae:	2120      	movs	r1, #32
 8007db0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	2200      	movs	r2, #0
 8007db6:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	2200      	movs	r2, #0
 8007dbc:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007dbe:	46c0      	nop			; (mov r8, r8)
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	b00e      	add	sp, #56	; 0x38
 8007dc4:	bd80      	pop	{r7, pc}
 8007dc6:	46c0      	nop			; (mov r8, r8)
 8007dc8:	fffffedf 	.word	0xfffffedf
 8007dcc:	effffffe 	.word	0xeffffffe

08007dd0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007dd0:	b580      	push	{r7, lr}
 8007dd2:	b084      	sub	sp, #16
 8007dd4:	af00      	add	r7, sp, #0
 8007dd6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ddc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007dde:	68fb      	ldr	r3, [r7, #12]
 8007de0:	225e      	movs	r2, #94	; 0x5e
 8007de2:	2100      	movs	r1, #0
 8007de4:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	2256      	movs	r2, #86	; 0x56
 8007dea:	2100      	movs	r1, #0
 8007dec:	5299      	strh	r1, [r3, r2]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	0018      	movs	r0, r3
 8007df2:	f7ff f9c3 	bl	800717c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007df6:	46c0      	nop			; (mov r8, r8)
 8007df8:	46bd      	mov	sp, r7
 8007dfa:	b004      	add	sp, #16
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b086      	sub	sp, #24
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007e06:	f3ef 8310 	mrs	r3, PRIMASK
 8007e0a:	60bb      	str	r3, [r7, #8]
  return(result);
 8007e0c:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e0e:	617b      	str	r3, [r7, #20]
 8007e10:	2301      	movs	r3, #1
 8007e12:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f383 8810 	msr	PRIMASK, r3
}
 8007e1a:	46c0      	nop			; (mov r8, r8)
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	681b      	ldr	r3, [r3, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	2140      	movs	r1, #64	; 0x40
 8007e28:	438a      	bics	r2, r1
 8007e2a:	601a      	str	r2, [r3, #0]
 8007e2c:	697b      	ldr	r3, [r7, #20]
 8007e2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	f383 8810 	msr	PRIMASK, r3
}
 8007e36:	46c0      	nop			; (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2288      	movs	r2, #136	; 0x88
 8007e3c:	2120      	movs	r1, #32
 8007e3e:	5099      	str	r1, [r3, r2]

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2200      	movs	r2, #0
 8007e44:	679a      	str	r2, [r3, #120]	; 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	0018      	movs	r0, r3
 8007e4a:	f7ff f987 	bl	800715c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e4e:	46c0      	nop			; (mov r8, r8)
 8007e50:	46bd      	mov	sp, r7
 8007e52:	b006      	add	sp, #24
 8007e54:	bd80      	pop	{r7, pc}
	...

08007e58 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007e58:	b580      	push	{r7, lr}
 8007e5a:	b094      	sub	sp, #80	; 0x50
 8007e5c:	af00      	add	r7, sp, #0
 8007e5e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007e60:	204e      	movs	r0, #78	; 0x4e
 8007e62:	183b      	adds	r3, r7, r0
 8007e64:	687a      	ldr	r2, [r7, #4]
 8007e66:	2160      	movs	r1, #96	; 0x60
 8007e68:	5a52      	ldrh	r2, [r2, r1]
 8007e6a:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	228c      	movs	r2, #140	; 0x8c
 8007e70:	589b      	ldr	r3, [r3, r2]
 8007e72:	2b22      	cmp	r3, #34	; 0x22
 8007e74:	d000      	beq.n	8007e78 <UART_RxISR_8BIT+0x20>
 8007e76:	e0bf      	b.n	8007ff8 <UART_RxISR_8BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007e7e:	214c      	movs	r1, #76	; 0x4c
 8007e80:	187b      	adds	r3, r7, r1
 8007e82:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8007e84:	187b      	adds	r3, r7, r1
 8007e86:	881b      	ldrh	r3, [r3, #0]
 8007e88:	b2da      	uxtb	r2, r3
 8007e8a:	183b      	adds	r3, r7, r0
 8007e8c:	881b      	ldrh	r3, [r3, #0]
 8007e8e:	b2d9      	uxtb	r1, r3
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e94:	400a      	ands	r2, r1
 8007e96:	b2d2      	uxtb	r2, r2
 8007e98:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e9e:	1c5a      	adds	r2, r3, #1
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	225e      	movs	r2, #94	; 0x5e
 8007ea8:	5a9b      	ldrh	r3, [r3, r2]
 8007eaa:	b29b      	uxth	r3, r3
 8007eac:	3b01      	subs	r3, #1
 8007eae:	b299      	uxth	r1, r3
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	225e      	movs	r2, #94	; 0x5e
 8007eb4:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	225e      	movs	r2, #94	; 0x5e
 8007eba:	5a9b      	ldrh	r3, [r3, r2]
 8007ebc:	b29b      	uxth	r3, r3
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d000      	beq.n	8007ec4 <UART_RxISR_8BIT+0x6c>
 8007ec2:	e0a1      	b.n	8008008 <UART_RxISR_8BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ec4:	f3ef 8310 	mrs	r3, PRIMASK
 8007ec8:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8007eca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ecc:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ece:	2301      	movs	r3, #1
 8007ed0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007ed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ed4:	f383 8810 	msr	PRIMASK, r3
}
 8007ed8:	46c0      	nop			; (mov r8, r8)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	681a      	ldr	r2, [r3, #0]
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	494a      	ldr	r1, [pc, #296]	; (8008010 <UART_RxISR_8BIT+0x1b8>)
 8007ee6:	400a      	ands	r2, r1
 8007ee8:	601a      	str	r2, [r3, #0]
 8007eea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007eec:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007eee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007ef0:	f383 8810 	msr	PRIMASK, r3
}
 8007ef4:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007ef6:	f3ef 8310 	mrs	r3, PRIMASK
 8007efa:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8007efc:	6b3b      	ldr	r3, [r7, #48]	; 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efe:	647b      	str	r3, [r7, #68]	; 0x44
 8007f00:	2301      	movs	r3, #1
 8007f02:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f04:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f06:	f383 8810 	msr	PRIMASK, r3
}
 8007f0a:	46c0      	nop			; (mov r8, r8)
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	689a      	ldr	r2, [r3, #8]
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	2101      	movs	r1, #1
 8007f18:	438a      	bics	r2, r1
 8007f1a:	609a      	str	r2, [r3, #8]
 8007f1c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007f1e:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f22:	f383 8810 	msr	PRIMASK, r3
}
 8007f26:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	228c      	movs	r2, #140	; 0x8c
 8007f2c:	2120      	movs	r1, #32
 8007f2e:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	681b      	ldr	r3, [r3, #0]
 8007f40:	4a34      	ldr	r2, [pc, #208]	; (8008014 <UART_RxISR_8BIT+0x1bc>)
 8007f42:	4293      	cmp	r3, r2
 8007f44:	d01f      	beq.n	8007f86 <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	685a      	ldr	r2, [r3, #4]
 8007f4c:	2380      	movs	r3, #128	; 0x80
 8007f4e:	041b      	lsls	r3, r3, #16
 8007f50:	4013      	ands	r3, r2
 8007f52:	d018      	beq.n	8007f86 <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f54:	f3ef 8310 	mrs	r3, PRIMASK
 8007f58:	61bb      	str	r3, [r7, #24]
  return(result);
 8007f5a:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007f5c:	643b      	str	r3, [r7, #64]	; 0x40
 8007f5e:	2301      	movs	r3, #1
 8007f60:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f62:	69fb      	ldr	r3, [r7, #28]
 8007f64:	f383 8810 	msr	PRIMASK, r3
}
 8007f68:	46c0      	nop			; (mov r8, r8)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	681a      	ldr	r2, [r3, #0]
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	681b      	ldr	r3, [r3, #0]
 8007f74:	4928      	ldr	r1, [pc, #160]	; (8008018 <UART_RxISR_8BIT+0x1c0>)
 8007f76:	400a      	ands	r2, r1
 8007f78:	601a      	str	r2, [r3, #0]
 8007f7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007f7c:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007f7e:	6a3b      	ldr	r3, [r7, #32]
 8007f80:	f383 8810 	msr	PRIMASK, r3
}
 8007f84:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007f86:	687b      	ldr	r3, [r7, #4]
 8007f88:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007f8a:	2b01      	cmp	r3, #1
 8007f8c:	d12f      	bne.n	8007fee <UART_RxISR_8BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8007f94:	f3ef 8310 	mrs	r3, PRIMASK
 8007f98:	60fb      	str	r3, [r7, #12]
  return(result);
 8007f9a:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f9e:	2301      	movs	r3, #1
 8007fa0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fa2:	693b      	ldr	r3, [r7, #16]
 8007fa4:	f383 8810 	msr	PRIMASK, r3
}
 8007fa8:	46c0      	nop			; (mov r8, r8)
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	681a      	ldr	r2, [r3, #0]
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	2110      	movs	r1, #16
 8007fb6:	438a      	bics	r2, r1
 8007fb8:	601a      	str	r2, [r3, #0]
 8007fba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fbc:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8007fbe:	697b      	ldr	r3, [r7, #20]
 8007fc0:	f383 8810 	msr	PRIMASK, r3
}
 8007fc4:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	69db      	ldr	r3, [r3, #28]
 8007fcc:	2210      	movs	r2, #16
 8007fce:	4013      	ands	r3, r2
 8007fd0:	2b10      	cmp	r3, #16
 8007fd2:	d103      	bne.n	8007fdc <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2210      	movs	r2, #16
 8007fda:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	225c      	movs	r2, #92	; 0x5c
 8007fe0:	5a9a      	ldrh	r2, [r3, r2]
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	0011      	movs	r1, r2
 8007fe6:	0018      	movs	r0, r3
 8007fe8:	f7ff f8d0 	bl	800718c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007fec:	e00c      	b.n	8008008 <UART_RxISR_8BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	0018      	movs	r0, r3
 8007ff2:	f7ff f8bb 	bl	800716c <HAL_UART_RxCpltCallback>
}
 8007ff6:	e007      	b.n	8008008 <UART_RxISR_8BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	699a      	ldr	r2, [r3, #24]
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	2108      	movs	r1, #8
 8008004:	430a      	orrs	r2, r1
 8008006:	619a      	str	r2, [r3, #24]
}
 8008008:	46c0      	nop			; (mov r8, r8)
 800800a:	46bd      	mov	sp, r7
 800800c:	b014      	add	sp, #80	; 0x50
 800800e:	bd80      	pop	{r7, pc}
 8008010:	fffffedf 	.word	0xfffffedf
 8008014:	40008000 	.word	0x40008000
 8008018:	fbffffff 	.word	0xfbffffff

0800801c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800801c:	b580      	push	{r7, lr}
 800801e:	b094      	sub	sp, #80	; 0x50
 8008020:	af00      	add	r7, sp, #0
 8008022:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008024:	204e      	movs	r0, #78	; 0x4e
 8008026:	183b      	adds	r3, r7, r0
 8008028:	687a      	ldr	r2, [r7, #4]
 800802a:	2160      	movs	r1, #96	; 0x60
 800802c:	5a52      	ldrh	r2, [r2, r1]
 800802e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	228c      	movs	r2, #140	; 0x8c
 8008034:	589b      	ldr	r3, [r3, r2]
 8008036:	2b22      	cmp	r3, #34	; 0x22
 8008038:	d000      	beq.n	800803c <UART_RxISR_16BIT+0x20>
 800803a:	e0bf      	b.n	80081bc <UART_RxISR_16BIT+0x1a0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008042:	214c      	movs	r1, #76	; 0x4c
 8008044:	187b      	adds	r3, r7, r1
 8008046:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800804c:	64bb      	str	r3, [r7, #72]	; 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 800804e:	187b      	adds	r3, r7, r1
 8008050:	183a      	adds	r2, r7, r0
 8008052:	881b      	ldrh	r3, [r3, #0]
 8008054:	8812      	ldrh	r2, [r2, #0]
 8008056:	4013      	ands	r3, r2
 8008058:	b29a      	uxth	r2, r3
 800805a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800805c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008062:	1c9a      	adds	r2, r3, #2
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	225e      	movs	r2, #94	; 0x5e
 800806c:	5a9b      	ldrh	r3, [r3, r2]
 800806e:	b29b      	uxth	r3, r3
 8008070:	3b01      	subs	r3, #1
 8008072:	b299      	uxth	r1, r3
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	225e      	movs	r2, #94	; 0x5e
 8008078:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	225e      	movs	r2, #94	; 0x5e
 800807e:	5a9b      	ldrh	r3, [r3, r2]
 8008080:	b29b      	uxth	r3, r3
 8008082:	2b00      	cmp	r3, #0
 8008084:	d000      	beq.n	8008088 <UART_RxISR_16BIT+0x6c>
 8008086:	e0a1      	b.n	80081cc <UART_RxISR_16BIT+0x1b0>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008088:	f3ef 8310 	mrs	r3, PRIMASK
 800808c:	623b      	str	r3, [r7, #32]
  return(result);
 800808e:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008090:	647b      	str	r3, [r7, #68]	; 0x44
 8008092:	2301      	movs	r3, #1
 8008094:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008096:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008098:	f383 8810 	msr	PRIMASK, r3
}
 800809c:	46c0      	nop			; (mov r8, r8)
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	681a      	ldr	r2, [r3, #0]
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	494a      	ldr	r1, [pc, #296]	; (80081d4 <UART_RxISR_16BIT+0x1b8>)
 80080aa:	400a      	ands	r2, r1
 80080ac:	601a      	str	r2, [r3, #0]
 80080ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80080b0:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080b4:	f383 8810 	msr	PRIMASK, r3
}
 80080b8:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80080ba:	f3ef 8310 	mrs	r3, PRIMASK
 80080be:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80080c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080c2:	643b      	str	r3, [r7, #64]	; 0x40
 80080c4:	2301      	movs	r3, #1
 80080c6:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80080ca:	f383 8810 	msr	PRIMASK, r3
}
 80080ce:	46c0      	nop			; (mov r8, r8)
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	689a      	ldr	r2, [r3, #8]
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	2101      	movs	r1, #1
 80080dc:	438a      	bics	r2, r1
 80080de:	609a      	str	r2, [r3, #8]
 80080e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80080e2:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80080e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80080e6:	f383 8810 	msr	PRIMASK, r3
}
 80080ea:	46c0      	nop			; (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	228c      	movs	r2, #140	; 0x8c
 80080f0:	2120      	movs	r1, #32
 80080f2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2200      	movs	r2, #0
 80080f8:	675a      	str	r2, [r3, #116]	; 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	2200      	movs	r2, #0
 80080fe:	671a      	str	r2, [r3, #112]	; 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a34      	ldr	r2, [pc, #208]	; (80081d8 <UART_RxISR_16BIT+0x1bc>)
 8008106:	4293      	cmp	r3, r2
 8008108:	d01f      	beq.n	800814a <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	685a      	ldr	r2, [r3, #4]
 8008110:	2380      	movs	r3, #128	; 0x80
 8008112:	041b      	lsls	r3, r3, #16
 8008114:	4013      	ands	r3, r2
 8008116:	d018      	beq.n	800814a <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008118:	f3ef 8310 	mrs	r3, PRIMASK
 800811c:	617b      	str	r3, [r7, #20]
  return(result);
 800811e:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008120:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008122:	2301      	movs	r3, #1
 8008124:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008126:	69bb      	ldr	r3, [r7, #24]
 8008128:	f383 8810 	msr	PRIMASK, r3
}
 800812c:	46c0      	nop			; (mov r8, r8)
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	4928      	ldr	r1, [pc, #160]	; (80081dc <UART_RxISR_16BIT+0x1c0>)
 800813a:	400a      	ands	r2, r1
 800813c:	601a      	str	r2, [r3, #0]
 800813e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008140:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008142:	69fb      	ldr	r3, [r7, #28]
 8008144:	f383 8810 	msr	PRIMASK, r3
}
 8008148:	46c0      	nop			; (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800814e:	2b01      	cmp	r3, #1
 8008150:	d12f      	bne.n	80081b2 <UART_RxISR_16BIT+0x196>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008158:	f3ef 8310 	mrs	r3, PRIMASK
 800815c:	60bb      	str	r3, [r7, #8]
  return(result);
 800815e:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008160:	63bb      	str	r3, [r7, #56]	; 0x38
 8008162:	2301      	movs	r3, #1
 8008164:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	f383 8810 	msr	PRIMASK, r3
}
 800816c:	46c0      	nop			; (mov r8, r8)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	2110      	movs	r1, #16
 800817a:	438a      	bics	r2, r1
 800817c:	601a      	str	r2, [r3, #0]
 800817e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008180:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f383 8810 	msr	PRIMASK, r3
}
 8008188:	46c0      	nop			; (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	69db      	ldr	r3, [r3, #28]
 8008190:	2210      	movs	r2, #16
 8008192:	4013      	ands	r3, r2
 8008194:	2b10      	cmp	r3, #16
 8008196:	d103      	bne.n	80081a0 <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	2210      	movs	r2, #16
 800819e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	225c      	movs	r2, #92	; 0x5c
 80081a4:	5a9a      	ldrh	r2, [r3, r2]
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	0011      	movs	r1, r2
 80081aa:	0018      	movs	r0, r3
 80081ac:	f7fe ffee 	bl	800718c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80081b0:	e00c      	b.n	80081cc <UART_RxISR_16BIT+0x1b0>
        HAL_UART_RxCpltCallback(huart);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	0018      	movs	r0, r3
 80081b6:	f7fe ffd9 	bl	800716c <HAL_UART_RxCpltCallback>
}
 80081ba:	e007      	b.n	80081cc <UART_RxISR_16BIT+0x1b0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	699a      	ldr	r2, [r3, #24]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	2108      	movs	r1, #8
 80081c8:	430a      	orrs	r2, r1
 80081ca:	619a      	str	r2, [r3, #24]
}
 80081cc:	46c0      	nop			; (mov r8, r8)
 80081ce:	46bd      	mov	sp, r7
 80081d0:	b014      	add	sp, #80	; 0x50
 80081d2:	bd80      	pop	{r7, pc}
 80081d4:	fffffedf 	.word	0xfffffedf
 80081d8:	40008000 	.word	0x40008000
 80081dc:	fbffffff 	.word	0xfbffffff

080081e0 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80081e0:	b580      	push	{r7, lr}
 80081e2:	b0a0      	sub	sp, #128	; 0x80
 80081e4:	af00      	add	r7, sp, #0
 80081e6:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80081e8:	237a      	movs	r3, #122	; 0x7a
 80081ea:	18fb      	adds	r3, r7, r3
 80081ec:	687a      	ldr	r2, [r7, #4]
 80081ee:	2160      	movs	r1, #96	; 0x60
 80081f0:	5a52      	ldrh	r2, [r2, r1]
 80081f2:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	69db      	ldr	r3, [r3, #28]
 80081fa:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80081fc:	687b      	ldr	r3, [r7, #4]
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	677b      	str	r3, [r7, #116]	; 0x74
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	689b      	ldr	r3, [r3, #8]
 800820a:	673b      	str	r3, [r7, #112]	; 0x70

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	228c      	movs	r2, #140	; 0x8c
 8008210:	589b      	ldr	r3, [r3, r2]
 8008212:	2b22      	cmp	r3, #34	; 0x22
 8008214:	d000      	beq.n	8008218 <UART_RxISR_8BIT_FIFOEN+0x38>
 8008216:	e16a      	b.n	80084ee <UART_RxISR_8BIT_FIFOEN+0x30e>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8008218:	236e      	movs	r3, #110	; 0x6e
 800821a:	18fb      	adds	r3, r7, r3
 800821c:	687a      	ldr	r2, [r7, #4]
 800821e:	2168      	movs	r1, #104	; 0x68
 8008220:	5a52      	ldrh	r2, [r2, r1]
 8008222:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008224:	e111      	b.n	800844a <UART_RxISR_8BIT_FIFOEN+0x26a>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008226:	687b      	ldr	r3, [r7, #4]
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800822c:	216c      	movs	r1, #108	; 0x6c
 800822e:	187b      	adds	r3, r7, r1
 8008230:	801a      	strh	r2, [r3, #0]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008232:	187b      	adds	r3, r7, r1
 8008234:	881b      	ldrh	r3, [r3, #0]
 8008236:	b2da      	uxtb	r2, r3
 8008238:	237a      	movs	r3, #122	; 0x7a
 800823a:	18fb      	adds	r3, r7, r3
 800823c:	881b      	ldrh	r3, [r3, #0]
 800823e:	b2d9      	uxtb	r1, r3
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008244:	400a      	ands	r2, r1
 8008246:	b2d2      	uxtb	r2, r2
 8008248:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800824e:	1c5a      	adds	r2, r3, #1
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	225e      	movs	r2, #94	; 0x5e
 8008258:	5a9b      	ldrh	r3, [r3, r2]
 800825a:	b29b      	uxth	r3, r3
 800825c:	3b01      	subs	r3, #1
 800825e:	b299      	uxth	r1, r3
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	225e      	movs	r2, #94	; 0x5e
 8008264:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	681b      	ldr	r3, [r3, #0]
 800826a:	69db      	ldr	r3, [r3, #28]
 800826c:	67fb      	str	r3, [r7, #124]	; 0x7c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800826e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008270:	2207      	movs	r2, #7
 8008272:	4013      	ands	r3, r2
 8008274:	d049      	beq.n	800830a <UART_RxISR_8BIT_FIFOEN+0x12a>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8008276:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008278:	2201      	movs	r2, #1
 800827a:	4013      	ands	r3, r2
 800827c:	d010      	beq.n	80082a0 <UART_RxISR_8BIT_FIFOEN+0xc0>
 800827e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8008280:	2380      	movs	r3, #128	; 0x80
 8008282:	005b      	lsls	r3, r3, #1
 8008284:	4013      	ands	r3, r2
 8008286:	d00b      	beq.n	80082a0 <UART_RxISR_8BIT_FIFOEN+0xc0>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2201      	movs	r2, #1
 800828e:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	2290      	movs	r2, #144	; 0x90
 8008294:	589b      	ldr	r3, [r3, r2]
 8008296:	2201      	movs	r2, #1
 8008298:	431a      	orrs	r2, r3
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	2190      	movs	r1, #144	; 0x90
 800829e:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082a0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082a2:	2202      	movs	r2, #2
 80082a4:	4013      	ands	r3, r2
 80082a6:	d00f      	beq.n	80082c8 <UART_RxISR_8BIT_FIFOEN+0xe8>
 80082a8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082aa:	2201      	movs	r2, #1
 80082ac:	4013      	ands	r3, r2
 80082ae:	d00b      	beq.n	80082c8 <UART_RxISR_8BIT_FIFOEN+0xe8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	681b      	ldr	r3, [r3, #0]
 80082b4:	2202      	movs	r2, #2
 80082b6:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2290      	movs	r2, #144	; 0x90
 80082bc:	589b      	ldr	r3, [r3, r2]
 80082be:	2204      	movs	r2, #4
 80082c0:	431a      	orrs	r2, r3
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2190      	movs	r1, #144	; 0x90
 80082c6:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80082c8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80082ca:	2204      	movs	r2, #4
 80082cc:	4013      	ands	r3, r2
 80082ce:	d00f      	beq.n	80082f0 <UART_RxISR_8BIT_FIFOEN+0x110>
 80082d0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082d2:	2201      	movs	r2, #1
 80082d4:	4013      	ands	r3, r2
 80082d6:	d00b      	beq.n	80082f0 <UART_RxISR_8BIT_FIFOEN+0x110>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	2204      	movs	r2, #4
 80082de:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	2290      	movs	r2, #144	; 0x90
 80082e4:	589b      	ldr	r3, [r3, r2]
 80082e6:	2202      	movs	r2, #2
 80082e8:	431a      	orrs	r2, r3
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2190      	movs	r1, #144	; 0x90
 80082ee:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2290      	movs	r2, #144	; 0x90
 80082f4:	589b      	ldr	r3, [r3, r2]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d007      	beq.n	800830a <UART_RxISR_8BIT_FIFOEN+0x12a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	0018      	movs	r0, r3
 80082fe:	f7fe ff3d 	bl	800717c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	2290      	movs	r2, #144	; 0x90
 8008306:	2100      	movs	r1, #0
 8008308:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	225e      	movs	r2, #94	; 0x5e
 800830e:	5a9b      	ldrh	r3, [r3, r2]
 8008310:	b29b      	uxth	r3, r3
 8008312:	2b00      	cmp	r3, #0
 8008314:	d000      	beq.n	8008318 <UART_RxISR_8BIT_FIFOEN+0x138>
 8008316:	e098      	b.n	800844a <UART_RxISR_8BIT_FIFOEN+0x26a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008318:	f3ef 8310 	mrs	r3, PRIMASK
 800831c:	63bb      	str	r3, [r7, #56]	; 0x38
  return(result);
 800831e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008320:	66bb      	str	r3, [r7, #104]	; 0x68
 8008322:	2301      	movs	r3, #1
 8008324:	63fb      	str	r3, [r7, #60]	; 0x3c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008326:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008328:	f383 8810 	msr	PRIMASK, r3
}
 800832c:	46c0      	nop			; (mov r8, r8)
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	4973      	ldr	r1, [pc, #460]	; (8008508 <UART_RxISR_8BIT_FIFOEN+0x328>)
 800833a:	400a      	ands	r2, r1
 800833c:	601a      	str	r2, [r3, #0]
 800833e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008340:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008342:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008344:	f383 8810 	msr	PRIMASK, r3
}
 8008348:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800834a:	f3ef 8310 	mrs	r3, PRIMASK
 800834e:	647b      	str	r3, [r7, #68]	; 0x44
  return(result);
 8008350:	6c7b      	ldr	r3, [r7, #68]	; 0x44

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008352:	667b      	str	r3, [r7, #100]	; 0x64
 8008354:	2301      	movs	r3, #1
 8008356:	64bb      	str	r3, [r7, #72]	; 0x48
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008358:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800835a:	f383 8810 	msr	PRIMASK, r3
}
 800835e:	46c0      	nop			; (mov r8, r8)
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	689a      	ldr	r2, [r3, #8]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	4968      	ldr	r1, [pc, #416]	; (800850c <UART_RxISR_8BIT_FIFOEN+0x32c>)
 800836c:	400a      	ands	r2, r1
 800836e:	609a      	str	r2, [r3, #8]
 8008370:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008372:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008376:	f383 8810 	msr	PRIMASK, r3
}
 800837a:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	228c      	movs	r2, #140	; 0x8c
 8008380:	2120      	movs	r1, #32
 8008382:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2200      	movs	r2, #0
 8008388:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	2200      	movs	r2, #0
 800838e:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	4a5e      	ldr	r2, [pc, #376]	; (8008510 <UART_RxISR_8BIT_FIFOEN+0x330>)
 8008396:	4293      	cmp	r3, r2
 8008398:	d01f      	beq.n	80083da <UART_RxISR_8BIT_FIFOEN+0x1fa>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	685a      	ldr	r2, [r3, #4]
 80083a0:	2380      	movs	r3, #128	; 0x80
 80083a2:	041b      	lsls	r3, r3, #16
 80083a4:	4013      	ands	r3, r2
 80083a6:	d018      	beq.n	80083da <UART_RxISR_8BIT_FIFOEN+0x1fa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083a8:	f3ef 8310 	mrs	r3, PRIMASK
 80083ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  return(result);
 80083ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80083b0:	663b      	str	r3, [r7, #96]	; 0x60
 80083b2:	2301      	movs	r3, #1
 80083b4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80083b8:	f383 8810 	msr	PRIMASK, r3
}
 80083bc:	46c0      	nop			; (mov r8, r8)
 80083be:	687b      	ldr	r3, [r7, #4]
 80083c0:	681b      	ldr	r3, [r3, #0]
 80083c2:	681a      	ldr	r2, [r3, #0]
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	681b      	ldr	r3, [r3, #0]
 80083c8:	4952      	ldr	r1, [pc, #328]	; (8008514 <UART_RxISR_8BIT_FIFOEN+0x334>)
 80083ca:	400a      	ands	r2, r1
 80083cc:	601a      	str	r2, [r3, #0]
 80083ce:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80083d0:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083d4:	f383 8810 	msr	PRIMASK, r3
}
 80083d8:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80083de:	2b01      	cmp	r3, #1
 80083e0:	d12f      	bne.n	8008442 <UART_RxISR_8BIT_FIFOEN+0x262>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80083e8:	f3ef 8310 	mrs	r3, PRIMASK
 80083ec:	623b      	str	r3, [r7, #32]
  return(result);
 80083ee:	6a3b      	ldr	r3, [r7, #32]

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80083f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80083f2:	2301      	movs	r3, #1
 80083f4:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80083f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f8:	f383 8810 	msr	PRIMASK, r3
}
 80083fc:	46c0      	nop			; (mov r8, r8)
 80083fe:	687b      	ldr	r3, [r7, #4]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	681a      	ldr	r2, [r3, #0]
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	2110      	movs	r1, #16
 800840a:	438a      	bics	r2, r1
 800840c:	601a      	str	r2, [r3, #0]
 800840e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008410:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008412:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008414:	f383 8810 	msr	PRIMASK, r3
}
 8008418:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	69db      	ldr	r3, [r3, #28]
 8008420:	2210      	movs	r2, #16
 8008422:	4013      	ands	r3, r2
 8008424:	2b10      	cmp	r3, #16
 8008426:	d103      	bne.n	8008430 <UART_RxISR_8BIT_FIFOEN+0x250>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	2210      	movs	r2, #16
 800842e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	225c      	movs	r2, #92	; 0x5c
 8008434:	5a9a      	ldrh	r2, [r3, r2]
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	0011      	movs	r1, r2
 800843a:	0018      	movs	r0, r3
 800843c:	f7fe fea6 	bl	800718c <HAL_UARTEx_RxEventCallback>
 8008440:	e003      	b.n	800844a <UART_RxISR_8BIT_FIFOEN+0x26a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008442:	687b      	ldr	r3, [r7, #4]
 8008444:	0018      	movs	r0, r3
 8008446:	f7fe fe91 	bl	800716c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800844a:	236e      	movs	r3, #110	; 0x6e
 800844c:	18fb      	adds	r3, r7, r3
 800844e:	881b      	ldrh	r3, [r3, #0]
 8008450:	2b00      	cmp	r3, #0
 8008452:	d004      	beq.n	800845e <UART_RxISR_8BIT_FIFOEN+0x27e>
 8008454:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8008456:	2220      	movs	r2, #32
 8008458:	4013      	ands	r3, r2
 800845a:	d000      	beq.n	800845e <UART_RxISR_8BIT_FIFOEN+0x27e>
 800845c:	e6e3      	b.n	8008226 <UART_RxISR_8BIT_FIFOEN+0x46>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 800845e:	205a      	movs	r0, #90	; 0x5a
 8008460:	183b      	adds	r3, r7, r0
 8008462:	687a      	ldr	r2, [r7, #4]
 8008464:	215e      	movs	r1, #94	; 0x5e
 8008466:	5a52      	ldrh	r2, [r2, r1]
 8008468:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800846a:	0001      	movs	r1, r0
 800846c:	187b      	adds	r3, r7, r1
 800846e:	881b      	ldrh	r3, [r3, #0]
 8008470:	2b00      	cmp	r3, #0
 8008472:	d044      	beq.n	80084fe <UART_RxISR_8BIT_FIFOEN+0x31e>
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	2268      	movs	r2, #104	; 0x68
 8008478:	5a9b      	ldrh	r3, [r3, r2]
 800847a:	187a      	adds	r2, r7, r1
 800847c:	8812      	ldrh	r2, [r2, #0]
 800847e:	429a      	cmp	r2, r3
 8008480:	d23d      	bcs.n	80084fe <UART_RxISR_8BIT_FIFOEN+0x31e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008482:	f3ef 8310 	mrs	r3, PRIMASK
 8008486:	60bb      	str	r3, [r7, #8]
  return(result);
 8008488:	68bb      	ldr	r3, [r7, #8]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 800848a:	657b      	str	r3, [r7, #84]	; 0x54
 800848c:	2301      	movs	r3, #1
 800848e:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	f383 8810 	msr	PRIMASK, r3
}
 8008496:	46c0      	nop			; (mov r8, r8)
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	689a      	ldr	r2, [r3, #8]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	491d      	ldr	r1, [pc, #116]	; (8008518 <UART_RxISR_8BIT_FIFOEN+0x338>)
 80084a4:	400a      	ands	r2, r1
 80084a6:	609a      	str	r2, [r3, #8]
 80084a8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80084aa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084ac:	693b      	ldr	r3, [r7, #16]
 80084ae:	f383 8810 	msr	PRIMASK, r3
}
 80084b2:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	4a19      	ldr	r2, [pc, #100]	; (800851c <UART_RxISR_8BIT_FIFOEN+0x33c>)
 80084b8:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80084ba:	f3ef 8310 	mrs	r3, PRIMASK
 80084be:	617b      	str	r3, [r7, #20]
  return(result);
 80084c0:	697b      	ldr	r3, [r7, #20]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80084c2:	653b      	str	r3, [r7, #80]	; 0x50
 80084c4:	2301      	movs	r3, #1
 80084c6:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084c8:	69bb      	ldr	r3, [r7, #24]
 80084ca:	f383 8810 	msr	PRIMASK, r3
}
 80084ce:	46c0      	nop			; (mov r8, r8)
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	681b      	ldr	r3, [r3, #0]
 80084da:	2120      	movs	r1, #32
 80084dc:	430a      	orrs	r2, r1
 80084de:	601a      	str	r2, [r3, #0]
 80084e0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80084e4:	69fb      	ldr	r3, [r7, #28]
 80084e6:	f383 8810 	msr	PRIMASK, r3
}
 80084ea:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80084ec:	e007      	b.n	80084fe <UART_RxISR_8BIT_FIFOEN+0x31e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	699a      	ldr	r2, [r3, #24]
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	2108      	movs	r1, #8
 80084fa:	430a      	orrs	r2, r1
 80084fc:	619a      	str	r2, [r3, #24]
}
 80084fe:	46c0      	nop			; (mov r8, r8)
 8008500:	46bd      	mov	sp, r7
 8008502:	b020      	add	sp, #128	; 0x80
 8008504:	bd80      	pop	{r7, pc}
 8008506:	46c0      	nop			; (mov r8, r8)
 8008508:	fffffeff 	.word	0xfffffeff
 800850c:	effffffe 	.word	0xeffffffe
 8008510:	40008000 	.word	0x40008000
 8008514:	fbffffff 	.word	0xfbffffff
 8008518:	efffffff 	.word	0xefffffff
 800851c:	08007e59 	.word	0x08007e59

08008520 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b0a2      	sub	sp, #136	; 0x88
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8008528:	2382      	movs	r3, #130	; 0x82
 800852a:	18fb      	adds	r3, r7, r3
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	2160      	movs	r1, #96	; 0x60
 8008530:	5a52      	ldrh	r2, [r2, r1]
 8008532:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	681b      	ldr	r3, [r3, #0]
 8008538:	69db      	ldr	r3, [r3, #28]
 800853a:	2284      	movs	r2, #132	; 0x84
 800853c:	18ba      	adds	r2, r7, r2
 800853e:	6013      	str	r3, [r2, #0]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	67fb      	str	r3, [r7, #124]	; 0x7c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	67bb      	str	r3, [r7, #120]	; 0x78

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008550:	687b      	ldr	r3, [r7, #4]
 8008552:	228c      	movs	r2, #140	; 0x8c
 8008554:	589b      	ldr	r3, [r3, r2]
 8008556:	2b22      	cmp	r3, #34	; 0x22
 8008558:	d000      	beq.n	800855c <UART_RxISR_16BIT_FIFOEN+0x3c>
 800855a:	e174      	b.n	8008846 <UART_RxISR_16BIT_FIFOEN+0x326>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 800855c:	2376      	movs	r3, #118	; 0x76
 800855e:	18fb      	adds	r3, r7, r3
 8008560:	687a      	ldr	r2, [r7, #4]
 8008562:	2168      	movs	r1, #104	; 0x68
 8008564:	5a52      	ldrh	r2, [r2, r1]
 8008566:	801a      	strh	r2, [r3, #0]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8008568:	e119      	b.n	800879e <UART_RxISR_16BIT_FIFOEN+0x27e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8008570:	2174      	movs	r1, #116	; 0x74
 8008572:	187b      	adds	r3, r7, r1
 8008574:	801a      	strh	r2, [r3, #0]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800857a:	673b      	str	r3, [r7, #112]	; 0x70
      *tmp = (uint16_t)(uhdata & uhMask);
 800857c:	187b      	adds	r3, r7, r1
 800857e:	2282      	movs	r2, #130	; 0x82
 8008580:	18ba      	adds	r2, r7, r2
 8008582:	881b      	ldrh	r3, [r3, #0]
 8008584:	8812      	ldrh	r2, [r2, #0]
 8008586:	4013      	ands	r3, r2
 8008588:	b29a      	uxth	r2, r3
 800858a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800858c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008592:	1c9a      	adds	r2, r3, #2
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	225e      	movs	r2, #94	; 0x5e
 800859c:	5a9b      	ldrh	r3, [r3, r2]
 800859e:	b29b      	uxth	r3, r3
 80085a0:	3b01      	subs	r3, #1
 80085a2:	b299      	uxth	r1, r3
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	225e      	movs	r2, #94	; 0x5e
 80085a8:	5299      	strh	r1, [r3, r2]
      isrflags = READ_REG(huart->Instance->ISR);
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	681b      	ldr	r3, [r3, #0]
 80085ae:	69db      	ldr	r3, [r3, #28]
 80085b0:	2184      	movs	r1, #132	; 0x84
 80085b2:	187a      	adds	r2, r7, r1
 80085b4:	6013      	str	r3, [r2, #0]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80085b6:	187b      	adds	r3, r7, r1
 80085b8:	681b      	ldr	r3, [r3, #0]
 80085ba:	2207      	movs	r2, #7
 80085bc:	4013      	ands	r3, r2
 80085be:	d04e      	beq.n	800865e <UART_RxISR_16BIT_FIFOEN+0x13e>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80085c0:	187b      	adds	r3, r7, r1
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	2201      	movs	r2, #1
 80085c6:	4013      	ands	r3, r2
 80085c8:	d010      	beq.n	80085ec <UART_RxISR_16BIT_FIFOEN+0xcc>
 80085ca:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80085cc:	2380      	movs	r3, #128	; 0x80
 80085ce:	005b      	lsls	r3, r3, #1
 80085d0:	4013      	ands	r3, r2
 80085d2:	d00b      	beq.n	80085ec <UART_RxISR_16BIT_FIFOEN+0xcc>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2201      	movs	r2, #1
 80085da:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2290      	movs	r2, #144	; 0x90
 80085e0:	589b      	ldr	r3, [r3, r2]
 80085e2:	2201      	movs	r2, #1
 80085e4:	431a      	orrs	r2, r3
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	2190      	movs	r1, #144	; 0x90
 80085ea:	505a      	str	r2, [r3, r1]
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80085ec:	2384      	movs	r3, #132	; 0x84
 80085ee:	18fb      	adds	r3, r7, r3
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	2202      	movs	r2, #2
 80085f4:	4013      	ands	r3, r2
 80085f6:	d00f      	beq.n	8008618 <UART_RxISR_16BIT_FIFOEN+0xf8>
 80085f8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80085fa:	2201      	movs	r2, #1
 80085fc:	4013      	ands	r3, r2
 80085fe:	d00b      	beq.n	8008618 <UART_RxISR_16BIT_FIFOEN+0xf8>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	2202      	movs	r2, #2
 8008606:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	2290      	movs	r2, #144	; 0x90
 800860c:	589b      	ldr	r3, [r3, r2]
 800860e:	2204      	movs	r2, #4
 8008610:	431a      	orrs	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	2190      	movs	r1, #144	; 0x90
 8008616:	505a      	str	r2, [r3, r1]
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008618:	2384      	movs	r3, #132	; 0x84
 800861a:	18fb      	adds	r3, r7, r3
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	2204      	movs	r2, #4
 8008620:	4013      	ands	r3, r2
 8008622:	d00f      	beq.n	8008644 <UART_RxISR_16BIT_FIFOEN+0x124>
 8008624:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008626:	2201      	movs	r2, #1
 8008628:	4013      	ands	r3, r2
 800862a:	d00b      	beq.n	8008644 <UART_RxISR_16BIT_FIFOEN+0x124>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	2204      	movs	r2, #4
 8008632:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	2290      	movs	r2, #144	; 0x90
 8008638:	589b      	ldr	r3, [r3, r2]
 800863a:	2202      	movs	r2, #2
 800863c:	431a      	orrs	r2, r3
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	2190      	movs	r1, #144	; 0x90
 8008642:	505a      	str	r2, [r3, r1]
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	2290      	movs	r2, #144	; 0x90
 8008648:	589b      	ldr	r3, [r3, r2]
 800864a:	2b00      	cmp	r3, #0
 800864c:	d007      	beq.n	800865e <UART_RxISR_16BIT_FIFOEN+0x13e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	0018      	movs	r0, r3
 8008652:	f7fe fd93 	bl	800717c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2290      	movs	r2, #144	; 0x90
 800865a:	2100      	movs	r1, #0
 800865c:	5099      	str	r1, [r3, r2]
        }
      }

      if (huart->RxXferCount == 0U)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	225e      	movs	r2, #94	; 0x5e
 8008662:	5a9b      	ldrh	r3, [r3, r2]
 8008664:	b29b      	uxth	r3, r3
 8008666:	2b00      	cmp	r3, #0
 8008668:	d000      	beq.n	800866c <UART_RxISR_16BIT_FIFOEN+0x14c>
 800866a:	e098      	b.n	800879e <UART_RxISR_16BIT_FIFOEN+0x27e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800866c:	f3ef 8310 	mrs	r3, PRIMASK
 8008670:	63fb      	str	r3, [r7, #60]	; 0x3c
  return(result);
 8008672:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008674:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008676:	2301      	movs	r3, #1
 8008678:	643b      	str	r3, [r7, #64]	; 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800867a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800867c:	f383 8810 	msr	PRIMASK, r3
}
 8008680:	46c0      	nop			; (mov r8, r8)
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	681a      	ldr	r2, [r3, #0]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4974      	ldr	r1, [pc, #464]	; (8008860 <UART_RxISR_16BIT_FIFOEN+0x340>)
 800868e:	400a      	ands	r2, r1
 8008690:	601a      	str	r2, [r3, #0]
 8008692:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008694:	647b      	str	r3, [r7, #68]	; 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008696:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008698:	f383 8810 	msr	PRIMASK, r3
}
 800869c:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800869e:	f3ef 8310 	mrs	r3, PRIMASK
 80086a2:	64bb      	str	r3, [r7, #72]	; 0x48
  return(result);
 80086a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80086a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80086a8:	2301      	movs	r3, #1
 80086aa:	64fb      	str	r3, [r7, #76]	; 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086ae:	f383 8810 	msr	PRIMASK, r3
}
 80086b2:	46c0      	nop			; (mov r8, r8)
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	689a      	ldr	r2, [r3, #8]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	4969      	ldr	r1, [pc, #420]	; (8008864 <UART_RxISR_16BIT_FIFOEN+0x344>)
 80086c0:	400a      	ands	r2, r1
 80086c2:	609a      	str	r2, [r3, #8]
 80086c4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80086c6:	653b      	str	r3, [r7, #80]	; 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80086c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80086ca:	f383 8810 	msr	PRIMASK, r3
}
 80086ce:	46c0      	nop			; (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	228c      	movs	r2, #140	; 0x8c
 80086d4:	2120      	movs	r1, #32
 80086d6:	5099      	str	r1, [r3, r2]

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	675a      	str	r2, [r3, #116]	; 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	2200      	movs	r2, #0
 80086e2:	671a      	str	r2, [r3, #112]	; 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	4a5f      	ldr	r2, [pc, #380]	; (8008868 <UART_RxISR_16BIT_FIFOEN+0x348>)
 80086ea:	4293      	cmp	r3, r2
 80086ec:	d01f      	beq.n	800872e <UART_RxISR_16BIT_FIFOEN+0x20e>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80086ee:	687b      	ldr	r3, [r7, #4]
 80086f0:	681b      	ldr	r3, [r3, #0]
 80086f2:	685a      	ldr	r2, [r3, #4]
 80086f4:	2380      	movs	r3, #128	; 0x80
 80086f6:	041b      	lsls	r3, r3, #16
 80086f8:	4013      	ands	r3, r2
 80086fa:	d018      	beq.n	800872e <UART_RxISR_16BIT_FIFOEN+0x20e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80086fc:	f3ef 8310 	mrs	r3, PRIMASK
 8008700:	633b      	str	r3, [r7, #48]	; 0x30
  return(result);
 8008702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008704:	667b      	str	r3, [r7, #100]	; 0x64
 8008706:	2301      	movs	r3, #1
 8008708:	637b      	str	r3, [r7, #52]	; 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800870a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800870c:	f383 8810 	msr	PRIMASK, r3
}
 8008710:	46c0      	nop			; (mov r8, r8)
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	681a      	ldr	r2, [r3, #0]
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	4953      	ldr	r1, [pc, #332]	; (800886c <UART_RxISR_16BIT_FIFOEN+0x34c>)
 800871e:	400a      	ands	r2, r1
 8008720:	601a      	str	r2, [r3, #0]
 8008722:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008724:	63bb      	str	r3, [r7, #56]	; 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008726:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008728:	f383 8810 	msr	PRIMASK, r3
}
 800872c:	46c0      	nop			; (mov r8, r8)
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008732:	2b01      	cmp	r3, #1
 8008734:	d12f      	bne.n	8008796 <UART_RxISR_16BIT_FIFOEN+0x276>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	2200      	movs	r2, #0
 800873a:	66da      	str	r2, [r3, #108]	; 0x6c
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800873c:	f3ef 8310 	mrs	r3, PRIMASK
 8008740:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8008742:	6a7b      	ldr	r3, [r7, #36]	; 0x24

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008744:	663b      	str	r3, [r7, #96]	; 0x60
 8008746:	2301      	movs	r3, #1
 8008748:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800874a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800874c:	f383 8810 	msr	PRIMASK, r3
}
 8008750:	46c0      	nop			; (mov r8, r8)
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	2110      	movs	r1, #16
 800875e:	438a      	bics	r2, r1
 8008760:	601a      	str	r2, [r3, #0]
 8008762:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008764:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008766:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008768:	f383 8810 	msr	PRIMASK, r3
}
 800876c:	46c0      	nop			; (mov r8, r8)

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	69db      	ldr	r3, [r3, #28]
 8008774:	2210      	movs	r2, #16
 8008776:	4013      	ands	r3, r2
 8008778:	2b10      	cmp	r3, #16
 800877a:	d103      	bne.n	8008784 <UART_RxISR_16BIT_FIFOEN+0x264>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2210      	movs	r2, #16
 8008782:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	225c      	movs	r2, #92	; 0x5c
 8008788:	5a9a      	ldrh	r2, [r3, r2]
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	0011      	movs	r1, r2
 800878e:	0018      	movs	r0, r3
 8008790:	f7fe fcfc 	bl	800718c <HAL_UARTEx_RxEventCallback>
 8008794:	e003      	b.n	800879e <UART_RxISR_16BIT_FIFOEN+0x27e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	0018      	movs	r0, r3
 800879a:	f7fe fce7 	bl	800716c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800879e:	2376      	movs	r3, #118	; 0x76
 80087a0:	18fb      	adds	r3, r7, r3
 80087a2:	881b      	ldrh	r3, [r3, #0]
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	d006      	beq.n	80087b6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80087a8:	2384      	movs	r3, #132	; 0x84
 80087aa:	18fb      	adds	r3, r7, r3
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	2220      	movs	r2, #32
 80087b0:	4013      	ands	r3, r2
 80087b2:	d000      	beq.n	80087b6 <UART_RxISR_16BIT_FIFOEN+0x296>
 80087b4:	e6d9      	b.n	800856a <UART_RxISR_16BIT_FIFOEN+0x4a>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80087b6:	205e      	movs	r0, #94	; 0x5e
 80087b8:	183b      	adds	r3, r7, r0
 80087ba:	687a      	ldr	r2, [r7, #4]
 80087bc:	215e      	movs	r1, #94	; 0x5e
 80087be:	5a52      	ldrh	r2, [r2, r1]
 80087c0:	801a      	strh	r2, [r3, #0]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80087c2:	0001      	movs	r1, r0
 80087c4:	187b      	adds	r3, r7, r1
 80087c6:	881b      	ldrh	r3, [r3, #0]
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d044      	beq.n	8008856 <UART_RxISR_16BIT_FIFOEN+0x336>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2268      	movs	r2, #104	; 0x68
 80087d0:	5a9b      	ldrh	r3, [r3, r2]
 80087d2:	187a      	adds	r2, r7, r1
 80087d4:	8812      	ldrh	r2, [r2, #0]
 80087d6:	429a      	cmp	r2, r3
 80087d8:	d23d      	bcs.n	8008856 <UART_RxISR_16BIT_FIFOEN+0x336>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80087da:	f3ef 8310 	mrs	r3, PRIMASK
 80087de:	60fb      	str	r3, [r7, #12]
  return(result);
 80087e0:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80087e2:	65bb      	str	r3, [r7, #88]	; 0x58
 80087e4:	2301      	movs	r3, #1
 80087e6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80087e8:	693b      	ldr	r3, [r7, #16]
 80087ea:	f383 8810 	msr	PRIMASK, r3
}
 80087ee:	46c0      	nop			; (mov r8, r8)
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689a      	ldr	r2, [r3, #8]
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	491d      	ldr	r1, [pc, #116]	; (8008870 <UART_RxISR_16BIT_FIFOEN+0x350>)
 80087fc:	400a      	ands	r2, r1
 80087fe:	609a      	str	r2, [r3, #8]
 8008800:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8008802:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008804:	697b      	ldr	r3, [r7, #20]
 8008806:	f383 8810 	msr	PRIMASK, r3
}
 800880a:	46c0      	nop			; (mov r8, r8)

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	4a19      	ldr	r2, [pc, #100]	; (8008874 <UART_RxISR_16BIT_FIFOEN+0x354>)
 8008810:	675a      	str	r2, [r3, #116]	; 0x74
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008812:	f3ef 8310 	mrs	r3, PRIMASK
 8008816:	61bb      	str	r3, [r7, #24]
  return(result);
 8008818:	69bb      	ldr	r3, [r7, #24]

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800881a:	657b      	str	r3, [r7, #84]	; 0x54
 800881c:	2301      	movs	r3, #1
 800881e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008820:	69fb      	ldr	r3, [r7, #28]
 8008822:	f383 8810 	msr	PRIMASK, r3
}
 8008826:	46c0      	nop			; (mov r8, r8)
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	681a      	ldr	r2, [r3, #0]
 800882e:	687b      	ldr	r3, [r7, #4]
 8008830:	681b      	ldr	r3, [r3, #0]
 8008832:	2120      	movs	r1, #32
 8008834:	430a      	orrs	r2, r1
 8008836:	601a      	str	r2, [r3, #0]
 8008838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800883a:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800883c:	6a3b      	ldr	r3, [r7, #32]
 800883e:	f383 8810 	msr	PRIMASK, r3
}
 8008842:	46c0      	nop			; (mov r8, r8)
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008844:	e007      	b.n	8008856 <UART_RxISR_16BIT_FIFOEN+0x336>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	699a      	ldr	r2, [r3, #24]
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	2108      	movs	r1, #8
 8008852:	430a      	orrs	r2, r1
 8008854:	619a      	str	r2, [r3, #24]
}
 8008856:	46c0      	nop			; (mov r8, r8)
 8008858:	46bd      	mov	sp, r7
 800885a:	b022      	add	sp, #136	; 0x88
 800885c:	bd80      	pop	{r7, pc}
 800885e:	46c0      	nop			; (mov r8, r8)
 8008860:	fffffeff 	.word	0xfffffeff
 8008864:	effffffe 	.word	0xeffffffe
 8008868:	40008000 	.word	0x40008000
 800886c:	fbffffff 	.word	0xfbffffff
 8008870:	efffffff 	.word	0xefffffff
 8008874:	0800801d 	.word	0x0800801d

08008878 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8008878:	b580      	push	{r7, lr}
 800887a:	b082      	sub	sp, #8
 800887c:	af00      	add	r7, sp, #0
 800887e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8008880:	46c0      	nop			; (mov r8, r8)
 8008882:	46bd      	mov	sp, r7
 8008884:	b002      	add	sp, #8
 8008886:	bd80      	pop	{r7, pc}

08008888 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8008888:	b580      	push	{r7, lr}
 800888a:	b082      	sub	sp, #8
 800888c:	af00      	add	r7, sp, #0
 800888e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8008890:	46c0      	nop			; (mov r8, r8)
 8008892:	46bd      	mov	sp, r7
 8008894:	b002      	add	sp, #8
 8008896:	bd80      	pop	{r7, pc}

08008898 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8008898:	b580      	push	{r7, lr}
 800889a:	b082      	sub	sp, #8
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80088a0:	46c0      	nop			; (mov r8, r8)
 80088a2:	46bd      	mov	sp, r7
 80088a4:	b002      	add	sp, #8
 80088a6:	bd80      	pop	{r7, pc}

080088a8 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80088a8:	b580      	push	{r7, lr}
 80088aa:	b084      	sub	sp, #16
 80088ac:	af00      	add	r7, sp, #0
 80088ae:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2284      	movs	r2, #132	; 0x84
 80088b4:	5c9b      	ldrb	r3, [r3, r2]
 80088b6:	2b01      	cmp	r3, #1
 80088b8:	d101      	bne.n	80088be <HAL_UARTEx_DisableFifoMode+0x16>
 80088ba:	2302      	movs	r3, #2
 80088bc:	e027      	b.n	800890e <HAL_UARTEx_DisableFifoMode+0x66>
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	2284      	movs	r2, #132	; 0x84
 80088c2:	2101      	movs	r1, #1
 80088c4:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80088c6:	687b      	ldr	r3, [r7, #4]
 80088c8:	2288      	movs	r2, #136	; 0x88
 80088ca:	2124      	movs	r1, #36	; 0x24
 80088cc:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80088ce:	687b      	ldr	r3, [r7, #4]
 80088d0:	681b      	ldr	r3, [r3, #0]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	681a      	ldr	r2, [r3, #0]
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2101      	movs	r1, #1
 80088e2:	438a      	bics	r2, r1
 80088e4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80088e6:	68fb      	ldr	r3, [r7, #12]
 80088e8:	4a0b      	ldr	r2, [pc, #44]	; (8008918 <HAL_UARTEx_DisableFifoMode+0x70>)
 80088ea:	4013      	ands	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	2200      	movs	r2, #0
 80088f2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	68fa      	ldr	r2, [r7, #12]
 80088fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2288      	movs	r2, #136	; 0x88
 8008900:	2120      	movs	r1, #32
 8008902:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2284      	movs	r2, #132	; 0x84
 8008908:	2100      	movs	r1, #0
 800890a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800890c:	2300      	movs	r3, #0
}
 800890e:	0018      	movs	r0, r3
 8008910:	46bd      	mov	sp, r7
 8008912:	b004      	add	sp, #16
 8008914:	bd80      	pop	{r7, pc}
 8008916:	46c0      	nop			; (mov r8, r8)
 8008918:	dfffffff 	.word	0xdfffffff

0800891c <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800891c:	b580      	push	{r7, lr}
 800891e:	b084      	sub	sp, #16
 8008920:	af00      	add	r7, sp, #0
 8008922:	6078      	str	r0, [r7, #4]
 8008924:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	2284      	movs	r2, #132	; 0x84
 800892a:	5c9b      	ldrb	r3, [r3, r2]
 800892c:	2b01      	cmp	r3, #1
 800892e:	d101      	bne.n	8008934 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8008930:	2302      	movs	r3, #2
 8008932:	e02e      	b.n	8008992 <HAL_UARTEx_SetTxFifoThreshold+0x76>
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	2284      	movs	r2, #132	; 0x84
 8008938:	2101      	movs	r1, #1
 800893a:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	2288      	movs	r2, #136	; 0x88
 8008940:	2124      	movs	r1, #36	; 0x24
 8008942:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008944:	687b      	ldr	r3, [r7, #4]
 8008946:	681b      	ldr	r3, [r3, #0]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	681a      	ldr	r2, [r3, #0]
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	681b      	ldr	r3, [r3, #0]
 8008956:	2101      	movs	r1, #1
 8008958:	438a      	bics	r2, r1
 800895a:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	689b      	ldr	r3, [r3, #8]
 8008962:	00db      	lsls	r3, r3, #3
 8008964:	08d9      	lsrs	r1, r3, #3
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	683a      	ldr	r2, [r7, #0]
 800896c:	430a      	orrs	r2, r1
 800896e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008970:	687b      	ldr	r3, [r7, #4]
 8008972:	0018      	movs	r0, r3
 8008974:	f000 f8b8 	bl	8008ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	681b      	ldr	r3, [r3, #0]
 800897c:	68fa      	ldr	r2, [r7, #12]
 800897e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2288      	movs	r2, #136	; 0x88
 8008984:	2120      	movs	r1, #32
 8008986:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	2284      	movs	r2, #132	; 0x84
 800898c:	2100      	movs	r1, #0
 800898e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008990:	2300      	movs	r3, #0
}
 8008992:	0018      	movs	r0, r3
 8008994:	46bd      	mov	sp, r7
 8008996:	b004      	add	sp, #16
 8008998:	bd80      	pop	{r7, pc}
	...

0800899c <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800899c:	b580      	push	{r7, lr}
 800899e:	b084      	sub	sp, #16
 80089a0:	af00      	add	r7, sp, #0
 80089a2:	6078      	str	r0, [r7, #4]
 80089a4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	2284      	movs	r2, #132	; 0x84
 80089aa:	5c9b      	ldrb	r3, [r3, r2]
 80089ac:	2b01      	cmp	r3, #1
 80089ae:	d101      	bne.n	80089b4 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80089b0:	2302      	movs	r3, #2
 80089b2:	e02f      	b.n	8008a14 <HAL_UARTEx_SetRxFifoThreshold+0x78>
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	2284      	movs	r2, #132	; 0x84
 80089b8:	2101      	movs	r1, #1
 80089ba:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	2288      	movs	r2, #136	; 0x88
 80089c0:	2124      	movs	r1, #36	; 0x24
 80089c2:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80089cc:	687b      	ldr	r3, [r7, #4]
 80089ce:	681b      	ldr	r3, [r3, #0]
 80089d0:	681a      	ldr	r2, [r3, #0]
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	2101      	movs	r1, #1
 80089d8:	438a      	bics	r2, r1
 80089da:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	689b      	ldr	r3, [r3, #8]
 80089e2:	4a0e      	ldr	r2, [pc, #56]	; (8008a1c <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80089e4:	4013      	ands	r3, r2
 80089e6:	0019      	movs	r1, r3
 80089e8:	687b      	ldr	r3, [r7, #4]
 80089ea:	681b      	ldr	r3, [r3, #0]
 80089ec:	683a      	ldr	r2, [r7, #0]
 80089ee:	430a      	orrs	r2, r1
 80089f0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	0018      	movs	r0, r3
 80089f6:	f000 f877 	bl	8008ae8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	68fa      	ldr	r2, [r7, #12]
 8008a00:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	2288      	movs	r2, #136	; 0x88
 8008a06:	2120      	movs	r1, #32
 8008a08:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	2284      	movs	r2, #132	; 0x84
 8008a0e:	2100      	movs	r1, #0
 8008a10:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	0018      	movs	r0, r3
 8008a16:	46bd      	mov	sp, r7
 8008a18:	b004      	add	sp, #16
 8008a1a:	bd80      	pop	{r7, pc}
 8008a1c:	f1ffffff 	.word	0xf1ffffff

08008a20 <HAL_UARTEx_ReceiveToIdle_IT>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a20:	b580      	push	{r7, lr}
 8008a22:	b08a      	sub	sp, #40	; 0x28
 8008a24:	af00      	add	r7, sp, #0
 8008a26:	60f8      	str	r0, [r7, #12]
 8008a28:	60b9      	str	r1, [r7, #8]
 8008a2a:	1dbb      	adds	r3, r7, #6
 8008a2c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008a2e:	2327      	movs	r3, #39	; 0x27
 8008a30:	18fb      	adds	r3, r7, r3
 8008a32:	2200      	movs	r2, #0
 8008a34:	701a      	strb	r2, [r3, #0]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008a36:	68fb      	ldr	r3, [r7, #12]
 8008a38:	228c      	movs	r2, #140	; 0x8c
 8008a3a:	589b      	ldr	r3, [r3, r2]
 8008a3c:	2b20      	cmp	r3, #32
 8008a3e:	d14e      	bne.n	8008ade <HAL_UARTEx_ReceiveToIdle_IT+0xbe>
  {
    if ((pData == NULL) || (Size == 0U))
 8008a40:	68bb      	ldr	r3, [r7, #8]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d003      	beq.n	8008a4e <HAL_UARTEx_ReceiveToIdle_IT+0x2e>
 8008a46:	1dbb      	adds	r3, r7, #6
 8008a48:	881b      	ldrh	r3, [r3, #0]
 8008a4a:	2b00      	cmp	r3, #0
 8008a4c:	d101      	bne.n	8008a52 <HAL_UARTEx_ReceiveToIdle_IT+0x32>
    {
      return HAL_ERROR;
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e046      	b.n	8008ae0 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a uint16_t frontier, as data to be received from RDR will be
       handled through a uint16_t cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	689a      	ldr	r2, [r3, #8]
 8008a56:	2380      	movs	r3, #128	; 0x80
 8008a58:	015b      	lsls	r3, r3, #5
 8008a5a:	429a      	cmp	r2, r3
 8008a5c:	d109      	bne.n	8008a72 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	691b      	ldr	r3, [r3, #16]
 8008a62:	2b00      	cmp	r3, #0
 8008a64:	d105      	bne.n	8008a72 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 8008a66:	68bb      	ldr	r3, [r7, #8]
 8008a68:	2201      	movs	r2, #1
 8008a6a:	4013      	ands	r3, r2
 8008a6c:	d001      	beq.n	8008a72 <HAL_UARTEx_ReceiveToIdle_IT+0x52>
      {
        return  HAL_ERROR;
 8008a6e:	2301      	movs	r3, #1
 8008a70:	e036      	b.n	8008ae0 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
      }
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	2201      	movs	r2, #1
 8008a76:	66da      	str	r2, [r3, #108]	; 0x6c
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	671a      	str	r2, [r3, #112]	; 0x70

    (void)UART_Start_Receive_IT(huart, pData, Size);
 8008a7e:	1dbb      	adds	r3, r7, #6
 8008a80:	881a      	ldrh	r2, [r3, #0]
 8008a82:	68b9      	ldr	r1, [r7, #8]
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	0018      	movs	r0, r3
 8008a88:	f7ff f818 	bl	8007abc <UART_Start_Receive_IT>

    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a8c:	68fb      	ldr	r3, [r7, #12]
 8008a8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008a90:	2b01      	cmp	r3, #1
 8008a92:	d11c      	bne.n	8008ace <HAL_UARTEx_ReceiveToIdle_IT+0xae>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	2210      	movs	r2, #16
 8008a9a:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8008a9c:	f3ef 8310 	mrs	r3, PRIMASK
 8008aa0:	617b      	str	r3, [r7, #20]
  return(result);
 8008aa2:	697b      	ldr	r3, [r7, #20]
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008aa4:	623b      	str	r3, [r7, #32]
 8008aa6:	2301      	movs	r3, #1
 8008aa8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008aaa:	69bb      	ldr	r3, [r7, #24]
 8008aac:	f383 8810 	msr	PRIMASK, r3
}
 8008ab0:	46c0      	nop			; (mov r8, r8)
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	681a      	ldr	r2, [r3, #0]
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	681b      	ldr	r3, [r3, #0]
 8008abc:	2110      	movs	r1, #16
 8008abe:	430a      	orrs	r2, r1
 8008ac0:	601a      	str	r2, [r3, #0]
 8008ac2:	6a3b      	ldr	r3, [r7, #32]
 8008ac4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	f383 8810 	msr	PRIMASK, r3
}
 8008acc:	e003      	b.n	8008ad6 <HAL_UARTEx_ReceiveToIdle_IT+0xb6>
    {
      /* In case of errors already pending when reception is started,
         Interrupts may have already been raised and lead to reception abortion.
         (Overrun error for instance).
         In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
      status = HAL_ERROR;
 8008ace:	2327      	movs	r3, #39	; 0x27
 8008ad0:	18fb      	adds	r3, r7, r3
 8008ad2:	2201      	movs	r2, #1
 8008ad4:	701a      	strb	r2, [r3, #0]
    }

    return status;
 8008ad6:	2327      	movs	r3, #39	; 0x27
 8008ad8:	18fb      	adds	r3, r7, r3
 8008ada:	781b      	ldrb	r3, [r3, #0]
 8008adc:	e000      	b.n	8008ae0 <HAL_UARTEx_ReceiveToIdle_IT+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8008ade:	2302      	movs	r3, #2
  }
}
 8008ae0:	0018      	movs	r0, r3
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	b00a      	add	sp, #40	; 0x28
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8008ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008aea:	b085      	sub	sp, #20
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d108      	bne.n	8008b0a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	226a      	movs	r2, #106	; 0x6a
 8008afc:	2101      	movs	r1, #1
 8008afe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	2268      	movs	r2, #104	; 0x68
 8008b04:	2101      	movs	r1, #1
 8008b06:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8008b08:	e043      	b.n	8008b92 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8008b0a:	260f      	movs	r6, #15
 8008b0c:	19bb      	adds	r3, r7, r6
 8008b0e:	2208      	movs	r2, #8
 8008b10:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8008b12:	200e      	movs	r0, #14
 8008b14:	183b      	adds	r3, r7, r0
 8008b16:	2208      	movs	r2, #8
 8008b18:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	689b      	ldr	r3, [r3, #8]
 8008b20:	0e5b      	lsrs	r3, r3, #25
 8008b22:	b2da      	uxtb	r2, r3
 8008b24:	240d      	movs	r4, #13
 8008b26:	193b      	adds	r3, r7, r4
 8008b28:	2107      	movs	r1, #7
 8008b2a:	400a      	ands	r2, r1
 8008b2c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	689b      	ldr	r3, [r3, #8]
 8008b34:	0f5b      	lsrs	r3, r3, #29
 8008b36:	b2da      	uxtb	r2, r3
 8008b38:	250c      	movs	r5, #12
 8008b3a:	197b      	adds	r3, r7, r5
 8008b3c:	2107      	movs	r1, #7
 8008b3e:	400a      	ands	r2, r1
 8008b40:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b42:	183b      	adds	r3, r7, r0
 8008b44:	781b      	ldrb	r3, [r3, #0]
 8008b46:	197a      	adds	r2, r7, r5
 8008b48:	7812      	ldrb	r2, [r2, #0]
 8008b4a:	4914      	ldr	r1, [pc, #80]	; (8008b9c <UARTEx_SetNbDataToProcess+0xb4>)
 8008b4c:	5c8a      	ldrb	r2, [r1, r2]
 8008b4e:	435a      	muls	r2, r3
 8008b50:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8008b52:	197b      	adds	r3, r7, r5
 8008b54:	781b      	ldrb	r3, [r3, #0]
 8008b56:	4a12      	ldr	r2, [pc, #72]	; (8008ba0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008b58:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8008b5a:	0019      	movs	r1, r3
 8008b5c:	f7f7 fb7a 	bl	8000254 <__divsi3>
 8008b60:	0003      	movs	r3, r0
 8008b62:	b299      	uxth	r1, r3
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	226a      	movs	r2, #106	; 0x6a
 8008b68:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b6a:	19bb      	adds	r3, r7, r6
 8008b6c:	781b      	ldrb	r3, [r3, #0]
 8008b6e:	193a      	adds	r2, r7, r4
 8008b70:	7812      	ldrb	r2, [r2, #0]
 8008b72:	490a      	ldr	r1, [pc, #40]	; (8008b9c <UARTEx_SetNbDataToProcess+0xb4>)
 8008b74:	5c8a      	ldrb	r2, [r1, r2]
 8008b76:	435a      	muls	r2, r3
 8008b78:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 8008b7a:	193b      	adds	r3, r7, r4
 8008b7c:	781b      	ldrb	r3, [r3, #0]
 8008b7e:	4a08      	ldr	r2, [pc, #32]	; (8008ba0 <UARTEx_SetNbDataToProcess+0xb8>)
 8008b80:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008b82:	0019      	movs	r1, r3
 8008b84:	f7f7 fb66 	bl	8000254 <__divsi3>
 8008b88:	0003      	movs	r3, r0
 8008b8a:	b299      	uxth	r1, r3
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	2268      	movs	r2, #104	; 0x68
 8008b90:	5299      	strh	r1, [r3, r2]
}
 8008b92:	46c0      	nop			; (mov r8, r8)
 8008b94:	46bd      	mov	sp, r7
 8008b96:	b005      	add	sp, #20
 8008b98:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008b9a:	46c0      	nop			; (mov r8, r8)
 8008b9c:	0800d984 	.word	0x0800d984
 8008ba0:	0800d98c 	.word	0x0800d98c

08008ba4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8008ba4:	b580      	push	{r7, lr}
 8008ba6:	b084      	sub	sp, #16
 8008ba8:	af00      	add	r7, sp, #0
 8008baa:	0002      	movs	r2, r0
 8008bac:	1dbb      	adds	r3, r7, #6
 8008bae:	801a      	strh	r2, [r3, #0]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8008bb4:	1dbb      	adds	r3, r7, #6
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	5e9b      	ldrsh	r3, [r3, r2]
 8008bba:	2b84      	cmp	r3, #132	; 0x84
 8008bbc:	d006      	beq.n	8008bcc <makeFreeRtosPriority+0x28>
    fpriority += (priority - osPriorityIdle);
 8008bbe:	1dbb      	adds	r3, r7, #6
 8008bc0:	2200      	movs	r2, #0
 8008bc2:	5e9a      	ldrsh	r2, [r3, r2]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	18d3      	adds	r3, r2, r3
 8008bc8:	3303      	adds	r3, #3
 8008bca:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8008bcc:	68fb      	ldr	r3, [r7, #12]
}
 8008bce:	0018      	movs	r0, r3
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	b004      	add	sp, #16
 8008bd4:	bd80      	pop	{r7, pc}

08008bd6 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8008bd6:	b580      	push	{r7, lr}
 8008bd8:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8008bda:	f000 fa3d 	bl	8009058 <vTaskStartScheduler>
  
  return osOK;
 8008bde:	2300      	movs	r3, #0
}
 8008be0:	0018      	movs	r0, r3
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}

08008be6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8008be6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008be8:	b087      	sub	sp, #28
 8008bea:	af02      	add	r7, sp, #8
 8008bec:	6078      	str	r0, [r7, #4]
 8008bee:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	685c      	ldr	r4, [r3, #4]
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008bfc:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2208      	movs	r2, #8
 8008c02:	5e9b      	ldrsh	r3, [r3, r2]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8008c04:	0018      	movs	r0, r3
 8008c06:	f7ff ffcd 	bl	8008ba4 <makeFreeRtosPriority>
 8008c0a:	0001      	movs	r1, r0
 8008c0c:	683a      	ldr	r2, [r7, #0]
 8008c0e:	230c      	movs	r3, #12
 8008c10:	18fb      	adds	r3, r7, r3
 8008c12:	9301      	str	r3, [sp, #4]
 8008c14:	9100      	str	r1, [sp, #0]
 8008c16:	0013      	movs	r3, r2
 8008c18:	0032      	movs	r2, r6
 8008c1a:	0029      	movs	r1, r5
 8008c1c:	0020      	movs	r0, r4
 8008c1e:	f000 f8c7 	bl	8008db0 <xTaskCreate>
 8008c22:	0003      	movs	r3, r0
 8008c24:	2b01      	cmp	r3, #1
 8008c26:	d001      	beq.n	8008c2c <osThreadCreate+0x46>
                   &handle) != pdPASS)  {
    return NULL;
 8008c28:	2300      	movs	r3, #0
 8008c2a:	e000      	b.n	8008c2e <osThreadCreate+0x48>
  }     
#endif
  
  return handle;
 8008c2c:	68fb      	ldr	r3, [r7, #12]
}
 8008c2e:	0018      	movs	r0, r3
 8008c30:	46bd      	mov	sp, r7
 8008c32:	b005      	add	sp, #20
 8008c34:	bdf0      	pop	{r4, r5, r6, r7, pc}

08008c36 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8008c36:	b580      	push	{r7, lr}
 8008c38:	b084      	sub	sp, #16
 8008c3a:	af00      	add	r7, sp, #0
 8008c3c:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	2b00      	cmp	r3, #0
 8008c46:	d001      	beq.n	8008c4c <osDelay+0x16>
 8008c48:	68fb      	ldr	r3, [r7, #12]
 8008c4a:	e000      	b.n	8008c4e <osDelay+0x18>
 8008c4c:	2301      	movs	r3, #1
 8008c4e:	0018      	movs	r0, r3
 8008c50:	f000 f9dc 	bl	800900c <vTaskDelay>
  
  return osOK;
 8008c54:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008c56:	0018      	movs	r0, r3
 8008c58:	46bd      	mov	sp, r7
 8008c5a:	b004      	add	sp, #16
 8008c5c:	bd80      	pop	{r7, pc}

08008c5e <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c5e:	b580      	push	{r7, lr}
 8008c60:	b082      	sub	sp, #8
 8008c62:	af00      	add	r7, sp, #0
 8008c64:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	3308      	adds	r3, #8
 8008c6a:	001a      	movs	r2, r3
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	2201      	movs	r2, #1
 8008c74:	4252      	negs	r2, r2
 8008c76:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	3308      	adds	r3, #8
 8008c7c:	001a      	movs	r2, r3
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	3308      	adds	r3, #8
 8008c86:	001a      	movs	r2, r3
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	2200      	movs	r2, #0
 8008c90:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008c92:	46c0      	nop			; (mov r8, r8)
 8008c94:	46bd      	mov	sp, r7
 8008c96:	b002      	add	sp, #8
 8008c98:	bd80      	pop	{r7, pc}

08008c9a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008c9a:	b580      	push	{r7, lr}
 8008c9c:	b082      	sub	sp, #8
 8008c9e:	af00      	add	r7, sp, #0
 8008ca0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	2200      	movs	r2, #0
 8008ca6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008ca8:	46c0      	nop			; (mov r8, r8)
 8008caa:	46bd      	mov	sp, r7
 8008cac:	b002      	add	sp, #8
 8008cae:	bd80      	pop	{r7, pc}

08008cb0 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
 8008cb8:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cba:	687b      	ldr	r3, [r7, #4]
 8008cbc:	685b      	ldr	r3, [r3, #4]
 8008cbe:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cc0:	683b      	ldr	r3, [r7, #0]
 8008cc2:	68fa      	ldr	r2, [r7, #12]
 8008cc4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	689a      	ldr	r2, [r3, #8]
 8008cca:	683b      	ldr	r3, [r7, #0]
 8008ccc:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	683a      	ldr	r2, [r7, #0]
 8008cd4:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	683a      	ldr	r2, [r7, #0]
 8008cda:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	687a      	ldr	r2, [r7, #4]
 8008ce0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	681b      	ldr	r3, [r3, #0]
 8008ce6:	1c5a      	adds	r2, r3, #1
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	601a      	str	r2, [r3, #0]
}
 8008cec:	46c0      	nop			; (mov r8, r8)
 8008cee:	46bd      	mov	sp, r7
 8008cf0:	b004      	add	sp, #16
 8008cf2:	bd80      	pop	{r7, pc}

08008cf4 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cf4:	b580      	push	{r7, lr}
 8008cf6:	b084      	sub	sp, #16
 8008cf8:	af00      	add	r7, sp, #0
 8008cfa:	6078      	str	r0, [r7, #4]
 8008cfc:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008cfe:	683b      	ldr	r3, [r7, #0]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d04:	68bb      	ldr	r3, [r7, #8]
 8008d06:	3301      	adds	r3, #1
 8008d08:	d103      	bne.n	8008d12 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	691b      	ldr	r3, [r3, #16]
 8008d0e:	60fb      	str	r3, [r7, #12]
 8008d10:	e00c      	b.n	8008d2c <vListInsert+0x38>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	3308      	adds	r3, #8
 8008d16:	60fb      	str	r3, [r7, #12]
 8008d18:	e002      	b.n	8008d20 <vListInsert+0x2c>
 8008d1a:	68fb      	ldr	r3, [r7, #12]
 8008d1c:	685b      	ldr	r3, [r3, #4]
 8008d1e:	60fb      	str	r3, [r7, #12]
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	685b      	ldr	r3, [r3, #4]
 8008d24:	681b      	ldr	r3, [r3, #0]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	429a      	cmp	r2, r3
 8008d2a:	d2f6      	bcs.n	8008d1a <vListInsert+0x26>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	685a      	ldr	r2, [r3, #4]
 8008d30:	683b      	ldr	r3, [r7, #0]
 8008d32:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d34:	683b      	ldr	r3, [r7, #0]
 8008d36:	685b      	ldr	r3, [r3, #4]
 8008d38:	683a      	ldr	r2, [r7, #0]
 8008d3a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d3c:	683b      	ldr	r3, [r7, #0]
 8008d3e:	68fa      	ldr	r2, [r7, #12]
 8008d40:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	683a      	ldr	r2, [r7, #0]
 8008d46:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d48:	683b      	ldr	r3, [r7, #0]
 8008d4a:	687a      	ldr	r2, [r7, #4]
 8008d4c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	681b      	ldr	r3, [r3, #0]
 8008d52:	1c5a      	adds	r2, r3, #1
 8008d54:	687b      	ldr	r3, [r7, #4]
 8008d56:	601a      	str	r2, [r3, #0]
}
 8008d58:	46c0      	nop			; (mov r8, r8)
 8008d5a:	46bd      	mov	sp, r7
 8008d5c:	b004      	add	sp, #16
 8008d5e:	bd80      	pop	{r7, pc}

08008d60 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b084      	sub	sp, #16
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	691b      	ldr	r3, [r3, #16]
 8008d6c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	685b      	ldr	r3, [r3, #4]
 8008d72:	687a      	ldr	r2, [r7, #4]
 8008d74:	6892      	ldr	r2, [r2, #8]
 8008d76:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	689b      	ldr	r3, [r3, #8]
 8008d7c:	687a      	ldr	r2, [r7, #4]
 8008d7e:	6852      	ldr	r2, [r2, #4]
 8008d80:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	687a      	ldr	r2, [r7, #4]
 8008d88:	429a      	cmp	r2, r3
 8008d8a:	d103      	bne.n	8008d94 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	689a      	ldr	r2, [r3, #8]
 8008d90:	68fb      	ldr	r3, [r7, #12]
 8008d92:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2200      	movs	r2, #0
 8008d98:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	681b      	ldr	r3, [r3, #0]
 8008d9e:	1e5a      	subs	r2, r3, #1
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008da4:	68fb      	ldr	r3, [r7, #12]
 8008da6:	681b      	ldr	r3, [r3, #0]
}
 8008da8:	0018      	movs	r0, r3
 8008daa:	46bd      	mov	sp, r7
 8008dac:	b004      	add	sp, #16
 8008dae:	bd80      	pop	{r7, pc}

08008db0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008db0:	b590      	push	{r4, r7, lr}
 8008db2:	b08d      	sub	sp, #52	; 0x34
 8008db4:	af04      	add	r7, sp, #16
 8008db6:	60f8      	str	r0, [r7, #12]
 8008db8:	60b9      	str	r1, [r7, #8]
 8008dba:	603b      	str	r3, [r7, #0]
 8008dbc:	1dbb      	adds	r3, r7, #6
 8008dbe:	801a      	strh	r2, [r3, #0]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008dc0:	1dbb      	adds	r3, r7, #6
 8008dc2:	881b      	ldrh	r3, [r3, #0]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	0018      	movs	r0, r3
 8008dc8:	f000 fe0a 	bl	80099e0 <pvPortMalloc>
 8008dcc:	0003      	movs	r3, r0
 8008dce:	617b      	str	r3, [r7, #20]

			if( pxStack != NULL )
 8008dd0:	697b      	ldr	r3, [r7, #20]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d010      	beq.n	8008df8 <xTaskCreate+0x48>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8008dd6:	2054      	movs	r0, #84	; 0x54
 8008dd8:	f000 fe02 	bl	80099e0 <pvPortMalloc>
 8008ddc:	0003      	movs	r3, r0
 8008dde:	61fb      	str	r3, [r7, #28]

				if( pxNewTCB != NULL )
 8008de0:	69fb      	ldr	r3, [r7, #28]
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d003      	beq.n	8008dee <xTaskCreate+0x3e>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8008de6:	69fb      	ldr	r3, [r7, #28]
 8008de8:	697a      	ldr	r2, [r7, #20]
 8008dea:	631a      	str	r2, [r3, #48]	; 0x30
 8008dec:	e006      	b.n	8008dfc <xTaskCreate+0x4c>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8008dee:	697b      	ldr	r3, [r7, #20]
 8008df0:	0018      	movs	r0, r3
 8008df2:	f000 fea1 	bl	8009b38 <vPortFree>
 8008df6:	e001      	b.n	8008dfc <xTaskCreate+0x4c>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8008df8:	2300      	movs	r3, #0
 8008dfa:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8008dfc:	69fb      	ldr	r3, [r7, #28]
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	d016      	beq.n	8008e30 <xTaskCreate+0x80>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8008e02:	1dbb      	adds	r3, r7, #6
 8008e04:	881a      	ldrh	r2, [r3, #0]
 8008e06:	683c      	ldr	r4, [r7, #0]
 8008e08:	68b9      	ldr	r1, [r7, #8]
 8008e0a:	68f8      	ldr	r0, [r7, #12]
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	9303      	str	r3, [sp, #12]
 8008e10:	69fb      	ldr	r3, [r7, #28]
 8008e12:	9302      	str	r3, [sp, #8]
 8008e14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e16:	9301      	str	r3, [sp, #4]
 8008e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1a:	9300      	str	r3, [sp, #0]
 8008e1c:	0023      	movs	r3, r4
 8008e1e:	f000 f80f 	bl	8008e40 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008e22:	69fb      	ldr	r3, [r7, #28]
 8008e24:	0018      	movs	r0, r3
 8008e26:	f000 f88d 	bl	8008f44 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8008e2a:	2301      	movs	r3, #1
 8008e2c:	61bb      	str	r3, [r7, #24]
 8008e2e:	e002      	b.n	8008e36 <xTaskCreate+0x86>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8008e30:	2301      	movs	r3, #1
 8008e32:	425b      	negs	r3, r3
 8008e34:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008e36:	69bb      	ldr	r3, [r7, #24]
	}
 8008e38:	0018      	movs	r0, r3
 8008e3a:	46bd      	mov	sp, r7
 8008e3c:	b009      	add	sp, #36	; 0x24
 8008e3e:	bd90      	pop	{r4, r7, pc}

08008e40 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8008e40:	b580      	push	{r7, lr}
 8008e42:	b086      	sub	sp, #24
 8008e44:	af00      	add	r7, sp, #0
 8008e46:	60f8      	str	r0, [r7, #12]
 8008e48:	60b9      	str	r1, [r7, #8]
 8008e4a:	607a      	str	r2, [r7, #4]
 8008e4c:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	493a      	ldr	r1, [pc, #232]	; (8008f40 <prvInitialiseNewTask+0x100>)
 8008e56:	468c      	mov	ip, r1
 8008e58:	4463      	add	r3, ip
 8008e5a:	009b      	lsls	r3, r3, #2
 8008e5c:	18d3      	adds	r3, r2, r3
 8008e5e:	613b      	str	r3, [r7, #16]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8008e60:	693b      	ldr	r3, [r7, #16]
 8008e62:	2207      	movs	r2, #7
 8008e64:	4393      	bics	r3, r2
 8008e66:	613b      	str	r3, [r7, #16]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008e68:	693b      	ldr	r3, [r7, #16]
 8008e6a:	2207      	movs	r2, #7
 8008e6c:	4013      	ands	r3, r2
 8008e6e:	d001      	beq.n	8008e74 <prvInitialiseNewTask+0x34>
 8008e70:	b672      	cpsid	i
 8008e72:	e7fe      	b.n	8008e72 <prvInitialiseNewTask+0x32>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008e74:	68bb      	ldr	r3, [r7, #8]
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d020      	beq.n	8008ebc <prvInitialiseNewTask+0x7c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008e7a:	2300      	movs	r3, #0
 8008e7c:	617b      	str	r3, [r7, #20]
 8008e7e:	e013      	b.n	8008ea8 <prvInitialiseNewTask+0x68>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008e80:	68ba      	ldr	r2, [r7, #8]
 8008e82:	697b      	ldr	r3, [r7, #20]
 8008e84:	18d3      	adds	r3, r2, r3
 8008e86:	7818      	ldrb	r0, [r3, #0]
 8008e88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008e8a:	2134      	movs	r1, #52	; 0x34
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	18d3      	adds	r3, r2, r3
 8008e90:	185b      	adds	r3, r3, r1
 8008e92:	1c02      	adds	r2, r0, #0
 8008e94:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008e96:	68ba      	ldr	r2, [r7, #8]
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	18d3      	adds	r3, r2, r3
 8008e9c:	781b      	ldrb	r3, [r3, #0]
 8008e9e:	2b00      	cmp	r3, #0
 8008ea0:	d006      	beq.n	8008eb0 <prvInitialiseNewTask+0x70>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008ea2:	697b      	ldr	r3, [r7, #20]
 8008ea4:	3301      	adds	r3, #1
 8008ea6:	617b      	str	r3, [r7, #20]
 8008ea8:	697b      	ldr	r3, [r7, #20]
 8008eaa:	2b0f      	cmp	r3, #15
 8008eac:	d9e8      	bls.n	8008e80 <prvInitialiseNewTask+0x40>
 8008eae:	e000      	b.n	8008eb2 <prvInitialiseNewTask+0x72>
			{
				break;
 8008eb0:	46c0      	nop			; (mov r8, r8)
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eb4:	2243      	movs	r2, #67	; 0x43
 8008eb6:	2100      	movs	r1, #0
 8008eb8:	5499      	strb	r1, [r3, r2]
 8008eba:	e003      	b.n	8008ec4 <prvInitialiseNewTask+0x84>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8008ebc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ebe:	2234      	movs	r2, #52	; 0x34
 8008ec0:	2100      	movs	r1, #0
 8008ec2:	5499      	strb	r1, [r3, r2]
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8008ec4:	6a3b      	ldr	r3, [r7, #32]
 8008ec6:	2b06      	cmp	r3, #6
 8008ec8:	d901      	bls.n	8008ece <prvInitialiseNewTask+0x8e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8008eca:	2306      	movs	r3, #6
 8008ecc:	623b      	str	r3, [r7, #32]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8008ece:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed0:	6a3a      	ldr	r2, [r7, #32]
 8008ed2:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8008ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ed6:	6a3a      	ldr	r2, [r7, #32]
 8008ed8:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8008eda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008edc:	2200      	movs	r2, #0
 8008ede:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8008ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ee2:	3304      	adds	r3, #4
 8008ee4:	0018      	movs	r0, r3
 8008ee6:	f7ff fed8 	bl	8008c9a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8008eea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eec:	3318      	adds	r3, #24
 8008eee:	0018      	movs	r0, r3
 8008ef0:	f7ff fed3 	bl	8008c9a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8008ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ef6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008ef8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008efa:	6a3b      	ldr	r3, [r7, #32]
 8008efc:	2207      	movs	r2, #7
 8008efe:	1ad2      	subs	r2, r2, r3
 8008f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f02:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8008f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f06:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f08:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8008f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8008f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f12:	2250      	movs	r2, #80	; 0x50
 8008f14:	2100      	movs	r1, #0
 8008f16:	5499      	strb	r1, [r3, r2]
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8008f18:	683a      	ldr	r2, [r7, #0]
 8008f1a:	68f9      	ldr	r1, [r7, #12]
 8008f1c:	693b      	ldr	r3, [r7, #16]
 8008f1e:	0018      	movs	r0, r3
 8008f20:	f000 fc2a 	bl	8009778 <pxPortInitialiseStack>
 8008f24:	0002      	movs	r2, r0
 8008f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008f28:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d002      	beq.n	8008f36 <prvInitialiseNewTask+0xf6>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8008f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f32:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8008f34:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008f36:	46c0      	nop			; (mov r8, r8)
 8008f38:	46bd      	mov	sp, r7
 8008f3a:	b006      	add	sp, #24
 8008f3c:	bd80      	pop	{r7, pc}
 8008f3e:	46c0      	nop			; (mov r8, r8)
 8008f40:	3fffffff 	.word	0x3fffffff

08008f44 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8008f44:	b580      	push	{r7, lr}
 8008f46:	b082      	sub	sp, #8
 8008f48:	af00      	add	r7, sp, #0
 8008f4a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008f4c:	f000 fcb0 	bl	80098b0 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008f50:	4b28      	ldr	r3, [pc, #160]	; (8008ff4 <prvAddNewTaskToReadyList+0xb0>)
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	1c5a      	adds	r2, r3, #1
 8008f56:	4b27      	ldr	r3, [pc, #156]	; (8008ff4 <prvAddNewTaskToReadyList+0xb0>)
 8008f58:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 8008f5a:	4b27      	ldr	r3, [pc, #156]	; (8008ff8 <prvAddNewTaskToReadyList+0xb4>)
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	2b00      	cmp	r3, #0
 8008f60:	d109      	bne.n	8008f76 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8008f62:	4b25      	ldr	r3, [pc, #148]	; (8008ff8 <prvAddNewTaskToReadyList+0xb4>)
 8008f64:	687a      	ldr	r2, [r7, #4]
 8008f66:	601a      	str	r2, [r3, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008f68:	4b22      	ldr	r3, [pc, #136]	; (8008ff4 <prvAddNewTaskToReadyList+0xb0>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	2b01      	cmp	r3, #1
 8008f6e:	d110      	bne.n	8008f92 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008f70:	f000 fa52 	bl	8009418 <prvInitialiseTaskLists>
 8008f74:	e00d      	b.n	8008f92 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8008f76:	4b21      	ldr	r3, [pc, #132]	; (8008ffc <prvAddNewTaskToReadyList+0xb8>)
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d109      	bne.n	8008f92 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008f7e:	4b1e      	ldr	r3, [pc, #120]	; (8008ff8 <prvAddNewTaskToReadyList+0xb4>)
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008f88:	429a      	cmp	r2, r3
 8008f8a:	d802      	bhi.n	8008f92 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008f8c:	4b1a      	ldr	r3, [pc, #104]	; (8008ff8 <prvAddNewTaskToReadyList+0xb4>)
 8008f8e:	687a      	ldr	r2, [r7, #4]
 8008f90:	601a      	str	r2, [r3, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8008f92:	4b1b      	ldr	r3, [pc, #108]	; (8009000 <prvAddNewTaskToReadyList+0xbc>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	4b19      	ldr	r3, [pc, #100]	; (8009000 <prvAddNewTaskToReadyList+0xbc>)
 8008f9a:	601a      	str	r2, [r3, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fa0:	4b18      	ldr	r3, [pc, #96]	; (8009004 <prvAddNewTaskToReadyList+0xc0>)
 8008fa2:	681b      	ldr	r3, [r3, #0]
 8008fa4:	429a      	cmp	r2, r3
 8008fa6:	d903      	bls.n	8008fb0 <prvAddNewTaskToReadyList+0x6c>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fac:	4b15      	ldr	r3, [pc, #84]	; (8009004 <prvAddNewTaskToReadyList+0xc0>)
 8008fae:	601a      	str	r2, [r3, #0]
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fb4:	0013      	movs	r3, r2
 8008fb6:	009b      	lsls	r3, r3, #2
 8008fb8:	189b      	adds	r3, r3, r2
 8008fba:	009b      	lsls	r3, r3, #2
 8008fbc:	4a12      	ldr	r2, [pc, #72]	; (8009008 <prvAddNewTaskToReadyList+0xc4>)
 8008fbe:	189a      	adds	r2, r3, r2
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	3304      	adds	r3, #4
 8008fc4:	0019      	movs	r1, r3
 8008fc6:	0010      	movs	r0, r2
 8008fc8:	f7ff fe72 	bl	8008cb0 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8008fcc:	f000 fc82 	bl	80098d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8008fd0:	4b0a      	ldr	r3, [pc, #40]	; (8008ffc <prvAddNewTaskToReadyList+0xb8>)
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	2b00      	cmp	r3, #0
 8008fd6:	d008      	beq.n	8008fea <prvAddNewTaskToReadyList+0xa6>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8008fd8:	4b07      	ldr	r3, [pc, #28]	; (8008ff8 <prvAddNewTaskToReadyList+0xb4>)
 8008fda:	681b      	ldr	r3, [r3, #0]
 8008fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d201      	bcs.n	8008fea <prvAddNewTaskToReadyList+0xa6>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8008fe6:	f000 fc53 	bl	8009890 <vPortYield>
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008fea:	46c0      	nop			; (mov r8, r8)
 8008fec:	46bd      	mov	sp, r7
 8008fee:	b002      	add	sp, #8
 8008ff0:	bd80      	pop	{r7, pc}
 8008ff2:	46c0      	nop			; (mov r8, r8)
 8008ff4:	200007b0 	.word	0x200007b0
 8008ff8:	200006b0 	.word	0x200006b0
 8008ffc:	200007bc 	.word	0x200007bc
 8009000:	200007cc 	.word	0x200007cc
 8009004:	200007b8 	.word	0x200007b8
 8009008:	200006b4 	.word	0x200006b4

0800900c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800900c:	b580      	push	{r7, lr}
 800900e:	b084      	sub	sp, #16
 8009010:	af00      	add	r7, sp, #0
 8009012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d010      	beq.n	8009040 <vTaskDelay+0x34>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800901e:	4b0d      	ldr	r3, [pc, #52]	; (8009054 <vTaskDelay+0x48>)
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	2b00      	cmp	r3, #0
 8009024:	d001      	beq.n	800902a <vTaskDelay+0x1e>
 8009026:	b672      	cpsid	i
 8009028:	e7fe      	b.n	8009028 <vTaskDelay+0x1c>
			vTaskSuspendAll();
 800902a:	f000 f84b 	bl	80090c4 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2100      	movs	r1, #0
 8009032:	0018      	movs	r0, r3
 8009034:	f000 fb4c 	bl	80096d0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009038:	f000 f850 	bl	80090dc <xTaskResumeAll>
 800903c:	0003      	movs	r3, r0
 800903e:	60fb      	str	r3, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d101      	bne.n	800904a <vTaskDelay+0x3e>
		{
			portYIELD_WITHIN_API();
 8009046:	f000 fc23 	bl	8009890 <vPortYield>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800904a:	46c0      	nop			; (mov r8, r8)
 800904c:	46bd      	mov	sp, r7
 800904e:	b004      	add	sp, #16
 8009050:	bd80      	pop	{r7, pc}
 8009052:	46c0      	nop			; (mov r8, r8)
 8009054:	200007d8 	.word	0x200007d8

08009058 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b084      	sub	sp, #16
 800905c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 800905e:	4913      	ldr	r1, [pc, #76]	; (80090ac <vTaskStartScheduler+0x54>)
 8009060:	4813      	ldr	r0, [pc, #76]	; (80090b0 <vTaskStartScheduler+0x58>)
 8009062:	4b14      	ldr	r3, [pc, #80]	; (80090b4 <vTaskStartScheduler+0x5c>)
 8009064:	9301      	str	r3, [sp, #4]
 8009066:	2300      	movs	r3, #0
 8009068:	9300      	str	r3, [sp, #0]
 800906a:	2300      	movs	r3, #0
 800906c:	2280      	movs	r2, #128	; 0x80
 800906e:	f7ff fe9f 	bl	8008db0 <xTaskCreate>
 8009072:	0003      	movs	r3, r0
 8009074:	607b      	str	r3, [r7, #4]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	2b01      	cmp	r3, #1
 800907a:	d10d      	bne.n	8009098 <vTaskStartScheduler+0x40>
		/* Interrupts are turned off here, to ensure a tick does not occur
		before or during the call to xPortStartScheduler().  The stacks of
		the created tasks contain a status word with interrupts switched on
		so interrupts will automatically get re-enabled when the first task
		starts to run. */
		portDISABLE_INTERRUPTS();
 800907c:	b672      	cpsid	i
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800907e:	4b0e      	ldr	r3, [pc, #56]	; (80090b8 <vTaskStartScheduler+0x60>)
 8009080:	2201      	movs	r2, #1
 8009082:	4252      	negs	r2, r2
 8009084:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009086:	4b0d      	ldr	r3, [pc, #52]	; (80090bc <vTaskStartScheduler+0x64>)
 8009088:	2201      	movs	r2, #1
 800908a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800908c:	4b0c      	ldr	r3, [pc, #48]	; (80090c0 <vTaskStartScheduler+0x68>)
 800908e:	2200      	movs	r2, #0
 8009090:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009092:	f000 fbd9 	bl	8009848 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009096:	e004      	b.n	80090a2 <vTaskStartScheduler+0x4a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	3301      	adds	r3, #1
 800909c:	d101      	bne.n	80090a2 <vTaskStartScheduler+0x4a>
 800909e:	b672      	cpsid	i
 80090a0:	e7fe      	b.n	80090a0 <vTaskStartScheduler+0x48>
}
 80090a2:	46c0      	nop			; (mov r8, r8)
 80090a4:	46bd      	mov	sp, r7
 80090a6:	b002      	add	sp, #8
 80090a8:	bd80      	pop	{r7, pc}
 80090aa:	46c0      	nop			; (mov r8, r8)
 80090ac:	0800d640 	.word	0x0800d640
 80090b0:	080093f9 	.word	0x080093f9
 80090b4:	200007d4 	.word	0x200007d4
 80090b8:	200007d0 	.word	0x200007d0
 80090bc:	200007bc 	.word	0x200007bc
 80090c0:	200007b4 	.word	0x200007b4

080090c4 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80090c4:	b580      	push	{r7, lr}
 80090c6:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80090c8:	4b03      	ldr	r3, [pc, #12]	; (80090d8 <vTaskSuspendAll+0x14>)
 80090ca:	681b      	ldr	r3, [r3, #0]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	4b02      	ldr	r3, [pc, #8]	; (80090d8 <vTaskSuspendAll+0x14>)
 80090d0:	601a      	str	r2, [r3, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80090d2:	46c0      	nop			; (mov r8, r8)
 80090d4:	46bd      	mov	sp, r7
 80090d6:	bd80      	pop	{r7, pc}
 80090d8:	200007d8 	.word	0x200007d8

080090dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80090dc:	b580      	push	{r7, lr}
 80090de:	b084      	sub	sp, #16
 80090e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80090e2:	2300      	movs	r3, #0
 80090e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80090e6:	2300      	movs	r3, #0
 80090e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80090ea:	4b3a      	ldr	r3, [pc, #232]	; (80091d4 <xTaskResumeAll+0xf8>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d101      	bne.n	80090f6 <xTaskResumeAll+0x1a>
 80090f2:	b672      	cpsid	i
 80090f4:	e7fe      	b.n	80090f4 <xTaskResumeAll+0x18>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80090f6:	f000 fbdb 	bl	80098b0 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80090fa:	4b36      	ldr	r3, [pc, #216]	; (80091d4 <xTaskResumeAll+0xf8>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	1e5a      	subs	r2, r3, #1
 8009100:	4b34      	ldr	r3, [pc, #208]	; (80091d4 <xTaskResumeAll+0xf8>)
 8009102:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009104:	4b33      	ldr	r3, [pc, #204]	; (80091d4 <xTaskResumeAll+0xf8>)
 8009106:	681b      	ldr	r3, [r3, #0]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d15b      	bne.n	80091c4 <xTaskResumeAll+0xe8>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800910c:	4b32      	ldr	r3, [pc, #200]	; (80091d8 <xTaskResumeAll+0xfc>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d057      	beq.n	80091c4 <xTaskResumeAll+0xe8>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009114:	e02f      	b.n	8009176 <xTaskResumeAll+0x9a>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009116:	4b31      	ldr	r3, [pc, #196]	; (80091dc <xTaskResumeAll+0x100>)
 8009118:	68db      	ldr	r3, [r3, #12]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800911e:	68fb      	ldr	r3, [r7, #12]
 8009120:	3318      	adds	r3, #24
 8009122:	0018      	movs	r0, r3
 8009124:	f7ff fe1c 	bl	8008d60 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009128:	68fb      	ldr	r3, [r7, #12]
 800912a:	3304      	adds	r3, #4
 800912c:	0018      	movs	r0, r3
 800912e:	f7ff fe17 	bl	8008d60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009132:	68fb      	ldr	r3, [r7, #12]
 8009134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009136:	4b2a      	ldr	r3, [pc, #168]	; (80091e0 <xTaskResumeAll+0x104>)
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	429a      	cmp	r2, r3
 800913c:	d903      	bls.n	8009146 <xTaskResumeAll+0x6a>
 800913e:	68fb      	ldr	r3, [r7, #12]
 8009140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009142:	4b27      	ldr	r3, [pc, #156]	; (80091e0 <xTaskResumeAll+0x104>)
 8009144:	601a      	str	r2, [r3, #0]
 8009146:	68fb      	ldr	r3, [r7, #12]
 8009148:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800914a:	0013      	movs	r3, r2
 800914c:	009b      	lsls	r3, r3, #2
 800914e:	189b      	adds	r3, r3, r2
 8009150:	009b      	lsls	r3, r3, #2
 8009152:	4a24      	ldr	r2, [pc, #144]	; (80091e4 <xTaskResumeAll+0x108>)
 8009154:	189a      	adds	r2, r3, r2
 8009156:	68fb      	ldr	r3, [r7, #12]
 8009158:	3304      	adds	r3, #4
 800915a:	0019      	movs	r1, r3
 800915c:	0010      	movs	r0, r2
 800915e:	f7ff fda7 	bl	8008cb0 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009162:	68fb      	ldr	r3, [r7, #12]
 8009164:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009166:	4b20      	ldr	r3, [pc, #128]	; (80091e8 <xTaskResumeAll+0x10c>)
 8009168:	681b      	ldr	r3, [r3, #0]
 800916a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800916c:	429a      	cmp	r2, r3
 800916e:	d302      	bcc.n	8009176 <xTaskResumeAll+0x9a>
					{
						xYieldPending = pdTRUE;
 8009170:	4b1e      	ldr	r3, [pc, #120]	; (80091ec <xTaskResumeAll+0x110>)
 8009172:	2201      	movs	r2, #1
 8009174:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009176:	4b19      	ldr	r3, [pc, #100]	; (80091dc <xTaskResumeAll+0x100>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	2b00      	cmp	r3, #0
 800917c:	d1cb      	bne.n	8009116 <xTaskResumeAll+0x3a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800917e:	68fb      	ldr	r3, [r7, #12]
 8009180:	2b00      	cmp	r3, #0
 8009182:	d001      	beq.n	8009188 <xTaskResumeAll+0xac>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009184:	f000 f9cc 	bl	8009520 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009188:	4b19      	ldr	r3, [pc, #100]	; (80091f0 <xTaskResumeAll+0x114>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d00f      	beq.n	80091b4 <xTaskResumeAll+0xd8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009194:	f000 f82e 	bl	80091f4 <xTaskIncrementTick>
 8009198:	1e03      	subs	r3, r0, #0
 800919a:	d002      	beq.n	80091a2 <xTaskResumeAll+0xc6>
							{
								xYieldPending = pdTRUE;
 800919c:	4b13      	ldr	r3, [pc, #76]	; (80091ec <xTaskResumeAll+0x110>)
 800919e:	2201      	movs	r2, #1
 80091a0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	3b01      	subs	r3, #1
 80091a6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	2b00      	cmp	r3, #0
 80091ac:	d1f2      	bne.n	8009194 <xTaskResumeAll+0xb8>

						xPendedTicks = 0;
 80091ae:	4b10      	ldr	r3, [pc, #64]	; (80091f0 <xTaskResumeAll+0x114>)
 80091b0:	2200      	movs	r2, #0
 80091b2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80091b4:	4b0d      	ldr	r3, [pc, #52]	; (80091ec <xTaskResumeAll+0x110>)
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d003      	beq.n	80091c4 <xTaskResumeAll+0xe8>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80091bc:	2301      	movs	r3, #1
 80091be:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80091c0:	f000 fb66 	bl	8009890 <vPortYield>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80091c4:	f000 fb86 	bl	80098d4 <vPortExitCritical>

	return xAlreadyYielded;
 80091c8:	68bb      	ldr	r3, [r7, #8]
}
 80091ca:	0018      	movs	r0, r3
 80091cc:	46bd      	mov	sp, r7
 80091ce:	b004      	add	sp, #16
 80091d0:	bd80      	pop	{r7, pc}
 80091d2:	46c0      	nop			; (mov r8, r8)
 80091d4:	200007d8 	.word	0x200007d8
 80091d8:	200007b0 	.word	0x200007b0
 80091dc:	20000770 	.word	0x20000770
 80091e0:	200007b8 	.word	0x200007b8
 80091e4:	200006b4 	.word	0x200006b4
 80091e8:	200006b0 	.word	0x200006b0
 80091ec:	200007c4 	.word	0x200007c4
 80091f0:	200007c0 	.word	0x200007c0

080091f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80091f4:	b580      	push	{r7, lr}
 80091f6:	b086      	sub	sp, #24
 80091f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80091fa:	2300      	movs	r3, #0
 80091fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80091fe:	4b4a      	ldr	r3, [pc, #296]	; (8009328 <xTaskIncrementTick+0x134>)
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d000      	beq.n	8009208 <xTaskIncrementTick+0x14>
 8009206:	e084      	b.n	8009312 <xTaskIncrementTick+0x11e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009208:	4b48      	ldr	r3, [pc, #288]	; (800932c <xTaskIncrementTick+0x138>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	3301      	adds	r3, #1
 800920e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009210:	4b46      	ldr	r3, [pc, #280]	; (800932c <xTaskIncrementTick+0x138>)
 8009212:	693a      	ldr	r2, [r7, #16]
 8009214:	601a      	str	r2, [r3, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009216:	693b      	ldr	r3, [r7, #16]
 8009218:	2b00      	cmp	r3, #0
 800921a:	d117      	bne.n	800924c <xTaskIncrementTick+0x58>
		{
			taskSWITCH_DELAYED_LISTS();
 800921c:	4b44      	ldr	r3, [pc, #272]	; (8009330 <xTaskIncrementTick+0x13c>)
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	2b00      	cmp	r3, #0
 8009224:	d001      	beq.n	800922a <xTaskIncrementTick+0x36>
 8009226:	b672      	cpsid	i
 8009228:	e7fe      	b.n	8009228 <xTaskIncrementTick+0x34>
 800922a:	4b41      	ldr	r3, [pc, #260]	; (8009330 <xTaskIncrementTick+0x13c>)
 800922c:	681b      	ldr	r3, [r3, #0]
 800922e:	60fb      	str	r3, [r7, #12]
 8009230:	4b40      	ldr	r3, [pc, #256]	; (8009334 <xTaskIncrementTick+0x140>)
 8009232:	681a      	ldr	r2, [r3, #0]
 8009234:	4b3e      	ldr	r3, [pc, #248]	; (8009330 <xTaskIncrementTick+0x13c>)
 8009236:	601a      	str	r2, [r3, #0]
 8009238:	4b3e      	ldr	r3, [pc, #248]	; (8009334 <xTaskIncrementTick+0x140>)
 800923a:	68fa      	ldr	r2, [r7, #12]
 800923c:	601a      	str	r2, [r3, #0]
 800923e:	4b3e      	ldr	r3, [pc, #248]	; (8009338 <xTaskIncrementTick+0x144>)
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	1c5a      	adds	r2, r3, #1
 8009244:	4b3c      	ldr	r3, [pc, #240]	; (8009338 <xTaskIncrementTick+0x144>)
 8009246:	601a      	str	r2, [r3, #0]
 8009248:	f000 f96a 	bl	8009520 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800924c:	4b3b      	ldr	r3, [pc, #236]	; (800933c <xTaskIncrementTick+0x148>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	693a      	ldr	r2, [r7, #16]
 8009252:	429a      	cmp	r2, r3
 8009254:	d349      	bcc.n	80092ea <xTaskIncrementTick+0xf6>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009256:	4b36      	ldr	r3, [pc, #216]	; (8009330 <xTaskIncrementTick+0x13c>)
 8009258:	681b      	ldr	r3, [r3, #0]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	2b00      	cmp	r3, #0
 800925e:	d104      	bne.n	800926a <xTaskIncrementTick+0x76>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009260:	4b36      	ldr	r3, [pc, #216]	; (800933c <xTaskIncrementTick+0x148>)
 8009262:	2201      	movs	r2, #1
 8009264:	4252      	negs	r2, r2
 8009266:	601a      	str	r2, [r3, #0]
					break;
 8009268:	e03f      	b.n	80092ea <xTaskIncrementTick+0xf6>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800926a:	4b31      	ldr	r3, [pc, #196]	; (8009330 <xTaskIncrementTick+0x13c>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	68db      	ldr	r3, [r3, #12]
 8009272:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009274:	68bb      	ldr	r3, [r7, #8]
 8009276:	685b      	ldr	r3, [r3, #4]
 8009278:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800927a:	693a      	ldr	r2, [r7, #16]
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	429a      	cmp	r2, r3
 8009280:	d203      	bcs.n	800928a <xTaskIncrementTick+0x96>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009282:	4b2e      	ldr	r3, [pc, #184]	; (800933c <xTaskIncrementTick+0x148>)
 8009284:	687a      	ldr	r2, [r7, #4]
 8009286:	601a      	str	r2, [r3, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009288:	e02f      	b.n	80092ea <xTaskIncrementTick+0xf6>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800928a:	68bb      	ldr	r3, [r7, #8]
 800928c:	3304      	adds	r3, #4
 800928e:	0018      	movs	r0, r3
 8009290:	f7ff fd66 	bl	8008d60 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009298:	2b00      	cmp	r3, #0
 800929a:	d004      	beq.n	80092a6 <xTaskIncrementTick+0xb2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	3318      	adds	r3, #24
 80092a0:	0018      	movs	r0, r3
 80092a2:	f7ff fd5d 	bl	8008d60 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80092a6:	68bb      	ldr	r3, [r7, #8]
 80092a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092aa:	4b25      	ldr	r3, [pc, #148]	; (8009340 <xTaskIncrementTick+0x14c>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	429a      	cmp	r2, r3
 80092b0:	d903      	bls.n	80092ba <xTaskIncrementTick+0xc6>
 80092b2:	68bb      	ldr	r3, [r7, #8]
 80092b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092b6:	4b22      	ldr	r3, [pc, #136]	; (8009340 <xTaskIncrementTick+0x14c>)
 80092b8:	601a      	str	r2, [r3, #0]
 80092ba:	68bb      	ldr	r3, [r7, #8]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	0013      	movs	r3, r2
 80092c0:	009b      	lsls	r3, r3, #2
 80092c2:	189b      	adds	r3, r3, r2
 80092c4:	009b      	lsls	r3, r3, #2
 80092c6:	4a1f      	ldr	r2, [pc, #124]	; (8009344 <xTaskIncrementTick+0x150>)
 80092c8:	189a      	adds	r2, r3, r2
 80092ca:	68bb      	ldr	r3, [r7, #8]
 80092cc:	3304      	adds	r3, #4
 80092ce:	0019      	movs	r1, r3
 80092d0:	0010      	movs	r0, r2
 80092d2:	f7ff fced 	bl	8008cb0 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092da:	4b1b      	ldr	r3, [pc, #108]	; (8009348 <xTaskIncrementTick+0x154>)
 80092dc:	681b      	ldr	r3, [r3, #0]
 80092de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80092e0:	429a      	cmp	r2, r3
 80092e2:	d3b8      	bcc.n	8009256 <xTaskIncrementTick+0x62>
						{
							xSwitchRequired = pdTRUE;
 80092e4:	2301      	movs	r3, #1
 80092e6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80092e8:	e7b5      	b.n	8009256 <xTaskIncrementTick+0x62>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80092ea:	4b17      	ldr	r3, [pc, #92]	; (8009348 <xTaskIncrementTick+0x154>)
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092f0:	4914      	ldr	r1, [pc, #80]	; (8009344 <xTaskIncrementTick+0x150>)
 80092f2:	0013      	movs	r3, r2
 80092f4:	009b      	lsls	r3, r3, #2
 80092f6:	189b      	adds	r3, r3, r2
 80092f8:	009b      	lsls	r3, r3, #2
 80092fa:	585b      	ldr	r3, [r3, r1]
 80092fc:	2b01      	cmp	r3, #1
 80092fe:	d901      	bls.n	8009304 <xTaskIncrementTick+0x110>
			{
				xSwitchRequired = pdTRUE;
 8009300:	2301      	movs	r3, #1
 8009302:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009304:	4b11      	ldr	r3, [pc, #68]	; (800934c <xTaskIncrementTick+0x158>)
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	2b00      	cmp	r3, #0
 800930a:	d007      	beq.n	800931c <xTaskIncrementTick+0x128>
			{
				xSwitchRequired = pdTRUE;
 800930c:	2301      	movs	r3, #1
 800930e:	617b      	str	r3, [r7, #20]
 8009310:	e004      	b.n	800931c <xTaskIncrementTick+0x128>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009312:	4b0f      	ldr	r3, [pc, #60]	; (8009350 <xTaskIncrementTick+0x15c>)
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	1c5a      	adds	r2, r3, #1
 8009318:	4b0d      	ldr	r3, [pc, #52]	; (8009350 <xTaskIncrementTick+0x15c>)
 800931a:	601a      	str	r2, [r3, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800931c:	697b      	ldr	r3, [r7, #20]
}
 800931e:	0018      	movs	r0, r3
 8009320:	46bd      	mov	sp, r7
 8009322:	b006      	add	sp, #24
 8009324:	bd80      	pop	{r7, pc}
 8009326:	46c0      	nop			; (mov r8, r8)
 8009328:	200007d8 	.word	0x200007d8
 800932c:	200007b4 	.word	0x200007b4
 8009330:	20000768 	.word	0x20000768
 8009334:	2000076c 	.word	0x2000076c
 8009338:	200007c8 	.word	0x200007c8
 800933c:	200007d0 	.word	0x200007d0
 8009340:	200007b8 	.word	0x200007b8
 8009344:	200006b4 	.word	0x200006b4
 8009348:	200006b0 	.word	0x200006b0
 800934c:	200007c4 	.word	0x200007c4
 8009350:	200007c0 	.word	0x200007c0

08009354 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009354:	b580      	push	{r7, lr}
 8009356:	b082      	sub	sp, #8
 8009358:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800935a:	4b22      	ldr	r3, [pc, #136]	; (80093e4 <vTaskSwitchContext+0x90>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	2b00      	cmp	r3, #0
 8009360:	d003      	beq.n	800936a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009362:	4b21      	ldr	r3, [pc, #132]	; (80093e8 <vTaskSwitchContext+0x94>)
 8009364:	2201      	movs	r2, #1
 8009366:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009368:	e037      	b.n	80093da <vTaskSwitchContext+0x86>
		xYieldPending = pdFALSE;
 800936a:	4b1f      	ldr	r3, [pc, #124]	; (80093e8 <vTaskSwitchContext+0x94>)
 800936c:	2200      	movs	r2, #0
 800936e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009370:	4b1e      	ldr	r3, [pc, #120]	; (80093ec <vTaskSwitchContext+0x98>)
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	607b      	str	r3, [r7, #4]
 8009376:	e007      	b.n	8009388 <vTaskSwitchContext+0x34>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <vTaskSwitchContext+0x2e>
 800937e:	b672      	cpsid	i
 8009380:	e7fe      	b.n	8009380 <vTaskSwitchContext+0x2c>
 8009382:	687b      	ldr	r3, [r7, #4]
 8009384:	3b01      	subs	r3, #1
 8009386:	607b      	str	r3, [r7, #4]
 8009388:	4919      	ldr	r1, [pc, #100]	; (80093f0 <vTaskSwitchContext+0x9c>)
 800938a:	687a      	ldr	r2, [r7, #4]
 800938c:	0013      	movs	r3, r2
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	189b      	adds	r3, r3, r2
 8009392:	009b      	lsls	r3, r3, #2
 8009394:	585b      	ldr	r3, [r3, r1]
 8009396:	2b00      	cmp	r3, #0
 8009398:	d0ee      	beq.n	8009378 <vTaskSwitchContext+0x24>
 800939a:	687a      	ldr	r2, [r7, #4]
 800939c:	0013      	movs	r3, r2
 800939e:	009b      	lsls	r3, r3, #2
 80093a0:	189b      	adds	r3, r3, r2
 80093a2:	009b      	lsls	r3, r3, #2
 80093a4:	4a12      	ldr	r2, [pc, #72]	; (80093f0 <vTaskSwitchContext+0x9c>)
 80093a6:	189b      	adds	r3, r3, r2
 80093a8:	603b      	str	r3, [r7, #0]
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	685b      	ldr	r3, [r3, #4]
 80093ae:	685a      	ldr	r2, [r3, #4]
 80093b0:	683b      	ldr	r3, [r7, #0]
 80093b2:	605a      	str	r2, [r3, #4]
 80093b4:	683b      	ldr	r3, [r7, #0]
 80093b6:	685a      	ldr	r2, [r3, #4]
 80093b8:	683b      	ldr	r3, [r7, #0]
 80093ba:	3308      	adds	r3, #8
 80093bc:	429a      	cmp	r2, r3
 80093be:	d104      	bne.n	80093ca <vTaskSwitchContext+0x76>
 80093c0:	683b      	ldr	r3, [r7, #0]
 80093c2:	685b      	ldr	r3, [r3, #4]
 80093c4:	685a      	ldr	r2, [r3, #4]
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	605a      	str	r2, [r3, #4]
 80093ca:	683b      	ldr	r3, [r7, #0]
 80093cc:	685b      	ldr	r3, [r3, #4]
 80093ce:	68da      	ldr	r2, [r3, #12]
 80093d0:	4b08      	ldr	r3, [pc, #32]	; (80093f4 <vTaskSwitchContext+0xa0>)
 80093d2:	601a      	str	r2, [r3, #0]
 80093d4:	4b05      	ldr	r3, [pc, #20]	; (80093ec <vTaskSwitchContext+0x98>)
 80093d6:	687a      	ldr	r2, [r7, #4]
 80093d8:	601a      	str	r2, [r3, #0]
}
 80093da:	46c0      	nop			; (mov r8, r8)
 80093dc:	46bd      	mov	sp, r7
 80093de:	b002      	add	sp, #8
 80093e0:	bd80      	pop	{r7, pc}
 80093e2:	46c0      	nop			; (mov r8, r8)
 80093e4:	200007d8 	.word	0x200007d8
 80093e8:	200007c4 	.word	0x200007c4
 80093ec:	200007b8 	.word	0x200007b8
 80093f0:	200006b4 	.word	0x200006b4
 80093f4:	200006b0 	.word	0x200006b0

080093f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80093f8:	b580      	push	{r7, lr}
 80093fa:	b082      	sub	sp, #8
 80093fc:	af00      	add	r7, sp, #0
 80093fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009400:	f000 f84e 	bl	80094a0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009404:	4b03      	ldr	r3, [pc, #12]	; (8009414 <prvIdleTask+0x1c>)
 8009406:	681b      	ldr	r3, [r3, #0]
 8009408:	2b01      	cmp	r3, #1
 800940a:	d9f9      	bls.n	8009400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800940c:	f000 fa40 	bl	8009890 <vPortYield>
		prvCheckTasksWaitingTermination();
 8009410:	e7f6      	b.n	8009400 <prvIdleTask+0x8>
 8009412:	46c0      	nop			; (mov r8, r8)
 8009414:	200006b4 	.word	0x200006b4

08009418 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009418:	b580      	push	{r7, lr}
 800941a:	b082      	sub	sp, #8
 800941c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800941e:	2300      	movs	r3, #0
 8009420:	607b      	str	r3, [r7, #4]
 8009422:	e00c      	b.n	800943e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009424:	687a      	ldr	r2, [r7, #4]
 8009426:	0013      	movs	r3, r2
 8009428:	009b      	lsls	r3, r3, #2
 800942a:	189b      	adds	r3, r3, r2
 800942c:	009b      	lsls	r3, r3, #2
 800942e:	4a14      	ldr	r2, [pc, #80]	; (8009480 <prvInitialiseTaskLists+0x68>)
 8009430:	189b      	adds	r3, r3, r2
 8009432:	0018      	movs	r0, r3
 8009434:	f7ff fc13 	bl	8008c5e <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	3301      	adds	r3, #1
 800943c:	607b      	str	r3, [r7, #4]
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	2b06      	cmp	r3, #6
 8009442:	d9ef      	bls.n	8009424 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009444:	4b0f      	ldr	r3, [pc, #60]	; (8009484 <prvInitialiseTaskLists+0x6c>)
 8009446:	0018      	movs	r0, r3
 8009448:	f7ff fc09 	bl	8008c5e <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <prvInitialiseTaskLists+0x70>)
 800944e:	0018      	movs	r0, r3
 8009450:	f7ff fc05 	bl	8008c5e <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009454:	4b0d      	ldr	r3, [pc, #52]	; (800948c <prvInitialiseTaskLists+0x74>)
 8009456:	0018      	movs	r0, r3
 8009458:	f7ff fc01 	bl	8008c5e <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800945c:	4b0c      	ldr	r3, [pc, #48]	; (8009490 <prvInitialiseTaskLists+0x78>)
 800945e:	0018      	movs	r0, r3
 8009460:	f7ff fbfd 	bl	8008c5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009464:	4b0b      	ldr	r3, [pc, #44]	; (8009494 <prvInitialiseTaskLists+0x7c>)
 8009466:	0018      	movs	r0, r3
 8009468:	f7ff fbf9 	bl	8008c5e <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800946c:	4b0a      	ldr	r3, [pc, #40]	; (8009498 <prvInitialiseTaskLists+0x80>)
 800946e:	4a05      	ldr	r2, [pc, #20]	; (8009484 <prvInitialiseTaskLists+0x6c>)
 8009470:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <prvInitialiseTaskLists+0x84>)
 8009474:	4a04      	ldr	r2, [pc, #16]	; (8009488 <prvInitialiseTaskLists+0x70>)
 8009476:	601a      	str	r2, [r3, #0]
}
 8009478:	46c0      	nop			; (mov r8, r8)
 800947a:	46bd      	mov	sp, r7
 800947c:	b002      	add	sp, #8
 800947e:	bd80      	pop	{r7, pc}
 8009480:	200006b4 	.word	0x200006b4
 8009484:	20000740 	.word	0x20000740
 8009488:	20000754 	.word	0x20000754
 800948c:	20000770 	.word	0x20000770
 8009490:	20000784 	.word	0x20000784
 8009494:	2000079c 	.word	0x2000079c
 8009498:	20000768 	.word	0x20000768
 800949c:	2000076c 	.word	0x2000076c

080094a0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80094a0:	b580      	push	{r7, lr}
 80094a2:	b082      	sub	sp, #8
 80094a4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094a6:	e01a      	b.n	80094de <prvCheckTasksWaitingTermination+0x3e>
		{
			taskENTER_CRITICAL();
 80094a8:	f000 fa02 	bl	80098b0 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80094ac:	4b10      	ldr	r3, [pc, #64]	; (80094f0 <prvCheckTasksWaitingTermination+0x50>)
 80094ae:	68db      	ldr	r3, [r3, #12]
 80094b0:	68db      	ldr	r3, [r3, #12]
 80094b2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	3304      	adds	r3, #4
 80094b8:	0018      	movs	r0, r3
 80094ba:	f7ff fc51 	bl	8008d60 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80094be:	4b0d      	ldr	r3, [pc, #52]	; (80094f4 <prvCheckTasksWaitingTermination+0x54>)
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	1e5a      	subs	r2, r3, #1
 80094c4:	4b0b      	ldr	r3, [pc, #44]	; (80094f4 <prvCheckTasksWaitingTermination+0x54>)
 80094c6:	601a      	str	r2, [r3, #0]
				--uxDeletedTasksWaitingCleanUp;
 80094c8:	4b0b      	ldr	r3, [pc, #44]	; (80094f8 <prvCheckTasksWaitingTermination+0x58>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	1e5a      	subs	r2, r3, #1
 80094ce:	4b0a      	ldr	r3, [pc, #40]	; (80094f8 <prvCheckTasksWaitingTermination+0x58>)
 80094d0:	601a      	str	r2, [r3, #0]
			}
			taskEXIT_CRITICAL();
 80094d2:	f000 f9ff 	bl	80098d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	0018      	movs	r0, r3
 80094da:	f000 f80f 	bl	80094fc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80094de:	4b06      	ldr	r3, [pc, #24]	; (80094f8 <prvCheckTasksWaitingTermination+0x58>)
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	2b00      	cmp	r3, #0
 80094e4:	d1e0      	bne.n	80094a8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80094e6:	46c0      	nop			; (mov r8, r8)
 80094e8:	46c0      	nop			; (mov r8, r8)
 80094ea:	46bd      	mov	sp, r7
 80094ec:	b002      	add	sp, #8
 80094ee:	bd80      	pop	{r7, pc}
 80094f0:	20000784 	.word	0x20000784
 80094f4:	200007b0 	.word	0x200007b0
 80094f8:	20000798 	.word	0x20000798

080094fc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b082      	sub	sp, #8
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009508:	0018      	movs	r0, r3
 800950a:	f000 fb15 	bl	8009b38 <vPortFree>
			vPortFree( pxTCB );
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	0018      	movs	r0, r3
 8009512:	f000 fb11 	bl	8009b38 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009516:	46c0      	nop			; (mov r8, r8)
 8009518:	46bd      	mov	sp, r7
 800951a:	b002      	add	sp, #8
 800951c:	bd80      	pop	{r7, pc}
	...

08009520 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b082      	sub	sp, #8
 8009524:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009526:	4b0b      	ldr	r3, [pc, #44]	; (8009554 <prvResetNextTaskUnblockTime+0x34>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681b      	ldr	r3, [r3, #0]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d104      	bne.n	800953a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009530:	4b09      	ldr	r3, [pc, #36]	; (8009558 <prvResetNextTaskUnblockTime+0x38>)
 8009532:	2201      	movs	r2, #1
 8009534:	4252      	negs	r2, r2
 8009536:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009538:	e008      	b.n	800954c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800953a:	4b06      	ldr	r3, [pc, #24]	; (8009554 <prvResetNextTaskUnblockTime+0x34>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	68db      	ldr	r3, [r3, #12]
 8009540:	68db      	ldr	r3, [r3, #12]
 8009542:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	4b03      	ldr	r3, [pc, #12]	; (8009558 <prvResetNextTaskUnblockTime+0x38>)
 800954a:	601a      	str	r2, [r3, #0]
}
 800954c:	46c0      	nop			; (mov r8, r8)
 800954e:	46bd      	mov	sp, r7
 8009550:	b002      	add	sp, #8
 8009552:	bd80      	pop	{r7, pc}
 8009554:	20000768 	.word	0x20000768
 8009558:	200007d0 	.word	0x200007d0

0800955c <ulTaskNotifyTake>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	uint32_t ulTaskNotifyTake( BaseType_t xClearCountOnExit, TickType_t xTicksToWait )
	{
 800955c:	b580      	push	{r7, lr}
 800955e:	b084      	sub	sp, #16
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
 8009564:	6039      	str	r1, [r7, #0]
	uint32_t ulReturn;

		taskENTER_CRITICAL();
 8009566:	f000 f9a3 	bl	80098b0 <vPortEnterCritical>
		{
			/* Only block if the notification count is not already non-zero. */
			if( pxCurrentTCB->ulNotifiedValue == 0UL )
 800956a:	4b1c      	ldr	r3, [pc, #112]	; (80095dc <ulTaskNotifyTake+0x80>)
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10e      	bne.n	8009592 <ulTaskNotifyTake+0x36>
			{
				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8009574:	4b19      	ldr	r3, [pc, #100]	; (80095dc <ulTaskNotifyTake+0x80>)
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	2250      	movs	r2, #80	; 0x50
 800957a:	2101      	movs	r1, #1
 800957c:	5499      	strb	r1, [r3, r2]

				if( xTicksToWait > ( TickType_t ) 0 )
 800957e:	683b      	ldr	r3, [r7, #0]
 8009580:	2b00      	cmp	r3, #0
 8009582:	d006      	beq.n	8009592 <ulTaskNotifyTake+0x36>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8009584:	683b      	ldr	r3, [r7, #0]
 8009586:	2101      	movs	r1, #1
 8009588:	0018      	movs	r0, r3
 800958a:	f000 f8a1 	bl	80096d0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800958e:	f000 f97f 	bl	8009890 <vPortYield>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8009592:	f000 f99f 	bl	80098d4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8009596:	f000 f98b 	bl	80098b0 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_TAKE();
			ulReturn = pxCurrentTCB->ulNotifiedValue;
 800959a:	4b10      	ldr	r3, [pc, #64]	; (80095dc <ulTaskNotifyTake+0x80>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80095a0:	60fb      	str	r3, [r7, #12]

			if( ulReturn != 0UL )
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	d00c      	beq.n	80095c2 <ulTaskNotifyTake+0x66>
			{
				if( xClearCountOnExit != pdFALSE )
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	2b00      	cmp	r3, #0
 80095ac:	d004      	beq.n	80095b8 <ulTaskNotifyTake+0x5c>
				{
					pxCurrentTCB->ulNotifiedValue = 0UL;
 80095ae:	4b0b      	ldr	r3, [pc, #44]	; (80095dc <ulTaskNotifyTake+0x80>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	2200      	movs	r2, #0
 80095b4:	64da      	str	r2, [r3, #76]	; 0x4c
 80095b6:	e004      	b.n	80095c2 <ulTaskNotifyTake+0x66>
				}
				else
				{
					pxCurrentTCB->ulNotifiedValue = ulReturn - ( uint32_t ) 1;
 80095b8:	4b08      	ldr	r3, [pc, #32]	; (80095dc <ulTaskNotifyTake+0x80>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	68fa      	ldr	r2, [r7, #12]
 80095be:	3a01      	subs	r2, #1
 80095c0:	64da      	str	r2, [r3, #76]	; 0x4c
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80095c2:	4b06      	ldr	r3, [pc, #24]	; (80095dc <ulTaskNotifyTake+0x80>)
 80095c4:	681b      	ldr	r3, [r3, #0]
 80095c6:	2250      	movs	r2, #80	; 0x50
 80095c8:	2100      	movs	r1, #0
 80095ca:	5499      	strb	r1, [r3, r2]
		}
		taskEXIT_CRITICAL();
 80095cc:	f000 f982 	bl	80098d4 <vPortExitCritical>

		return ulReturn;
 80095d0:	68fb      	ldr	r3, [r7, #12]
	}
 80095d2:	0018      	movs	r0, r3
 80095d4:	46bd      	mov	sp, r7
 80095d6:	b004      	add	sp, #16
 80095d8:	bd80      	pop	{r7, pc}
 80095da:	46c0      	nop			; (mov r8, r8)
 80095dc:	200006b0 	.word	0x200006b0

080095e0 <vTaskNotifyGiveFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	void vTaskNotifyGiveFromISR( TaskHandle_t xTaskToNotify, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80095e0:	b580      	push	{r7, lr}
 80095e2:	b086      	sub	sp, #24
 80095e4:	af00      	add	r7, sp, #0
 80095e6:	6078      	str	r0, [r7, #4]
 80095e8:	6039      	str	r1, [r7, #0]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d101      	bne.n	80095f4 <vTaskNotifyGiveFromISR+0x14>
 80095f0:	b672      	cpsid	i
 80095f2:	e7fe      	b.n	80095f2 <vTaskNotifyGiveFromISR+0x12>
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();

		pxTCB = xTaskToNotify;
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	617b      	str	r3, [r7, #20]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80095f8:	f000 f984 	bl	8009904 <ulSetInterruptMaskFromISR>
 80095fc:	0003      	movs	r3, r0
 80095fe:	613b      	str	r3, [r7, #16]
		{
			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8009600:	200f      	movs	r0, #15
 8009602:	183b      	adds	r3, r7, r0
 8009604:	697a      	ldr	r2, [r7, #20]
 8009606:	2150      	movs	r1, #80	; 0x50
 8009608:	5c52      	ldrb	r2, [r2, r1]
 800960a:	701a      	strb	r2, [r3, #0]
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800960c:	697b      	ldr	r3, [r7, #20]
 800960e:	2250      	movs	r2, #80	; 0x50
 8009610:	2102      	movs	r1, #2
 8009612:	5499      	strb	r1, [r3, r2]

			/* 'Giving' is equivalent to incrementing a count in a counting
			semaphore. */
			( pxTCB->ulNotifiedValue )++;
 8009614:	697b      	ldr	r3, [r7, #20]
 8009616:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009618:	1c5a      	adds	r2, r3, #1
 800961a:	697b      	ldr	r3, [r7, #20]
 800961c:	64da      	str	r2, [r3, #76]	; 0x4c

			traceTASK_NOTIFY_GIVE_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 800961e:	183b      	adds	r3, r7, r0
 8009620:	781b      	ldrb	r3, [r3, #0]
 8009622:	2b01      	cmp	r3, #1
 8009624:	d13f      	bne.n	80096a6 <vTaskNotifyGiveFromISR+0xc6>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800962a:	2b00      	cmp	r3, #0
 800962c:	d001      	beq.n	8009632 <vTaskNotifyGiveFromISR+0x52>
 800962e:	b672      	cpsid	i
 8009630:	e7fe      	b.n	8009630 <vTaskNotifyGiveFromISR+0x50>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009632:	4b21      	ldr	r3, [pc, #132]	; (80096b8 <vTaskNotifyGiveFromISR+0xd8>)
 8009634:	681b      	ldr	r3, [r3, #0]
 8009636:	2b00      	cmp	r3, #0
 8009638:	d11d      	bne.n	8009676 <vTaskNotifyGiveFromISR+0x96>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800963a:	697b      	ldr	r3, [r7, #20]
 800963c:	3304      	adds	r3, #4
 800963e:	0018      	movs	r0, r3
 8009640:	f7ff fb8e 	bl	8008d60 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009644:	697b      	ldr	r3, [r7, #20]
 8009646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009648:	4b1c      	ldr	r3, [pc, #112]	; (80096bc <vTaskNotifyGiveFromISR+0xdc>)
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	429a      	cmp	r2, r3
 800964e:	d903      	bls.n	8009658 <vTaskNotifyGiveFromISR+0x78>
 8009650:	697b      	ldr	r3, [r7, #20]
 8009652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009654:	4b19      	ldr	r3, [pc, #100]	; (80096bc <vTaskNotifyGiveFromISR+0xdc>)
 8009656:	601a      	str	r2, [r3, #0]
 8009658:	697b      	ldr	r3, [r7, #20]
 800965a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800965c:	0013      	movs	r3, r2
 800965e:	009b      	lsls	r3, r3, #2
 8009660:	189b      	adds	r3, r3, r2
 8009662:	009b      	lsls	r3, r3, #2
 8009664:	4a16      	ldr	r2, [pc, #88]	; (80096c0 <vTaskNotifyGiveFromISR+0xe0>)
 8009666:	189a      	adds	r2, r3, r2
 8009668:	697b      	ldr	r3, [r7, #20]
 800966a:	3304      	adds	r3, #4
 800966c:	0019      	movs	r1, r3
 800966e:	0010      	movs	r0, r2
 8009670:	f7ff fb1e 	bl	8008cb0 <vListInsertEnd>
 8009674:	e007      	b.n	8009686 <vTaskNotifyGiveFromISR+0xa6>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8009676:	697b      	ldr	r3, [r7, #20]
 8009678:	3318      	adds	r3, #24
 800967a:	001a      	movs	r2, r3
 800967c:	4b11      	ldr	r3, [pc, #68]	; (80096c4 <vTaskNotifyGiveFromISR+0xe4>)
 800967e:	0011      	movs	r1, r2
 8009680:	0018      	movs	r0, r3
 8009682:	f7ff fb15 	bl	8008cb0 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8009686:	697b      	ldr	r3, [r7, #20]
 8009688:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800968a:	4b0f      	ldr	r3, [pc, #60]	; (80096c8 <vTaskNotifyGiveFromISR+0xe8>)
 800968c:	681b      	ldr	r3, [r3, #0]
 800968e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009690:	429a      	cmp	r2, r3
 8009692:	d908      	bls.n	80096a6 <vTaskNotifyGiveFromISR+0xc6>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8009694:	683b      	ldr	r3, [r7, #0]
 8009696:	2b00      	cmp	r3, #0
 8009698:	d002      	beq.n	80096a0 <vTaskNotifyGiveFromISR+0xc0>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 800969a:	683b      	ldr	r3, [r7, #0]
 800969c:	2201      	movs	r2, #1
 800969e:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter in an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80096a0:	4b0a      	ldr	r3, [pc, #40]	; (80096cc <vTaskNotifyGiveFromISR+0xec>)
 80096a2:	2201      	movs	r2, #1
 80096a4:	601a      	str	r2, [r3, #0]
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
 80096a6:	693b      	ldr	r3, [r7, #16]
 80096a8:	0018      	movs	r0, r3
 80096aa:	f000 f931 	bl	8009910 <vClearInterruptMaskFromISR>
	}
 80096ae:	46c0      	nop			; (mov r8, r8)
 80096b0:	46bd      	mov	sp, r7
 80096b2:	b006      	add	sp, #24
 80096b4:	bd80      	pop	{r7, pc}
 80096b6:	46c0      	nop			; (mov r8, r8)
 80096b8:	200007d8 	.word	0x200007d8
 80096bc:	200007b8 	.word	0x200007b8
 80096c0:	200006b4 	.word	0x200006b4
 80096c4:	20000770 	.word	0x20000770
 80096c8:	200006b0 	.word	0x200006b0
 80096cc:	200007c4 	.word	0x200007c4

080096d0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b084      	sub	sp, #16
 80096d4:	af00      	add	r7, sp, #0
 80096d6:	6078      	str	r0, [r7, #4]
 80096d8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80096da:	4b21      	ldr	r3, [pc, #132]	; (8009760 <prvAddCurrentTaskToDelayedList+0x90>)
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80096e0:	4b20      	ldr	r3, [pc, #128]	; (8009764 <prvAddCurrentTaskToDelayedList+0x94>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	3304      	adds	r3, #4
 80096e6:	0018      	movs	r0, r3
 80096e8:	f7ff fb3a 	bl	8008d60 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	3301      	adds	r3, #1
 80096f0:	d10b      	bne.n	800970a <prvAddCurrentTaskToDelayedList+0x3a>
 80096f2:	683b      	ldr	r3, [r7, #0]
 80096f4:	2b00      	cmp	r3, #0
 80096f6:	d008      	beq.n	800970a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80096f8:	4b1a      	ldr	r3, [pc, #104]	; (8009764 <prvAddCurrentTaskToDelayedList+0x94>)
 80096fa:	681b      	ldr	r3, [r3, #0]
 80096fc:	1d1a      	adds	r2, r3, #4
 80096fe:	4b1a      	ldr	r3, [pc, #104]	; (8009768 <prvAddCurrentTaskToDelayedList+0x98>)
 8009700:	0011      	movs	r1, r2
 8009702:	0018      	movs	r0, r3
 8009704:	f7ff fad4 	bl	8008cb0 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009708:	e026      	b.n	8009758 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800970a:	68fa      	ldr	r2, [r7, #12]
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	18d3      	adds	r3, r2, r3
 8009710:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009712:	4b14      	ldr	r3, [pc, #80]	; (8009764 <prvAddCurrentTaskToDelayedList+0x94>)
 8009714:	681b      	ldr	r3, [r3, #0]
 8009716:	68ba      	ldr	r2, [r7, #8]
 8009718:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800971a:	68ba      	ldr	r2, [r7, #8]
 800971c:	68fb      	ldr	r3, [r7, #12]
 800971e:	429a      	cmp	r2, r3
 8009720:	d209      	bcs.n	8009736 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009722:	4b12      	ldr	r3, [pc, #72]	; (800976c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009724:	681a      	ldr	r2, [r3, #0]
 8009726:	4b0f      	ldr	r3, [pc, #60]	; (8009764 <prvAddCurrentTaskToDelayedList+0x94>)
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	3304      	adds	r3, #4
 800972c:	0019      	movs	r1, r3
 800972e:	0010      	movs	r0, r2
 8009730:	f7ff fae0 	bl	8008cf4 <vListInsert>
}
 8009734:	e010      	b.n	8009758 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009736:	4b0e      	ldr	r3, [pc, #56]	; (8009770 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009738:	681a      	ldr	r2, [r3, #0]
 800973a:	4b0a      	ldr	r3, [pc, #40]	; (8009764 <prvAddCurrentTaskToDelayedList+0x94>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	3304      	adds	r3, #4
 8009740:	0019      	movs	r1, r3
 8009742:	0010      	movs	r0, r2
 8009744:	f7ff fad6 	bl	8008cf4 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009748:	4b0a      	ldr	r3, [pc, #40]	; (8009774 <prvAddCurrentTaskToDelayedList+0xa4>)
 800974a:	681b      	ldr	r3, [r3, #0]
 800974c:	68ba      	ldr	r2, [r7, #8]
 800974e:	429a      	cmp	r2, r3
 8009750:	d202      	bcs.n	8009758 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009752:	4b08      	ldr	r3, [pc, #32]	; (8009774 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009754:	68ba      	ldr	r2, [r7, #8]
 8009756:	601a      	str	r2, [r3, #0]
}
 8009758:	46c0      	nop			; (mov r8, r8)
 800975a:	46bd      	mov	sp, r7
 800975c:	b004      	add	sp, #16
 800975e:	bd80      	pop	{r7, pc}
 8009760:	200007b4 	.word	0x200007b4
 8009764:	200006b0 	.word	0x200006b0
 8009768:	2000079c 	.word	0x2000079c
 800976c:	2000076c 	.word	0x2000076c
 8009770:	20000768 	.word	0x20000768
 8009774:	200007d0 	.word	0x200007d0

08009778 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8009778:	b580      	push	{r7, lr}
 800977a:	b084      	sub	sp, #16
 800977c:	af00      	add	r7, sp, #0
 800977e:	60f8      	str	r0, [r7, #12]
 8009780:	60b9      	str	r1, [r7, #8]
 8009782:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8009784:	68fb      	ldr	r3, [r7, #12]
 8009786:	3b04      	subs	r3, #4
 8009788:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800978a:	68fb      	ldr	r3, [r7, #12]
 800978c:	2280      	movs	r2, #128	; 0x80
 800978e:	0452      	lsls	r2, r2, #17
 8009790:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	3b04      	subs	r3, #4
 8009796:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pxCode;	/* PC */
 8009798:	68ba      	ldr	r2, [r7, #8]
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800979e:	68fb      	ldr	r3, [r7, #12]
 80097a0:	3b04      	subs	r3, #4
 80097a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80097a4:	4a08      	ldr	r2, [pc, #32]	; (80097c8 <pxPortInitialiseStack+0x50>)
 80097a6:	68fb      	ldr	r3, [r7, #12]
 80097a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80097aa:	68fb      	ldr	r3, [r7, #12]
 80097ac:	3b14      	subs	r3, #20
 80097ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80097b0:	687a      	ldr	r2, [r7, #4]
 80097b2:	68fb      	ldr	r3, [r7, #12]
 80097b4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8; /* R11..R4. */
 80097b6:	68fb      	ldr	r3, [r7, #12]
 80097b8:	3b20      	subs	r3, #32
 80097ba:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80097bc:	68fb      	ldr	r3, [r7, #12]
}
 80097be:	0018      	movs	r0, r3
 80097c0:	46bd      	mov	sp, r7
 80097c2:	b004      	add	sp, #16
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	46c0      	nop			; (mov r8, r8)
 80097c8:	080097cd 	.word	0x080097cd

080097cc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b082      	sub	sp, #8
 80097d0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80097d2:	2300      	movs	r3, #0
 80097d4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80097d6:	4b08      	ldr	r3, [pc, #32]	; (80097f8 <prvTaskExitError+0x2c>)
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	3301      	adds	r3, #1
 80097dc:	d001      	beq.n	80097e2 <prvTaskExitError+0x16>
 80097de:	b672      	cpsid	i
 80097e0:	e7fe      	b.n	80097e0 <prvTaskExitError+0x14>
	portDISABLE_INTERRUPTS();
 80097e2:	b672      	cpsid	i
	while( ulDummy == 0 )
 80097e4:	46c0      	nop			; (mov r8, r8)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	2b00      	cmp	r3, #0
 80097ea:	d0fc      	beq.n	80097e6 <prvTaskExitError+0x1a>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80097ec:	46c0      	nop			; (mov r8, r8)
 80097ee:	46c0      	nop			; (mov r8, r8)
 80097f0:	46bd      	mov	sp, r7
 80097f2:	b002      	add	sp, #8
 80097f4:	bd80      	pop	{r7, pc}
 80097f6:	46c0      	nop			; (mov r8, r8)
 80097f8:	20000018 	.word	0x20000018

080097fc <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
 80097fc:	b580      	push	{r7, lr}
 80097fe:	af00      	add	r7, sp, #0
	/* This function is no longer used, but retained for backward
	compatibility. */
}
 8009800:	46c0      	nop			; (mov r8, r8)
 8009802:	46bd      	mov	sp, r7
 8009804:	bd80      	pop	{r7, pc}
	...

08009810 <vPortStartFirstTask>:
void vPortStartFirstTask( void )
{
	/* The MSP stack is not reset as, unlike on M3/4 parts, there is no vector
	table offset register that can be used to locate the initial stack value.
	Not all M0 parts have the application vector table at address 0. */
	__asm volatile(
 8009810:	4a0b      	ldr	r2, [pc, #44]	; (8009840 <pxCurrentTCBConst2>)
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	6818      	ldr	r0, [r3, #0]
 8009816:	3020      	adds	r0, #32
 8009818:	f380 8809 	msr	PSP, r0
 800981c:	2002      	movs	r0, #2
 800981e:	f380 8814 	msr	CONTROL, r0
 8009822:	f3bf 8f6f 	isb	sy
 8009826:	bc3f      	pop	{r0, r1, r2, r3, r4, r5}
 8009828:	46ae      	mov	lr, r5
 800982a:	bc08      	pop	{r3}
 800982c:	bc04      	pop	{r2}
 800982e:	b662      	cpsie	i
 8009830:	4718      	bx	r3
 8009832:	46c0      	nop			; (mov r8, r8)
 8009834:	46c0      	nop			; (mov r8, r8)
 8009836:	46c0      	nop			; (mov r8, r8)
 8009838:	46c0      	nop			; (mov r8, r8)
 800983a:	46c0      	nop			; (mov r8, r8)
 800983c:	46c0      	nop			; (mov r8, r8)
 800983e:	46c0      	nop			; (mov r8, r8)

08009840 <pxCurrentTCBConst2>:
 8009840:	200006b0 	.word	0x200006b0
	"	bx   r3						\n" /* Finally, jump to the user defined task code. */
	"								\n"
	"	.align 4					\n"
	"pxCurrentTCBConst2: .word pxCurrentTCB	  "
				  );
}
 8009844:	46c0      	nop			; (mov r8, r8)
 8009846:	46c0      	nop			; (mov r8, r8)

08009848 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8009848:	b580      	push	{r7, lr}
 800984a:	af00      	add	r7, sp, #0
	/* Make PendSV, CallSV and SysTick the same priority as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800984c:	4b0e      	ldr	r3, [pc, #56]	; (8009888 <xPortStartScheduler+0x40>)
 800984e:	681a      	ldr	r2, [r3, #0]
 8009850:	4b0d      	ldr	r3, [pc, #52]	; (8009888 <xPortStartScheduler+0x40>)
 8009852:	21ff      	movs	r1, #255	; 0xff
 8009854:	0409      	lsls	r1, r1, #16
 8009856:	430a      	orrs	r2, r1
 8009858:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800985a:	4b0b      	ldr	r3, [pc, #44]	; (8009888 <xPortStartScheduler+0x40>)
 800985c:	681a      	ldr	r2, [r3, #0]
 800985e:	4b0a      	ldr	r3, [pc, #40]	; (8009888 <xPortStartScheduler+0x40>)
 8009860:	21ff      	movs	r1, #255	; 0xff
 8009862:	0609      	lsls	r1, r1, #24
 8009864:	430a      	orrs	r2, r1
 8009866:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8009868:	f000 f898 	bl	800999c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800986c:	4b07      	ldr	r3, [pc, #28]	; (800988c <xPortStartScheduler+0x44>)
 800986e:	2200      	movs	r2, #0
 8009870:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	vPortStartFirstTask();
 8009872:	f7ff ffcd 	bl	8009810 <vPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8009876:	f7ff fd6d 	bl	8009354 <vTaskSwitchContext>
	prvTaskExitError();
 800987a:	f7ff ffa7 	bl	80097cc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800987e:	2300      	movs	r3, #0
}
 8009880:	0018      	movs	r0, r3
 8009882:	46bd      	mov	sp, r7
 8009884:	bd80      	pop	{r7, pc}
 8009886:	46c0      	nop			; (mov r8, r8)
 8009888:	e000ed20 	.word	0xe000ed20
 800988c:	20000018 	.word	0x20000018

08009890 <vPortYield>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortYield( void )
{
 8009890:	b580      	push	{r7, lr}
 8009892:	af00      	add	r7, sp, #0
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009894:	4b05      	ldr	r3, [pc, #20]	; (80098ac <vPortYield+0x1c>)
 8009896:	2280      	movs	r2, #128	; 0x80
 8009898:	0552      	lsls	r2, r2, #21
 800989a:	601a      	str	r2, [r3, #0]

	/* Barriers are normally not required but do ensure the code is completely
	within the specified behaviour for the architecture. */
	__asm volatile( "dsb" ::: "memory" );
 800989c:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80098a0:	f3bf 8f6f 	isb	sy
}
 80098a4:	46c0      	nop			; (mov r8, r8)
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}
 80098aa:	46c0      	nop			; (mov r8, r8)
 80098ac:	e000ed04 	.word	0xe000ed04

080098b0 <vPortEnterCritical>:
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80098b0:	b580      	push	{r7, lr}
 80098b2:	af00      	add	r7, sp, #0
	portDISABLE_INTERRUPTS();
 80098b4:	b672      	cpsid	i
	uxCriticalNesting++;
 80098b6:	4b06      	ldr	r3, [pc, #24]	; (80098d0 <vPortEnterCritical+0x20>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	4b04      	ldr	r3, [pc, #16]	; (80098d0 <vPortEnterCritical+0x20>)
 80098be:	601a      	str	r2, [r3, #0]
	__asm volatile( "dsb" ::: "memory" );
 80098c0:	f3bf 8f4f 	dsb	sy
	__asm volatile( "isb" );
 80098c4:	f3bf 8f6f 	isb	sy
}
 80098c8:	46c0      	nop			; (mov r8, r8)
 80098ca:	46bd      	mov	sp, r7
 80098cc:	bd80      	pop	{r7, pc}
 80098ce:	46c0      	nop			; (mov r8, r8)
 80098d0:	20000018 	.word	0x20000018

080098d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80098d8:	4b09      	ldr	r3, [pc, #36]	; (8009900 <vPortExitCritical+0x2c>)
 80098da:	681b      	ldr	r3, [r3, #0]
 80098dc:	2b00      	cmp	r3, #0
 80098de:	d101      	bne.n	80098e4 <vPortExitCritical+0x10>
 80098e0:	b672      	cpsid	i
 80098e2:	e7fe      	b.n	80098e2 <vPortExitCritical+0xe>
	uxCriticalNesting--;
 80098e4:	4b06      	ldr	r3, [pc, #24]	; (8009900 <vPortExitCritical+0x2c>)
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	1e5a      	subs	r2, r3, #1
 80098ea:	4b05      	ldr	r3, [pc, #20]	; (8009900 <vPortExitCritical+0x2c>)
 80098ec:	601a      	str	r2, [r3, #0]
	if( uxCriticalNesting == 0 )
 80098ee:	4b04      	ldr	r3, [pc, #16]	; (8009900 <vPortExitCritical+0x2c>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	2b00      	cmp	r3, #0
 80098f4:	d100      	bne.n	80098f8 <vPortExitCritical+0x24>
	{
		portENABLE_INTERRUPTS();
 80098f6:	b662      	cpsie	i
	}
}
 80098f8:	46c0      	nop			; (mov r8, r8)
 80098fa:	46bd      	mov	sp, r7
 80098fc:	bd80      	pop	{r7, pc}
 80098fe:	46c0      	nop			; (mov r8, r8)
 8009900:	20000018 	.word	0x20000018

08009904 <ulSetInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

uint32_t ulSetInterruptMaskFromISR( void )
{
	__asm volatile(
 8009904:	f3ef 8010 	mrs	r0, PRIMASK
 8009908:	b672      	cpsid	i
 800990a:	4770      	bx	lr
					" mrs r0, PRIMASK	\n"
					" cpsid i			\n"
					" bx lr				  "
					::: "memory"
				  );
}
 800990c:	46c0      	nop			; (mov r8, r8)
 800990e:	0018      	movs	r0, r3

08009910 <vClearInterruptMaskFromISR>:
/*-----------------------------------------------------------*/

void vClearInterruptMaskFromISR( __attribute__( ( unused ) ) uint32_t ulMask )
{
	__asm volatile(
 8009910:	f380 8810 	msr	PRIMASK, r0
 8009914:	4770      	bx	lr
					" msr PRIMASK, r0	\n"
					" bx lr				  "
					::: "memory"
				  );
}
 8009916:	46c0      	nop			; (mov r8, r8)
	...

08009920 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009920:	f3ef 8009 	mrs	r0, PSP
 8009924:	4b0e      	ldr	r3, [pc, #56]	; (8009960 <pxCurrentTCBConst>)
 8009926:	681a      	ldr	r2, [r3, #0]
 8009928:	3820      	subs	r0, #32
 800992a:	6010      	str	r0, [r2, #0]
 800992c:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 800992e:	4644      	mov	r4, r8
 8009930:	464d      	mov	r5, r9
 8009932:	4656      	mov	r6, sl
 8009934:	465f      	mov	r7, fp
 8009936:	c0f0      	stmia	r0!, {r4, r5, r6, r7}
 8009938:	b508      	push	{r3, lr}
 800993a:	b672      	cpsid	i
 800993c:	f7ff fd0a 	bl	8009354 <vTaskSwitchContext>
 8009940:	b662      	cpsie	i
 8009942:	bc0c      	pop	{r2, r3}
 8009944:	6811      	ldr	r1, [r2, #0]
 8009946:	6808      	ldr	r0, [r1, #0]
 8009948:	3010      	adds	r0, #16
 800994a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800994c:	46a0      	mov	r8, r4
 800994e:	46a9      	mov	r9, r5
 8009950:	46b2      	mov	sl, r6
 8009952:	46bb      	mov	fp, r7
 8009954:	f380 8809 	msr	PSP, r0
 8009958:	3820      	subs	r0, #32
 800995a:	c8f0      	ldmia	r0!, {r4, r5, r6, r7}
 800995c:	4718      	bx	r3
 800995e:	46c0      	nop			; (mov r8, r8)

08009960 <pxCurrentTCBConst>:
 8009960:	200006b0 	.word	0x200006b0
	"	bx r3								\n"
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	  "
	);
}
 8009964:	46c0      	nop			; (mov r8, r8)
 8009966:	46c0      	nop			; (mov r8, r8)

08009968 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009968:	b580      	push	{r7, lr}
 800996a:	b082      	sub	sp, #8
 800996c:	af00      	add	r7, sp, #0
uint32_t ulPreviousMask;

	ulPreviousMask = portSET_INTERRUPT_MASK_FROM_ISR();
 800996e:	f7ff ffc9 	bl	8009904 <ulSetInterruptMaskFromISR>
 8009972:	0003      	movs	r3, r0
 8009974:	607b      	str	r3, [r7, #4]
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009976:	f7ff fc3d 	bl	80091f4 <xTaskIncrementTick>
 800997a:	1e03      	subs	r3, r0, #0
 800997c:	d003      	beq.n	8009986 <SysTick_Handler+0x1e>
		{
			/* Pend a context switch. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800997e:	4b06      	ldr	r3, [pc, #24]	; (8009998 <SysTick_Handler+0x30>)
 8009980:	2280      	movs	r2, #128	; 0x80
 8009982:	0552      	lsls	r2, r2, #21
 8009984:	601a      	str	r2, [r3, #0]
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( ulPreviousMask );
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	0018      	movs	r0, r3
 800998a:	f7ff ffc1 	bl	8009910 <vClearInterruptMaskFromISR>
}
 800998e:	46c0      	nop			; (mov r8, r8)
 8009990:	46bd      	mov	sp, r7
 8009992:	b002      	add	sp, #8
 8009994:	bd80      	pop	{r7, pc}
 8009996:	46c0      	nop			; (mov r8, r8)
 8009998:	e000ed04 	.word	0xe000ed04

0800999c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800999c:	b580      	push	{r7, lr}
 800999e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR;
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and reset the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80099a0:	4b0b      	ldr	r3, [pc, #44]	; (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099a2:	2200      	movs	r2, #0
 80099a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80099a6:	4b0b      	ldr	r3, [pc, #44]	; (80099d4 <vPortSetupTimerInterrupt+0x38>)
 80099a8:	2200      	movs	r2, #0
 80099aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configCPU_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80099ac:	4b0a      	ldr	r3, [pc, #40]	; (80099d8 <vPortSetupTimerInterrupt+0x3c>)
 80099ae:	681b      	ldr	r3, [r3, #0]
 80099b0:	22fa      	movs	r2, #250	; 0xfa
 80099b2:	0091      	lsls	r1, r2, #2
 80099b4:	0018      	movs	r0, r3
 80099b6:	f7f6 fbc3 	bl	8000140 <__udivsi3>
 80099ba:	0003      	movs	r3, r0
 80099bc:	001a      	movs	r2, r3
 80099be:	4b07      	ldr	r3, [pc, #28]	; (80099dc <vPortSetupTimerInterrupt+0x40>)
 80099c0:	3a01      	subs	r2, #1
 80099c2:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
 80099c4:	4b02      	ldr	r3, [pc, #8]	; (80099d0 <vPortSetupTimerInterrupt+0x34>)
 80099c6:	2207      	movs	r2, #7
 80099c8:	601a      	str	r2, [r3, #0]
}
 80099ca:	46c0      	nop			; (mov r8, r8)
 80099cc:	46bd      	mov	sp, r7
 80099ce:	bd80      	pop	{r7, pc}
 80099d0:	e000e010 	.word	0xe000e010
 80099d4:	e000e018 	.word	0xe000e018
 80099d8:	2000000c 	.word	0x2000000c
 80099dc:	e000e014 	.word	0xe000e014

080099e0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80099e0:	b580      	push	{r7, lr}
 80099e2:	b086      	sub	sp, #24
 80099e4:	af00      	add	r7, sp, #0
 80099e6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80099e8:	2300      	movs	r3, #0
 80099ea:	60fb      	str	r3, [r7, #12]

	vTaskSuspendAll();
 80099ec:	f7ff fb6a 	bl	80090c4 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80099f0:	4b4b      	ldr	r3, [pc, #300]	; (8009b20 <pvPortMalloc+0x140>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	2b00      	cmp	r3, #0
 80099f6:	d101      	bne.n	80099fc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80099f8:	f000 f8ec 	bl	8009bd4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80099fc:	4b49      	ldr	r3, [pc, #292]	; (8009b24 <pvPortMalloc+0x144>)
 80099fe:	681b      	ldr	r3, [r3, #0]
 8009a00:	687a      	ldr	r2, [r7, #4]
 8009a02:	4013      	ands	r3, r2
 8009a04:	d000      	beq.n	8009a08 <pvPortMalloc+0x28>
 8009a06:	e07e      	b.n	8009b06 <pvPortMalloc+0x126>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2b00      	cmp	r3, #0
 8009a0c:	d012      	beq.n	8009a34 <pvPortMalloc+0x54>
			{
				xWantedSize += xHeapStructSize;
 8009a0e:	2208      	movs	r2, #8
 8009a10:	687b      	ldr	r3, [r7, #4]
 8009a12:	189b      	adds	r3, r3, r2
 8009a14:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2207      	movs	r2, #7
 8009a1a:	4013      	ands	r3, r2
 8009a1c:	d00a      	beq.n	8009a34 <pvPortMalloc+0x54>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	2207      	movs	r2, #7
 8009a22:	4393      	bics	r3, r2
 8009a24:	3308      	adds	r3, #8
 8009a26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	2207      	movs	r2, #7
 8009a2c:	4013      	ands	r3, r2
 8009a2e:	d001      	beq.n	8009a34 <pvPortMalloc+0x54>
 8009a30:	b672      	cpsid	i
 8009a32:	e7fe      	b.n	8009a32 <pvPortMalloc+0x52>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	2b00      	cmp	r3, #0
 8009a38:	d065      	beq.n	8009b06 <pvPortMalloc+0x126>
 8009a3a:	4b3b      	ldr	r3, [pc, #236]	; (8009b28 <pvPortMalloc+0x148>)
 8009a3c:	681b      	ldr	r3, [r3, #0]
 8009a3e:	687a      	ldr	r2, [r7, #4]
 8009a40:	429a      	cmp	r2, r3
 8009a42:	d860      	bhi.n	8009b06 <pvPortMalloc+0x126>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8009a44:	4b39      	ldr	r3, [pc, #228]	; (8009b2c <pvPortMalloc+0x14c>)
 8009a46:	613b      	str	r3, [r7, #16]
				pxBlock = xStart.pxNextFreeBlock;
 8009a48:	4b38      	ldr	r3, [pc, #224]	; (8009b2c <pvPortMalloc+0x14c>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a4e:	e004      	b.n	8009a5a <pvPortMalloc+0x7a>
				{
					pxPreviousBlock = pxBlock;
 8009a50:	697b      	ldr	r3, [r7, #20]
 8009a52:	613b      	str	r3, [r7, #16]
					pxBlock = pxBlock->pxNextFreeBlock;
 8009a54:	697b      	ldr	r3, [r7, #20]
 8009a56:	681b      	ldr	r3, [r3, #0]
 8009a58:	617b      	str	r3, [r7, #20]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8009a5a:	697b      	ldr	r3, [r7, #20]
 8009a5c:	685b      	ldr	r3, [r3, #4]
 8009a5e:	687a      	ldr	r2, [r7, #4]
 8009a60:	429a      	cmp	r2, r3
 8009a62:	d903      	bls.n	8009a6c <pvPortMalloc+0x8c>
 8009a64:	697b      	ldr	r3, [r7, #20]
 8009a66:	681b      	ldr	r3, [r3, #0]
 8009a68:	2b00      	cmp	r3, #0
 8009a6a:	d1f1      	bne.n	8009a50 <pvPortMalloc+0x70>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8009a6c:	4b2c      	ldr	r3, [pc, #176]	; (8009b20 <pvPortMalloc+0x140>)
 8009a6e:	681b      	ldr	r3, [r3, #0]
 8009a70:	697a      	ldr	r2, [r7, #20]
 8009a72:	429a      	cmp	r2, r3
 8009a74:	d047      	beq.n	8009b06 <pvPortMalloc+0x126>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8009a76:	693b      	ldr	r3, [r7, #16]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	2208      	movs	r2, #8
 8009a7c:	189b      	adds	r3, r3, r2
 8009a7e:	60fb      	str	r3, [r7, #12]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8009a80:	697b      	ldr	r3, [r7, #20]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	693b      	ldr	r3, [r7, #16]
 8009a86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8009a88:	697b      	ldr	r3, [r7, #20]
 8009a8a:	685a      	ldr	r2, [r3, #4]
 8009a8c:	687b      	ldr	r3, [r7, #4]
 8009a8e:	1ad2      	subs	r2, r2, r3
 8009a90:	2308      	movs	r3, #8
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	429a      	cmp	r2, r3
 8009a96:	d916      	bls.n	8009ac6 <pvPortMalloc+0xe6>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009a98:	697a      	ldr	r2, [r7, #20]
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	18d3      	adds	r3, r2, r3
 8009a9e:	60bb      	str	r3, [r7, #8]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009aa0:	68bb      	ldr	r3, [r7, #8]
 8009aa2:	2207      	movs	r2, #7
 8009aa4:	4013      	ands	r3, r2
 8009aa6:	d001      	beq.n	8009aac <pvPortMalloc+0xcc>
 8009aa8:	b672      	cpsid	i
 8009aaa:	e7fe      	b.n	8009aaa <pvPortMalloc+0xca>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009aac:	697b      	ldr	r3, [r7, #20]
 8009aae:	685a      	ldr	r2, [r3, #4]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	1ad2      	subs	r2, r2, r3
 8009ab4:	68bb      	ldr	r3, [r7, #8]
 8009ab6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8009ab8:	697b      	ldr	r3, [r7, #20]
 8009aba:	687a      	ldr	r2, [r7, #4]
 8009abc:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009abe:	68bb      	ldr	r3, [r7, #8]
 8009ac0:	0018      	movs	r0, r3
 8009ac2:	f000 f8e7 	bl	8009c94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009ac6:	4b18      	ldr	r3, [pc, #96]	; (8009b28 <pvPortMalloc+0x148>)
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	697b      	ldr	r3, [r7, #20]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	1ad2      	subs	r2, r2, r3
 8009ad0:	4b15      	ldr	r3, [pc, #84]	; (8009b28 <pvPortMalloc+0x148>)
 8009ad2:	601a      	str	r2, [r3, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009ad4:	4b14      	ldr	r3, [pc, #80]	; (8009b28 <pvPortMalloc+0x148>)
 8009ad6:	681a      	ldr	r2, [r3, #0]
 8009ad8:	4b15      	ldr	r3, [pc, #84]	; (8009b30 <pvPortMalloc+0x150>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	429a      	cmp	r2, r3
 8009ade:	d203      	bcs.n	8009ae8 <pvPortMalloc+0x108>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009ae0:	4b11      	ldr	r3, [pc, #68]	; (8009b28 <pvPortMalloc+0x148>)
 8009ae2:	681a      	ldr	r2, [r3, #0]
 8009ae4:	4b12      	ldr	r3, [pc, #72]	; (8009b30 <pvPortMalloc+0x150>)
 8009ae6:	601a      	str	r2, [r3, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8009ae8:	697b      	ldr	r3, [r7, #20]
 8009aea:	685a      	ldr	r2, [r3, #4]
 8009aec:	4b0d      	ldr	r3, [pc, #52]	; (8009b24 <pvPortMalloc+0x144>)
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	431a      	orrs	r2, r3
 8009af2:	697b      	ldr	r3, [r7, #20]
 8009af4:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009af6:	697b      	ldr	r3, [r7, #20]
 8009af8:	2200      	movs	r2, #0
 8009afa:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8009afc:	4b0d      	ldr	r3, [pc, #52]	; (8009b34 <pvPortMalloc+0x154>)
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	1c5a      	adds	r2, r3, #1
 8009b02:	4b0c      	ldr	r3, [pc, #48]	; (8009b34 <pvPortMalloc+0x154>)
 8009b04:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009b06:	f7ff fae9 	bl	80090dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	2207      	movs	r2, #7
 8009b0e:	4013      	ands	r3, r2
 8009b10:	d001      	beq.n	8009b16 <pvPortMalloc+0x136>
 8009b12:	b672      	cpsid	i
 8009b14:	e7fe      	b.n	8009b14 <pvPortMalloc+0x134>
	return pvReturn;
 8009b16:	68fb      	ldr	r3, [r7, #12]
}
 8009b18:	0018      	movs	r0, r3
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	b006      	add	sp, #24
 8009b1e:	bd80      	pop	{r7, pc}
 8009b20:	200017e4 	.word	0x200017e4
 8009b24:	200017f8 	.word	0x200017f8
 8009b28:	200017e8 	.word	0x200017e8
 8009b2c:	200017dc 	.word	0x200017dc
 8009b30:	200017ec 	.word	0x200017ec
 8009b34:	200017f0 	.word	0x200017f0

08009b38 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b084      	sub	sp, #16
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8009b40:	687b      	ldr	r3, [r7, #4]
 8009b42:	60fb      	str	r3, [r7, #12]
BlockLink_t *pxLink;

	if( pv != NULL )
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d03a      	beq.n	8009bc0 <vPortFree+0x88>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8009b4a:	2308      	movs	r3, #8
 8009b4c:	425b      	negs	r3, r3
 8009b4e:	68fa      	ldr	r2, [r7, #12]
 8009b50:	18d3      	adds	r3, r2, r3
 8009b52:	60fb      	str	r3, [r7, #12]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8009b54:	68fb      	ldr	r3, [r7, #12]
 8009b56:	60bb      	str	r3, [r7, #8]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8009b58:	68bb      	ldr	r3, [r7, #8]
 8009b5a:	685a      	ldr	r2, [r3, #4]
 8009b5c:	4b1a      	ldr	r3, [pc, #104]	; (8009bc8 <vPortFree+0x90>)
 8009b5e:	681b      	ldr	r3, [r3, #0]
 8009b60:	4013      	ands	r3, r2
 8009b62:	d101      	bne.n	8009b68 <vPortFree+0x30>
 8009b64:	b672      	cpsid	i
 8009b66:	e7fe      	b.n	8009b66 <vPortFree+0x2e>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	681b      	ldr	r3, [r3, #0]
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d001      	beq.n	8009b74 <vPortFree+0x3c>
 8009b70:	b672      	cpsid	i
 8009b72:	e7fe      	b.n	8009b72 <vPortFree+0x3a>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009b74:	68bb      	ldr	r3, [r7, #8]
 8009b76:	685a      	ldr	r2, [r3, #4]
 8009b78:	4b13      	ldr	r3, [pc, #76]	; (8009bc8 <vPortFree+0x90>)
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	4013      	ands	r3, r2
 8009b7e:	d01f      	beq.n	8009bc0 <vPortFree+0x88>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009b80:	68bb      	ldr	r3, [r7, #8]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d11b      	bne.n	8009bc0 <vPortFree+0x88>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009b88:	68bb      	ldr	r3, [r7, #8]
 8009b8a:	685a      	ldr	r2, [r3, #4]
 8009b8c:	4b0e      	ldr	r3, [pc, #56]	; (8009bc8 <vPortFree+0x90>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	43db      	mvns	r3, r3
 8009b92:	401a      	ands	r2, r3
 8009b94:	68bb      	ldr	r3, [r7, #8]
 8009b96:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009b98:	f7ff fa94 	bl	80090c4 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8009b9c:	68bb      	ldr	r3, [r7, #8]
 8009b9e:	685a      	ldr	r2, [r3, #4]
 8009ba0:	4b0a      	ldr	r3, [pc, #40]	; (8009bcc <vPortFree+0x94>)
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	18d2      	adds	r2, r2, r3
 8009ba6:	4b09      	ldr	r3, [pc, #36]	; (8009bcc <vPortFree+0x94>)
 8009ba8:	601a      	str	r2, [r3, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8009baa:	68bb      	ldr	r3, [r7, #8]
 8009bac:	0018      	movs	r0, r3
 8009bae:	f000 f871 	bl	8009c94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009bb2:	4b07      	ldr	r3, [pc, #28]	; (8009bd0 <vPortFree+0x98>)
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	1c5a      	adds	r2, r3, #1
 8009bb8:	4b05      	ldr	r3, [pc, #20]	; (8009bd0 <vPortFree+0x98>)
 8009bba:	601a      	str	r2, [r3, #0]
				}
				( void ) xTaskResumeAll();
 8009bbc:	f7ff fa8e 	bl	80090dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8009bc0:	46c0      	nop			; (mov r8, r8)
 8009bc2:	46bd      	mov	sp, r7
 8009bc4:	b004      	add	sp, #16
 8009bc6:	bd80      	pop	{r7, pc}
 8009bc8:	200017f8 	.word	0x200017f8
 8009bcc:	200017e8 	.word	0x200017e8
 8009bd0:	200017f4 	.word	0x200017f4

08009bd4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009bd4:	b580      	push	{r7, lr}
 8009bd6:	b084      	sub	sp, #16
 8009bd8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8009bda:	2380      	movs	r3, #128	; 0x80
 8009bdc:	015b      	lsls	r3, r3, #5
 8009bde:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8009be0:	4b26      	ldr	r3, [pc, #152]	; (8009c7c <prvHeapInit+0xa8>)
 8009be2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	2207      	movs	r2, #7
 8009be8:	4013      	ands	r3, r2
 8009bea:	d00c      	beq.n	8009c06 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8009bec:	68fb      	ldr	r3, [r7, #12]
 8009bee:	3307      	adds	r3, #7
 8009bf0:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009bf2:	68fb      	ldr	r3, [r7, #12]
 8009bf4:	2207      	movs	r2, #7
 8009bf6:	4393      	bics	r3, r2
 8009bf8:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8009bfa:	68ba      	ldr	r2, [r7, #8]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	1ad2      	subs	r2, r2, r3
 8009c00:	4b1e      	ldr	r3, [pc, #120]	; (8009c7c <prvHeapInit+0xa8>)
 8009c02:	18d3      	adds	r3, r2, r3
 8009c04:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8009c06:	68fb      	ldr	r3, [r7, #12]
 8009c08:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8009c0a:	4b1d      	ldr	r3, [pc, #116]	; (8009c80 <prvHeapInit+0xac>)
 8009c0c:	687a      	ldr	r2, [r7, #4]
 8009c0e:	601a      	str	r2, [r3, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8009c10:	4b1b      	ldr	r3, [pc, #108]	; (8009c80 <prvHeapInit+0xac>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	68ba      	ldr	r2, [r7, #8]
 8009c1a:	18d3      	adds	r3, r2, r3
 8009c1c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8009c1e:	2208      	movs	r2, #8
 8009c20:	68fb      	ldr	r3, [r7, #12]
 8009c22:	1a9b      	subs	r3, r3, r2
 8009c24:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8009c26:	68fb      	ldr	r3, [r7, #12]
 8009c28:	2207      	movs	r2, #7
 8009c2a:	4393      	bics	r3, r2
 8009c2c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8009c2e:	68fa      	ldr	r2, [r7, #12]
 8009c30:	4b14      	ldr	r3, [pc, #80]	; (8009c84 <prvHeapInit+0xb0>)
 8009c32:	601a      	str	r2, [r3, #0]
	pxEnd->xBlockSize = 0;
 8009c34:	4b13      	ldr	r3, [pc, #76]	; (8009c84 <prvHeapInit+0xb0>)
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	2200      	movs	r2, #0
 8009c3a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8009c3c:	4b11      	ldr	r3, [pc, #68]	; (8009c84 <prvHeapInit+0xb0>)
 8009c3e:	681b      	ldr	r3, [r3, #0]
 8009c40:	2200      	movs	r2, #0
 8009c42:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8009c48:	683b      	ldr	r3, [r7, #0]
 8009c4a:	68fa      	ldr	r2, [r7, #12]
 8009c4c:	1ad2      	subs	r2, r2, r3
 8009c4e:	683b      	ldr	r3, [r7, #0]
 8009c50:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009c52:	4b0c      	ldr	r3, [pc, #48]	; (8009c84 <prvHeapInit+0xb0>)
 8009c54:	681a      	ldr	r2, [r3, #0]
 8009c56:	683b      	ldr	r3, [r7, #0]
 8009c58:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c5a:	683b      	ldr	r3, [r7, #0]
 8009c5c:	685a      	ldr	r2, [r3, #4]
 8009c5e:	4b0a      	ldr	r3, [pc, #40]	; (8009c88 <prvHeapInit+0xb4>)
 8009c60:	601a      	str	r2, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009c62:	683b      	ldr	r3, [r7, #0]
 8009c64:	685a      	ldr	r2, [r3, #4]
 8009c66:	4b09      	ldr	r3, [pc, #36]	; (8009c8c <prvHeapInit+0xb8>)
 8009c68:	601a      	str	r2, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009c6a:	4b09      	ldr	r3, [pc, #36]	; (8009c90 <prvHeapInit+0xbc>)
 8009c6c:	2280      	movs	r2, #128	; 0x80
 8009c6e:	0612      	lsls	r2, r2, #24
 8009c70:	601a      	str	r2, [r3, #0]
}
 8009c72:	46c0      	nop			; (mov r8, r8)
 8009c74:	46bd      	mov	sp, r7
 8009c76:	b004      	add	sp, #16
 8009c78:	bd80      	pop	{r7, pc}
 8009c7a:	46c0      	nop			; (mov r8, r8)
 8009c7c:	200007dc 	.word	0x200007dc
 8009c80:	200017dc 	.word	0x200017dc
 8009c84:	200017e4 	.word	0x200017e4
 8009c88:	200017ec 	.word	0x200017ec
 8009c8c:	200017e8 	.word	0x200017e8
 8009c90:	200017f8 	.word	0x200017f8

08009c94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b084      	sub	sp, #16
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009c9c:	4b27      	ldr	r3, [pc, #156]	; (8009d3c <prvInsertBlockIntoFreeList+0xa8>)
 8009c9e:	60fb      	str	r3, [r7, #12]
 8009ca0:	e002      	b.n	8009ca8 <prvInsertBlockIntoFreeList+0x14>
 8009ca2:	68fb      	ldr	r3, [r7, #12]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	60fb      	str	r3, [r7, #12]
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	687a      	ldr	r2, [r7, #4]
 8009cae:	429a      	cmp	r2, r3
 8009cb0:	d8f7      	bhi.n	8009ca2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009cb2:	68fb      	ldr	r3, [r7, #12]
 8009cb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8009cb6:	68fb      	ldr	r3, [r7, #12]
 8009cb8:	685b      	ldr	r3, [r3, #4]
 8009cba:	68ba      	ldr	r2, [r7, #8]
 8009cbc:	18d3      	adds	r3, r2, r3
 8009cbe:	687a      	ldr	r2, [r7, #4]
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d108      	bne.n	8009cd6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	685a      	ldr	r2, [r3, #4]
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	685b      	ldr	r3, [r3, #4]
 8009ccc:	18d2      	adds	r2, r2, r3
 8009cce:	68fb      	ldr	r3, [r7, #12]
 8009cd0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	685b      	ldr	r3, [r3, #4]
 8009cde:	68ba      	ldr	r2, [r7, #8]
 8009ce0:	18d2      	adds	r2, r2, r3
 8009ce2:	68fb      	ldr	r3, [r7, #12]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	429a      	cmp	r2, r3
 8009ce8:	d118      	bne.n	8009d1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681a      	ldr	r2, [r3, #0]
 8009cee:	4b14      	ldr	r3, [pc, #80]	; (8009d40 <prvInsertBlockIntoFreeList+0xac>)
 8009cf0:	681b      	ldr	r3, [r3, #0]
 8009cf2:	429a      	cmp	r2, r3
 8009cf4:	d00d      	beq.n	8009d12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	685a      	ldr	r2, [r3, #4]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	685b      	ldr	r3, [r3, #4]
 8009d00:	18d2      	adds	r2, r2, r3
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	681b      	ldr	r3, [r3, #0]
 8009d0a:	681a      	ldr	r2, [r3, #0]
 8009d0c:	687b      	ldr	r3, [r7, #4]
 8009d0e:	601a      	str	r2, [r3, #0]
 8009d10:	e008      	b.n	8009d24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8009d12:	4b0b      	ldr	r3, [pc, #44]	; (8009d40 <prvInsertBlockIntoFreeList+0xac>)
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	601a      	str	r2, [r3, #0]
 8009d1a:	e003      	b.n	8009d24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8009d1c:	68fb      	ldr	r3, [r7, #12]
 8009d1e:	681a      	ldr	r2, [r3, #0]
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8009d24:	68fa      	ldr	r2, [r7, #12]
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d002      	beq.n	8009d32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	687a      	ldr	r2, [r7, #4]
 8009d30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009d32:	46c0      	nop			; (mov r8, r8)
 8009d34:	46bd      	mov	sp, r7
 8009d36:	b004      	add	sp, #16
 8009d38:	bd80      	pop	{r7, pc}
 8009d3a:	46c0      	nop			; (mov r8, r8)
 8009d3c:	200017dc 	.word	0x200017dc
 8009d40:	200017e4 	.word	0x200017e4

08009d44 <atof>:
 8009d44:	b510      	push	{r4, lr}
 8009d46:	2100      	movs	r1, #0
 8009d48:	f000 ff2c 	bl	800aba4 <strtod>
 8009d4c:	bd10      	pop	{r4, pc}

08009d4e <atoi>:
 8009d4e:	b510      	push	{r4, lr}
 8009d50:	220a      	movs	r2, #10
 8009d52:	2100      	movs	r1, #0
 8009d54:	f000 ffba 	bl	800accc <strtol>
 8009d58:	bd10      	pop	{r4, pc}
	...

08009d5c <malloc>:
 8009d5c:	b510      	push	{r4, lr}
 8009d5e:	4b03      	ldr	r3, [pc, #12]	; (8009d6c <malloc+0x10>)
 8009d60:	0001      	movs	r1, r0
 8009d62:	6818      	ldr	r0, [r3, #0]
 8009d64:	f000 f830 	bl	8009dc8 <_malloc_r>
 8009d68:	bd10      	pop	{r4, pc}
 8009d6a:	46c0      	nop			; (mov r8, r8)
 8009d6c:	200001e0 	.word	0x200001e0

08009d70 <free>:
 8009d70:	b510      	push	{r4, lr}
 8009d72:	4b03      	ldr	r3, [pc, #12]	; (8009d80 <free+0x10>)
 8009d74:	0001      	movs	r1, r0
 8009d76:	6818      	ldr	r0, [r3, #0]
 8009d78:	f001 fa46 	bl	800b208 <_free_r>
 8009d7c:	bd10      	pop	{r4, pc}
 8009d7e:	46c0      	nop			; (mov r8, r8)
 8009d80:	200001e0 	.word	0x200001e0

08009d84 <sbrk_aligned>:
 8009d84:	b570      	push	{r4, r5, r6, lr}
 8009d86:	4e0f      	ldr	r6, [pc, #60]	; (8009dc4 <sbrk_aligned+0x40>)
 8009d88:	000d      	movs	r5, r1
 8009d8a:	6831      	ldr	r1, [r6, #0]
 8009d8c:	0004      	movs	r4, r0
 8009d8e:	2900      	cmp	r1, #0
 8009d90:	d102      	bne.n	8009d98 <sbrk_aligned+0x14>
 8009d92:	f001 f9b9 	bl	800b108 <_sbrk_r>
 8009d96:	6030      	str	r0, [r6, #0]
 8009d98:	0029      	movs	r1, r5
 8009d9a:	0020      	movs	r0, r4
 8009d9c:	f001 f9b4 	bl	800b108 <_sbrk_r>
 8009da0:	1c43      	adds	r3, r0, #1
 8009da2:	d00a      	beq.n	8009dba <sbrk_aligned+0x36>
 8009da4:	2303      	movs	r3, #3
 8009da6:	1cc5      	adds	r5, r0, #3
 8009da8:	439d      	bics	r5, r3
 8009daa:	42a8      	cmp	r0, r5
 8009dac:	d007      	beq.n	8009dbe <sbrk_aligned+0x3a>
 8009dae:	1a29      	subs	r1, r5, r0
 8009db0:	0020      	movs	r0, r4
 8009db2:	f001 f9a9 	bl	800b108 <_sbrk_r>
 8009db6:	3001      	adds	r0, #1
 8009db8:	d101      	bne.n	8009dbe <sbrk_aligned+0x3a>
 8009dba:	2501      	movs	r5, #1
 8009dbc:	426d      	negs	r5, r5
 8009dbe:	0028      	movs	r0, r5
 8009dc0:	bd70      	pop	{r4, r5, r6, pc}
 8009dc2:	46c0      	nop			; (mov r8, r8)
 8009dc4:	20001800 	.word	0x20001800

08009dc8 <_malloc_r>:
 8009dc8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009dca:	2203      	movs	r2, #3
 8009dcc:	1ccb      	adds	r3, r1, #3
 8009dce:	4393      	bics	r3, r2
 8009dd0:	3308      	adds	r3, #8
 8009dd2:	0006      	movs	r6, r0
 8009dd4:	001f      	movs	r7, r3
 8009dd6:	2b0c      	cmp	r3, #12
 8009dd8:	d238      	bcs.n	8009e4c <_malloc_r+0x84>
 8009dda:	270c      	movs	r7, #12
 8009ddc:	42b9      	cmp	r1, r7
 8009dde:	d837      	bhi.n	8009e50 <_malloc_r+0x88>
 8009de0:	0030      	movs	r0, r6
 8009de2:	f000 f873 	bl	8009ecc <__malloc_lock>
 8009de6:	4b38      	ldr	r3, [pc, #224]	; (8009ec8 <_malloc_r+0x100>)
 8009de8:	9300      	str	r3, [sp, #0]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	001c      	movs	r4, r3
 8009dee:	2c00      	cmp	r4, #0
 8009df0:	d133      	bne.n	8009e5a <_malloc_r+0x92>
 8009df2:	0039      	movs	r1, r7
 8009df4:	0030      	movs	r0, r6
 8009df6:	f7ff ffc5 	bl	8009d84 <sbrk_aligned>
 8009dfa:	0004      	movs	r4, r0
 8009dfc:	1c43      	adds	r3, r0, #1
 8009dfe:	d15e      	bne.n	8009ebe <_malloc_r+0xf6>
 8009e00:	9b00      	ldr	r3, [sp, #0]
 8009e02:	681c      	ldr	r4, [r3, #0]
 8009e04:	0025      	movs	r5, r4
 8009e06:	2d00      	cmp	r5, #0
 8009e08:	d14e      	bne.n	8009ea8 <_malloc_r+0xe0>
 8009e0a:	2c00      	cmp	r4, #0
 8009e0c:	d051      	beq.n	8009eb2 <_malloc_r+0xea>
 8009e0e:	6823      	ldr	r3, [r4, #0]
 8009e10:	0029      	movs	r1, r5
 8009e12:	18e3      	adds	r3, r4, r3
 8009e14:	0030      	movs	r0, r6
 8009e16:	9301      	str	r3, [sp, #4]
 8009e18:	f001 f976 	bl	800b108 <_sbrk_r>
 8009e1c:	9b01      	ldr	r3, [sp, #4]
 8009e1e:	4283      	cmp	r3, r0
 8009e20:	d147      	bne.n	8009eb2 <_malloc_r+0xea>
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	0030      	movs	r0, r6
 8009e26:	1aff      	subs	r7, r7, r3
 8009e28:	0039      	movs	r1, r7
 8009e2a:	f7ff ffab 	bl	8009d84 <sbrk_aligned>
 8009e2e:	3001      	adds	r0, #1
 8009e30:	d03f      	beq.n	8009eb2 <_malloc_r+0xea>
 8009e32:	6823      	ldr	r3, [r4, #0]
 8009e34:	19db      	adds	r3, r3, r7
 8009e36:	6023      	str	r3, [r4, #0]
 8009e38:	9b00      	ldr	r3, [sp, #0]
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d040      	beq.n	8009ec2 <_malloc_r+0xfa>
 8009e40:	685a      	ldr	r2, [r3, #4]
 8009e42:	42a2      	cmp	r2, r4
 8009e44:	d133      	bne.n	8009eae <_malloc_r+0xe6>
 8009e46:	2200      	movs	r2, #0
 8009e48:	605a      	str	r2, [r3, #4]
 8009e4a:	e014      	b.n	8009e76 <_malloc_r+0xae>
 8009e4c:	2b00      	cmp	r3, #0
 8009e4e:	dac5      	bge.n	8009ddc <_malloc_r+0x14>
 8009e50:	230c      	movs	r3, #12
 8009e52:	2500      	movs	r5, #0
 8009e54:	6033      	str	r3, [r6, #0]
 8009e56:	0028      	movs	r0, r5
 8009e58:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009e5a:	6821      	ldr	r1, [r4, #0]
 8009e5c:	1bc9      	subs	r1, r1, r7
 8009e5e:	d420      	bmi.n	8009ea2 <_malloc_r+0xda>
 8009e60:	290b      	cmp	r1, #11
 8009e62:	d918      	bls.n	8009e96 <_malloc_r+0xce>
 8009e64:	19e2      	adds	r2, r4, r7
 8009e66:	6027      	str	r7, [r4, #0]
 8009e68:	42a3      	cmp	r3, r4
 8009e6a:	d112      	bne.n	8009e92 <_malloc_r+0xca>
 8009e6c:	9b00      	ldr	r3, [sp, #0]
 8009e6e:	601a      	str	r2, [r3, #0]
 8009e70:	6863      	ldr	r3, [r4, #4]
 8009e72:	6011      	str	r1, [r2, #0]
 8009e74:	6053      	str	r3, [r2, #4]
 8009e76:	0030      	movs	r0, r6
 8009e78:	0025      	movs	r5, r4
 8009e7a:	f000 f82f 	bl	8009edc <__malloc_unlock>
 8009e7e:	2207      	movs	r2, #7
 8009e80:	350b      	adds	r5, #11
 8009e82:	1d23      	adds	r3, r4, #4
 8009e84:	4395      	bics	r5, r2
 8009e86:	1aea      	subs	r2, r5, r3
 8009e88:	429d      	cmp	r5, r3
 8009e8a:	d0e4      	beq.n	8009e56 <_malloc_r+0x8e>
 8009e8c:	1b5b      	subs	r3, r3, r5
 8009e8e:	50a3      	str	r3, [r4, r2]
 8009e90:	e7e1      	b.n	8009e56 <_malloc_r+0x8e>
 8009e92:	605a      	str	r2, [r3, #4]
 8009e94:	e7ec      	b.n	8009e70 <_malloc_r+0xa8>
 8009e96:	6862      	ldr	r2, [r4, #4]
 8009e98:	42a3      	cmp	r3, r4
 8009e9a:	d1d5      	bne.n	8009e48 <_malloc_r+0x80>
 8009e9c:	9b00      	ldr	r3, [sp, #0]
 8009e9e:	601a      	str	r2, [r3, #0]
 8009ea0:	e7e9      	b.n	8009e76 <_malloc_r+0xae>
 8009ea2:	0023      	movs	r3, r4
 8009ea4:	6864      	ldr	r4, [r4, #4]
 8009ea6:	e7a2      	b.n	8009dee <_malloc_r+0x26>
 8009ea8:	002c      	movs	r4, r5
 8009eaa:	686d      	ldr	r5, [r5, #4]
 8009eac:	e7ab      	b.n	8009e06 <_malloc_r+0x3e>
 8009eae:	0013      	movs	r3, r2
 8009eb0:	e7c4      	b.n	8009e3c <_malloc_r+0x74>
 8009eb2:	230c      	movs	r3, #12
 8009eb4:	0030      	movs	r0, r6
 8009eb6:	6033      	str	r3, [r6, #0]
 8009eb8:	f000 f810 	bl	8009edc <__malloc_unlock>
 8009ebc:	e7cb      	b.n	8009e56 <_malloc_r+0x8e>
 8009ebe:	6027      	str	r7, [r4, #0]
 8009ec0:	e7d9      	b.n	8009e76 <_malloc_r+0xae>
 8009ec2:	605b      	str	r3, [r3, #4]
 8009ec4:	deff      	udf	#255	; 0xff
 8009ec6:	46c0      	nop			; (mov r8, r8)
 8009ec8:	200017fc 	.word	0x200017fc

08009ecc <__malloc_lock>:
 8009ecc:	b510      	push	{r4, lr}
 8009ece:	4802      	ldr	r0, [pc, #8]	; (8009ed8 <__malloc_lock+0xc>)
 8009ed0:	f001 f96b 	bl	800b1aa <__retarget_lock_acquire_recursive>
 8009ed4:	bd10      	pop	{r4, pc}
 8009ed6:	46c0      	nop			; (mov r8, r8)
 8009ed8:	20001944 	.word	0x20001944

08009edc <__malloc_unlock>:
 8009edc:	b510      	push	{r4, lr}
 8009ede:	4802      	ldr	r0, [pc, #8]	; (8009ee8 <__malloc_unlock+0xc>)
 8009ee0:	f001 f964 	bl	800b1ac <__retarget_lock_release_recursive>
 8009ee4:	bd10      	pop	{r4, pc}
 8009ee6:	46c0      	nop			; (mov r8, r8)
 8009ee8:	20001944 	.word	0x20001944

08009eec <realloc>:
 8009eec:	b510      	push	{r4, lr}
 8009eee:	4b03      	ldr	r3, [pc, #12]	; (8009efc <realloc+0x10>)
 8009ef0:	000a      	movs	r2, r1
 8009ef2:	0001      	movs	r1, r0
 8009ef4:	6818      	ldr	r0, [r3, #0]
 8009ef6:	f000 f803 	bl	8009f00 <_realloc_r>
 8009efa:	bd10      	pop	{r4, pc}
 8009efc:	200001e0 	.word	0x200001e0

08009f00 <_realloc_r>:
 8009f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f02:	0007      	movs	r7, r0
 8009f04:	000e      	movs	r6, r1
 8009f06:	0014      	movs	r4, r2
 8009f08:	2900      	cmp	r1, #0
 8009f0a:	d105      	bne.n	8009f18 <_realloc_r+0x18>
 8009f0c:	0011      	movs	r1, r2
 8009f0e:	f7ff ff5b 	bl	8009dc8 <_malloc_r>
 8009f12:	0005      	movs	r5, r0
 8009f14:	0028      	movs	r0, r5
 8009f16:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 8009f18:	2a00      	cmp	r2, #0
 8009f1a:	d103      	bne.n	8009f24 <_realloc_r+0x24>
 8009f1c:	f001 f974 	bl	800b208 <_free_r>
 8009f20:	0025      	movs	r5, r4
 8009f22:	e7f7      	b.n	8009f14 <_realloc_r+0x14>
 8009f24:	f002 f9e3 	bl	800c2ee <_malloc_usable_size_r>
 8009f28:	9001      	str	r0, [sp, #4]
 8009f2a:	4284      	cmp	r4, r0
 8009f2c:	d803      	bhi.n	8009f36 <_realloc_r+0x36>
 8009f2e:	0035      	movs	r5, r6
 8009f30:	0843      	lsrs	r3, r0, #1
 8009f32:	42a3      	cmp	r3, r4
 8009f34:	d3ee      	bcc.n	8009f14 <_realloc_r+0x14>
 8009f36:	0021      	movs	r1, r4
 8009f38:	0038      	movs	r0, r7
 8009f3a:	f7ff ff45 	bl	8009dc8 <_malloc_r>
 8009f3e:	1e05      	subs	r5, r0, #0
 8009f40:	d0e8      	beq.n	8009f14 <_realloc_r+0x14>
 8009f42:	9b01      	ldr	r3, [sp, #4]
 8009f44:	0022      	movs	r2, r4
 8009f46:	429c      	cmp	r4, r3
 8009f48:	d900      	bls.n	8009f4c <_realloc_r+0x4c>
 8009f4a:	001a      	movs	r2, r3
 8009f4c:	0031      	movs	r1, r6
 8009f4e:	0028      	movs	r0, r5
 8009f50:	f001 f92d 	bl	800b1ae <memcpy>
 8009f54:	0031      	movs	r1, r6
 8009f56:	0038      	movs	r0, r7
 8009f58:	f001 f956 	bl	800b208 <_free_r>
 8009f5c:	e7da      	b.n	8009f14 <_realloc_r+0x14>
	...

08009f60 <sulp>:
 8009f60:	b570      	push	{r4, r5, r6, lr}
 8009f62:	0016      	movs	r6, r2
 8009f64:	000d      	movs	r5, r1
 8009f66:	f002 f88d 	bl	800c084 <__ulp>
 8009f6a:	2e00      	cmp	r6, #0
 8009f6c:	d00d      	beq.n	8009f8a <sulp+0x2a>
 8009f6e:	236b      	movs	r3, #107	; 0x6b
 8009f70:	006a      	lsls	r2, r5, #1
 8009f72:	0d52      	lsrs	r2, r2, #21
 8009f74:	1a9b      	subs	r3, r3, r2
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	dd07      	ble.n	8009f8a <sulp+0x2a>
 8009f7a:	2400      	movs	r4, #0
 8009f7c:	4a03      	ldr	r2, [pc, #12]	; (8009f8c <sulp+0x2c>)
 8009f7e:	051b      	lsls	r3, r3, #20
 8009f80:	189d      	adds	r5, r3, r2
 8009f82:	002b      	movs	r3, r5
 8009f84:	0022      	movs	r2, r4
 8009f86:	f7f7 fb5b 	bl	8001640 <__aeabi_dmul>
 8009f8a:	bd70      	pop	{r4, r5, r6, pc}
 8009f8c:	3ff00000 	.word	0x3ff00000

08009f90 <_strtod_l>:
 8009f90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009f92:	b0a1      	sub	sp, #132	; 0x84
 8009f94:	9219      	str	r2, [sp, #100]	; 0x64
 8009f96:	2200      	movs	r2, #0
 8009f98:	2600      	movs	r6, #0
 8009f9a:	2700      	movs	r7, #0
 8009f9c:	9004      	str	r0, [sp, #16]
 8009f9e:	9107      	str	r1, [sp, #28]
 8009fa0:	921c      	str	r2, [sp, #112]	; 0x70
 8009fa2:	911b      	str	r1, [sp, #108]	; 0x6c
 8009fa4:	780a      	ldrb	r2, [r1, #0]
 8009fa6:	2a2b      	cmp	r2, #43	; 0x2b
 8009fa8:	d055      	beq.n	800a056 <_strtod_l+0xc6>
 8009faa:	d841      	bhi.n	800a030 <_strtod_l+0xa0>
 8009fac:	2a0d      	cmp	r2, #13
 8009fae:	d83b      	bhi.n	800a028 <_strtod_l+0x98>
 8009fb0:	2a08      	cmp	r2, #8
 8009fb2:	d83b      	bhi.n	800a02c <_strtod_l+0x9c>
 8009fb4:	2a00      	cmp	r2, #0
 8009fb6:	d044      	beq.n	800a042 <_strtod_l+0xb2>
 8009fb8:	2200      	movs	r2, #0
 8009fba:	920f      	str	r2, [sp, #60]	; 0x3c
 8009fbc:	2100      	movs	r1, #0
 8009fbe:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8009fc0:	9109      	str	r1, [sp, #36]	; 0x24
 8009fc2:	782a      	ldrb	r2, [r5, #0]
 8009fc4:	2a30      	cmp	r2, #48	; 0x30
 8009fc6:	d000      	beq.n	8009fca <_strtod_l+0x3a>
 8009fc8:	e085      	b.n	800a0d6 <_strtod_l+0x146>
 8009fca:	786a      	ldrb	r2, [r5, #1]
 8009fcc:	3120      	adds	r1, #32
 8009fce:	438a      	bics	r2, r1
 8009fd0:	2a58      	cmp	r2, #88	; 0x58
 8009fd2:	d000      	beq.n	8009fd6 <_strtod_l+0x46>
 8009fd4:	e075      	b.n	800a0c2 <_strtod_l+0x132>
 8009fd6:	9302      	str	r3, [sp, #8]
 8009fd8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8009fda:	4a97      	ldr	r2, [pc, #604]	; (800a238 <_strtod_l+0x2a8>)
 8009fdc:	9301      	str	r3, [sp, #4]
 8009fde:	ab1c      	add	r3, sp, #112	; 0x70
 8009fe0:	9300      	str	r3, [sp, #0]
 8009fe2:	9804      	ldr	r0, [sp, #16]
 8009fe4:	ab1d      	add	r3, sp, #116	; 0x74
 8009fe6:	a91b      	add	r1, sp, #108	; 0x6c
 8009fe8:	f001 f9c2 	bl	800b370 <__gethex>
 8009fec:	230f      	movs	r3, #15
 8009fee:	0002      	movs	r2, r0
 8009ff0:	401a      	ands	r2, r3
 8009ff2:	0004      	movs	r4, r0
 8009ff4:	9205      	str	r2, [sp, #20]
 8009ff6:	4218      	tst	r0, r3
 8009ff8:	d005      	beq.n	800a006 <_strtod_l+0x76>
 8009ffa:	2a06      	cmp	r2, #6
 8009ffc:	d12d      	bne.n	800a05a <_strtod_l+0xca>
 8009ffe:	1c6b      	adds	r3, r5, #1
 800a000:	931b      	str	r3, [sp, #108]	; 0x6c
 800a002:	2300      	movs	r3, #0
 800a004:	930f      	str	r3, [sp, #60]	; 0x3c
 800a006:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d002      	beq.n	800a012 <_strtod_l+0x82>
 800a00c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a00e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a010:	6013      	str	r3, [r2, #0]
 800a012:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800a014:	2b00      	cmp	r3, #0
 800a016:	d01b      	beq.n	800a050 <_strtod_l+0xc0>
 800a018:	2380      	movs	r3, #128	; 0x80
 800a01a:	0032      	movs	r2, r6
 800a01c:	061b      	lsls	r3, r3, #24
 800a01e:	18fb      	adds	r3, r7, r3
 800a020:	0010      	movs	r0, r2
 800a022:	0019      	movs	r1, r3
 800a024:	b021      	add	sp, #132	; 0x84
 800a026:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a028:	2a20      	cmp	r2, #32
 800a02a:	d1c5      	bne.n	8009fb8 <_strtod_l+0x28>
 800a02c:	3101      	adds	r1, #1
 800a02e:	e7b8      	b.n	8009fa2 <_strtod_l+0x12>
 800a030:	2a2d      	cmp	r2, #45	; 0x2d
 800a032:	d1c1      	bne.n	8009fb8 <_strtod_l+0x28>
 800a034:	3a2c      	subs	r2, #44	; 0x2c
 800a036:	920f      	str	r2, [sp, #60]	; 0x3c
 800a038:	1c4a      	adds	r2, r1, #1
 800a03a:	921b      	str	r2, [sp, #108]	; 0x6c
 800a03c:	784a      	ldrb	r2, [r1, #1]
 800a03e:	2a00      	cmp	r2, #0
 800a040:	d1bc      	bne.n	8009fbc <_strtod_l+0x2c>
 800a042:	9b07      	ldr	r3, [sp, #28]
 800a044:	931b      	str	r3, [sp, #108]	; 0x6c
 800a046:	2300      	movs	r3, #0
 800a048:	930f      	str	r3, [sp, #60]	; 0x3c
 800a04a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	d1dd      	bne.n	800a00c <_strtod_l+0x7c>
 800a050:	0032      	movs	r2, r6
 800a052:	003b      	movs	r3, r7
 800a054:	e7e4      	b.n	800a020 <_strtod_l+0x90>
 800a056:	2200      	movs	r2, #0
 800a058:	e7ed      	b.n	800a036 <_strtod_l+0xa6>
 800a05a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a05c:	2a00      	cmp	r2, #0
 800a05e:	d007      	beq.n	800a070 <_strtod_l+0xe0>
 800a060:	2135      	movs	r1, #53	; 0x35
 800a062:	a81e      	add	r0, sp, #120	; 0x78
 800a064:	f002 f8ff 	bl	800c266 <__copybits>
 800a068:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a06a:	9804      	ldr	r0, [sp, #16]
 800a06c:	f001 fcc8 	bl	800ba00 <_Bfree>
 800a070:	9805      	ldr	r0, [sp, #20]
 800a072:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a074:	3801      	subs	r0, #1
 800a076:	2804      	cmp	r0, #4
 800a078:	d806      	bhi.n	800a088 <_strtod_l+0xf8>
 800a07a:	f7f6 f84d 	bl	8000118 <__gnu_thumb1_case_uqi>
 800a07e:	0312      	.short	0x0312
 800a080:	1e1c      	.short	0x1e1c
 800a082:	12          	.byte	0x12
 800a083:	00          	.byte	0x00
 800a084:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a086:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
 800a088:	05e4      	lsls	r4, r4, #23
 800a08a:	d502      	bpl.n	800a092 <_strtod_l+0x102>
 800a08c:	2380      	movs	r3, #128	; 0x80
 800a08e:	061b      	lsls	r3, r3, #24
 800a090:	431f      	orrs	r7, r3
 800a092:	4b6a      	ldr	r3, [pc, #424]	; (800a23c <_strtod_l+0x2ac>)
 800a094:	423b      	tst	r3, r7
 800a096:	d1b6      	bne.n	800a006 <_strtod_l+0x76>
 800a098:	f001 f85c 	bl	800b154 <__errno>
 800a09c:	2322      	movs	r3, #34	; 0x22
 800a09e:	6003      	str	r3, [r0, #0]
 800a0a0:	e7b1      	b.n	800a006 <_strtod_l+0x76>
 800a0a2:	4967      	ldr	r1, [pc, #412]	; (800a240 <_strtod_l+0x2b0>)
 800a0a4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 800a0a6:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a0a8:	400a      	ands	r2, r1
 800a0aa:	4966      	ldr	r1, [pc, #408]	; (800a244 <_strtod_l+0x2b4>)
 800a0ac:	185b      	adds	r3, r3, r1
 800a0ae:	051b      	lsls	r3, r3, #20
 800a0b0:	431a      	orrs	r2, r3
 800a0b2:	0017      	movs	r7, r2
 800a0b4:	e7e8      	b.n	800a088 <_strtod_l+0xf8>
 800a0b6:	4f61      	ldr	r7, [pc, #388]	; (800a23c <_strtod_l+0x2ac>)
 800a0b8:	e7e6      	b.n	800a088 <_strtod_l+0xf8>
 800a0ba:	2601      	movs	r6, #1
 800a0bc:	4f62      	ldr	r7, [pc, #392]	; (800a248 <_strtod_l+0x2b8>)
 800a0be:	4276      	negs	r6, r6
 800a0c0:	e7e2      	b.n	800a088 <_strtod_l+0xf8>
 800a0c2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0c4:	1c5a      	adds	r2, r3, #1
 800a0c6:	921b      	str	r2, [sp, #108]	; 0x6c
 800a0c8:	785b      	ldrb	r3, [r3, #1]
 800a0ca:	2b30      	cmp	r3, #48	; 0x30
 800a0cc:	d0f9      	beq.n	800a0c2 <_strtod_l+0x132>
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d099      	beq.n	800a006 <_strtod_l+0x76>
 800a0d2:	2301      	movs	r3, #1
 800a0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a0d6:	2500      	movs	r5, #0
 800a0d8:	220a      	movs	r2, #10
 800a0da:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a0dc:	950d      	str	r5, [sp, #52]	; 0x34
 800a0de:	9310      	str	r3, [sp, #64]	; 0x40
 800a0e0:	9508      	str	r5, [sp, #32]
 800a0e2:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800a0e4:	7804      	ldrb	r4, [r0, #0]
 800a0e6:	0023      	movs	r3, r4
 800a0e8:	3b30      	subs	r3, #48	; 0x30
 800a0ea:	b2d9      	uxtb	r1, r3
 800a0ec:	2909      	cmp	r1, #9
 800a0ee:	d927      	bls.n	800a140 <_strtod_l+0x1b0>
 800a0f0:	2201      	movs	r2, #1
 800a0f2:	4956      	ldr	r1, [pc, #344]	; (800a24c <_strtod_l+0x2bc>)
 800a0f4:	f000 ff2e 	bl	800af54 <strncmp>
 800a0f8:	2800      	cmp	r0, #0
 800a0fa:	d031      	beq.n	800a160 <_strtod_l+0x1d0>
 800a0fc:	2000      	movs	r0, #0
 800a0fe:	0023      	movs	r3, r4
 800a100:	4684      	mov	ip, r0
 800a102:	9a08      	ldr	r2, [sp, #32]
 800a104:	900c      	str	r0, [sp, #48]	; 0x30
 800a106:	9205      	str	r2, [sp, #20]
 800a108:	2220      	movs	r2, #32
 800a10a:	0019      	movs	r1, r3
 800a10c:	4391      	bics	r1, r2
 800a10e:	000a      	movs	r2, r1
 800a110:	2100      	movs	r1, #0
 800a112:	9106      	str	r1, [sp, #24]
 800a114:	2a45      	cmp	r2, #69	; 0x45
 800a116:	d000      	beq.n	800a11a <_strtod_l+0x18a>
 800a118:	e0c2      	b.n	800a2a0 <_strtod_l+0x310>
 800a11a:	9b05      	ldr	r3, [sp, #20]
 800a11c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a11e:	4303      	orrs	r3, r0
 800a120:	4313      	orrs	r3, r2
 800a122:	428b      	cmp	r3, r1
 800a124:	d08d      	beq.n	800a042 <_strtod_l+0xb2>
 800a126:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a128:	9307      	str	r3, [sp, #28]
 800a12a:	3301      	adds	r3, #1
 800a12c:	931b      	str	r3, [sp, #108]	; 0x6c
 800a12e:	9b07      	ldr	r3, [sp, #28]
 800a130:	785b      	ldrb	r3, [r3, #1]
 800a132:	2b2b      	cmp	r3, #43	; 0x2b
 800a134:	d071      	beq.n	800a21a <_strtod_l+0x28a>
 800a136:	000c      	movs	r4, r1
 800a138:	2b2d      	cmp	r3, #45	; 0x2d
 800a13a:	d174      	bne.n	800a226 <_strtod_l+0x296>
 800a13c:	2401      	movs	r4, #1
 800a13e:	e06d      	b.n	800a21c <_strtod_l+0x28c>
 800a140:	9908      	ldr	r1, [sp, #32]
 800a142:	2908      	cmp	r1, #8
 800a144:	dc09      	bgt.n	800a15a <_strtod_l+0x1ca>
 800a146:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a148:	4351      	muls	r1, r2
 800a14a:	185b      	adds	r3, r3, r1
 800a14c:	930d      	str	r3, [sp, #52]	; 0x34
 800a14e:	9b08      	ldr	r3, [sp, #32]
 800a150:	3001      	adds	r0, #1
 800a152:	3301      	adds	r3, #1
 800a154:	9308      	str	r3, [sp, #32]
 800a156:	901b      	str	r0, [sp, #108]	; 0x6c
 800a158:	e7c3      	b.n	800a0e2 <_strtod_l+0x152>
 800a15a:	4355      	muls	r5, r2
 800a15c:	195d      	adds	r5, r3, r5
 800a15e:	e7f6      	b.n	800a14e <_strtod_l+0x1be>
 800a160:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a162:	1c5a      	adds	r2, r3, #1
 800a164:	921b      	str	r2, [sp, #108]	; 0x6c
 800a166:	9a08      	ldr	r2, [sp, #32]
 800a168:	785b      	ldrb	r3, [r3, #1]
 800a16a:	2a00      	cmp	r2, #0
 800a16c:	d03a      	beq.n	800a1e4 <_strtod_l+0x254>
 800a16e:	900c      	str	r0, [sp, #48]	; 0x30
 800a170:	9205      	str	r2, [sp, #20]
 800a172:	001a      	movs	r2, r3
 800a174:	3a30      	subs	r2, #48	; 0x30
 800a176:	2a09      	cmp	r2, #9
 800a178:	d912      	bls.n	800a1a0 <_strtod_l+0x210>
 800a17a:	2201      	movs	r2, #1
 800a17c:	4694      	mov	ip, r2
 800a17e:	e7c3      	b.n	800a108 <_strtod_l+0x178>
 800a180:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a182:	3001      	adds	r0, #1
 800a184:	1c5a      	adds	r2, r3, #1
 800a186:	921b      	str	r2, [sp, #108]	; 0x6c
 800a188:	785b      	ldrb	r3, [r3, #1]
 800a18a:	2b30      	cmp	r3, #48	; 0x30
 800a18c:	d0f8      	beq.n	800a180 <_strtod_l+0x1f0>
 800a18e:	001a      	movs	r2, r3
 800a190:	3a31      	subs	r2, #49	; 0x31
 800a192:	2a08      	cmp	r2, #8
 800a194:	d83c      	bhi.n	800a210 <_strtod_l+0x280>
 800a196:	900c      	str	r0, [sp, #48]	; 0x30
 800a198:	2000      	movs	r0, #0
 800a19a:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a19c:	9005      	str	r0, [sp, #20]
 800a19e:	9210      	str	r2, [sp, #64]	; 0x40
 800a1a0:	001a      	movs	r2, r3
 800a1a2:	1c41      	adds	r1, r0, #1
 800a1a4:	3a30      	subs	r2, #48	; 0x30
 800a1a6:	2b30      	cmp	r3, #48	; 0x30
 800a1a8:	d016      	beq.n	800a1d8 <_strtod_l+0x248>
 800a1aa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a1ac:	185b      	adds	r3, r3, r1
 800a1ae:	930c      	str	r3, [sp, #48]	; 0x30
 800a1b0:	9b05      	ldr	r3, [sp, #20]
 800a1b2:	210a      	movs	r1, #10
 800a1b4:	469c      	mov	ip, r3
 800a1b6:	4484      	add	ip, r0
 800a1b8:	4563      	cmp	r3, ip
 800a1ba:	d115      	bne.n	800a1e8 <_strtod_l+0x258>
 800a1bc:	9905      	ldr	r1, [sp, #20]
 800a1be:	9b05      	ldr	r3, [sp, #20]
 800a1c0:	3101      	adds	r1, #1
 800a1c2:	1809      	adds	r1, r1, r0
 800a1c4:	181b      	adds	r3, r3, r0
 800a1c6:	9105      	str	r1, [sp, #20]
 800a1c8:	2b08      	cmp	r3, #8
 800a1ca:	dc19      	bgt.n	800a200 <_strtod_l+0x270>
 800a1cc:	230a      	movs	r3, #10
 800a1ce:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a1d0:	434b      	muls	r3, r1
 800a1d2:	2100      	movs	r1, #0
 800a1d4:	18d3      	adds	r3, r2, r3
 800a1d6:	930d      	str	r3, [sp, #52]	; 0x34
 800a1d8:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a1da:	0008      	movs	r0, r1
 800a1dc:	1c5a      	adds	r2, r3, #1
 800a1de:	921b      	str	r2, [sp, #108]	; 0x6c
 800a1e0:	785b      	ldrb	r3, [r3, #1]
 800a1e2:	e7c6      	b.n	800a172 <_strtod_l+0x1e2>
 800a1e4:	9808      	ldr	r0, [sp, #32]
 800a1e6:	e7d0      	b.n	800a18a <_strtod_l+0x1fa>
 800a1e8:	1c5c      	adds	r4, r3, #1
 800a1ea:	2b08      	cmp	r3, #8
 800a1ec:	dc04      	bgt.n	800a1f8 <_strtod_l+0x268>
 800a1ee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a1f0:	434b      	muls	r3, r1
 800a1f2:	930d      	str	r3, [sp, #52]	; 0x34
 800a1f4:	0023      	movs	r3, r4
 800a1f6:	e7df      	b.n	800a1b8 <_strtod_l+0x228>
 800a1f8:	2c10      	cmp	r4, #16
 800a1fa:	dcfb      	bgt.n	800a1f4 <_strtod_l+0x264>
 800a1fc:	434d      	muls	r5, r1
 800a1fe:	e7f9      	b.n	800a1f4 <_strtod_l+0x264>
 800a200:	9b05      	ldr	r3, [sp, #20]
 800a202:	2100      	movs	r1, #0
 800a204:	2b10      	cmp	r3, #16
 800a206:	dce7      	bgt.n	800a1d8 <_strtod_l+0x248>
 800a208:	230a      	movs	r3, #10
 800a20a:	435d      	muls	r5, r3
 800a20c:	1955      	adds	r5, r2, r5
 800a20e:	e7e3      	b.n	800a1d8 <_strtod_l+0x248>
 800a210:	2200      	movs	r2, #0
 800a212:	920c      	str	r2, [sp, #48]	; 0x30
 800a214:	9205      	str	r2, [sp, #20]
 800a216:	3201      	adds	r2, #1
 800a218:	e7b0      	b.n	800a17c <_strtod_l+0x1ec>
 800a21a:	2400      	movs	r4, #0
 800a21c:	9b07      	ldr	r3, [sp, #28]
 800a21e:	3302      	adds	r3, #2
 800a220:	931b      	str	r3, [sp, #108]	; 0x6c
 800a222:	9b07      	ldr	r3, [sp, #28]
 800a224:	789b      	ldrb	r3, [r3, #2]
 800a226:	001a      	movs	r2, r3
 800a228:	3a30      	subs	r2, #48	; 0x30
 800a22a:	2a09      	cmp	r2, #9
 800a22c:	d914      	bls.n	800a258 <_strtod_l+0x2c8>
 800a22e:	9a07      	ldr	r2, [sp, #28]
 800a230:	921b      	str	r2, [sp, #108]	; 0x6c
 800a232:	2200      	movs	r2, #0
 800a234:	e033      	b.n	800a29e <_strtod_l+0x30e>
 800a236:	46c0      	nop			; (mov r8, r8)
 800a238:	0800d9a4 	.word	0x0800d9a4
 800a23c:	7ff00000 	.word	0x7ff00000
 800a240:	ffefffff 	.word	0xffefffff
 800a244:	00000433 	.word	0x00000433
 800a248:	7fffffff 	.word	0x7fffffff
 800a24c:	0800d994 	.word	0x0800d994
 800a250:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	921b      	str	r2, [sp, #108]	; 0x6c
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	2b30      	cmp	r3, #48	; 0x30
 800a25a:	d0f9      	beq.n	800a250 <_strtod_l+0x2c0>
 800a25c:	2200      	movs	r2, #0
 800a25e:	9206      	str	r2, [sp, #24]
 800a260:	001a      	movs	r2, r3
 800a262:	3a31      	subs	r2, #49	; 0x31
 800a264:	2a08      	cmp	r2, #8
 800a266:	d81b      	bhi.n	800a2a0 <_strtod_l+0x310>
 800a268:	3b30      	subs	r3, #48	; 0x30
 800a26a:	930e      	str	r3, [sp, #56]	; 0x38
 800a26c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a26e:	9306      	str	r3, [sp, #24]
 800a270:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a272:	1c59      	adds	r1, r3, #1
 800a274:	911b      	str	r1, [sp, #108]	; 0x6c
 800a276:	785b      	ldrb	r3, [r3, #1]
 800a278:	001a      	movs	r2, r3
 800a27a:	3a30      	subs	r2, #48	; 0x30
 800a27c:	2a09      	cmp	r2, #9
 800a27e:	d93a      	bls.n	800a2f6 <_strtod_l+0x366>
 800a280:	9a06      	ldr	r2, [sp, #24]
 800a282:	1a8a      	subs	r2, r1, r2
 800a284:	49b2      	ldr	r1, [pc, #712]	; (800a550 <_strtod_l+0x5c0>)
 800a286:	9106      	str	r1, [sp, #24]
 800a288:	2a08      	cmp	r2, #8
 800a28a:	dc04      	bgt.n	800a296 <_strtod_l+0x306>
 800a28c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a28e:	9206      	str	r2, [sp, #24]
 800a290:	428a      	cmp	r2, r1
 800a292:	dd00      	ble.n	800a296 <_strtod_l+0x306>
 800a294:	9106      	str	r1, [sp, #24]
 800a296:	2c00      	cmp	r4, #0
 800a298:	d002      	beq.n	800a2a0 <_strtod_l+0x310>
 800a29a:	9a06      	ldr	r2, [sp, #24]
 800a29c:	4252      	negs	r2, r2
 800a29e:	9206      	str	r2, [sp, #24]
 800a2a0:	9a05      	ldr	r2, [sp, #20]
 800a2a2:	2a00      	cmp	r2, #0
 800a2a4:	d14d      	bne.n	800a342 <_strtod_l+0x3b2>
 800a2a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a2a8:	4310      	orrs	r0, r2
 800a2aa:	d000      	beq.n	800a2ae <_strtod_l+0x31e>
 800a2ac:	e6ab      	b.n	800a006 <_strtod_l+0x76>
 800a2ae:	4662      	mov	r2, ip
 800a2b0:	2a00      	cmp	r2, #0
 800a2b2:	d000      	beq.n	800a2b6 <_strtod_l+0x326>
 800a2b4:	e6c5      	b.n	800a042 <_strtod_l+0xb2>
 800a2b6:	2b69      	cmp	r3, #105	; 0x69
 800a2b8:	d027      	beq.n	800a30a <_strtod_l+0x37a>
 800a2ba:	dc23      	bgt.n	800a304 <_strtod_l+0x374>
 800a2bc:	2b49      	cmp	r3, #73	; 0x49
 800a2be:	d024      	beq.n	800a30a <_strtod_l+0x37a>
 800a2c0:	2b4e      	cmp	r3, #78	; 0x4e
 800a2c2:	d000      	beq.n	800a2c6 <_strtod_l+0x336>
 800a2c4:	e6bd      	b.n	800a042 <_strtod_l+0xb2>
 800a2c6:	49a3      	ldr	r1, [pc, #652]	; (800a554 <_strtod_l+0x5c4>)
 800a2c8:	a81b      	add	r0, sp, #108	; 0x6c
 800a2ca:	f001 fa87 	bl	800b7dc <__match>
 800a2ce:	2800      	cmp	r0, #0
 800a2d0:	d100      	bne.n	800a2d4 <_strtod_l+0x344>
 800a2d2:	e6b6      	b.n	800a042 <_strtod_l+0xb2>
 800a2d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a2d6:	781b      	ldrb	r3, [r3, #0]
 800a2d8:	2b28      	cmp	r3, #40	; 0x28
 800a2da:	d12c      	bne.n	800a336 <_strtod_l+0x3a6>
 800a2dc:	499e      	ldr	r1, [pc, #632]	; (800a558 <_strtod_l+0x5c8>)
 800a2de:	aa1e      	add	r2, sp, #120	; 0x78
 800a2e0:	a81b      	add	r0, sp, #108	; 0x6c
 800a2e2:	f001 fa8f 	bl	800b804 <__hexnan>
 800a2e6:	2805      	cmp	r0, #5
 800a2e8:	d125      	bne.n	800a336 <_strtod_l+0x3a6>
 800a2ea:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800a2ec:	4a9b      	ldr	r2, [pc, #620]	; (800a55c <_strtod_l+0x5cc>)
 800a2ee:	9e1e      	ldr	r6, [sp, #120]	; 0x78
 800a2f0:	431a      	orrs	r2, r3
 800a2f2:	0017      	movs	r7, r2
 800a2f4:	e687      	b.n	800a006 <_strtod_l+0x76>
 800a2f6:	220a      	movs	r2, #10
 800a2f8:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a2fa:	434a      	muls	r2, r1
 800a2fc:	18d2      	adds	r2, r2, r3
 800a2fe:	3a30      	subs	r2, #48	; 0x30
 800a300:	920e      	str	r2, [sp, #56]	; 0x38
 800a302:	e7b5      	b.n	800a270 <_strtod_l+0x2e0>
 800a304:	2b6e      	cmp	r3, #110	; 0x6e
 800a306:	d0de      	beq.n	800a2c6 <_strtod_l+0x336>
 800a308:	e69b      	b.n	800a042 <_strtod_l+0xb2>
 800a30a:	4995      	ldr	r1, [pc, #596]	; (800a560 <_strtod_l+0x5d0>)
 800a30c:	a81b      	add	r0, sp, #108	; 0x6c
 800a30e:	f001 fa65 	bl	800b7dc <__match>
 800a312:	2800      	cmp	r0, #0
 800a314:	d100      	bne.n	800a318 <_strtod_l+0x388>
 800a316:	e694      	b.n	800a042 <_strtod_l+0xb2>
 800a318:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a31a:	4992      	ldr	r1, [pc, #584]	; (800a564 <_strtod_l+0x5d4>)
 800a31c:	3b01      	subs	r3, #1
 800a31e:	a81b      	add	r0, sp, #108	; 0x6c
 800a320:	931b      	str	r3, [sp, #108]	; 0x6c
 800a322:	f001 fa5b 	bl	800b7dc <__match>
 800a326:	2800      	cmp	r0, #0
 800a328:	d102      	bne.n	800a330 <_strtod_l+0x3a0>
 800a32a:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a32c:	3301      	adds	r3, #1
 800a32e:	931b      	str	r3, [sp, #108]	; 0x6c
 800a330:	2600      	movs	r6, #0
 800a332:	4f8a      	ldr	r7, [pc, #552]	; (800a55c <_strtod_l+0x5cc>)
 800a334:	e667      	b.n	800a006 <_strtod_l+0x76>
 800a336:	488c      	ldr	r0, [pc, #560]	; (800a568 <_strtod_l+0x5d8>)
 800a338:	f000 ff42 	bl	800b1c0 <nan>
 800a33c:	0006      	movs	r6, r0
 800a33e:	000f      	movs	r7, r1
 800a340:	e661      	b.n	800a006 <_strtod_l+0x76>
 800a342:	9b06      	ldr	r3, [sp, #24]
 800a344:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a346:	1a9b      	subs	r3, r3, r2
 800a348:	9309      	str	r3, [sp, #36]	; 0x24
 800a34a:	9b08      	ldr	r3, [sp, #32]
 800a34c:	2b00      	cmp	r3, #0
 800a34e:	d101      	bne.n	800a354 <_strtod_l+0x3c4>
 800a350:	9b05      	ldr	r3, [sp, #20]
 800a352:	9308      	str	r3, [sp, #32]
 800a354:	9c05      	ldr	r4, [sp, #20]
 800a356:	2c10      	cmp	r4, #16
 800a358:	dd00      	ble.n	800a35c <_strtod_l+0x3cc>
 800a35a:	2410      	movs	r4, #16
 800a35c:	980d      	ldr	r0, [sp, #52]	; 0x34
 800a35e:	f7f8 f837 	bl	80023d0 <__aeabi_ui2d>
 800a362:	9b05      	ldr	r3, [sp, #20]
 800a364:	0006      	movs	r6, r0
 800a366:	000f      	movs	r7, r1
 800a368:	2b09      	cmp	r3, #9
 800a36a:	dd15      	ble.n	800a398 <_strtod_l+0x408>
 800a36c:	0022      	movs	r2, r4
 800a36e:	4b7f      	ldr	r3, [pc, #508]	; (800a56c <_strtod_l+0x5dc>)
 800a370:	3a09      	subs	r2, #9
 800a372:	00d2      	lsls	r2, r2, #3
 800a374:	189b      	adds	r3, r3, r2
 800a376:	681a      	ldr	r2, [r3, #0]
 800a378:	685b      	ldr	r3, [r3, #4]
 800a37a:	f7f7 f961 	bl	8001640 <__aeabi_dmul>
 800a37e:	0006      	movs	r6, r0
 800a380:	0028      	movs	r0, r5
 800a382:	000f      	movs	r7, r1
 800a384:	f7f8 f824 	bl	80023d0 <__aeabi_ui2d>
 800a388:	0002      	movs	r2, r0
 800a38a:	000b      	movs	r3, r1
 800a38c:	0030      	movs	r0, r6
 800a38e:	0039      	movs	r1, r7
 800a390:	f7f6 f9fc 	bl	800078c <__aeabi_dadd>
 800a394:	0006      	movs	r6, r0
 800a396:	000f      	movs	r7, r1
 800a398:	9b05      	ldr	r3, [sp, #20]
 800a39a:	2b0f      	cmp	r3, #15
 800a39c:	dc39      	bgt.n	800a412 <_strtod_l+0x482>
 800a39e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d100      	bne.n	800a3a6 <_strtod_l+0x416>
 800a3a4:	e62f      	b.n	800a006 <_strtod_l+0x76>
 800a3a6:	dd24      	ble.n	800a3f2 <_strtod_l+0x462>
 800a3a8:	2b16      	cmp	r3, #22
 800a3aa:	dc09      	bgt.n	800a3c0 <_strtod_l+0x430>
 800a3ac:	496f      	ldr	r1, [pc, #444]	; (800a56c <_strtod_l+0x5dc>)
 800a3ae:	00db      	lsls	r3, r3, #3
 800a3b0:	18c9      	adds	r1, r1, r3
 800a3b2:	0032      	movs	r2, r6
 800a3b4:	6808      	ldr	r0, [r1, #0]
 800a3b6:	6849      	ldr	r1, [r1, #4]
 800a3b8:	003b      	movs	r3, r7
 800a3ba:	f7f7 f941 	bl	8001640 <__aeabi_dmul>
 800a3be:	e7bd      	b.n	800a33c <_strtod_l+0x3ac>
 800a3c0:	2325      	movs	r3, #37	; 0x25
 800a3c2:	9a05      	ldr	r2, [sp, #20]
 800a3c4:	1a9b      	subs	r3, r3, r2
 800a3c6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a3c8:	4293      	cmp	r3, r2
 800a3ca:	db22      	blt.n	800a412 <_strtod_l+0x482>
 800a3cc:	240f      	movs	r4, #15
 800a3ce:	9b05      	ldr	r3, [sp, #20]
 800a3d0:	4d66      	ldr	r5, [pc, #408]	; (800a56c <_strtod_l+0x5dc>)
 800a3d2:	1ae4      	subs	r4, r4, r3
 800a3d4:	00e1      	lsls	r1, r4, #3
 800a3d6:	1869      	adds	r1, r5, r1
 800a3d8:	0032      	movs	r2, r6
 800a3da:	6808      	ldr	r0, [r1, #0]
 800a3dc:	6849      	ldr	r1, [r1, #4]
 800a3de:	003b      	movs	r3, r7
 800a3e0:	f7f7 f92e 	bl	8001640 <__aeabi_dmul>
 800a3e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3e6:	1b1c      	subs	r4, r3, r4
 800a3e8:	00e4      	lsls	r4, r4, #3
 800a3ea:	192d      	adds	r5, r5, r4
 800a3ec:	682a      	ldr	r2, [r5, #0]
 800a3ee:	686b      	ldr	r3, [r5, #4]
 800a3f0:	e7e3      	b.n	800a3ba <_strtod_l+0x42a>
 800a3f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a3f4:	3316      	adds	r3, #22
 800a3f6:	db0c      	blt.n	800a412 <_strtod_l+0x482>
 800a3f8:	9906      	ldr	r1, [sp, #24]
 800a3fa:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a3fc:	4b5b      	ldr	r3, [pc, #364]	; (800a56c <_strtod_l+0x5dc>)
 800a3fe:	1a52      	subs	r2, r2, r1
 800a400:	00d2      	lsls	r2, r2, #3
 800a402:	189b      	adds	r3, r3, r2
 800a404:	0030      	movs	r0, r6
 800a406:	681a      	ldr	r2, [r3, #0]
 800a408:	685b      	ldr	r3, [r3, #4]
 800a40a:	0039      	movs	r1, r7
 800a40c:	f7f6 fd1e 	bl	8000e4c <__aeabi_ddiv>
 800a410:	e794      	b.n	800a33c <_strtod_l+0x3ac>
 800a412:	9b05      	ldr	r3, [sp, #20]
 800a414:	1b1c      	subs	r4, r3, r4
 800a416:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a418:	18e4      	adds	r4, r4, r3
 800a41a:	2c00      	cmp	r4, #0
 800a41c:	dd72      	ble.n	800a504 <_strtod_l+0x574>
 800a41e:	220f      	movs	r2, #15
 800a420:	0023      	movs	r3, r4
 800a422:	4013      	ands	r3, r2
 800a424:	4214      	tst	r4, r2
 800a426:	d00a      	beq.n	800a43e <_strtod_l+0x4ae>
 800a428:	4950      	ldr	r1, [pc, #320]	; (800a56c <_strtod_l+0x5dc>)
 800a42a:	00db      	lsls	r3, r3, #3
 800a42c:	18c9      	adds	r1, r1, r3
 800a42e:	0032      	movs	r2, r6
 800a430:	6808      	ldr	r0, [r1, #0]
 800a432:	6849      	ldr	r1, [r1, #4]
 800a434:	003b      	movs	r3, r7
 800a436:	f7f7 f903 	bl	8001640 <__aeabi_dmul>
 800a43a:	0006      	movs	r6, r0
 800a43c:	000f      	movs	r7, r1
 800a43e:	230f      	movs	r3, #15
 800a440:	439c      	bics	r4, r3
 800a442:	d04a      	beq.n	800a4da <_strtod_l+0x54a>
 800a444:	3326      	adds	r3, #38	; 0x26
 800a446:	33ff      	adds	r3, #255	; 0xff
 800a448:	429c      	cmp	r4, r3
 800a44a:	dd22      	ble.n	800a492 <_strtod_l+0x502>
 800a44c:	2300      	movs	r3, #0
 800a44e:	9305      	str	r3, [sp, #20]
 800a450:	9306      	str	r3, [sp, #24]
 800a452:	930d      	str	r3, [sp, #52]	; 0x34
 800a454:	9308      	str	r3, [sp, #32]
 800a456:	2322      	movs	r3, #34	; 0x22
 800a458:	2600      	movs	r6, #0
 800a45a:	9a04      	ldr	r2, [sp, #16]
 800a45c:	4f3f      	ldr	r7, [pc, #252]	; (800a55c <_strtod_l+0x5cc>)
 800a45e:	6013      	str	r3, [r2, #0]
 800a460:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a462:	42b3      	cmp	r3, r6
 800a464:	d100      	bne.n	800a468 <_strtod_l+0x4d8>
 800a466:	e5ce      	b.n	800a006 <_strtod_l+0x76>
 800a468:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a46a:	9804      	ldr	r0, [sp, #16]
 800a46c:	f001 fac8 	bl	800ba00 <_Bfree>
 800a470:	9908      	ldr	r1, [sp, #32]
 800a472:	9804      	ldr	r0, [sp, #16]
 800a474:	f001 fac4 	bl	800ba00 <_Bfree>
 800a478:	9906      	ldr	r1, [sp, #24]
 800a47a:	9804      	ldr	r0, [sp, #16]
 800a47c:	f001 fac0 	bl	800ba00 <_Bfree>
 800a480:	990d      	ldr	r1, [sp, #52]	; 0x34
 800a482:	9804      	ldr	r0, [sp, #16]
 800a484:	f001 fabc 	bl	800ba00 <_Bfree>
 800a488:	9905      	ldr	r1, [sp, #20]
 800a48a:	9804      	ldr	r0, [sp, #16]
 800a48c:	f001 fab8 	bl	800ba00 <_Bfree>
 800a490:	e5b9      	b.n	800a006 <_strtod_l+0x76>
 800a492:	2300      	movs	r3, #0
 800a494:	0030      	movs	r0, r6
 800a496:	0039      	movs	r1, r7
 800a498:	4d35      	ldr	r5, [pc, #212]	; (800a570 <_strtod_l+0x5e0>)
 800a49a:	1124      	asrs	r4, r4, #4
 800a49c:	9307      	str	r3, [sp, #28]
 800a49e:	2c01      	cmp	r4, #1
 800a4a0:	dc1e      	bgt.n	800a4e0 <_strtod_l+0x550>
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d001      	beq.n	800a4aa <_strtod_l+0x51a>
 800a4a6:	0006      	movs	r6, r0
 800a4a8:	000f      	movs	r7, r1
 800a4aa:	4b32      	ldr	r3, [pc, #200]	; (800a574 <_strtod_l+0x5e4>)
 800a4ac:	9a07      	ldr	r2, [sp, #28]
 800a4ae:	18ff      	adds	r7, r7, r3
 800a4b0:	4b2f      	ldr	r3, [pc, #188]	; (800a570 <_strtod_l+0x5e0>)
 800a4b2:	00d2      	lsls	r2, r2, #3
 800a4b4:	189d      	adds	r5, r3, r2
 800a4b6:	6828      	ldr	r0, [r5, #0]
 800a4b8:	6869      	ldr	r1, [r5, #4]
 800a4ba:	0032      	movs	r2, r6
 800a4bc:	003b      	movs	r3, r7
 800a4be:	f7f7 f8bf 	bl	8001640 <__aeabi_dmul>
 800a4c2:	4b26      	ldr	r3, [pc, #152]	; (800a55c <_strtod_l+0x5cc>)
 800a4c4:	4a2c      	ldr	r2, [pc, #176]	; (800a578 <_strtod_l+0x5e8>)
 800a4c6:	0006      	movs	r6, r0
 800a4c8:	400b      	ands	r3, r1
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d8be      	bhi.n	800a44c <_strtod_l+0x4bc>
 800a4ce:	4a2b      	ldr	r2, [pc, #172]	; (800a57c <_strtod_l+0x5ec>)
 800a4d0:	4293      	cmp	r3, r2
 800a4d2:	d913      	bls.n	800a4fc <_strtod_l+0x56c>
 800a4d4:	2601      	movs	r6, #1
 800a4d6:	4f2a      	ldr	r7, [pc, #168]	; (800a580 <_strtod_l+0x5f0>)
 800a4d8:	4276      	negs	r6, r6
 800a4da:	2300      	movs	r3, #0
 800a4dc:	9307      	str	r3, [sp, #28]
 800a4de:	e088      	b.n	800a5f2 <_strtod_l+0x662>
 800a4e0:	2201      	movs	r2, #1
 800a4e2:	4214      	tst	r4, r2
 800a4e4:	d004      	beq.n	800a4f0 <_strtod_l+0x560>
 800a4e6:	682a      	ldr	r2, [r5, #0]
 800a4e8:	686b      	ldr	r3, [r5, #4]
 800a4ea:	f7f7 f8a9 	bl	8001640 <__aeabi_dmul>
 800a4ee:	2301      	movs	r3, #1
 800a4f0:	9a07      	ldr	r2, [sp, #28]
 800a4f2:	1064      	asrs	r4, r4, #1
 800a4f4:	3201      	adds	r2, #1
 800a4f6:	9207      	str	r2, [sp, #28]
 800a4f8:	3508      	adds	r5, #8
 800a4fa:	e7d0      	b.n	800a49e <_strtod_l+0x50e>
 800a4fc:	23d4      	movs	r3, #212	; 0xd4
 800a4fe:	049b      	lsls	r3, r3, #18
 800a500:	18cf      	adds	r7, r1, r3
 800a502:	e7ea      	b.n	800a4da <_strtod_l+0x54a>
 800a504:	2c00      	cmp	r4, #0
 800a506:	d0e8      	beq.n	800a4da <_strtod_l+0x54a>
 800a508:	4264      	negs	r4, r4
 800a50a:	230f      	movs	r3, #15
 800a50c:	0022      	movs	r2, r4
 800a50e:	401a      	ands	r2, r3
 800a510:	421c      	tst	r4, r3
 800a512:	d00a      	beq.n	800a52a <_strtod_l+0x59a>
 800a514:	4b15      	ldr	r3, [pc, #84]	; (800a56c <_strtod_l+0x5dc>)
 800a516:	00d2      	lsls	r2, r2, #3
 800a518:	189b      	adds	r3, r3, r2
 800a51a:	0030      	movs	r0, r6
 800a51c:	681a      	ldr	r2, [r3, #0]
 800a51e:	685b      	ldr	r3, [r3, #4]
 800a520:	0039      	movs	r1, r7
 800a522:	f7f6 fc93 	bl	8000e4c <__aeabi_ddiv>
 800a526:	0006      	movs	r6, r0
 800a528:	000f      	movs	r7, r1
 800a52a:	1124      	asrs	r4, r4, #4
 800a52c:	d0d5      	beq.n	800a4da <_strtod_l+0x54a>
 800a52e:	2c1f      	cmp	r4, #31
 800a530:	dd28      	ble.n	800a584 <_strtod_l+0x5f4>
 800a532:	2300      	movs	r3, #0
 800a534:	9305      	str	r3, [sp, #20]
 800a536:	9306      	str	r3, [sp, #24]
 800a538:	930d      	str	r3, [sp, #52]	; 0x34
 800a53a:	9308      	str	r3, [sp, #32]
 800a53c:	2322      	movs	r3, #34	; 0x22
 800a53e:	9a04      	ldr	r2, [sp, #16]
 800a540:	2600      	movs	r6, #0
 800a542:	6013      	str	r3, [r2, #0]
 800a544:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a546:	2700      	movs	r7, #0
 800a548:	2b00      	cmp	r3, #0
 800a54a:	d18d      	bne.n	800a468 <_strtod_l+0x4d8>
 800a54c:	e55b      	b.n	800a006 <_strtod_l+0x76>
 800a54e:	46c0      	nop			; (mov r8, r8)
 800a550:	00004e1f 	.word	0x00004e1f
 800a554:	0800d99f 	.word	0x0800d99f
 800a558:	0800d9b8 	.word	0x0800d9b8
 800a55c:	7ff00000 	.word	0x7ff00000
 800a560:	0800d996 	.word	0x0800d996
 800a564:	0800d999 	.word	0x0800d999
 800a568:	0800dbad 	.word	0x0800dbad
 800a56c:	0800dca0 	.word	0x0800dca0
 800a570:	0800dc78 	.word	0x0800dc78
 800a574:	fcb00000 	.word	0xfcb00000
 800a578:	7ca00000 	.word	0x7ca00000
 800a57c:	7c900000 	.word	0x7c900000
 800a580:	7fefffff 	.word	0x7fefffff
 800a584:	2310      	movs	r3, #16
 800a586:	0022      	movs	r2, r4
 800a588:	401a      	ands	r2, r3
 800a58a:	9207      	str	r2, [sp, #28]
 800a58c:	421c      	tst	r4, r3
 800a58e:	d001      	beq.n	800a594 <_strtod_l+0x604>
 800a590:	335a      	adds	r3, #90	; 0x5a
 800a592:	9307      	str	r3, [sp, #28]
 800a594:	0030      	movs	r0, r6
 800a596:	0039      	movs	r1, r7
 800a598:	2300      	movs	r3, #0
 800a59a:	4dc4      	ldr	r5, [pc, #784]	; (800a8ac <_strtod_l+0x91c>)
 800a59c:	2201      	movs	r2, #1
 800a59e:	4214      	tst	r4, r2
 800a5a0:	d004      	beq.n	800a5ac <_strtod_l+0x61c>
 800a5a2:	682a      	ldr	r2, [r5, #0]
 800a5a4:	686b      	ldr	r3, [r5, #4]
 800a5a6:	f7f7 f84b 	bl	8001640 <__aeabi_dmul>
 800a5aa:	2301      	movs	r3, #1
 800a5ac:	1064      	asrs	r4, r4, #1
 800a5ae:	3508      	adds	r5, #8
 800a5b0:	2c00      	cmp	r4, #0
 800a5b2:	d1f3      	bne.n	800a59c <_strtod_l+0x60c>
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d001      	beq.n	800a5bc <_strtod_l+0x62c>
 800a5b8:	0006      	movs	r6, r0
 800a5ba:	000f      	movs	r7, r1
 800a5bc:	9b07      	ldr	r3, [sp, #28]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00f      	beq.n	800a5e2 <_strtod_l+0x652>
 800a5c2:	236b      	movs	r3, #107	; 0x6b
 800a5c4:	007a      	lsls	r2, r7, #1
 800a5c6:	0d52      	lsrs	r2, r2, #21
 800a5c8:	0039      	movs	r1, r7
 800a5ca:	1a9b      	subs	r3, r3, r2
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	dd08      	ble.n	800a5e2 <_strtod_l+0x652>
 800a5d0:	2b1f      	cmp	r3, #31
 800a5d2:	dc00      	bgt.n	800a5d6 <_strtod_l+0x646>
 800a5d4:	e121      	b.n	800a81a <_strtod_l+0x88a>
 800a5d6:	2600      	movs	r6, #0
 800a5d8:	2b34      	cmp	r3, #52	; 0x34
 800a5da:	dc00      	bgt.n	800a5de <_strtod_l+0x64e>
 800a5dc:	e116      	b.n	800a80c <_strtod_l+0x87c>
 800a5de:	27dc      	movs	r7, #220	; 0xdc
 800a5e0:	04bf      	lsls	r7, r7, #18
 800a5e2:	2200      	movs	r2, #0
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	0030      	movs	r0, r6
 800a5e8:	0039      	movs	r1, r7
 800a5ea:	f7f5 ff2f 	bl	800044c <__aeabi_dcmpeq>
 800a5ee:	2800      	cmp	r0, #0
 800a5f0:	d19f      	bne.n	800a532 <_strtod_l+0x5a2>
 800a5f2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a5f4:	9a08      	ldr	r2, [sp, #32]
 800a5f6:	9300      	str	r3, [sp, #0]
 800a5f8:	9910      	ldr	r1, [sp, #64]	; 0x40
 800a5fa:	9b05      	ldr	r3, [sp, #20]
 800a5fc:	9804      	ldr	r0, [sp, #16]
 800a5fe:	f001 fa67 	bl	800bad0 <__s2b>
 800a602:	900d      	str	r0, [sp, #52]	; 0x34
 800a604:	2800      	cmp	r0, #0
 800a606:	d100      	bne.n	800a60a <_strtod_l+0x67a>
 800a608:	e720      	b.n	800a44c <_strtod_l+0x4bc>
 800a60a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a60c:	9906      	ldr	r1, [sp, #24]
 800a60e:	17da      	asrs	r2, r3, #31
 800a610:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a612:	1a5b      	subs	r3, r3, r1
 800a614:	401a      	ands	r2, r3
 800a616:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a618:	9215      	str	r2, [sp, #84]	; 0x54
 800a61a:	43db      	mvns	r3, r3
 800a61c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a61e:	17db      	asrs	r3, r3, #31
 800a620:	401a      	ands	r2, r3
 800a622:	2300      	movs	r3, #0
 800a624:	9218      	str	r2, [sp, #96]	; 0x60
 800a626:	9305      	str	r3, [sp, #20]
 800a628:	9306      	str	r3, [sp, #24]
 800a62a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a62c:	9804      	ldr	r0, [sp, #16]
 800a62e:	6859      	ldr	r1, [r3, #4]
 800a630:	f001 f9a2 	bl	800b978 <_Balloc>
 800a634:	9008      	str	r0, [sp, #32]
 800a636:	2800      	cmp	r0, #0
 800a638:	d100      	bne.n	800a63c <_strtod_l+0x6ac>
 800a63a:	e70c      	b.n	800a456 <_strtod_l+0x4c6>
 800a63c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800a63e:	300c      	adds	r0, #12
 800a640:	0019      	movs	r1, r3
 800a642:	691a      	ldr	r2, [r3, #16]
 800a644:	310c      	adds	r1, #12
 800a646:	3202      	adds	r2, #2
 800a648:	0092      	lsls	r2, r2, #2
 800a64a:	f000 fdb0 	bl	800b1ae <memcpy>
 800a64e:	ab1e      	add	r3, sp, #120	; 0x78
 800a650:	9301      	str	r3, [sp, #4]
 800a652:	ab1d      	add	r3, sp, #116	; 0x74
 800a654:	9300      	str	r3, [sp, #0]
 800a656:	0032      	movs	r2, r6
 800a658:	003b      	movs	r3, r7
 800a65a:	9804      	ldr	r0, [sp, #16]
 800a65c:	9610      	str	r6, [sp, #64]	; 0x40
 800a65e:	9711      	str	r7, [sp, #68]	; 0x44
 800a660:	f001 fd78 	bl	800c154 <__d2b>
 800a664:	901c      	str	r0, [sp, #112]	; 0x70
 800a666:	2800      	cmp	r0, #0
 800a668:	d100      	bne.n	800a66c <_strtod_l+0x6dc>
 800a66a:	e6f4      	b.n	800a456 <_strtod_l+0x4c6>
 800a66c:	2101      	movs	r1, #1
 800a66e:	9804      	ldr	r0, [sp, #16]
 800a670:	f001 fac2 	bl	800bbf8 <__i2b>
 800a674:	9006      	str	r0, [sp, #24]
 800a676:	2800      	cmp	r0, #0
 800a678:	d100      	bne.n	800a67c <_strtod_l+0x6ec>
 800a67a:	e6ec      	b.n	800a456 <_strtod_l+0x4c6>
 800a67c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a67e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a680:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800a682:	1ad4      	subs	r4, r2, r3
 800a684:	2b00      	cmp	r3, #0
 800a686:	db01      	blt.n	800a68c <_strtod_l+0x6fc>
 800a688:	9c18      	ldr	r4, [sp, #96]	; 0x60
 800a68a:	195d      	adds	r5, r3, r5
 800a68c:	9907      	ldr	r1, [sp, #28]
 800a68e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800a690:	1a5b      	subs	r3, r3, r1
 800a692:	2136      	movs	r1, #54	; 0x36
 800a694:	189b      	adds	r3, r3, r2
 800a696:	1a8a      	subs	r2, r1, r2
 800a698:	4985      	ldr	r1, [pc, #532]	; (800a8b0 <_strtod_l+0x920>)
 800a69a:	2001      	movs	r0, #1
 800a69c:	468c      	mov	ip, r1
 800a69e:	2100      	movs	r1, #0
 800a6a0:	3b01      	subs	r3, #1
 800a6a2:	9114      	str	r1, [sp, #80]	; 0x50
 800a6a4:	9012      	str	r0, [sp, #72]	; 0x48
 800a6a6:	4563      	cmp	r3, ip
 800a6a8:	da07      	bge.n	800a6ba <_strtod_l+0x72a>
 800a6aa:	4661      	mov	r1, ip
 800a6ac:	1ac9      	subs	r1, r1, r3
 800a6ae:	1a52      	subs	r2, r2, r1
 800a6b0:	291f      	cmp	r1, #31
 800a6b2:	dd00      	ble.n	800a6b6 <_strtod_l+0x726>
 800a6b4:	e0b6      	b.n	800a824 <_strtod_l+0x894>
 800a6b6:	4088      	lsls	r0, r1
 800a6b8:	9012      	str	r0, [sp, #72]	; 0x48
 800a6ba:	18ab      	adds	r3, r5, r2
 800a6bc:	930c      	str	r3, [sp, #48]	; 0x30
 800a6be:	18a4      	adds	r4, r4, r2
 800a6c0:	9b07      	ldr	r3, [sp, #28]
 800a6c2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6c4:	191c      	adds	r4, r3, r4
 800a6c6:	002b      	movs	r3, r5
 800a6c8:	4295      	cmp	r5, r2
 800a6ca:	dd00      	ble.n	800a6ce <_strtod_l+0x73e>
 800a6cc:	0013      	movs	r3, r2
 800a6ce:	42a3      	cmp	r3, r4
 800a6d0:	dd00      	ble.n	800a6d4 <_strtod_l+0x744>
 800a6d2:	0023      	movs	r3, r4
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	dd04      	ble.n	800a6e2 <_strtod_l+0x752>
 800a6d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a6da:	1ae4      	subs	r4, r4, r3
 800a6dc:	1ad2      	subs	r2, r2, r3
 800a6de:	920c      	str	r2, [sp, #48]	; 0x30
 800a6e0:	1aed      	subs	r5, r5, r3
 800a6e2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6e4:	2b00      	cmp	r3, #0
 800a6e6:	dd17      	ble.n	800a718 <_strtod_l+0x788>
 800a6e8:	001a      	movs	r2, r3
 800a6ea:	9906      	ldr	r1, [sp, #24]
 800a6ec:	9804      	ldr	r0, [sp, #16]
 800a6ee:	f001 fb4b 	bl	800bd88 <__pow5mult>
 800a6f2:	9006      	str	r0, [sp, #24]
 800a6f4:	2800      	cmp	r0, #0
 800a6f6:	d100      	bne.n	800a6fa <_strtod_l+0x76a>
 800a6f8:	e6ad      	b.n	800a456 <_strtod_l+0x4c6>
 800a6fa:	0001      	movs	r1, r0
 800a6fc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a6fe:	9804      	ldr	r0, [sp, #16]
 800a700:	f001 fa92 	bl	800bc28 <__multiply>
 800a704:	900e      	str	r0, [sp, #56]	; 0x38
 800a706:	2800      	cmp	r0, #0
 800a708:	d100      	bne.n	800a70c <_strtod_l+0x77c>
 800a70a:	e6a4      	b.n	800a456 <_strtod_l+0x4c6>
 800a70c:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a70e:	9804      	ldr	r0, [sp, #16]
 800a710:	f001 f976 	bl	800ba00 <_Bfree>
 800a714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a716:	931c      	str	r3, [sp, #112]	; 0x70
 800a718:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	dd00      	ble.n	800a720 <_strtod_l+0x790>
 800a71e:	e087      	b.n	800a830 <_strtod_l+0x8a0>
 800a720:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a722:	2b00      	cmp	r3, #0
 800a724:	dd08      	ble.n	800a738 <_strtod_l+0x7a8>
 800a726:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a728:	9908      	ldr	r1, [sp, #32]
 800a72a:	9804      	ldr	r0, [sp, #16]
 800a72c:	f001 fb2c 	bl	800bd88 <__pow5mult>
 800a730:	9008      	str	r0, [sp, #32]
 800a732:	2800      	cmp	r0, #0
 800a734:	d100      	bne.n	800a738 <_strtod_l+0x7a8>
 800a736:	e68e      	b.n	800a456 <_strtod_l+0x4c6>
 800a738:	2c00      	cmp	r4, #0
 800a73a:	dd08      	ble.n	800a74e <_strtod_l+0x7be>
 800a73c:	0022      	movs	r2, r4
 800a73e:	9908      	ldr	r1, [sp, #32]
 800a740:	9804      	ldr	r0, [sp, #16]
 800a742:	f001 fb7d 	bl	800be40 <__lshift>
 800a746:	9008      	str	r0, [sp, #32]
 800a748:	2800      	cmp	r0, #0
 800a74a:	d100      	bne.n	800a74e <_strtod_l+0x7be>
 800a74c:	e683      	b.n	800a456 <_strtod_l+0x4c6>
 800a74e:	2d00      	cmp	r5, #0
 800a750:	dd08      	ble.n	800a764 <_strtod_l+0x7d4>
 800a752:	002a      	movs	r2, r5
 800a754:	9906      	ldr	r1, [sp, #24]
 800a756:	9804      	ldr	r0, [sp, #16]
 800a758:	f001 fb72 	bl	800be40 <__lshift>
 800a75c:	9006      	str	r0, [sp, #24]
 800a75e:	2800      	cmp	r0, #0
 800a760:	d100      	bne.n	800a764 <_strtod_l+0x7d4>
 800a762:	e678      	b.n	800a456 <_strtod_l+0x4c6>
 800a764:	9a08      	ldr	r2, [sp, #32]
 800a766:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a768:	9804      	ldr	r0, [sp, #16]
 800a76a:	f001 fbf3 	bl	800bf54 <__mdiff>
 800a76e:	9005      	str	r0, [sp, #20]
 800a770:	2800      	cmp	r0, #0
 800a772:	d100      	bne.n	800a776 <_strtod_l+0x7e6>
 800a774:	e66f      	b.n	800a456 <_strtod_l+0x4c6>
 800a776:	2200      	movs	r2, #0
 800a778:	68c3      	ldr	r3, [r0, #12]
 800a77a:	9906      	ldr	r1, [sp, #24]
 800a77c:	60c2      	str	r2, [r0, #12]
 800a77e:	930c      	str	r3, [sp, #48]	; 0x30
 800a780:	f001 fbcc 	bl	800bf1c <__mcmp>
 800a784:	2800      	cmp	r0, #0
 800a786:	da5d      	bge.n	800a844 <_strtod_l+0x8b4>
 800a788:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a78a:	4333      	orrs	r3, r6
 800a78c:	d000      	beq.n	800a790 <_strtod_l+0x800>
 800a78e:	e088      	b.n	800a8a2 <_strtod_l+0x912>
 800a790:	033b      	lsls	r3, r7, #12
 800a792:	d000      	beq.n	800a796 <_strtod_l+0x806>
 800a794:	e085      	b.n	800a8a2 <_strtod_l+0x912>
 800a796:	22d6      	movs	r2, #214	; 0xd6
 800a798:	4b46      	ldr	r3, [pc, #280]	; (800a8b4 <_strtod_l+0x924>)
 800a79a:	04d2      	lsls	r2, r2, #19
 800a79c:	403b      	ands	r3, r7
 800a79e:	4293      	cmp	r3, r2
 800a7a0:	d97f      	bls.n	800a8a2 <_strtod_l+0x912>
 800a7a2:	9b05      	ldr	r3, [sp, #20]
 800a7a4:	695b      	ldr	r3, [r3, #20]
 800a7a6:	2b00      	cmp	r3, #0
 800a7a8:	d103      	bne.n	800a7b2 <_strtod_l+0x822>
 800a7aa:	9b05      	ldr	r3, [sp, #20]
 800a7ac:	691b      	ldr	r3, [r3, #16]
 800a7ae:	2b01      	cmp	r3, #1
 800a7b0:	dd77      	ble.n	800a8a2 <_strtod_l+0x912>
 800a7b2:	9905      	ldr	r1, [sp, #20]
 800a7b4:	2201      	movs	r2, #1
 800a7b6:	9804      	ldr	r0, [sp, #16]
 800a7b8:	f001 fb42 	bl	800be40 <__lshift>
 800a7bc:	9906      	ldr	r1, [sp, #24]
 800a7be:	9005      	str	r0, [sp, #20]
 800a7c0:	f001 fbac 	bl	800bf1c <__mcmp>
 800a7c4:	2800      	cmp	r0, #0
 800a7c6:	dd6c      	ble.n	800a8a2 <_strtod_l+0x912>
 800a7c8:	9907      	ldr	r1, [sp, #28]
 800a7ca:	003b      	movs	r3, r7
 800a7cc:	4a39      	ldr	r2, [pc, #228]	; (800a8b4 <_strtod_l+0x924>)
 800a7ce:	2900      	cmp	r1, #0
 800a7d0:	d100      	bne.n	800a7d4 <_strtod_l+0x844>
 800a7d2:	e094      	b.n	800a8fe <_strtod_l+0x96e>
 800a7d4:	0011      	movs	r1, r2
 800a7d6:	20d6      	movs	r0, #214	; 0xd6
 800a7d8:	4039      	ands	r1, r7
 800a7da:	04c0      	lsls	r0, r0, #19
 800a7dc:	4281      	cmp	r1, r0
 800a7de:	dd00      	ble.n	800a7e2 <_strtod_l+0x852>
 800a7e0:	e08d      	b.n	800a8fe <_strtod_l+0x96e>
 800a7e2:	23dc      	movs	r3, #220	; 0xdc
 800a7e4:	049b      	lsls	r3, r3, #18
 800a7e6:	4299      	cmp	r1, r3
 800a7e8:	dc00      	bgt.n	800a7ec <_strtod_l+0x85c>
 800a7ea:	e6a7      	b.n	800a53c <_strtod_l+0x5ac>
 800a7ec:	0030      	movs	r0, r6
 800a7ee:	0039      	movs	r1, r7
 800a7f0:	4b31      	ldr	r3, [pc, #196]	; (800a8b8 <_strtod_l+0x928>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f7f6 ff24 	bl	8001640 <__aeabi_dmul>
 800a7f8:	4b2e      	ldr	r3, [pc, #184]	; (800a8b4 <_strtod_l+0x924>)
 800a7fa:	0006      	movs	r6, r0
 800a7fc:	000f      	movs	r7, r1
 800a7fe:	420b      	tst	r3, r1
 800a800:	d000      	beq.n	800a804 <_strtod_l+0x874>
 800a802:	e631      	b.n	800a468 <_strtod_l+0x4d8>
 800a804:	2322      	movs	r3, #34	; 0x22
 800a806:	9a04      	ldr	r2, [sp, #16]
 800a808:	6013      	str	r3, [r2, #0]
 800a80a:	e62d      	b.n	800a468 <_strtod_l+0x4d8>
 800a80c:	234b      	movs	r3, #75	; 0x4b
 800a80e:	1a9a      	subs	r2, r3, r2
 800a810:	3b4c      	subs	r3, #76	; 0x4c
 800a812:	4093      	lsls	r3, r2
 800a814:	4019      	ands	r1, r3
 800a816:	000f      	movs	r7, r1
 800a818:	e6e3      	b.n	800a5e2 <_strtod_l+0x652>
 800a81a:	2201      	movs	r2, #1
 800a81c:	4252      	negs	r2, r2
 800a81e:	409a      	lsls	r2, r3
 800a820:	4016      	ands	r6, r2
 800a822:	e6de      	b.n	800a5e2 <_strtod_l+0x652>
 800a824:	4925      	ldr	r1, [pc, #148]	; (800a8bc <_strtod_l+0x92c>)
 800a826:	1acb      	subs	r3, r1, r3
 800a828:	0001      	movs	r1, r0
 800a82a:	4099      	lsls	r1, r3
 800a82c:	9114      	str	r1, [sp, #80]	; 0x50
 800a82e:	e743      	b.n	800a6b8 <_strtod_l+0x728>
 800a830:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a832:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a834:	9804      	ldr	r0, [sp, #16]
 800a836:	f001 fb03 	bl	800be40 <__lshift>
 800a83a:	901c      	str	r0, [sp, #112]	; 0x70
 800a83c:	2800      	cmp	r0, #0
 800a83e:	d000      	beq.n	800a842 <_strtod_l+0x8b2>
 800a840:	e76e      	b.n	800a720 <_strtod_l+0x790>
 800a842:	e608      	b.n	800a456 <_strtod_l+0x4c6>
 800a844:	970e      	str	r7, [sp, #56]	; 0x38
 800a846:	2800      	cmp	r0, #0
 800a848:	d177      	bne.n	800a93a <_strtod_l+0x9aa>
 800a84a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800a84c:	033b      	lsls	r3, r7, #12
 800a84e:	0b1b      	lsrs	r3, r3, #12
 800a850:	2a00      	cmp	r2, #0
 800a852:	d039      	beq.n	800a8c8 <_strtod_l+0x938>
 800a854:	4a1a      	ldr	r2, [pc, #104]	; (800a8c0 <_strtod_l+0x930>)
 800a856:	4293      	cmp	r3, r2
 800a858:	d139      	bne.n	800a8ce <_strtod_l+0x93e>
 800a85a:	2101      	movs	r1, #1
 800a85c:	9b07      	ldr	r3, [sp, #28]
 800a85e:	4249      	negs	r1, r1
 800a860:	0032      	movs	r2, r6
 800a862:	0008      	movs	r0, r1
 800a864:	2b00      	cmp	r3, #0
 800a866:	d00b      	beq.n	800a880 <_strtod_l+0x8f0>
 800a868:	24d4      	movs	r4, #212	; 0xd4
 800a86a:	4b12      	ldr	r3, [pc, #72]	; (800a8b4 <_strtod_l+0x924>)
 800a86c:	0008      	movs	r0, r1
 800a86e:	403b      	ands	r3, r7
 800a870:	04e4      	lsls	r4, r4, #19
 800a872:	42a3      	cmp	r3, r4
 800a874:	d804      	bhi.n	800a880 <_strtod_l+0x8f0>
 800a876:	306c      	adds	r0, #108	; 0x6c
 800a878:	0d1b      	lsrs	r3, r3, #20
 800a87a:	1ac3      	subs	r3, r0, r3
 800a87c:	4099      	lsls	r1, r3
 800a87e:	0008      	movs	r0, r1
 800a880:	4282      	cmp	r2, r0
 800a882:	d124      	bne.n	800a8ce <_strtod_l+0x93e>
 800a884:	4b0f      	ldr	r3, [pc, #60]	; (800a8c4 <_strtod_l+0x934>)
 800a886:	990e      	ldr	r1, [sp, #56]	; 0x38
 800a888:	4299      	cmp	r1, r3
 800a88a:	d102      	bne.n	800a892 <_strtod_l+0x902>
 800a88c:	3201      	adds	r2, #1
 800a88e:	d100      	bne.n	800a892 <_strtod_l+0x902>
 800a890:	e5e1      	b.n	800a456 <_strtod_l+0x4c6>
 800a892:	4b08      	ldr	r3, [pc, #32]	; (800a8b4 <_strtod_l+0x924>)
 800a894:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a896:	2600      	movs	r6, #0
 800a898:	401a      	ands	r2, r3
 800a89a:	0013      	movs	r3, r2
 800a89c:	2280      	movs	r2, #128	; 0x80
 800a89e:	0352      	lsls	r2, r2, #13
 800a8a0:	189f      	adds	r7, r3, r2
 800a8a2:	9b07      	ldr	r3, [sp, #28]
 800a8a4:	2b00      	cmp	r3, #0
 800a8a6:	d1a1      	bne.n	800a7ec <_strtod_l+0x85c>
 800a8a8:	e5de      	b.n	800a468 <_strtod_l+0x4d8>
 800a8aa:	46c0      	nop			; (mov r8, r8)
 800a8ac:	0800d9d0 	.word	0x0800d9d0
 800a8b0:	fffffc02 	.word	0xfffffc02
 800a8b4:	7ff00000 	.word	0x7ff00000
 800a8b8:	39500000 	.word	0x39500000
 800a8bc:	fffffbe2 	.word	0xfffffbe2
 800a8c0:	000fffff 	.word	0x000fffff
 800a8c4:	7fefffff 	.word	0x7fefffff
 800a8c8:	4333      	orrs	r3, r6
 800a8ca:	d100      	bne.n	800a8ce <_strtod_l+0x93e>
 800a8cc:	e77c      	b.n	800a7c8 <_strtod_l+0x838>
 800a8ce:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d01d      	beq.n	800a910 <_strtod_l+0x980>
 800a8d4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a8d6:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a8d8:	4213      	tst	r3, r2
 800a8da:	d0e2      	beq.n	800a8a2 <_strtod_l+0x912>
 800a8dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8de:	0030      	movs	r0, r6
 800a8e0:	0039      	movs	r1, r7
 800a8e2:	9a07      	ldr	r2, [sp, #28]
 800a8e4:	2b00      	cmp	r3, #0
 800a8e6:	d017      	beq.n	800a918 <_strtod_l+0x988>
 800a8e8:	f7ff fb3a 	bl	8009f60 <sulp>
 800a8ec:	0002      	movs	r2, r0
 800a8ee:	000b      	movs	r3, r1
 800a8f0:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a8f2:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a8f4:	f7f5 ff4a 	bl	800078c <__aeabi_dadd>
 800a8f8:	0006      	movs	r6, r0
 800a8fa:	000f      	movs	r7, r1
 800a8fc:	e7d1      	b.n	800a8a2 <_strtod_l+0x912>
 800a8fe:	2601      	movs	r6, #1
 800a900:	4013      	ands	r3, r2
 800a902:	4a98      	ldr	r2, [pc, #608]	; (800ab64 <_strtod_l+0xbd4>)
 800a904:	4276      	negs	r6, r6
 800a906:	189b      	adds	r3, r3, r2
 800a908:	4a97      	ldr	r2, [pc, #604]	; (800ab68 <_strtod_l+0xbd8>)
 800a90a:	431a      	orrs	r2, r3
 800a90c:	0017      	movs	r7, r2
 800a90e:	e7c8      	b.n	800a8a2 <_strtod_l+0x912>
 800a910:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800a912:	4233      	tst	r3, r6
 800a914:	d0c5      	beq.n	800a8a2 <_strtod_l+0x912>
 800a916:	e7e1      	b.n	800a8dc <_strtod_l+0x94c>
 800a918:	f7ff fb22 	bl	8009f60 <sulp>
 800a91c:	0002      	movs	r2, r0
 800a91e:	000b      	movs	r3, r1
 800a920:	9810      	ldr	r0, [sp, #64]	; 0x40
 800a922:	9911      	ldr	r1, [sp, #68]	; 0x44
 800a924:	f7f7 f94e 	bl	8001bc4 <__aeabi_dsub>
 800a928:	2200      	movs	r2, #0
 800a92a:	2300      	movs	r3, #0
 800a92c:	0006      	movs	r6, r0
 800a92e:	000f      	movs	r7, r1
 800a930:	f7f5 fd8c 	bl	800044c <__aeabi_dcmpeq>
 800a934:	2800      	cmp	r0, #0
 800a936:	d0b4      	beq.n	800a8a2 <_strtod_l+0x912>
 800a938:	e600      	b.n	800a53c <_strtod_l+0x5ac>
 800a93a:	9906      	ldr	r1, [sp, #24]
 800a93c:	9805      	ldr	r0, [sp, #20]
 800a93e:	f001 fc69 	bl	800c214 <__ratio>
 800a942:	2380      	movs	r3, #128	; 0x80
 800a944:	2200      	movs	r2, #0
 800a946:	05db      	lsls	r3, r3, #23
 800a948:	0004      	movs	r4, r0
 800a94a:	000d      	movs	r5, r1
 800a94c:	f7f5 fd8e 	bl	800046c <__aeabi_dcmple>
 800a950:	2800      	cmp	r0, #0
 800a952:	d06d      	beq.n	800aa30 <_strtod_l+0xaa0>
 800a954:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a956:	2b00      	cmp	r3, #0
 800a958:	d000      	beq.n	800a95c <_strtod_l+0x9cc>
 800a95a:	e07e      	b.n	800aa5a <_strtod_l+0xaca>
 800a95c:	2e00      	cmp	r6, #0
 800a95e:	d158      	bne.n	800aa12 <_strtod_l+0xa82>
 800a960:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a962:	031b      	lsls	r3, r3, #12
 800a964:	d000      	beq.n	800a968 <_strtod_l+0x9d8>
 800a966:	e07f      	b.n	800aa68 <_strtod_l+0xad8>
 800a968:	2200      	movs	r2, #0
 800a96a:	0020      	movs	r0, r4
 800a96c:	0029      	movs	r1, r5
 800a96e:	4b7f      	ldr	r3, [pc, #508]	; (800ab6c <_strtod_l+0xbdc>)
 800a970:	f7f5 fd72 	bl	8000458 <__aeabi_dcmplt>
 800a974:	2800      	cmp	r0, #0
 800a976:	d158      	bne.n	800aa2a <_strtod_l+0xa9a>
 800a978:	0020      	movs	r0, r4
 800a97a:	0029      	movs	r1, r5
 800a97c:	2200      	movs	r2, #0
 800a97e:	4b7c      	ldr	r3, [pc, #496]	; (800ab70 <_strtod_l+0xbe0>)
 800a980:	f7f6 fe5e 	bl	8001640 <__aeabi_dmul>
 800a984:	0004      	movs	r4, r0
 800a986:	000d      	movs	r5, r1
 800a988:	2380      	movs	r3, #128	; 0x80
 800a98a:	061b      	lsls	r3, r3, #24
 800a98c:	940a      	str	r4, [sp, #40]	; 0x28
 800a98e:	18eb      	adds	r3, r5, r3
 800a990:	930b      	str	r3, [sp, #44]	; 0x2c
 800a992:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a994:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a996:	9212      	str	r2, [sp, #72]	; 0x48
 800a998:	9313      	str	r3, [sp, #76]	; 0x4c
 800a99a:	4a76      	ldr	r2, [pc, #472]	; (800ab74 <_strtod_l+0xbe4>)
 800a99c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a99e:	4013      	ands	r3, r2
 800a9a0:	9314      	str	r3, [sp, #80]	; 0x50
 800a9a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a9a4:	4b74      	ldr	r3, [pc, #464]	; (800ab78 <_strtod_l+0xbe8>)
 800a9a6:	429a      	cmp	r2, r3
 800a9a8:	d000      	beq.n	800a9ac <_strtod_l+0xa1c>
 800a9aa:	e091      	b.n	800aad0 <_strtod_l+0xb40>
 800a9ac:	4a73      	ldr	r2, [pc, #460]	; (800ab7c <_strtod_l+0xbec>)
 800a9ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800a9b0:	4694      	mov	ip, r2
 800a9b2:	4463      	add	r3, ip
 800a9b4:	001f      	movs	r7, r3
 800a9b6:	0030      	movs	r0, r6
 800a9b8:	0019      	movs	r1, r3
 800a9ba:	f001 fb63 	bl	800c084 <__ulp>
 800a9be:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a9c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9c2:	f7f6 fe3d 	bl	8001640 <__aeabi_dmul>
 800a9c6:	0032      	movs	r2, r6
 800a9c8:	003b      	movs	r3, r7
 800a9ca:	f7f5 fedf 	bl	800078c <__aeabi_dadd>
 800a9ce:	4a69      	ldr	r2, [pc, #420]	; (800ab74 <_strtod_l+0xbe4>)
 800a9d0:	4b6b      	ldr	r3, [pc, #428]	; (800ab80 <_strtod_l+0xbf0>)
 800a9d2:	0006      	movs	r6, r0
 800a9d4:	400a      	ands	r2, r1
 800a9d6:	429a      	cmp	r2, r3
 800a9d8:	d949      	bls.n	800aa6e <_strtod_l+0xade>
 800a9da:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800a9dc:	4b69      	ldr	r3, [pc, #420]	; (800ab84 <_strtod_l+0xbf4>)
 800a9de:	429a      	cmp	r2, r3
 800a9e0:	d103      	bne.n	800a9ea <_strtod_l+0xa5a>
 800a9e2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a9e4:	3301      	adds	r3, #1
 800a9e6:	d100      	bne.n	800a9ea <_strtod_l+0xa5a>
 800a9e8:	e535      	b.n	800a456 <_strtod_l+0x4c6>
 800a9ea:	2601      	movs	r6, #1
 800a9ec:	4f65      	ldr	r7, [pc, #404]	; (800ab84 <_strtod_l+0xbf4>)
 800a9ee:	4276      	negs	r6, r6
 800a9f0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800a9f2:	9804      	ldr	r0, [sp, #16]
 800a9f4:	f001 f804 	bl	800ba00 <_Bfree>
 800a9f8:	9908      	ldr	r1, [sp, #32]
 800a9fa:	9804      	ldr	r0, [sp, #16]
 800a9fc:	f001 f800 	bl	800ba00 <_Bfree>
 800aa00:	9906      	ldr	r1, [sp, #24]
 800aa02:	9804      	ldr	r0, [sp, #16]
 800aa04:	f000 fffc 	bl	800ba00 <_Bfree>
 800aa08:	9905      	ldr	r1, [sp, #20]
 800aa0a:	9804      	ldr	r0, [sp, #16]
 800aa0c:	f000 fff8 	bl	800ba00 <_Bfree>
 800aa10:	e60b      	b.n	800a62a <_strtod_l+0x69a>
 800aa12:	2e01      	cmp	r6, #1
 800aa14:	d103      	bne.n	800aa1e <_strtod_l+0xa8e>
 800aa16:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa18:	2b00      	cmp	r3, #0
 800aa1a:	d100      	bne.n	800aa1e <_strtod_l+0xa8e>
 800aa1c:	e58e      	b.n	800a53c <_strtod_l+0x5ac>
 800aa1e:	2300      	movs	r3, #0
 800aa20:	4c59      	ldr	r4, [pc, #356]	; (800ab88 <_strtod_l+0xbf8>)
 800aa22:	930a      	str	r3, [sp, #40]	; 0x28
 800aa24:	940b      	str	r4, [sp, #44]	; 0x2c
 800aa26:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800aa28:	e01c      	b.n	800aa64 <_strtod_l+0xad4>
 800aa2a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800aa2c:	4d50      	ldr	r5, [pc, #320]	; (800ab70 <_strtod_l+0xbe0>)
 800aa2e:	e7ab      	b.n	800a988 <_strtod_l+0x9f8>
 800aa30:	2200      	movs	r2, #0
 800aa32:	0020      	movs	r0, r4
 800aa34:	0029      	movs	r1, r5
 800aa36:	4b4e      	ldr	r3, [pc, #312]	; (800ab70 <_strtod_l+0xbe0>)
 800aa38:	f7f6 fe02 	bl	8001640 <__aeabi_dmul>
 800aa3c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aa3e:	0004      	movs	r4, r0
 800aa40:	000b      	movs	r3, r1
 800aa42:	000d      	movs	r5, r1
 800aa44:	2a00      	cmp	r2, #0
 800aa46:	d104      	bne.n	800aa52 <_strtod_l+0xac2>
 800aa48:	2280      	movs	r2, #128	; 0x80
 800aa4a:	0612      	lsls	r2, r2, #24
 800aa4c:	900a      	str	r0, [sp, #40]	; 0x28
 800aa4e:	188b      	adds	r3, r1, r2
 800aa50:	e79e      	b.n	800a990 <_strtod_l+0xa00>
 800aa52:	0002      	movs	r2, r0
 800aa54:	920a      	str	r2, [sp, #40]	; 0x28
 800aa56:	930b      	str	r3, [sp, #44]	; 0x2c
 800aa58:	e79b      	b.n	800a992 <_strtod_l+0xa02>
 800aa5a:	2300      	movs	r3, #0
 800aa5c:	4c43      	ldr	r4, [pc, #268]	; (800ab6c <_strtod_l+0xbdc>)
 800aa5e:	930a      	str	r3, [sp, #40]	; 0x28
 800aa60:	940b      	str	r4, [sp, #44]	; 0x2c
 800aa62:	2400      	movs	r4, #0
 800aa64:	4d41      	ldr	r5, [pc, #260]	; (800ab6c <_strtod_l+0xbdc>)
 800aa66:	e794      	b.n	800a992 <_strtod_l+0xa02>
 800aa68:	2300      	movs	r3, #0
 800aa6a:	4c47      	ldr	r4, [pc, #284]	; (800ab88 <_strtod_l+0xbf8>)
 800aa6c:	e7f7      	b.n	800aa5e <_strtod_l+0xace>
 800aa6e:	23d4      	movs	r3, #212	; 0xd4
 800aa70:	049b      	lsls	r3, r3, #18
 800aa72:	18cf      	adds	r7, r1, r3
 800aa74:	9b07      	ldr	r3, [sp, #28]
 800aa76:	970e      	str	r7, [sp, #56]	; 0x38
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1b9      	bne.n	800a9f0 <_strtod_l+0xa60>
 800aa7c:	4b3d      	ldr	r3, [pc, #244]	; (800ab74 <_strtod_l+0xbe4>)
 800aa7e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa80:	403b      	ands	r3, r7
 800aa82:	429a      	cmp	r2, r3
 800aa84:	d1b4      	bne.n	800a9f0 <_strtod_l+0xa60>
 800aa86:	0020      	movs	r0, r4
 800aa88:	0029      	movs	r1, r5
 800aa8a:	f7f5 fd4b 	bl	8000524 <__aeabi_d2lz>
 800aa8e:	f7f5 fd85 	bl	800059c <__aeabi_l2d>
 800aa92:	0002      	movs	r2, r0
 800aa94:	000b      	movs	r3, r1
 800aa96:	0020      	movs	r0, r4
 800aa98:	0029      	movs	r1, r5
 800aa9a:	f7f7 f893 	bl	8001bc4 <__aeabi_dsub>
 800aa9e:	033b      	lsls	r3, r7, #12
 800aaa0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800aaa2:	0b1b      	lsrs	r3, r3, #12
 800aaa4:	4333      	orrs	r3, r6
 800aaa6:	4313      	orrs	r3, r2
 800aaa8:	0004      	movs	r4, r0
 800aaaa:	000d      	movs	r5, r1
 800aaac:	4a37      	ldr	r2, [pc, #220]	; (800ab8c <_strtod_l+0xbfc>)
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d054      	beq.n	800ab5c <_strtod_l+0xbcc>
 800aab2:	4b37      	ldr	r3, [pc, #220]	; (800ab90 <_strtod_l+0xc00>)
 800aab4:	f7f5 fcd0 	bl	8000458 <__aeabi_dcmplt>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d000      	beq.n	800aabe <_strtod_l+0xb2e>
 800aabc:	e4d4      	b.n	800a468 <_strtod_l+0x4d8>
 800aabe:	0020      	movs	r0, r4
 800aac0:	0029      	movs	r1, r5
 800aac2:	4a34      	ldr	r2, [pc, #208]	; (800ab94 <_strtod_l+0xc04>)
 800aac4:	4b2a      	ldr	r3, [pc, #168]	; (800ab70 <_strtod_l+0xbe0>)
 800aac6:	f7f5 fcdb 	bl	8000480 <__aeabi_dcmpgt>
 800aaca:	2800      	cmp	r0, #0
 800aacc:	d090      	beq.n	800a9f0 <_strtod_l+0xa60>
 800aace:	e4cb      	b.n	800a468 <_strtod_l+0x4d8>
 800aad0:	9b07      	ldr	r3, [sp, #28]
 800aad2:	2b00      	cmp	r3, #0
 800aad4:	d02b      	beq.n	800ab2e <_strtod_l+0xb9e>
 800aad6:	23d4      	movs	r3, #212	; 0xd4
 800aad8:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aada:	04db      	lsls	r3, r3, #19
 800aadc:	429a      	cmp	r2, r3
 800aade:	d826      	bhi.n	800ab2e <_strtod_l+0xb9e>
 800aae0:	0020      	movs	r0, r4
 800aae2:	0029      	movs	r1, r5
 800aae4:	4a2c      	ldr	r2, [pc, #176]	; (800ab98 <_strtod_l+0xc08>)
 800aae6:	4b2d      	ldr	r3, [pc, #180]	; (800ab9c <_strtod_l+0xc0c>)
 800aae8:	f7f5 fcc0 	bl	800046c <__aeabi_dcmple>
 800aaec:	2800      	cmp	r0, #0
 800aaee:	d017      	beq.n	800ab20 <_strtod_l+0xb90>
 800aaf0:	0020      	movs	r0, r4
 800aaf2:	0029      	movs	r1, r5
 800aaf4:	f7f5 fcf8 	bl	80004e8 <__aeabi_d2uiz>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d100      	bne.n	800aafe <_strtod_l+0xb6e>
 800aafc:	3001      	adds	r0, #1
 800aafe:	f7f7 fc67 	bl	80023d0 <__aeabi_ui2d>
 800ab02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ab04:	0004      	movs	r4, r0
 800ab06:	000b      	movs	r3, r1
 800ab08:	000d      	movs	r5, r1
 800ab0a:	2a00      	cmp	r2, #0
 800ab0c:	d122      	bne.n	800ab54 <_strtod_l+0xbc4>
 800ab0e:	2280      	movs	r2, #128	; 0x80
 800ab10:	0612      	lsls	r2, r2, #24
 800ab12:	188b      	adds	r3, r1, r2
 800ab14:	9016      	str	r0, [sp, #88]	; 0x58
 800ab16:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab18:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ab1a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ab1c:	9212      	str	r2, [sp, #72]	; 0x48
 800ab1e:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab20:	22d6      	movs	r2, #214	; 0xd6
 800ab22:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ab24:	04d2      	lsls	r2, r2, #19
 800ab26:	189b      	adds	r3, r3, r2
 800ab28:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ab2a:	1a9b      	subs	r3, r3, r2
 800ab2c:	9313      	str	r3, [sp, #76]	; 0x4c
 800ab2e:	9810      	ldr	r0, [sp, #64]	; 0x40
 800ab30:	9911      	ldr	r1, [sp, #68]	; 0x44
 800ab32:	9e12      	ldr	r6, [sp, #72]	; 0x48
 800ab34:	9f13      	ldr	r7, [sp, #76]	; 0x4c
 800ab36:	f001 faa5 	bl	800c084 <__ulp>
 800ab3a:	0002      	movs	r2, r0
 800ab3c:	000b      	movs	r3, r1
 800ab3e:	0030      	movs	r0, r6
 800ab40:	0039      	movs	r1, r7
 800ab42:	f7f6 fd7d 	bl	8001640 <__aeabi_dmul>
 800ab46:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800ab48:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ab4a:	f7f5 fe1f 	bl	800078c <__aeabi_dadd>
 800ab4e:	0006      	movs	r6, r0
 800ab50:	000f      	movs	r7, r1
 800ab52:	e78f      	b.n	800aa74 <_strtod_l+0xae4>
 800ab54:	0002      	movs	r2, r0
 800ab56:	9216      	str	r2, [sp, #88]	; 0x58
 800ab58:	9317      	str	r3, [sp, #92]	; 0x5c
 800ab5a:	e7dd      	b.n	800ab18 <_strtod_l+0xb88>
 800ab5c:	4b10      	ldr	r3, [pc, #64]	; (800aba0 <_strtod_l+0xc10>)
 800ab5e:	f7f5 fc7b 	bl	8000458 <__aeabi_dcmplt>
 800ab62:	e7b2      	b.n	800aaca <_strtod_l+0xb3a>
 800ab64:	fff00000 	.word	0xfff00000
 800ab68:	000fffff 	.word	0x000fffff
 800ab6c:	3ff00000 	.word	0x3ff00000
 800ab70:	3fe00000 	.word	0x3fe00000
 800ab74:	7ff00000 	.word	0x7ff00000
 800ab78:	7fe00000 	.word	0x7fe00000
 800ab7c:	fcb00000 	.word	0xfcb00000
 800ab80:	7c9fffff 	.word	0x7c9fffff
 800ab84:	7fefffff 	.word	0x7fefffff
 800ab88:	bff00000 	.word	0xbff00000
 800ab8c:	94a03595 	.word	0x94a03595
 800ab90:	3fdfffff 	.word	0x3fdfffff
 800ab94:	35afe535 	.word	0x35afe535
 800ab98:	ffc00000 	.word	0xffc00000
 800ab9c:	41dfffff 	.word	0x41dfffff
 800aba0:	3fcfffff 	.word	0x3fcfffff

0800aba4 <strtod>:
 800aba4:	b510      	push	{r4, lr}
 800aba6:	4c04      	ldr	r4, [pc, #16]	; (800abb8 <strtod+0x14>)
 800aba8:	000a      	movs	r2, r1
 800abaa:	0001      	movs	r1, r0
 800abac:	4b03      	ldr	r3, [pc, #12]	; (800abbc <strtod+0x18>)
 800abae:	6820      	ldr	r0, [r4, #0]
 800abb0:	f7ff f9ee 	bl	8009f90 <_strtod_l>
 800abb4:	bd10      	pop	{r4, pc}
 800abb6:	46c0      	nop			; (mov r8, r8)
 800abb8:	200001e0 	.word	0x200001e0
 800abbc:	20000028 	.word	0x20000028

0800abc0 <_strtol_l.constprop.0>:
 800abc0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800abc2:	b087      	sub	sp, #28
 800abc4:	001e      	movs	r6, r3
 800abc6:	9005      	str	r0, [sp, #20]
 800abc8:	9101      	str	r1, [sp, #4]
 800abca:	9202      	str	r2, [sp, #8]
 800abcc:	2b01      	cmp	r3, #1
 800abce:	d048      	beq.n	800ac62 <_strtol_l.constprop.0+0xa2>
 800abd0:	000b      	movs	r3, r1
 800abd2:	2e24      	cmp	r6, #36	; 0x24
 800abd4:	d845      	bhi.n	800ac62 <_strtol_l.constprop.0+0xa2>
 800abd6:	4a3b      	ldr	r2, [pc, #236]	; (800acc4 <_strtol_l.constprop.0+0x104>)
 800abd8:	2108      	movs	r1, #8
 800abda:	4694      	mov	ip, r2
 800abdc:	001a      	movs	r2, r3
 800abde:	4660      	mov	r0, ip
 800abe0:	7814      	ldrb	r4, [r2, #0]
 800abe2:	3301      	adds	r3, #1
 800abe4:	5d00      	ldrb	r0, [r0, r4]
 800abe6:	001d      	movs	r5, r3
 800abe8:	0007      	movs	r7, r0
 800abea:	400f      	ands	r7, r1
 800abec:	4208      	tst	r0, r1
 800abee:	d1f5      	bne.n	800abdc <_strtol_l.constprop.0+0x1c>
 800abf0:	2c2d      	cmp	r4, #45	; 0x2d
 800abf2:	d13d      	bne.n	800ac70 <_strtol_l.constprop.0+0xb0>
 800abf4:	2701      	movs	r7, #1
 800abf6:	781c      	ldrb	r4, [r3, #0]
 800abf8:	1c95      	adds	r5, r2, #2
 800abfa:	2e00      	cmp	r6, #0
 800abfc:	d05e      	beq.n	800acbc <_strtol_l.constprop.0+0xfc>
 800abfe:	2e10      	cmp	r6, #16
 800ac00:	d109      	bne.n	800ac16 <_strtol_l.constprop.0+0x56>
 800ac02:	2c30      	cmp	r4, #48	; 0x30
 800ac04:	d107      	bne.n	800ac16 <_strtol_l.constprop.0+0x56>
 800ac06:	2220      	movs	r2, #32
 800ac08:	782b      	ldrb	r3, [r5, #0]
 800ac0a:	4393      	bics	r3, r2
 800ac0c:	2b58      	cmp	r3, #88	; 0x58
 800ac0e:	d150      	bne.n	800acb2 <_strtol_l.constprop.0+0xf2>
 800ac10:	2610      	movs	r6, #16
 800ac12:	786c      	ldrb	r4, [r5, #1]
 800ac14:	3502      	adds	r5, #2
 800ac16:	4b2c      	ldr	r3, [pc, #176]	; (800acc8 <_strtol_l.constprop.0+0x108>)
 800ac18:	0031      	movs	r1, r6
 800ac1a:	18fb      	adds	r3, r7, r3
 800ac1c:	0018      	movs	r0, r3
 800ac1e:	9303      	str	r3, [sp, #12]
 800ac20:	f7f5 fb14 	bl	800024c <__aeabi_uidivmod>
 800ac24:	2200      	movs	r2, #0
 800ac26:	9104      	str	r1, [sp, #16]
 800ac28:	2101      	movs	r1, #1
 800ac2a:	4684      	mov	ip, r0
 800ac2c:	0010      	movs	r0, r2
 800ac2e:	4249      	negs	r1, r1
 800ac30:	0023      	movs	r3, r4
 800ac32:	3b30      	subs	r3, #48	; 0x30
 800ac34:	2b09      	cmp	r3, #9
 800ac36:	d903      	bls.n	800ac40 <_strtol_l.constprop.0+0x80>
 800ac38:	3b11      	subs	r3, #17
 800ac3a:	2b19      	cmp	r3, #25
 800ac3c:	d81d      	bhi.n	800ac7a <_strtol_l.constprop.0+0xba>
 800ac3e:	330a      	adds	r3, #10
 800ac40:	429e      	cmp	r6, r3
 800ac42:	dd1e      	ble.n	800ac82 <_strtol_l.constprop.0+0xc2>
 800ac44:	1c54      	adds	r4, r2, #1
 800ac46:	d009      	beq.n	800ac5c <_strtol_l.constprop.0+0x9c>
 800ac48:	000a      	movs	r2, r1
 800ac4a:	4584      	cmp	ip, r0
 800ac4c:	d306      	bcc.n	800ac5c <_strtol_l.constprop.0+0x9c>
 800ac4e:	d102      	bne.n	800ac56 <_strtol_l.constprop.0+0x96>
 800ac50:	9c04      	ldr	r4, [sp, #16]
 800ac52:	429c      	cmp	r4, r3
 800ac54:	db02      	blt.n	800ac5c <_strtol_l.constprop.0+0x9c>
 800ac56:	2201      	movs	r2, #1
 800ac58:	4370      	muls	r0, r6
 800ac5a:	1818      	adds	r0, r3, r0
 800ac5c:	782c      	ldrb	r4, [r5, #0]
 800ac5e:	3501      	adds	r5, #1
 800ac60:	e7e6      	b.n	800ac30 <_strtol_l.constprop.0+0x70>
 800ac62:	f000 fa77 	bl	800b154 <__errno>
 800ac66:	2316      	movs	r3, #22
 800ac68:	6003      	str	r3, [r0, #0]
 800ac6a:	2000      	movs	r0, #0
 800ac6c:	b007      	add	sp, #28
 800ac6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ac70:	2c2b      	cmp	r4, #43	; 0x2b
 800ac72:	d1c2      	bne.n	800abfa <_strtol_l.constprop.0+0x3a>
 800ac74:	781c      	ldrb	r4, [r3, #0]
 800ac76:	1c95      	adds	r5, r2, #2
 800ac78:	e7bf      	b.n	800abfa <_strtol_l.constprop.0+0x3a>
 800ac7a:	0023      	movs	r3, r4
 800ac7c:	3b61      	subs	r3, #97	; 0x61
 800ac7e:	2b19      	cmp	r3, #25
 800ac80:	d9dd      	bls.n	800ac3e <_strtol_l.constprop.0+0x7e>
 800ac82:	1c53      	adds	r3, r2, #1
 800ac84:	d109      	bne.n	800ac9a <_strtol_l.constprop.0+0xda>
 800ac86:	2322      	movs	r3, #34	; 0x22
 800ac88:	9a05      	ldr	r2, [sp, #20]
 800ac8a:	9803      	ldr	r0, [sp, #12]
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	9b02      	ldr	r3, [sp, #8]
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d0eb      	beq.n	800ac6c <_strtol_l.constprop.0+0xac>
 800ac94:	1e6b      	subs	r3, r5, #1
 800ac96:	9301      	str	r3, [sp, #4]
 800ac98:	e007      	b.n	800acaa <_strtol_l.constprop.0+0xea>
 800ac9a:	2f00      	cmp	r7, #0
 800ac9c:	d000      	beq.n	800aca0 <_strtol_l.constprop.0+0xe0>
 800ac9e:	4240      	negs	r0, r0
 800aca0:	9b02      	ldr	r3, [sp, #8]
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	d0e2      	beq.n	800ac6c <_strtol_l.constprop.0+0xac>
 800aca6:	2a00      	cmp	r2, #0
 800aca8:	d1f4      	bne.n	800ac94 <_strtol_l.constprop.0+0xd4>
 800acaa:	9b02      	ldr	r3, [sp, #8]
 800acac:	9a01      	ldr	r2, [sp, #4]
 800acae:	601a      	str	r2, [r3, #0]
 800acb0:	e7dc      	b.n	800ac6c <_strtol_l.constprop.0+0xac>
 800acb2:	2430      	movs	r4, #48	; 0x30
 800acb4:	2e00      	cmp	r6, #0
 800acb6:	d1ae      	bne.n	800ac16 <_strtol_l.constprop.0+0x56>
 800acb8:	3608      	adds	r6, #8
 800acba:	e7ac      	b.n	800ac16 <_strtol_l.constprop.0+0x56>
 800acbc:	2c30      	cmp	r4, #48	; 0x30
 800acbe:	d0a2      	beq.n	800ac06 <_strtol_l.constprop.0+0x46>
 800acc0:	260a      	movs	r6, #10
 800acc2:	e7a8      	b.n	800ac16 <_strtol_l.constprop.0+0x56>
 800acc4:	0800d9f9 	.word	0x0800d9f9
 800acc8:	7fffffff 	.word	0x7fffffff

0800accc <strtol>:
 800accc:	b510      	push	{r4, lr}
 800acce:	4c04      	ldr	r4, [pc, #16]	; (800ace0 <strtol+0x14>)
 800acd0:	0013      	movs	r3, r2
 800acd2:	000a      	movs	r2, r1
 800acd4:	0001      	movs	r1, r0
 800acd6:	6820      	ldr	r0, [r4, #0]
 800acd8:	f7ff ff72 	bl	800abc0 <_strtol_l.constprop.0>
 800acdc:	bd10      	pop	{r4, pc}
 800acde:	46c0      	nop			; (mov r8, r8)
 800ace0:	200001e0 	.word	0x200001e0

0800ace4 <std>:
 800ace4:	2300      	movs	r3, #0
 800ace6:	b510      	push	{r4, lr}
 800ace8:	0004      	movs	r4, r0
 800acea:	6003      	str	r3, [r0, #0]
 800acec:	6043      	str	r3, [r0, #4]
 800acee:	6083      	str	r3, [r0, #8]
 800acf0:	8181      	strh	r1, [r0, #12]
 800acf2:	6643      	str	r3, [r0, #100]	; 0x64
 800acf4:	81c2      	strh	r2, [r0, #14]
 800acf6:	6103      	str	r3, [r0, #16]
 800acf8:	6143      	str	r3, [r0, #20]
 800acfa:	6183      	str	r3, [r0, #24]
 800acfc:	0019      	movs	r1, r3
 800acfe:	2208      	movs	r2, #8
 800ad00:	305c      	adds	r0, #92	; 0x5c
 800ad02:	f000 f91f 	bl	800af44 <memset>
 800ad06:	4b0b      	ldr	r3, [pc, #44]	; (800ad34 <std+0x50>)
 800ad08:	6224      	str	r4, [r4, #32]
 800ad0a:	6263      	str	r3, [r4, #36]	; 0x24
 800ad0c:	4b0a      	ldr	r3, [pc, #40]	; (800ad38 <std+0x54>)
 800ad0e:	62a3      	str	r3, [r4, #40]	; 0x28
 800ad10:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <std+0x58>)
 800ad12:	62e3      	str	r3, [r4, #44]	; 0x2c
 800ad14:	4b0a      	ldr	r3, [pc, #40]	; (800ad40 <std+0x5c>)
 800ad16:	6323      	str	r3, [r4, #48]	; 0x30
 800ad18:	4b0a      	ldr	r3, [pc, #40]	; (800ad44 <std+0x60>)
 800ad1a:	429c      	cmp	r4, r3
 800ad1c:	d005      	beq.n	800ad2a <std+0x46>
 800ad1e:	4b0a      	ldr	r3, [pc, #40]	; (800ad48 <std+0x64>)
 800ad20:	429c      	cmp	r4, r3
 800ad22:	d002      	beq.n	800ad2a <std+0x46>
 800ad24:	4b09      	ldr	r3, [pc, #36]	; (800ad4c <std+0x68>)
 800ad26:	429c      	cmp	r4, r3
 800ad28:	d103      	bne.n	800ad32 <std+0x4e>
 800ad2a:	0020      	movs	r0, r4
 800ad2c:	3058      	adds	r0, #88	; 0x58
 800ad2e:	f000 fa3b 	bl	800b1a8 <__retarget_lock_init_recursive>
 800ad32:	bd10      	pop	{r4, pc}
 800ad34:	0800aead 	.word	0x0800aead
 800ad38:	0800aed5 	.word	0x0800aed5
 800ad3c:	0800af0d 	.word	0x0800af0d
 800ad40:	0800af39 	.word	0x0800af39
 800ad44:	20001804 	.word	0x20001804
 800ad48:	2000186c 	.word	0x2000186c
 800ad4c:	200018d4 	.word	0x200018d4

0800ad50 <stdio_exit_handler>:
 800ad50:	b510      	push	{r4, lr}
 800ad52:	4a03      	ldr	r2, [pc, #12]	; (800ad60 <stdio_exit_handler+0x10>)
 800ad54:	4903      	ldr	r1, [pc, #12]	; (800ad64 <stdio_exit_handler+0x14>)
 800ad56:	4804      	ldr	r0, [pc, #16]	; (800ad68 <stdio_exit_handler+0x18>)
 800ad58:	f000 f86c 	bl	800ae34 <_fwalk_sglue>
 800ad5c:	bd10      	pop	{r4, pc}
 800ad5e:	46c0      	nop			; (mov r8, r8)
 800ad60:	2000001c 	.word	0x2000001c
 800ad64:	0800c9f1 	.word	0x0800c9f1
 800ad68:	20000194 	.word	0x20000194

0800ad6c <cleanup_stdio>:
 800ad6c:	6841      	ldr	r1, [r0, #4]
 800ad6e:	4b0b      	ldr	r3, [pc, #44]	; (800ad9c <cleanup_stdio+0x30>)
 800ad70:	b510      	push	{r4, lr}
 800ad72:	0004      	movs	r4, r0
 800ad74:	4299      	cmp	r1, r3
 800ad76:	d001      	beq.n	800ad7c <cleanup_stdio+0x10>
 800ad78:	f001 fe3a 	bl	800c9f0 <_fflush_r>
 800ad7c:	68a1      	ldr	r1, [r4, #8]
 800ad7e:	4b08      	ldr	r3, [pc, #32]	; (800ada0 <cleanup_stdio+0x34>)
 800ad80:	4299      	cmp	r1, r3
 800ad82:	d002      	beq.n	800ad8a <cleanup_stdio+0x1e>
 800ad84:	0020      	movs	r0, r4
 800ad86:	f001 fe33 	bl	800c9f0 <_fflush_r>
 800ad8a:	68e1      	ldr	r1, [r4, #12]
 800ad8c:	4b05      	ldr	r3, [pc, #20]	; (800ada4 <cleanup_stdio+0x38>)
 800ad8e:	4299      	cmp	r1, r3
 800ad90:	d002      	beq.n	800ad98 <cleanup_stdio+0x2c>
 800ad92:	0020      	movs	r0, r4
 800ad94:	f001 fe2c 	bl	800c9f0 <_fflush_r>
 800ad98:	bd10      	pop	{r4, pc}
 800ad9a:	46c0      	nop			; (mov r8, r8)
 800ad9c:	20001804 	.word	0x20001804
 800ada0:	2000186c 	.word	0x2000186c
 800ada4:	200018d4 	.word	0x200018d4

0800ada8 <global_stdio_init.part.0>:
 800ada8:	b510      	push	{r4, lr}
 800adaa:	4b09      	ldr	r3, [pc, #36]	; (800add0 <global_stdio_init.part.0+0x28>)
 800adac:	4a09      	ldr	r2, [pc, #36]	; (800add4 <global_stdio_init.part.0+0x2c>)
 800adae:	2104      	movs	r1, #4
 800adb0:	601a      	str	r2, [r3, #0]
 800adb2:	4809      	ldr	r0, [pc, #36]	; (800add8 <global_stdio_init.part.0+0x30>)
 800adb4:	2200      	movs	r2, #0
 800adb6:	f7ff ff95 	bl	800ace4 <std>
 800adba:	2201      	movs	r2, #1
 800adbc:	2109      	movs	r1, #9
 800adbe:	4807      	ldr	r0, [pc, #28]	; (800addc <global_stdio_init.part.0+0x34>)
 800adc0:	f7ff ff90 	bl	800ace4 <std>
 800adc4:	2202      	movs	r2, #2
 800adc6:	2112      	movs	r1, #18
 800adc8:	4805      	ldr	r0, [pc, #20]	; (800ade0 <global_stdio_init.part.0+0x38>)
 800adca:	f7ff ff8b 	bl	800ace4 <std>
 800adce:	bd10      	pop	{r4, pc}
 800add0:	2000193c 	.word	0x2000193c
 800add4:	0800ad51 	.word	0x0800ad51
 800add8:	20001804 	.word	0x20001804
 800addc:	2000186c 	.word	0x2000186c
 800ade0:	200018d4 	.word	0x200018d4

0800ade4 <__sfp_lock_acquire>:
 800ade4:	b510      	push	{r4, lr}
 800ade6:	4802      	ldr	r0, [pc, #8]	; (800adf0 <__sfp_lock_acquire+0xc>)
 800ade8:	f000 f9df 	bl	800b1aa <__retarget_lock_acquire_recursive>
 800adec:	bd10      	pop	{r4, pc}
 800adee:	46c0      	nop			; (mov r8, r8)
 800adf0:	20001945 	.word	0x20001945

0800adf4 <__sfp_lock_release>:
 800adf4:	b510      	push	{r4, lr}
 800adf6:	4802      	ldr	r0, [pc, #8]	; (800ae00 <__sfp_lock_release+0xc>)
 800adf8:	f000 f9d8 	bl	800b1ac <__retarget_lock_release_recursive>
 800adfc:	bd10      	pop	{r4, pc}
 800adfe:	46c0      	nop			; (mov r8, r8)
 800ae00:	20001945 	.word	0x20001945

0800ae04 <__sinit>:
 800ae04:	b510      	push	{r4, lr}
 800ae06:	0004      	movs	r4, r0
 800ae08:	f7ff ffec 	bl	800ade4 <__sfp_lock_acquire>
 800ae0c:	6a23      	ldr	r3, [r4, #32]
 800ae0e:	2b00      	cmp	r3, #0
 800ae10:	d002      	beq.n	800ae18 <__sinit+0x14>
 800ae12:	f7ff ffef 	bl	800adf4 <__sfp_lock_release>
 800ae16:	bd10      	pop	{r4, pc}
 800ae18:	4b04      	ldr	r3, [pc, #16]	; (800ae2c <__sinit+0x28>)
 800ae1a:	6223      	str	r3, [r4, #32]
 800ae1c:	4b04      	ldr	r3, [pc, #16]	; (800ae30 <__sinit+0x2c>)
 800ae1e:	681b      	ldr	r3, [r3, #0]
 800ae20:	2b00      	cmp	r3, #0
 800ae22:	d1f6      	bne.n	800ae12 <__sinit+0xe>
 800ae24:	f7ff ffc0 	bl	800ada8 <global_stdio_init.part.0>
 800ae28:	e7f3      	b.n	800ae12 <__sinit+0xe>
 800ae2a:	46c0      	nop			; (mov r8, r8)
 800ae2c:	0800ad6d 	.word	0x0800ad6d
 800ae30:	2000193c 	.word	0x2000193c

0800ae34 <_fwalk_sglue>:
 800ae34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ae36:	0014      	movs	r4, r2
 800ae38:	2600      	movs	r6, #0
 800ae3a:	9000      	str	r0, [sp, #0]
 800ae3c:	9101      	str	r1, [sp, #4]
 800ae3e:	68a5      	ldr	r5, [r4, #8]
 800ae40:	6867      	ldr	r7, [r4, #4]
 800ae42:	3f01      	subs	r7, #1
 800ae44:	d504      	bpl.n	800ae50 <_fwalk_sglue+0x1c>
 800ae46:	6824      	ldr	r4, [r4, #0]
 800ae48:	2c00      	cmp	r4, #0
 800ae4a:	d1f8      	bne.n	800ae3e <_fwalk_sglue+0xa>
 800ae4c:	0030      	movs	r0, r6
 800ae4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800ae50:	89ab      	ldrh	r3, [r5, #12]
 800ae52:	2b01      	cmp	r3, #1
 800ae54:	d908      	bls.n	800ae68 <_fwalk_sglue+0x34>
 800ae56:	220e      	movs	r2, #14
 800ae58:	5eab      	ldrsh	r3, [r5, r2]
 800ae5a:	3301      	adds	r3, #1
 800ae5c:	d004      	beq.n	800ae68 <_fwalk_sglue+0x34>
 800ae5e:	0029      	movs	r1, r5
 800ae60:	9800      	ldr	r0, [sp, #0]
 800ae62:	9b01      	ldr	r3, [sp, #4]
 800ae64:	4798      	blx	r3
 800ae66:	4306      	orrs	r6, r0
 800ae68:	3568      	adds	r5, #104	; 0x68
 800ae6a:	e7ea      	b.n	800ae42 <_fwalk_sglue+0xe>

0800ae6c <siprintf>:
 800ae6c:	b40e      	push	{r1, r2, r3}
 800ae6e:	b500      	push	{lr}
 800ae70:	490b      	ldr	r1, [pc, #44]	; (800aea0 <siprintf+0x34>)
 800ae72:	b09c      	sub	sp, #112	; 0x70
 800ae74:	ab1d      	add	r3, sp, #116	; 0x74
 800ae76:	9002      	str	r0, [sp, #8]
 800ae78:	9006      	str	r0, [sp, #24]
 800ae7a:	9107      	str	r1, [sp, #28]
 800ae7c:	9104      	str	r1, [sp, #16]
 800ae7e:	4809      	ldr	r0, [pc, #36]	; (800aea4 <siprintf+0x38>)
 800ae80:	4909      	ldr	r1, [pc, #36]	; (800aea8 <siprintf+0x3c>)
 800ae82:	cb04      	ldmia	r3!, {r2}
 800ae84:	9105      	str	r1, [sp, #20]
 800ae86:	6800      	ldr	r0, [r0, #0]
 800ae88:	a902      	add	r1, sp, #8
 800ae8a:	9301      	str	r3, [sp, #4]
 800ae8c:	f001 faa6 	bl	800c3dc <_svfiprintf_r>
 800ae90:	2200      	movs	r2, #0
 800ae92:	9b02      	ldr	r3, [sp, #8]
 800ae94:	701a      	strb	r2, [r3, #0]
 800ae96:	b01c      	add	sp, #112	; 0x70
 800ae98:	bc08      	pop	{r3}
 800ae9a:	b003      	add	sp, #12
 800ae9c:	4718      	bx	r3
 800ae9e:	46c0      	nop			; (mov r8, r8)
 800aea0:	7fffffff 	.word	0x7fffffff
 800aea4:	200001e0 	.word	0x200001e0
 800aea8:	ffff0208 	.word	0xffff0208

0800aeac <__sread>:
 800aeac:	b570      	push	{r4, r5, r6, lr}
 800aeae:	000c      	movs	r4, r1
 800aeb0:	250e      	movs	r5, #14
 800aeb2:	5f49      	ldrsh	r1, [r1, r5]
 800aeb4:	f000 f914 	bl	800b0e0 <_read_r>
 800aeb8:	2800      	cmp	r0, #0
 800aeba:	db03      	blt.n	800aec4 <__sread+0x18>
 800aebc:	6d63      	ldr	r3, [r4, #84]	; 0x54
 800aebe:	181b      	adds	r3, r3, r0
 800aec0:	6563      	str	r3, [r4, #84]	; 0x54
 800aec2:	bd70      	pop	{r4, r5, r6, pc}
 800aec4:	89a3      	ldrh	r3, [r4, #12]
 800aec6:	4a02      	ldr	r2, [pc, #8]	; (800aed0 <__sread+0x24>)
 800aec8:	4013      	ands	r3, r2
 800aeca:	81a3      	strh	r3, [r4, #12]
 800aecc:	e7f9      	b.n	800aec2 <__sread+0x16>
 800aece:	46c0      	nop			; (mov r8, r8)
 800aed0:	ffffefff 	.word	0xffffefff

0800aed4 <__swrite>:
 800aed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aed6:	001f      	movs	r7, r3
 800aed8:	898b      	ldrh	r3, [r1, #12]
 800aeda:	0005      	movs	r5, r0
 800aedc:	000c      	movs	r4, r1
 800aede:	0016      	movs	r6, r2
 800aee0:	05db      	lsls	r3, r3, #23
 800aee2:	d505      	bpl.n	800aef0 <__swrite+0x1c>
 800aee4:	230e      	movs	r3, #14
 800aee6:	5ec9      	ldrsh	r1, [r1, r3]
 800aee8:	2200      	movs	r2, #0
 800aeea:	2302      	movs	r3, #2
 800aeec:	f000 f8e4 	bl	800b0b8 <_lseek_r>
 800aef0:	89a3      	ldrh	r3, [r4, #12]
 800aef2:	4a05      	ldr	r2, [pc, #20]	; (800af08 <__swrite+0x34>)
 800aef4:	0028      	movs	r0, r5
 800aef6:	4013      	ands	r3, r2
 800aef8:	81a3      	strh	r3, [r4, #12]
 800aefa:	0032      	movs	r2, r6
 800aefc:	230e      	movs	r3, #14
 800aefe:	5ee1      	ldrsh	r1, [r4, r3]
 800af00:	003b      	movs	r3, r7
 800af02:	f000 f913 	bl	800b12c <_write_r>
 800af06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800af08:	ffffefff 	.word	0xffffefff

0800af0c <__sseek>:
 800af0c:	b570      	push	{r4, r5, r6, lr}
 800af0e:	000c      	movs	r4, r1
 800af10:	250e      	movs	r5, #14
 800af12:	5f49      	ldrsh	r1, [r1, r5]
 800af14:	f000 f8d0 	bl	800b0b8 <_lseek_r>
 800af18:	89a3      	ldrh	r3, [r4, #12]
 800af1a:	1c42      	adds	r2, r0, #1
 800af1c:	d103      	bne.n	800af26 <__sseek+0x1a>
 800af1e:	4a05      	ldr	r2, [pc, #20]	; (800af34 <__sseek+0x28>)
 800af20:	4013      	ands	r3, r2
 800af22:	81a3      	strh	r3, [r4, #12]
 800af24:	bd70      	pop	{r4, r5, r6, pc}
 800af26:	2280      	movs	r2, #128	; 0x80
 800af28:	0152      	lsls	r2, r2, #5
 800af2a:	4313      	orrs	r3, r2
 800af2c:	81a3      	strh	r3, [r4, #12]
 800af2e:	6560      	str	r0, [r4, #84]	; 0x54
 800af30:	e7f8      	b.n	800af24 <__sseek+0x18>
 800af32:	46c0      	nop			; (mov r8, r8)
 800af34:	ffffefff 	.word	0xffffefff

0800af38 <__sclose>:
 800af38:	b510      	push	{r4, lr}
 800af3a:	230e      	movs	r3, #14
 800af3c:	5ec9      	ldrsh	r1, [r1, r3]
 800af3e:	f000 f8a9 	bl	800b094 <_close_r>
 800af42:	bd10      	pop	{r4, pc}

0800af44 <memset>:
 800af44:	0003      	movs	r3, r0
 800af46:	1882      	adds	r2, r0, r2
 800af48:	4293      	cmp	r3, r2
 800af4a:	d100      	bne.n	800af4e <memset+0xa>
 800af4c:	4770      	bx	lr
 800af4e:	7019      	strb	r1, [r3, #0]
 800af50:	3301      	adds	r3, #1
 800af52:	e7f9      	b.n	800af48 <memset+0x4>

0800af54 <strncmp>:
 800af54:	b530      	push	{r4, r5, lr}
 800af56:	0005      	movs	r5, r0
 800af58:	1e10      	subs	r0, r2, #0
 800af5a:	d00b      	beq.n	800af74 <strncmp+0x20>
 800af5c:	2400      	movs	r4, #0
 800af5e:	3a01      	subs	r2, #1
 800af60:	5d2b      	ldrb	r3, [r5, r4]
 800af62:	5d08      	ldrb	r0, [r1, r4]
 800af64:	4283      	cmp	r3, r0
 800af66:	d104      	bne.n	800af72 <strncmp+0x1e>
 800af68:	42a2      	cmp	r2, r4
 800af6a:	d002      	beq.n	800af72 <strncmp+0x1e>
 800af6c:	3401      	adds	r4, #1
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d1f6      	bne.n	800af60 <strncmp+0xc>
 800af72:	1a18      	subs	r0, r3, r0
 800af74:	bd30      	pop	{r4, r5, pc}

0800af76 <strncpy>:
 800af76:	0003      	movs	r3, r0
 800af78:	b530      	push	{r4, r5, lr}
 800af7a:	001d      	movs	r5, r3
 800af7c:	2a00      	cmp	r2, #0
 800af7e:	d006      	beq.n	800af8e <strncpy+0x18>
 800af80:	780c      	ldrb	r4, [r1, #0]
 800af82:	3a01      	subs	r2, #1
 800af84:	3301      	adds	r3, #1
 800af86:	702c      	strb	r4, [r5, #0]
 800af88:	3101      	adds	r1, #1
 800af8a:	2c00      	cmp	r4, #0
 800af8c:	d1f5      	bne.n	800af7a <strncpy+0x4>
 800af8e:	2100      	movs	r1, #0
 800af90:	189a      	adds	r2, r3, r2
 800af92:	4293      	cmp	r3, r2
 800af94:	d100      	bne.n	800af98 <strncpy+0x22>
 800af96:	bd30      	pop	{r4, r5, pc}
 800af98:	7019      	strb	r1, [r3, #0]
 800af9a:	3301      	adds	r3, #1
 800af9c:	e7f9      	b.n	800af92 <strncpy+0x1c>
	...

0800afa0 <strtok>:
 800afa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800afa2:	4b16      	ldr	r3, [pc, #88]	; (800affc <strtok+0x5c>)
 800afa4:	0005      	movs	r5, r0
 800afa6:	681f      	ldr	r7, [r3, #0]
 800afa8:	000e      	movs	r6, r1
 800afaa:	6c7c      	ldr	r4, [r7, #68]	; 0x44
 800afac:	2c00      	cmp	r4, #0
 800afae:	d11d      	bne.n	800afec <strtok+0x4c>
 800afb0:	2050      	movs	r0, #80	; 0x50
 800afb2:	f7fe fed3 	bl	8009d5c <malloc>
 800afb6:	1e02      	subs	r2, r0, #0
 800afb8:	6478      	str	r0, [r7, #68]	; 0x44
 800afba:	d104      	bne.n	800afc6 <strtok+0x26>
 800afbc:	215b      	movs	r1, #91	; 0x5b
 800afbe:	4b10      	ldr	r3, [pc, #64]	; (800b000 <strtok+0x60>)
 800afc0:	4810      	ldr	r0, [pc, #64]	; (800b004 <strtok+0x64>)
 800afc2:	f000 f903 	bl	800b1cc <__assert_func>
 800afc6:	6004      	str	r4, [r0, #0]
 800afc8:	6044      	str	r4, [r0, #4]
 800afca:	6084      	str	r4, [r0, #8]
 800afcc:	60c4      	str	r4, [r0, #12]
 800afce:	6104      	str	r4, [r0, #16]
 800afd0:	6144      	str	r4, [r0, #20]
 800afd2:	6184      	str	r4, [r0, #24]
 800afd4:	6284      	str	r4, [r0, #40]	; 0x28
 800afd6:	62c4      	str	r4, [r0, #44]	; 0x2c
 800afd8:	6304      	str	r4, [r0, #48]	; 0x30
 800afda:	6344      	str	r4, [r0, #52]	; 0x34
 800afdc:	6384      	str	r4, [r0, #56]	; 0x38
 800afde:	63c4      	str	r4, [r0, #60]	; 0x3c
 800afe0:	6404      	str	r4, [r0, #64]	; 0x40
 800afe2:	6444      	str	r4, [r0, #68]	; 0x44
 800afe4:	6484      	str	r4, [r0, #72]	; 0x48
 800afe6:	64c4      	str	r4, [r0, #76]	; 0x4c
 800afe8:	7704      	strb	r4, [r0, #28]
 800afea:	6244      	str	r4, [r0, #36]	; 0x24
 800afec:	0031      	movs	r1, r6
 800afee:	0028      	movs	r0, r5
 800aff0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800aff2:	2301      	movs	r3, #1
 800aff4:	f000 f808 	bl	800b008 <__strtok_r>
 800aff8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800affa:	46c0      	nop			; (mov r8, r8)
 800affc:	200001e0 	.word	0x200001e0
 800b000:	0800daf9 	.word	0x0800daf9
 800b004:	0800db10 	.word	0x0800db10

0800b008 <__strtok_r>:
 800b008:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b00a:	2800      	cmp	r0, #0
 800b00c:	d102      	bne.n	800b014 <__strtok_r+0xc>
 800b00e:	6810      	ldr	r0, [r2, #0]
 800b010:	2800      	cmp	r0, #0
 800b012:	d013      	beq.n	800b03c <__strtok_r+0x34>
 800b014:	0004      	movs	r4, r0
 800b016:	0020      	movs	r0, r4
 800b018:	000e      	movs	r6, r1
 800b01a:	7805      	ldrb	r5, [r0, #0]
 800b01c:	3401      	adds	r4, #1
 800b01e:	7837      	ldrb	r7, [r6, #0]
 800b020:	2f00      	cmp	r7, #0
 800b022:	d104      	bne.n	800b02e <__strtok_r+0x26>
 800b024:	2d00      	cmp	r5, #0
 800b026:	d10f      	bne.n	800b048 <__strtok_r+0x40>
 800b028:	0028      	movs	r0, r5
 800b02a:	6015      	str	r5, [r2, #0]
 800b02c:	e006      	b.n	800b03c <__strtok_r+0x34>
 800b02e:	3601      	adds	r6, #1
 800b030:	42bd      	cmp	r5, r7
 800b032:	d1f4      	bne.n	800b01e <__strtok_r+0x16>
 800b034:	2b00      	cmp	r3, #0
 800b036:	d1ee      	bne.n	800b016 <__strtok_r+0xe>
 800b038:	6014      	str	r4, [r2, #0]
 800b03a:	7003      	strb	r3, [r0, #0]
 800b03c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b03e:	002f      	movs	r7, r5
 800b040:	e00f      	b.n	800b062 <__strtok_r+0x5a>
 800b042:	3301      	adds	r3, #1
 800b044:	2e00      	cmp	r6, #0
 800b046:	d104      	bne.n	800b052 <__strtok_r+0x4a>
 800b048:	0023      	movs	r3, r4
 800b04a:	3401      	adds	r4, #1
 800b04c:	781d      	ldrb	r5, [r3, #0]
 800b04e:	0027      	movs	r7, r4
 800b050:	000b      	movs	r3, r1
 800b052:	781e      	ldrb	r6, [r3, #0]
 800b054:	42b5      	cmp	r5, r6
 800b056:	d1f4      	bne.n	800b042 <__strtok_r+0x3a>
 800b058:	2d00      	cmp	r5, #0
 800b05a:	d0f0      	beq.n	800b03e <__strtok_r+0x36>
 800b05c:	2300      	movs	r3, #0
 800b05e:	3c01      	subs	r4, #1
 800b060:	7023      	strb	r3, [r4, #0]
 800b062:	6017      	str	r7, [r2, #0]
 800b064:	e7ea      	b.n	800b03c <__strtok_r+0x34>

0800b066 <strstr>:
 800b066:	780a      	ldrb	r2, [r1, #0]
 800b068:	b530      	push	{r4, r5, lr}
 800b06a:	2a00      	cmp	r2, #0
 800b06c:	d10c      	bne.n	800b088 <strstr+0x22>
 800b06e:	bd30      	pop	{r4, r5, pc}
 800b070:	429a      	cmp	r2, r3
 800b072:	d108      	bne.n	800b086 <strstr+0x20>
 800b074:	2301      	movs	r3, #1
 800b076:	5ccc      	ldrb	r4, [r1, r3]
 800b078:	2c00      	cmp	r4, #0
 800b07a:	d0f8      	beq.n	800b06e <strstr+0x8>
 800b07c:	5cc5      	ldrb	r5, [r0, r3]
 800b07e:	42a5      	cmp	r5, r4
 800b080:	d101      	bne.n	800b086 <strstr+0x20>
 800b082:	3301      	adds	r3, #1
 800b084:	e7f7      	b.n	800b076 <strstr+0x10>
 800b086:	3001      	adds	r0, #1
 800b088:	7803      	ldrb	r3, [r0, #0]
 800b08a:	2b00      	cmp	r3, #0
 800b08c:	d1f0      	bne.n	800b070 <strstr+0xa>
 800b08e:	0018      	movs	r0, r3
 800b090:	e7ed      	b.n	800b06e <strstr+0x8>
	...

0800b094 <_close_r>:
 800b094:	2300      	movs	r3, #0
 800b096:	b570      	push	{r4, r5, r6, lr}
 800b098:	4d06      	ldr	r5, [pc, #24]	; (800b0b4 <_close_r+0x20>)
 800b09a:	0004      	movs	r4, r0
 800b09c:	0008      	movs	r0, r1
 800b09e:	602b      	str	r3, [r5, #0]
 800b0a0:	f7f9 febf 	bl	8004e22 <_close>
 800b0a4:	1c43      	adds	r3, r0, #1
 800b0a6:	d103      	bne.n	800b0b0 <_close_r+0x1c>
 800b0a8:	682b      	ldr	r3, [r5, #0]
 800b0aa:	2b00      	cmp	r3, #0
 800b0ac:	d000      	beq.n	800b0b0 <_close_r+0x1c>
 800b0ae:	6023      	str	r3, [r4, #0]
 800b0b0:	bd70      	pop	{r4, r5, r6, pc}
 800b0b2:	46c0      	nop			; (mov r8, r8)
 800b0b4:	20001940 	.word	0x20001940

0800b0b8 <_lseek_r>:
 800b0b8:	b570      	push	{r4, r5, r6, lr}
 800b0ba:	0004      	movs	r4, r0
 800b0bc:	0008      	movs	r0, r1
 800b0be:	0011      	movs	r1, r2
 800b0c0:	001a      	movs	r2, r3
 800b0c2:	2300      	movs	r3, #0
 800b0c4:	4d05      	ldr	r5, [pc, #20]	; (800b0dc <_lseek_r+0x24>)
 800b0c6:	602b      	str	r3, [r5, #0]
 800b0c8:	f7f9 fecc 	bl	8004e64 <_lseek>
 800b0cc:	1c43      	adds	r3, r0, #1
 800b0ce:	d103      	bne.n	800b0d8 <_lseek_r+0x20>
 800b0d0:	682b      	ldr	r3, [r5, #0]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d000      	beq.n	800b0d8 <_lseek_r+0x20>
 800b0d6:	6023      	str	r3, [r4, #0]
 800b0d8:	bd70      	pop	{r4, r5, r6, pc}
 800b0da:	46c0      	nop			; (mov r8, r8)
 800b0dc:	20001940 	.word	0x20001940

0800b0e0 <_read_r>:
 800b0e0:	b570      	push	{r4, r5, r6, lr}
 800b0e2:	0004      	movs	r4, r0
 800b0e4:	0008      	movs	r0, r1
 800b0e6:	0011      	movs	r1, r2
 800b0e8:	001a      	movs	r2, r3
 800b0ea:	2300      	movs	r3, #0
 800b0ec:	4d05      	ldr	r5, [pc, #20]	; (800b104 <_read_r+0x24>)
 800b0ee:	602b      	str	r3, [r5, #0]
 800b0f0:	f7f9 fe5e 	bl	8004db0 <_read>
 800b0f4:	1c43      	adds	r3, r0, #1
 800b0f6:	d103      	bne.n	800b100 <_read_r+0x20>
 800b0f8:	682b      	ldr	r3, [r5, #0]
 800b0fa:	2b00      	cmp	r3, #0
 800b0fc:	d000      	beq.n	800b100 <_read_r+0x20>
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	bd70      	pop	{r4, r5, r6, pc}
 800b102:	46c0      	nop			; (mov r8, r8)
 800b104:	20001940 	.word	0x20001940

0800b108 <_sbrk_r>:
 800b108:	2300      	movs	r3, #0
 800b10a:	b570      	push	{r4, r5, r6, lr}
 800b10c:	4d06      	ldr	r5, [pc, #24]	; (800b128 <_sbrk_r+0x20>)
 800b10e:	0004      	movs	r4, r0
 800b110:	0008      	movs	r0, r1
 800b112:	602b      	str	r3, [r5, #0]
 800b114:	f7f9 feb2 	bl	8004e7c <_sbrk>
 800b118:	1c43      	adds	r3, r0, #1
 800b11a:	d103      	bne.n	800b124 <_sbrk_r+0x1c>
 800b11c:	682b      	ldr	r3, [r5, #0]
 800b11e:	2b00      	cmp	r3, #0
 800b120:	d000      	beq.n	800b124 <_sbrk_r+0x1c>
 800b122:	6023      	str	r3, [r4, #0]
 800b124:	bd70      	pop	{r4, r5, r6, pc}
 800b126:	46c0      	nop			; (mov r8, r8)
 800b128:	20001940 	.word	0x20001940

0800b12c <_write_r>:
 800b12c:	b570      	push	{r4, r5, r6, lr}
 800b12e:	0004      	movs	r4, r0
 800b130:	0008      	movs	r0, r1
 800b132:	0011      	movs	r1, r2
 800b134:	001a      	movs	r2, r3
 800b136:	2300      	movs	r3, #0
 800b138:	4d05      	ldr	r5, [pc, #20]	; (800b150 <_write_r+0x24>)
 800b13a:	602b      	str	r3, [r5, #0]
 800b13c:	f7f9 fe55 	bl	8004dea <_write>
 800b140:	1c43      	adds	r3, r0, #1
 800b142:	d103      	bne.n	800b14c <_write_r+0x20>
 800b144:	682b      	ldr	r3, [r5, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d000      	beq.n	800b14c <_write_r+0x20>
 800b14a:	6023      	str	r3, [r4, #0]
 800b14c:	bd70      	pop	{r4, r5, r6, pc}
 800b14e:	46c0      	nop			; (mov r8, r8)
 800b150:	20001940 	.word	0x20001940

0800b154 <__errno>:
 800b154:	4b01      	ldr	r3, [pc, #4]	; (800b15c <__errno+0x8>)
 800b156:	6818      	ldr	r0, [r3, #0]
 800b158:	4770      	bx	lr
 800b15a:	46c0      	nop			; (mov r8, r8)
 800b15c:	200001e0 	.word	0x200001e0

0800b160 <__libc_init_array>:
 800b160:	b570      	push	{r4, r5, r6, lr}
 800b162:	2600      	movs	r6, #0
 800b164:	4c0c      	ldr	r4, [pc, #48]	; (800b198 <__libc_init_array+0x38>)
 800b166:	4d0d      	ldr	r5, [pc, #52]	; (800b19c <__libc_init_array+0x3c>)
 800b168:	1b64      	subs	r4, r4, r5
 800b16a:	10a4      	asrs	r4, r4, #2
 800b16c:	42a6      	cmp	r6, r4
 800b16e:	d109      	bne.n	800b184 <__libc_init_array+0x24>
 800b170:	2600      	movs	r6, #0
 800b172:	f001 ff89 	bl	800d088 <_init>
 800b176:	4c0a      	ldr	r4, [pc, #40]	; (800b1a0 <__libc_init_array+0x40>)
 800b178:	4d0a      	ldr	r5, [pc, #40]	; (800b1a4 <__libc_init_array+0x44>)
 800b17a:	1b64      	subs	r4, r4, r5
 800b17c:	10a4      	asrs	r4, r4, #2
 800b17e:	42a6      	cmp	r6, r4
 800b180:	d105      	bne.n	800b18e <__libc_init_array+0x2e>
 800b182:	bd70      	pop	{r4, r5, r6, pc}
 800b184:	00b3      	lsls	r3, r6, #2
 800b186:	58eb      	ldr	r3, [r5, r3]
 800b188:	4798      	blx	r3
 800b18a:	3601      	adds	r6, #1
 800b18c:	e7ee      	b.n	800b16c <__libc_init_array+0xc>
 800b18e:	00b3      	lsls	r3, r6, #2
 800b190:	58eb      	ldr	r3, [r5, r3]
 800b192:	4798      	blx	r3
 800b194:	3601      	adds	r6, #1
 800b196:	e7f2      	b.n	800b17e <__libc_init_array+0x1e>
 800b198:	0800ddb0 	.word	0x0800ddb0
 800b19c:	0800ddb0 	.word	0x0800ddb0
 800b1a0:	0800ddb4 	.word	0x0800ddb4
 800b1a4:	0800ddb0 	.word	0x0800ddb0

0800b1a8 <__retarget_lock_init_recursive>:
 800b1a8:	4770      	bx	lr

0800b1aa <__retarget_lock_acquire_recursive>:
 800b1aa:	4770      	bx	lr

0800b1ac <__retarget_lock_release_recursive>:
 800b1ac:	4770      	bx	lr

0800b1ae <memcpy>:
 800b1ae:	2300      	movs	r3, #0
 800b1b0:	b510      	push	{r4, lr}
 800b1b2:	429a      	cmp	r2, r3
 800b1b4:	d100      	bne.n	800b1b8 <memcpy+0xa>
 800b1b6:	bd10      	pop	{r4, pc}
 800b1b8:	5ccc      	ldrb	r4, [r1, r3]
 800b1ba:	54c4      	strb	r4, [r0, r3]
 800b1bc:	3301      	adds	r3, #1
 800b1be:	e7f8      	b.n	800b1b2 <memcpy+0x4>

0800b1c0 <nan>:
 800b1c0:	2000      	movs	r0, #0
 800b1c2:	4901      	ldr	r1, [pc, #4]	; (800b1c8 <nan+0x8>)
 800b1c4:	4770      	bx	lr
 800b1c6:	46c0      	nop			; (mov r8, r8)
 800b1c8:	7ff80000 	.word	0x7ff80000

0800b1cc <__assert_func>:
 800b1cc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800b1ce:	0014      	movs	r4, r2
 800b1d0:	001a      	movs	r2, r3
 800b1d2:	4b09      	ldr	r3, [pc, #36]	; (800b1f8 <__assert_func+0x2c>)
 800b1d4:	0005      	movs	r5, r0
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	000e      	movs	r6, r1
 800b1da:	68d8      	ldr	r0, [r3, #12]
 800b1dc:	4b07      	ldr	r3, [pc, #28]	; (800b1fc <__assert_func+0x30>)
 800b1de:	2c00      	cmp	r4, #0
 800b1e0:	d101      	bne.n	800b1e6 <__assert_func+0x1a>
 800b1e2:	4b07      	ldr	r3, [pc, #28]	; (800b200 <__assert_func+0x34>)
 800b1e4:	001c      	movs	r4, r3
 800b1e6:	4907      	ldr	r1, [pc, #28]	; (800b204 <__assert_func+0x38>)
 800b1e8:	9301      	str	r3, [sp, #4]
 800b1ea:	9402      	str	r4, [sp, #8]
 800b1ec:	002b      	movs	r3, r5
 800b1ee:	9600      	str	r6, [sp, #0]
 800b1f0:	f001 fc2a 	bl	800ca48 <fiprintf>
 800b1f4:	f001 fc56 	bl	800caa4 <abort>
 800b1f8:	200001e0 	.word	0x200001e0
 800b1fc:	0800db72 	.word	0x0800db72
 800b200:	0800dbad 	.word	0x0800dbad
 800b204:	0800db7f 	.word	0x0800db7f

0800b208 <_free_r>:
 800b208:	b570      	push	{r4, r5, r6, lr}
 800b20a:	0005      	movs	r5, r0
 800b20c:	2900      	cmp	r1, #0
 800b20e:	d010      	beq.n	800b232 <_free_r+0x2a>
 800b210:	1f0c      	subs	r4, r1, #4
 800b212:	6823      	ldr	r3, [r4, #0]
 800b214:	2b00      	cmp	r3, #0
 800b216:	da00      	bge.n	800b21a <_free_r+0x12>
 800b218:	18e4      	adds	r4, r4, r3
 800b21a:	0028      	movs	r0, r5
 800b21c:	f7fe fe56 	bl	8009ecc <__malloc_lock>
 800b220:	4a1d      	ldr	r2, [pc, #116]	; (800b298 <_free_r+0x90>)
 800b222:	6813      	ldr	r3, [r2, #0]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d105      	bne.n	800b234 <_free_r+0x2c>
 800b228:	6063      	str	r3, [r4, #4]
 800b22a:	6014      	str	r4, [r2, #0]
 800b22c:	0028      	movs	r0, r5
 800b22e:	f7fe fe55 	bl	8009edc <__malloc_unlock>
 800b232:	bd70      	pop	{r4, r5, r6, pc}
 800b234:	42a3      	cmp	r3, r4
 800b236:	d908      	bls.n	800b24a <_free_r+0x42>
 800b238:	6820      	ldr	r0, [r4, #0]
 800b23a:	1821      	adds	r1, r4, r0
 800b23c:	428b      	cmp	r3, r1
 800b23e:	d1f3      	bne.n	800b228 <_free_r+0x20>
 800b240:	6819      	ldr	r1, [r3, #0]
 800b242:	685b      	ldr	r3, [r3, #4]
 800b244:	1809      	adds	r1, r1, r0
 800b246:	6021      	str	r1, [r4, #0]
 800b248:	e7ee      	b.n	800b228 <_free_r+0x20>
 800b24a:	001a      	movs	r2, r3
 800b24c:	685b      	ldr	r3, [r3, #4]
 800b24e:	2b00      	cmp	r3, #0
 800b250:	d001      	beq.n	800b256 <_free_r+0x4e>
 800b252:	42a3      	cmp	r3, r4
 800b254:	d9f9      	bls.n	800b24a <_free_r+0x42>
 800b256:	6811      	ldr	r1, [r2, #0]
 800b258:	1850      	adds	r0, r2, r1
 800b25a:	42a0      	cmp	r0, r4
 800b25c:	d10b      	bne.n	800b276 <_free_r+0x6e>
 800b25e:	6820      	ldr	r0, [r4, #0]
 800b260:	1809      	adds	r1, r1, r0
 800b262:	1850      	adds	r0, r2, r1
 800b264:	6011      	str	r1, [r2, #0]
 800b266:	4283      	cmp	r3, r0
 800b268:	d1e0      	bne.n	800b22c <_free_r+0x24>
 800b26a:	6818      	ldr	r0, [r3, #0]
 800b26c:	685b      	ldr	r3, [r3, #4]
 800b26e:	1841      	adds	r1, r0, r1
 800b270:	6011      	str	r1, [r2, #0]
 800b272:	6053      	str	r3, [r2, #4]
 800b274:	e7da      	b.n	800b22c <_free_r+0x24>
 800b276:	42a0      	cmp	r0, r4
 800b278:	d902      	bls.n	800b280 <_free_r+0x78>
 800b27a:	230c      	movs	r3, #12
 800b27c:	602b      	str	r3, [r5, #0]
 800b27e:	e7d5      	b.n	800b22c <_free_r+0x24>
 800b280:	6820      	ldr	r0, [r4, #0]
 800b282:	1821      	adds	r1, r4, r0
 800b284:	428b      	cmp	r3, r1
 800b286:	d103      	bne.n	800b290 <_free_r+0x88>
 800b288:	6819      	ldr	r1, [r3, #0]
 800b28a:	685b      	ldr	r3, [r3, #4]
 800b28c:	1809      	adds	r1, r1, r0
 800b28e:	6021      	str	r1, [r4, #0]
 800b290:	6063      	str	r3, [r4, #4]
 800b292:	6054      	str	r4, [r2, #4]
 800b294:	e7ca      	b.n	800b22c <_free_r+0x24>
 800b296:	46c0      	nop			; (mov r8, r8)
 800b298:	200017fc 	.word	0x200017fc

0800b29c <rshift>:
 800b29c:	0002      	movs	r2, r0
 800b29e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2a0:	6904      	ldr	r4, [r0, #16]
 800b2a2:	114b      	asrs	r3, r1, #5
 800b2a4:	b085      	sub	sp, #20
 800b2a6:	3214      	adds	r2, #20
 800b2a8:	9302      	str	r3, [sp, #8]
 800b2aa:	114d      	asrs	r5, r1, #5
 800b2ac:	0013      	movs	r3, r2
 800b2ae:	42ac      	cmp	r4, r5
 800b2b0:	dd32      	ble.n	800b318 <rshift+0x7c>
 800b2b2:	261f      	movs	r6, #31
 800b2b4:	000f      	movs	r7, r1
 800b2b6:	114b      	asrs	r3, r1, #5
 800b2b8:	009b      	lsls	r3, r3, #2
 800b2ba:	00a5      	lsls	r5, r4, #2
 800b2bc:	18d3      	adds	r3, r2, r3
 800b2be:	4037      	ands	r7, r6
 800b2c0:	1955      	adds	r5, r2, r5
 800b2c2:	9300      	str	r3, [sp, #0]
 800b2c4:	9701      	str	r7, [sp, #4]
 800b2c6:	4231      	tst	r1, r6
 800b2c8:	d10d      	bne.n	800b2e6 <rshift+0x4a>
 800b2ca:	0016      	movs	r6, r2
 800b2cc:	0019      	movs	r1, r3
 800b2ce:	428d      	cmp	r5, r1
 800b2d0:	d836      	bhi.n	800b340 <rshift+0xa4>
 800b2d2:	9900      	ldr	r1, [sp, #0]
 800b2d4:	2300      	movs	r3, #0
 800b2d6:	3903      	subs	r1, #3
 800b2d8:	428d      	cmp	r5, r1
 800b2da:	d302      	bcc.n	800b2e2 <rshift+0x46>
 800b2dc:	9b02      	ldr	r3, [sp, #8]
 800b2de:	1ae4      	subs	r4, r4, r3
 800b2e0:	00a3      	lsls	r3, r4, #2
 800b2e2:	18d3      	adds	r3, r2, r3
 800b2e4:	e018      	b.n	800b318 <rshift+0x7c>
 800b2e6:	2120      	movs	r1, #32
 800b2e8:	9e01      	ldr	r6, [sp, #4]
 800b2ea:	9f01      	ldr	r7, [sp, #4]
 800b2ec:	1b89      	subs	r1, r1, r6
 800b2ee:	9e00      	ldr	r6, [sp, #0]
 800b2f0:	9103      	str	r1, [sp, #12]
 800b2f2:	ce02      	ldmia	r6!, {r1}
 800b2f4:	4694      	mov	ip, r2
 800b2f6:	40f9      	lsrs	r1, r7
 800b2f8:	42b5      	cmp	r5, r6
 800b2fa:	d816      	bhi.n	800b32a <rshift+0x8e>
 800b2fc:	9e00      	ldr	r6, [sp, #0]
 800b2fe:	2300      	movs	r3, #0
 800b300:	3601      	adds	r6, #1
 800b302:	42b5      	cmp	r5, r6
 800b304:	d303      	bcc.n	800b30e <rshift+0x72>
 800b306:	9b02      	ldr	r3, [sp, #8]
 800b308:	1ae3      	subs	r3, r4, r3
 800b30a:	009b      	lsls	r3, r3, #2
 800b30c:	3b04      	subs	r3, #4
 800b30e:	18d3      	adds	r3, r2, r3
 800b310:	6019      	str	r1, [r3, #0]
 800b312:	2900      	cmp	r1, #0
 800b314:	d000      	beq.n	800b318 <rshift+0x7c>
 800b316:	3304      	adds	r3, #4
 800b318:	1a99      	subs	r1, r3, r2
 800b31a:	1089      	asrs	r1, r1, #2
 800b31c:	6101      	str	r1, [r0, #16]
 800b31e:	4293      	cmp	r3, r2
 800b320:	d101      	bne.n	800b326 <rshift+0x8a>
 800b322:	2300      	movs	r3, #0
 800b324:	6143      	str	r3, [r0, #20]
 800b326:	b005      	add	sp, #20
 800b328:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b32a:	6837      	ldr	r7, [r6, #0]
 800b32c:	9b03      	ldr	r3, [sp, #12]
 800b32e:	409f      	lsls	r7, r3
 800b330:	430f      	orrs	r7, r1
 800b332:	4661      	mov	r1, ip
 800b334:	c180      	stmia	r1!, {r7}
 800b336:	468c      	mov	ip, r1
 800b338:	9b01      	ldr	r3, [sp, #4]
 800b33a:	ce02      	ldmia	r6!, {r1}
 800b33c:	40d9      	lsrs	r1, r3
 800b33e:	e7db      	b.n	800b2f8 <rshift+0x5c>
 800b340:	c980      	ldmia	r1!, {r7}
 800b342:	c680      	stmia	r6!, {r7}
 800b344:	e7c3      	b.n	800b2ce <rshift+0x32>

0800b346 <__hexdig_fun>:
 800b346:	0002      	movs	r2, r0
 800b348:	3a30      	subs	r2, #48	; 0x30
 800b34a:	0003      	movs	r3, r0
 800b34c:	2a09      	cmp	r2, #9
 800b34e:	d802      	bhi.n	800b356 <__hexdig_fun+0x10>
 800b350:	3b20      	subs	r3, #32
 800b352:	b2d8      	uxtb	r0, r3
 800b354:	4770      	bx	lr
 800b356:	0002      	movs	r2, r0
 800b358:	3a61      	subs	r2, #97	; 0x61
 800b35a:	2a05      	cmp	r2, #5
 800b35c:	d801      	bhi.n	800b362 <__hexdig_fun+0x1c>
 800b35e:	3b47      	subs	r3, #71	; 0x47
 800b360:	e7f7      	b.n	800b352 <__hexdig_fun+0xc>
 800b362:	001a      	movs	r2, r3
 800b364:	3a41      	subs	r2, #65	; 0x41
 800b366:	2000      	movs	r0, #0
 800b368:	2a05      	cmp	r2, #5
 800b36a:	d8f3      	bhi.n	800b354 <__hexdig_fun+0xe>
 800b36c:	3b27      	subs	r3, #39	; 0x27
 800b36e:	e7f0      	b.n	800b352 <__hexdig_fun+0xc>

0800b370 <__gethex>:
 800b370:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b372:	b089      	sub	sp, #36	; 0x24
 800b374:	9307      	str	r3, [sp, #28]
 800b376:	2302      	movs	r3, #2
 800b378:	9201      	str	r2, [sp, #4]
 800b37a:	680a      	ldr	r2, [r1, #0]
 800b37c:	425b      	negs	r3, r3
 800b37e:	9003      	str	r0, [sp, #12]
 800b380:	9106      	str	r1, [sp, #24]
 800b382:	1c96      	adds	r6, r2, #2
 800b384:	1a9b      	subs	r3, r3, r2
 800b386:	199a      	adds	r2, r3, r6
 800b388:	9600      	str	r6, [sp, #0]
 800b38a:	9205      	str	r2, [sp, #20]
 800b38c:	9a00      	ldr	r2, [sp, #0]
 800b38e:	3601      	adds	r6, #1
 800b390:	7810      	ldrb	r0, [r2, #0]
 800b392:	2830      	cmp	r0, #48	; 0x30
 800b394:	d0f7      	beq.n	800b386 <__gethex+0x16>
 800b396:	f7ff ffd6 	bl	800b346 <__hexdig_fun>
 800b39a:	2300      	movs	r3, #0
 800b39c:	001d      	movs	r5, r3
 800b39e:	9302      	str	r3, [sp, #8]
 800b3a0:	4298      	cmp	r0, r3
 800b3a2:	d11d      	bne.n	800b3e0 <__gethex+0x70>
 800b3a4:	2201      	movs	r2, #1
 800b3a6:	49a6      	ldr	r1, [pc, #664]	; (800b640 <__gethex+0x2d0>)
 800b3a8:	9800      	ldr	r0, [sp, #0]
 800b3aa:	f7ff fdd3 	bl	800af54 <strncmp>
 800b3ae:	0007      	movs	r7, r0
 800b3b0:	42a8      	cmp	r0, r5
 800b3b2:	d169      	bne.n	800b488 <__gethex+0x118>
 800b3b4:	9b00      	ldr	r3, [sp, #0]
 800b3b6:	0034      	movs	r4, r6
 800b3b8:	7858      	ldrb	r0, [r3, #1]
 800b3ba:	f7ff ffc4 	bl	800b346 <__hexdig_fun>
 800b3be:	2301      	movs	r3, #1
 800b3c0:	9302      	str	r3, [sp, #8]
 800b3c2:	42a8      	cmp	r0, r5
 800b3c4:	d02f      	beq.n	800b426 <__gethex+0xb6>
 800b3c6:	9600      	str	r6, [sp, #0]
 800b3c8:	9b00      	ldr	r3, [sp, #0]
 800b3ca:	7818      	ldrb	r0, [r3, #0]
 800b3cc:	2830      	cmp	r0, #48	; 0x30
 800b3ce:	d009      	beq.n	800b3e4 <__gethex+0x74>
 800b3d0:	f7ff ffb9 	bl	800b346 <__hexdig_fun>
 800b3d4:	4242      	negs	r2, r0
 800b3d6:	4142      	adcs	r2, r0
 800b3d8:	2301      	movs	r3, #1
 800b3da:	0035      	movs	r5, r6
 800b3dc:	9202      	str	r2, [sp, #8]
 800b3de:	9305      	str	r3, [sp, #20]
 800b3e0:	9c00      	ldr	r4, [sp, #0]
 800b3e2:	e004      	b.n	800b3ee <__gethex+0x7e>
 800b3e4:	9b00      	ldr	r3, [sp, #0]
 800b3e6:	3301      	adds	r3, #1
 800b3e8:	9300      	str	r3, [sp, #0]
 800b3ea:	e7ed      	b.n	800b3c8 <__gethex+0x58>
 800b3ec:	3401      	adds	r4, #1
 800b3ee:	7820      	ldrb	r0, [r4, #0]
 800b3f0:	f7ff ffa9 	bl	800b346 <__hexdig_fun>
 800b3f4:	1e07      	subs	r7, r0, #0
 800b3f6:	d1f9      	bne.n	800b3ec <__gethex+0x7c>
 800b3f8:	2201      	movs	r2, #1
 800b3fa:	0020      	movs	r0, r4
 800b3fc:	4990      	ldr	r1, [pc, #576]	; (800b640 <__gethex+0x2d0>)
 800b3fe:	f7ff fda9 	bl	800af54 <strncmp>
 800b402:	2800      	cmp	r0, #0
 800b404:	d10d      	bne.n	800b422 <__gethex+0xb2>
 800b406:	2d00      	cmp	r5, #0
 800b408:	d106      	bne.n	800b418 <__gethex+0xa8>
 800b40a:	3401      	adds	r4, #1
 800b40c:	0025      	movs	r5, r4
 800b40e:	7820      	ldrb	r0, [r4, #0]
 800b410:	f7ff ff99 	bl	800b346 <__hexdig_fun>
 800b414:	2800      	cmp	r0, #0
 800b416:	d102      	bne.n	800b41e <__gethex+0xae>
 800b418:	1b2d      	subs	r5, r5, r4
 800b41a:	00af      	lsls	r7, r5, #2
 800b41c:	e003      	b.n	800b426 <__gethex+0xb6>
 800b41e:	3401      	adds	r4, #1
 800b420:	e7f5      	b.n	800b40e <__gethex+0x9e>
 800b422:	2d00      	cmp	r5, #0
 800b424:	d1f8      	bne.n	800b418 <__gethex+0xa8>
 800b426:	2220      	movs	r2, #32
 800b428:	7823      	ldrb	r3, [r4, #0]
 800b42a:	0026      	movs	r6, r4
 800b42c:	4393      	bics	r3, r2
 800b42e:	2b50      	cmp	r3, #80	; 0x50
 800b430:	d11d      	bne.n	800b46e <__gethex+0xfe>
 800b432:	7863      	ldrb	r3, [r4, #1]
 800b434:	2b2b      	cmp	r3, #43	; 0x2b
 800b436:	d02c      	beq.n	800b492 <__gethex+0x122>
 800b438:	2b2d      	cmp	r3, #45	; 0x2d
 800b43a:	d02e      	beq.n	800b49a <__gethex+0x12a>
 800b43c:	2300      	movs	r3, #0
 800b43e:	1c66      	adds	r6, r4, #1
 800b440:	9304      	str	r3, [sp, #16]
 800b442:	7830      	ldrb	r0, [r6, #0]
 800b444:	f7ff ff7f 	bl	800b346 <__hexdig_fun>
 800b448:	1e43      	subs	r3, r0, #1
 800b44a:	b2db      	uxtb	r3, r3
 800b44c:	2b18      	cmp	r3, #24
 800b44e:	d82b      	bhi.n	800b4a8 <__gethex+0x138>
 800b450:	3810      	subs	r0, #16
 800b452:	0005      	movs	r5, r0
 800b454:	7870      	ldrb	r0, [r6, #1]
 800b456:	f7ff ff76 	bl	800b346 <__hexdig_fun>
 800b45a:	1e43      	subs	r3, r0, #1
 800b45c:	b2db      	uxtb	r3, r3
 800b45e:	3601      	adds	r6, #1
 800b460:	2b18      	cmp	r3, #24
 800b462:	d91c      	bls.n	800b49e <__gethex+0x12e>
 800b464:	9b04      	ldr	r3, [sp, #16]
 800b466:	2b00      	cmp	r3, #0
 800b468:	d000      	beq.n	800b46c <__gethex+0xfc>
 800b46a:	426d      	negs	r5, r5
 800b46c:	197f      	adds	r7, r7, r5
 800b46e:	9b06      	ldr	r3, [sp, #24]
 800b470:	601e      	str	r6, [r3, #0]
 800b472:	9b02      	ldr	r3, [sp, #8]
 800b474:	2b00      	cmp	r3, #0
 800b476:	d019      	beq.n	800b4ac <__gethex+0x13c>
 800b478:	2600      	movs	r6, #0
 800b47a:	9b05      	ldr	r3, [sp, #20]
 800b47c:	42b3      	cmp	r3, r6
 800b47e:	d100      	bne.n	800b482 <__gethex+0x112>
 800b480:	3606      	adds	r6, #6
 800b482:	0030      	movs	r0, r6
 800b484:	b009      	add	sp, #36	; 0x24
 800b486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b488:	2301      	movs	r3, #1
 800b48a:	2700      	movs	r7, #0
 800b48c:	9c00      	ldr	r4, [sp, #0]
 800b48e:	9302      	str	r3, [sp, #8]
 800b490:	e7c9      	b.n	800b426 <__gethex+0xb6>
 800b492:	2300      	movs	r3, #0
 800b494:	9304      	str	r3, [sp, #16]
 800b496:	1ca6      	adds	r6, r4, #2
 800b498:	e7d3      	b.n	800b442 <__gethex+0xd2>
 800b49a:	2301      	movs	r3, #1
 800b49c:	e7fa      	b.n	800b494 <__gethex+0x124>
 800b49e:	230a      	movs	r3, #10
 800b4a0:	435d      	muls	r5, r3
 800b4a2:	182d      	adds	r5, r5, r0
 800b4a4:	3d10      	subs	r5, #16
 800b4a6:	e7d5      	b.n	800b454 <__gethex+0xe4>
 800b4a8:	0026      	movs	r6, r4
 800b4aa:	e7e0      	b.n	800b46e <__gethex+0xfe>
 800b4ac:	9b00      	ldr	r3, [sp, #0]
 800b4ae:	9902      	ldr	r1, [sp, #8]
 800b4b0:	1ae3      	subs	r3, r4, r3
 800b4b2:	3b01      	subs	r3, #1
 800b4b4:	2b07      	cmp	r3, #7
 800b4b6:	dc0a      	bgt.n	800b4ce <__gethex+0x15e>
 800b4b8:	9803      	ldr	r0, [sp, #12]
 800b4ba:	f000 fa5d 	bl	800b978 <_Balloc>
 800b4be:	1e05      	subs	r5, r0, #0
 800b4c0:	d108      	bne.n	800b4d4 <__gethex+0x164>
 800b4c2:	002a      	movs	r2, r5
 800b4c4:	21e4      	movs	r1, #228	; 0xe4
 800b4c6:	4b5f      	ldr	r3, [pc, #380]	; (800b644 <__gethex+0x2d4>)
 800b4c8:	485f      	ldr	r0, [pc, #380]	; (800b648 <__gethex+0x2d8>)
 800b4ca:	f7ff fe7f 	bl	800b1cc <__assert_func>
 800b4ce:	3101      	adds	r1, #1
 800b4d0:	105b      	asrs	r3, r3, #1
 800b4d2:	e7ef      	b.n	800b4b4 <__gethex+0x144>
 800b4d4:	0003      	movs	r3, r0
 800b4d6:	3314      	adds	r3, #20
 800b4d8:	9302      	str	r3, [sp, #8]
 800b4da:	9305      	str	r3, [sp, #20]
 800b4dc:	2300      	movs	r3, #0
 800b4de:	001e      	movs	r6, r3
 800b4e0:	9304      	str	r3, [sp, #16]
 800b4e2:	9b00      	ldr	r3, [sp, #0]
 800b4e4:	42a3      	cmp	r3, r4
 800b4e6:	d33f      	bcc.n	800b568 <__gethex+0x1f8>
 800b4e8:	9c05      	ldr	r4, [sp, #20]
 800b4ea:	9b02      	ldr	r3, [sp, #8]
 800b4ec:	c440      	stmia	r4!, {r6}
 800b4ee:	1ae4      	subs	r4, r4, r3
 800b4f0:	10a4      	asrs	r4, r4, #2
 800b4f2:	0030      	movs	r0, r6
 800b4f4:	612c      	str	r4, [r5, #16]
 800b4f6:	f000 fb37 	bl	800bb68 <__hi0bits>
 800b4fa:	9b01      	ldr	r3, [sp, #4]
 800b4fc:	0164      	lsls	r4, r4, #5
 800b4fe:	681b      	ldr	r3, [r3, #0]
 800b500:	1a26      	subs	r6, r4, r0
 800b502:	9300      	str	r3, [sp, #0]
 800b504:	429e      	cmp	r6, r3
 800b506:	dd51      	ble.n	800b5ac <__gethex+0x23c>
 800b508:	1af6      	subs	r6, r6, r3
 800b50a:	0031      	movs	r1, r6
 800b50c:	0028      	movs	r0, r5
 800b50e:	f000 fecb 	bl	800c2a8 <__any_on>
 800b512:	1e04      	subs	r4, r0, #0
 800b514:	d016      	beq.n	800b544 <__gethex+0x1d4>
 800b516:	2401      	movs	r4, #1
 800b518:	231f      	movs	r3, #31
 800b51a:	0020      	movs	r0, r4
 800b51c:	1e72      	subs	r2, r6, #1
 800b51e:	4013      	ands	r3, r2
 800b520:	4098      	lsls	r0, r3
 800b522:	0003      	movs	r3, r0
 800b524:	1151      	asrs	r1, r2, #5
 800b526:	9802      	ldr	r0, [sp, #8]
 800b528:	0089      	lsls	r1, r1, #2
 800b52a:	5809      	ldr	r1, [r1, r0]
 800b52c:	4219      	tst	r1, r3
 800b52e:	d009      	beq.n	800b544 <__gethex+0x1d4>
 800b530:	42a2      	cmp	r2, r4
 800b532:	dd06      	ble.n	800b542 <__gethex+0x1d2>
 800b534:	0028      	movs	r0, r5
 800b536:	1eb1      	subs	r1, r6, #2
 800b538:	f000 feb6 	bl	800c2a8 <__any_on>
 800b53c:	3402      	adds	r4, #2
 800b53e:	2800      	cmp	r0, #0
 800b540:	d100      	bne.n	800b544 <__gethex+0x1d4>
 800b542:	2402      	movs	r4, #2
 800b544:	0031      	movs	r1, r6
 800b546:	0028      	movs	r0, r5
 800b548:	f7ff fea8 	bl	800b29c <rshift>
 800b54c:	19bf      	adds	r7, r7, r6
 800b54e:	9b01      	ldr	r3, [sp, #4]
 800b550:	689b      	ldr	r3, [r3, #8]
 800b552:	42bb      	cmp	r3, r7
 800b554:	da3a      	bge.n	800b5cc <__gethex+0x25c>
 800b556:	0029      	movs	r1, r5
 800b558:	9803      	ldr	r0, [sp, #12]
 800b55a:	f000 fa51 	bl	800ba00 <_Bfree>
 800b55e:	2300      	movs	r3, #0
 800b560:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b562:	26a3      	movs	r6, #163	; 0xa3
 800b564:	6013      	str	r3, [r2, #0]
 800b566:	e78c      	b.n	800b482 <__gethex+0x112>
 800b568:	3c01      	subs	r4, #1
 800b56a:	7823      	ldrb	r3, [r4, #0]
 800b56c:	2b2e      	cmp	r3, #46	; 0x2e
 800b56e:	d012      	beq.n	800b596 <__gethex+0x226>
 800b570:	9b04      	ldr	r3, [sp, #16]
 800b572:	2b20      	cmp	r3, #32
 800b574:	d104      	bne.n	800b580 <__gethex+0x210>
 800b576:	9b05      	ldr	r3, [sp, #20]
 800b578:	c340      	stmia	r3!, {r6}
 800b57a:	2600      	movs	r6, #0
 800b57c:	9305      	str	r3, [sp, #20]
 800b57e:	9604      	str	r6, [sp, #16]
 800b580:	7820      	ldrb	r0, [r4, #0]
 800b582:	f7ff fee0 	bl	800b346 <__hexdig_fun>
 800b586:	230f      	movs	r3, #15
 800b588:	4018      	ands	r0, r3
 800b58a:	9b04      	ldr	r3, [sp, #16]
 800b58c:	4098      	lsls	r0, r3
 800b58e:	3304      	adds	r3, #4
 800b590:	4306      	orrs	r6, r0
 800b592:	9304      	str	r3, [sp, #16]
 800b594:	e7a5      	b.n	800b4e2 <__gethex+0x172>
 800b596:	9b00      	ldr	r3, [sp, #0]
 800b598:	42a3      	cmp	r3, r4
 800b59a:	d8e9      	bhi.n	800b570 <__gethex+0x200>
 800b59c:	2201      	movs	r2, #1
 800b59e:	0020      	movs	r0, r4
 800b5a0:	4927      	ldr	r1, [pc, #156]	; (800b640 <__gethex+0x2d0>)
 800b5a2:	f7ff fcd7 	bl	800af54 <strncmp>
 800b5a6:	2800      	cmp	r0, #0
 800b5a8:	d1e2      	bne.n	800b570 <__gethex+0x200>
 800b5aa:	e79a      	b.n	800b4e2 <__gethex+0x172>
 800b5ac:	9b00      	ldr	r3, [sp, #0]
 800b5ae:	2400      	movs	r4, #0
 800b5b0:	429e      	cmp	r6, r3
 800b5b2:	dacc      	bge.n	800b54e <__gethex+0x1de>
 800b5b4:	1b9e      	subs	r6, r3, r6
 800b5b6:	0029      	movs	r1, r5
 800b5b8:	0032      	movs	r2, r6
 800b5ba:	9803      	ldr	r0, [sp, #12]
 800b5bc:	f000 fc40 	bl	800be40 <__lshift>
 800b5c0:	0003      	movs	r3, r0
 800b5c2:	3314      	adds	r3, #20
 800b5c4:	0005      	movs	r5, r0
 800b5c6:	1bbf      	subs	r7, r7, r6
 800b5c8:	9302      	str	r3, [sp, #8]
 800b5ca:	e7c0      	b.n	800b54e <__gethex+0x1de>
 800b5cc:	9b01      	ldr	r3, [sp, #4]
 800b5ce:	685e      	ldr	r6, [r3, #4]
 800b5d0:	42be      	cmp	r6, r7
 800b5d2:	dd70      	ble.n	800b6b6 <__gethex+0x346>
 800b5d4:	9b00      	ldr	r3, [sp, #0]
 800b5d6:	1bf6      	subs	r6, r6, r7
 800b5d8:	42b3      	cmp	r3, r6
 800b5da:	dc37      	bgt.n	800b64c <__gethex+0x2dc>
 800b5dc:	9b01      	ldr	r3, [sp, #4]
 800b5de:	68db      	ldr	r3, [r3, #12]
 800b5e0:	2b02      	cmp	r3, #2
 800b5e2:	d024      	beq.n	800b62e <__gethex+0x2be>
 800b5e4:	2b03      	cmp	r3, #3
 800b5e6:	d026      	beq.n	800b636 <__gethex+0x2c6>
 800b5e8:	2b01      	cmp	r3, #1
 800b5ea:	d117      	bne.n	800b61c <__gethex+0x2ac>
 800b5ec:	9b00      	ldr	r3, [sp, #0]
 800b5ee:	42b3      	cmp	r3, r6
 800b5f0:	d114      	bne.n	800b61c <__gethex+0x2ac>
 800b5f2:	2b01      	cmp	r3, #1
 800b5f4:	d10b      	bne.n	800b60e <__gethex+0x29e>
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	9a07      	ldr	r2, [sp, #28]
 800b5fa:	685b      	ldr	r3, [r3, #4]
 800b5fc:	2662      	movs	r6, #98	; 0x62
 800b5fe:	6013      	str	r3, [r2, #0]
 800b600:	2301      	movs	r3, #1
 800b602:	9a02      	ldr	r2, [sp, #8]
 800b604:	612b      	str	r3, [r5, #16]
 800b606:	6013      	str	r3, [r2, #0]
 800b608:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b60a:	601d      	str	r5, [r3, #0]
 800b60c:	e739      	b.n	800b482 <__gethex+0x112>
 800b60e:	9900      	ldr	r1, [sp, #0]
 800b610:	0028      	movs	r0, r5
 800b612:	3901      	subs	r1, #1
 800b614:	f000 fe48 	bl	800c2a8 <__any_on>
 800b618:	2800      	cmp	r0, #0
 800b61a:	d1ec      	bne.n	800b5f6 <__gethex+0x286>
 800b61c:	0029      	movs	r1, r5
 800b61e:	9803      	ldr	r0, [sp, #12]
 800b620:	f000 f9ee 	bl	800ba00 <_Bfree>
 800b624:	2300      	movs	r3, #0
 800b626:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b628:	2650      	movs	r6, #80	; 0x50
 800b62a:	6013      	str	r3, [r2, #0]
 800b62c:	e729      	b.n	800b482 <__gethex+0x112>
 800b62e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b630:	2b00      	cmp	r3, #0
 800b632:	d1f3      	bne.n	800b61c <__gethex+0x2ac>
 800b634:	e7df      	b.n	800b5f6 <__gethex+0x286>
 800b636:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b638:	2b00      	cmp	r3, #0
 800b63a:	d1dc      	bne.n	800b5f6 <__gethex+0x286>
 800b63c:	e7ee      	b.n	800b61c <__gethex+0x2ac>
 800b63e:	46c0      	nop			; (mov r8, r8)
 800b640:	0800d994 	.word	0x0800d994
 800b644:	0800dbae 	.word	0x0800dbae
 800b648:	0800dbbf 	.word	0x0800dbbf
 800b64c:	1e77      	subs	r7, r6, #1
 800b64e:	2c00      	cmp	r4, #0
 800b650:	d12f      	bne.n	800b6b2 <__gethex+0x342>
 800b652:	2f00      	cmp	r7, #0
 800b654:	d004      	beq.n	800b660 <__gethex+0x2f0>
 800b656:	0039      	movs	r1, r7
 800b658:	0028      	movs	r0, r5
 800b65a:	f000 fe25 	bl	800c2a8 <__any_on>
 800b65e:	0004      	movs	r4, r0
 800b660:	231f      	movs	r3, #31
 800b662:	117a      	asrs	r2, r7, #5
 800b664:	401f      	ands	r7, r3
 800b666:	3b1e      	subs	r3, #30
 800b668:	40bb      	lsls	r3, r7
 800b66a:	9902      	ldr	r1, [sp, #8]
 800b66c:	0092      	lsls	r2, r2, #2
 800b66e:	5852      	ldr	r2, [r2, r1]
 800b670:	421a      	tst	r2, r3
 800b672:	d001      	beq.n	800b678 <__gethex+0x308>
 800b674:	2302      	movs	r3, #2
 800b676:	431c      	orrs	r4, r3
 800b678:	9b00      	ldr	r3, [sp, #0]
 800b67a:	0031      	movs	r1, r6
 800b67c:	1b9b      	subs	r3, r3, r6
 800b67e:	2602      	movs	r6, #2
 800b680:	0028      	movs	r0, r5
 800b682:	9300      	str	r3, [sp, #0]
 800b684:	f7ff fe0a 	bl	800b29c <rshift>
 800b688:	9b01      	ldr	r3, [sp, #4]
 800b68a:	685f      	ldr	r7, [r3, #4]
 800b68c:	2c00      	cmp	r4, #0
 800b68e:	d041      	beq.n	800b714 <__gethex+0x3a4>
 800b690:	9b01      	ldr	r3, [sp, #4]
 800b692:	68db      	ldr	r3, [r3, #12]
 800b694:	2b02      	cmp	r3, #2
 800b696:	d010      	beq.n	800b6ba <__gethex+0x34a>
 800b698:	2b03      	cmp	r3, #3
 800b69a:	d012      	beq.n	800b6c2 <__gethex+0x352>
 800b69c:	2b01      	cmp	r3, #1
 800b69e:	d106      	bne.n	800b6ae <__gethex+0x33e>
 800b6a0:	07a2      	lsls	r2, r4, #30
 800b6a2:	d504      	bpl.n	800b6ae <__gethex+0x33e>
 800b6a4:	9a02      	ldr	r2, [sp, #8]
 800b6a6:	6812      	ldr	r2, [r2, #0]
 800b6a8:	4314      	orrs	r4, r2
 800b6aa:	421c      	tst	r4, r3
 800b6ac:	d10c      	bne.n	800b6c8 <__gethex+0x358>
 800b6ae:	2310      	movs	r3, #16
 800b6b0:	e02f      	b.n	800b712 <__gethex+0x3a2>
 800b6b2:	2401      	movs	r4, #1
 800b6b4:	e7d4      	b.n	800b660 <__gethex+0x2f0>
 800b6b6:	2601      	movs	r6, #1
 800b6b8:	e7e8      	b.n	800b68c <__gethex+0x31c>
 800b6ba:	2301      	movs	r3, #1
 800b6bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800b6be:	1a9b      	subs	r3, r3, r2
 800b6c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b6c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d0f2      	beq.n	800b6ae <__gethex+0x33e>
 800b6c8:	692b      	ldr	r3, [r5, #16]
 800b6ca:	2000      	movs	r0, #0
 800b6cc:	9302      	str	r3, [sp, #8]
 800b6ce:	009b      	lsls	r3, r3, #2
 800b6d0:	9304      	str	r3, [sp, #16]
 800b6d2:	002b      	movs	r3, r5
 800b6d4:	9a04      	ldr	r2, [sp, #16]
 800b6d6:	3314      	adds	r3, #20
 800b6d8:	1899      	adds	r1, r3, r2
 800b6da:	681a      	ldr	r2, [r3, #0]
 800b6dc:	1c54      	adds	r4, r2, #1
 800b6de:	d01e      	beq.n	800b71e <__gethex+0x3ae>
 800b6e0:	3201      	adds	r2, #1
 800b6e2:	601a      	str	r2, [r3, #0]
 800b6e4:	002b      	movs	r3, r5
 800b6e6:	3314      	adds	r3, #20
 800b6e8:	2e02      	cmp	r6, #2
 800b6ea:	d141      	bne.n	800b770 <__gethex+0x400>
 800b6ec:	9a01      	ldr	r2, [sp, #4]
 800b6ee:	9900      	ldr	r1, [sp, #0]
 800b6f0:	6812      	ldr	r2, [r2, #0]
 800b6f2:	3a01      	subs	r2, #1
 800b6f4:	428a      	cmp	r2, r1
 800b6f6:	d10b      	bne.n	800b710 <__gethex+0x3a0>
 800b6f8:	221f      	movs	r2, #31
 800b6fa:	9800      	ldr	r0, [sp, #0]
 800b6fc:	1149      	asrs	r1, r1, #5
 800b6fe:	4002      	ands	r2, r0
 800b700:	2001      	movs	r0, #1
 800b702:	0004      	movs	r4, r0
 800b704:	4094      	lsls	r4, r2
 800b706:	0089      	lsls	r1, r1, #2
 800b708:	58cb      	ldr	r3, [r1, r3]
 800b70a:	4223      	tst	r3, r4
 800b70c:	d000      	beq.n	800b710 <__gethex+0x3a0>
 800b70e:	2601      	movs	r6, #1
 800b710:	2320      	movs	r3, #32
 800b712:	431e      	orrs	r6, r3
 800b714:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b716:	601d      	str	r5, [r3, #0]
 800b718:	9b07      	ldr	r3, [sp, #28]
 800b71a:	601f      	str	r7, [r3, #0]
 800b71c:	e6b1      	b.n	800b482 <__gethex+0x112>
 800b71e:	c301      	stmia	r3!, {r0}
 800b720:	4299      	cmp	r1, r3
 800b722:	d8da      	bhi.n	800b6da <__gethex+0x36a>
 800b724:	68ab      	ldr	r3, [r5, #8]
 800b726:	9a02      	ldr	r2, [sp, #8]
 800b728:	429a      	cmp	r2, r3
 800b72a:	db18      	blt.n	800b75e <__gethex+0x3ee>
 800b72c:	6869      	ldr	r1, [r5, #4]
 800b72e:	9803      	ldr	r0, [sp, #12]
 800b730:	3101      	adds	r1, #1
 800b732:	f000 f921 	bl	800b978 <_Balloc>
 800b736:	1e04      	subs	r4, r0, #0
 800b738:	d104      	bne.n	800b744 <__gethex+0x3d4>
 800b73a:	0022      	movs	r2, r4
 800b73c:	2184      	movs	r1, #132	; 0x84
 800b73e:	4b1c      	ldr	r3, [pc, #112]	; (800b7b0 <__gethex+0x440>)
 800b740:	481c      	ldr	r0, [pc, #112]	; (800b7b4 <__gethex+0x444>)
 800b742:	e6c2      	b.n	800b4ca <__gethex+0x15a>
 800b744:	0029      	movs	r1, r5
 800b746:	692a      	ldr	r2, [r5, #16]
 800b748:	310c      	adds	r1, #12
 800b74a:	3202      	adds	r2, #2
 800b74c:	0092      	lsls	r2, r2, #2
 800b74e:	300c      	adds	r0, #12
 800b750:	f7ff fd2d 	bl	800b1ae <memcpy>
 800b754:	0029      	movs	r1, r5
 800b756:	9803      	ldr	r0, [sp, #12]
 800b758:	f000 f952 	bl	800ba00 <_Bfree>
 800b75c:	0025      	movs	r5, r4
 800b75e:	692b      	ldr	r3, [r5, #16]
 800b760:	1c5a      	adds	r2, r3, #1
 800b762:	612a      	str	r2, [r5, #16]
 800b764:	2201      	movs	r2, #1
 800b766:	3304      	adds	r3, #4
 800b768:	009b      	lsls	r3, r3, #2
 800b76a:	18eb      	adds	r3, r5, r3
 800b76c:	605a      	str	r2, [r3, #4]
 800b76e:	e7b9      	b.n	800b6e4 <__gethex+0x374>
 800b770:	692a      	ldr	r2, [r5, #16]
 800b772:	9902      	ldr	r1, [sp, #8]
 800b774:	428a      	cmp	r2, r1
 800b776:	dd09      	ble.n	800b78c <__gethex+0x41c>
 800b778:	2101      	movs	r1, #1
 800b77a:	0028      	movs	r0, r5
 800b77c:	f7ff fd8e 	bl	800b29c <rshift>
 800b780:	9b01      	ldr	r3, [sp, #4]
 800b782:	3701      	adds	r7, #1
 800b784:	689b      	ldr	r3, [r3, #8]
 800b786:	42bb      	cmp	r3, r7
 800b788:	dac1      	bge.n	800b70e <__gethex+0x39e>
 800b78a:	e6e4      	b.n	800b556 <__gethex+0x1e6>
 800b78c:	221f      	movs	r2, #31
 800b78e:	9c00      	ldr	r4, [sp, #0]
 800b790:	9900      	ldr	r1, [sp, #0]
 800b792:	2601      	movs	r6, #1
 800b794:	4014      	ands	r4, r2
 800b796:	4211      	tst	r1, r2
 800b798:	d0ba      	beq.n	800b710 <__gethex+0x3a0>
 800b79a:	9a04      	ldr	r2, [sp, #16]
 800b79c:	189b      	adds	r3, r3, r2
 800b79e:	3b04      	subs	r3, #4
 800b7a0:	6818      	ldr	r0, [r3, #0]
 800b7a2:	f000 f9e1 	bl	800bb68 <__hi0bits>
 800b7a6:	2320      	movs	r3, #32
 800b7a8:	1b1b      	subs	r3, r3, r4
 800b7aa:	4298      	cmp	r0, r3
 800b7ac:	dbe4      	blt.n	800b778 <__gethex+0x408>
 800b7ae:	e7af      	b.n	800b710 <__gethex+0x3a0>
 800b7b0:	0800dbae 	.word	0x0800dbae
 800b7b4:	0800dbbf 	.word	0x0800dbbf

0800b7b8 <L_shift>:
 800b7b8:	2308      	movs	r3, #8
 800b7ba:	b570      	push	{r4, r5, r6, lr}
 800b7bc:	2520      	movs	r5, #32
 800b7be:	1a9a      	subs	r2, r3, r2
 800b7c0:	0092      	lsls	r2, r2, #2
 800b7c2:	1aad      	subs	r5, r5, r2
 800b7c4:	6843      	ldr	r3, [r0, #4]
 800b7c6:	6804      	ldr	r4, [r0, #0]
 800b7c8:	001e      	movs	r6, r3
 800b7ca:	40ae      	lsls	r6, r5
 800b7cc:	40d3      	lsrs	r3, r2
 800b7ce:	4334      	orrs	r4, r6
 800b7d0:	6004      	str	r4, [r0, #0]
 800b7d2:	6043      	str	r3, [r0, #4]
 800b7d4:	3004      	adds	r0, #4
 800b7d6:	4288      	cmp	r0, r1
 800b7d8:	d3f4      	bcc.n	800b7c4 <L_shift+0xc>
 800b7da:	bd70      	pop	{r4, r5, r6, pc}

0800b7dc <__match>:
 800b7dc:	b530      	push	{r4, r5, lr}
 800b7de:	6803      	ldr	r3, [r0, #0]
 800b7e0:	780c      	ldrb	r4, [r1, #0]
 800b7e2:	3301      	adds	r3, #1
 800b7e4:	2c00      	cmp	r4, #0
 800b7e6:	d102      	bne.n	800b7ee <__match+0x12>
 800b7e8:	6003      	str	r3, [r0, #0]
 800b7ea:	2001      	movs	r0, #1
 800b7ec:	bd30      	pop	{r4, r5, pc}
 800b7ee:	781a      	ldrb	r2, [r3, #0]
 800b7f0:	0015      	movs	r5, r2
 800b7f2:	3d41      	subs	r5, #65	; 0x41
 800b7f4:	2d19      	cmp	r5, #25
 800b7f6:	d800      	bhi.n	800b7fa <__match+0x1e>
 800b7f8:	3220      	adds	r2, #32
 800b7fa:	3101      	adds	r1, #1
 800b7fc:	42a2      	cmp	r2, r4
 800b7fe:	d0ef      	beq.n	800b7e0 <__match+0x4>
 800b800:	2000      	movs	r0, #0
 800b802:	e7f3      	b.n	800b7ec <__match+0x10>

0800b804 <__hexnan>:
 800b804:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b806:	680b      	ldr	r3, [r1, #0]
 800b808:	b08b      	sub	sp, #44	; 0x2c
 800b80a:	9201      	str	r2, [sp, #4]
 800b80c:	9901      	ldr	r1, [sp, #4]
 800b80e:	115a      	asrs	r2, r3, #5
 800b810:	0092      	lsls	r2, r2, #2
 800b812:	188a      	adds	r2, r1, r2
 800b814:	9202      	str	r2, [sp, #8]
 800b816:	0019      	movs	r1, r3
 800b818:	221f      	movs	r2, #31
 800b81a:	4011      	ands	r1, r2
 800b81c:	9008      	str	r0, [sp, #32]
 800b81e:	9106      	str	r1, [sp, #24]
 800b820:	4213      	tst	r3, r2
 800b822:	d002      	beq.n	800b82a <__hexnan+0x26>
 800b824:	9b02      	ldr	r3, [sp, #8]
 800b826:	3304      	adds	r3, #4
 800b828:	9302      	str	r3, [sp, #8]
 800b82a:	9b02      	ldr	r3, [sp, #8]
 800b82c:	2500      	movs	r5, #0
 800b82e:	1f1f      	subs	r7, r3, #4
 800b830:	003e      	movs	r6, r7
 800b832:	003c      	movs	r4, r7
 800b834:	9b08      	ldr	r3, [sp, #32]
 800b836:	603d      	str	r5, [r7, #0]
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	9507      	str	r5, [sp, #28]
 800b83c:	9305      	str	r3, [sp, #20]
 800b83e:	9503      	str	r5, [sp, #12]
 800b840:	9b05      	ldr	r3, [sp, #20]
 800b842:	3301      	adds	r3, #1
 800b844:	9309      	str	r3, [sp, #36]	; 0x24
 800b846:	9b05      	ldr	r3, [sp, #20]
 800b848:	785b      	ldrb	r3, [r3, #1]
 800b84a:	9304      	str	r3, [sp, #16]
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d028      	beq.n	800b8a2 <__hexnan+0x9e>
 800b850:	9804      	ldr	r0, [sp, #16]
 800b852:	f7ff fd78 	bl	800b346 <__hexdig_fun>
 800b856:	2800      	cmp	r0, #0
 800b858:	d154      	bne.n	800b904 <__hexnan+0x100>
 800b85a:	9b04      	ldr	r3, [sp, #16]
 800b85c:	2b20      	cmp	r3, #32
 800b85e:	d819      	bhi.n	800b894 <__hexnan+0x90>
 800b860:	9b03      	ldr	r3, [sp, #12]
 800b862:	9a07      	ldr	r2, [sp, #28]
 800b864:	4293      	cmp	r3, r2
 800b866:	dd12      	ble.n	800b88e <__hexnan+0x8a>
 800b868:	42b4      	cmp	r4, r6
 800b86a:	d206      	bcs.n	800b87a <__hexnan+0x76>
 800b86c:	2d07      	cmp	r5, #7
 800b86e:	dc04      	bgt.n	800b87a <__hexnan+0x76>
 800b870:	002a      	movs	r2, r5
 800b872:	0031      	movs	r1, r6
 800b874:	0020      	movs	r0, r4
 800b876:	f7ff ff9f 	bl	800b7b8 <L_shift>
 800b87a:	9b01      	ldr	r3, [sp, #4]
 800b87c:	2508      	movs	r5, #8
 800b87e:	429c      	cmp	r4, r3
 800b880:	d905      	bls.n	800b88e <__hexnan+0x8a>
 800b882:	1f26      	subs	r6, r4, #4
 800b884:	2500      	movs	r5, #0
 800b886:	0034      	movs	r4, r6
 800b888:	9b03      	ldr	r3, [sp, #12]
 800b88a:	6035      	str	r5, [r6, #0]
 800b88c:	9307      	str	r3, [sp, #28]
 800b88e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b890:	9305      	str	r3, [sp, #20]
 800b892:	e7d5      	b.n	800b840 <__hexnan+0x3c>
 800b894:	9b04      	ldr	r3, [sp, #16]
 800b896:	2b29      	cmp	r3, #41	; 0x29
 800b898:	d159      	bne.n	800b94e <__hexnan+0x14a>
 800b89a:	9b05      	ldr	r3, [sp, #20]
 800b89c:	9a08      	ldr	r2, [sp, #32]
 800b89e:	3302      	adds	r3, #2
 800b8a0:	6013      	str	r3, [r2, #0]
 800b8a2:	9b03      	ldr	r3, [sp, #12]
 800b8a4:	2b00      	cmp	r3, #0
 800b8a6:	d052      	beq.n	800b94e <__hexnan+0x14a>
 800b8a8:	42b4      	cmp	r4, r6
 800b8aa:	d206      	bcs.n	800b8ba <__hexnan+0xb6>
 800b8ac:	2d07      	cmp	r5, #7
 800b8ae:	dc04      	bgt.n	800b8ba <__hexnan+0xb6>
 800b8b0:	002a      	movs	r2, r5
 800b8b2:	0031      	movs	r1, r6
 800b8b4:	0020      	movs	r0, r4
 800b8b6:	f7ff ff7f 	bl	800b7b8 <L_shift>
 800b8ba:	9b01      	ldr	r3, [sp, #4]
 800b8bc:	429c      	cmp	r4, r3
 800b8be:	d935      	bls.n	800b92c <__hexnan+0x128>
 800b8c0:	001a      	movs	r2, r3
 800b8c2:	0023      	movs	r3, r4
 800b8c4:	cb02      	ldmia	r3!, {r1}
 800b8c6:	c202      	stmia	r2!, {r1}
 800b8c8:	429f      	cmp	r7, r3
 800b8ca:	d2fb      	bcs.n	800b8c4 <__hexnan+0xc0>
 800b8cc:	9b02      	ldr	r3, [sp, #8]
 800b8ce:	1c62      	adds	r2, r4, #1
 800b8d0:	1ed9      	subs	r1, r3, #3
 800b8d2:	2304      	movs	r3, #4
 800b8d4:	4291      	cmp	r1, r2
 800b8d6:	d305      	bcc.n	800b8e4 <__hexnan+0xe0>
 800b8d8:	9b02      	ldr	r3, [sp, #8]
 800b8da:	3b04      	subs	r3, #4
 800b8dc:	1b1b      	subs	r3, r3, r4
 800b8de:	089b      	lsrs	r3, r3, #2
 800b8e0:	3301      	adds	r3, #1
 800b8e2:	009b      	lsls	r3, r3, #2
 800b8e4:	9a01      	ldr	r2, [sp, #4]
 800b8e6:	18d3      	adds	r3, r2, r3
 800b8e8:	2200      	movs	r2, #0
 800b8ea:	c304      	stmia	r3!, {r2}
 800b8ec:	429f      	cmp	r7, r3
 800b8ee:	d2fc      	bcs.n	800b8ea <__hexnan+0xe6>
 800b8f0:	683b      	ldr	r3, [r7, #0]
 800b8f2:	2b00      	cmp	r3, #0
 800b8f4:	d104      	bne.n	800b900 <__hexnan+0xfc>
 800b8f6:	9b01      	ldr	r3, [sp, #4]
 800b8f8:	429f      	cmp	r7, r3
 800b8fa:	d126      	bne.n	800b94a <__hexnan+0x146>
 800b8fc:	2301      	movs	r3, #1
 800b8fe:	603b      	str	r3, [r7, #0]
 800b900:	2005      	movs	r0, #5
 800b902:	e025      	b.n	800b950 <__hexnan+0x14c>
 800b904:	9b03      	ldr	r3, [sp, #12]
 800b906:	3501      	adds	r5, #1
 800b908:	3301      	adds	r3, #1
 800b90a:	9303      	str	r3, [sp, #12]
 800b90c:	2d08      	cmp	r5, #8
 800b90e:	dd06      	ble.n	800b91e <__hexnan+0x11a>
 800b910:	9b01      	ldr	r3, [sp, #4]
 800b912:	429c      	cmp	r4, r3
 800b914:	d9bb      	bls.n	800b88e <__hexnan+0x8a>
 800b916:	2300      	movs	r3, #0
 800b918:	2501      	movs	r5, #1
 800b91a:	3c04      	subs	r4, #4
 800b91c:	6023      	str	r3, [r4, #0]
 800b91e:	220f      	movs	r2, #15
 800b920:	6823      	ldr	r3, [r4, #0]
 800b922:	4010      	ands	r0, r2
 800b924:	011b      	lsls	r3, r3, #4
 800b926:	4303      	orrs	r3, r0
 800b928:	6023      	str	r3, [r4, #0]
 800b92a:	e7b0      	b.n	800b88e <__hexnan+0x8a>
 800b92c:	9b06      	ldr	r3, [sp, #24]
 800b92e:	2b00      	cmp	r3, #0
 800b930:	d0de      	beq.n	800b8f0 <__hexnan+0xec>
 800b932:	2320      	movs	r3, #32
 800b934:	9a06      	ldr	r2, [sp, #24]
 800b936:	9902      	ldr	r1, [sp, #8]
 800b938:	1a9b      	subs	r3, r3, r2
 800b93a:	2201      	movs	r2, #1
 800b93c:	4252      	negs	r2, r2
 800b93e:	40da      	lsrs	r2, r3
 800b940:	3904      	subs	r1, #4
 800b942:	680b      	ldr	r3, [r1, #0]
 800b944:	4013      	ands	r3, r2
 800b946:	600b      	str	r3, [r1, #0]
 800b948:	e7d2      	b.n	800b8f0 <__hexnan+0xec>
 800b94a:	3f04      	subs	r7, #4
 800b94c:	e7d0      	b.n	800b8f0 <__hexnan+0xec>
 800b94e:	2004      	movs	r0, #4
 800b950:	b00b      	add	sp, #44	; 0x2c
 800b952:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800b954 <__ascii_mbtowc>:
 800b954:	b082      	sub	sp, #8
 800b956:	2900      	cmp	r1, #0
 800b958:	d100      	bne.n	800b95c <__ascii_mbtowc+0x8>
 800b95a:	a901      	add	r1, sp, #4
 800b95c:	1e10      	subs	r0, r2, #0
 800b95e:	d006      	beq.n	800b96e <__ascii_mbtowc+0x1a>
 800b960:	2b00      	cmp	r3, #0
 800b962:	d006      	beq.n	800b972 <__ascii_mbtowc+0x1e>
 800b964:	7813      	ldrb	r3, [r2, #0]
 800b966:	600b      	str	r3, [r1, #0]
 800b968:	7810      	ldrb	r0, [r2, #0]
 800b96a:	1e43      	subs	r3, r0, #1
 800b96c:	4198      	sbcs	r0, r3
 800b96e:	b002      	add	sp, #8
 800b970:	4770      	bx	lr
 800b972:	2002      	movs	r0, #2
 800b974:	4240      	negs	r0, r0
 800b976:	e7fa      	b.n	800b96e <__ascii_mbtowc+0x1a>

0800b978 <_Balloc>:
 800b978:	b570      	push	{r4, r5, r6, lr}
 800b97a:	69c5      	ldr	r5, [r0, #28]
 800b97c:	0006      	movs	r6, r0
 800b97e:	000c      	movs	r4, r1
 800b980:	2d00      	cmp	r5, #0
 800b982:	d10e      	bne.n	800b9a2 <_Balloc+0x2a>
 800b984:	2010      	movs	r0, #16
 800b986:	f7fe f9e9 	bl	8009d5c <malloc>
 800b98a:	1e02      	subs	r2, r0, #0
 800b98c:	61f0      	str	r0, [r6, #28]
 800b98e:	d104      	bne.n	800b99a <_Balloc+0x22>
 800b990:	216b      	movs	r1, #107	; 0x6b
 800b992:	4b19      	ldr	r3, [pc, #100]	; (800b9f8 <_Balloc+0x80>)
 800b994:	4819      	ldr	r0, [pc, #100]	; (800b9fc <_Balloc+0x84>)
 800b996:	f7ff fc19 	bl	800b1cc <__assert_func>
 800b99a:	6045      	str	r5, [r0, #4]
 800b99c:	6085      	str	r5, [r0, #8]
 800b99e:	6005      	str	r5, [r0, #0]
 800b9a0:	60c5      	str	r5, [r0, #12]
 800b9a2:	69f5      	ldr	r5, [r6, #28]
 800b9a4:	68eb      	ldr	r3, [r5, #12]
 800b9a6:	2b00      	cmp	r3, #0
 800b9a8:	d013      	beq.n	800b9d2 <_Balloc+0x5a>
 800b9aa:	69f3      	ldr	r3, [r6, #28]
 800b9ac:	00a2      	lsls	r2, r4, #2
 800b9ae:	68db      	ldr	r3, [r3, #12]
 800b9b0:	189b      	adds	r3, r3, r2
 800b9b2:	6818      	ldr	r0, [r3, #0]
 800b9b4:	2800      	cmp	r0, #0
 800b9b6:	d118      	bne.n	800b9ea <_Balloc+0x72>
 800b9b8:	2101      	movs	r1, #1
 800b9ba:	000d      	movs	r5, r1
 800b9bc:	40a5      	lsls	r5, r4
 800b9be:	1d6a      	adds	r2, r5, #5
 800b9c0:	0030      	movs	r0, r6
 800b9c2:	0092      	lsls	r2, r2, #2
 800b9c4:	f001 f875 	bl	800cab2 <_calloc_r>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d00c      	beq.n	800b9e6 <_Balloc+0x6e>
 800b9cc:	6044      	str	r4, [r0, #4]
 800b9ce:	6085      	str	r5, [r0, #8]
 800b9d0:	e00d      	b.n	800b9ee <_Balloc+0x76>
 800b9d2:	2221      	movs	r2, #33	; 0x21
 800b9d4:	2104      	movs	r1, #4
 800b9d6:	0030      	movs	r0, r6
 800b9d8:	f001 f86b 	bl	800cab2 <_calloc_r>
 800b9dc:	69f3      	ldr	r3, [r6, #28]
 800b9de:	60e8      	str	r0, [r5, #12]
 800b9e0:	68db      	ldr	r3, [r3, #12]
 800b9e2:	2b00      	cmp	r3, #0
 800b9e4:	d1e1      	bne.n	800b9aa <_Balloc+0x32>
 800b9e6:	2000      	movs	r0, #0
 800b9e8:	bd70      	pop	{r4, r5, r6, pc}
 800b9ea:	6802      	ldr	r2, [r0, #0]
 800b9ec:	601a      	str	r2, [r3, #0]
 800b9ee:	2300      	movs	r3, #0
 800b9f0:	6103      	str	r3, [r0, #16]
 800b9f2:	60c3      	str	r3, [r0, #12]
 800b9f4:	e7f8      	b.n	800b9e8 <_Balloc+0x70>
 800b9f6:	46c0      	nop			; (mov r8, r8)
 800b9f8:	0800daf9 	.word	0x0800daf9
 800b9fc:	0800dc1f 	.word	0x0800dc1f

0800ba00 <_Bfree>:
 800ba00:	b570      	push	{r4, r5, r6, lr}
 800ba02:	69c6      	ldr	r6, [r0, #28]
 800ba04:	0005      	movs	r5, r0
 800ba06:	000c      	movs	r4, r1
 800ba08:	2e00      	cmp	r6, #0
 800ba0a:	d10e      	bne.n	800ba2a <_Bfree+0x2a>
 800ba0c:	2010      	movs	r0, #16
 800ba0e:	f7fe f9a5 	bl	8009d5c <malloc>
 800ba12:	1e02      	subs	r2, r0, #0
 800ba14:	61e8      	str	r0, [r5, #28]
 800ba16:	d104      	bne.n	800ba22 <_Bfree+0x22>
 800ba18:	218f      	movs	r1, #143	; 0x8f
 800ba1a:	4b09      	ldr	r3, [pc, #36]	; (800ba40 <_Bfree+0x40>)
 800ba1c:	4809      	ldr	r0, [pc, #36]	; (800ba44 <_Bfree+0x44>)
 800ba1e:	f7ff fbd5 	bl	800b1cc <__assert_func>
 800ba22:	6046      	str	r6, [r0, #4]
 800ba24:	6086      	str	r6, [r0, #8]
 800ba26:	6006      	str	r6, [r0, #0]
 800ba28:	60c6      	str	r6, [r0, #12]
 800ba2a:	2c00      	cmp	r4, #0
 800ba2c:	d007      	beq.n	800ba3e <_Bfree+0x3e>
 800ba2e:	69eb      	ldr	r3, [r5, #28]
 800ba30:	6862      	ldr	r2, [r4, #4]
 800ba32:	68db      	ldr	r3, [r3, #12]
 800ba34:	0092      	lsls	r2, r2, #2
 800ba36:	189b      	adds	r3, r3, r2
 800ba38:	681a      	ldr	r2, [r3, #0]
 800ba3a:	6022      	str	r2, [r4, #0]
 800ba3c:	601c      	str	r4, [r3, #0]
 800ba3e:	bd70      	pop	{r4, r5, r6, pc}
 800ba40:	0800daf9 	.word	0x0800daf9
 800ba44:	0800dc1f 	.word	0x0800dc1f

0800ba48 <__multadd>:
 800ba48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ba4a:	000e      	movs	r6, r1
 800ba4c:	9001      	str	r0, [sp, #4]
 800ba4e:	000c      	movs	r4, r1
 800ba50:	001d      	movs	r5, r3
 800ba52:	2000      	movs	r0, #0
 800ba54:	690f      	ldr	r7, [r1, #16]
 800ba56:	3614      	adds	r6, #20
 800ba58:	6833      	ldr	r3, [r6, #0]
 800ba5a:	3001      	adds	r0, #1
 800ba5c:	b299      	uxth	r1, r3
 800ba5e:	4351      	muls	r1, r2
 800ba60:	0c1b      	lsrs	r3, r3, #16
 800ba62:	4353      	muls	r3, r2
 800ba64:	1949      	adds	r1, r1, r5
 800ba66:	0c0d      	lsrs	r5, r1, #16
 800ba68:	195b      	adds	r3, r3, r5
 800ba6a:	0c1d      	lsrs	r5, r3, #16
 800ba6c:	b289      	uxth	r1, r1
 800ba6e:	041b      	lsls	r3, r3, #16
 800ba70:	185b      	adds	r3, r3, r1
 800ba72:	c608      	stmia	r6!, {r3}
 800ba74:	4287      	cmp	r7, r0
 800ba76:	dcef      	bgt.n	800ba58 <__multadd+0x10>
 800ba78:	2d00      	cmp	r5, #0
 800ba7a:	d022      	beq.n	800bac2 <__multadd+0x7a>
 800ba7c:	68a3      	ldr	r3, [r4, #8]
 800ba7e:	42bb      	cmp	r3, r7
 800ba80:	dc19      	bgt.n	800bab6 <__multadd+0x6e>
 800ba82:	6861      	ldr	r1, [r4, #4]
 800ba84:	9801      	ldr	r0, [sp, #4]
 800ba86:	3101      	adds	r1, #1
 800ba88:	f7ff ff76 	bl	800b978 <_Balloc>
 800ba8c:	1e06      	subs	r6, r0, #0
 800ba8e:	d105      	bne.n	800ba9c <__multadd+0x54>
 800ba90:	0032      	movs	r2, r6
 800ba92:	21ba      	movs	r1, #186	; 0xba
 800ba94:	4b0c      	ldr	r3, [pc, #48]	; (800bac8 <__multadd+0x80>)
 800ba96:	480d      	ldr	r0, [pc, #52]	; (800bacc <__multadd+0x84>)
 800ba98:	f7ff fb98 	bl	800b1cc <__assert_func>
 800ba9c:	0021      	movs	r1, r4
 800ba9e:	6922      	ldr	r2, [r4, #16]
 800baa0:	310c      	adds	r1, #12
 800baa2:	3202      	adds	r2, #2
 800baa4:	0092      	lsls	r2, r2, #2
 800baa6:	300c      	adds	r0, #12
 800baa8:	f7ff fb81 	bl	800b1ae <memcpy>
 800baac:	0021      	movs	r1, r4
 800baae:	9801      	ldr	r0, [sp, #4]
 800bab0:	f7ff ffa6 	bl	800ba00 <_Bfree>
 800bab4:	0034      	movs	r4, r6
 800bab6:	1d3b      	adds	r3, r7, #4
 800bab8:	009b      	lsls	r3, r3, #2
 800baba:	18e3      	adds	r3, r4, r3
 800babc:	605d      	str	r5, [r3, #4]
 800babe:	1c7b      	adds	r3, r7, #1
 800bac0:	6123      	str	r3, [r4, #16]
 800bac2:	0020      	movs	r0, r4
 800bac4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bac6:	46c0      	nop			; (mov r8, r8)
 800bac8:	0800dbae 	.word	0x0800dbae
 800bacc:	0800dc1f 	.word	0x0800dc1f

0800bad0 <__s2b>:
 800bad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bad2:	0006      	movs	r6, r0
 800bad4:	0018      	movs	r0, r3
 800bad6:	000c      	movs	r4, r1
 800bad8:	3008      	adds	r0, #8
 800bada:	2109      	movs	r1, #9
 800badc:	9301      	str	r3, [sp, #4]
 800bade:	0015      	movs	r5, r2
 800bae0:	f7f4 fbb8 	bl	8000254 <__divsi3>
 800bae4:	2301      	movs	r3, #1
 800bae6:	2100      	movs	r1, #0
 800bae8:	4283      	cmp	r3, r0
 800baea:	db0a      	blt.n	800bb02 <__s2b+0x32>
 800baec:	0030      	movs	r0, r6
 800baee:	f7ff ff43 	bl	800b978 <_Balloc>
 800baf2:	1e01      	subs	r1, r0, #0
 800baf4:	d108      	bne.n	800bb08 <__s2b+0x38>
 800baf6:	000a      	movs	r2, r1
 800baf8:	4b19      	ldr	r3, [pc, #100]	; (800bb60 <__s2b+0x90>)
 800bafa:	481a      	ldr	r0, [pc, #104]	; (800bb64 <__s2b+0x94>)
 800bafc:	31d3      	adds	r1, #211	; 0xd3
 800bafe:	f7ff fb65 	bl	800b1cc <__assert_func>
 800bb02:	005b      	lsls	r3, r3, #1
 800bb04:	3101      	adds	r1, #1
 800bb06:	e7ef      	b.n	800bae8 <__s2b+0x18>
 800bb08:	9b08      	ldr	r3, [sp, #32]
 800bb0a:	6143      	str	r3, [r0, #20]
 800bb0c:	2301      	movs	r3, #1
 800bb0e:	6103      	str	r3, [r0, #16]
 800bb10:	2d09      	cmp	r5, #9
 800bb12:	dd18      	ble.n	800bb46 <__s2b+0x76>
 800bb14:	0023      	movs	r3, r4
 800bb16:	3309      	adds	r3, #9
 800bb18:	001f      	movs	r7, r3
 800bb1a:	9300      	str	r3, [sp, #0]
 800bb1c:	1964      	adds	r4, r4, r5
 800bb1e:	783b      	ldrb	r3, [r7, #0]
 800bb20:	220a      	movs	r2, #10
 800bb22:	0030      	movs	r0, r6
 800bb24:	3b30      	subs	r3, #48	; 0x30
 800bb26:	f7ff ff8f 	bl	800ba48 <__multadd>
 800bb2a:	3701      	adds	r7, #1
 800bb2c:	0001      	movs	r1, r0
 800bb2e:	42a7      	cmp	r7, r4
 800bb30:	d1f5      	bne.n	800bb1e <__s2b+0x4e>
 800bb32:	002c      	movs	r4, r5
 800bb34:	9b00      	ldr	r3, [sp, #0]
 800bb36:	3c08      	subs	r4, #8
 800bb38:	191c      	adds	r4, r3, r4
 800bb3a:	002f      	movs	r7, r5
 800bb3c:	9b01      	ldr	r3, [sp, #4]
 800bb3e:	429f      	cmp	r7, r3
 800bb40:	db04      	blt.n	800bb4c <__s2b+0x7c>
 800bb42:	0008      	movs	r0, r1
 800bb44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800bb46:	2509      	movs	r5, #9
 800bb48:	340a      	adds	r4, #10
 800bb4a:	e7f6      	b.n	800bb3a <__s2b+0x6a>
 800bb4c:	1b63      	subs	r3, r4, r5
 800bb4e:	5ddb      	ldrb	r3, [r3, r7]
 800bb50:	220a      	movs	r2, #10
 800bb52:	0030      	movs	r0, r6
 800bb54:	3b30      	subs	r3, #48	; 0x30
 800bb56:	f7ff ff77 	bl	800ba48 <__multadd>
 800bb5a:	3701      	adds	r7, #1
 800bb5c:	0001      	movs	r1, r0
 800bb5e:	e7ed      	b.n	800bb3c <__s2b+0x6c>
 800bb60:	0800dbae 	.word	0x0800dbae
 800bb64:	0800dc1f 	.word	0x0800dc1f

0800bb68 <__hi0bits>:
 800bb68:	0003      	movs	r3, r0
 800bb6a:	0c02      	lsrs	r2, r0, #16
 800bb6c:	2000      	movs	r0, #0
 800bb6e:	4282      	cmp	r2, r0
 800bb70:	d101      	bne.n	800bb76 <__hi0bits+0xe>
 800bb72:	041b      	lsls	r3, r3, #16
 800bb74:	3010      	adds	r0, #16
 800bb76:	0e1a      	lsrs	r2, r3, #24
 800bb78:	d101      	bne.n	800bb7e <__hi0bits+0x16>
 800bb7a:	3008      	adds	r0, #8
 800bb7c:	021b      	lsls	r3, r3, #8
 800bb7e:	0f1a      	lsrs	r2, r3, #28
 800bb80:	d101      	bne.n	800bb86 <__hi0bits+0x1e>
 800bb82:	3004      	adds	r0, #4
 800bb84:	011b      	lsls	r3, r3, #4
 800bb86:	0f9a      	lsrs	r2, r3, #30
 800bb88:	d101      	bne.n	800bb8e <__hi0bits+0x26>
 800bb8a:	3002      	adds	r0, #2
 800bb8c:	009b      	lsls	r3, r3, #2
 800bb8e:	2b00      	cmp	r3, #0
 800bb90:	db03      	blt.n	800bb9a <__hi0bits+0x32>
 800bb92:	3001      	adds	r0, #1
 800bb94:	005b      	lsls	r3, r3, #1
 800bb96:	d400      	bmi.n	800bb9a <__hi0bits+0x32>
 800bb98:	2020      	movs	r0, #32
 800bb9a:	4770      	bx	lr

0800bb9c <__lo0bits>:
 800bb9c:	6803      	ldr	r3, [r0, #0]
 800bb9e:	0001      	movs	r1, r0
 800bba0:	2207      	movs	r2, #7
 800bba2:	0018      	movs	r0, r3
 800bba4:	4010      	ands	r0, r2
 800bba6:	4213      	tst	r3, r2
 800bba8:	d00d      	beq.n	800bbc6 <__lo0bits+0x2a>
 800bbaa:	3a06      	subs	r2, #6
 800bbac:	2000      	movs	r0, #0
 800bbae:	4213      	tst	r3, r2
 800bbb0:	d105      	bne.n	800bbbe <__lo0bits+0x22>
 800bbb2:	3002      	adds	r0, #2
 800bbb4:	4203      	tst	r3, r0
 800bbb6:	d003      	beq.n	800bbc0 <__lo0bits+0x24>
 800bbb8:	40d3      	lsrs	r3, r2
 800bbba:	0010      	movs	r0, r2
 800bbbc:	600b      	str	r3, [r1, #0]
 800bbbe:	4770      	bx	lr
 800bbc0:	089b      	lsrs	r3, r3, #2
 800bbc2:	600b      	str	r3, [r1, #0]
 800bbc4:	e7fb      	b.n	800bbbe <__lo0bits+0x22>
 800bbc6:	b29a      	uxth	r2, r3
 800bbc8:	2a00      	cmp	r2, #0
 800bbca:	d101      	bne.n	800bbd0 <__lo0bits+0x34>
 800bbcc:	2010      	movs	r0, #16
 800bbce:	0c1b      	lsrs	r3, r3, #16
 800bbd0:	b2da      	uxtb	r2, r3
 800bbd2:	2a00      	cmp	r2, #0
 800bbd4:	d101      	bne.n	800bbda <__lo0bits+0x3e>
 800bbd6:	3008      	adds	r0, #8
 800bbd8:	0a1b      	lsrs	r3, r3, #8
 800bbda:	071a      	lsls	r2, r3, #28
 800bbdc:	d101      	bne.n	800bbe2 <__lo0bits+0x46>
 800bbde:	3004      	adds	r0, #4
 800bbe0:	091b      	lsrs	r3, r3, #4
 800bbe2:	079a      	lsls	r2, r3, #30
 800bbe4:	d101      	bne.n	800bbea <__lo0bits+0x4e>
 800bbe6:	3002      	adds	r0, #2
 800bbe8:	089b      	lsrs	r3, r3, #2
 800bbea:	07da      	lsls	r2, r3, #31
 800bbec:	d4e9      	bmi.n	800bbc2 <__lo0bits+0x26>
 800bbee:	3001      	adds	r0, #1
 800bbf0:	085b      	lsrs	r3, r3, #1
 800bbf2:	d1e6      	bne.n	800bbc2 <__lo0bits+0x26>
 800bbf4:	2020      	movs	r0, #32
 800bbf6:	e7e2      	b.n	800bbbe <__lo0bits+0x22>

0800bbf8 <__i2b>:
 800bbf8:	b510      	push	{r4, lr}
 800bbfa:	000c      	movs	r4, r1
 800bbfc:	2101      	movs	r1, #1
 800bbfe:	f7ff febb 	bl	800b978 <_Balloc>
 800bc02:	2800      	cmp	r0, #0
 800bc04:	d107      	bne.n	800bc16 <__i2b+0x1e>
 800bc06:	2146      	movs	r1, #70	; 0x46
 800bc08:	4c05      	ldr	r4, [pc, #20]	; (800bc20 <__i2b+0x28>)
 800bc0a:	0002      	movs	r2, r0
 800bc0c:	4b05      	ldr	r3, [pc, #20]	; (800bc24 <__i2b+0x2c>)
 800bc0e:	0020      	movs	r0, r4
 800bc10:	31ff      	adds	r1, #255	; 0xff
 800bc12:	f7ff fadb 	bl	800b1cc <__assert_func>
 800bc16:	2301      	movs	r3, #1
 800bc18:	6144      	str	r4, [r0, #20]
 800bc1a:	6103      	str	r3, [r0, #16]
 800bc1c:	bd10      	pop	{r4, pc}
 800bc1e:	46c0      	nop			; (mov r8, r8)
 800bc20:	0800dc1f 	.word	0x0800dc1f
 800bc24:	0800dbae 	.word	0x0800dbae

0800bc28 <__multiply>:
 800bc28:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bc2a:	0015      	movs	r5, r2
 800bc2c:	690a      	ldr	r2, [r1, #16]
 800bc2e:	692b      	ldr	r3, [r5, #16]
 800bc30:	000c      	movs	r4, r1
 800bc32:	b08b      	sub	sp, #44	; 0x2c
 800bc34:	429a      	cmp	r2, r3
 800bc36:	da01      	bge.n	800bc3c <__multiply+0x14>
 800bc38:	002c      	movs	r4, r5
 800bc3a:	000d      	movs	r5, r1
 800bc3c:	6927      	ldr	r7, [r4, #16]
 800bc3e:	692e      	ldr	r6, [r5, #16]
 800bc40:	6861      	ldr	r1, [r4, #4]
 800bc42:	19bb      	adds	r3, r7, r6
 800bc44:	9303      	str	r3, [sp, #12]
 800bc46:	68a3      	ldr	r3, [r4, #8]
 800bc48:	19ba      	adds	r2, r7, r6
 800bc4a:	4293      	cmp	r3, r2
 800bc4c:	da00      	bge.n	800bc50 <__multiply+0x28>
 800bc4e:	3101      	adds	r1, #1
 800bc50:	f7ff fe92 	bl	800b978 <_Balloc>
 800bc54:	9002      	str	r0, [sp, #8]
 800bc56:	2800      	cmp	r0, #0
 800bc58:	d106      	bne.n	800bc68 <__multiply+0x40>
 800bc5a:	21b1      	movs	r1, #177	; 0xb1
 800bc5c:	4b48      	ldr	r3, [pc, #288]	; (800bd80 <__multiply+0x158>)
 800bc5e:	4849      	ldr	r0, [pc, #292]	; (800bd84 <__multiply+0x15c>)
 800bc60:	9a02      	ldr	r2, [sp, #8]
 800bc62:	0049      	lsls	r1, r1, #1
 800bc64:	f7ff fab2 	bl	800b1cc <__assert_func>
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	2200      	movs	r2, #0
 800bc6c:	3314      	adds	r3, #20
 800bc6e:	469c      	mov	ip, r3
 800bc70:	19bb      	adds	r3, r7, r6
 800bc72:	009b      	lsls	r3, r3, #2
 800bc74:	4463      	add	r3, ip
 800bc76:	9304      	str	r3, [sp, #16]
 800bc78:	4663      	mov	r3, ip
 800bc7a:	9904      	ldr	r1, [sp, #16]
 800bc7c:	428b      	cmp	r3, r1
 800bc7e:	d32a      	bcc.n	800bcd6 <__multiply+0xae>
 800bc80:	0023      	movs	r3, r4
 800bc82:	00bf      	lsls	r7, r7, #2
 800bc84:	3314      	adds	r3, #20
 800bc86:	3514      	adds	r5, #20
 800bc88:	9308      	str	r3, [sp, #32]
 800bc8a:	00b6      	lsls	r6, r6, #2
 800bc8c:	19db      	adds	r3, r3, r7
 800bc8e:	9305      	str	r3, [sp, #20]
 800bc90:	19ab      	adds	r3, r5, r6
 800bc92:	9309      	str	r3, [sp, #36]	; 0x24
 800bc94:	2304      	movs	r3, #4
 800bc96:	9306      	str	r3, [sp, #24]
 800bc98:	0023      	movs	r3, r4
 800bc9a:	9a05      	ldr	r2, [sp, #20]
 800bc9c:	3315      	adds	r3, #21
 800bc9e:	9501      	str	r5, [sp, #4]
 800bca0:	429a      	cmp	r2, r3
 800bca2:	d305      	bcc.n	800bcb0 <__multiply+0x88>
 800bca4:	1b13      	subs	r3, r2, r4
 800bca6:	3b15      	subs	r3, #21
 800bca8:	089b      	lsrs	r3, r3, #2
 800bcaa:	3301      	adds	r3, #1
 800bcac:	009b      	lsls	r3, r3, #2
 800bcae:	9306      	str	r3, [sp, #24]
 800bcb0:	9b01      	ldr	r3, [sp, #4]
 800bcb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d310      	bcc.n	800bcda <__multiply+0xb2>
 800bcb8:	9b03      	ldr	r3, [sp, #12]
 800bcba:	2b00      	cmp	r3, #0
 800bcbc:	dd05      	ble.n	800bcca <__multiply+0xa2>
 800bcbe:	9b04      	ldr	r3, [sp, #16]
 800bcc0:	3b04      	subs	r3, #4
 800bcc2:	9304      	str	r3, [sp, #16]
 800bcc4:	681b      	ldr	r3, [r3, #0]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d056      	beq.n	800bd78 <__multiply+0x150>
 800bcca:	9b02      	ldr	r3, [sp, #8]
 800bccc:	9a03      	ldr	r2, [sp, #12]
 800bcce:	0018      	movs	r0, r3
 800bcd0:	611a      	str	r2, [r3, #16]
 800bcd2:	b00b      	add	sp, #44	; 0x2c
 800bcd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bcd6:	c304      	stmia	r3!, {r2}
 800bcd8:	e7cf      	b.n	800bc7a <__multiply+0x52>
 800bcda:	9b01      	ldr	r3, [sp, #4]
 800bcdc:	6818      	ldr	r0, [r3, #0]
 800bcde:	b280      	uxth	r0, r0
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d01e      	beq.n	800bd22 <__multiply+0xfa>
 800bce4:	4667      	mov	r7, ip
 800bce6:	2500      	movs	r5, #0
 800bce8:	9e08      	ldr	r6, [sp, #32]
 800bcea:	ce02      	ldmia	r6!, {r1}
 800bcec:	683b      	ldr	r3, [r7, #0]
 800bcee:	9307      	str	r3, [sp, #28]
 800bcf0:	b28b      	uxth	r3, r1
 800bcf2:	4343      	muls	r3, r0
 800bcf4:	001a      	movs	r2, r3
 800bcf6:	466b      	mov	r3, sp
 800bcf8:	8b9b      	ldrh	r3, [r3, #28]
 800bcfa:	18d3      	adds	r3, r2, r3
 800bcfc:	195b      	adds	r3, r3, r5
 800bcfe:	0c0d      	lsrs	r5, r1, #16
 800bd00:	4345      	muls	r5, r0
 800bd02:	9a07      	ldr	r2, [sp, #28]
 800bd04:	0c11      	lsrs	r1, r2, #16
 800bd06:	1869      	adds	r1, r5, r1
 800bd08:	0c1a      	lsrs	r2, r3, #16
 800bd0a:	188a      	adds	r2, r1, r2
 800bd0c:	b29b      	uxth	r3, r3
 800bd0e:	0c15      	lsrs	r5, r2, #16
 800bd10:	0412      	lsls	r2, r2, #16
 800bd12:	431a      	orrs	r2, r3
 800bd14:	9b05      	ldr	r3, [sp, #20]
 800bd16:	c704      	stmia	r7!, {r2}
 800bd18:	42b3      	cmp	r3, r6
 800bd1a:	d8e6      	bhi.n	800bcea <__multiply+0xc2>
 800bd1c:	4663      	mov	r3, ip
 800bd1e:	9a06      	ldr	r2, [sp, #24]
 800bd20:	509d      	str	r5, [r3, r2]
 800bd22:	9b01      	ldr	r3, [sp, #4]
 800bd24:	6818      	ldr	r0, [r3, #0]
 800bd26:	0c00      	lsrs	r0, r0, #16
 800bd28:	d020      	beq.n	800bd6c <__multiply+0x144>
 800bd2a:	4663      	mov	r3, ip
 800bd2c:	0025      	movs	r5, r4
 800bd2e:	4661      	mov	r1, ip
 800bd30:	2700      	movs	r7, #0
 800bd32:	681b      	ldr	r3, [r3, #0]
 800bd34:	3514      	adds	r5, #20
 800bd36:	682a      	ldr	r2, [r5, #0]
 800bd38:	680e      	ldr	r6, [r1, #0]
 800bd3a:	b292      	uxth	r2, r2
 800bd3c:	4342      	muls	r2, r0
 800bd3e:	0c36      	lsrs	r6, r6, #16
 800bd40:	1992      	adds	r2, r2, r6
 800bd42:	19d2      	adds	r2, r2, r7
 800bd44:	0416      	lsls	r6, r2, #16
 800bd46:	b29b      	uxth	r3, r3
 800bd48:	431e      	orrs	r6, r3
 800bd4a:	600e      	str	r6, [r1, #0]
 800bd4c:	cd40      	ldmia	r5!, {r6}
 800bd4e:	684b      	ldr	r3, [r1, #4]
 800bd50:	0c36      	lsrs	r6, r6, #16
 800bd52:	4346      	muls	r6, r0
 800bd54:	b29b      	uxth	r3, r3
 800bd56:	0c12      	lsrs	r2, r2, #16
 800bd58:	18f3      	adds	r3, r6, r3
 800bd5a:	189b      	adds	r3, r3, r2
 800bd5c:	9a05      	ldr	r2, [sp, #20]
 800bd5e:	0c1f      	lsrs	r7, r3, #16
 800bd60:	3104      	adds	r1, #4
 800bd62:	42aa      	cmp	r2, r5
 800bd64:	d8e7      	bhi.n	800bd36 <__multiply+0x10e>
 800bd66:	4662      	mov	r2, ip
 800bd68:	9906      	ldr	r1, [sp, #24]
 800bd6a:	5053      	str	r3, [r2, r1]
 800bd6c:	9b01      	ldr	r3, [sp, #4]
 800bd6e:	3304      	adds	r3, #4
 800bd70:	9301      	str	r3, [sp, #4]
 800bd72:	2304      	movs	r3, #4
 800bd74:	449c      	add	ip, r3
 800bd76:	e79b      	b.n	800bcb0 <__multiply+0x88>
 800bd78:	9b03      	ldr	r3, [sp, #12]
 800bd7a:	3b01      	subs	r3, #1
 800bd7c:	9303      	str	r3, [sp, #12]
 800bd7e:	e79b      	b.n	800bcb8 <__multiply+0x90>
 800bd80:	0800dbae 	.word	0x0800dbae
 800bd84:	0800dc1f 	.word	0x0800dc1f

0800bd88 <__pow5mult>:
 800bd88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bd8a:	2303      	movs	r3, #3
 800bd8c:	0015      	movs	r5, r2
 800bd8e:	0007      	movs	r7, r0
 800bd90:	000e      	movs	r6, r1
 800bd92:	401a      	ands	r2, r3
 800bd94:	421d      	tst	r5, r3
 800bd96:	d008      	beq.n	800bdaa <__pow5mult+0x22>
 800bd98:	4925      	ldr	r1, [pc, #148]	; (800be30 <__pow5mult+0xa8>)
 800bd9a:	3a01      	subs	r2, #1
 800bd9c:	0092      	lsls	r2, r2, #2
 800bd9e:	5852      	ldr	r2, [r2, r1]
 800bda0:	2300      	movs	r3, #0
 800bda2:	0031      	movs	r1, r6
 800bda4:	f7ff fe50 	bl	800ba48 <__multadd>
 800bda8:	0006      	movs	r6, r0
 800bdaa:	10ad      	asrs	r5, r5, #2
 800bdac:	d03d      	beq.n	800be2a <__pow5mult+0xa2>
 800bdae:	69fc      	ldr	r4, [r7, #28]
 800bdb0:	2c00      	cmp	r4, #0
 800bdb2:	d10f      	bne.n	800bdd4 <__pow5mult+0x4c>
 800bdb4:	2010      	movs	r0, #16
 800bdb6:	f7fd ffd1 	bl	8009d5c <malloc>
 800bdba:	1e02      	subs	r2, r0, #0
 800bdbc:	61f8      	str	r0, [r7, #28]
 800bdbe:	d105      	bne.n	800bdcc <__pow5mult+0x44>
 800bdc0:	21b4      	movs	r1, #180	; 0xb4
 800bdc2:	4b1c      	ldr	r3, [pc, #112]	; (800be34 <__pow5mult+0xac>)
 800bdc4:	481c      	ldr	r0, [pc, #112]	; (800be38 <__pow5mult+0xb0>)
 800bdc6:	31ff      	adds	r1, #255	; 0xff
 800bdc8:	f7ff fa00 	bl	800b1cc <__assert_func>
 800bdcc:	6044      	str	r4, [r0, #4]
 800bdce:	6084      	str	r4, [r0, #8]
 800bdd0:	6004      	str	r4, [r0, #0]
 800bdd2:	60c4      	str	r4, [r0, #12]
 800bdd4:	69fb      	ldr	r3, [r7, #28]
 800bdd6:	689c      	ldr	r4, [r3, #8]
 800bdd8:	9301      	str	r3, [sp, #4]
 800bdda:	2c00      	cmp	r4, #0
 800bddc:	d108      	bne.n	800bdf0 <__pow5mult+0x68>
 800bdde:	0038      	movs	r0, r7
 800bde0:	4916      	ldr	r1, [pc, #88]	; (800be3c <__pow5mult+0xb4>)
 800bde2:	f7ff ff09 	bl	800bbf8 <__i2b>
 800bde6:	9b01      	ldr	r3, [sp, #4]
 800bde8:	0004      	movs	r4, r0
 800bdea:	6098      	str	r0, [r3, #8]
 800bdec:	2300      	movs	r3, #0
 800bdee:	6003      	str	r3, [r0, #0]
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	421d      	tst	r5, r3
 800bdf4:	d00a      	beq.n	800be0c <__pow5mult+0x84>
 800bdf6:	0031      	movs	r1, r6
 800bdf8:	0022      	movs	r2, r4
 800bdfa:	0038      	movs	r0, r7
 800bdfc:	f7ff ff14 	bl	800bc28 <__multiply>
 800be00:	0031      	movs	r1, r6
 800be02:	9001      	str	r0, [sp, #4]
 800be04:	0038      	movs	r0, r7
 800be06:	f7ff fdfb 	bl	800ba00 <_Bfree>
 800be0a:	9e01      	ldr	r6, [sp, #4]
 800be0c:	106d      	asrs	r5, r5, #1
 800be0e:	d00c      	beq.n	800be2a <__pow5mult+0xa2>
 800be10:	6820      	ldr	r0, [r4, #0]
 800be12:	2800      	cmp	r0, #0
 800be14:	d107      	bne.n	800be26 <__pow5mult+0x9e>
 800be16:	0022      	movs	r2, r4
 800be18:	0021      	movs	r1, r4
 800be1a:	0038      	movs	r0, r7
 800be1c:	f7ff ff04 	bl	800bc28 <__multiply>
 800be20:	2300      	movs	r3, #0
 800be22:	6020      	str	r0, [r4, #0]
 800be24:	6003      	str	r3, [r0, #0]
 800be26:	0004      	movs	r4, r0
 800be28:	e7e2      	b.n	800bdf0 <__pow5mult+0x68>
 800be2a:	0030      	movs	r0, r6
 800be2c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800be2e:	46c0      	nop			; (mov r8, r8)
 800be30:	0800dd68 	.word	0x0800dd68
 800be34:	0800daf9 	.word	0x0800daf9
 800be38:	0800dc1f 	.word	0x0800dc1f
 800be3c:	00000271 	.word	0x00000271

0800be40 <__lshift>:
 800be40:	b5f0      	push	{r4, r5, r6, r7, lr}
 800be42:	000c      	movs	r4, r1
 800be44:	0017      	movs	r7, r2
 800be46:	6923      	ldr	r3, [r4, #16]
 800be48:	1155      	asrs	r5, r2, #5
 800be4a:	b087      	sub	sp, #28
 800be4c:	18eb      	adds	r3, r5, r3
 800be4e:	9302      	str	r3, [sp, #8]
 800be50:	3301      	adds	r3, #1
 800be52:	9301      	str	r3, [sp, #4]
 800be54:	6849      	ldr	r1, [r1, #4]
 800be56:	68a3      	ldr	r3, [r4, #8]
 800be58:	9004      	str	r0, [sp, #16]
 800be5a:	9a01      	ldr	r2, [sp, #4]
 800be5c:	4293      	cmp	r3, r2
 800be5e:	db10      	blt.n	800be82 <__lshift+0x42>
 800be60:	9804      	ldr	r0, [sp, #16]
 800be62:	f7ff fd89 	bl	800b978 <_Balloc>
 800be66:	2300      	movs	r3, #0
 800be68:	0002      	movs	r2, r0
 800be6a:	0006      	movs	r6, r0
 800be6c:	0019      	movs	r1, r3
 800be6e:	3214      	adds	r2, #20
 800be70:	4298      	cmp	r0, r3
 800be72:	d10c      	bne.n	800be8e <__lshift+0x4e>
 800be74:	31df      	adds	r1, #223	; 0xdf
 800be76:	0032      	movs	r2, r6
 800be78:	4b26      	ldr	r3, [pc, #152]	; (800bf14 <__lshift+0xd4>)
 800be7a:	4827      	ldr	r0, [pc, #156]	; (800bf18 <__lshift+0xd8>)
 800be7c:	31ff      	adds	r1, #255	; 0xff
 800be7e:	f7ff f9a5 	bl	800b1cc <__assert_func>
 800be82:	3101      	adds	r1, #1
 800be84:	005b      	lsls	r3, r3, #1
 800be86:	e7e8      	b.n	800be5a <__lshift+0x1a>
 800be88:	0098      	lsls	r0, r3, #2
 800be8a:	5011      	str	r1, [r2, r0]
 800be8c:	3301      	adds	r3, #1
 800be8e:	42ab      	cmp	r3, r5
 800be90:	dbfa      	blt.n	800be88 <__lshift+0x48>
 800be92:	43eb      	mvns	r3, r5
 800be94:	17db      	asrs	r3, r3, #31
 800be96:	401d      	ands	r5, r3
 800be98:	211f      	movs	r1, #31
 800be9a:	0023      	movs	r3, r4
 800be9c:	0038      	movs	r0, r7
 800be9e:	00ad      	lsls	r5, r5, #2
 800bea0:	1955      	adds	r5, r2, r5
 800bea2:	6922      	ldr	r2, [r4, #16]
 800bea4:	3314      	adds	r3, #20
 800bea6:	0092      	lsls	r2, r2, #2
 800bea8:	4008      	ands	r0, r1
 800beaa:	4684      	mov	ip, r0
 800beac:	189a      	adds	r2, r3, r2
 800beae:	420f      	tst	r7, r1
 800beb0:	d02a      	beq.n	800bf08 <__lshift+0xc8>
 800beb2:	3101      	adds	r1, #1
 800beb4:	1a09      	subs	r1, r1, r0
 800beb6:	9105      	str	r1, [sp, #20]
 800beb8:	2100      	movs	r1, #0
 800beba:	9503      	str	r5, [sp, #12]
 800bebc:	4667      	mov	r7, ip
 800bebe:	6818      	ldr	r0, [r3, #0]
 800bec0:	40b8      	lsls	r0, r7
 800bec2:	4308      	orrs	r0, r1
 800bec4:	9903      	ldr	r1, [sp, #12]
 800bec6:	c101      	stmia	r1!, {r0}
 800bec8:	9103      	str	r1, [sp, #12]
 800beca:	9805      	ldr	r0, [sp, #20]
 800becc:	cb02      	ldmia	r3!, {r1}
 800bece:	40c1      	lsrs	r1, r0
 800bed0:	429a      	cmp	r2, r3
 800bed2:	d8f3      	bhi.n	800bebc <__lshift+0x7c>
 800bed4:	0020      	movs	r0, r4
 800bed6:	3015      	adds	r0, #21
 800bed8:	2304      	movs	r3, #4
 800beda:	4282      	cmp	r2, r0
 800bedc:	d304      	bcc.n	800bee8 <__lshift+0xa8>
 800bede:	1b13      	subs	r3, r2, r4
 800bee0:	3b15      	subs	r3, #21
 800bee2:	089b      	lsrs	r3, r3, #2
 800bee4:	3301      	adds	r3, #1
 800bee6:	009b      	lsls	r3, r3, #2
 800bee8:	50e9      	str	r1, [r5, r3]
 800beea:	2900      	cmp	r1, #0
 800beec:	d002      	beq.n	800bef4 <__lshift+0xb4>
 800beee:	9b02      	ldr	r3, [sp, #8]
 800bef0:	3302      	adds	r3, #2
 800bef2:	9301      	str	r3, [sp, #4]
 800bef4:	9b01      	ldr	r3, [sp, #4]
 800bef6:	9804      	ldr	r0, [sp, #16]
 800bef8:	3b01      	subs	r3, #1
 800befa:	0021      	movs	r1, r4
 800befc:	6133      	str	r3, [r6, #16]
 800befe:	f7ff fd7f 	bl	800ba00 <_Bfree>
 800bf02:	0030      	movs	r0, r6
 800bf04:	b007      	add	sp, #28
 800bf06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf08:	cb02      	ldmia	r3!, {r1}
 800bf0a:	c502      	stmia	r5!, {r1}
 800bf0c:	429a      	cmp	r2, r3
 800bf0e:	d8fb      	bhi.n	800bf08 <__lshift+0xc8>
 800bf10:	e7f0      	b.n	800bef4 <__lshift+0xb4>
 800bf12:	46c0      	nop			; (mov r8, r8)
 800bf14:	0800dbae 	.word	0x0800dbae
 800bf18:	0800dc1f 	.word	0x0800dc1f

0800bf1c <__mcmp>:
 800bf1c:	b530      	push	{r4, r5, lr}
 800bf1e:	690b      	ldr	r3, [r1, #16]
 800bf20:	6904      	ldr	r4, [r0, #16]
 800bf22:	0002      	movs	r2, r0
 800bf24:	1ae0      	subs	r0, r4, r3
 800bf26:	429c      	cmp	r4, r3
 800bf28:	d10e      	bne.n	800bf48 <__mcmp+0x2c>
 800bf2a:	3214      	adds	r2, #20
 800bf2c:	009b      	lsls	r3, r3, #2
 800bf2e:	3114      	adds	r1, #20
 800bf30:	0014      	movs	r4, r2
 800bf32:	18c9      	adds	r1, r1, r3
 800bf34:	18d2      	adds	r2, r2, r3
 800bf36:	3a04      	subs	r2, #4
 800bf38:	3904      	subs	r1, #4
 800bf3a:	6815      	ldr	r5, [r2, #0]
 800bf3c:	680b      	ldr	r3, [r1, #0]
 800bf3e:	429d      	cmp	r5, r3
 800bf40:	d003      	beq.n	800bf4a <__mcmp+0x2e>
 800bf42:	2001      	movs	r0, #1
 800bf44:	429d      	cmp	r5, r3
 800bf46:	d303      	bcc.n	800bf50 <__mcmp+0x34>
 800bf48:	bd30      	pop	{r4, r5, pc}
 800bf4a:	4294      	cmp	r4, r2
 800bf4c:	d3f3      	bcc.n	800bf36 <__mcmp+0x1a>
 800bf4e:	e7fb      	b.n	800bf48 <__mcmp+0x2c>
 800bf50:	4240      	negs	r0, r0
 800bf52:	e7f9      	b.n	800bf48 <__mcmp+0x2c>

0800bf54 <__mdiff>:
 800bf54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800bf56:	000e      	movs	r6, r1
 800bf58:	0007      	movs	r7, r0
 800bf5a:	0011      	movs	r1, r2
 800bf5c:	0030      	movs	r0, r6
 800bf5e:	b087      	sub	sp, #28
 800bf60:	0014      	movs	r4, r2
 800bf62:	f7ff ffdb 	bl	800bf1c <__mcmp>
 800bf66:	1e05      	subs	r5, r0, #0
 800bf68:	d110      	bne.n	800bf8c <__mdiff+0x38>
 800bf6a:	0001      	movs	r1, r0
 800bf6c:	0038      	movs	r0, r7
 800bf6e:	f7ff fd03 	bl	800b978 <_Balloc>
 800bf72:	1e02      	subs	r2, r0, #0
 800bf74:	d104      	bne.n	800bf80 <__mdiff+0x2c>
 800bf76:	4b3f      	ldr	r3, [pc, #252]	; (800c074 <__mdiff+0x120>)
 800bf78:	483f      	ldr	r0, [pc, #252]	; (800c078 <__mdiff+0x124>)
 800bf7a:	4940      	ldr	r1, [pc, #256]	; (800c07c <__mdiff+0x128>)
 800bf7c:	f7ff f926 	bl	800b1cc <__assert_func>
 800bf80:	2301      	movs	r3, #1
 800bf82:	6145      	str	r5, [r0, #20]
 800bf84:	6103      	str	r3, [r0, #16]
 800bf86:	0010      	movs	r0, r2
 800bf88:	b007      	add	sp, #28
 800bf8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bf8c:	2301      	movs	r3, #1
 800bf8e:	9301      	str	r3, [sp, #4]
 800bf90:	2800      	cmp	r0, #0
 800bf92:	db04      	blt.n	800bf9e <__mdiff+0x4a>
 800bf94:	0023      	movs	r3, r4
 800bf96:	0034      	movs	r4, r6
 800bf98:	001e      	movs	r6, r3
 800bf9a:	2300      	movs	r3, #0
 800bf9c:	9301      	str	r3, [sp, #4]
 800bf9e:	0038      	movs	r0, r7
 800bfa0:	6861      	ldr	r1, [r4, #4]
 800bfa2:	f7ff fce9 	bl	800b978 <_Balloc>
 800bfa6:	1e02      	subs	r2, r0, #0
 800bfa8:	d103      	bne.n	800bfb2 <__mdiff+0x5e>
 800bfaa:	4b32      	ldr	r3, [pc, #200]	; (800c074 <__mdiff+0x120>)
 800bfac:	4832      	ldr	r0, [pc, #200]	; (800c078 <__mdiff+0x124>)
 800bfae:	4934      	ldr	r1, [pc, #208]	; (800c080 <__mdiff+0x12c>)
 800bfb0:	e7e4      	b.n	800bf7c <__mdiff+0x28>
 800bfb2:	9b01      	ldr	r3, [sp, #4]
 800bfb4:	2700      	movs	r7, #0
 800bfb6:	60c3      	str	r3, [r0, #12]
 800bfb8:	6920      	ldr	r0, [r4, #16]
 800bfba:	3414      	adds	r4, #20
 800bfbc:	0083      	lsls	r3, r0, #2
 800bfbe:	18e3      	adds	r3, r4, r3
 800bfc0:	0021      	movs	r1, r4
 800bfc2:	9401      	str	r4, [sp, #4]
 800bfc4:	0034      	movs	r4, r6
 800bfc6:	9302      	str	r3, [sp, #8]
 800bfc8:	6933      	ldr	r3, [r6, #16]
 800bfca:	3414      	adds	r4, #20
 800bfcc:	009b      	lsls	r3, r3, #2
 800bfce:	18e3      	adds	r3, r4, r3
 800bfd0:	9303      	str	r3, [sp, #12]
 800bfd2:	0013      	movs	r3, r2
 800bfd4:	3314      	adds	r3, #20
 800bfd6:	469c      	mov	ip, r3
 800bfd8:	9305      	str	r3, [sp, #20]
 800bfda:	9104      	str	r1, [sp, #16]
 800bfdc:	9b04      	ldr	r3, [sp, #16]
 800bfde:	cc02      	ldmia	r4!, {r1}
 800bfe0:	cb20      	ldmia	r3!, {r5}
 800bfe2:	9304      	str	r3, [sp, #16]
 800bfe4:	b2ab      	uxth	r3, r5
 800bfe6:	19df      	adds	r7, r3, r7
 800bfe8:	b28b      	uxth	r3, r1
 800bfea:	1afb      	subs	r3, r7, r3
 800bfec:	0c09      	lsrs	r1, r1, #16
 800bfee:	0c2d      	lsrs	r5, r5, #16
 800bff0:	1a6d      	subs	r5, r5, r1
 800bff2:	1419      	asrs	r1, r3, #16
 800bff4:	1869      	adds	r1, r5, r1
 800bff6:	b29b      	uxth	r3, r3
 800bff8:	140f      	asrs	r7, r1, #16
 800bffa:	0409      	lsls	r1, r1, #16
 800bffc:	4319      	orrs	r1, r3
 800bffe:	4663      	mov	r3, ip
 800c000:	c302      	stmia	r3!, {r1}
 800c002:	469c      	mov	ip, r3
 800c004:	9b03      	ldr	r3, [sp, #12]
 800c006:	42a3      	cmp	r3, r4
 800c008:	d8e8      	bhi.n	800bfdc <__mdiff+0x88>
 800c00a:	0031      	movs	r1, r6
 800c00c:	9c03      	ldr	r4, [sp, #12]
 800c00e:	3115      	adds	r1, #21
 800c010:	2304      	movs	r3, #4
 800c012:	428c      	cmp	r4, r1
 800c014:	d304      	bcc.n	800c020 <__mdiff+0xcc>
 800c016:	1ba3      	subs	r3, r4, r6
 800c018:	3b15      	subs	r3, #21
 800c01a:	089b      	lsrs	r3, r3, #2
 800c01c:	3301      	adds	r3, #1
 800c01e:	009b      	lsls	r3, r3, #2
 800c020:	9901      	ldr	r1, [sp, #4]
 800c022:	18cd      	adds	r5, r1, r3
 800c024:	9905      	ldr	r1, [sp, #20]
 800c026:	002e      	movs	r6, r5
 800c028:	18cb      	adds	r3, r1, r3
 800c02a:	469c      	mov	ip, r3
 800c02c:	9902      	ldr	r1, [sp, #8]
 800c02e:	428e      	cmp	r6, r1
 800c030:	d310      	bcc.n	800c054 <__mdiff+0x100>
 800c032:	9e02      	ldr	r6, [sp, #8]
 800c034:	1ee9      	subs	r1, r5, #3
 800c036:	2400      	movs	r4, #0
 800c038:	428e      	cmp	r6, r1
 800c03a:	d304      	bcc.n	800c046 <__mdiff+0xf2>
 800c03c:	0031      	movs	r1, r6
 800c03e:	3103      	adds	r1, #3
 800c040:	1b49      	subs	r1, r1, r5
 800c042:	0889      	lsrs	r1, r1, #2
 800c044:	008c      	lsls	r4, r1, #2
 800c046:	191b      	adds	r3, r3, r4
 800c048:	3b04      	subs	r3, #4
 800c04a:	6819      	ldr	r1, [r3, #0]
 800c04c:	2900      	cmp	r1, #0
 800c04e:	d00f      	beq.n	800c070 <__mdiff+0x11c>
 800c050:	6110      	str	r0, [r2, #16]
 800c052:	e798      	b.n	800bf86 <__mdiff+0x32>
 800c054:	ce02      	ldmia	r6!, {r1}
 800c056:	b28c      	uxth	r4, r1
 800c058:	19e4      	adds	r4, r4, r7
 800c05a:	0c0f      	lsrs	r7, r1, #16
 800c05c:	1421      	asrs	r1, r4, #16
 800c05e:	1879      	adds	r1, r7, r1
 800c060:	b2a4      	uxth	r4, r4
 800c062:	140f      	asrs	r7, r1, #16
 800c064:	0409      	lsls	r1, r1, #16
 800c066:	4321      	orrs	r1, r4
 800c068:	4664      	mov	r4, ip
 800c06a:	c402      	stmia	r4!, {r1}
 800c06c:	46a4      	mov	ip, r4
 800c06e:	e7dd      	b.n	800c02c <__mdiff+0xd8>
 800c070:	3801      	subs	r0, #1
 800c072:	e7e9      	b.n	800c048 <__mdiff+0xf4>
 800c074:	0800dbae 	.word	0x0800dbae
 800c078:	0800dc1f 	.word	0x0800dc1f
 800c07c:	00000237 	.word	0x00000237
 800c080:	00000245 	.word	0x00000245

0800c084 <__ulp>:
 800c084:	2000      	movs	r0, #0
 800c086:	4b0b      	ldr	r3, [pc, #44]	; (800c0b4 <__ulp+0x30>)
 800c088:	4019      	ands	r1, r3
 800c08a:	4b0b      	ldr	r3, [pc, #44]	; (800c0b8 <__ulp+0x34>)
 800c08c:	18c9      	adds	r1, r1, r3
 800c08e:	4281      	cmp	r1, r0
 800c090:	dc06      	bgt.n	800c0a0 <__ulp+0x1c>
 800c092:	4249      	negs	r1, r1
 800c094:	150b      	asrs	r3, r1, #20
 800c096:	2b13      	cmp	r3, #19
 800c098:	dc03      	bgt.n	800c0a2 <__ulp+0x1e>
 800c09a:	2180      	movs	r1, #128	; 0x80
 800c09c:	0309      	lsls	r1, r1, #12
 800c09e:	4119      	asrs	r1, r3
 800c0a0:	4770      	bx	lr
 800c0a2:	3b14      	subs	r3, #20
 800c0a4:	2001      	movs	r0, #1
 800c0a6:	2b1e      	cmp	r3, #30
 800c0a8:	dc02      	bgt.n	800c0b0 <__ulp+0x2c>
 800c0aa:	2080      	movs	r0, #128	; 0x80
 800c0ac:	0600      	lsls	r0, r0, #24
 800c0ae:	40d8      	lsrs	r0, r3
 800c0b0:	2100      	movs	r1, #0
 800c0b2:	e7f5      	b.n	800c0a0 <__ulp+0x1c>
 800c0b4:	7ff00000 	.word	0x7ff00000
 800c0b8:	fcc00000 	.word	0xfcc00000

0800c0bc <__b2d>:
 800c0bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c0be:	0006      	movs	r6, r0
 800c0c0:	6903      	ldr	r3, [r0, #16]
 800c0c2:	3614      	adds	r6, #20
 800c0c4:	009b      	lsls	r3, r3, #2
 800c0c6:	18f3      	adds	r3, r6, r3
 800c0c8:	1f1d      	subs	r5, r3, #4
 800c0ca:	682c      	ldr	r4, [r5, #0]
 800c0cc:	000f      	movs	r7, r1
 800c0ce:	0020      	movs	r0, r4
 800c0d0:	9301      	str	r3, [sp, #4]
 800c0d2:	f7ff fd49 	bl	800bb68 <__hi0bits>
 800c0d6:	2220      	movs	r2, #32
 800c0d8:	1a12      	subs	r2, r2, r0
 800c0da:	603a      	str	r2, [r7, #0]
 800c0dc:	0003      	movs	r3, r0
 800c0de:	4a1c      	ldr	r2, [pc, #112]	; (800c150 <__b2d+0x94>)
 800c0e0:	280a      	cmp	r0, #10
 800c0e2:	dc15      	bgt.n	800c110 <__b2d+0x54>
 800c0e4:	210b      	movs	r1, #11
 800c0e6:	0027      	movs	r7, r4
 800c0e8:	1a09      	subs	r1, r1, r0
 800c0ea:	40cf      	lsrs	r7, r1
 800c0ec:	433a      	orrs	r2, r7
 800c0ee:	468c      	mov	ip, r1
 800c0f0:	0011      	movs	r1, r2
 800c0f2:	2200      	movs	r2, #0
 800c0f4:	42ae      	cmp	r6, r5
 800c0f6:	d202      	bcs.n	800c0fe <__b2d+0x42>
 800c0f8:	9a01      	ldr	r2, [sp, #4]
 800c0fa:	3a08      	subs	r2, #8
 800c0fc:	6812      	ldr	r2, [r2, #0]
 800c0fe:	3315      	adds	r3, #21
 800c100:	409c      	lsls	r4, r3
 800c102:	4663      	mov	r3, ip
 800c104:	0027      	movs	r7, r4
 800c106:	40da      	lsrs	r2, r3
 800c108:	4317      	orrs	r7, r2
 800c10a:	0038      	movs	r0, r7
 800c10c:	b003      	add	sp, #12
 800c10e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c110:	2700      	movs	r7, #0
 800c112:	42ae      	cmp	r6, r5
 800c114:	d202      	bcs.n	800c11c <__b2d+0x60>
 800c116:	9d01      	ldr	r5, [sp, #4]
 800c118:	3d08      	subs	r5, #8
 800c11a:	682f      	ldr	r7, [r5, #0]
 800c11c:	210b      	movs	r1, #11
 800c11e:	4249      	negs	r1, r1
 800c120:	468c      	mov	ip, r1
 800c122:	449c      	add	ip, r3
 800c124:	2b0b      	cmp	r3, #11
 800c126:	d010      	beq.n	800c14a <__b2d+0x8e>
 800c128:	4661      	mov	r1, ip
 800c12a:	2320      	movs	r3, #32
 800c12c:	408c      	lsls	r4, r1
 800c12e:	1a5b      	subs	r3, r3, r1
 800c130:	0039      	movs	r1, r7
 800c132:	40d9      	lsrs	r1, r3
 800c134:	430c      	orrs	r4, r1
 800c136:	4322      	orrs	r2, r4
 800c138:	0011      	movs	r1, r2
 800c13a:	2200      	movs	r2, #0
 800c13c:	42b5      	cmp	r5, r6
 800c13e:	d901      	bls.n	800c144 <__b2d+0x88>
 800c140:	3d04      	subs	r5, #4
 800c142:	682a      	ldr	r2, [r5, #0]
 800c144:	4664      	mov	r4, ip
 800c146:	40a7      	lsls	r7, r4
 800c148:	e7dd      	b.n	800c106 <__b2d+0x4a>
 800c14a:	4322      	orrs	r2, r4
 800c14c:	0011      	movs	r1, r2
 800c14e:	e7dc      	b.n	800c10a <__b2d+0x4e>
 800c150:	3ff00000 	.word	0x3ff00000

0800c154 <__d2b>:
 800c154:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c156:	2101      	movs	r1, #1
 800c158:	0014      	movs	r4, r2
 800c15a:	001d      	movs	r5, r3
 800c15c:	9f08      	ldr	r7, [sp, #32]
 800c15e:	f7ff fc0b 	bl	800b978 <_Balloc>
 800c162:	1e06      	subs	r6, r0, #0
 800c164:	d105      	bne.n	800c172 <__d2b+0x1e>
 800c166:	0032      	movs	r2, r6
 800c168:	4b24      	ldr	r3, [pc, #144]	; (800c1fc <__d2b+0xa8>)
 800c16a:	4825      	ldr	r0, [pc, #148]	; (800c200 <__d2b+0xac>)
 800c16c:	4925      	ldr	r1, [pc, #148]	; (800c204 <__d2b+0xb0>)
 800c16e:	f7ff f82d 	bl	800b1cc <__assert_func>
 800c172:	032b      	lsls	r3, r5, #12
 800c174:	006d      	lsls	r5, r5, #1
 800c176:	0b1b      	lsrs	r3, r3, #12
 800c178:	0d6d      	lsrs	r5, r5, #21
 800c17a:	d125      	bne.n	800c1c8 <__d2b+0x74>
 800c17c:	9301      	str	r3, [sp, #4]
 800c17e:	2c00      	cmp	r4, #0
 800c180:	d028      	beq.n	800c1d4 <__d2b+0x80>
 800c182:	4668      	mov	r0, sp
 800c184:	9400      	str	r4, [sp, #0]
 800c186:	f7ff fd09 	bl	800bb9c <__lo0bits>
 800c18a:	9b01      	ldr	r3, [sp, #4]
 800c18c:	9900      	ldr	r1, [sp, #0]
 800c18e:	2800      	cmp	r0, #0
 800c190:	d01e      	beq.n	800c1d0 <__d2b+0x7c>
 800c192:	2220      	movs	r2, #32
 800c194:	001c      	movs	r4, r3
 800c196:	1a12      	subs	r2, r2, r0
 800c198:	4094      	lsls	r4, r2
 800c19a:	0022      	movs	r2, r4
 800c19c:	40c3      	lsrs	r3, r0
 800c19e:	430a      	orrs	r2, r1
 800c1a0:	6172      	str	r2, [r6, #20]
 800c1a2:	9301      	str	r3, [sp, #4]
 800c1a4:	9c01      	ldr	r4, [sp, #4]
 800c1a6:	61b4      	str	r4, [r6, #24]
 800c1a8:	1e63      	subs	r3, r4, #1
 800c1aa:	419c      	sbcs	r4, r3
 800c1ac:	3401      	adds	r4, #1
 800c1ae:	6134      	str	r4, [r6, #16]
 800c1b0:	2d00      	cmp	r5, #0
 800c1b2:	d017      	beq.n	800c1e4 <__d2b+0x90>
 800c1b4:	2435      	movs	r4, #53	; 0x35
 800c1b6:	4b14      	ldr	r3, [pc, #80]	; (800c208 <__d2b+0xb4>)
 800c1b8:	18ed      	adds	r5, r5, r3
 800c1ba:	182d      	adds	r5, r5, r0
 800c1bc:	603d      	str	r5, [r7, #0]
 800c1be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c1c0:	1a24      	subs	r4, r4, r0
 800c1c2:	601c      	str	r4, [r3, #0]
 800c1c4:	0030      	movs	r0, r6
 800c1c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c1c8:	2280      	movs	r2, #128	; 0x80
 800c1ca:	0352      	lsls	r2, r2, #13
 800c1cc:	4313      	orrs	r3, r2
 800c1ce:	e7d5      	b.n	800c17c <__d2b+0x28>
 800c1d0:	6171      	str	r1, [r6, #20]
 800c1d2:	e7e7      	b.n	800c1a4 <__d2b+0x50>
 800c1d4:	a801      	add	r0, sp, #4
 800c1d6:	f7ff fce1 	bl	800bb9c <__lo0bits>
 800c1da:	9b01      	ldr	r3, [sp, #4]
 800c1dc:	2401      	movs	r4, #1
 800c1de:	6173      	str	r3, [r6, #20]
 800c1e0:	3020      	adds	r0, #32
 800c1e2:	e7e4      	b.n	800c1ae <__d2b+0x5a>
 800c1e4:	4b09      	ldr	r3, [pc, #36]	; (800c20c <__d2b+0xb8>)
 800c1e6:	18c0      	adds	r0, r0, r3
 800c1e8:	4b09      	ldr	r3, [pc, #36]	; (800c210 <__d2b+0xbc>)
 800c1ea:	6038      	str	r0, [r7, #0]
 800c1ec:	18e3      	adds	r3, r4, r3
 800c1ee:	009b      	lsls	r3, r3, #2
 800c1f0:	18f3      	adds	r3, r6, r3
 800c1f2:	6958      	ldr	r0, [r3, #20]
 800c1f4:	f7ff fcb8 	bl	800bb68 <__hi0bits>
 800c1f8:	0164      	lsls	r4, r4, #5
 800c1fa:	e7e0      	b.n	800c1be <__d2b+0x6a>
 800c1fc:	0800dbae 	.word	0x0800dbae
 800c200:	0800dc1f 	.word	0x0800dc1f
 800c204:	0000030f 	.word	0x0000030f
 800c208:	fffffbcd 	.word	0xfffffbcd
 800c20c:	fffffbce 	.word	0xfffffbce
 800c210:	3fffffff 	.word	0x3fffffff

0800c214 <__ratio>:
 800c214:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c216:	b087      	sub	sp, #28
 800c218:	000f      	movs	r7, r1
 800c21a:	a904      	add	r1, sp, #16
 800c21c:	0006      	movs	r6, r0
 800c21e:	f7ff ff4d 	bl	800c0bc <__b2d>
 800c222:	9000      	str	r0, [sp, #0]
 800c224:	9101      	str	r1, [sp, #4]
 800c226:	9c00      	ldr	r4, [sp, #0]
 800c228:	9d01      	ldr	r5, [sp, #4]
 800c22a:	0038      	movs	r0, r7
 800c22c:	a905      	add	r1, sp, #20
 800c22e:	f7ff ff45 	bl	800c0bc <__b2d>
 800c232:	9002      	str	r0, [sp, #8]
 800c234:	9103      	str	r1, [sp, #12]
 800c236:	9a02      	ldr	r2, [sp, #8]
 800c238:	9b03      	ldr	r3, [sp, #12]
 800c23a:	6930      	ldr	r0, [r6, #16]
 800c23c:	6939      	ldr	r1, [r7, #16]
 800c23e:	9e04      	ldr	r6, [sp, #16]
 800c240:	1a40      	subs	r0, r0, r1
 800c242:	9905      	ldr	r1, [sp, #20]
 800c244:	0140      	lsls	r0, r0, #5
 800c246:	1a71      	subs	r1, r6, r1
 800c248:	1841      	adds	r1, r0, r1
 800c24a:	0508      	lsls	r0, r1, #20
 800c24c:	2900      	cmp	r1, #0
 800c24e:	dd07      	ble.n	800c260 <__ratio+0x4c>
 800c250:	9901      	ldr	r1, [sp, #4]
 800c252:	1845      	adds	r5, r0, r1
 800c254:	0020      	movs	r0, r4
 800c256:	0029      	movs	r1, r5
 800c258:	f7f4 fdf8 	bl	8000e4c <__aeabi_ddiv>
 800c25c:	b007      	add	sp, #28
 800c25e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c260:	9903      	ldr	r1, [sp, #12]
 800c262:	1a0b      	subs	r3, r1, r0
 800c264:	e7f6      	b.n	800c254 <__ratio+0x40>

0800c266 <__copybits>:
 800c266:	b570      	push	{r4, r5, r6, lr}
 800c268:	0014      	movs	r4, r2
 800c26a:	0005      	movs	r5, r0
 800c26c:	3901      	subs	r1, #1
 800c26e:	6913      	ldr	r3, [r2, #16]
 800c270:	1149      	asrs	r1, r1, #5
 800c272:	3101      	adds	r1, #1
 800c274:	0089      	lsls	r1, r1, #2
 800c276:	3414      	adds	r4, #20
 800c278:	009b      	lsls	r3, r3, #2
 800c27a:	1841      	adds	r1, r0, r1
 800c27c:	18e3      	adds	r3, r4, r3
 800c27e:	42a3      	cmp	r3, r4
 800c280:	d80d      	bhi.n	800c29e <__copybits+0x38>
 800c282:	0014      	movs	r4, r2
 800c284:	3411      	adds	r4, #17
 800c286:	2500      	movs	r5, #0
 800c288:	429c      	cmp	r4, r3
 800c28a:	d803      	bhi.n	800c294 <__copybits+0x2e>
 800c28c:	1a9b      	subs	r3, r3, r2
 800c28e:	3b11      	subs	r3, #17
 800c290:	089b      	lsrs	r3, r3, #2
 800c292:	009d      	lsls	r5, r3, #2
 800c294:	2300      	movs	r3, #0
 800c296:	1940      	adds	r0, r0, r5
 800c298:	4281      	cmp	r1, r0
 800c29a:	d803      	bhi.n	800c2a4 <__copybits+0x3e>
 800c29c:	bd70      	pop	{r4, r5, r6, pc}
 800c29e:	cc40      	ldmia	r4!, {r6}
 800c2a0:	c540      	stmia	r5!, {r6}
 800c2a2:	e7ec      	b.n	800c27e <__copybits+0x18>
 800c2a4:	c008      	stmia	r0!, {r3}
 800c2a6:	e7f7      	b.n	800c298 <__copybits+0x32>

0800c2a8 <__any_on>:
 800c2a8:	0002      	movs	r2, r0
 800c2aa:	6900      	ldr	r0, [r0, #16]
 800c2ac:	b510      	push	{r4, lr}
 800c2ae:	3214      	adds	r2, #20
 800c2b0:	114b      	asrs	r3, r1, #5
 800c2b2:	4298      	cmp	r0, r3
 800c2b4:	db13      	blt.n	800c2de <__any_on+0x36>
 800c2b6:	dd0c      	ble.n	800c2d2 <__any_on+0x2a>
 800c2b8:	241f      	movs	r4, #31
 800c2ba:	0008      	movs	r0, r1
 800c2bc:	4020      	ands	r0, r4
 800c2be:	4221      	tst	r1, r4
 800c2c0:	d007      	beq.n	800c2d2 <__any_on+0x2a>
 800c2c2:	0099      	lsls	r1, r3, #2
 800c2c4:	588c      	ldr	r4, [r1, r2]
 800c2c6:	0021      	movs	r1, r4
 800c2c8:	40c1      	lsrs	r1, r0
 800c2ca:	4081      	lsls	r1, r0
 800c2cc:	2001      	movs	r0, #1
 800c2ce:	428c      	cmp	r4, r1
 800c2d0:	d104      	bne.n	800c2dc <__any_on+0x34>
 800c2d2:	009b      	lsls	r3, r3, #2
 800c2d4:	18d3      	adds	r3, r2, r3
 800c2d6:	4293      	cmp	r3, r2
 800c2d8:	d803      	bhi.n	800c2e2 <__any_on+0x3a>
 800c2da:	2000      	movs	r0, #0
 800c2dc:	bd10      	pop	{r4, pc}
 800c2de:	0003      	movs	r3, r0
 800c2e0:	e7f7      	b.n	800c2d2 <__any_on+0x2a>
 800c2e2:	3b04      	subs	r3, #4
 800c2e4:	6819      	ldr	r1, [r3, #0]
 800c2e6:	2900      	cmp	r1, #0
 800c2e8:	d0f5      	beq.n	800c2d6 <__any_on+0x2e>
 800c2ea:	2001      	movs	r0, #1
 800c2ec:	e7f6      	b.n	800c2dc <__any_on+0x34>

0800c2ee <_malloc_usable_size_r>:
 800c2ee:	1f0b      	subs	r3, r1, #4
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	1f18      	subs	r0, r3, #4
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	da01      	bge.n	800c2fc <_malloc_usable_size_r+0xe>
 800c2f8:	580b      	ldr	r3, [r1, r0]
 800c2fa:	18c0      	adds	r0, r0, r3
 800c2fc:	4770      	bx	lr

0800c2fe <__ascii_wctomb>:
 800c2fe:	0003      	movs	r3, r0
 800c300:	1e08      	subs	r0, r1, #0
 800c302:	d005      	beq.n	800c310 <__ascii_wctomb+0x12>
 800c304:	2aff      	cmp	r2, #255	; 0xff
 800c306:	d904      	bls.n	800c312 <__ascii_wctomb+0x14>
 800c308:	228a      	movs	r2, #138	; 0x8a
 800c30a:	2001      	movs	r0, #1
 800c30c:	601a      	str	r2, [r3, #0]
 800c30e:	4240      	negs	r0, r0
 800c310:	4770      	bx	lr
 800c312:	2001      	movs	r0, #1
 800c314:	700a      	strb	r2, [r1, #0]
 800c316:	e7fb      	b.n	800c310 <__ascii_wctomb+0x12>

0800c318 <__ssputs_r>:
 800c318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c31a:	b085      	sub	sp, #20
 800c31c:	9301      	str	r3, [sp, #4]
 800c31e:	9203      	str	r2, [sp, #12]
 800c320:	688e      	ldr	r6, [r1, #8]
 800c322:	9a01      	ldr	r2, [sp, #4]
 800c324:	0007      	movs	r7, r0
 800c326:	000c      	movs	r4, r1
 800c328:	680b      	ldr	r3, [r1, #0]
 800c32a:	4296      	cmp	r6, r2
 800c32c:	d831      	bhi.n	800c392 <__ssputs_r+0x7a>
 800c32e:	898a      	ldrh	r2, [r1, #12]
 800c330:	2190      	movs	r1, #144	; 0x90
 800c332:	00c9      	lsls	r1, r1, #3
 800c334:	420a      	tst	r2, r1
 800c336:	d029      	beq.n	800c38c <__ssputs_r+0x74>
 800c338:	2003      	movs	r0, #3
 800c33a:	6921      	ldr	r1, [r4, #16]
 800c33c:	1a5b      	subs	r3, r3, r1
 800c33e:	9302      	str	r3, [sp, #8]
 800c340:	6963      	ldr	r3, [r4, #20]
 800c342:	4343      	muls	r3, r0
 800c344:	0fdd      	lsrs	r5, r3, #31
 800c346:	18ed      	adds	r5, r5, r3
 800c348:	9b01      	ldr	r3, [sp, #4]
 800c34a:	9802      	ldr	r0, [sp, #8]
 800c34c:	3301      	adds	r3, #1
 800c34e:	181b      	adds	r3, r3, r0
 800c350:	106d      	asrs	r5, r5, #1
 800c352:	42ab      	cmp	r3, r5
 800c354:	d900      	bls.n	800c358 <__ssputs_r+0x40>
 800c356:	001d      	movs	r5, r3
 800c358:	0552      	lsls	r2, r2, #21
 800c35a:	d529      	bpl.n	800c3b0 <__ssputs_r+0x98>
 800c35c:	0029      	movs	r1, r5
 800c35e:	0038      	movs	r0, r7
 800c360:	f7fd fd32 	bl	8009dc8 <_malloc_r>
 800c364:	1e06      	subs	r6, r0, #0
 800c366:	d02d      	beq.n	800c3c4 <__ssputs_r+0xac>
 800c368:	9a02      	ldr	r2, [sp, #8]
 800c36a:	6921      	ldr	r1, [r4, #16]
 800c36c:	f7fe ff1f 	bl	800b1ae <memcpy>
 800c370:	89a2      	ldrh	r2, [r4, #12]
 800c372:	4b19      	ldr	r3, [pc, #100]	; (800c3d8 <__ssputs_r+0xc0>)
 800c374:	401a      	ands	r2, r3
 800c376:	2380      	movs	r3, #128	; 0x80
 800c378:	4313      	orrs	r3, r2
 800c37a:	81a3      	strh	r3, [r4, #12]
 800c37c:	9b02      	ldr	r3, [sp, #8]
 800c37e:	6126      	str	r6, [r4, #16]
 800c380:	18f6      	adds	r6, r6, r3
 800c382:	6026      	str	r6, [r4, #0]
 800c384:	6165      	str	r5, [r4, #20]
 800c386:	9e01      	ldr	r6, [sp, #4]
 800c388:	1aed      	subs	r5, r5, r3
 800c38a:	60a5      	str	r5, [r4, #8]
 800c38c:	9b01      	ldr	r3, [sp, #4]
 800c38e:	429e      	cmp	r6, r3
 800c390:	d900      	bls.n	800c394 <__ssputs_r+0x7c>
 800c392:	9e01      	ldr	r6, [sp, #4]
 800c394:	0032      	movs	r2, r6
 800c396:	9903      	ldr	r1, [sp, #12]
 800c398:	6820      	ldr	r0, [r4, #0]
 800c39a:	f000 fb65 	bl	800ca68 <memmove>
 800c39e:	2000      	movs	r0, #0
 800c3a0:	68a3      	ldr	r3, [r4, #8]
 800c3a2:	1b9b      	subs	r3, r3, r6
 800c3a4:	60a3      	str	r3, [r4, #8]
 800c3a6:	6823      	ldr	r3, [r4, #0]
 800c3a8:	199b      	adds	r3, r3, r6
 800c3aa:	6023      	str	r3, [r4, #0]
 800c3ac:	b005      	add	sp, #20
 800c3ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c3b0:	002a      	movs	r2, r5
 800c3b2:	0038      	movs	r0, r7
 800c3b4:	f7fd fda4 	bl	8009f00 <_realloc_r>
 800c3b8:	1e06      	subs	r6, r0, #0
 800c3ba:	d1df      	bne.n	800c37c <__ssputs_r+0x64>
 800c3bc:	0038      	movs	r0, r7
 800c3be:	6921      	ldr	r1, [r4, #16]
 800c3c0:	f7fe ff22 	bl	800b208 <_free_r>
 800c3c4:	230c      	movs	r3, #12
 800c3c6:	2001      	movs	r0, #1
 800c3c8:	603b      	str	r3, [r7, #0]
 800c3ca:	89a2      	ldrh	r2, [r4, #12]
 800c3cc:	3334      	adds	r3, #52	; 0x34
 800c3ce:	4313      	orrs	r3, r2
 800c3d0:	81a3      	strh	r3, [r4, #12]
 800c3d2:	4240      	negs	r0, r0
 800c3d4:	e7ea      	b.n	800c3ac <__ssputs_r+0x94>
 800c3d6:	46c0      	nop			; (mov r8, r8)
 800c3d8:	fffffb7f 	.word	0xfffffb7f

0800c3dc <_svfiprintf_r>:
 800c3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c3de:	b0a1      	sub	sp, #132	; 0x84
 800c3e0:	9003      	str	r0, [sp, #12]
 800c3e2:	001d      	movs	r5, r3
 800c3e4:	898b      	ldrh	r3, [r1, #12]
 800c3e6:	000f      	movs	r7, r1
 800c3e8:	0016      	movs	r6, r2
 800c3ea:	061b      	lsls	r3, r3, #24
 800c3ec:	d511      	bpl.n	800c412 <_svfiprintf_r+0x36>
 800c3ee:	690b      	ldr	r3, [r1, #16]
 800c3f0:	2b00      	cmp	r3, #0
 800c3f2:	d10e      	bne.n	800c412 <_svfiprintf_r+0x36>
 800c3f4:	2140      	movs	r1, #64	; 0x40
 800c3f6:	f7fd fce7 	bl	8009dc8 <_malloc_r>
 800c3fa:	6038      	str	r0, [r7, #0]
 800c3fc:	6138      	str	r0, [r7, #16]
 800c3fe:	2800      	cmp	r0, #0
 800c400:	d105      	bne.n	800c40e <_svfiprintf_r+0x32>
 800c402:	230c      	movs	r3, #12
 800c404:	9a03      	ldr	r2, [sp, #12]
 800c406:	3801      	subs	r0, #1
 800c408:	6013      	str	r3, [r2, #0]
 800c40a:	b021      	add	sp, #132	; 0x84
 800c40c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c40e:	2340      	movs	r3, #64	; 0x40
 800c410:	617b      	str	r3, [r7, #20]
 800c412:	2300      	movs	r3, #0
 800c414:	ac08      	add	r4, sp, #32
 800c416:	6163      	str	r3, [r4, #20]
 800c418:	3320      	adds	r3, #32
 800c41a:	7663      	strb	r3, [r4, #25]
 800c41c:	3310      	adds	r3, #16
 800c41e:	76a3      	strb	r3, [r4, #26]
 800c420:	9507      	str	r5, [sp, #28]
 800c422:	0035      	movs	r5, r6
 800c424:	782b      	ldrb	r3, [r5, #0]
 800c426:	2b00      	cmp	r3, #0
 800c428:	d001      	beq.n	800c42e <_svfiprintf_r+0x52>
 800c42a:	2b25      	cmp	r3, #37	; 0x25
 800c42c:	d148      	bne.n	800c4c0 <_svfiprintf_r+0xe4>
 800c42e:	1bab      	subs	r3, r5, r6
 800c430:	9305      	str	r3, [sp, #20]
 800c432:	42b5      	cmp	r5, r6
 800c434:	d00b      	beq.n	800c44e <_svfiprintf_r+0x72>
 800c436:	0032      	movs	r2, r6
 800c438:	0039      	movs	r1, r7
 800c43a:	9803      	ldr	r0, [sp, #12]
 800c43c:	f7ff ff6c 	bl	800c318 <__ssputs_r>
 800c440:	3001      	adds	r0, #1
 800c442:	d100      	bne.n	800c446 <_svfiprintf_r+0x6a>
 800c444:	e0af      	b.n	800c5a6 <_svfiprintf_r+0x1ca>
 800c446:	6963      	ldr	r3, [r4, #20]
 800c448:	9a05      	ldr	r2, [sp, #20]
 800c44a:	189b      	adds	r3, r3, r2
 800c44c:	6163      	str	r3, [r4, #20]
 800c44e:	782b      	ldrb	r3, [r5, #0]
 800c450:	2b00      	cmp	r3, #0
 800c452:	d100      	bne.n	800c456 <_svfiprintf_r+0x7a>
 800c454:	e0a7      	b.n	800c5a6 <_svfiprintf_r+0x1ca>
 800c456:	2201      	movs	r2, #1
 800c458:	2300      	movs	r3, #0
 800c45a:	4252      	negs	r2, r2
 800c45c:	6062      	str	r2, [r4, #4]
 800c45e:	a904      	add	r1, sp, #16
 800c460:	3254      	adds	r2, #84	; 0x54
 800c462:	1852      	adds	r2, r2, r1
 800c464:	1c6e      	adds	r6, r5, #1
 800c466:	6023      	str	r3, [r4, #0]
 800c468:	60e3      	str	r3, [r4, #12]
 800c46a:	60a3      	str	r3, [r4, #8]
 800c46c:	7013      	strb	r3, [r2, #0]
 800c46e:	65a3      	str	r3, [r4, #88]	; 0x58
 800c470:	4b55      	ldr	r3, [pc, #340]	; (800c5c8 <_svfiprintf_r+0x1ec>)
 800c472:	2205      	movs	r2, #5
 800c474:	0018      	movs	r0, r3
 800c476:	7831      	ldrb	r1, [r6, #0]
 800c478:	9305      	str	r3, [sp, #20]
 800c47a:	f000 fb08 	bl	800ca8e <memchr>
 800c47e:	1c75      	adds	r5, r6, #1
 800c480:	2800      	cmp	r0, #0
 800c482:	d11f      	bne.n	800c4c4 <_svfiprintf_r+0xe8>
 800c484:	6822      	ldr	r2, [r4, #0]
 800c486:	06d3      	lsls	r3, r2, #27
 800c488:	d504      	bpl.n	800c494 <_svfiprintf_r+0xb8>
 800c48a:	2353      	movs	r3, #83	; 0x53
 800c48c:	a904      	add	r1, sp, #16
 800c48e:	185b      	adds	r3, r3, r1
 800c490:	2120      	movs	r1, #32
 800c492:	7019      	strb	r1, [r3, #0]
 800c494:	0713      	lsls	r3, r2, #28
 800c496:	d504      	bpl.n	800c4a2 <_svfiprintf_r+0xc6>
 800c498:	2353      	movs	r3, #83	; 0x53
 800c49a:	a904      	add	r1, sp, #16
 800c49c:	185b      	adds	r3, r3, r1
 800c49e:	212b      	movs	r1, #43	; 0x2b
 800c4a0:	7019      	strb	r1, [r3, #0]
 800c4a2:	7833      	ldrb	r3, [r6, #0]
 800c4a4:	2b2a      	cmp	r3, #42	; 0x2a
 800c4a6:	d016      	beq.n	800c4d6 <_svfiprintf_r+0xfa>
 800c4a8:	0035      	movs	r5, r6
 800c4aa:	2100      	movs	r1, #0
 800c4ac:	200a      	movs	r0, #10
 800c4ae:	68e3      	ldr	r3, [r4, #12]
 800c4b0:	782a      	ldrb	r2, [r5, #0]
 800c4b2:	1c6e      	adds	r6, r5, #1
 800c4b4:	3a30      	subs	r2, #48	; 0x30
 800c4b6:	2a09      	cmp	r2, #9
 800c4b8:	d94e      	bls.n	800c558 <_svfiprintf_r+0x17c>
 800c4ba:	2900      	cmp	r1, #0
 800c4bc:	d111      	bne.n	800c4e2 <_svfiprintf_r+0x106>
 800c4be:	e017      	b.n	800c4f0 <_svfiprintf_r+0x114>
 800c4c0:	3501      	adds	r5, #1
 800c4c2:	e7af      	b.n	800c424 <_svfiprintf_r+0x48>
 800c4c4:	9b05      	ldr	r3, [sp, #20]
 800c4c6:	6822      	ldr	r2, [r4, #0]
 800c4c8:	1ac0      	subs	r0, r0, r3
 800c4ca:	2301      	movs	r3, #1
 800c4cc:	4083      	lsls	r3, r0
 800c4ce:	4313      	orrs	r3, r2
 800c4d0:	002e      	movs	r6, r5
 800c4d2:	6023      	str	r3, [r4, #0]
 800c4d4:	e7cc      	b.n	800c470 <_svfiprintf_r+0x94>
 800c4d6:	9b07      	ldr	r3, [sp, #28]
 800c4d8:	1d19      	adds	r1, r3, #4
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	9107      	str	r1, [sp, #28]
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	db01      	blt.n	800c4e6 <_svfiprintf_r+0x10a>
 800c4e2:	930b      	str	r3, [sp, #44]	; 0x2c
 800c4e4:	e004      	b.n	800c4f0 <_svfiprintf_r+0x114>
 800c4e6:	425b      	negs	r3, r3
 800c4e8:	60e3      	str	r3, [r4, #12]
 800c4ea:	2302      	movs	r3, #2
 800c4ec:	4313      	orrs	r3, r2
 800c4ee:	6023      	str	r3, [r4, #0]
 800c4f0:	782b      	ldrb	r3, [r5, #0]
 800c4f2:	2b2e      	cmp	r3, #46	; 0x2e
 800c4f4:	d10a      	bne.n	800c50c <_svfiprintf_r+0x130>
 800c4f6:	786b      	ldrb	r3, [r5, #1]
 800c4f8:	2b2a      	cmp	r3, #42	; 0x2a
 800c4fa:	d135      	bne.n	800c568 <_svfiprintf_r+0x18c>
 800c4fc:	9b07      	ldr	r3, [sp, #28]
 800c4fe:	3502      	adds	r5, #2
 800c500:	1d1a      	adds	r2, r3, #4
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	9207      	str	r2, [sp, #28]
 800c506:	2b00      	cmp	r3, #0
 800c508:	db2b      	blt.n	800c562 <_svfiprintf_r+0x186>
 800c50a:	9309      	str	r3, [sp, #36]	; 0x24
 800c50c:	4e2f      	ldr	r6, [pc, #188]	; (800c5cc <_svfiprintf_r+0x1f0>)
 800c50e:	2203      	movs	r2, #3
 800c510:	0030      	movs	r0, r6
 800c512:	7829      	ldrb	r1, [r5, #0]
 800c514:	f000 fabb 	bl	800ca8e <memchr>
 800c518:	2800      	cmp	r0, #0
 800c51a:	d006      	beq.n	800c52a <_svfiprintf_r+0x14e>
 800c51c:	2340      	movs	r3, #64	; 0x40
 800c51e:	1b80      	subs	r0, r0, r6
 800c520:	4083      	lsls	r3, r0
 800c522:	6822      	ldr	r2, [r4, #0]
 800c524:	3501      	adds	r5, #1
 800c526:	4313      	orrs	r3, r2
 800c528:	6023      	str	r3, [r4, #0]
 800c52a:	7829      	ldrb	r1, [r5, #0]
 800c52c:	2206      	movs	r2, #6
 800c52e:	4828      	ldr	r0, [pc, #160]	; (800c5d0 <_svfiprintf_r+0x1f4>)
 800c530:	1c6e      	adds	r6, r5, #1
 800c532:	7621      	strb	r1, [r4, #24]
 800c534:	f000 faab 	bl	800ca8e <memchr>
 800c538:	2800      	cmp	r0, #0
 800c53a:	d03c      	beq.n	800c5b6 <_svfiprintf_r+0x1da>
 800c53c:	4b25      	ldr	r3, [pc, #148]	; (800c5d4 <_svfiprintf_r+0x1f8>)
 800c53e:	2b00      	cmp	r3, #0
 800c540:	d125      	bne.n	800c58e <_svfiprintf_r+0x1b2>
 800c542:	2207      	movs	r2, #7
 800c544:	9b07      	ldr	r3, [sp, #28]
 800c546:	3307      	adds	r3, #7
 800c548:	4393      	bics	r3, r2
 800c54a:	3308      	adds	r3, #8
 800c54c:	9307      	str	r3, [sp, #28]
 800c54e:	6963      	ldr	r3, [r4, #20]
 800c550:	9a04      	ldr	r2, [sp, #16]
 800c552:	189b      	adds	r3, r3, r2
 800c554:	6163      	str	r3, [r4, #20]
 800c556:	e764      	b.n	800c422 <_svfiprintf_r+0x46>
 800c558:	4343      	muls	r3, r0
 800c55a:	0035      	movs	r5, r6
 800c55c:	2101      	movs	r1, #1
 800c55e:	189b      	adds	r3, r3, r2
 800c560:	e7a6      	b.n	800c4b0 <_svfiprintf_r+0xd4>
 800c562:	2301      	movs	r3, #1
 800c564:	425b      	negs	r3, r3
 800c566:	e7d0      	b.n	800c50a <_svfiprintf_r+0x12e>
 800c568:	2300      	movs	r3, #0
 800c56a:	200a      	movs	r0, #10
 800c56c:	001a      	movs	r2, r3
 800c56e:	3501      	adds	r5, #1
 800c570:	6063      	str	r3, [r4, #4]
 800c572:	7829      	ldrb	r1, [r5, #0]
 800c574:	1c6e      	adds	r6, r5, #1
 800c576:	3930      	subs	r1, #48	; 0x30
 800c578:	2909      	cmp	r1, #9
 800c57a:	d903      	bls.n	800c584 <_svfiprintf_r+0x1a8>
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d0c5      	beq.n	800c50c <_svfiprintf_r+0x130>
 800c580:	9209      	str	r2, [sp, #36]	; 0x24
 800c582:	e7c3      	b.n	800c50c <_svfiprintf_r+0x130>
 800c584:	4342      	muls	r2, r0
 800c586:	0035      	movs	r5, r6
 800c588:	2301      	movs	r3, #1
 800c58a:	1852      	adds	r2, r2, r1
 800c58c:	e7f1      	b.n	800c572 <_svfiprintf_r+0x196>
 800c58e:	aa07      	add	r2, sp, #28
 800c590:	9200      	str	r2, [sp, #0]
 800c592:	0021      	movs	r1, r4
 800c594:	003a      	movs	r2, r7
 800c596:	4b10      	ldr	r3, [pc, #64]	; (800c5d8 <_svfiprintf_r+0x1fc>)
 800c598:	9803      	ldr	r0, [sp, #12]
 800c59a:	e000      	b.n	800c59e <_svfiprintf_r+0x1c2>
 800c59c:	bf00      	nop
 800c59e:	9004      	str	r0, [sp, #16]
 800c5a0:	9b04      	ldr	r3, [sp, #16]
 800c5a2:	3301      	adds	r3, #1
 800c5a4:	d1d3      	bne.n	800c54e <_svfiprintf_r+0x172>
 800c5a6:	89bb      	ldrh	r3, [r7, #12]
 800c5a8:	980d      	ldr	r0, [sp, #52]	; 0x34
 800c5aa:	065b      	lsls	r3, r3, #25
 800c5ac:	d400      	bmi.n	800c5b0 <_svfiprintf_r+0x1d4>
 800c5ae:	e72c      	b.n	800c40a <_svfiprintf_r+0x2e>
 800c5b0:	2001      	movs	r0, #1
 800c5b2:	4240      	negs	r0, r0
 800c5b4:	e729      	b.n	800c40a <_svfiprintf_r+0x2e>
 800c5b6:	aa07      	add	r2, sp, #28
 800c5b8:	9200      	str	r2, [sp, #0]
 800c5ba:	0021      	movs	r1, r4
 800c5bc:	003a      	movs	r2, r7
 800c5be:	4b06      	ldr	r3, [pc, #24]	; (800c5d8 <_svfiprintf_r+0x1fc>)
 800c5c0:	9803      	ldr	r0, [sp, #12]
 800c5c2:	f000 f87b 	bl	800c6bc <_printf_i>
 800c5c6:	e7ea      	b.n	800c59e <_svfiprintf_r+0x1c2>
 800c5c8:	0800dd74 	.word	0x0800dd74
 800c5cc:	0800dd7a 	.word	0x0800dd7a
 800c5d0:	0800dd7e 	.word	0x0800dd7e
 800c5d4:	00000000 	.word	0x00000000
 800c5d8:	0800c319 	.word	0x0800c319

0800c5dc <_printf_common>:
 800c5dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c5de:	0016      	movs	r6, r2
 800c5e0:	9301      	str	r3, [sp, #4]
 800c5e2:	688a      	ldr	r2, [r1, #8]
 800c5e4:	690b      	ldr	r3, [r1, #16]
 800c5e6:	000c      	movs	r4, r1
 800c5e8:	9000      	str	r0, [sp, #0]
 800c5ea:	4293      	cmp	r3, r2
 800c5ec:	da00      	bge.n	800c5f0 <_printf_common+0x14>
 800c5ee:	0013      	movs	r3, r2
 800c5f0:	0022      	movs	r2, r4
 800c5f2:	6033      	str	r3, [r6, #0]
 800c5f4:	3243      	adds	r2, #67	; 0x43
 800c5f6:	7812      	ldrb	r2, [r2, #0]
 800c5f8:	2a00      	cmp	r2, #0
 800c5fa:	d001      	beq.n	800c600 <_printf_common+0x24>
 800c5fc:	3301      	adds	r3, #1
 800c5fe:	6033      	str	r3, [r6, #0]
 800c600:	6823      	ldr	r3, [r4, #0]
 800c602:	069b      	lsls	r3, r3, #26
 800c604:	d502      	bpl.n	800c60c <_printf_common+0x30>
 800c606:	6833      	ldr	r3, [r6, #0]
 800c608:	3302      	adds	r3, #2
 800c60a:	6033      	str	r3, [r6, #0]
 800c60c:	6822      	ldr	r2, [r4, #0]
 800c60e:	2306      	movs	r3, #6
 800c610:	0015      	movs	r5, r2
 800c612:	401d      	ands	r5, r3
 800c614:	421a      	tst	r2, r3
 800c616:	d027      	beq.n	800c668 <_printf_common+0x8c>
 800c618:	0023      	movs	r3, r4
 800c61a:	3343      	adds	r3, #67	; 0x43
 800c61c:	781b      	ldrb	r3, [r3, #0]
 800c61e:	1e5a      	subs	r2, r3, #1
 800c620:	4193      	sbcs	r3, r2
 800c622:	6822      	ldr	r2, [r4, #0]
 800c624:	0692      	lsls	r2, r2, #26
 800c626:	d430      	bmi.n	800c68a <_printf_common+0xae>
 800c628:	0022      	movs	r2, r4
 800c62a:	9901      	ldr	r1, [sp, #4]
 800c62c:	9800      	ldr	r0, [sp, #0]
 800c62e:	9d08      	ldr	r5, [sp, #32]
 800c630:	3243      	adds	r2, #67	; 0x43
 800c632:	47a8      	blx	r5
 800c634:	3001      	adds	r0, #1
 800c636:	d025      	beq.n	800c684 <_printf_common+0xa8>
 800c638:	2206      	movs	r2, #6
 800c63a:	6823      	ldr	r3, [r4, #0]
 800c63c:	2500      	movs	r5, #0
 800c63e:	4013      	ands	r3, r2
 800c640:	2b04      	cmp	r3, #4
 800c642:	d105      	bne.n	800c650 <_printf_common+0x74>
 800c644:	6833      	ldr	r3, [r6, #0]
 800c646:	68e5      	ldr	r5, [r4, #12]
 800c648:	1aed      	subs	r5, r5, r3
 800c64a:	43eb      	mvns	r3, r5
 800c64c:	17db      	asrs	r3, r3, #31
 800c64e:	401d      	ands	r5, r3
 800c650:	68a3      	ldr	r3, [r4, #8]
 800c652:	6922      	ldr	r2, [r4, #16]
 800c654:	4293      	cmp	r3, r2
 800c656:	dd01      	ble.n	800c65c <_printf_common+0x80>
 800c658:	1a9b      	subs	r3, r3, r2
 800c65a:	18ed      	adds	r5, r5, r3
 800c65c:	2600      	movs	r6, #0
 800c65e:	42b5      	cmp	r5, r6
 800c660:	d120      	bne.n	800c6a4 <_printf_common+0xc8>
 800c662:	2000      	movs	r0, #0
 800c664:	e010      	b.n	800c688 <_printf_common+0xac>
 800c666:	3501      	adds	r5, #1
 800c668:	68e3      	ldr	r3, [r4, #12]
 800c66a:	6832      	ldr	r2, [r6, #0]
 800c66c:	1a9b      	subs	r3, r3, r2
 800c66e:	42ab      	cmp	r3, r5
 800c670:	ddd2      	ble.n	800c618 <_printf_common+0x3c>
 800c672:	0022      	movs	r2, r4
 800c674:	2301      	movs	r3, #1
 800c676:	9901      	ldr	r1, [sp, #4]
 800c678:	9800      	ldr	r0, [sp, #0]
 800c67a:	9f08      	ldr	r7, [sp, #32]
 800c67c:	3219      	adds	r2, #25
 800c67e:	47b8      	blx	r7
 800c680:	3001      	adds	r0, #1
 800c682:	d1f0      	bne.n	800c666 <_printf_common+0x8a>
 800c684:	2001      	movs	r0, #1
 800c686:	4240      	negs	r0, r0
 800c688:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c68a:	2030      	movs	r0, #48	; 0x30
 800c68c:	18e1      	adds	r1, r4, r3
 800c68e:	3143      	adds	r1, #67	; 0x43
 800c690:	7008      	strb	r0, [r1, #0]
 800c692:	0021      	movs	r1, r4
 800c694:	1c5a      	adds	r2, r3, #1
 800c696:	3145      	adds	r1, #69	; 0x45
 800c698:	7809      	ldrb	r1, [r1, #0]
 800c69a:	18a2      	adds	r2, r4, r2
 800c69c:	3243      	adds	r2, #67	; 0x43
 800c69e:	3302      	adds	r3, #2
 800c6a0:	7011      	strb	r1, [r2, #0]
 800c6a2:	e7c1      	b.n	800c628 <_printf_common+0x4c>
 800c6a4:	0022      	movs	r2, r4
 800c6a6:	2301      	movs	r3, #1
 800c6a8:	9901      	ldr	r1, [sp, #4]
 800c6aa:	9800      	ldr	r0, [sp, #0]
 800c6ac:	9f08      	ldr	r7, [sp, #32]
 800c6ae:	321a      	adds	r2, #26
 800c6b0:	47b8      	blx	r7
 800c6b2:	3001      	adds	r0, #1
 800c6b4:	d0e6      	beq.n	800c684 <_printf_common+0xa8>
 800c6b6:	3601      	adds	r6, #1
 800c6b8:	e7d1      	b.n	800c65e <_printf_common+0x82>
	...

0800c6bc <_printf_i>:
 800c6bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6be:	b08b      	sub	sp, #44	; 0x2c
 800c6c0:	9206      	str	r2, [sp, #24]
 800c6c2:	000a      	movs	r2, r1
 800c6c4:	3243      	adds	r2, #67	; 0x43
 800c6c6:	9307      	str	r3, [sp, #28]
 800c6c8:	9005      	str	r0, [sp, #20]
 800c6ca:	9204      	str	r2, [sp, #16]
 800c6cc:	7e0a      	ldrb	r2, [r1, #24]
 800c6ce:	000c      	movs	r4, r1
 800c6d0:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c6d2:	2a78      	cmp	r2, #120	; 0x78
 800c6d4:	d809      	bhi.n	800c6ea <_printf_i+0x2e>
 800c6d6:	2a62      	cmp	r2, #98	; 0x62
 800c6d8:	d80b      	bhi.n	800c6f2 <_printf_i+0x36>
 800c6da:	2a00      	cmp	r2, #0
 800c6dc:	d100      	bne.n	800c6e0 <_printf_i+0x24>
 800c6de:	e0be      	b.n	800c85e <_printf_i+0x1a2>
 800c6e0:	497c      	ldr	r1, [pc, #496]	; (800c8d4 <_printf_i+0x218>)
 800c6e2:	9103      	str	r1, [sp, #12]
 800c6e4:	2a58      	cmp	r2, #88	; 0x58
 800c6e6:	d100      	bne.n	800c6ea <_printf_i+0x2e>
 800c6e8:	e093      	b.n	800c812 <_printf_i+0x156>
 800c6ea:	0026      	movs	r6, r4
 800c6ec:	3642      	adds	r6, #66	; 0x42
 800c6ee:	7032      	strb	r2, [r6, #0]
 800c6f0:	e022      	b.n	800c738 <_printf_i+0x7c>
 800c6f2:	0010      	movs	r0, r2
 800c6f4:	3863      	subs	r0, #99	; 0x63
 800c6f6:	2815      	cmp	r0, #21
 800c6f8:	d8f7      	bhi.n	800c6ea <_printf_i+0x2e>
 800c6fa:	f7f3 fd17 	bl	800012c <__gnu_thumb1_case_shi>
 800c6fe:	0016      	.short	0x0016
 800c700:	fff6001f 	.word	0xfff6001f
 800c704:	fff6fff6 	.word	0xfff6fff6
 800c708:	001ffff6 	.word	0x001ffff6
 800c70c:	fff6fff6 	.word	0xfff6fff6
 800c710:	fff6fff6 	.word	0xfff6fff6
 800c714:	003600a3 	.word	0x003600a3
 800c718:	fff60083 	.word	0xfff60083
 800c71c:	00b4fff6 	.word	0x00b4fff6
 800c720:	0036fff6 	.word	0x0036fff6
 800c724:	fff6fff6 	.word	0xfff6fff6
 800c728:	0087      	.short	0x0087
 800c72a:	0026      	movs	r6, r4
 800c72c:	681a      	ldr	r2, [r3, #0]
 800c72e:	3642      	adds	r6, #66	; 0x42
 800c730:	1d11      	adds	r1, r2, #4
 800c732:	6019      	str	r1, [r3, #0]
 800c734:	6813      	ldr	r3, [r2, #0]
 800c736:	7033      	strb	r3, [r6, #0]
 800c738:	2301      	movs	r3, #1
 800c73a:	e0a2      	b.n	800c882 <_printf_i+0x1c6>
 800c73c:	6818      	ldr	r0, [r3, #0]
 800c73e:	6809      	ldr	r1, [r1, #0]
 800c740:	1d02      	adds	r2, r0, #4
 800c742:	060d      	lsls	r5, r1, #24
 800c744:	d50b      	bpl.n	800c75e <_printf_i+0xa2>
 800c746:	6805      	ldr	r5, [r0, #0]
 800c748:	601a      	str	r2, [r3, #0]
 800c74a:	2d00      	cmp	r5, #0
 800c74c:	da03      	bge.n	800c756 <_printf_i+0x9a>
 800c74e:	232d      	movs	r3, #45	; 0x2d
 800c750:	9a04      	ldr	r2, [sp, #16]
 800c752:	426d      	negs	r5, r5
 800c754:	7013      	strb	r3, [r2, #0]
 800c756:	4b5f      	ldr	r3, [pc, #380]	; (800c8d4 <_printf_i+0x218>)
 800c758:	270a      	movs	r7, #10
 800c75a:	9303      	str	r3, [sp, #12]
 800c75c:	e01b      	b.n	800c796 <_printf_i+0xda>
 800c75e:	6805      	ldr	r5, [r0, #0]
 800c760:	601a      	str	r2, [r3, #0]
 800c762:	0649      	lsls	r1, r1, #25
 800c764:	d5f1      	bpl.n	800c74a <_printf_i+0x8e>
 800c766:	b22d      	sxth	r5, r5
 800c768:	e7ef      	b.n	800c74a <_printf_i+0x8e>
 800c76a:	680d      	ldr	r5, [r1, #0]
 800c76c:	6819      	ldr	r1, [r3, #0]
 800c76e:	1d08      	adds	r0, r1, #4
 800c770:	6018      	str	r0, [r3, #0]
 800c772:	062e      	lsls	r6, r5, #24
 800c774:	d501      	bpl.n	800c77a <_printf_i+0xbe>
 800c776:	680d      	ldr	r5, [r1, #0]
 800c778:	e003      	b.n	800c782 <_printf_i+0xc6>
 800c77a:	066d      	lsls	r5, r5, #25
 800c77c:	d5fb      	bpl.n	800c776 <_printf_i+0xba>
 800c77e:	680d      	ldr	r5, [r1, #0]
 800c780:	b2ad      	uxth	r5, r5
 800c782:	4b54      	ldr	r3, [pc, #336]	; (800c8d4 <_printf_i+0x218>)
 800c784:	2708      	movs	r7, #8
 800c786:	9303      	str	r3, [sp, #12]
 800c788:	2a6f      	cmp	r2, #111	; 0x6f
 800c78a:	d000      	beq.n	800c78e <_printf_i+0xd2>
 800c78c:	3702      	adds	r7, #2
 800c78e:	0023      	movs	r3, r4
 800c790:	2200      	movs	r2, #0
 800c792:	3343      	adds	r3, #67	; 0x43
 800c794:	701a      	strb	r2, [r3, #0]
 800c796:	6863      	ldr	r3, [r4, #4]
 800c798:	60a3      	str	r3, [r4, #8]
 800c79a:	2b00      	cmp	r3, #0
 800c79c:	db03      	blt.n	800c7a6 <_printf_i+0xea>
 800c79e:	2104      	movs	r1, #4
 800c7a0:	6822      	ldr	r2, [r4, #0]
 800c7a2:	438a      	bics	r2, r1
 800c7a4:	6022      	str	r2, [r4, #0]
 800c7a6:	2d00      	cmp	r5, #0
 800c7a8:	d102      	bne.n	800c7b0 <_printf_i+0xf4>
 800c7aa:	9e04      	ldr	r6, [sp, #16]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d00c      	beq.n	800c7ca <_printf_i+0x10e>
 800c7b0:	9e04      	ldr	r6, [sp, #16]
 800c7b2:	0028      	movs	r0, r5
 800c7b4:	0039      	movs	r1, r7
 800c7b6:	f7f3 fd49 	bl	800024c <__aeabi_uidivmod>
 800c7ba:	9b03      	ldr	r3, [sp, #12]
 800c7bc:	3e01      	subs	r6, #1
 800c7be:	5c5b      	ldrb	r3, [r3, r1]
 800c7c0:	7033      	strb	r3, [r6, #0]
 800c7c2:	002b      	movs	r3, r5
 800c7c4:	0005      	movs	r5, r0
 800c7c6:	429f      	cmp	r7, r3
 800c7c8:	d9f3      	bls.n	800c7b2 <_printf_i+0xf6>
 800c7ca:	2f08      	cmp	r7, #8
 800c7cc:	d109      	bne.n	800c7e2 <_printf_i+0x126>
 800c7ce:	6823      	ldr	r3, [r4, #0]
 800c7d0:	07db      	lsls	r3, r3, #31
 800c7d2:	d506      	bpl.n	800c7e2 <_printf_i+0x126>
 800c7d4:	6862      	ldr	r2, [r4, #4]
 800c7d6:	6923      	ldr	r3, [r4, #16]
 800c7d8:	429a      	cmp	r2, r3
 800c7da:	dc02      	bgt.n	800c7e2 <_printf_i+0x126>
 800c7dc:	2330      	movs	r3, #48	; 0x30
 800c7de:	3e01      	subs	r6, #1
 800c7e0:	7033      	strb	r3, [r6, #0]
 800c7e2:	9b04      	ldr	r3, [sp, #16]
 800c7e4:	1b9b      	subs	r3, r3, r6
 800c7e6:	6123      	str	r3, [r4, #16]
 800c7e8:	9b07      	ldr	r3, [sp, #28]
 800c7ea:	0021      	movs	r1, r4
 800c7ec:	9300      	str	r3, [sp, #0]
 800c7ee:	9805      	ldr	r0, [sp, #20]
 800c7f0:	9b06      	ldr	r3, [sp, #24]
 800c7f2:	aa09      	add	r2, sp, #36	; 0x24
 800c7f4:	f7ff fef2 	bl	800c5dc <_printf_common>
 800c7f8:	3001      	adds	r0, #1
 800c7fa:	d147      	bne.n	800c88c <_printf_i+0x1d0>
 800c7fc:	2001      	movs	r0, #1
 800c7fe:	4240      	negs	r0, r0
 800c800:	b00b      	add	sp, #44	; 0x2c
 800c802:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c804:	2220      	movs	r2, #32
 800c806:	6809      	ldr	r1, [r1, #0]
 800c808:	430a      	orrs	r2, r1
 800c80a:	6022      	str	r2, [r4, #0]
 800c80c:	2278      	movs	r2, #120	; 0x78
 800c80e:	4932      	ldr	r1, [pc, #200]	; (800c8d8 <_printf_i+0x21c>)
 800c810:	9103      	str	r1, [sp, #12]
 800c812:	0021      	movs	r1, r4
 800c814:	3145      	adds	r1, #69	; 0x45
 800c816:	700a      	strb	r2, [r1, #0]
 800c818:	6819      	ldr	r1, [r3, #0]
 800c81a:	6822      	ldr	r2, [r4, #0]
 800c81c:	c920      	ldmia	r1!, {r5}
 800c81e:	0610      	lsls	r0, r2, #24
 800c820:	d402      	bmi.n	800c828 <_printf_i+0x16c>
 800c822:	0650      	lsls	r0, r2, #25
 800c824:	d500      	bpl.n	800c828 <_printf_i+0x16c>
 800c826:	b2ad      	uxth	r5, r5
 800c828:	6019      	str	r1, [r3, #0]
 800c82a:	07d3      	lsls	r3, r2, #31
 800c82c:	d502      	bpl.n	800c834 <_printf_i+0x178>
 800c82e:	2320      	movs	r3, #32
 800c830:	4313      	orrs	r3, r2
 800c832:	6023      	str	r3, [r4, #0]
 800c834:	2710      	movs	r7, #16
 800c836:	2d00      	cmp	r5, #0
 800c838:	d1a9      	bne.n	800c78e <_printf_i+0xd2>
 800c83a:	2220      	movs	r2, #32
 800c83c:	6823      	ldr	r3, [r4, #0]
 800c83e:	4393      	bics	r3, r2
 800c840:	6023      	str	r3, [r4, #0]
 800c842:	e7a4      	b.n	800c78e <_printf_i+0xd2>
 800c844:	681a      	ldr	r2, [r3, #0]
 800c846:	680d      	ldr	r5, [r1, #0]
 800c848:	1d10      	adds	r0, r2, #4
 800c84a:	6949      	ldr	r1, [r1, #20]
 800c84c:	6018      	str	r0, [r3, #0]
 800c84e:	6813      	ldr	r3, [r2, #0]
 800c850:	062e      	lsls	r6, r5, #24
 800c852:	d501      	bpl.n	800c858 <_printf_i+0x19c>
 800c854:	6019      	str	r1, [r3, #0]
 800c856:	e002      	b.n	800c85e <_printf_i+0x1a2>
 800c858:	066d      	lsls	r5, r5, #25
 800c85a:	d5fb      	bpl.n	800c854 <_printf_i+0x198>
 800c85c:	8019      	strh	r1, [r3, #0]
 800c85e:	2300      	movs	r3, #0
 800c860:	9e04      	ldr	r6, [sp, #16]
 800c862:	6123      	str	r3, [r4, #16]
 800c864:	e7c0      	b.n	800c7e8 <_printf_i+0x12c>
 800c866:	681a      	ldr	r2, [r3, #0]
 800c868:	1d11      	adds	r1, r2, #4
 800c86a:	6019      	str	r1, [r3, #0]
 800c86c:	6816      	ldr	r6, [r2, #0]
 800c86e:	2100      	movs	r1, #0
 800c870:	0030      	movs	r0, r6
 800c872:	6862      	ldr	r2, [r4, #4]
 800c874:	f000 f90b 	bl	800ca8e <memchr>
 800c878:	2800      	cmp	r0, #0
 800c87a:	d001      	beq.n	800c880 <_printf_i+0x1c4>
 800c87c:	1b80      	subs	r0, r0, r6
 800c87e:	6060      	str	r0, [r4, #4]
 800c880:	6863      	ldr	r3, [r4, #4]
 800c882:	6123      	str	r3, [r4, #16]
 800c884:	2300      	movs	r3, #0
 800c886:	9a04      	ldr	r2, [sp, #16]
 800c888:	7013      	strb	r3, [r2, #0]
 800c88a:	e7ad      	b.n	800c7e8 <_printf_i+0x12c>
 800c88c:	0032      	movs	r2, r6
 800c88e:	6923      	ldr	r3, [r4, #16]
 800c890:	9906      	ldr	r1, [sp, #24]
 800c892:	9805      	ldr	r0, [sp, #20]
 800c894:	9d07      	ldr	r5, [sp, #28]
 800c896:	47a8      	blx	r5
 800c898:	3001      	adds	r0, #1
 800c89a:	d0af      	beq.n	800c7fc <_printf_i+0x140>
 800c89c:	6823      	ldr	r3, [r4, #0]
 800c89e:	079b      	lsls	r3, r3, #30
 800c8a0:	d415      	bmi.n	800c8ce <_printf_i+0x212>
 800c8a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c8a4:	68e0      	ldr	r0, [r4, #12]
 800c8a6:	4298      	cmp	r0, r3
 800c8a8:	daaa      	bge.n	800c800 <_printf_i+0x144>
 800c8aa:	0018      	movs	r0, r3
 800c8ac:	e7a8      	b.n	800c800 <_printf_i+0x144>
 800c8ae:	0022      	movs	r2, r4
 800c8b0:	2301      	movs	r3, #1
 800c8b2:	9906      	ldr	r1, [sp, #24]
 800c8b4:	9805      	ldr	r0, [sp, #20]
 800c8b6:	9e07      	ldr	r6, [sp, #28]
 800c8b8:	3219      	adds	r2, #25
 800c8ba:	47b0      	blx	r6
 800c8bc:	3001      	adds	r0, #1
 800c8be:	d09d      	beq.n	800c7fc <_printf_i+0x140>
 800c8c0:	3501      	adds	r5, #1
 800c8c2:	68e3      	ldr	r3, [r4, #12]
 800c8c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c8c6:	1a9b      	subs	r3, r3, r2
 800c8c8:	42ab      	cmp	r3, r5
 800c8ca:	dcf0      	bgt.n	800c8ae <_printf_i+0x1f2>
 800c8cc:	e7e9      	b.n	800c8a2 <_printf_i+0x1e6>
 800c8ce:	2500      	movs	r5, #0
 800c8d0:	e7f7      	b.n	800c8c2 <_printf_i+0x206>
 800c8d2:	46c0      	nop			; (mov r8, r8)
 800c8d4:	0800dd85 	.word	0x0800dd85
 800c8d8:	0800dd96 	.word	0x0800dd96

0800c8dc <__sflush_r>:
 800c8dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c8de:	898b      	ldrh	r3, [r1, #12]
 800c8e0:	0005      	movs	r5, r0
 800c8e2:	000c      	movs	r4, r1
 800c8e4:	071a      	lsls	r2, r3, #28
 800c8e6:	d45c      	bmi.n	800c9a2 <__sflush_r+0xc6>
 800c8e8:	684a      	ldr	r2, [r1, #4]
 800c8ea:	2a00      	cmp	r2, #0
 800c8ec:	dc04      	bgt.n	800c8f8 <__sflush_r+0x1c>
 800c8ee:	6c0a      	ldr	r2, [r1, #64]	; 0x40
 800c8f0:	2a00      	cmp	r2, #0
 800c8f2:	dc01      	bgt.n	800c8f8 <__sflush_r+0x1c>
 800c8f4:	2000      	movs	r0, #0
 800c8f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 800c8f8:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c8fa:	2f00      	cmp	r7, #0
 800c8fc:	d0fa      	beq.n	800c8f4 <__sflush_r+0x18>
 800c8fe:	2200      	movs	r2, #0
 800c900:	2080      	movs	r0, #128	; 0x80
 800c902:	682e      	ldr	r6, [r5, #0]
 800c904:	602a      	str	r2, [r5, #0]
 800c906:	001a      	movs	r2, r3
 800c908:	0140      	lsls	r0, r0, #5
 800c90a:	6a21      	ldr	r1, [r4, #32]
 800c90c:	4002      	ands	r2, r0
 800c90e:	4203      	tst	r3, r0
 800c910:	d034      	beq.n	800c97c <__sflush_r+0xa0>
 800c912:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c914:	89a3      	ldrh	r3, [r4, #12]
 800c916:	075b      	lsls	r3, r3, #29
 800c918:	d506      	bpl.n	800c928 <__sflush_r+0x4c>
 800c91a:	6863      	ldr	r3, [r4, #4]
 800c91c:	1ac0      	subs	r0, r0, r3
 800c91e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c920:	2b00      	cmp	r3, #0
 800c922:	d001      	beq.n	800c928 <__sflush_r+0x4c>
 800c924:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c926:	1ac0      	subs	r0, r0, r3
 800c928:	0002      	movs	r2, r0
 800c92a:	2300      	movs	r3, #0
 800c92c:	0028      	movs	r0, r5
 800c92e:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 800c930:	6a21      	ldr	r1, [r4, #32]
 800c932:	47b8      	blx	r7
 800c934:	89a2      	ldrh	r2, [r4, #12]
 800c936:	1c43      	adds	r3, r0, #1
 800c938:	d106      	bne.n	800c948 <__sflush_r+0x6c>
 800c93a:	6829      	ldr	r1, [r5, #0]
 800c93c:	291d      	cmp	r1, #29
 800c93e:	d82c      	bhi.n	800c99a <__sflush_r+0xbe>
 800c940:	4b2a      	ldr	r3, [pc, #168]	; (800c9ec <__sflush_r+0x110>)
 800c942:	410b      	asrs	r3, r1
 800c944:	07db      	lsls	r3, r3, #31
 800c946:	d428      	bmi.n	800c99a <__sflush_r+0xbe>
 800c948:	2300      	movs	r3, #0
 800c94a:	6063      	str	r3, [r4, #4]
 800c94c:	6923      	ldr	r3, [r4, #16]
 800c94e:	6023      	str	r3, [r4, #0]
 800c950:	04d2      	lsls	r2, r2, #19
 800c952:	d505      	bpl.n	800c960 <__sflush_r+0x84>
 800c954:	1c43      	adds	r3, r0, #1
 800c956:	d102      	bne.n	800c95e <__sflush_r+0x82>
 800c958:	682b      	ldr	r3, [r5, #0]
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d100      	bne.n	800c960 <__sflush_r+0x84>
 800c95e:	6560      	str	r0, [r4, #84]	; 0x54
 800c960:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c962:	602e      	str	r6, [r5, #0]
 800c964:	2900      	cmp	r1, #0
 800c966:	d0c5      	beq.n	800c8f4 <__sflush_r+0x18>
 800c968:	0023      	movs	r3, r4
 800c96a:	3344      	adds	r3, #68	; 0x44
 800c96c:	4299      	cmp	r1, r3
 800c96e:	d002      	beq.n	800c976 <__sflush_r+0x9a>
 800c970:	0028      	movs	r0, r5
 800c972:	f7fe fc49 	bl	800b208 <_free_r>
 800c976:	2000      	movs	r0, #0
 800c978:	6360      	str	r0, [r4, #52]	; 0x34
 800c97a:	e7bc      	b.n	800c8f6 <__sflush_r+0x1a>
 800c97c:	2301      	movs	r3, #1
 800c97e:	0028      	movs	r0, r5
 800c980:	47b8      	blx	r7
 800c982:	1c43      	adds	r3, r0, #1
 800c984:	d1c6      	bne.n	800c914 <__sflush_r+0x38>
 800c986:	682b      	ldr	r3, [r5, #0]
 800c988:	2b00      	cmp	r3, #0
 800c98a:	d0c3      	beq.n	800c914 <__sflush_r+0x38>
 800c98c:	2b1d      	cmp	r3, #29
 800c98e:	d001      	beq.n	800c994 <__sflush_r+0xb8>
 800c990:	2b16      	cmp	r3, #22
 800c992:	d101      	bne.n	800c998 <__sflush_r+0xbc>
 800c994:	602e      	str	r6, [r5, #0]
 800c996:	e7ad      	b.n	800c8f4 <__sflush_r+0x18>
 800c998:	89a2      	ldrh	r2, [r4, #12]
 800c99a:	2340      	movs	r3, #64	; 0x40
 800c99c:	4313      	orrs	r3, r2
 800c99e:	81a3      	strh	r3, [r4, #12]
 800c9a0:	e7a9      	b.n	800c8f6 <__sflush_r+0x1a>
 800c9a2:	690e      	ldr	r6, [r1, #16]
 800c9a4:	2e00      	cmp	r6, #0
 800c9a6:	d0a5      	beq.n	800c8f4 <__sflush_r+0x18>
 800c9a8:	680f      	ldr	r7, [r1, #0]
 800c9aa:	600e      	str	r6, [r1, #0]
 800c9ac:	1bba      	subs	r2, r7, r6
 800c9ae:	9201      	str	r2, [sp, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	079b      	lsls	r3, r3, #30
 800c9b4:	d100      	bne.n	800c9b8 <__sflush_r+0xdc>
 800c9b6:	694a      	ldr	r2, [r1, #20]
 800c9b8:	60a2      	str	r2, [r4, #8]
 800c9ba:	9b01      	ldr	r3, [sp, #4]
 800c9bc:	2b00      	cmp	r3, #0
 800c9be:	dd99      	ble.n	800c8f4 <__sflush_r+0x18>
 800c9c0:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c9c2:	0032      	movs	r2, r6
 800c9c4:	001f      	movs	r7, r3
 800c9c6:	0028      	movs	r0, r5
 800c9c8:	9b01      	ldr	r3, [sp, #4]
 800c9ca:	6a21      	ldr	r1, [r4, #32]
 800c9cc:	47b8      	blx	r7
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	dc06      	bgt.n	800c9e0 <__sflush_r+0x104>
 800c9d2:	2340      	movs	r3, #64	; 0x40
 800c9d4:	2001      	movs	r0, #1
 800c9d6:	89a2      	ldrh	r2, [r4, #12]
 800c9d8:	4240      	negs	r0, r0
 800c9da:	4313      	orrs	r3, r2
 800c9dc:	81a3      	strh	r3, [r4, #12]
 800c9de:	e78a      	b.n	800c8f6 <__sflush_r+0x1a>
 800c9e0:	9b01      	ldr	r3, [sp, #4]
 800c9e2:	1836      	adds	r6, r6, r0
 800c9e4:	1a1b      	subs	r3, r3, r0
 800c9e6:	9301      	str	r3, [sp, #4]
 800c9e8:	e7e7      	b.n	800c9ba <__sflush_r+0xde>
 800c9ea:	46c0      	nop			; (mov r8, r8)
 800c9ec:	dfbffffe 	.word	0xdfbffffe

0800c9f0 <_fflush_r>:
 800c9f0:	690b      	ldr	r3, [r1, #16]
 800c9f2:	b570      	push	{r4, r5, r6, lr}
 800c9f4:	0005      	movs	r5, r0
 800c9f6:	000c      	movs	r4, r1
 800c9f8:	2b00      	cmp	r3, #0
 800c9fa:	d102      	bne.n	800ca02 <_fflush_r+0x12>
 800c9fc:	2500      	movs	r5, #0
 800c9fe:	0028      	movs	r0, r5
 800ca00:	bd70      	pop	{r4, r5, r6, pc}
 800ca02:	2800      	cmp	r0, #0
 800ca04:	d004      	beq.n	800ca10 <_fflush_r+0x20>
 800ca06:	6a03      	ldr	r3, [r0, #32]
 800ca08:	2b00      	cmp	r3, #0
 800ca0a:	d101      	bne.n	800ca10 <_fflush_r+0x20>
 800ca0c:	f7fe f9fa 	bl	800ae04 <__sinit>
 800ca10:	220c      	movs	r2, #12
 800ca12:	5ea3      	ldrsh	r3, [r4, r2]
 800ca14:	2b00      	cmp	r3, #0
 800ca16:	d0f1      	beq.n	800c9fc <_fflush_r+0xc>
 800ca18:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ca1a:	07d2      	lsls	r2, r2, #31
 800ca1c:	d404      	bmi.n	800ca28 <_fflush_r+0x38>
 800ca1e:	059b      	lsls	r3, r3, #22
 800ca20:	d402      	bmi.n	800ca28 <_fflush_r+0x38>
 800ca22:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca24:	f7fe fbc1 	bl	800b1aa <__retarget_lock_acquire_recursive>
 800ca28:	0028      	movs	r0, r5
 800ca2a:	0021      	movs	r1, r4
 800ca2c:	f7ff ff56 	bl	800c8dc <__sflush_r>
 800ca30:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ca32:	0005      	movs	r5, r0
 800ca34:	07db      	lsls	r3, r3, #31
 800ca36:	d4e2      	bmi.n	800c9fe <_fflush_r+0xe>
 800ca38:	89a3      	ldrh	r3, [r4, #12]
 800ca3a:	059b      	lsls	r3, r3, #22
 800ca3c:	d4df      	bmi.n	800c9fe <_fflush_r+0xe>
 800ca3e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ca40:	f7fe fbb4 	bl	800b1ac <__retarget_lock_release_recursive>
 800ca44:	e7db      	b.n	800c9fe <_fflush_r+0xe>
	...

0800ca48 <fiprintf>:
 800ca48:	b40e      	push	{r1, r2, r3}
 800ca4a:	b517      	push	{r0, r1, r2, r4, lr}
 800ca4c:	4c05      	ldr	r4, [pc, #20]	; (800ca64 <fiprintf+0x1c>)
 800ca4e:	ab05      	add	r3, sp, #20
 800ca50:	cb04      	ldmia	r3!, {r2}
 800ca52:	0001      	movs	r1, r0
 800ca54:	6820      	ldr	r0, [r4, #0]
 800ca56:	9301      	str	r3, [sp, #4]
 800ca58:	f000 f880 	bl	800cb5c <_vfiprintf_r>
 800ca5c:	bc1e      	pop	{r1, r2, r3, r4}
 800ca5e:	bc08      	pop	{r3}
 800ca60:	b003      	add	sp, #12
 800ca62:	4718      	bx	r3
 800ca64:	200001e0 	.word	0x200001e0

0800ca68 <memmove>:
 800ca68:	b510      	push	{r4, lr}
 800ca6a:	4288      	cmp	r0, r1
 800ca6c:	d902      	bls.n	800ca74 <memmove+0xc>
 800ca6e:	188b      	adds	r3, r1, r2
 800ca70:	4298      	cmp	r0, r3
 800ca72:	d303      	bcc.n	800ca7c <memmove+0x14>
 800ca74:	2300      	movs	r3, #0
 800ca76:	e007      	b.n	800ca88 <memmove+0x20>
 800ca78:	5c8b      	ldrb	r3, [r1, r2]
 800ca7a:	5483      	strb	r3, [r0, r2]
 800ca7c:	3a01      	subs	r2, #1
 800ca7e:	d2fb      	bcs.n	800ca78 <memmove+0x10>
 800ca80:	bd10      	pop	{r4, pc}
 800ca82:	5ccc      	ldrb	r4, [r1, r3]
 800ca84:	54c4      	strb	r4, [r0, r3]
 800ca86:	3301      	adds	r3, #1
 800ca88:	429a      	cmp	r2, r3
 800ca8a:	d1fa      	bne.n	800ca82 <memmove+0x1a>
 800ca8c:	e7f8      	b.n	800ca80 <memmove+0x18>

0800ca8e <memchr>:
 800ca8e:	b2c9      	uxtb	r1, r1
 800ca90:	1882      	adds	r2, r0, r2
 800ca92:	4290      	cmp	r0, r2
 800ca94:	d101      	bne.n	800ca9a <memchr+0xc>
 800ca96:	2000      	movs	r0, #0
 800ca98:	4770      	bx	lr
 800ca9a:	7803      	ldrb	r3, [r0, #0]
 800ca9c:	428b      	cmp	r3, r1
 800ca9e:	d0fb      	beq.n	800ca98 <memchr+0xa>
 800caa0:	3001      	adds	r0, #1
 800caa2:	e7f6      	b.n	800ca92 <memchr+0x4>

0800caa4 <abort>:
 800caa4:	2006      	movs	r0, #6
 800caa6:	b510      	push	{r4, lr}
 800caa8:	f000 fa44 	bl	800cf34 <raise>
 800caac:	2001      	movs	r0, #1
 800caae:	f7f8 f973 	bl	8004d98 <_exit>

0800cab2 <_calloc_r>:
 800cab2:	b570      	push	{r4, r5, r6, lr}
 800cab4:	0c0b      	lsrs	r3, r1, #16
 800cab6:	0c15      	lsrs	r5, r2, #16
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d11e      	bne.n	800cafa <_calloc_r+0x48>
 800cabc:	2d00      	cmp	r5, #0
 800cabe:	d10c      	bne.n	800cada <_calloc_r+0x28>
 800cac0:	b289      	uxth	r1, r1
 800cac2:	b294      	uxth	r4, r2
 800cac4:	434c      	muls	r4, r1
 800cac6:	0021      	movs	r1, r4
 800cac8:	f7fd f97e 	bl	8009dc8 <_malloc_r>
 800cacc:	1e05      	subs	r5, r0, #0
 800cace:	d01b      	beq.n	800cb08 <_calloc_r+0x56>
 800cad0:	0022      	movs	r2, r4
 800cad2:	2100      	movs	r1, #0
 800cad4:	f7fe fa36 	bl	800af44 <memset>
 800cad8:	e016      	b.n	800cb08 <_calloc_r+0x56>
 800cada:	1c2b      	adds	r3, r5, #0
 800cadc:	1c0c      	adds	r4, r1, #0
 800cade:	b289      	uxth	r1, r1
 800cae0:	b292      	uxth	r2, r2
 800cae2:	434a      	muls	r2, r1
 800cae4:	b2a1      	uxth	r1, r4
 800cae6:	b29c      	uxth	r4, r3
 800cae8:	434c      	muls	r4, r1
 800caea:	0c13      	lsrs	r3, r2, #16
 800caec:	18e4      	adds	r4, r4, r3
 800caee:	0c23      	lsrs	r3, r4, #16
 800caf0:	d107      	bne.n	800cb02 <_calloc_r+0x50>
 800caf2:	0424      	lsls	r4, r4, #16
 800caf4:	b292      	uxth	r2, r2
 800caf6:	4314      	orrs	r4, r2
 800caf8:	e7e5      	b.n	800cac6 <_calloc_r+0x14>
 800cafa:	2d00      	cmp	r5, #0
 800cafc:	d101      	bne.n	800cb02 <_calloc_r+0x50>
 800cafe:	1c14      	adds	r4, r2, #0
 800cb00:	e7ed      	b.n	800cade <_calloc_r+0x2c>
 800cb02:	230c      	movs	r3, #12
 800cb04:	2500      	movs	r5, #0
 800cb06:	6003      	str	r3, [r0, #0]
 800cb08:	0028      	movs	r0, r5
 800cb0a:	bd70      	pop	{r4, r5, r6, pc}

0800cb0c <__sfputc_r>:
 800cb0c:	6893      	ldr	r3, [r2, #8]
 800cb0e:	b510      	push	{r4, lr}
 800cb10:	3b01      	subs	r3, #1
 800cb12:	6093      	str	r3, [r2, #8]
 800cb14:	2b00      	cmp	r3, #0
 800cb16:	da04      	bge.n	800cb22 <__sfputc_r+0x16>
 800cb18:	6994      	ldr	r4, [r2, #24]
 800cb1a:	42a3      	cmp	r3, r4
 800cb1c:	db07      	blt.n	800cb2e <__sfputc_r+0x22>
 800cb1e:	290a      	cmp	r1, #10
 800cb20:	d005      	beq.n	800cb2e <__sfputc_r+0x22>
 800cb22:	6813      	ldr	r3, [r2, #0]
 800cb24:	1c58      	adds	r0, r3, #1
 800cb26:	6010      	str	r0, [r2, #0]
 800cb28:	7019      	strb	r1, [r3, #0]
 800cb2a:	0008      	movs	r0, r1
 800cb2c:	bd10      	pop	{r4, pc}
 800cb2e:	f000 f931 	bl	800cd94 <__swbuf_r>
 800cb32:	0001      	movs	r1, r0
 800cb34:	e7f9      	b.n	800cb2a <__sfputc_r+0x1e>

0800cb36 <__sfputs_r>:
 800cb36:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb38:	0006      	movs	r6, r0
 800cb3a:	000f      	movs	r7, r1
 800cb3c:	0014      	movs	r4, r2
 800cb3e:	18d5      	adds	r5, r2, r3
 800cb40:	42ac      	cmp	r4, r5
 800cb42:	d101      	bne.n	800cb48 <__sfputs_r+0x12>
 800cb44:	2000      	movs	r0, #0
 800cb46:	e007      	b.n	800cb58 <__sfputs_r+0x22>
 800cb48:	7821      	ldrb	r1, [r4, #0]
 800cb4a:	003a      	movs	r2, r7
 800cb4c:	0030      	movs	r0, r6
 800cb4e:	f7ff ffdd 	bl	800cb0c <__sfputc_r>
 800cb52:	3401      	adds	r4, #1
 800cb54:	1c43      	adds	r3, r0, #1
 800cb56:	d1f3      	bne.n	800cb40 <__sfputs_r+0xa>
 800cb58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800cb5c <_vfiprintf_r>:
 800cb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb5e:	b0a1      	sub	sp, #132	; 0x84
 800cb60:	000f      	movs	r7, r1
 800cb62:	0015      	movs	r5, r2
 800cb64:	001e      	movs	r6, r3
 800cb66:	9003      	str	r0, [sp, #12]
 800cb68:	2800      	cmp	r0, #0
 800cb6a:	d004      	beq.n	800cb76 <_vfiprintf_r+0x1a>
 800cb6c:	6a03      	ldr	r3, [r0, #32]
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d101      	bne.n	800cb76 <_vfiprintf_r+0x1a>
 800cb72:	f7fe f947 	bl	800ae04 <__sinit>
 800cb76:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cb78:	07db      	lsls	r3, r3, #31
 800cb7a:	d405      	bmi.n	800cb88 <_vfiprintf_r+0x2c>
 800cb7c:	89bb      	ldrh	r3, [r7, #12]
 800cb7e:	059b      	lsls	r3, r3, #22
 800cb80:	d402      	bmi.n	800cb88 <_vfiprintf_r+0x2c>
 800cb82:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cb84:	f7fe fb11 	bl	800b1aa <__retarget_lock_acquire_recursive>
 800cb88:	89bb      	ldrh	r3, [r7, #12]
 800cb8a:	071b      	lsls	r3, r3, #28
 800cb8c:	d502      	bpl.n	800cb94 <_vfiprintf_r+0x38>
 800cb8e:	693b      	ldr	r3, [r7, #16]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d113      	bne.n	800cbbc <_vfiprintf_r+0x60>
 800cb94:	0039      	movs	r1, r7
 800cb96:	9803      	ldr	r0, [sp, #12]
 800cb98:	f000 f93e 	bl	800ce18 <__swsetup_r>
 800cb9c:	2800      	cmp	r0, #0
 800cb9e:	d00d      	beq.n	800cbbc <_vfiprintf_r+0x60>
 800cba0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cba2:	07db      	lsls	r3, r3, #31
 800cba4:	d503      	bpl.n	800cbae <_vfiprintf_r+0x52>
 800cba6:	2001      	movs	r0, #1
 800cba8:	4240      	negs	r0, r0
 800cbaa:	b021      	add	sp, #132	; 0x84
 800cbac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbae:	89bb      	ldrh	r3, [r7, #12]
 800cbb0:	059b      	lsls	r3, r3, #22
 800cbb2:	d4f8      	bmi.n	800cba6 <_vfiprintf_r+0x4a>
 800cbb4:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cbb6:	f7fe faf9 	bl	800b1ac <__retarget_lock_release_recursive>
 800cbba:	e7f4      	b.n	800cba6 <_vfiprintf_r+0x4a>
 800cbbc:	2300      	movs	r3, #0
 800cbbe:	ac08      	add	r4, sp, #32
 800cbc0:	6163      	str	r3, [r4, #20]
 800cbc2:	3320      	adds	r3, #32
 800cbc4:	7663      	strb	r3, [r4, #25]
 800cbc6:	3310      	adds	r3, #16
 800cbc8:	76a3      	strb	r3, [r4, #26]
 800cbca:	9607      	str	r6, [sp, #28]
 800cbcc:	002e      	movs	r6, r5
 800cbce:	7833      	ldrb	r3, [r6, #0]
 800cbd0:	2b00      	cmp	r3, #0
 800cbd2:	d001      	beq.n	800cbd8 <_vfiprintf_r+0x7c>
 800cbd4:	2b25      	cmp	r3, #37	; 0x25
 800cbd6:	d148      	bne.n	800cc6a <_vfiprintf_r+0x10e>
 800cbd8:	1b73      	subs	r3, r6, r5
 800cbda:	9305      	str	r3, [sp, #20]
 800cbdc:	42ae      	cmp	r6, r5
 800cbde:	d00b      	beq.n	800cbf8 <_vfiprintf_r+0x9c>
 800cbe0:	002a      	movs	r2, r5
 800cbe2:	0039      	movs	r1, r7
 800cbe4:	9803      	ldr	r0, [sp, #12]
 800cbe6:	f7ff ffa6 	bl	800cb36 <__sfputs_r>
 800cbea:	3001      	adds	r0, #1
 800cbec:	d100      	bne.n	800cbf0 <_vfiprintf_r+0x94>
 800cbee:	e0af      	b.n	800cd50 <_vfiprintf_r+0x1f4>
 800cbf0:	6963      	ldr	r3, [r4, #20]
 800cbf2:	9a05      	ldr	r2, [sp, #20]
 800cbf4:	189b      	adds	r3, r3, r2
 800cbf6:	6163      	str	r3, [r4, #20]
 800cbf8:	7833      	ldrb	r3, [r6, #0]
 800cbfa:	2b00      	cmp	r3, #0
 800cbfc:	d100      	bne.n	800cc00 <_vfiprintf_r+0xa4>
 800cbfe:	e0a7      	b.n	800cd50 <_vfiprintf_r+0x1f4>
 800cc00:	2201      	movs	r2, #1
 800cc02:	2300      	movs	r3, #0
 800cc04:	4252      	negs	r2, r2
 800cc06:	6062      	str	r2, [r4, #4]
 800cc08:	a904      	add	r1, sp, #16
 800cc0a:	3254      	adds	r2, #84	; 0x54
 800cc0c:	1852      	adds	r2, r2, r1
 800cc0e:	1c75      	adds	r5, r6, #1
 800cc10:	6023      	str	r3, [r4, #0]
 800cc12:	60e3      	str	r3, [r4, #12]
 800cc14:	60a3      	str	r3, [r4, #8]
 800cc16:	7013      	strb	r3, [r2, #0]
 800cc18:	65a3      	str	r3, [r4, #88]	; 0x58
 800cc1a:	4b59      	ldr	r3, [pc, #356]	; (800cd80 <_vfiprintf_r+0x224>)
 800cc1c:	2205      	movs	r2, #5
 800cc1e:	0018      	movs	r0, r3
 800cc20:	7829      	ldrb	r1, [r5, #0]
 800cc22:	9305      	str	r3, [sp, #20]
 800cc24:	f7ff ff33 	bl	800ca8e <memchr>
 800cc28:	1c6e      	adds	r6, r5, #1
 800cc2a:	2800      	cmp	r0, #0
 800cc2c:	d11f      	bne.n	800cc6e <_vfiprintf_r+0x112>
 800cc2e:	6822      	ldr	r2, [r4, #0]
 800cc30:	06d3      	lsls	r3, r2, #27
 800cc32:	d504      	bpl.n	800cc3e <_vfiprintf_r+0xe2>
 800cc34:	2353      	movs	r3, #83	; 0x53
 800cc36:	a904      	add	r1, sp, #16
 800cc38:	185b      	adds	r3, r3, r1
 800cc3a:	2120      	movs	r1, #32
 800cc3c:	7019      	strb	r1, [r3, #0]
 800cc3e:	0713      	lsls	r3, r2, #28
 800cc40:	d504      	bpl.n	800cc4c <_vfiprintf_r+0xf0>
 800cc42:	2353      	movs	r3, #83	; 0x53
 800cc44:	a904      	add	r1, sp, #16
 800cc46:	185b      	adds	r3, r3, r1
 800cc48:	212b      	movs	r1, #43	; 0x2b
 800cc4a:	7019      	strb	r1, [r3, #0]
 800cc4c:	782b      	ldrb	r3, [r5, #0]
 800cc4e:	2b2a      	cmp	r3, #42	; 0x2a
 800cc50:	d016      	beq.n	800cc80 <_vfiprintf_r+0x124>
 800cc52:	002e      	movs	r6, r5
 800cc54:	2100      	movs	r1, #0
 800cc56:	200a      	movs	r0, #10
 800cc58:	68e3      	ldr	r3, [r4, #12]
 800cc5a:	7832      	ldrb	r2, [r6, #0]
 800cc5c:	1c75      	adds	r5, r6, #1
 800cc5e:	3a30      	subs	r2, #48	; 0x30
 800cc60:	2a09      	cmp	r2, #9
 800cc62:	d94e      	bls.n	800cd02 <_vfiprintf_r+0x1a6>
 800cc64:	2900      	cmp	r1, #0
 800cc66:	d111      	bne.n	800cc8c <_vfiprintf_r+0x130>
 800cc68:	e017      	b.n	800cc9a <_vfiprintf_r+0x13e>
 800cc6a:	3601      	adds	r6, #1
 800cc6c:	e7af      	b.n	800cbce <_vfiprintf_r+0x72>
 800cc6e:	9b05      	ldr	r3, [sp, #20]
 800cc70:	6822      	ldr	r2, [r4, #0]
 800cc72:	1ac0      	subs	r0, r0, r3
 800cc74:	2301      	movs	r3, #1
 800cc76:	4083      	lsls	r3, r0
 800cc78:	4313      	orrs	r3, r2
 800cc7a:	0035      	movs	r5, r6
 800cc7c:	6023      	str	r3, [r4, #0]
 800cc7e:	e7cc      	b.n	800cc1a <_vfiprintf_r+0xbe>
 800cc80:	9b07      	ldr	r3, [sp, #28]
 800cc82:	1d19      	adds	r1, r3, #4
 800cc84:	681b      	ldr	r3, [r3, #0]
 800cc86:	9107      	str	r1, [sp, #28]
 800cc88:	2b00      	cmp	r3, #0
 800cc8a:	db01      	blt.n	800cc90 <_vfiprintf_r+0x134>
 800cc8c:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc8e:	e004      	b.n	800cc9a <_vfiprintf_r+0x13e>
 800cc90:	425b      	negs	r3, r3
 800cc92:	60e3      	str	r3, [r4, #12]
 800cc94:	2302      	movs	r3, #2
 800cc96:	4313      	orrs	r3, r2
 800cc98:	6023      	str	r3, [r4, #0]
 800cc9a:	7833      	ldrb	r3, [r6, #0]
 800cc9c:	2b2e      	cmp	r3, #46	; 0x2e
 800cc9e:	d10a      	bne.n	800ccb6 <_vfiprintf_r+0x15a>
 800cca0:	7873      	ldrb	r3, [r6, #1]
 800cca2:	2b2a      	cmp	r3, #42	; 0x2a
 800cca4:	d135      	bne.n	800cd12 <_vfiprintf_r+0x1b6>
 800cca6:	9b07      	ldr	r3, [sp, #28]
 800cca8:	3602      	adds	r6, #2
 800ccaa:	1d1a      	adds	r2, r3, #4
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	9207      	str	r2, [sp, #28]
 800ccb0:	2b00      	cmp	r3, #0
 800ccb2:	db2b      	blt.n	800cd0c <_vfiprintf_r+0x1b0>
 800ccb4:	9309      	str	r3, [sp, #36]	; 0x24
 800ccb6:	4d33      	ldr	r5, [pc, #204]	; (800cd84 <_vfiprintf_r+0x228>)
 800ccb8:	2203      	movs	r2, #3
 800ccba:	0028      	movs	r0, r5
 800ccbc:	7831      	ldrb	r1, [r6, #0]
 800ccbe:	f7ff fee6 	bl	800ca8e <memchr>
 800ccc2:	2800      	cmp	r0, #0
 800ccc4:	d006      	beq.n	800ccd4 <_vfiprintf_r+0x178>
 800ccc6:	2340      	movs	r3, #64	; 0x40
 800ccc8:	1b40      	subs	r0, r0, r5
 800ccca:	4083      	lsls	r3, r0
 800cccc:	6822      	ldr	r2, [r4, #0]
 800ccce:	3601      	adds	r6, #1
 800ccd0:	4313      	orrs	r3, r2
 800ccd2:	6023      	str	r3, [r4, #0]
 800ccd4:	7831      	ldrb	r1, [r6, #0]
 800ccd6:	2206      	movs	r2, #6
 800ccd8:	482b      	ldr	r0, [pc, #172]	; (800cd88 <_vfiprintf_r+0x22c>)
 800ccda:	1c75      	adds	r5, r6, #1
 800ccdc:	7621      	strb	r1, [r4, #24]
 800ccde:	f7ff fed6 	bl	800ca8e <memchr>
 800cce2:	2800      	cmp	r0, #0
 800cce4:	d043      	beq.n	800cd6e <_vfiprintf_r+0x212>
 800cce6:	4b29      	ldr	r3, [pc, #164]	; (800cd8c <_vfiprintf_r+0x230>)
 800cce8:	2b00      	cmp	r3, #0
 800ccea:	d125      	bne.n	800cd38 <_vfiprintf_r+0x1dc>
 800ccec:	2207      	movs	r2, #7
 800ccee:	9b07      	ldr	r3, [sp, #28]
 800ccf0:	3307      	adds	r3, #7
 800ccf2:	4393      	bics	r3, r2
 800ccf4:	3308      	adds	r3, #8
 800ccf6:	9307      	str	r3, [sp, #28]
 800ccf8:	6963      	ldr	r3, [r4, #20]
 800ccfa:	9a04      	ldr	r2, [sp, #16]
 800ccfc:	189b      	adds	r3, r3, r2
 800ccfe:	6163      	str	r3, [r4, #20]
 800cd00:	e764      	b.n	800cbcc <_vfiprintf_r+0x70>
 800cd02:	4343      	muls	r3, r0
 800cd04:	002e      	movs	r6, r5
 800cd06:	2101      	movs	r1, #1
 800cd08:	189b      	adds	r3, r3, r2
 800cd0a:	e7a6      	b.n	800cc5a <_vfiprintf_r+0xfe>
 800cd0c:	2301      	movs	r3, #1
 800cd0e:	425b      	negs	r3, r3
 800cd10:	e7d0      	b.n	800ccb4 <_vfiprintf_r+0x158>
 800cd12:	2300      	movs	r3, #0
 800cd14:	200a      	movs	r0, #10
 800cd16:	001a      	movs	r2, r3
 800cd18:	3601      	adds	r6, #1
 800cd1a:	6063      	str	r3, [r4, #4]
 800cd1c:	7831      	ldrb	r1, [r6, #0]
 800cd1e:	1c75      	adds	r5, r6, #1
 800cd20:	3930      	subs	r1, #48	; 0x30
 800cd22:	2909      	cmp	r1, #9
 800cd24:	d903      	bls.n	800cd2e <_vfiprintf_r+0x1d2>
 800cd26:	2b00      	cmp	r3, #0
 800cd28:	d0c5      	beq.n	800ccb6 <_vfiprintf_r+0x15a>
 800cd2a:	9209      	str	r2, [sp, #36]	; 0x24
 800cd2c:	e7c3      	b.n	800ccb6 <_vfiprintf_r+0x15a>
 800cd2e:	4342      	muls	r2, r0
 800cd30:	002e      	movs	r6, r5
 800cd32:	2301      	movs	r3, #1
 800cd34:	1852      	adds	r2, r2, r1
 800cd36:	e7f1      	b.n	800cd1c <_vfiprintf_r+0x1c0>
 800cd38:	aa07      	add	r2, sp, #28
 800cd3a:	9200      	str	r2, [sp, #0]
 800cd3c:	0021      	movs	r1, r4
 800cd3e:	003a      	movs	r2, r7
 800cd40:	4b13      	ldr	r3, [pc, #76]	; (800cd90 <_vfiprintf_r+0x234>)
 800cd42:	9803      	ldr	r0, [sp, #12]
 800cd44:	e000      	b.n	800cd48 <_vfiprintf_r+0x1ec>
 800cd46:	bf00      	nop
 800cd48:	9004      	str	r0, [sp, #16]
 800cd4a:	9b04      	ldr	r3, [sp, #16]
 800cd4c:	3301      	adds	r3, #1
 800cd4e:	d1d3      	bne.n	800ccf8 <_vfiprintf_r+0x19c>
 800cd50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cd52:	07db      	lsls	r3, r3, #31
 800cd54:	d405      	bmi.n	800cd62 <_vfiprintf_r+0x206>
 800cd56:	89bb      	ldrh	r3, [r7, #12]
 800cd58:	059b      	lsls	r3, r3, #22
 800cd5a:	d402      	bmi.n	800cd62 <_vfiprintf_r+0x206>
 800cd5c:	6db8      	ldr	r0, [r7, #88]	; 0x58
 800cd5e:	f7fe fa25 	bl	800b1ac <__retarget_lock_release_recursive>
 800cd62:	89bb      	ldrh	r3, [r7, #12]
 800cd64:	065b      	lsls	r3, r3, #25
 800cd66:	d500      	bpl.n	800cd6a <_vfiprintf_r+0x20e>
 800cd68:	e71d      	b.n	800cba6 <_vfiprintf_r+0x4a>
 800cd6a:	980d      	ldr	r0, [sp, #52]	; 0x34
 800cd6c:	e71d      	b.n	800cbaa <_vfiprintf_r+0x4e>
 800cd6e:	aa07      	add	r2, sp, #28
 800cd70:	9200      	str	r2, [sp, #0]
 800cd72:	0021      	movs	r1, r4
 800cd74:	003a      	movs	r2, r7
 800cd76:	4b06      	ldr	r3, [pc, #24]	; (800cd90 <_vfiprintf_r+0x234>)
 800cd78:	9803      	ldr	r0, [sp, #12]
 800cd7a:	f7ff fc9f 	bl	800c6bc <_printf_i>
 800cd7e:	e7e3      	b.n	800cd48 <_vfiprintf_r+0x1ec>
 800cd80:	0800dd74 	.word	0x0800dd74
 800cd84:	0800dd7a 	.word	0x0800dd7a
 800cd88:	0800dd7e 	.word	0x0800dd7e
 800cd8c:	00000000 	.word	0x00000000
 800cd90:	0800cb37 	.word	0x0800cb37

0800cd94 <__swbuf_r>:
 800cd94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd96:	0006      	movs	r6, r0
 800cd98:	000d      	movs	r5, r1
 800cd9a:	0014      	movs	r4, r2
 800cd9c:	2800      	cmp	r0, #0
 800cd9e:	d004      	beq.n	800cdaa <__swbuf_r+0x16>
 800cda0:	6a03      	ldr	r3, [r0, #32]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d101      	bne.n	800cdaa <__swbuf_r+0x16>
 800cda6:	f7fe f82d 	bl	800ae04 <__sinit>
 800cdaa:	69a3      	ldr	r3, [r4, #24]
 800cdac:	60a3      	str	r3, [r4, #8]
 800cdae:	89a3      	ldrh	r3, [r4, #12]
 800cdb0:	071b      	lsls	r3, r3, #28
 800cdb2:	d528      	bpl.n	800ce06 <__swbuf_r+0x72>
 800cdb4:	6923      	ldr	r3, [r4, #16]
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d025      	beq.n	800ce06 <__swbuf_r+0x72>
 800cdba:	6923      	ldr	r3, [r4, #16]
 800cdbc:	6820      	ldr	r0, [r4, #0]
 800cdbe:	b2ef      	uxtb	r7, r5
 800cdc0:	1ac0      	subs	r0, r0, r3
 800cdc2:	6963      	ldr	r3, [r4, #20]
 800cdc4:	b2ed      	uxtb	r5, r5
 800cdc6:	4283      	cmp	r3, r0
 800cdc8:	dc05      	bgt.n	800cdd6 <__swbuf_r+0x42>
 800cdca:	0021      	movs	r1, r4
 800cdcc:	0030      	movs	r0, r6
 800cdce:	f7ff fe0f 	bl	800c9f0 <_fflush_r>
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	d11d      	bne.n	800ce12 <__swbuf_r+0x7e>
 800cdd6:	68a3      	ldr	r3, [r4, #8]
 800cdd8:	3001      	adds	r0, #1
 800cdda:	3b01      	subs	r3, #1
 800cddc:	60a3      	str	r3, [r4, #8]
 800cdde:	6823      	ldr	r3, [r4, #0]
 800cde0:	1c5a      	adds	r2, r3, #1
 800cde2:	6022      	str	r2, [r4, #0]
 800cde4:	701f      	strb	r7, [r3, #0]
 800cde6:	6963      	ldr	r3, [r4, #20]
 800cde8:	4283      	cmp	r3, r0
 800cdea:	d004      	beq.n	800cdf6 <__swbuf_r+0x62>
 800cdec:	89a3      	ldrh	r3, [r4, #12]
 800cdee:	07db      	lsls	r3, r3, #31
 800cdf0:	d507      	bpl.n	800ce02 <__swbuf_r+0x6e>
 800cdf2:	2d0a      	cmp	r5, #10
 800cdf4:	d105      	bne.n	800ce02 <__swbuf_r+0x6e>
 800cdf6:	0021      	movs	r1, r4
 800cdf8:	0030      	movs	r0, r6
 800cdfa:	f7ff fdf9 	bl	800c9f0 <_fflush_r>
 800cdfe:	2800      	cmp	r0, #0
 800ce00:	d107      	bne.n	800ce12 <__swbuf_r+0x7e>
 800ce02:	0028      	movs	r0, r5
 800ce04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ce06:	0021      	movs	r1, r4
 800ce08:	0030      	movs	r0, r6
 800ce0a:	f000 f805 	bl	800ce18 <__swsetup_r>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	d0d3      	beq.n	800cdba <__swbuf_r+0x26>
 800ce12:	2501      	movs	r5, #1
 800ce14:	426d      	negs	r5, r5
 800ce16:	e7f4      	b.n	800ce02 <__swbuf_r+0x6e>

0800ce18 <__swsetup_r>:
 800ce18:	4b30      	ldr	r3, [pc, #192]	; (800cedc <__swsetup_r+0xc4>)
 800ce1a:	b570      	push	{r4, r5, r6, lr}
 800ce1c:	0005      	movs	r5, r0
 800ce1e:	6818      	ldr	r0, [r3, #0]
 800ce20:	000c      	movs	r4, r1
 800ce22:	2800      	cmp	r0, #0
 800ce24:	d004      	beq.n	800ce30 <__swsetup_r+0x18>
 800ce26:	6a03      	ldr	r3, [r0, #32]
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	d101      	bne.n	800ce30 <__swsetup_r+0x18>
 800ce2c:	f7fd ffea 	bl	800ae04 <__sinit>
 800ce30:	230c      	movs	r3, #12
 800ce32:	5ee2      	ldrsh	r2, [r4, r3]
 800ce34:	b293      	uxth	r3, r2
 800ce36:	0711      	lsls	r1, r2, #28
 800ce38:	d423      	bmi.n	800ce82 <__swsetup_r+0x6a>
 800ce3a:	06d9      	lsls	r1, r3, #27
 800ce3c:	d407      	bmi.n	800ce4e <__swsetup_r+0x36>
 800ce3e:	2309      	movs	r3, #9
 800ce40:	2001      	movs	r0, #1
 800ce42:	602b      	str	r3, [r5, #0]
 800ce44:	3337      	adds	r3, #55	; 0x37
 800ce46:	4313      	orrs	r3, r2
 800ce48:	81a3      	strh	r3, [r4, #12]
 800ce4a:	4240      	negs	r0, r0
 800ce4c:	bd70      	pop	{r4, r5, r6, pc}
 800ce4e:	075b      	lsls	r3, r3, #29
 800ce50:	d513      	bpl.n	800ce7a <__swsetup_r+0x62>
 800ce52:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ce54:	2900      	cmp	r1, #0
 800ce56:	d008      	beq.n	800ce6a <__swsetup_r+0x52>
 800ce58:	0023      	movs	r3, r4
 800ce5a:	3344      	adds	r3, #68	; 0x44
 800ce5c:	4299      	cmp	r1, r3
 800ce5e:	d002      	beq.n	800ce66 <__swsetup_r+0x4e>
 800ce60:	0028      	movs	r0, r5
 800ce62:	f7fe f9d1 	bl	800b208 <_free_r>
 800ce66:	2300      	movs	r3, #0
 800ce68:	6363      	str	r3, [r4, #52]	; 0x34
 800ce6a:	2224      	movs	r2, #36	; 0x24
 800ce6c:	89a3      	ldrh	r3, [r4, #12]
 800ce6e:	4393      	bics	r3, r2
 800ce70:	81a3      	strh	r3, [r4, #12]
 800ce72:	2300      	movs	r3, #0
 800ce74:	6063      	str	r3, [r4, #4]
 800ce76:	6923      	ldr	r3, [r4, #16]
 800ce78:	6023      	str	r3, [r4, #0]
 800ce7a:	2308      	movs	r3, #8
 800ce7c:	89a2      	ldrh	r2, [r4, #12]
 800ce7e:	4313      	orrs	r3, r2
 800ce80:	81a3      	strh	r3, [r4, #12]
 800ce82:	6923      	ldr	r3, [r4, #16]
 800ce84:	2b00      	cmp	r3, #0
 800ce86:	d10b      	bne.n	800cea0 <__swsetup_r+0x88>
 800ce88:	21a0      	movs	r1, #160	; 0xa0
 800ce8a:	2280      	movs	r2, #128	; 0x80
 800ce8c:	89a3      	ldrh	r3, [r4, #12]
 800ce8e:	0089      	lsls	r1, r1, #2
 800ce90:	0092      	lsls	r2, r2, #2
 800ce92:	400b      	ands	r3, r1
 800ce94:	4293      	cmp	r3, r2
 800ce96:	d003      	beq.n	800cea0 <__swsetup_r+0x88>
 800ce98:	0021      	movs	r1, r4
 800ce9a:	0028      	movs	r0, r5
 800ce9c:	f000 f892 	bl	800cfc4 <__smakebuf_r>
 800cea0:	220c      	movs	r2, #12
 800cea2:	5ea3      	ldrsh	r3, [r4, r2]
 800cea4:	2001      	movs	r0, #1
 800cea6:	001a      	movs	r2, r3
 800cea8:	b299      	uxth	r1, r3
 800ceaa:	4002      	ands	r2, r0
 800ceac:	4203      	tst	r3, r0
 800ceae:	d00f      	beq.n	800ced0 <__swsetup_r+0xb8>
 800ceb0:	2200      	movs	r2, #0
 800ceb2:	60a2      	str	r2, [r4, #8]
 800ceb4:	6962      	ldr	r2, [r4, #20]
 800ceb6:	4252      	negs	r2, r2
 800ceb8:	61a2      	str	r2, [r4, #24]
 800ceba:	2000      	movs	r0, #0
 800cebc:	6922      	ldr	r2, [r4, #16]
 800cebe:	4282      	cmp	r2, r0
 800cec0:	d1c4      	bne.n	800ce4c <__swsetup_r+0x34>
 800cec2:	0609      	lsls	r1, r1, #24
 800cec4:	d5c2      	bpl.n	800ce4c <__swsetup_r+0x34>
 800cec6:	2240      	movs	r2, #64	; 0x40
 800cec8:	4313      	orrs	r3, r2
 800ceca:	81a3      	strh	r3, [r4, #12]
 800cecc:	3801      	subs	r0, #1
 800cece:	e7bd      	b.n	800ce4c <__swsetup_r+0x34>
 800ced0:	0788      	lsls	r0, r1, #30
 800ced2:	d400      	bmi.n	800ced6 <__swsetup_r+0xbe>
 800ced4:	6962      	ldr	r2, [r4, #20]
 800ced6:	60a2      	str	r2, [r4, #8]
 800ced8:	e7ef      	b.n	800ceba <__swsetup_r+0xa2>
 800ceda:	46c0      	nop			; (mov r8, r8)
 800cedc:	200001e0 	.word	0x200001e0

0800cee0 <_raise_r>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	0004      	movs	r4, r0
 800cee4:	000d      	movs	r5, r1
 800cee6:	291f      	cmp	r1, #31
 800cee8:	d904      	bls.n	800cef4 <_raise_r+0x14>
 800ceea:	2316      	movs	r3, #22
 800ceec:	6003      	str	r3, [r0, #0]
 800ceee:	2001      	movs	r0, #1
 800cef0:	4240      	negs	r0, r0
 800cef2:	bd70      	pop	{r4, r5, r6, pc}
 800cef4:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d004      	beq.n	800cf04 <_raise_r+0x24>
 800cefa:	008a      	lsls	r2, r1, #2
 800cefc:	189b      	adds	r3, r3, r2
 800cefe:	681a      	ldr	r2, [r3, #0]
 800cf00:	2a00      	cmp	r2, #0
 800cf02:	d108      	bne.n	800cf16 <_raise_r+0x36>
 800cf04:	0020      	movs	r0, r4
 800cf06:	f000 f831 	bl	800cf6c <_getpid_r>
 800cf0a:	002a      	movs	r2, r5
 800cf0c:	0001      	movs	r1, r0
 800cf0e:	0020      	movs	r0, r4
 800cf10:	f000 f81a 	bl	800cf48 <_kill_r>
 800cf14:	e7ed      	b.n	800cef2 <_raise_r+0x12>
 800cf16:	2000      	movs	r0, #0
 800cf18:	2a01      	cmp	r2, #1
 800cf1a:	d0ea      	beq.n	800cef2 <_raise_r+0x12>
 800cf1c:	1c51      	adds	r1, r2, #1
 800cf1e:	d103      	bne.n	800cf28 <_raise_r+0x48>
 800cf20:	2316      	movs	r3, #22
 800cf22:	3001      	adds	r0, #1
 800cf24:	6023      	str	r3, [r4, #0]
 800cf26:	e7e4      	b.n	800cef2 <_raise_r+0x12>
 800cf28:	2400      	movs	r4, #0
 800cf2a:	0028      	movs	r0, r5
 800cf2c:	601c      	str	r4, [r3, #0]
 800cf2e:	4790      	blx	r2
 800cf30:	0020      	movs	r0, r4
 800cf32:	e7de      	b.n	800cef2 <_raise_r+0x12>

0800cf34 <raise>:
 800cf34:	b510      	push	{r4, lr}
 800cf36:	4b03      	ldr	r3, [pc, #12]	; (800cf44 <raise+0x10>)
 800cf38:	0001      	movs	r1, r0
 800cf3a:	6818      	ldr	r0, [r3, #0]
 800cf3c:	f7ff ffd0 	bl	800cee0 <_raise_r>
 800cf40:	bd10      	pop	{r4, pc}
 800cf42:	46c0      	nop			; (mov r8, r8)
 800cf44:	200001e0 	.word	0x200001e0

0800cf48 <_kill_r>:
 800cf48:	2300      	movs	r3, #0
 800cf4a:	b570      	push	{r4, r5, r6, lr}
 800cf4c:	4d06      	ldr	r5, [pc, #24]	; (800cf68 <_kill_r+0x20>)
 800cf4e:	0004      	movs	r4, r0
 800cf50:	0008      	movs	r0, r1
 800cf52:	0011      	movs	r1, r2
 800cf54:	602b      	str	r3, [r5, #0]
 800cf56:	f7f7 ff0f 	bl	8004d78 <_kill>
 800cf5a:	1c43      	adds	r3, r0, #1
 800cf5c:	d103      	bne.n	800cf66 <_kill_r+0x1e>
 800cf5e:	682b      	ldr	r3, [r5, #0]
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d000      	beq.n	800cf66 <_kill_r+0x1e>
 800cf64:	6023      	str	r3, [r4, #0]
 800cf66:	bd70      	pop	{r4, r5, r6, pc}
 800cf68:	20001940 	.word	0x20001940

0800cf6c <_getpid_r>:
 800cf6c:	b510      	push	{r4, lr}
 800cf6e:	f7f7 fefd 	bl	8004d6c <_getpid>
 800cf72:	bd10      	pop	{r4, pc}

0800cf74 <__swhatbuf_r>:
 800cf74:	b570      	push	{r4, r5, r6, lr}
 800cf76:	000e      	movs	r6, r1
 800cf78:	001d      	movs	r5, r3
 800cf7a:	230e      	movs	r3, #14
 800cf7c:	5ec9      	ldrsh	r1, [r1, r3]
 800cf7e:	0014      	movs	r4, r2
 800cf80:	b096      	sub	sp, #88	; 0x58
 800cf82:	2900      	cmp	r1, #0
 800cf84:	da0c      	bge.n	800cfa0 <__swhatbuf_r+0x2c>
 800cf86:	89b2      	ldrh	r2, [r6, #12]
 800cf88:	2380      	movs	r3, #128	; 0x80
 800cf8a:	0011      	movs	r1, r2
 800cf8c:	4019      	ands	r1, r3
 800cf8e:	421a      	tst	r2, r3
 800cf90:	d013      	beq.n	800cfba <__swhatbuf_r+0x46>
 800cf92:	2100      	movs	r1, #0
 800cf94:	3b40      	subs	r3, #64	; 0x40
 800cf96:	2000      	movs	r0, #0
 800cf98:	6029      	str	r1, [r5, #0]
 800cf9a:	6023      	str	r3, [r4, #0]
 800cf9c:	b016      	add	sp, #88	; 0x58
 800cf9e:	bd70      	pop	{r4, r5, r6, pc}
 800cfa0:	466a      	mov	r2, sp
 800cfa2:	f000 f84d 	bl	800d040 <_fstat_r>
 800cfa6:	2800      	cmp	r0, #0
 800cfa8:	dbed      	blt.n	800cf86 <__swhatbuf_r+0x12>
 800cfaa:	23f0      	movs	r3, #240	; 0xf0
 800cfac:	9901      	ldr	r1, [sp, #4]
 800cfae:	021b      	lsls	r3, r3, #8
 800cfb0:	4019      	ands	r1, r3
 800cfb2:	4b03      	ldr	r3, [pc, #12]	; (800cfc0 <__swhatbuf_r+0x4c>)
 800cfb4:	18c9      	adds	r1, r1, r3
 800cfb6:	424b      	negs	r3, r1
 800cfb8:	4159      	adcs	r1, r3
 800cfba:	2380      	movs	r3, #128	; 0x80
 800cfbc:	00db      	lsls	r3, r3, #3
 800cfbe:	e7ea      	b.n	800cf96 <__swhatbuf_r+0x22>
 800cfc0:	ffffe000 	.word	0xffffe000

0800cfc4 <__smakebuf_r>:
 800cfc4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cfc6:	2602      	movs	r6, #2
 800cfc8:	898b      	ldrh	r3, [r1, #12]
 800cfca:	0005      	movs	r5, r0
 800cfcc:	000c      	movs	r4, r1
 800cfce:	4233      	tst	r3, r6
 800cfd0:	d006      	beq.n	800cfe0 <__smakebuf_r+0x1c>
 800cfd2:	0023      	movs	r3, r4
 800cfd4:	3347      	adds	r3, #71	; 0x47
 800cfd6:	6023      	str	r3, [r4, #0]
 800cfd8:	6123      	str	r3, [r4, #16]
 800cfda:	2301      	movs	r3, #1
 800cfdc:	6163      	str	r3, [r4, #20]
 800cfde:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
 800cfe0:	466a      	mov	r2, sp
 800cfe2:	ab01      	add	r3, sp, #4
 800cfe4:	f7ff ffc6 	bl	800cf74 <__swhatbuf_r>
 800cfe8:	9900      	ldr	r1, [sp, #0]
 800cfea:	0007      	movs	r7, r0
 800cfec:	0028      	movs	r0, r5
 800cfee:	f7fc feeb 	bl	8009dc8 <_malloc_r>
 800cff2:	2800      	cmp	r0, #0
 800cff4:	d108      	bne.n	800d008 <__smakebuf_r+0x44>
 800cff6:	220c      	movs	r2, #12
 800cff8:	5ea3      	ldrsh	r3, [r4, r2]
 800cffa:	059a      	lsls	r2, r3, #22
 800cffc:	d4ef      	bmi.n	800cfde <__smakebuf_r+0x1a>
 800cffe:	2203      	movs	r2, #3
 800d000:	4393      	bics	r3, r2
 800d002:	431e      	orrs	r6, r3
 800d004:	81a6      	strh	r6, [r4, #12]
 800d006:	e7e4      	b.n	800cfd2 <__smakebuf_r+0xe>
 800d008:	2380      	movs	r3, #128	; 0x80
 800d00a:	89a2      	ldrh	r2, [r4, #12]
 800d00c:	6020      	str	r0, [r4, #0]
 800d00e:	4313      	orrs	r3, r2
 800d010:	81a3      	strh	r3, [r4, #12]
 800d012:	9b00      	ldr	r3, [sp, #0]
 800d014:	6120      	str	r0, [r4, #16]
 800d016:	6163      	str	r3, [r4, #20]
 800d018:	9b01      	ldr	r3, [sp, #4]
 800d01a:	2b00      	cmp	r3, #0
 800d01c:	d00c      	beq.n	800d038 <__smakebuf_r+0x74>
 800d01e:	0028      	movs	r0, r5
 800d020:	230e      	movs	r3, #14
 800d022:	5ee1      	ldrsh	r1, [r4, r3]
 800d024:	f000 f81e 	bl	800d064 <_isatty_r>
 800d028:	2800      	cmp	r0, #0
 800d02a:	d005      	beq.n	800d038 <__smakebuf_r+0x74>
 800d02c:	2303      	movs	r3, #3
 800d02e:	89a2      	ldrh	r2, [r4, #12]
 800d030:	439a      	bics	r2, r3
 800d032:	3b02      	subs	r3, #2
 800d034:	4313      	orrs	r3, r2
 800d036:	81a3      	strh	r3, [r4, #12]
 800d038:	89a3      	ldrh	r3, [r4, #12]
 800d03a:	433b      	orrs	r3, r7
 800d03c:	81a3      	strh	r3, [r4, #12]
 800d03e:	e7ce      	b.n	800cfde <__smakebuf_r+0x1a>

0800d040 <_fstat_r>:
 800d040:	2300      	movs	r3, #0
 800d042:	b570      	push	{r4, r5, r6, lr}
 800d044:	4d06      	ldr	r5, [pc, #24]	; (800d060 <_fstat_r+0x20>)
 800d046:	0004      	movs	r4, r0
 800d048:	0008      	movs	r0, r1
 800d04a:	0011      	movs	r1, r2
 800d04c:	602b      	str	r3, [r5, #0]
 800d04e:	f7f7 fef2 	bl	8004e36 <_fstat>
 800d052:	1c43      	adds	r3, r0, #1
 800d054:	d103      	bne.n	800d05e <_fstat_r+0x1e>
 800d056:	682b      	ldr	r3, [r5, #0]
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d000      	beq.n	800d05e <_fstat_r+0x1e>
 800d05c:	6023      	str	r3, [r4, #0]
 800d05e:	bd70      	pop	{r4, r5, r6, pc}
 800d060:	20001940 	.word	0x20001940

0800d064 <_isatty_r>:
 800d064:	2300      	movs	r3, #0
 800d066:	b570      	push	{r4, r5, r6, lr}
 800d068:	4d06      	ldr	r5, [pc, #24]	; (800d084 <_isatty_r+0x20>)
 800d06a:	0004      	movs	r4, r0
 800d06c:	0008      	movs	r0, r1
 800d06e:	602b      	str	r3, [r5, #0]
 800d070:	f7f7 feef 	bl	8004e52 <_isatty>
 800d074:	1c43      	adds	r3, r0, #1
 800d076:	d103      	bne.n	800d080 <_isatty_r+0x1c>
 800d078:	682b      	ldr	r3, [r5, #0]
 800d07a:	2b00      	cmp	r3, #0
 800d07c:	d000      	beq.n	800d080 <_isatty_r+0x1c>
 800d07e:	6023      	str	r3, [r4, #0]
 800d080:	bd70      	pop	{r4, r5, r6, pc}
 800d082:	46c0      	nop			; (mov r8, r8)
 800d084:	20001940 	.word	0x20001940

0800d088 <_init>:
 800d088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d08a:	46c0      	nop			; (mov r8, r8)
 800d08c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d08e:	bc08      	pop	{r3}
 800d090:	469e      	mov	lr, r3
 800d092:	4770      	bx	lr

0800d094 <_fini>:
 800d094:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d096:	46c0      	nop			; (mov r8, r8)
 800d098:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d09a:	bc08      	pop	{r3}
 800d09c:	469e      	mov	lr, r3
 800d09e:	4770      	bx	lr
